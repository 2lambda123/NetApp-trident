// Copyright 2019 NetApp, Inc. All Rights Reserved.

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	netappv1 "github.com/netapp/trident/persistent_store/crd/apis/netapp/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeTridentStorageClasses implements TridentStorageClassInterface
type FakeTridentStorageClasses struct {
	Fake *FakeTridentV1
	ns   string
}

var tridentstorageclassesResource = schema.GroupVersionResource{Group: "trident.netapp.io", Version: "v1", Resource: "tridentstorageclasses"}

var tridentstorageclassesKind = schema.GroupVersionKind{Group: "trident.netapp.io", Version: "v1", Kind: "TridentStorageClass"}

// Get takes name of the tridentStorageClass, and returns the corresponding tridentStorageClass object, and an error if there is any.
func (c *FakeTridentStorageClasses) Get(name string, options v1.GetOptions) (result *netappv1.TridentStorageClass, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(tridentstorageclassesResource, c.ns, name), &netappv1.TridentStorageClass{})

	if obj == nil {
		return nil, err
	}
	return obj.(*netappv1.TridentStorageClass), err
}

// List takes label and field selectors, and returns the list of TridentStorageClasses that match those selectors.
func (c *FakeTridentStorageClasses) List(opts v1.ListOptions) (result *netappv1.TridentStorageClassList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(tridentstorageclassesResource, tridentstorageclassesKind, c.ns, opts), &netappv1.TridentStorageClassList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &netappv1.TridentStorageClassList{ListMeta: obj.(*netappv1.TridentStorageClassList).ListMeta}
	for _, item := range obj.(*netappv1.TridentStorageClassList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested tridentStorageClasses.
func (c *FakeTridentStorageClasses) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(tridentstorageclassesResource, c.ns, opts))

}

// Create takes the representation of a tridentStorageClass and creates it.  Returns the server's representation of the tridentStorageClass, and an error, if there is any.
func (c *FakeTridentStorageClasses) Create(tridentStorageClass *netappv1.TridentStorageClass) (result *netappv1.TridentStorageClass, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(tridentstorageclassesResource, c.ns, tridentStorageClass), &netappv1.TridentStorageClass{})

	if obj == nil {
		return nil, err
	}
	return obj.(*netappv1.TridentStorageClass), err
}

// Update takes the representation of a tridentStorageClass and updates it. Returns the server's representation of the tridentStorageClass, and an error, if there is any.
func (c *FakeTridentStorageClasses) Update(tridentStorageClass *netappv1.TridentStorageClass) (result *netappv1.TridentStorageClass, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(tridentstorageclassesResource, c.ns, tridentStorageClass), &netappv1.TridentStorageClass{})

	if obj == nil {
		return nil, err
	}
	return obj.(*netappv1.TridentStorageClass), err
}

// Delete takes name of the tridentStorageClass and deletes it. Returns an error if one occurs.
func (c *FakeTridentStorageClasses) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(tridentstorageclassesResource, c.ns, name), &netappv1.TridentStorageClass{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeTridentStorageClasses) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(tridentstorageclassesResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &netappv1.TridentStorageClassList{})
	return err
}

// Patch applies the patch and returns the patched tridentStorageClass.
func (c *FakeTridentStorageClasses) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *netappv1.TridentStorageClass, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(tridentstorageclassesResource, c.ns, name, pt, data, subresources...), &netappv1.TridentStorageClass{})

	if obj == nil {
		return nil, err
	}
	return obj.(*netappv1.TridentStorageClass), err
}
