// Copyright 2018 NetApp, Inc. All Rights Reserved.
// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	netappv1 "github.com/netapp/trident/persistent_store/kubernetes/apis/netapp/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeBackends implements BackendInterface
type FakeBackends struct {
	Fake *FakeTridentV1
}

var backendsResource = schema.GroupVersionResource{Group: "trident.netapp.io", Version: "v1", Resource: "backends"}

var backendsKind = schema.GroupVersionKind{Group: "trident.netapp.io", Version: "v1", Kind: "Backend"}

// Get takes name of the backend, and returns the corresponding backend object, and an error if there is any.
func (c *FakeBackends) Get(name string, options v1.GetOptions) (result *netappv1.Backend, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(backendsResource, name), &netappv1.Backend{})
	if obj == nil {
		return nil, err
	}
	return obj.(*netappv1.Backend), err
}

// List takes label and field selectors, and returns the list of Backends that match those selectors.
func (c *FakeBackends) List(opts v1.ListOptions) (result *netappv1.BackendList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(backendsResource, backendsKind, opts), &netappv1.BackendList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &netappv1.BackendList{}
	for _, item := range obj.(*netappv1.BackendList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested backends.
func (c *FakeBackends) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(backendsResource, opts))
}

// Create takes the representation of a backend and creates it.  Returns the server's representation of the backend, and an error, if there is any.
func (c *FakeBackends) Create(backend *netappv1.Backend) (result *netappv1.Backend, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(backendsResource, backend), &netappv1.Backend{})
	if obj == nil {
		return nil, err
	}
	return obj.(*netappv1.Backend), err
}

// Update takes the representation of a backend and updates it. Returns the server's representation of the backend, and an error, if there is any.
func (c *FakeBackends) Update(backend *netappv1.Backend) (result *netappv1.Backend, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(backendsResource, backend), &netappv1.Backend{})
	if obj == nil {
		return nil, err
	}
	return obj.(*netappv1.Backend), err
}

// Delete takes name of the backend and deletes it. Returns an error if one occurs.
func (c *FakeBackends) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(backendsResource, name), &netappv1.Backend{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeBackends) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(backendsResource, listOptions)

	_, err := c.Fake.Invokes(action, &netappv1.BackendList{})
	return err
}

// Patch applies the patch and returns the patched backend.
func (c *FakeBackends) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *netappv1.Backend, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(backendsResource, name, data, subresources...), &netappv1.Backend{})
	if obj == nil {
		return nil, err
	}
	return obj.(*netappv1.Backend), err
}
