// Copyright 2018 NetApp, Inc. All Rights Reserved.
// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/netapp/trident/persistent_store/kubernetes/apis/netapp/v1"
	scheme "github.com/netapp/trident/persistent_store/kubernetes/client/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// MutexesGetter has a method to return a MutexInterface.
// A group's client should implement this interface.
type MutexesGetter interface {
	Mutexes() MutexInterface
}

// MutexInterface has methods to work with Mutex resources.
type MutexInterface interface {
	Create(*v1.Mutex) (*v1.Mutex, error)
	Update(*v1.Mutex) (*v1.Mutex, error)
	Delete(name string, options *metav1.DeleteOptions) error
	DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error
	Get(name string, options metav1.GetOptions) (*v1.Mutex, error)
	List(opts metav1.ListOptions) (*v1.MutexList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.Mutex, err error)
	MutexExpansion
}

// mutexes implements MutexInterface
type mutexes struct {
	client rest.Interface
}

// newMutexes returns a Mutexes
func newMutexes(c *TridentV1Client) *mutexes {
	return &mutexes{
		client: c.RESTClient(),
	}
}

// Get takes name of the mutex, and returns the corresponding mutex object, and an error if there is any.
func (c *mutexes) Get(name string, options metav1.GetOptions) (result *v1.Mutex, err error) {
	result = &v1.Mutex{}
	err = c.client.Get().
		Resource("mutexes").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of Mutexes that match those selectors.
func (c *mutexes) List(opts metav1.ListOptions) (result *v1.MutexList, err error) {
	result = &v1.MutexList{}
	err = c.client.Get().
		Resource("mutexes").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested mutexes.
func (c *mutexes) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Resource("mutexes").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a mutex and creates it.  Returns the server's representation of the mutex, and an error, if there is any.
func (c *mutexes) Create(mutex *v1.Mutex) (result *v1.Mutex, err error) {
	result = &v1.Mutex{}
	err = c.client.Post().
		Resource("mutexes").
		Body(mutex).
		Do().
		Into(result)
	return
}

// Update takes the representation of a mutex and updates it. Returns the server's representation of the mutex, and an error, if there is any.
func (c *mutexes) Update(mutex *v1.Mutex) (result *v1.Mutex, err error) {
	result = &v1.Mutex{}
	err = c.client.Put().
		Resource("mutexes").
		Name(mutex.Name).
		Body(mutex).
		Do().
		Into(result)
	return
}

// Delete takes name of the mutex and deletes it. Returns an error if one occurs.
func (c *mutexes) Delete(name string, options *metav1.DeleteOptions) error {
	return c.client.Delete().
		Resource("mutexes").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *mutexes) DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error {
	return c.client.Delete().
		Resource("mutexes").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched mutex.
func (c *mutexes) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.Mutex, err error) {
	result = &v1.Mutex{}
	err = c.client.Patch(pt).
		Resource("mutexes").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
