// Copyright 2018 NetApp, Inc. All Rights Reserved.
// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/netapp/trident/persistent_store/kubernetes/apis/netapp/v1"
	scheme "github.com/netapp/trident/persistent_store/kubernetes/client/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// VolumeTransactionsGetter has a method to return a VolumeTransactionInterface.
// A group's client should implement this interface.
type VolumeTransactionsGetter interface {
	VolumeTransactions() VolumeTransactionInterface
}

// VolumeTransactionInterface has methods to work with VolumeTransaction resources.
type VolumeTransactionInterface interface {
	Create(*v1.VolumeTransaction) (*v1.VolumeTransaction, error)
	Update(*v1.VolumeTransaction) (*v1.VolumeTransaction, error)
	Delete(name string, options *metav1.DeleteOptions) error
	DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error
	Get(name string, options metav1.GetOptions) (*v1.VolumeTransaction, error)
	List(opts metav1.ListOptions) (*v1.VolumeTransactionList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.VolumeTransaction, err error)
	VolumeTransactionExpansion
}

// volumeTransactions implements VolumeTransactionInterface
type volumeTransactions struct {
	client rest.Interface
}

// newVolumeTransactions returns a VolumeTransactions
func newVolumeTransactions(c *TridentV1Client) *volumeTransactions {
	return &volumeTransactions{
		client: c.RESTClient(),
	}
}

// Get takes name of the volumeTransaction, and returns the corresponding volumeTransaction object, and an error if there is any.
func (c *volumeTransactions) Get(name string, options metav1.GetOptions) (result *v1.VolumeTransaction, err error) {
	result = &v1.VolumeTransaction{}
	err = c.client.Get().
		Resource("volumetransactions").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of VolumeTransactions that match those selectors.
func (c *volumeTransactions) List(opts metav1.ListOptions) (result *v1.VolumeTransactionList, err error) {
	result = &v1.VolumeTransactionList{}
	err = c.client.Get().
		Resource("volumetransactions").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested volumeTransactions.
func (c *volumeTransactions) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Resource("volumetransactions").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a volumeTransaction and creates it.  Returns the server's representation of the volumeTransaction, and an error, if there is any.
func (c *volumeTransactions) Create(volumeTransaction *v1.VolumeTransaction) (result *v1.VolumeTransaction, err error) {
	result = &v1.VolumeTransaction{}
	err = c.client.Post().
		Resource("volumetransactions").
		Body(volumeTransaction).
		Do().
		Into(result)
	return
}

// Update takes the representation of a volumeTransaction and updates it. Returns the server's representation of the volumeTransaction, and an error, if there is any.
func (c *volumeTransactions) Update(volumeTransaction *v1.VolumeTransaction) (result *v1.VolumeTransaction, err error) {
	result = &v1.VolumeTransaction{}
	err = c.client.Put().
		Resource("volumetransactions").
		Name(volumeTransaction.Name).
		Body(volumeTransaction).
		Do().
		Into(result)
	return
}

// Delete takes name of the volumeTransaction and deletes it. Returns an error if one occurs.
func (c *volumeTransactions) Delete(name string, options *metav1.DeleteOptions) error {
	return c.client.Delete().
		Resource("volumetransactions").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *volumeTransactions) DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error {
	return c.client.Delete().
		Resource("volumetransactions").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched volumeTransaction.
func (c *volumeTransactions) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.VolumeTransaction, err error) {
	result = &v1.VolumeTransaction{}
	err = c.client.Patch(pt).
		Resource("volumetransactions").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
