// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VolumeProtocolRawPerformanceStatCreate volume protocol raw performance stat create
//
// swagger:model volume_protocol_raw_performance_stat_create
type VolumeProtocolRawPerformanceStatCreate struct {

	// dir
	Dir *VolumeProtocolRawPerformanceStatCreateDir `json:"dir,omitempty"`

	// file
	File *VolumeProtocolRawPerformanceStatCreateFile `json:"file,omitempty"`

	// other
	Other *VolumeProtocolRawPerformanceStatCreateOther `json:"other,omitempty"`

	// symlink
	Symlink *VolumeProtocolRawPerformanceStatCreateSymlink `json:"symlink,omitempty"`
}

// Validate validates this volume protocol raw performance stat create
func (m *VolumeProtocolRawPerformanceStatCreate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDir(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOther(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSymlink(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VolumeProtocolRawPerformanceStatCreate) validateDir(formats strfmt.Registry) error {
	if swag.IsZero(m.Dir) { // not required
		return nil
	}

	if m.Dir != nil {
		if err := m.Dir.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dir")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeProtocolRawPerformanceStatCreate) validateFile(formats strfmt.Registry) error {
	if swag.IsZero(m.File) { // not required
		return nil
	}

	if m.File != nil {
		if err := m.File.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("file")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeProtocolRawPerformanceStatCreate) validateOther(formats strfmt.Registry) error {
	if swag.IsZero(m.Other) { // not required
		return nil
	}

	if m.Other != nil {
		if err := m.Other.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("other")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeProtocolRawPerformanceStatCreate) validateSymlink(formats strfmt.Registry) error {
	if swag.IsZero(m.Symlink) { // not required
		return nil
	}

	if m.Symlink != nil {
		if err := m.Symlink.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("symlink")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this volume protocol raw performance stat create based on the context it is used
func (m *VolumeProtocolRawPerformanceStatCreate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDir(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFile(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOther(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSymlink(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VolumeProtocolRawPerformanceStatCreate) contextValidateDir(ctx context.Context, formats strfmt.Registry) error {

	if m.Dir != nil {
		if err := m.Dir.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dir")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeProtocolRawPerformanceStatCreate) contextValidateFile(ctx context.Context, formats strfmt.Registry) error {

	if m.File != nil {
		if err := m.File.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("file")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeProtocolRawPerformanceStatCreate) contextValidateOther(ctx context.Context, formats strfmt.Registry) error {

	if m.Other != nil {
		if err := m.Other.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("other")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeProtocolRawPerformanceStatCreate) contextValidateSymlink(ctx context.Context, formats strfmt.Registry) error {

	if m.Symlink != nil {
		if err := m.Symlink.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("symlink")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VolumeProtocolRawPerformanceStatCreate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeProtocolRawPerformanceStatCreate) UnmarshalBinary(b []byte) error {
	var res VolumeProtocolRawPerformanceStatCreate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VolumeProtocolRawPerformanceStatCreateDir Raw count and latency data for directory-create operations.
//
// swagger:model VolumeProtocolRawPerformanceStatCreateDir
type VolumeProtocolRawPerformanceStatCreateDir struct {

	// Number of operations of the given type performed on this volume.
	// Example: 1000
	Count int64 `json:"count,omitempty"`

	// The raw data component latency in microseconds measured within ONTAP for all operations of the given type.
	// Example: 200
	TotalTime int64 `json:"total_time,omitempty"`
}

// Validate validates this volume protocol raw performance stat create dir
func (m *VolumeProtocolRawPerformanceStatCreateDir) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this volume protocol raw performance stat create dir based on context it is used
func (m *VolumeProtocolRawPerformanceStatCreateDir) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VolumeProtocolRawPerformanceStatCreateDir) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeProtocolRawPerformanceStatCreateDir) UnmarshalBinary(b []byte) error {
	var res VolumeProtocolRawPerformanceStatCreateDir
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VolumeProtocolRawPerformanceStatCreateFile Raw count and latency data for file-create operations.
//
// swagger:model VolumeProtocolRawPerformanceStatCreateFile
type VolumeProtocolRawPerformanceStatCreateFile struct {

	// Number of operations of the given type performed on this volume.
	// Example: 1000
	Count int64 `json:"count,omitempty"`

	// The raw data component latency in microseconds measured within ONTAP for all operations of the given type.
	// Example: 200
	TotalTime int64 `json:"total_time,omitempty"`
}

// Validate validates this volume protocol raw performance stat create file
func (m *VolumeProtocolRawPerformanceStatCreateFile) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this volume protocol raw performance stat create file based on context it is used
func (m *VolumeProtocolRawPerformanceStatCreateFile) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VolumeProtocolRawPerformanceStatCreateFile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeProtocolRawPerformanceStatCreateFile) UnmarshalBinary(b []byte) error {
	var res VolumeProtocolRawPerformanceStatCreateFile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VolumeProtocolRawPerformanceStatCreateOther Raw count and latency data for create operations on objects other than files, directories and symlinks.
//
// swagger:model VolumeProtocolRawPerformanceStatCreateOther
type VolumeProtocolRawPerformanceStatCreateOther struct {

	// Number of operations of the given type performed on this volume.
	// Example: 1000
	Count int64 `json:"count,omitempty"`

	// The raw data component latency in microseconds measured within ONTAP for all operations of the given type.
	// Example: 200
	TotalTime int64 `json:"total_time,omitempty"`
}

// Validate validates this volume protocol raw performance stat create other
func (m *VolumeProtocolRawPerformanceStatCreateOther) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this volume protocol raw performance stat create other based on context it is used
func (m *VolumeProtocolRawPerformanceStatCreateOther) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VolumeProtocolRawPerformanceStatCreateOther) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeProtocolRawPerformanceStatCreateOther) UnmarshalBinary(b []byte) error {
	var res VolumeProtocolRawPerformanceStatCreateOther
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VolumeProtocolRawPerformanceStatCreateSymlink Raw count and latency data for symlink-create operations.
//
// swagger:model VolumeProtocolRawPerformanceStatCreateSymlink
type VolumeProtocolRawPerformanceStatCreateSymlink struct {

	// Number of operations of the given type performed on this volume.
	// Example: 1000
	Count int64 `json:"count,omitempty"`

	// The raw data component latency in microseconds measured within ONTAP for all operations of the given type.
	// Example: 200
	TotalTime int64 `json:"total_time,omitempty"`
}

// Validate validates this volume protocol raw performance stat create symlink
func (m *VolumeProtocolRawPerformanceStatCreateSymlink) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this volume protocol raw performance stat create symlink based on context it is used
func (m *VolumeProtocolRawPerformanceStatCreateSymlink) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VolumeProtocolRawPerformanceStatCreateSymlink) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeProtocolRawPerformanceStatCreateSymlink) UnmarshalBinary(b []byte) error {
	var res VolumeProtocolRawPerformanceStatCreateSymlink
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
