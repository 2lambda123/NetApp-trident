// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuditSchedule Rotates the audit logs based on a schedule by using the time-based rotation parameters in any combination. The rotation schedule is calculated by using all the time-related values.
//
// swagger:model audit_schedule
type AuditSchedule struct {

	// Specifies the day of the month schedule to rotate audit log. Leave empty for all.
	Days []int64 `json:"days,omitempty"`

	// Specifies the hourly schedule to rotate audit log. Leave empty for all.
	Hours []*int64 `json:"hours,omitempty"`

	// Specifies the minutes schedule to rotate the audit log.
	Minutes []*int64 `json:"minutes,omitempty"`

	// Specifies the months schedule to rotate audit log. Leave empty for all.
	Months []int64 `json:"months,omitempty"`

	// Specifies the weekdays schedule to rotate audit log. Leave empty for all.
	Weekdays []*int64 `json:"weekdays,omitempty"`
}

// Validate validates this audit schedule
func (m *AuditSchedule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDays(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHours(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinutes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonths(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeekdays(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuditSchedule) validateDays(formats strfmt.Registry) error {
	if swag.IsZero(m.Days) { // not required
		return nil
	}

	for i := 0; i < len(m.Days); i++ {

		if err := validate.MinimumInt("days"+"."+strconv.Itoa(i), "body", m.Days[i], 1, false); err != nil {
			return err
		}

		if err := validate.MaximumInt("days"+"."+strconv.Itoa(i), "body", m.Days[i], 31, false); err != nil {
			return err
		}

	}

	return nil
}

func (m *AuditSchedule) validateHours(formats strfmt.Registry) error {
	if swag.IsZero(m.Hours) { // not required
		return nil
	}

	for i := 0; i < len(m.Hours); i++ {
		if swag.IsZero(m.Hours[i]) { // not required
			continue
		}

		if err := validate.MinimumInt("hours"+"."+strconv.Itoa(i), "body", *m.Hours[i], 0, false); err != nil {
			return err
		}

		if err := validate.MaximumInt("hours"+"."+strconv.Itoa(i), "body", *m.Hours[i], 23, false); err != nil {
			return err
		}

	}

	return nil
}

func (m *AuditSchedule) validateMinutes(formats strfmt.Registry) error {
	if swag.IsZero(m.Minutes) { // not required
		return nil
	}

	for i := 0; i < len(m.Minutes); i++ {
		if swag.IsZero(m.Minutes[i]) { // not required
			continue
		}

		if err := validate.MinimumInt("minutes"+"."+strconv.Itoa(i), "body", *m.Minutes[i], 0, false); err != nil {
			return err
		}

		if err := validate.MaximumInt("minutes"+"."+strconv.Itoa(i), "body", *m.Minutes[i], 59, false); err != nil {
			return err
		}

	}

	return nil
}

func (m *AuditSchedule) validateMonths(formats strfmt.Registry) error {
	if swag.IsZero(m.Months) { // not required
		return nil
	}

	for i := 0; i < len(m.Months); i++ {

		if err := validate.MinimumInt("months"+"."+strconv.Itoa(i), "body", m.Months[i], 1, false); err != nil {
			return err
		}

		if err := validate.MaximumInt("months"+"."+strconv.Itoa(i), "body", m.Months[i], 12, false); err != nil {
			return err
		}

	}

	return nil
}

func (m *AuditSchedule) validateWeekdays(formats strfmt.Registry) error {
	if swag.IsZero(m.Weekdays) { // not required
		return nil
	}

	for i := 0; i < len(m.Weekdays); i++ {
		if swag.IsZero(m.Weekdays[i]) { // not required
			continue
		}

		if err := validate.MinimumInt("weekdays"+"."+strconv.Itoa(i), "body", *m.Weekdays[i], 0, false); err != nil {
			return err
		}

		if err := validate.MaximumInt("weekdays"+"."+strconv.Itoa(i), "body", *m.Weekdays[i], 6, false); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this audit schedule based on context it is used
func (m *AuditSchedule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AuditSchedule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuditSchedule) UnmarshalBinary(b []byte) error {
	var res AuditSchedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HELLO RIPPY
