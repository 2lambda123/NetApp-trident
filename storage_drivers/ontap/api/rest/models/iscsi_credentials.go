// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IscsiCredentials iscsi credentials
//
// swagger:model iscsi_credentials
type IscsiCredentials struct {

	// links
	Links *IscsiCredentialsLinks `json:"_links,omitempty"`

	// The iSCSI authentication type. Required in POST and optional in PATCH.
	// Enum: [chap none deny]
	AuthenticationType string `json:"authentication_type,omitempty"`

	// chap
	Chap *IscsiCredentialsChap `json:"chap,omitempty"`

	// The iSCSI initiator to which the credentials apply. Required in POST.
	//
	// Example: iqn.1998-01.com.corp.iscsi:name1
	Initiator string `json:"initiator,omitempty"`

	// initiator address
	InitiatorAddress *IscsiCredentialsInitiatorAddress `json:"initiator_address,omitempty"`

	// svm
	Svm *IscsiCredentialsSvm `json:"svm,omitempty"`
}

// Validate validates this iscsi credentials
func (m *IscsiCredentials) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthenticationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChap(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitiatorAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvm(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IscsiCredentials) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

var iscsiCredentialsTypeAuthenticationTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["chap","none","deny"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		iscsiCredentialsTypeAuthenticationTypePropEnum = append(iscsiCredentialsTypeAuthenticationTypePropEnum, v)
	}
}

const (

	// BEGIN RIPPY DEBUGGING
	// iscsi_credentials
	// IscsiCredentials
	// authentication_type
	// AuthenticationType
	// chap
	// END RIPPY DEBUGGING
	// IscsiCredentialsAuthenticationTypeChap captures enum value "chap"
	IscsiCredentialsAuthenticationTypeChap string = "chap"

	// BEGIN RIPPY DEBUGGING
	// iscsi_credentials
	// IscsiCredentials
	// authentication_type
	// AuthenticationType
	// none
	// END RIPPY DEBUGGING
	// IscsiCredentialsAuthenticationTypeNone captures enum value "none"
	IscsiCredentialsAuthenticationTypeNone string = "none"

	// BEGIN RIPPY DEBUGGING
	// iscsi_credentials
	// IscsiCredentials
	// authentication_type
	// AuthenticationType
	// deny
	// END RIPPY DEBUGGING
	// IscsiCredentialsAuthenticationTypeDeny captures enum value "deny"
	IscsiCredentialsAuthenticationTypeDeny string = "deny"
)

// prop value enum
func (m *IscsiCredentials) validateAuthenticationTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, iscsiCredentialsTypeAuthenticationTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IscsiCredentials) validateAuthenticationType(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthenticationType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthenticationTypeEnum("authentication_type", "body", m.AuthenticationType); err != nil {
		return err
	}

	return nil
}

func (m *IscsiCredentials) validateChap(formats strfmt.Registry) error {
	if swag.IsZero(m.Chap) { // not required
		return nil
	}

	if m.Chap != nil {
		if err := m.Chap.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("chap")
			}
			return err
		}
	}

	return nil
}

func (m *IscsiCredentials) validateInitiatorAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.InitiatorAddress) { // not required
		return nil
	}

	if m.InitiatorAddress != nil {
		if err := m.InitiatorAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("initiator_address")
			}
			return err
		}
	}

	return nil
}

func (m *IscsiCredentials) validateSvm(formats strfmt.Registry) error {
	if swag.IsZero(m.Svm) { // not required
		return nil
	}

	if m.Svm != nil {
		if err := m.Svm.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svm")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this iscsi credentials based on the context it is used
func (m *IscsiCredentials) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateChap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInitiatorAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSvm(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IscsiCredentials) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *IscsiCredentials) contextValidateChap(ctx context.Context, formats strfmt.Registry) error {

	if m.Chap != nil {
		if err := m.Chap.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("chap")
			}
			return err
		}
	}

	return nil
}

func (m *IscsiCredentials) contextValidateInitiatorAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.InitiatorAddress != nil {
		if err := m.InitiatorAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("initiator_address")
			}
			return err
		}
	}

	return nil
}

func (m *IscsiCredentials) contextValidateSvm(ctx context.Context, formats strfmt.Registry) error {

	if m.Svm != nil {
		if err := m.Svm.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svm")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IscsiCredentials) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IscsiCredentials) UnmarshalBinary(b []byte) error {
	var res IscsiCredentials
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IscsiCredentialsChap Challenge-Handshake Authentication Protocol (CHAP) credentials.
//
// swagger:model IscsiCredentialsChap
type IscsiCredentialsChap struct {

	// inbound
	Inbound *IscsiCredentialsChapInbound `json:"inbound,omitempty"`

	// outbound
	Outbound *IscsiCredentialsChapOutbound `json:"outbound,omitempty"`
}

// Validate validates this iscsi credentials chap
func (m *IscsiCredentialsChap) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInbound(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutbound(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IscsiCredentialsChap) validateInbound(formats strfmt.Registry) error {
	if swag.IsZero(m.Inbound) { // not required
		return nil
	}

	if m.Inbound != nil {
		if err := m.Inbound.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("chap" + "." + "inbound")
			}
			return err
		}
	}

	return nil
}

func (m *IscsiCredentialsChap) validateOutbound(formats strfmt.Registry) error {
	if swag.IsZero(m.Outbound) { // not required
		return nil
	}

	if m.Outbound != nil {
		if err := m.Outbound.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("chap" + "." + "outbound")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this iscsi credentials chap based on the context it is used
func (m *IscsiCredentialsChap) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInbound(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOutbound(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IscsiCredentialsChap) contextValidateInbound(ctx context.Context, formats strfmt.Registry) error {

	if m.Inbound != nil {
		if err := m.Inbound.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("chap" + "." + "inbound")
			}
			return err
		}
	}

	return nil
}

func (m *IscsiCredentialsChap) contextValidateOutbound(ctx context.Context, formats strfmt.Registry) error {

	if m.Outbound != nil {
		if err := m.Outbound.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("chap" + "." + "outbound")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IscsiCredentialsChap) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IscsiCredentialsChap) UnmarshalBinary(b []byte) error {
	var res IscsiCredentialsChap
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IscsiCredentialsChapInbound Inbound CHAP credentials.
//
// swagger:model IscsiCredentialsChapInbound
type IscsiCredentialsChapInbound struct {

	// The inbound CHAP password. Write-only; optional in POST and PATCH.
	// Min Length: 1
	Password string `json:"password,omitempty"`

	// The inbound CHAP user name. Optional in POST and PATCH.
	// Max Length: 128
	// Min Length: 1
	User string `json:"user,omitempty"`
}

// Validate validates this iscsi credentials chap inbound
func (m *IscsiCredentialsChapInbound) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IscsiCredentialsChapInbound) validatePassword(formats strfmt.Registry) error {
	if swag.IsZero(m.Password) { // not required
		return nil
	}

	if err := validate.MinLength("chap"+"."+"inbound"+"."+"password", "body", m.Password, 1); err != nil {
		return err
	}

	return nil
}

func (m *IscsiCredentialsChapInbound) validateUser(formats strfmt.Registry) error {
	if swag.IsZero(m.User) { // not required
		return nil
	}

	if err := validate.MinLength("chap"+"."+"inbound"+"."+"user", "body", m.User, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("chap"+"."+"inbound"+"."+"user", "body", m.User, 128); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this iscsi credentials chap inbound based on context it is used
func (m *IscsiCredentialsChapInbound) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IscsiCredentialsChapInbound) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IscsiCredentialsChapInbound) UnmarshalBinary(b []byte) error {
	var res IscsiCredentialsChapInbound
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IscsiCredentialsChapOutbound Output CHAP credentials.
//
// swagger:model IscsiCredentialsChapOutbound
type IscsiCredentialsChapOutbound struct {

	// The outbound CHAP password. Write-only; optional in POST and PATCH.
	// Min Length: 1
	Password string `json:"password,omitempty"`

	// The outbound CHAP user name. Optional in POST and PATCH.
	// Max Length: 128
	// Min Length: 1
	User string `json:"user,omitempty"`
}

// Validate validates this iscsi credentials chap outbound
func (m *IscsiCredentialsChapOutbound) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IscsiCredentialsChapOutbound) validatePassword(formats strfmt.Registry) error {
	if swag.IsZero(m.Password) { // not required
		return nil
	}

	if err := validate.MinLength("chap"+"."+"outbound"+"."+"password", "body", m.Password, 1); err != nil {
		return err
	}

	return nil
}

func (m *IscsiCredentialsChapOutbound) validateUser(formats strfmt.Registry) error {
	if swag.IsZero(m.User) { // not required
		return nil
	}

	if err := validate.MinLength("chap"+"."+"outbound"+"."+"user", "body", m.User, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("chap"+"."+"outbound"+"."+"user", "body", m.User, 128); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this iscsi credentials chap outbound based on context it is used
func (m *IscsiCredentialsChapOutbound) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IscsiCredentialsChapOutbound) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IscsiCredentialsChapOutbound) UnmarshalBinary(b []byte) error {
	var res IscsiCredentialsChapOutbound
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IscsiCredentialsInitiatorAddress Initiator address ranges.
//
// swagger:model IscsiCredentialsInitiatorAddress
type IscsiCredentialsInitiatorAddress struct {

	// masks
	Masks []*IPInfo `json:"masks,omitempty"`

	// ranges
	Ranges []*IPAddressRange `json:"ranges,omitempty"`
}

// Validate validates this iscsi credentials initiator address
func (m *IscsiCredentialsInitiatorAddress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMasks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRanges(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IscsiCredentialsInitiatorAddress) validateMasks(formats strfmt.Registry) error {
	if swag.IsZero(m.Masks) { // not required
		return nil
	}

	for i := 0; i < len(m.Masks); i++ {
		if swag.IsZero(m.Masks[i]) { // not required
			continue
		}

		if m.Masks[i] != nil {
			if err := m.Masks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("initiator_address" + "." + "masks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IscsiCredentialsInitiatorAddress) validateRanges(formats strfmt.Registry) error {
	if swag.IsZero(m.Ranges) { // not required
		return nil
	}

	for i := 0; i < len(m.Ranges); i++ {
		if swag.IsZero(m.Ranges[i]) { // not required
			continue
		}

		if m.Ranges[i] != nil {
			if err := m.Ranges[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("initiator_address" + "." + "ranges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this iscsi credentials initiator address based on the context it is used
func (m *IscsiCredentialsInitiatorAddress) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMasks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRanges(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IscsiCredentialsInitiatorAddress) contextValidateMasks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Masks); i++ {

		if m.Masks[i] != nil {
			if err := m.Masks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("initiator_address" + "." + "masks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IscsiCredentialsInitiatorAddress) contextValidateRanges(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Ranges); i++ {

		if m.Ranges[i] != nil {
			if err := m.Ranges[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("initiator_address" + "." + "ranges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IscsiCredentialsInitiatorAddress) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IscsiCredentialsInitiatorAddress) UnmarshalBinary(b []byte) error {
	var res IscsiCredentialsInitiatorAddress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IscsiCredentialsLinks iscsi credentials links
//
// swagger:model IscsiCredentialsLinks
type IscsiCredentialsLinks struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this iscsi credentials links
func (m *IscsiCredentialsLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IscsiCredentialsLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this iscsi credentials links based on the context it is used
func (m *IscsiCredentialsLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IscsiCredentialsLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IscsiCredentialsLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IscsiCredentialsLinks) UnmarshalBinary(b []byte) error {
	var res IscsiCredentialsLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IscsiCredentialsSvm iscsi credentials svm
//
// swagger:model IscsiCredentialsSvm
type IscsiCredentialsSvm struct {

	// links
	Links *IscsiCredentialsSvmLinks `json:"_links,omitempty"`

	// The name of the SVM.
	//
	// Example: svm1
	Name string `json:"name,omitempty"`

	// The unique identifier of the SVM.
	//
	// Example: 02c9e252-41be-11e9-81d5-00a0986138f7
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this iscsi credentials svm
func (m *IscsiCredentialsSvm) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IscsiCredentialsSvm) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svm" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this iscsi credentials svm based on the context it is used
func (m *IscsiCredentialsSvm) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IscsiCredentialsSvm) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svm" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IscsiCredentialsSvm) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IscsiCredentialsSvm) UnmarshalBinary(b []byte) error {
	var res IscsiCredentialsSvm
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IscsiCredentialsSvmLinks iscsi credentials svm links
//
// swagger:model IscsiCredentialsSvmLinks
type IscsiCredentialsSvmLinks struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this iscsi credentials svm links
func (m *IscsiCredentialsSvmLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IscsiCredentialsSvmLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svm" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this iscsi credentials svm links based on the context it is used
func (m *IscsiCredentialsSvmLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IscsiCredentialsSvmLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svm" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IscsiCredentialsSvmLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IscsiCredentialsSvmLinks) UnmarshalBinary(b []byte) error {
	var res IscsiCredentialsSvmLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HELLO RIPPY
