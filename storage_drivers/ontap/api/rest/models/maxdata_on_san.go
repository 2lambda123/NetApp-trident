// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MaxdataOnSan MAX Data application using SAN.
//
// swagger:model maxdata_on_san
type MaxdataOnSan struct {

	// Type of the application that is being deployed on the L2.
	// Required: true
	// Enum: [mongodb oracle san]
	AppType *string `json:"app_type"`

	// The list of application components to be created.
	// Required: true
	// Max Items: 20
	// Min Items: 1
	ApplicationComponents []*MaxdataOnSanApplicationComponents `json:"application_components"`

	// metadata
	Metadata []*MaxdataOnSanMetadataItems0 `json:"metadata,omitempty"`

	// The list of initiator groups to create.
	// Max Items: 20
	// Min Items: 0
	NewIgroups []*MaxdataOnSanNewIgroups `json:"new_igroups,omitempty"`

	// The OnCommand System Manager URL for this application.
	// Read Only: true
	OcsmURL string `json:"ocsm_url,omitempty"`

	// The name of the host OS running the application.
	// Required: true
	// Enum: [aix hpux hyper_v linux netware openvms solaris solaris_efi vmware windows windows_2008 windows_gpt xen]
	OsType *string `json:"os_type"`
}

// Validate validates this maxdata on san
func (m *MaxdataOnSan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApplicationComponents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewIgroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var maxdataOnSanTypeAppTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mongodb","oracle","san"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		maxdataOnSanTypeAppTypePropEnum = append(maxdataOnSanTypeAppTypePropEnum, v)
	}
}

const (

	// BEGIN RIPPY DEBUGGING
	// maxdata_on_san
	// MaxdataOnSan
	// app_type
	// AppType
	// mongodb
	// END RIPPY DEBUGGING
	// MaxdataOnSanAppTypeMongodb captures enum value "mongodb"
	MaxdataOnSanAppTypeMongodb string = "mongodb"

	// BEGIN RIPPY DEBUGGING
	// maxdata_on_san
	// MaxdataOnSan
	// app_type
	// AppType
	// oracle
	// END RIPPY DEBUGGING
	// MaxdataOnSanAppTypeOracle captures enum value "oracle"
	MaxdataOnSanAppTypeOracle string = "oracle"

	// BEGIN RIPPY DEBUGGING
	// maxdata_on_san
	// MaxdataOnSan
	// app_type
	// AppType
	// san
	// END RIPPY DEBUGGING
	// MaxdataOnSanAppTypeSan captures enum value "san"
	MaxdataOnSanAppTypeSan string = "san"
)

// prop value enum
func (m *MaxdataOnSan) validateAppTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, maxdataOnSanTypeAppTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MaxdataOnSan) validateAppType(formats strfmt.Registry) error {

	if err := validate.Required("app_type", "body", m.AppType); err != nil {
		return err
	}

	// value enum
	if err := m.validateAppTypeEnum("app_type", "body", *m.AppType); err != nil {
		return err
	}

	return nil
}

func (m *MaxdataOnSan) validateApplicationComponents(formats strfmt.Registry) error {

	if err := validate.Required("application_components", "body", m.ApplicationComponents); err != nil {
		return err
	}

	iApplicationComponentsSize := int64(len(m.ApplicationComponents))

	if err := validate.MinItems("application_components", "body", iApplicationComponentsSize, 1); err != nil {
		return err
	}

	if err := validate.MaxItems("application_components", "body", iApplicationComponentsSize, 20); err != nil {
		return err
	}

	for i := 0; i < len(m.ApplicationComponents); i++ {
		if swag.IsZero(m.ApplicationComponents[i]) { // not required
			continue
		}

		if m.ApplicationComponents[i] != nil {
			if err := m.ApplicationComponents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("application_components" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MaxdataOnSan) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	for i := 0; i < len(m.Metadata); i++ {
		if swag.IsZero(m.Metadata[i]) { // not required
			continue
		}

		if m.Metadata[i] != nil {
			if err := m.Metadata[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("metadata" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MaxdataOnSan) validateNewIgroups(formats strfmt.Registry) error {
	if swag.IsZero(m.NewIgroups) { // not required
		return nil
	}

	iNewIgroupsSize := int64(len(m.NewIgroups))

	if err := validate.MinItems("new_igroups", "body", iNewIgroupsSize, 0); err != nil {
		return err
	}

	if err := validate.MaxItems("new_igroups", "body", iNewIgroupsSize, 20); err != nil {
		return err
	}

	for i := 0; i < len(m.NewIgroups); i++ {
		if swag.IsZero(m.NewIgroups[i]) { // not required
			continue
		}

		if m.NewIgroups[i] != nil {
			if err := m.NewIgroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("new_igroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var maxdataOnSanTypeOsTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["aix","hpux","hyper_v","linux","netware","openvms","solaris","solaris_efi","vmware","windows","windows_2008","windows_gpt","xen"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		maxdataOnSanTypeOsTypePropEnum = append(maxdataOnSanTypeOsTypePropEnum, v)
	}
}

const (

	// BEGIN RIPPY DEBUGGING
	// maxdata_on_san
	// MaxdataOnSan
	// os_type
	// OsType
	// aix
	// END RIPPY DEBUGGING
	// MaxdataOnSanOsTypeAix captures enum value "aix"
	MaxdataOnSanOsTypeAix string = "aix"

	// BEGIN RIPPY DEBUGGING
	// maxdata_on_san
	// MaxdataOnSan
	// os_type
	// OsType
	// hpux
	// END RIPPY DEBUGGING
	// MaxdataOnSanOsTypeHpux captures enum value "hpux"
	MaxdataOnSanOsTypeHpux string = "hpux"

	// BEGIN RIPPY DEBUGGING
	// maxdata_on_san
	// MaxdataOnSan
	// os_type
	// OsType
	// hyper_v
	// END RIPPY DEBUGGING
	// MaxdataOnSanOsTypeHyperv captures enum value "hyper_v"
	MaxdataOnSanOsTypeHyperv string = "hyper_v"

	// BEGIN RIPPY DEBUGGING
	// maxdata_on_san
	// MaxdataOnSan
	// os_type
	// OsType
	// linux
	// END RIPPY DEBUGGING
	// MaxdataOnSanOsTypeLinux captures enum value "linux"
	MaxdataOnSanOsTypeLinux string = "linux"

	// BEGIN RIPPY DEBUGGING
	// maxdata_on_san
	// MaxdataOnSan
	// os_type
	// OsType
	// netware
	// END RIPPY DEBUGGING
	// MaxdataOnSanOsTypeNetware captures enum value "netware"
	MaxdataOnSanOsTypeNetware string = "netware"

	// BEGIN RIPPY DEBUGGING
	// maxdata_on_san
	// MaxdataOnSan
	// os_type
	// OsType
	// openvms
	// END RIPPY DEBUGGING
	// MaxdataOnSanOsTypeOpenvms captures enum value "openvms"
	MaxdataOnSanOsTypeOpenvms string = "openvms"

	// BEGIN RIPPY DEBUGGING
	// maxdata_on_san
	// MaxdataOnSan
	// os_type
	// OsType
	// solaris
	// END RIPPY DEBUGGING
	// MaxdataOnSanOsTypeSolaris captures enum value "solaris"
	MaxdataOnSanOsTypeSolaris string = "solaris"

	// BEGIN RIPPY DEBUGGING
	// maxdata_on_san
	// MaxdataOnSan
	// os_type
	// OsType
	// solaris_efi
	// END RIPPY DEBUGGING
	// MaxdataOnSanOsTypeSolarisEfi captures enum value "solaris_efi"
	MaxdataOnSanOsTypeSolarisEfi string = "solaris_efi"

	// BEGIN RIPPY DEBUGGING
	// maxdata_on_san
	// MaxdataOnSan
	// os_type
	// OsType
	// vmware
	// END RIPPY DEBUGGING
	// MaxdataOnSanOsTypeVmware captures enum value "vmware"
	MaxdataOnSanOsTypeVmware string = "vmware"

	// BEGIN RIPPY DEBUGGING
	// maxdata_on_san
	// MaxdataOnSan
	// os_type
	// OsType
	// windows
	// END RIPPY DEBUGGING
	// MaxdataOnSanOsTypeWindows captures enum value "windows"
	MaxdataOnSanOsTypeWindows string = "windows"

	// BEGIN RIPPY DEBUGGING
	// maxdata_on_san
	// MaxdataOnSan
	// os_type
	// OsType
	// windows_2008
	// END RIPPY DEBUGGING
	// MaxdataOnSanOsTypeWindows2008 captures enum value "windows_2008"
	MaxdataOnSanOsTypeWindows2008 string = "windows_2008"

	// BEGIN RIPPY DEBUGGING
	// maxdata_on_san
	// MaxdataOnSan
	// os_type
	// OsType
	// windows_gpt
	// END RIPPY DEBUGGING
	// MaxdataOnSanOsTypeWindowsGpt captures enum value "windows_gpt"
	MaxdataOnSanOsTypeWindowsGpt string = "windows_gpt"

	// BEGIN RIPPY DEBUGGING
	// maxdata_on_san
	// MaxdataOnSan
	// os_type
	// OsType
	// xen
	// END RIPPY DEBUGGING
	// MaxdataOnSanOsTypeXen captures enum value "xen"
	MaxdataOnSanOsTypeXen string = "xen"
)

// prop value enum
func (m *MaxdataOnSan) validateOsTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, maxdataOnSanTypeOsTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MaxdataOnSan) validateOsType(formats strfmt.Registry) error {

	if err := validate.Required("os_type", "body", m.OsType); err != nil {
		return err
	}

	// value enum
	if err := m.validateOsTypeEnum("os_type", "body", *m.OsType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this maxdata on san based on the context it is used
func (m *MaxdataOnSan) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApplicationComponents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNewIgroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOcsmURL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MaxdataOnSan) contextValidateApplicationComponents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ApplicationComponents); i++ {

		if m.ApplicationComponents[i] != nil {
			if err := m.ApplicationComponents[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("application_components" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MaxdataOnSan) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Metadata); i++ {

		if m.Metadata[i] != nil {
			if err := m.Metadata[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("metadata" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MaxdataOnSan) contextValidateNewIgroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NewIgroups); i++ {

		if m.NewIgroups[i] != nil {
			if err := m.NewIgroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("new_igroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MaxdataOnSan) contextValidateOcsmURL(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "ocsm_url", "body", string(m.OcsmURL)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MaxdataOnSan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MaxdataOnSan) UnmarshalBinary(b []byte) error {
	var res MaxdataOnSan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MaxdataOnSanMetadataItems0 maxdata on san metadata items0
//
// swagger:model MaxdataOnSanMetadataItems0
type MaxdataOnSanMetadataItems0 struct {

	// Key to look up metadata associated with an application.
	Key string `json:"key,omitempty"`

	// Value associated with the key.
	Value string `json:"value,omitempty"`
}

// Validate validates this maxdata on san metadata items0
func (m *MaxdataOnSanMetadataItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this maxdata on san metadata items0 based on context it is used
func (m *MaxdataOnSanMetadataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MaxdataOnSanMetadataItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MaxdataOnSanMetadataItems0) UnmarshalBinary(b []byte) error {
	var res MaxdataOnSanMetadataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HELLO RIPPY
