// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OracleRacOnSanNewIgroups The list of initiator groups to create.
//
// swagger:model oracle_rac_on_san_new_igroups
type OracleRacOnSanNewIgroups struct {

	// initiators
	Initiators []string `json:"initiators,omitempty"`

	// The name of the new initiator group.
	// Required: true
	// Max Length: 96
	// Min Length: 1
	Name *string `json:"name"`

	// The name of the host OS accessing the application. The default value is the host OS that is running the application.
	// Enum: [aix hpux hyper_v linux solaris vmware windows xen]
	OsType string `json:"os_type,omitempty"`

	// The protocol of the new initiator group.
	// Enum: [fcp iscsi mixed]
	Protocol *string `json:"protocol,omitempty"`
}

// Validate validates this oracle rac on san new igroups
func (m *OracleRacOnSanNewIgroups) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleRacOnSanNewIgroups) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 96); err != nil {
		return err
	}

	return nil
}

var oracleRacOnSanNewIgroupsTypeOsTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["aix","hpux","hyper_v","linux","solaris","vmware","windows","xen"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oracleRacOnSanNewIgroupsTypeOsTypePropEnum = append(oracleRacOnSanNewIgroupsTypeOsTypePropEnum, v)
	}
}

const (

	// BEGIN RIPPY DEBUGGING
	// oracle_rac_on_san_new_igroups
	// OracleRacOnSanNewIgroups
	// os_type
	// OsType
	// aix
	// END RIPPY DEBUGGING
	// OracleRacOnSanNewIgroupsOsTypeAix captures enum value "aix"
	OracleRacOnSanNewIgroupsOsTypeAix string = "aix"

	// BEGIN RIPPY DEBUGGING
	// oracle_rac_on_san_new_igroups
	// OracleRacOnSanNewIgroups
	// os_type
	// OsType
	// hpux
	// END RIPPY DEBUGGING
	// OracleRacOnSanNewIgroupsOsTypeHpux captures enum value "hpux"
	OracleRacOnSanNewIgroupsOsTypeHpux string = "hpux"

	// BEGIN RIPPY DEBUGGING
	// oracle_rac_on_san_new_igroups
	// OracleRacOnSanNewIgroups
	// os_type
	// OsType
	// hyper_v
	// END RIPPY DEBUGGING
	// OracleRacOnSanNewIgroupsOsTypeHyperv captures enum value "hyper_v"
	OracleRacOnSanNewIgroupsOsTypeHyperv string = "hyper_v"

	// BEGIN RIPPY DEBUGGING
	// oracle_rac_on_san_new_igroups
	// OracleRacOnSanNewIgroups
	// os_type
	// OsType
	// linux
	// END RIPPY DEBUGGING
	// OracleRacOnSanNewIgroupsOsTypeLinux captures enum value "linux"
	OracleRacOnSanNewIgroupsOsTypeLinux string = "linux"

	// BEGIN RIPPY DEBUGGING
	// oracle_rac_on_san_new_igroups
	// OracleRacOnSanNewIgroups
	// os_type
	// OsType
	// solaris
	// END RIPPY DEBUGGING
	// OracleRacOnSanNewIgroupsOsTypeSolaris captures enum value "solaris"
	OracleRacOnSanNewIgroupsOsTypeSolaris string = "solaris"

	// BEGIN RIPPY DEBUGGING
	// oracle_rac_on_san_new_igroups
	// OracleRacOnSanNewIgroups
	// os_type
	// OsType
	// vmware
	// END RIPPY DEBUGGING
	// OracleRacOnSanNewIgroupsOsTypeVmware captures enum value "vmware"
	OracleRacOnSanNewIgroupsOsTypeVmware string = "vmware"

	// BEGIN RIPPY DEBUGGING
	// oracle_rac_on_san_new_igroups
	// OracleRacOnSanNewIgroups
	// os_type
	// OsType
	// windows
	// END RIPPY DEBUGGING
	// OracleRacOnSanNewIgroupsOsTypeWindows captures enum value "windows"
	OracleRacOnSanNewIgroupsOsTypeWindows string = "windows"

	// BEGIN RIPPY DEBUGGING
	// oracle_rac_on_san_new_igroups
	// OracleRacOnSanNewIgroups
	// os_type
	// OsType
	// xen
	// END RIPPY DEBUGGING
	// OracleRacOnSanNewIgroupsOsTypeXen captures enum value "xen"
	OracleRacOnSanNewIgroupsOsTypeXen string = "xen"
)

// prop value enum
func (m *OracleRacOnSanNewIgroups) validateOsTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oracleRacOnSanNewIgroupsTypeOsTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OracleRacOnSanNewIgroups) validateOsType(formats strfmt.Registry) error {
	if swag.IsZero(m.OsType) { // not required
		return nil
	}

	// value enum
	if err := m.validateOsTypeEnum("os_type", "body", m.OsType); err != nil {
		return err
	}

	return nil
}

var oracleRacOnSanNewIgroupsTypeProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["fcp","iscsi","mixed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oracleRacOnSanNewIgroupsTypeProtocolPropEnum = append(oracleRacOnSanNewIgroupsTypeProtocolPropEnum, v)
	}
}

const (

	// BEGIN RIPPY DEBUGGING
	// oracle_rac_on_san_new_igroups
	// OracleRacOnSanNewIgroups
	// protocol
	// Protocol
	// fcp
	// END RIPPY DEBUGGING
	// OracleRacOnSanNewIgroupsProtocolFcp captures enum value "fcp"
	OracleRacOnSanNewIgroupsProtocolFcp string = "fcp"

	// BEGIN RIPPY DEBUGGING
	// oracle_rac_on_san_new_igroups
	// OracleRacOnSanNewIgroups
	// protocol
	// Protocol
	// iscsi
	// END RIPPY DEBUGGING
	// OracleRacOnSanNewIgroupsProtocolIscsi captures enum value "iscsi"
	OracleRacOnSanNewIgroupsProtocolIscsi string = "iscsi"

	// BEGIN RIPPY DEBUGGING
	// oracle_rac_on_san_new_igroups
	// OracleRacOnSanNewIgroups
	// protocol
	// Protocol
	// mixed
	// END RIPPY DEBUGGING
	// OracleRacOnSanNewIgroupsProtocolMixed captures enum value "mixed"
	OracleRacOnSanNewIgroupsProtocolMixed string = "mixed"
)

// prop value enum
func (m *OracleRacOnSanNewIgroups) validateProtocolEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oracleRacOnSanNewIgroupsTypeProtocolPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OracleRacOnSanNewIgroups) validateProtocol(formats strfmt.Registry) error {
	if swag.IsZero(m.Protocol) { // not required
		return nil
	}

	// value enum
	if err := m.validateProtocolEnum("protocol", "body", *m.Protocol); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this oracle rac on san new igroups based on context it is used
func (m *OracleRacOnSanNewIgroups) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OracleRacOnSanNewIgroups) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleRacOnSanNewIgroups) UnmarshalBinary(b []byte) error {
	var res OracleRacOnSanNewIgroups
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HELLO RIPPY
