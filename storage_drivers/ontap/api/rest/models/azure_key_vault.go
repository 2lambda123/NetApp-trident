// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AzureKeyVault azure key vault
//
// swagger:model azure_key_vault
type AzureKeyVault struct {

	// links
	Links *AzureKeyVaultLinks `json:"_links,omitempty"`

	// azure reachability
	AzureReachability *AzureKeyVaultAzureReachability `json:"azure_reachability,omitempty"`

	// Application client ID of the deployed Azure application with appropriate access to an AKV.
	// Example: aaaaaaaa-bbbb-aaaa-bbbb-aaaaaaaaaaaa
	ClientID string `json:"client_id,omitempty"`

	// Password used by the application to prove its identity to AKV.
	// Example: abcdef
	// Format: password
	ClientSecret strfmt.Password `json:"client_secret,omitempty"`

	// ekmip reachability
	EkmipReachability []*AzureKeyVaultEkmipReachabilityItems0 `json:"ekmip_reachability,omitempty"`

	// Key Identifier of AKV key encryption key.
	// Example: https://keyvault1.vault.azure.net/keys/key1
	// Format: uri
	KeyID strfmt.URI `json:"key_id,omitempty"`

	// Name of the deployed AKV that will be used by ONTAP for storing keys.
	// Example: https://kmip-akv-keyvault.vault.azure.net/
	// Format: uri
	Name strfmt.URI `json:"name,omitempty"`

	// Proxy host.
	// Example: proxy.eng.com
	ProxyHost string `json:"proxy_host,omitempty"`

	// Proxy password. Password is not audited.
	// Example: proxypassword
	ProxyPassword string `json:"proxy_password,omitempty"`

	// Proxy port.
	// Example: 1234
	ProxyPort int64 `json:"proxy_port,omitempty"`

	// Type of proxy.
	// Example: http
	// Enum: [http https]
	ProxyType string `json:"proxy_type,omitempty"`

	// Proxy username.
	// Example: proxyuser
	ProxyUsername string `json:"proxy_username,omitempty"`

	// Set to "svm" for interfaces owned by an SVM. Otherwise, set to "cluster".
	// Enum: [svm cluster]
	Scope string `json:"scope,omitempty"`

	// state
	State *AzureKeyVaultStateType `json:"state,omitempty"`

	// svm
	Svm *AzureKeyVaultSvm `json:"svm,omitempty"`

	// Directory (tenant) ID of the deployed Azure application with appropriate access to an AKV.
	// Example: zzzzzzzz-yyyy-zzzz-yyyy-zzzzzzzzzzzz
	TenantID string `json:"tenant_id,omitempty"`

	// A unique identifier for the Azure Key Vault (AKV).
	// Example: 1cd8a442-86d1-11e0-ae1c-123478563412
	// Read Only: true
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this azure key vault
func (m *AzureKeyVault) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureReachability(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientSecret(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEkmipReachability(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeyID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProxyType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvm(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureKeyVault) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *AzureKeyVault) validateAzureReachability(formats strfmt.Registry) error {
	if swag.IsZero(m.AzureReachability) { // not required
		return nil
	}

	if m.AzureReachability != nil {
		if err := m.AzureReachability.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azure_reachability")
			}
			return err
		}
	}

	return nil
}

func (m *AzureKeyVault) validateClientSecret(formats strfmt.Registry) error {
	if swag.IsZero(m.ClientSecret) { // not required
		return nil
	}

	if err := validate.FormatOf("client_secret", "body", "password", m.ClientSecret.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AzureKeyVault) validateEkmipReachability(formats strfmt.Registry) error {
	if swag.IsZero(m.EkmipReachability) { // not required
		return nil
	}

	for i := 0; i < len(m.EkmipReachability); i++ {
		if swag.IsZero(m.EkmipReachability[i]) { // not required
			continue
		}

		if m.EkmipReachability[i] != nil {
			if err := m.EkmipReachability[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ekmip_reachability" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AzureKeyVault) validateKeyID(formats strfmt.Registry) error {
	if swag.IsZero(m.KeyID) { // not required
		return nil
	}

	if err := validate.FormatOf("key_id", "body", "uri", m.KeyID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AzureKeyVault) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.FormatOf("name", "body", "uri", m.Name.String(), formats); err != nil {
		return err
	}

	return nil
}

var azureKeyVaultTypeProxyTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["http","https"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		azureKeyVaultTypeProxyTypePropEnum = append(azureKeyVaultTypeProxyTypePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// azure_key_vault
	// AzureKeyVault
	// proxy_type
	// ProxyType
	// http
	// END DEBUGGING
	// AzureKeyVaultProxyTypeHTTP captures enum value "http"
	AzureKeyVaultProxyTypeHTTP string = "http"

	// BEGIN DEBUGGING
	// azure_key_vault
	// AzureKeyVault
	// proxy_type
	// ProxyType
	// https
	// END DEBUGGING
	// AzureKeyVaultProxyTypeHTTPS captures enum value "https"
	AzureKeyVaultProxyTypeHTTPS string = "https"
)

// prop value enum
func (m *AzureKeyVault) validateProxyTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, azureKeyVaultTypeProxyTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AzureKeyVault) validateProxyType(formats strfmt.Registry) error {
	if swag.IsZero(m.ProxyType) { // not required
		return nil
	}

	// value enum
	if err := m.validateProxyTypeEnum("proxy_type", "body", m.ProxyType); err != nil {
		return err
	}

	return nil
}

var azureKeyVaultTypeScopePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["svm","cluster"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		azureKeyVaultTypeScopePropEnum = append(azureKeyVaultTypeScopePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// azure_key_vault
	// AzureKeyVault
	// scope
	// Scope
	// svm
	// END DEBUGGING
	// AzureKeyVaultScopeSvm captures enum value "svm"
	AzureKeyVaultScopeSvm string = "svm"

	// BEGIN DEBUGGING
	// azure_key_vault
	// AzureKeyVault
	// scope
	// Scope
	// cluster
	// END DEBUGGING
	// AzureKeyVaultScopeCluster captures enum value "cluster"
	AzureKeyVaultScopeCluster string = "cluster"
)

// prop value enum
func (m *AzureKeyVault) validateScopeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, azureKeyVaultTypeScopePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AzureKeyVault) validateScope(formats strfmt.Registry) error {
	if swag.IsZero(m.Scope) { // not required
		return nil
	}

	// value enum
	if err := m.validateScopeEnum("scope", "body", m.Scope); err != nil {
		return err
	}

	return nil
}

func (m *AzureKeyVault) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	if m.State != nil {
		if err := m.State.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

func (m *AzureKeyVault) validateSvm(formats strfmt.Registry) error {
	if swag.IsZero(m.Svm) { // not required
		return nil
	}

	if m.Svm != nil {
		if err := m.Svm.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svm")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this azure key vault based on the context it is used
func (m *AzureKeyVault) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAzureReachability(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEkmipReachability(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSvm(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureKeyVault) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *AzureKeyVault) contextValidateAzureReachability(ctx context.Context, formats strfmt.Registry) error {

	if m.AzureReachability != nil {
		if err := m.AzureReachability.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azure_reachability")
			}
			return err
		}
	}

	return nil
}

func (m *AzureKeyVault) contextValidateEkmipReachability(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EkmipReachability); i++ {

		if m.EkmipReachability[i] != nil {
			if err := m.EkmipReachability[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ekmip_reachability" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AzureKeyVault) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if m.State != nil {
		if err := m.State.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

func (m *AzureKeyVault) contextValidateSvm(ctx context.Context, formats strfmt.Registry) error {

	if m.Svm != nil {
		if err := m.Svm.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svm")
			}
			return err
		}
	}

	return nil
}

func (m *AzureKeyVault) contextValidateUUID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "uuid", "body", string(m.UUID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AzureKeyVault) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AzureKeyVault) UnmarshalBinary(b []byte) error {
	var res AzureKeyVault
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AzureKeyVaultAzureReachability Indicates whether or not the AKV service is reachable from all the nodes in the cluster.
// This is an advanced property; there is an added cost to retrieving its value. The property is not populated for either a collection GET or an instance GET unless it is explicitly requested using the `fields` query parameter or GET for all advanced properties is enabled.
//
//
// swagger:model AzureKeyVaultAzureReachability
type AzureKeyVaultAzureReachability struct {

	// Code corresponding to the status message. Returns a 0 if AKV service is reachable from all nodes in the cluster.
	// Example: 346758
	Code int64 `json:"code,omitempty"`

	// Error message set when reachability is false.
	// Example: AKV service is not reachable from all nodes - reason.
	Message string `json:"message,omitempty"`

	// Set to true when the AKV service is reachable from all nodes of the cluster.
	Reachable bool `json:"reachable,omitempty"`
}

// Validate validates this azure key vault azure reachability
func (m *AzureKeyVaultAzureReachability) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this azure key vault azure reachability based on context it is used
func (m *AzureKeyVaultAzureReachability) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AzureKeyVaultAzureReachability) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AzureKeyVaultAzureReachability) UnmarshalBinary(b []byte) error {
	var res AzureKeyVaultAzureReachability
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AzureKeyVaultEkmipReachabilityItems0 Provides the connectivity status for the given SVM on the given node to all EKMIP servers configured on all nodes of the cluster.
// This is an advanced property; there is an added cost to retrieving its value. The property is not populated for either a collection GET or an instance GET unless it is explicitly requested using the `fields` query parameter or GET for all advanced properties is enabled.
//
//
// swagger:model AzureKeyVaultEkmipReachabilityItems0
type AzureKeyVaultEkmipReachabilityItems0 struct {

	// Code corresponding to the error message. Returns a 0 if a given SVM is able to communicate to the EKMIP servers of all of the nodes in the cluster.
	// Example: 346758
	Code int64 `json:"code,omitempty"`

	// Error message set when cluster-wide EKMIP server availability from the given SVM and node is false.
	// Example: embedded KMIP server status unavailable on node.
	Message string `json:"message,omitempty"`

	// node
	Node *AzureKeyVaultEkmipReachabilityItems0Node `json:"node,omitempty"`

	// Set to true if the given SVM on the given node is able to communicate to all EKMIP servers configured on all nodes in the cluster.
	Reachable bool `json:"reachable,omitempty"`
}

// Validate validates this azure key vault ekmip reachability items0
func (m *AzureKeyVaultEkmipReachabilityItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureKeyVaultEkmipReachabilityItems0) validateNode(formats strfmt.Registry) error {
	if swag.IsZero(m.Node) { // not required
		return nil
	}

	if m.Node != nil {
		if err := m.Node.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this azure key vault ekmip reachability items0 based on the context it is used
func (m *AzureKeyVaultEkmipReachabilityItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureKeyVaultEkmipReachabilityItems0) contextValidateNode(ctx context.Context, formats strfmt.Registry) error {

	if m.Node != nil {
		if err := m.Node.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AzureKeyVaultEkmipReachabilityItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AzureKeyVaultEkmipReachabilityItems0) UnmarshalBinary(b []byte) error {
	var res AzureKeyVaultEkmipReachabilityItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AzureKeyVaultEkmipReachabilityItems0Node azure key vault ekmip reachability items0 node
//
// swagger:model AzureKeyVaultEkmipReachabilityItems0Node
type AzureKeyVaultEkmipReachabilityItems0Node struct {

	// links
	Links *AzureKeyVaultEkmipReachabilityItems0NodeLinks `json:"_links,omitempty"`

	// name
	// Example: node1
	Name string `json:"name,omitempty"`

	// uuid
	// Example: 1cd8a442-86d1-11e0-ae1c-123478563412
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this azure key vault ekmip reachability items0 node
func (m *AzureKeyVaultEkmipReachabilityItems0Node) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureKeyVaultEkmipReachabilityItems0Node) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this azure key vault ekmip reachability items0 node based on the context it is used
func (m *AzureKeyVaultEkmipReachabilityItems0Node) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureKeyVaultEkmipReachabilityItems0Node) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AzureKeyVaultEkmipReachabilityItems0Node) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AzureKeyVaultEkmipReachabilityItems0Node) UnmarshalBinary(b []byte) error {
	var res AzureKeyVaultEkmipReachabilityItems0Node
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AzureKeyVaultEkmipReachabilityItems0NodeLinks azure key vault ekmip reachability items0 node links
//
// swagger:model AzureKeyVaultEkmipReachabilityItems0NodeLinks
type AzureKeyVaultEkmipReachabilityItems0NodeLinks struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this azure key vault ekmip reachability items0 node links
func (m *AzureKeyVaultEkmipReachabilityItems0NodeLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureKeyVaultEkmipReachabilityItems0NodeLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this azure key vault ekmip reachability items0 node links based on the context it is used
func (m *AzureKeyVaultEkmipReachabilityItems0NodeLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureKeyVaultEkmipReachabilityItems0NodeLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AzureKeyVaultEkmipReachabilityItems0NodeLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AzureKeyVaultEkmipReachabilityItems0NodeLinks) UnmarshalBinary(b []byte) error {
	var res AzureKeyVaultEkmipReachabilityItems0NodeLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AzureKeyVaultLinks azure key vault links
//
// swagger:model AzureKeyVaultLinks
type AzureKeyVaultLinks struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this azure key vault links
func (m *AzureKeyVaultLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureKeyVaultLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this azure key vault links based on the context it is used
func (m *AzureKeyVaultLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureKeyVaultLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AzureKeyVaultLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AzureKeyVaultLinks) UnmarshalBinary(b []byte) error {
	var res AzureKeyVaultLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AzureKeyVaultStateType Indicates whether or not the AKV wrapped internal key is available cluster wide.
// This is an advanced property; there is an added cost to retrieving its value. The property is not populated for either a collection GET or an instance GET unless it is explicitly requested using the `fields` query parameter or GET for all advanced properties is enabled.
//
//
// swagger:model AzureKeyVaultStateType
type AzureKeyVaultStateType struct {

	// Set to true when an AKV wrapped internal key is present on all nodes of the cluster.
	Available bool `json:"available,omitempty"`

	// Code corresponding to the status message. Returns a 0 if AKV wrapped key is available on all nodes in the cluster.
	// Example: 346758
	Code int64 `json:"code,omitempty"`

	// Error message set when top-level internal key protection key (KEK) availability on cluster is false.
	// Example: Top-level internal key protection key (KEK) is unavailable on the following nodes with the associated reasons: Node: node1. Reason: No volumes created yet for the SVM. Wrapped KEK status will be available after creating encrypted volumes.
	Message string `json:"message,omitempty"`
}

// Validate validates this azure key vault state type
func (m *AzureKeyVaultStateType) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this azure key vault state type based on context it is used
func (m *AzureKeyVaultStateType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AzureKeyVaultStateType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AzureKeyVaultStateType) UnmarshalBinary(b []byte) error {
	var res AzureKeyVaultStateType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AzureKeyVaultSvm azure key vault svm
//
// swagger:model AzureKeyVaultSvm
type AzureKeyVaultSvm struct {

	// links
	Links *AzureKeyVaultSvmLinks `json:"_links,omitempty"`

	// The name of the SVM.
	//
	// Example: svm1
	Name string `json:"name,omitempty"`

	// The unique identifier of the SVM.
	//
	// Example: 02c9e252-41be-11e9-81d5-00a0986138f7
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this azure key vault svm
func (m *AzureKeyVaultSvm) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureKeyVaultSvm) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svm" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this azure key vault svm based on the context it is used
func (m *AzureKeyVaultSvm) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureKeyVaultSvm) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svm" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AzureKeyVaultSvm) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AzureKeyVaultSvm) UnmarshalBinary(b []byte) error {
	var res AzureKeyVaultSvm
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AzureKeyVaultSvmLinks azure key vault svm links
//
// swagger:model AzureKeyVaultSvmLinks
type AzureKeyVaultSvmLinks struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this azure key vault svm links
func (m *AzureKeyVaultSvmLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureKeyVaultSvmLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svm" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this azure key vault svm links based on the context it is used
func (m *AzureKeyVaultSvmLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureKeyVaultSvmLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svm" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AzureKeyVaultSvmLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AzureKeyVaultSvmLinks) UnmarshalBinary(b []byte) error {
	var res AzureKeyVaultSvmLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
