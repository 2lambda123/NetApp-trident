// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Schedule Complete schedule information
//
// swagger:model schedule
type Schedule struct {

	// links
	Links *ScheduleLinks `json:"_links,omitempty"`

	// cluster
	Cluster *ScheduleCluster `json:"cluster,omitempty"`

	// cron
	Cron *ScheduleCron `json:"cron,omitempty"`

	// An ISO-8601 duration formatted string.
	// Example: P1DT2H3M4S
	Interval string `json:"interval,omitempty"`

	// Schedule name. Required in the URL or POST body.
	// Max Length: 256
	// Min Length: 1
	Name string `json:"name,omitempty"`

	// Schedule type
	// Read Only: true
	// Enum: [cron interval]
	Type string `json:"type,omitempty"`

	// Job schedule UUID
	// Example: 4ea7a442-86d1-11e0-ae1c-123478563412
	// Read Only: true
	// Format: uuid
	UUID strfmt.UUID `json:"uuid,omitempty"`
}

// Validate validates this schedule
func (m *Schedule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCron(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Schedule) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *Schedule) validateCluster(formats strfmt.Registry) error {
	if swag.IsZero(m.Cluster) { // not required
		return nil
	}

	if m.Cluster != nil {
		if err := m.Cluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *Schedule) validateCron(formats strfmt.Registry) error {
	if swag.IsZero(m.Cron) { // not required
		return nil
	}

	if m.Cron != nil {
		if err := m.Cron.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cron")
			}
			return err
		}
	}

	return nil
}

func (m *Schedule) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MinLength("name", "body", m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", m.Name, 256); err != nil {
		return err
	}

	return nil
}

var scheduleTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["cron","interval"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		scheduleTypeTypePropEnum = append(scheduleTypeTypePropEnum, v)
	}
}

const (

	// BEGIN RIPPY DEBUGGING
	// schedule
	// Schedule
	// type
	// Type
	// cron
	// END RIPPY DEBUGGING
	// ScheduleTypeCron captures enum value "cron"
	ScheduleTypeCron string = "cron"

	// BEGIN RIPPY DEBUGGING
	// schedule
	// Schedule
	// type
	// Type
	// interval
	// END RIPPY DEBUGGING
	// ScheduleTypeInterval captures enum value "interval"
	ScheduleTypeInterval string = "interval"
)

// prop value enum
func (m *Schedule) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, scheduleTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Schedule) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *Schedule) validateUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UUID) { // not required
		return nil
	}

	if err := validate.FormatOf("uuid", "body", "uuid", m.UUID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this schedule based on the context it is used
func (m *Schedule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCron(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Schedule) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *Schedule) contextValidateCluster(ctx context.Context, formats strfmt.Registry) error {

	if m.Cluster != nil {
		if err := m.Cluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *Schedule) contextValidateCron(ctx context.Context, formats strfmt.Registry) error {

	if m.Cron != nil {
		if err := m.Cron.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cron")
			}
			return err
		}
	}

	return nil
}

func (m *Schedule) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(m.Type)); err != nil {
		return err
	}

	return nil
}

func (m *Schedule) contextValidateUUID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "uuid", "body", strfmt.UUID(m.UUID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Schedule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Schedule) UnmarshalBinary(b []byte) error {
	var res Schedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ScheduleCluster The cluster that owns the schedule. Defaults to the local cluster.
//
// swagger:model ScheduleCluster
type ScheduleCluster struct {

	// Cluster name
	// Example: cluster1
	Name string `json:"name,omitempty"`

	// Cluster UUID
	// Example: 1cd8a442-86d1-11e0-ae1c-123478563412
	// Format: uuid
	UUID strfmt.UUID `json:"uuid,omitempty"`
}

// Validate validates this schedule cluster
func (m *ScheduleCluster) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScheduleCluster) validateUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UUID) { // not required
		return nil
	}

	if err := validate.FormatOf("cluster"+"."+"uuid", "body", "uuid", m.UUID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this schedule cluster based on context it is used
func (m *ScheduleCluster) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ScheduleCluster) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScheduleCluster) UnmarshalBinary(b []byte) error {
	var res ScheduleCluster
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ScheduleCron Details for schedules of type cron.
//
// swagger:model ScheduleCron
type ScheduleCron struct {

	// The days of the month the schedule runs. Leave empty for all.
	Days []int64 `json:"days,omitempty"`

	// The hours of the day the schedule runs. Leave empty for all.
	Hours []*int64 `json:"hours,omitempty"`

	// The minutes the schedule runs. Required on POST for a cron schedule.
	Minutes []*int64 `json:"minutes,omitempty"`

	// The months of the year the schedule runs. Leave empty for all.
	Months []int64 `json:"months,omitempty"`

	// The weekdays the schedule runs. Leave empty for all.
	Weekdays []*int64 `json:"weekdays,omitempty"`
}

// Validate validates this schedule cron
func (m *ScheduleCron) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDays(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHours(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinutes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonths(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeekdays(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScheduleCron) validateDays(formats strfmt.Registry) error {
	if swag.IsZero(m.Days) { // not required
		return nil
	}

	for i := 0; i < len(m.Days); i++ {

		if err := validate.MinimumInt("cron"+"."+"days"+"."+strconv.Itoa(i), "body", m.Days[i], 1, false); err != nil {
			return err
		}

		if err := validate.MaximumInt("cron"+"."+"days"+"."+strconv.Itoa(i), "body", m.Days[i], 31, false); err != nil {
			return err
		}

	}

	return nil
}

func (m *ScheduleCron) validateHours(formats strfmt.Registry) error {
	if swag.IsZero(m.Hours) { // not required
		return nil
	}

	for i := 0; i < len(m.Hours); i++ {
		if swag.IsZero(m.Hours[i]) { // not required
			continue
		}

		if err := validate.MinimumInt("cron"+"."+"hours"+"."+strconv.Itoa(i), "body", *m.Hours[i], 0, false); err != nil {
			return err
		}

		if err := validate.MaximumInt("cron"+"."+"hours"+"."+strconv.Itoa(i), "body", *m.Hours[i], 23, false); err != nil {
			return err
		}

	}

	return nil
}

func (m *ScheduleCron) validateMinutes(formats strfmt.Registry) error {
	if swag.IsZero(m.Minutes) { // not required
		return nil
	}

	for i := 0; i < len(m.Minutes); i++ {
		if swag.IsZero(m.Minutes[i]) { // not required
			continue
		}

		if err := validate.MinimumInt("cron"+"."+"minutes"+"."+strconv.Itoa(i), "body", *m.Minutes[i], 0, false); err != nil {
			return err
		}

		if err := validate.MaximumInt("cron"+"."+"minutes"+"."+strconv.Itoa(i), "body", *m.Minutes[i], 59, false); err != nil {
			return err
		}

	}

	return nil
}

func (m *ScheduleCron) validateMonths(formats strfmt.Registry) error {
	if swag.IsZero(m.Months) { // not required
		return nil
	}

	for i := 0; i < len(m.Months); i++ {

		if err := validate.MinimumInt("cron"+"."+"months"+"."+strconv.Itoa(i), "body", m.Months[i], 1, false); err != nil {
			return err
		}

		if err := validate.MaximumInt("cron"+"."+"months"+"."+strconv.Itoa(i), "body", m.Months[i], 12, false); err != nil {
			return err
		}

	}

	return nil
}

func (m *ScheduleCron) validateWeekdays(formats strfmt.Registry) error {
	if swag.IsZero(m.Weekdays) { // not required
		return nil
	}

	for i := 0; i < len(m.Weekdays); i++ {
		if swag.IsZero(m.Weekdays[i]) { // not required
			continue
		}

		if err := validate.MinimumInt("cron"+"."+"weekdays"+"."+strconv.Itoa(i), "body", *m.Weekdays[i], 0, false); err != nil {
			return err
		}

		if err := validate.MaximumInt("cron"+"."+"weekdays"+"."+strconv.Itoa(i), "body", *m.Weekdays[i], 6, false); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this schedule cron based on context it is used
func (m *ScheduleCron) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ScheduleCron) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScheduleCron) UnmarshalBinary(b []byte) error {
	var res ScheduleCron
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ScheduleLinks schedule links
//
// swagger:model ScheduleLinks
type ScheduleLinks struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this schedule links
func (m *ScheduleLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScheduleLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this schedule links based on the context it is used
func (m *ScheduleLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScheduleLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ScheduleLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScheduleLinks) UnmarshalBinary(b []byte) error {
	var res ScheduleLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HELLO RIPPY
