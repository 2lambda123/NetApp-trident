// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LicensePackageResponse license package response
//
// swagger:model license_package_response
type LicensePackageResponse struct {

	// links
	Links *LicensePackageResponseLinks `json:"_links,omitempty"`

	// Number of records
	NumRecords int64 `json:"num_records,omitempty"`

	// records
	Records []*LicensePackageResponseRecordsItems0 `json:"records,omitempty"`
}

// Validate validates this license package response
func (m *LicensePackageResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecords(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LicensePackageResponse) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *LicensePackageResponse) validateRecords(formats strfmt.Registry) error {
	if swag.IsZero(m.Records) { // not required
		return nil
	}

	for i := 0; i < len(m.Records); i++ {
		if swag.IsZero(m.Records[i]) { // not required
			continue
		}

		if m.Records[i] != nil {
			if err := m.Records[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("records" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this license package response based on the context it is used
func (m *LicensePackageResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecords(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LicensePackageResponse) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *LicensePackageResponse) contextValidateRecords(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Records); i++ {

		if m.Records[i] != nil {
			if err := m.Records[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("records" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *LicensePackageResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LicensePackageResponse) UnmarshalBinary(b []byte) error {
	var res LicensePackageResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// LicensePackageResponseLinks license package response links
//
// swagger:model LicensePackageResponseLinks
type LicensePackageResponseLinks struct {

	// next
	Next *Href `json:"next,omitempty"`

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this license package response links
func (m *LicensePackageResponseLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LicensePackageResponseLinks) validateNext(formats strfmt.Registry) error {
	if swag.IsZero(m.Next) { // not required
		return nil
	}

	if m.Next != nil {
		if err := m.Next.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "next")
			}
			return err
		}
	}

	return nil
}

func (m *LicensePackageResponseLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this license package response links based on the context it is used
func (m *LicensePackageResponseLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNext(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LicensePackageResponseLinks) contextValidateNext(ctx context.Context, formats strfmt.Registry) error {

	if m.Next != nil {
		if err := m.Next.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "next")
			}
			return err
		}
	}

	return nil
}

func (m *LicensePackageResponseLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LicensePackageResponseLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LicensePackageResponseLinks) UnmarshalBinary(b []byte) error {
	var res LicensePackageResponseLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// LicensePackageResponseRecordsItems0 license package response records items0
//
// swagger:model LicensePackageResponseRecordsItems0
type LicensePackageResponseRecordsItems0 struct {

	// links
	Links *LicensePackageResponseRecordsItems0Links `json:"_links,omitempty"`

	// keys
	Keys []string `json:"keys,omitempty"`

	// Installed licenses of the package.
	// Read Only: true
	Licenses []*LicensePackageResponseRecordsItems0LicensesItems0 `json:"licenses,omitempty"`

	// Name of the license.
	// Example: NFS
	// Read Only: true
	Name string `json:"name,omitempty"`

	// Scope of the license.
	// Read Only: true
	// Enum: [not_available site cluster node]
	Scope string `json:"scope,omitempty"`

	// Summary state of package based on all installed licenses.
	// Example: compliant
	// Read Only: true
	// Enum: [compliant noncompliant unlicensed unknown]
	State string `json:"state,omitempty"`
}

// Validate validates this license package response records items0
func (m *LicensePackageResponseRecordsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLicenses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LicensePackageResponseRecordsItems0) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *LicensePackageResponseRecordsItems0) validateLicenses(formats strfmt.Registry) error {
	if swag.IsZero(m.Licenses) { // not required
		return nil
	}

	for i := 0; i < len(m.Licenses); i++ {
		if swag.IsZero(m.Licenses[i]) { // not required
			continue
		}

		if m.Licenses[i] != nil {
			if err := m.Licenses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("licenses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var licensePackageResponseRecordsItems0TypeScopePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["not_available","site","cluster","node"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		licensePackageResponseRecordsItems0TypeScopePropEnum = append(licensePackageResponseRecordsItems0TypeScopePropEnum, v)
	}
}

const (

	// BEGIN RIPPY DEBUGGING
	// LicensePackageResponseRecordsItems0
	// LicensePackageResponseRecordsItems0
	// scope
	// Scope
	// not_available
	// END RIPPY DEBUGGING
	// LicensePackageResponseRecordsItems0ScopeNotAvailable captures enum value "not_available"
	LicensePackageResponseRecordsItems0ScopeNotAvailable string = "not_available"

	// BEGIN RIPPY DEBUGGING
	// LicensePackageResponseRecordsItems0
	// LicensePackageResponseRecordsItems0
	// scope
	// Scope
	// site
	// END RIPPY DEBUGGING
	// LicensePackageResponseRecordsItems0ScopeSite captures enum value "site"
	LicensePackageResponseRecordsItems0ScopeSite string = "site"

	// BEGIN RIPPY DEBUGGING
	// LicensePackageResponseRecordsItems0
	// LicensePackageResponseRecordsItems0
	// scope
	// Scope
	// cluster
	// END RIPPY DEBUGGING
	// LicensePackageResponseRecordsItems0ScopeCluster captures enum value "cluster"
	LicensePackageResponseRecordsItems0ScopeCluster string = "cluster"

	// BEGIN RIPPY DEBUGGING
	// LicensePackageResponseRecordsItems0
	// LicensePackageResponseRecordsItems0
	// scope
	// Scope
	// node
	// END RIPPY DEBUGGING
	// LicensePackageResponseRecordsItems0ScopeNode captures enum value "node"
	LicensePackageResponseRecordsItems0ScopeNode string = "node"
)

// prop value enum
func (m *LicensePackageResponseRecordsItems0) validateScopeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, licensePackageResponseRecordsItems0TypeScopePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *LicensePackageResponseRecordsItems0) validateScope(formats strfmt.Registry) error {
	if swag.IsZero(m.Scope) { // not required
		return nil
	}

	// value enum
	if err := m.validateScopeEnum("scope", "body", m.Scope); err != nil {
		return err
	}

	return nil
}

var licensePackageResponseRecordsItems0TypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["compliant","noncompliant","unlicensed","unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		licensePackageResponseRecordsItems0TypeStatePropEnum = append(licensePackageResponseRecordsItems0TypeStatePropEnum, v)
	}
}

const (

	// BEGIN RIPPY DEBUGGING
	// LicensePackageResponseRecordsItems0
	// LicensePackageResponseRecordsItems0
	// state
	// State
	// compliant
	// END RIPPY DEBUGGING
	// LicensePackageResponseRecordsItems0StateCompliant captures enum value "compliant"
	LicensePackageResponseRecordsItems0StateCompliant string = "compliant"

	// BEGIN RIPPY DEBUGGING
	// LicensePackageResponseRecordsItems0
	// LicensePackageResponseRecordsItems0
	// state
	// State
	// noncompliant
	// END RIPPY DEBUGGING
	// LicensePackageResponseRecordsItems0StateNoncompliant captures enum value "noncompliant"
	LicensePackageResponseRecordsItems0StateNoncompliant string = "noncompliant"

	// BEGIN RIPPY DEBUGGING
	// LicensePackageResponseRecordsItems0
	// LicensePackageResponseRecordsItems0
	// state
	// State
	// unlicensed
	// END RIPPY DEBUGGING
	// LicensePackageResponseRecordsItems0StateUnlicensed captures enum value "unlicensed"
	LicensePackageResponseRecordsItems0StateUnlicensed string = "unlicensed"

	// BEGIN RIPPY DEBUGGING
	// LicensePackageResponseRecordsItems0
	// LicensePackageResponseRecordsItems0
	// state
	// State
	// unknown
	// END RIPPY DEBUGGING
	// LicensePackageResponseRecordsItems0StateUnknown captures enum value "unknown"
	LicensePackageResponseRecordsItems0StateUnknown string = "unknown"
)

// prop value enum
func (m *LicensePackageResponseRecordsItems0) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, licensePackageResponseRecordsItems0TypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *LicensePackageResponseRecordsItems0) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this license package response records items0 based on the context it is used
func (m *LicensePackageResponseRecordsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLicenses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScope(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LicensePackageResponseRecordsItems0) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *LicensePackageResponseRecordsItems0) contextValidateLicenses(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "licenses", "body", []*LicensePackageResponseRecordsItems0LicensesItems0(m.Licenses)); err != nil {
		return err
	}

	for i := 0; i < len(m.Licenses); i++ {

		if m.Licenses[i] != nil {
			if err := m.Licenses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("licenses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LicensePackageResponseRecordsItems0) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *LicensePackageResponseRecordsItems0) contextValidateScope(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "scope", "body", string(m.Scope)); err != nil {
		return err
	}

	return nil
}

func (m *LicensePackageResponseRecordsItems0) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "state", "body", string(m.State)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LicensePackageResponseRecordsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LicensePackageResponseRecordsItems0) UnmarshalBinary(b []byte) error {
	var res LicensePackageResponseRecordsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// LicensePackageResponseRecordsItems0LicensesItems0 license package response records items0 licenses items0
//
// swagger:model LicensePackageResponseRecordsItems0LicensesItems0
type LicensePackageResponseRecordsItems0LicensesItems0 struct {

	// A flag indicating whether the license is currently being enforced.
	// Read Only: true
	Active *bool `json:"active,omitempty"`

	// capacity
	Capacity *LicensePackageResponseRecordsItems0LicensesItems0Capacity `json:"capacity,omitempty"`

	// compliance
	Compliance *LicensePackageResponseRecordsItems0LicensesItems0Compliance `json:"compliance,omitempty"`

	// A flag indicating whether the license is in evaluation mode.
	// Read Only: true
	Evaluation *bool `json:"evaluation,omitempty"`

	// Date and time when the license expires.
	// Example: 2019-03-02 19:00:00
	// Read Only: true
	// Format: date-time
	ExpiryTime *strfmt.DateTime `json:"expiry_time,omitempty"`

	// Cluster, node or license manager that owns the license.
	// Example: cluster1
	// Read Only: true
	Owner string `json:"owner,omitempty"`

	// Serial number of the license.
	// Example: 123456789
	// Read Only: true
	SerialNumber string `json:"serial_number,omitempty"`

	// Date and time when the license starts.
	// Example: 2019-02-02 19:00:00
	// Read Only: true
	// Format: date-time
	StartTime *strfmt.DateTime `json:"start_time,omitempty"`
}

// Validate validates this license package response records items0 licenses items0
func (m *LicensePackageResponseRecordsItems0LicensesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCapacity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompliance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpiryTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LicensePackageResponseRecordsItems0LicensesItems0) validateCapacity(formats strfmt.Registry) error {
	if swag.IsZero(m.Capacity) { // not required
		return nil
	}

	if m.Capacity != nil {
		if err := m.Capacity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("capacity")
			}
			return err
		}
	}

	return nil
}

func (m *LicensePackageResponseRecordsItems0LicensesItems0) validateCompliance(formats strfmt.Registry) error {
	if swag.IsZero(m.Compliance) { // not required
		return nil
	}

	if m.Compliance != nil {
		if err := m.Compliance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("compliance")
			}
			return err
		}
	}

	return nil
}

func (m *LicensePackageResponseRecordsItems0LicensesItems0) validateExpiryTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpiryTime) { // not required
		return nil
	}

	if err := validate.FormatOf("expiry_time", "body", "date-time", m.ExpiryTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *LicensePackageResponseRecordsItems0LicensesItems0) validateStartTime(formats strfmt.Registry) error {
	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("start_time", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this license package response records items0 licenses items0 based on the context it is used
func (m *LicensePackageResponseRecordsItems0LicensesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActive(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCapacity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCompliance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEvaluation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExpiryTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOwner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSerialNumber(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStartTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LicensePackageResponseRecordsItems0LicensesItems0) contextValidateActive(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "active", "body", m.Active); err != nil {
		return err
	}

	return nil
}

func (m *LicensePackageResponseRecordsItems0LicensesItems0) contextValidateCapacity(ctx context.Context, formats strfmt.Registry) error {

	if m.Capacity != nil {
		if err := m.Capacity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("capacity")
			}
			return err
		}
	}

	return nil
}

func (m *LicensePackageResponseRecordsItems0LicensesItems0) contextValidateCompliance(ctx context.Context, formats strfmt.Registry) error {

	if m.Compliance != nil {
		if err := m.Compliance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("compliance")
			}
			return err
		}
	}

	return nil
}

func (m *LicensePackageResponseRecordsItems0LicensesItems0) contextValidateEvaluation(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "evaluation", "body", m.Evaluation); err != nil {
		return err
	}

	return nil
}

func (m *LicensePackageResponseRecordsItems0LicensesItems0) contextValidateExpiryTime(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "expiry_time", "body", m.ExpiryTime); err != nil {
		return err
	}

	return nil
}

func (m *LicensePackageResponseRecordsItems0LicensesItems0) contextValidateOwner(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "owner", "body", string(m.Owner)); err != nil {
		return err
	}

	return nil
}

func (m *LicensePackageResponseRecordsItems0LicensesItems0) contextValidateSerialNumber(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "serial_number", "body", string(m.SerialNumber)); err != nil {
		return err
	}

	return nil
}

func (m *LicensePackageResponseRecordsItems0LicensesItems0) contextValidateStartTime(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "start_time", "body", m.StartTime); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LicensePackageResponseRecordsItems0LicensesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LicensePackageResponseRecordsItems0LicensesItems0) UnmarshalBinary(b []byte) error {
	var res LicensePackageResponseRecordsItems0LicensesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// LicensePackageResponseRecordsItems0LicensesItems0Capacity license package response records items0 licenses items0 capacity
//
// swagger:model LicensePackageResponseRecordsItems0LicensesItems0Capacity
type LicensePackageResponseRecordsItems0LicensesItems0Capacity struct {

	// Licensed capacity size (in bytes) that can be used.
	// Read Only: true
	MaximumSize int64 `json:"maximum_size,omitempty"`

	// Capacity that is currently used (in bytes).
	// Read Only: true
	UsedSize int64 `json:"used_size,omitempty"`
}

// Validate validates this license package response records items0 licenses items0 capacity
func (m *LicensePackageResponseRecordsItems0LicensesItems0Capacity) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this license package response records items0 licenses items0 capacity based on the context it is used
func (m *LicensePackageResponseRecordsItems0LicensesItems0Capacity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMaximumSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsedSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LicensePackageResponseRecordsItems0LicensesItems0Capacity) contextValidateMaximumSize(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "capacity"+"."+"maximum_size", "body", int64(m.MaximumSize)); err != nil {
		return err
	}

	return nil
}

func (m *LicensePackageResponseRecordsItems0LicensesItems0Capacity) contextValidateUsedSize(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "capacity"+"."+"used_size", "body", int64(m.UsedSize)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LicensePackageResponseRecordsItems0LicensesItems0Capacity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LicensePackageResponseRecordsItems0LicensesItems0Capacity) UnmarshalBinary(b []byte) error {
	var res LicensePackageResponseRecordsItems0LicensesItems0Capacity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// LicensePackageResponseRecordsItems0LicensesItems0Compliance license package response records items0 licenses items0 compliance
//
// swagger:model LicensePackageResponseRecordsItems0LicensesItems0Compliance
type LicensePackageResponseRecordsItems0LicensesItems0Compliance struct {

	// Compliance state of the license.
	// Example: compliant
	// Read Only: true
	// Enum: [compliant noncompliant unlicensed unknown]
	State string `json:"state,omitempty"`
}

// Validate validates this license package response records items0 licenses items0 compliance
func (m *LicensePackageResponseRecordsItems0LicensesItems0Compliance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var licensePackageResponseRecordsItems0LicensesItems0ComplianceTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["compliant","noncompliant","unlicensed","unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		licensePackageResponseRecordsItems0LicensesItems0ComplianceTypeStatePropEnum = append(licensePackageResponseRecordsItems0LicensesItems0ComplianceTypeStatePropEnum, v)
	}
}

const (

	// BEGIN RIPPY DEBUGGING
	// LicensePackageResponseRecordsItems0LicensesItems0Compliance
	// LicensePackageResponseRecordsItems0LicensesItems0Compliance
	// state
	// State
	// compliant
	// END RIPPY DEBUGGING
	// LicensePackageResponseRecordsItems0LicensesItems0ComplianceStateCompliant captures enum value "compliant"
	LicensePackageResponseRecordsItems0LicensesItems0ComplianceStateCompliant string = "compliant"

	// BEGIN RIPPY DEBUGGING
	// LicensePackageResponseRecordsItems0LicensesItems0Compliance
	// LicensePackageResponseRecordsItems0LicensesItems0Compliance
	// state
	// State
	// noncompliant
	// END RIPPY DEBUGGING
	// LicensePackageResponseRecordsItems0LicensesItems0ComplianceStateNoncompliant captures enum value "noncompliant"
	LicensePackageResponseRecordsItems0LicensesItems0ComplianceStateNoncompliant string = "noncompliant"

	// BEGIN RIPPY DEBUGGING
	// LicensePackageResponseRecordsItems0LicensesItems0Compliance
	// LicensePackageResponseRecordsItems0LicensesItems0Compliance
	// state
	// State
	// unlicensed
	// END RIPPY DEBUGGING
	// LicensePackageResponseRecordsItems0LicensesItems0ComplianceStateUnlicensed captures enum value "unlicensed"
	LicensePackageResponseRecordsItems0LicensesItems0ComplianceStateUnlicensed string = "unlicensed"

	// BEGIN RIPPY DEBUGGING
	// LicensePackageResponseRecordsItems0LicensesItems0Compliance
	// LicensePackageResponseRecordsItems0LicensesItems0Compliance
	// state
	// State
	// unknown
	// END RIPPY DEBUGGING
	// LicensePackageResponseRecordsItems0LicensesItems0ComplianceStateUnknown captures enum value "unknown"
	LicensePackageResponseRecordsItems0LicensesItems0ComplianceStateUnknown string = "unknown"
)

// prop value enum
func (m *LicensePackageResponseRecordsItems0LicensesItems0Compliance) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, licensePackageResponseRecordsItems0LicensesItems0ComplianceTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *LicensePackageResponseRecordsItems0LicensesItems0Compliance) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("compliance"+"."+"state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this license package response records items0 licenses items0 compliance based on the context it is used
func (m *LicensePackageResponseRecordsItems0LicensesItems0Compliance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LicensePackageResponseRecordsItems0LicensesItems0Compliance) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "compliance"+"."+"state", "body", string(m.State)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LicensePackageResponseRecordsItems0LicensesItems0Compliance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LicensePackageResponseRecordsItems0LicensesItems0Compliance) UnmarshalBinary(b []byte) error {
	var res LicensePackageResponseRecordsItems0LicensesItems0Compliance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// LicensePackageResponseRecordsItems0Links license package response records items0 links
//
// swagger:model LicensePackageResponseRecordsItems0Links
type LicensePackageResponseRecordsItems0Links struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this license package response records items0 links
func (m *LicensePackageResponseRecordsItems0Links) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LicensePackageResponseRecordsItems0Links) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this license package response records items0 links based on the context it is used
func (m *LicensePackageResponseRecordsItems0Links) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LicensePackageResponseRecordsItems0Links) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LicensePackageResponseRecordsItems0Links) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LicensePackageResponseRecordsItems0Links) UnmarshalBinary(b []byte) error {
	var res LicensePackageResponseRecordsItems0Links
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HELLO RIPPY
