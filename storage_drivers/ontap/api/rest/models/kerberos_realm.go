// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KerberosRealm kerberos realm
//
// swagger:model kerberos_realm
type KerberosRealm struct {

	// links
	Links *KerberosRealmLinks `json:"_links,omitempty"`

	// ad server
	AdServer *KerberosRealmAdServer `json:"ad_server,omitempty"`

	// Comment
	Comment string `json:"comment,omitempty"`

	// encryption types
	// Read Only: true
	EncryptionTypes []string `json:"encryption_types,omitempty"`

	// kdc
	Kdc *KerberosRealmKdc `json:"kdc,omitempty"`

	// Kerberos realm
	Name string `json:"name,omitempty"`

	// svm
	Svm *KerberosRealmSvm `json:"svm,omitempty"`
}

// Validate validates this kerberos realm
func (m *KerberosRealm) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdServer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEncryptionTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKdc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvm(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KerberosRealm) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *KerberosRealm) validateAdServer(formats strfmt.Registry) error {
	if swag.IsZero(m.AdServer) { // not required
		return nil
	}

	if m.AdServer != nil {
		if err := m.AdServer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ad_server")
			}
			return err
		}
	}

	return nil
}

var kerberosRealmEncryptionTypesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["des","des3","aes_128","aes_256"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		kerberosRealmEncryptionTypesItemsEnum = append(kerberosRealmEncryptionTypesItemsEnum, v)
	}
}

func (m *KerberosRealm) validateEncryptionTypesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, kerberosRealmEncryptionTypesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *KerberosRealm) validateEncryptionTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.EncryptionTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.EncryptionTypes); i++ {

		// value enum
		if err := m.validateEncryptionTypesItemsEnum("encryption_types"+"."+strconv.Itoa(i), "body", m.EncryptionTypes[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *KerberosRealm) validateKdc(formats strfmt.Registry) error {
	if swag.IsZero(m.Kdc) { // not required
		return nil
	}

	if m.Kdc != nil {
		if err := m.Kdc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kdc")
			}
			return err
		}
	}

	return nil
}

func (m *KerberosRealm) validateSvm(formats strfmt.Registry) error {
	if swag.IsZero(m.Svm) { // not required
		return nil
	}

	if m.Svm != nil {
		if err := m.Svm.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svm")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this kerberos realm based on the context it is used
func (m *KerberosRealm) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAdServer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEncryptionTypes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKdc(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSvm(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KerberosRealm) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *KerberosRealm) contextValidateAdServer(ctx context.Context, formats strfmt.Registry) error {

	if m.AdServer != nil {
		if err := m.AdServer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ad_server")
			}
			return err
		}
	}

	return nil
}

func (m *KerberosRealm) contextValidateEncryptionTypes(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "encryption_types", "body", []string(m.EncryptionTypes)); err != nil {
		return err
	}

	for i := 0; i < len(m.EncryptionTypes); i++ {

		if err := validate.ReadOnly(ctx, "encryption_types"+"."+strconv.Itoa(i), "body", string(m.EncryptionTypes[i])); err != nil {
			return err
		}

	}

	return nil
}

func (m *KerberosRealm) contextValidateKdc(ctx context.Context, formats strfmt.Registry) error {

	if m.Kdc != nil {
		if err := m.Kdc.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kdc")
			}
			return err
		}
	}

	return nil
}

func (m *KerberosRealm) contextValidateSvm(ctx context.Context, formats strfmt.Registry) error {

	if m.Svm != nil {
		if err := m.Svm.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svm")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KerberosRealm) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KerberosRealm) UnmarshalBinary(b []byte) error {
	var res KerberosRealm
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// KerberosRealmAdServer kerberos realm ad server
//
// swagger:model KerberosRealmAdServer
type KerberosRealmAdServer struct {

	// Active Directory server IP address
	// Example: 1.2.3.4
	Address string `json:"address,omitempty"`

	// Active Directory server name
	Name string `json:"name,omitempty"`
}

// Validate validates this kerberos realm ad server
func (m *KerberosRealmAdServer) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this kerberos realm ad server based on context it is used
func (m *KerberosRealmAdServer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *KerberosRealmAdServer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KerberosRealmAdServer) UnmarshalBinary(b []byte) error {
	var res KerberosRealmAdServer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// KerberosRealmKdc kerberos realm kdc
//
// swagger:model KerberosRealmKdc
type KerberosRealmKdc struct {

	// KDC IP address
	// Example: 1.2.3.4
	IP string `json:"ip,omitempty"`

	// KDC port
	// Example: 88
	// Maximum: 65535
	// Minimum: 1
	Port int64 `json:"port,omitempty"`

	// Key Distribution Center (KDC) vendor. Following values are suported:
	// * microsoft - Microsoft Active Directory KDC
	// * other - MIT Kerberos KDC or other KDC
	//
	// Enum: [microsoft other]
	Vendor string `json:"vendor,omitempty"`
}

// Validate validates this kerberos realm kdc
func (m *KerberosRealmKdc) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVendor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KerberosRealmKdc) validatePort(formats strfmt.Registry) error {
	if swag.IsZero(m.Port) { // not required
		return nil
	}

	if err := validate.MinimumInt("kdc"+"."+"port", "body", m.Port, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("kdc"+"."+"port", "body", m.Port, 65535, false); err != nil {
		return err
	}

	return nil
}

var kerberosRealmKdcTypeVendorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["microsoft","other"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		kerberosRealmKdcTypeVendorPropEnum = append(kerberosRealmKdcTypeVendorPropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// KerberosRealmKdc
	// KerberosRealmKdc
	// vendor
	// Vendor
	// microsoft
	// END DEBUGGING
	// KerberosRealmKdcVendorMicrosoft captures enum value "microsoft"
	KerberosRealmKdcVendorMicrosoft string = "microsoft"

	// BEGIN DEBUGGING
	// KerberosRealmKdc
	// KerberosRealmKdc
	// vendor
	// Vendor
	// other
	// END DEBUGGING
	// KerberosRealmKdcVendorOther captures enum value "other"
	KerberosRealmKdcVendorOther string = "other"
)

// prop value enum
func (m *KerberosRealmKdc) validateVendorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, kerberosRealmKdcTypeVendorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *KerberosRealmKdc) validateVendor(formats strfmt.Registry) error {
	if swag.IsZero(m.Vendor) { // not required
		return nil
	}

	// value enum
	if err := m.validateVendorEnum("kdc"+"."+"vendor", "body", m.Vendor); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this kerberos realm kdc based on context it is used
func (m *KerberosRealmKdc) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *KerberosRealmKdc) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KerberosRealmKdc) UnmarshalBinary(b []byte) error {
	var res KerberosRealmKdc
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// KerberosRealmLinks kerberos realm links
//
// swagger:model KerberosRealmLinks
type KerberosRealmLinks struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this kerberos realm links
func (m *KerberosRealmLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KerberosRealmLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this kerberos realm links based on the context it is used
func (m *KerberosRealmLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KerberosRealmLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KerberosRealmLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KerberosRealmLinks) UnmarshalBinary(b []byte) error {
	var res KerberosRealmLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// KerberosRealmSvm kerberos realm svm
//
// swagger:model KerberosRealmSvm
type KerberosRealmSvm struct {

	// links
	Links *KerberosRealmSvmLinks `json:"_links,omitempty"`

	// The name of the SVM.
	//
	// Example: svm1
	Name string `json:"name,omitempty"`

	// The unique identifier of the SVM.
	//
	// Example: 02c9e252-41be-11e9-81d5-00a0986138f7
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this kerberos realm svm
func (m *KerberosRealmSvm) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KerberosRealmSvm) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svm" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this kerberos realm svm based on the context it is used
func (m *KerberosRealmSvm) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KerberosRealmSvm) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svm" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KerberosRealmSvm) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KerberosRealmSvm) UnmarshalBinary(b []byte) error {
	var res KerberosRealmSvm
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// KerberosRealmSvmLinks kerberos realm svm links
//
// swagger:model KerberosRealmSvmLinks
type KerberosRealmSvmLinks struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this kerberos realm svm links
func (m *KerberosRealmSvmLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KerberosRealmSvmLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svm" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this kerberos realm svm links based on the context it is used
func (m *KerberosRealmSvmLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KerberosRealmSvmLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svm" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KerberosRealmSvmLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KerberosRealmSvmLinks) UnmarshalBinary(b []byte) error {
	var res KerberosRealmSvmLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
