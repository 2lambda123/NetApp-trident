// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Autosupport autosupport
//
// swagger:model autosupport
type Autosupport struct {

	// Specifies whether to send the AutoSupport messages to vendor support.
	// Example: true
	ContactSupport bool `json:"contact_support,omitempty"`

	// Specifies whether the AutoSupport daemon is enabled.  When this setting is disabled, delivery of all AutoSupport messages is turned off.
	// Example: true
	Enabled bool `json:"enabled,omitempty"`

	// The e-mail address from which the AutoSupport messages are sent. To generate node-specific 'from' addresses, enable '-node-specific-from' parameter via ONTAP CLI.
	// Example: postmaster@example.com
	// Format: email
	From strfmt.Email `json:"from,omitempty"`

	// Specifies whether the system information is collected in compliant form, to remove private data or in complete form, to enhance diagnostics.
	// Example: true
	IsMinimal bool `json:"is_minimal,omitempty"`

	// A list of nodes in the cluster with connectivity issues to HTTP/SMTP/AOD AutoSupport destinations along with the corresponding error descriptions and corrective actions.
	// Read Only: true
	Issues []*AutosupportIssues `json:"issues,omitempty"`

	// The names of the mail servers used to deliver AutoSupport messages via SMTP.
	// Example: ["mailhost1.example.com","mailhost2.example.com"]
	// Max Items: 5
	MailHosts []strfmt.URI `json:"mail_hosts,omitempty"`

	// The list of partner addresses.
	// Example: ["user1@partner.com","user2@partner.com"]
	// Max Items: 5
	PartnerAddresses []strfmt.Email `json:"partner_addresses,omitempty"`

	// Proxy server for AutoSupport message delivery via HTTP/S. Optionally specify a username/password for authentication with the proxy server.
	// Example: https://proxy.company.com
	// Format: uri
	ProxyURL strfmt.URI `json:"proxy_url,omitempty"`

	// The e-mail addresses to which the AutoSupport messages are sent.
	// Example: ["user1@example.com","user2@example.com"]
	// Max Items: 5
	To []strfmt.Email `json:"to,omitempty"`

	// The name of the transport protocol used to deliver AutoSupport messages.
	// Example: smtp
	// Enum: [smtp http https]
	Transport *string `json:"transport,omitempty"`
}

// Validate validates this autosupport
func (m *Autosupport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssues(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMailHosts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartnerAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProxyURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransport(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Autosupport) validateFrom(formats strfmt.Registry) error {
	if swag.IsZero(m.From) { // not required
		return nil
	}

	if err := validate.FormatOf("from", "body", "email", m.From.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Autosupport) validateIssues(formats strfmt.Registry) error {
	if swag.IsZero(m.Issues) { // not required
		return nil
	}

	for i := 0; i < len(m.Issues); i++ {
		if swag.IsZero(m.Issues[i]) { // not required
			continue
		}

		if m.Issues[i] != nil {
			if err := m.Issues[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("issues" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Autosupport) validateMailHosts(formats strfmt.Registry) error {
	if swag.IsZero(m.MailHosts) { // not required
		return nil
	}

	iMailHostsSize := int64(len(m.MailHosts))

	if err := validate.MaxItems("mail_hosts", "body", iMailHostsSize, 5); err != nil {
		return err
	}

	for i := 0; i < len(m.MailHosts); i++ {

		if err := validate.FormatOf("mail_hosts"+"."+strconv.Itoa(i), "body", "uri", m.MailHosts[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *Autosupport) validatePartnerAddresses(formats strfmt.Registry) error {
	if swag.IsZero(m.PartnerAddresses) { // not required
		return nil
	}

	iPartnerAddressesSize := int64(len(m.PartnerAddresses))

	if err := validate.MaxItems("partner_addresses", "body", iPartnerAddressesSize, 5); err != nil {
		return err
	}

	for i := 0; i < len(m.PartnerAddresses); i++ {

		if err := validate.FormatOf("partner_addresses"+"."+strconv.Itoa(i), "body", "email", m.PartnerAddresses[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *Autosupport) validateProxyURL(formats strfmt.Registry) error {
	if swag.IsZero(m.ProxyURL) { // not required
		return nil
	}

	if err := validate.FormatOf("proxy_url", "body", "uri", m.ProxyURL.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Autosupport) validateTo(formats strfmt.Registry) error {
	if swag.IsZero(m.To) { // not required
		return nil
	}

	iToSize := int64(len(m.To))

	if err := validate.MaxItems("to", "body", iToSize, 5); err != nil {
		return err
	}

	for i := 0; i < len(m.To); i++ {

		if err := validate.FormatOf("to"+"."+strconv.Itoa(i), "body", "email", m.To[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

var autosupportTypeTransportPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["smtp","http","https"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		autosupportTypeTransportPropEnum = append(autosupportTypeTransportPropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// autosupport
	// Autosupport
	// transport
	// Transport
	// smtp
	// END DEBUGGING
	// AutosupportTransportSMTP captures enum value "smtp"
	AutosupportTransportSMTP string = "smtp"

	// BEGIN DEBUGGING
	// autosupport
	// Autosupport
	// transport
	// Transport
	// http
	// END DEBUGGING
	// AutosupportTransportHTTP captures enum value "http"
	AutosupportTransportHTTP string = "http"

	// BEGIN DEBUGGING
	// autosupport
	// Autosupport
	// transport
	// Transport
	// https
	// END DEBUGGING
	// AutosupportTransportHTTPS captures enum value "https"
	AutosupportTransportHTTPS string = "https"
)

// prop value enum
func (m *Autosupport) validateTransportEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, autosupportTypeTransportPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Autosupport) validateTransport(formats strfmt.Registry) error {
	if swag.IsZero(m.Transport) { // not required
		return nil
	}

	// value enum
	if err := m.validateTransportEnum("transport", "body", *m.Transport); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this autosupport based on the context it is used
func (m *Autosupport) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIssues(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Autosupport) contextValidateIssues(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "issues", "body", []*AutosupportIssues(m.Issues)); err != nil {
		return err
	}

	for i := 0; i < len(m.Issues); i++ {

		if m.Issues[i] != nil {
			if err := m.Issues[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("issues" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Autosupport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Autosupport) UnmarshalBinary(b []byte) error {
	var res Autosupport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
