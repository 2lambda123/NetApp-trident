// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SwitchPort Ethernet Switch Port REST API
//
// swagger:model switch_port
type SwitchPort struct {

	// links
	Links *SelfLink `json:"_links,omitempty"`

	// Administrative Status.
	// Read Only: true
	// Enum: [down testing up]
	Configured string `json:"configured,omitempty"`

	// Duplex Settings.
	// Read Only: true
	// Enum: [full_duplex half_duplex unknown]
	DuplexType string `json:"duplex_type,omitempty"`

	// identity
	Identity *SwitchPortIdentity `json:"identity,omitempty"`

	// Is configured as an ISL link.
	// Read Only: true
	Isl *bool `json:"isl,omitempty"`

	// MAC Address.
	// Read Only: true
	MacAddress string `json:"mac_address,omitempty"`

	// MTU.
	// Read Only: true
	Mtu int64 `json:"mtu,omitempty"`

	// remote port
	RemotePort *SwitchPortRemotePort `json:"remote_port,omitempty"`

	// Interface Speed(Mbps)
	// Read Only: true
	Speed int64 `json:"speed,omitempty"`

	// Operational Status.
	// Read Only: true
	// Enum: [dormant down lower_layer_down not_present testing unknown up]
	State string `json:"state,omitempty"`

	// statistics
	Statistics *SwitchPortStatistics `json:"statistics,omitempty"`

	// switch
	Switch *SwitchPortSwitch `json:"switch,omitempty"`

	// Interface Type.
	// Read Only: true
	// Enum: [ethernetcsmacd fastetherfx fibrechannel gigabitethernet ieee8023adlag other propvirtual softwareloopback tunnel]
	Type string `json:"type,omitempty"`

	// vlan id
	VlanID []int64 `json:"vlan_id,omitempty"`
}

// Validate validates this switch port
func (m *SwitchPort) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigured(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDuplexType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemotePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatistics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSwitch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SwitchPort) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

var switchPortTypeConfiguredPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["down","testing","up"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		switchPortTypeConfiguredPropEnum = append(switchPortTypeConfiguredPropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// switch_port
	// SwitchPort
	// configured
	// Configured
	// down
	// END DEBUGGING
	// SwitchPortConfiguredDown captures enum value "down"
	SwitchPortConfiguredDown string = "down"

	// BEGIN DEBUGGING
	// switch_port
	// SwitchPort
	// configured
	// Configured
	// testing
	// END DEBUGGING
	// SwitchPortConfiguredTesting captures enum value "testing"
	SwitchPortConfiguredTesting string = "testing"

	// BEGIN DEBUGGING
	// switch_port
	// SwitchPort
	// configured
	// Configured
	// up
	// END DEBUGGING
	// SwitchPortConfiguredUp captures enum value "up"
	SwitchPortConfiguredUp string = "up"
)

// prop value enum
func (m *SwitchPort) validateConfiguredEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, switchPortTypeConfiguredPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SwitchPort) validateConfigured(formats strfmt.Registry) error {
	if swag.IsZero(m.Configured) { // not required
		return nil
	}

	// value enum
	if err := m.validateConfiguredEnum("configured", "body", m.Configured); err != nil {
		return err
	}

	return nil
}

var switchPortTypeDuplexTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["full_duplex","half_duplex","unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		switchPortTypeDuplexTypePropEnum = append(switchPortTypeDuplexTypePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// switch_port
	// SwitchPort
	// duplex_type
	// DuplexType
	// full_duplex
	// END DEBUGGING
	// SwitchPortDuplexTypeFullDuplex captures enum value "full_duplex"
	SwitchPortDuplexTypeFullDuplex string = "full_duplex"

	// BEGIN DEBUGGING
	// switch_port
	// SwitchPort
	// duplex_type
	// DuplexType
	// half_duplex
	// END DEBUGGING
	// SwitchPortDuplexTypeHalfDuplex captures enum value "half_duplex"
	SwitchPortDuplexTypeHalfDuplex string = "half_duplex"

	// BEGIN DEBUGGING
	// switch_port
	// SwitchPort
	// duplex_type
	// DuplexType
	// unknown
	// END DEBUGGING
	// SwitchPortDuplexTypeUnknown captures enum value "unknown"
	SwitchPortDuplexTypeUnknown string = "unknown"
)

// prop value enum
func (m *SwitchPort) validateDuplexTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, switchPortTypeDuplexTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SwitchPort) validateDuplexType(formats strfmt.Registry) error {
	if swag.IsZero(m.DuplexType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDuplexTypeEnum("duplex_type", "body", m.DuplexType); err != nil {
		return err
	}

	return nil
}

func (m *SwitchPort) validateIdentity(formats strfmt.Registry) error {
	if swag.IsZero(m.Identity) { // not required
		return nil
	}

	if m.Identity != nil {
		if err := m.Identity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identity")
			}
			return err
		}
	}

	return nil
}

func (m *SwitchPort) validateRemotePort(formats strfmt.Registry) error {
	if swag.IsZero(m.RemotePort) { // not required
		return nil
	}

	if m.RemotePort != nil {
		if err := m.RemotePort.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remote_port")
			}
			return err
		}
	}

	return nil
}

var switchPortTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["dormant","down","lower_layer_down","not_present","testing","unknown","up"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		switchPortTypeStatePropEnum = append(switchPortTypeStatePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// switch_port
	// SwitchPort
	// state
	// State
	// dormant
	// END DEBUGGING
	// SwitchPortStateDormant captures enum value "dormant"
	SwitchPortStateDormant string = "dormant"

	// BEGIN DEBUGGING
	// switch_port
	// SwitchPort
	// state
	// State
	// down
	// END DEBUGGING
	// SwitchPortStateDown captures enum value "down"
	SwitchPortStateDown string = "down"

	// BEGIN DEBUGGING
	// switch_port
	// SwitchPort
	// state
	// State
	// lower_layer_down
	// END DEBUGGING
	// SwitchPortStateLowerLayerDown captures enum value "lower_layer_down"
	SwitchPortStateLowerLayerDown string = "lower_layer_down"

	// BEGIN DEBUGGING
	// switch_port
	// SwitchPort
	// state
	// State
	// not_present
	// END DEBUGGING
	// SwitchPortStateNotPresent captures enum value "not_present"
	SwitchPortStateNotPresent string = "not_present"

	// BEGIN DEBUGGING
	// switch_port
	// SwitchPort
	// state
	// State
	// testing
	// END DEBUGGING
	// SwitchPortStateTesting captures enum value "testing"
	SwitchPortStateTesting string = "testing"

	// BEGIN DEBUGGING
	// switch_port
	// SwitchPort
	// state
	// State
	// unknown
	// END DEBUGGING
	// SwitchPortStateUnknown captures enum value "unknown"
	SwitchPortStateUnknown string = "unknown"

	// BEGIN DEBUGGING
	// switch_port
	// SwitchPort
	// state
	// State
	// up
	// END DEBUGGING
	// SwitchPortStateUp captures enum value "up"
	SwitchPortStateUp string = "up"
)

// prop value enum
func (m *SwitchPort) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, switchPortTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SwitchPort) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *SwitchPort) validateStatistics(formats strfmt.Registry) error {
	if swag.IsZero(m.Statistics) { // not required
		return nil
	}

	if m.Statistics != nil {
		if err := m.Statistics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("statistics")
			}
			return err
		}
	}

	return nil
}

func (m *SwitchPort) validateSwitch(formats strfmt.Registry) error {
	if swag.IsZero(m.Switch) { // not required
		return nil
	}

	if m.Switch != nil {
		if err := m.Switch.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("switch")
			}
			return err
		}
	}

	return nil
}

var switchPortTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ethernetcsmacd","fastetherfx","fibrechannel","gigabitethernet","ieee8023adlag","other","propvirtual","softwareloopback","tunnel"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		switchPortTypeTypePropEnum = append(switchPortTypeTypePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// switch_port
	// SwitchPort
	// type
	// Type
	// ethernetcsmacd
	// END DEBUGGING
	// SwitchPortTypeEthernetcsmacd captures enum value "ethernetcsmacd"
	SwitchPortTypeEthernetcsmacd string = "ethernetcsmacd"

	// BEGIN DEBUGGING
	// switch_port
	// SwitchPort
	// type
	// Type
	// fastetherfx
	// END DEBUGGING
	// SwitchPortTypeFastetherfx captures enum value "fastetherfx"
	SwitchPortTypeFastetherfx string = "fastetherfx"

	// BEGIN DEBUGGING
	// switch_port
	// SwitchPort
	// type
	// Type
	// fibrechannel
	// END DEBUGGING
	// SwitchPortTypeFibrechannel captures enum value "fibrechannel"
	SwitchPortTypeFibrechannel string = "fibrechannel"

	// BEGIN DEBUGGING
	// switch_port
	// SwitchPort
	// type
	// Type
	// gigabitethernet
	// END DEBUGGING
	// SwitchPortTypeGigabitethernet captures enum value "gigabitethernet"
	SwitchPortTypeGigabitethernet string = "gigabitethernet"

	// BEGIN DEBUGGING
	// switch_port
	// SwitchPort
	// type
	// Type
	// ieee8023adlag
	// END DEBUGGING
	// SwitchPortTypeIeee8023adlag captures enum value "ieee8023adlag"
	SwitchPortTypeIeee8023adlag string = "ieee8023adlag"

	// BEGIN DEBUGGING
	// switch_port
	// SwitchPort
	// type
	// Type
	// other
	// END DEBUGGING
	// SwitchPortTypeOther captures enum value "other"
	SwitchPortTypeOther string = "other"

	// BEGIN DEBUGGING
	// switch_port
	// SwitchPort
	// type
	// Type
	// propvirtual
	// END DEBUGGING
	// SwitchPortTypePropvirtual captures enum value "propvirtual"
	SwitchPortTypePropvirtual string = "propvirtual"

	// BEGIN DEBUGGING
	// switch_port
	// SwitchPort
	// type
	// Type
	// softwareloopback
	// END DEBUGGING
	// SwitchPortTypeSoftwareloopback captures enum value "softwareloopback"
	SwitchPortTypeSoftwareloopback string = "softwareloopback"

	// BEGIN DEBUGGING
	// switch_port
	// SwitchPort
	// type
	// Type
	// tunnel
	// END DEBUGGING
	// SwitchPortTypeTunnel captures enum value "tunnel"
	SwitchPortTypeTunnel string = "tunnel"
)

// prop value enum
func (m *SwitchPort) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, switchPortTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SwitchPort) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this switch port based on the context it is used
func (m *SwitchPort) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConfigured(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDuplexType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIdentity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsl(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMacAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMtu(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemotePort(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSpeed(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatistics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSwitch(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVlanID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SwitchPort) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *SwitchPort) contextValidateConfigured(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "configured", "body", string(m.Configured)); err != nil {
		return err
	}

	return nil
}

func (m *SwitchPort) contextValidateDuplexType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "duplex_type", "body", string(m.DuplexType)); err != nil {
		return err
	}

	return nil
}

func (m *SwitchPort) contextValidateIdentity(ctx context.Context, formats strfmt.Registry) error {

	if m.Identity != nil {
		if err := m.Identity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identity")
			}
			return err
		}
	}

	return nil
}

func (m *SwitchPort) contextValidateIsl(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "isl", "body", m.Isl); err != nil {
		return err
	}

	return nil
}

func (m *SwitchPort) contextValidateMacAddress(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "mac_address", "body", string(m.MacAddress)); err != nil {
		return err
	}

	return nil
}

func (m *SwitchPort) contextValidateMtu(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "mtu", "body", int64(m.Mtu)); err != nil {
		return err
	}

	return nil
}

func (m *SwitchPort) contextValidateRemotePort(ctx context.Context, formats strfmt.Registry) error {

	if m.RemotePort != nil {
		if err := m.RemotePort.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remote_port")
			}
			return err
		}
	}

	return nil
}

func (m *SwitchPort) contextValidateSpeed(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "speed", "body", int64(m.Speed)); err != nil {
		return err
	}

	return nil
}

func (m *SwitchPort) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "state", "body", string(m.State)); err != nil {
		return err
	}

	return nil
}

func (m *SwitchPort) contextValidateStatistics(ctx context.Context, formats strfmt.Registry) error {

	if m.Statistics != nil {
		if err := m.Statistics.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("statistics")
			}
			return err
		}
	}

	return nil
}

func (m *SwitchPort) contextValidateSwitch(ctx context.Context, formats strfmt.Registry) error {

	if m.Switch != nil {
		if err := m.Switch.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("switch")
			}
			return err
		}
	}

	return nil
}

func (m *SwitchPort) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(m.Type)); err != nil {
		return err
	}

	return nil
}

func (m *SwitchPort) contextValidateVlanID(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VlanID); i++ {

		if err := validate.ReadOnly(ctx, "vlan_id"+"."+strconv.Itoa(i), "body", int64(m.VlanID[i])); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SwitchPort) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SwitchPort) UnmarshalBinary(b []byte) error {
	var res SwitchPort
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SwitchPortIdentity switch port identity
//
// swagger:model SwitchPortIdentity
type SwitchPortIdentity struct {

	// Interface Index.
	// Read Only: true
	Index int64 `json:"index,omitempty"`

	// Interface Name.
	// Read Only: true
	Name string `json:"name,omitempty"`

	// Interface Number.
	// Read Only: true
	Number int64 `json:"number,omitempty"`
}

// Validate validates this switch port identity
func (m *SwitchPortIdentity) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this switch port identity based on the context it is used
func (m *SwitchPortIdentity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIndex(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNumber(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SwitchPortIdentity) contextValidateIndex(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "identity"+"."+"index", "body", int64(m.Index)); err != nil {
		return err
	}

	return nil
}

func (m *SwitchPortIdentity) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "identity"+"."+"name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *SwitchPortIdentity) contextValidateNumber(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "identity"+"."+"number", "body", int64(m.Number)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SwitchPortIdentity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SwitchPortIdentity) UnmarshalBinary(b []byte) error {
	var res SwitchPortIdentity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SwitchPortRemotePort Remote port
//
// swagger:model SwitchPortRemotePort
type SwitchPortRemotePort struct {

	// device
	Device *SwitchPortRemotePortDevice `json:"device,omitempty"`

	// MTU in octets
	// Read Only: true
	Mtu int64 `json:"mtu,omitempty"`

	// Port Name.
	// Read Only: true
	Name string `json:"name,omitempty"`
}

// Validate validates this switch port remote port
func (m *SwitchPortRemotePort) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDevice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SwitchPortRemotePort) validateDevice(formats strfmt.Registry) error {
	if swag.IsZero(m.Device) { // not required
		return nil
	}

	if m.Device != nil {
		if err := m.Device.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remote_port" + "." + "device")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this switch port remote port based on the context it is used
func (m *SwitchPortRemotePort) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDevice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMtu(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SwitchPortRemotePort) contextValidateDevice(ctx context.Context, formats strfmt.Registry) error {

	if m.Device != nil {
		if err := m.Device.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remote_port" + "." + "device")
			}
			return err
		}
	}

	return nil
}

func (m *SwitchPortRemotePort) contextValidateMtu(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "remote_port"+"."+"mtu", "body", int64(m.Mtu)); err != nil {
		return err
	}

	return nil
}

func (m *SwitchPortRemotePort) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "remote_port"+"."+"name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SwitchPortRemotePort) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SwitchPortRemotePort) UnmarshalBinary(b []byte) error {
	var res SwitchPortRemotePort
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SwitchPortRemotePortDevice Device connected to port.
//
// swagger:model SwitchPortRemotePortDevice
type SwitchPortRemotePortDevice struct {

	// node
	Node *SwitchPortRemotePortDeviceNode `json:"node,omitempty"`

	// shelf
	Shelf *SwitchPortRemotePortDeviceShelf `json:"shelf,omitempty"`
}

// Validate validates this switch port remote port device
func (m *SwitchPortRemotePortDevice) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SwitchPortRemotePortDevice) validateNode(formats strfmt.Registry) error {
	if swag.IsZero(m.Node) { // not required
		return nil
	}

	if m.Node != nil {
		if err := m.Node.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remote_port" + "." + "device" + "." + "node")
			}
			return err
		}
	}

	return nil
}

func (m *SwitchPortRemotePortDevice) validateShelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Shelf) { // not required
		return nil
	}

	if m.Shelf != nil {
		if err := m.Shelf.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remote_port" + "." + "device" + "." + "shelf")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this switch port remote port device based on the context it is used
func (m *SwitchPortRemotePortDevice) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SwitchPortRemotePortDevice) contextValidateNode(ctx context.Context, formats strfmt.Registry) error {

	if m.Node != nil {
		if err := m.Node.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remote_port" + "." + "device" + "." + "node")
			}
			return err
		}
	}

	return nil
}

func (m *SwitchPortRemotePortDevice) contextValidateShelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Shelf != nil {
		if err := m.Shelf.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remote_port" + "." + "device" + "." + "shelf")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SwitchPortRemotePortDevice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SwitchPortRemotePortDevice) UnmarshalBinary(b []byte) error {
	var res SwitchPortRemotePortDevice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SwitchPortRemotePortDeviceNode switch port remote port device node
//
// swagger:model SwitchPortRemotePortDeviceNode
type SwitchPortRemotePortDeviceNode struct {

	// links
	Links *SwitchPortRemotePortDeviceNodeLinks `json:"_links,omitempty"`

	// name
	// Example: node1
	Name string `json:"name,omitempty"`

	// uuid
	// Example: 1cd8a442-86d1-11e0-ae1c-123478563412
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this switch port remote port device node
func (m *SwitchPortRemotePortDeviceNode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SwitchPortRemotePortDeviceNode) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remote_port" + "." + "device" + "." + "node" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this switch port remote port device node based on the context it is used
func (m *SwitchPortRemotePortDeviceNode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SwitchPortRemotePortDeviceNode) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remote_port" + "." + "device" + "." + "node" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SwitchPortRemotePortDeviceNode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SwitchPortRemotePortDeviceNode) UnmarshalBinary(b []byte) error {
	var res SwitchPortRemotePortDeviceNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SwitchPortRemotePortDeviceNodeLinks switch port remote port device node links
//
// swagger:model SwitchPortRemotePortDeviceNodeLinks
type SwitchPortRemotePortDeviceNodeLinks struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this switch port remote port device node links
func (m *SwitchPortRemotePortDeviceNodeLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SwitchPortRemotePortDeviceNodeLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remote_port" + "." + "device" + "." + "node" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this switch port remote port device node links based on the context it is used
func (m *SwitchPortRemotePortDeviceNodeLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SwitchPortRemotePortDeviceNodeLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remote_port" + "." + "device" + "." + "node" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SwitchPortRemotePortDeviceNodeLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SwitchPortRemotePortDeviceNodeLinks) UnmarshalBinary(b []byte) error {
	var res SwitchPortRemotePortDeviceNodeLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SwitchPortRemotePortDeviceShelf Shelf connected to this port.
//
// swagger:model SwitchPortRemotePortDeviceShelf
type SwitchPortRemotePortDeviceShelf struct {

	// links
	Links *SwitchPortRemotePortDeviceShelfLinks `json:"_links,omitempty"`

	// uid
	// Example: 7777841915827391056
	UID string `json:"uid,omitempty"`
}

// Validate validates this switch port remote port device shelf
func (m *SwitchPortRemotePortDeviceShelf) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SwitchPortRemotePortDeviceShelf) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remote_port" + "." + "device" + "." + "shelf" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this switch port remote port device shelf based on the context it is used
func (m *SwitchPortRemotePortDeviceShelf) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SwitchPortRemotePortDeviceShelf) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remote_port" + "." + "device" + "." + "shelf" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SwitchPortRemotePortDeviceShelf) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SwitchPortRemotePortDeviceShelf) UnmarshalBinary(b []byte) error {
	var res SwitchPortRemotePortDeviceShelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SwitchPortRemotePortDeviceShelfLinks switch port remote port device shelf links
//
// swagger:model SwitchPortRemotePortDeviceShelfLinks
type SwitchPortRemotePortDeviceShelfLinks struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this switch port remote port device shelf links
func (m *SwitchPortRemotePortDeviceShelfLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SwitchPortRemotePortDeviceShelfLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remote_port" + "." + "device" + "." + "shelf" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this switch port remote port device shelf links based on the context it is used
func (m *SwitchPortRemotePortDeviceShelfLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SwitchPortRemotePortDeviceShelfLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remote_port" + "." + "device" + "." + "shelf" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SwitchPortRemotePortDeviceShelfLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SwitchPortRemotePortDeviceShelfLinks) UnmarshalBinary(b []byte) error {
	var res SwitchPortRemotePortDeviceShelfLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SwitchPortStatistics These are raw counters for the device associated with the Ethernet port.
//
// swagger:model SwitchPortStatistics
type SwitchPortStatistics struct {

	// receive raw
	ReceiveRaw *SwitchPortStatisticsReceiveRaw `json:"receive_raw,omitempty"`

	// transmit raw
	TransmitRaw *SwitchPortStatisticsTransmitRaw `json:"transmit_raw,omitempty"`
}

// Validate validates this switch port statistics
func (m *SwitchPortStatistics) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReceiveRaw(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransmitRaw(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SwitchPortStatistics) validateReceiveRaw(formats strfmt.Registry) error {
	if swag.IsZero(m.ReceiveRaw) { // not required
		return nil
	}

	if m.ReceiveRaw != nil {
		if err := m.ReceiveRaw.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("statistics" + "." + "receive_raw")
			}
			return err
		}
	}

	return nil
}

func (m *SwitchPortStatistics) validateTransmitRaw(formats strfmt.Registry) error {
	if swag.IsZero(m.TransmitRaw) { // not required
		return nil
	}

	if m.TransmitRaw != nil {
		if err := m.TransmitRaw.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("statistics" + "." + "transmit_raw")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this switch port statistics based on the context it is used
func (m *SwitchPortStatistics) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateReceiveRaw(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTransmitRaw(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SwitchPortStatistics) contextValidateReceiveRaw(ctx context.Context, formats strfmt.Registry) error {

	if m.ReceiveRaw != nil {
		if err := m.ReceiveRaw.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("statistics" + "." + "receive_raw")
			}
			return err
		}
	}

	return nil
}

func (m *SwitchPortStatistics) contextValidateTransmitRaw(ctx context.Context, formats strfmt.Registry) error {

	if m.TransmitRaw != nil {
		if err := m.TransmitRaw.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("statistics" + "." + "transmit_raw")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SwitchPortStatistics) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SwitchPortStatistics) UnmarshalBinary(b []byte) error {
	var res SwitchPortStatistics
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SwitchPortStatisticsReceiveRaw Packet receive counters for the Ethernet port.
//
// swagger:model SwitchPortStatisticsReceiveRaw
type SwitchPortStatisticsReceiveRaw struct {

	// Total number of discarded packets.
	// Example: 100
	Discards int64 `json:"discards,omitempty"`

	// Number of packet errors.
	// Example: 200
	Errors int64 `json:"errors,omitempty"`

	// Total packet count.
	// Example: 500
	Packets int64 `json:"packets,omitempty"`
}

// Validate validates this switch port statistics receive raw
func (m *SwitchPortStatisticsReceiveRaw) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this switch port statistics receive raw based on context it is used
func (m *SwitchPortStatisticsReceiveRaw) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SwitchPortStatisticsReceiveRaw) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SwitchPortStatisticsReceiveRaw) UnmarshalBinary(b []byte) error {
	var res SwitchPortStatisticsReceiveRaw
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SwitchPortStatisticsTransmitRaw Packet transmit counters for the Ethernet port.
//
// swagger:model SwitchPortStatisticsTransmitRaw
type SwitchPortStatisticsTransmitRaw struct {

	// Total number of discarded packets.
	// Example: 100
	Discards int64 `json:"discards,omitempty"`

	// Number of packet errors.
	// Example: 200
	Errors int64 `json:"errors,omitempty"`

	// Total packet count.
	// Example: 500
	Packets int64 `json:"packets,omitempty"`
}

// Validate validates this switch port statistics transmit raw
func (m *SwitchPortStatisticsTransmitRaw) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this switch port statistics transmit raw based on context it is used
func (m *SwitchPortStatisticsTransmitRaw) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SwitchPortStatisticsTransmitRaw) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SwitchPortStatisticsTransmitRaw) UnmarshalBinary(b []byte) error {
	var res SwitchPortStatisticsTransmitRaw
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SwitchPortSwitch The name of the specified cluster or storage switch.
//
// swagger:model SwitchPortSwitch
type SwitchPortSwitch struct {

	// links
	Links *SelfLink `json:"_links,omitempty"`

	// name
	// Example: RTP-SS01-510R03(FOC223443KQ)
	Name string `json:"name,omitempty"`
}

// Validate validates this switch port switch
func (m *SwitchPortSwitch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SwitchPortSwitch) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("switch" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this switch port switch based on the context it is used
func (m *SwitchPortSwitch) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SwitchPortSwitch) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("switch" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SwitchPortSwitch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SwitchPortSwitch) UnmarshalBinary(b []byte) error {
	var res SwitchPortSwitch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
