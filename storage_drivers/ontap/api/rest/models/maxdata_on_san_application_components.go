// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MaxdataOnSanApplicationComponents The list of application components to be created.
//
// swagger:model maxdata_on_san_application_components
type MaxdataOnSanApplicationComponents struct {

	// Defines the type of file system that will be installed on this application component.
	// Enum: [generic m1fs xfs]
	FileSystem *string `json:"file_system,omitempty"`

	// The host management URL for this application component.
	// Read Only: true
	HostManagementURL string `json:"host_management_url,omitempty"`

	// FQDN of the L2 host that contains the hot tier of this application component.
	// Required: true
	HostName *string `json:"host_name"`

	// The name of the initiator group through which the contents of this application will be accessed. Modification of this parameter is a disruptive operation. All LUNs in the application component will be unmapped from the current igroup and re-mapped to the new igroup.
	// Required: true
	// Max Length: 96
	// Min Length: 1
	IgroupName *string `json:"igroup_name"`

	// The number of LUNs in the application component.
	// Required: true
	// Maximum: 100
	// Minimum: 1
	LunCount *int64 `json:"lun_count"`

	// metadata
	Metadata []*MaxdataOnSanApplicationComponentsMetadataItems0 `json:"metadata,omitempty"`

	// The name of the application component.
	// Required: true
	// Max Length: 512
	// Min Length: 1
	Name *string `json:"name"`

	// protection type
	ProtectionType *MaxdataOnSanApplicationComponentsProtectionType `json:"protection_type,omitempty"`

	// storage service
	StorageService *MaxdataOnSanApplicationComponentsStorageService `json:"storage_service,omitempty"`

	// The total size of the application component, split across the member LUNs. Usage: {&lt;integer&gt;[KB|MB|GB|TB|PB]}
	// Required: true
	TotalSize *int64 `json:"total_size"`
}

// Validate validates this maxdata on san application components
func (m *MaxdataOnSanApplicationComponents) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFileSystem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIgroupName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLunCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtectionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var maxdataOnSanApplicationComponentsTypeFileSystemPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["generic","m1fs","xfs"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		maxdataOnSanApplicationComponentsTypeFileSystemPropEnum = append(maxdataOnSanApplicationComponentsTypeFileSystemPropEnum, v)
	}
}

const (

	// BEGIN RIPPY DEBUGGING
	// maxdata_on_san_application_components
	// MaxdataOnSanApplicationComponents
	// file_system
	// FileSystem
	// generic
	// END RIPPY DEBUGGING
	// MaxdataOnSanApplicationComponentsFileSystemGeneric captures enum value "generic"
	MaxdataOnSanApplicationComponentsFileSystemGeneric string = "generic"

	// BEGIN RIPPY DEBUGGING
	// maxdata_on_san_application_components
	// MaxdataOnSanApplicationComponents
	// file_system
	// FileSystem
	// m1fs
	// END RIPPY DEBUGGING
	// MaxdataOnSanApplicationComponentsFileSystemM1fs captures enum value "m1fs"
	MaxdataOnSanApplicationComponentsFileSystemM1fs string = "m1fs"

	// BEGIN RIPPY DEBUGGING
	// maxdata_on_san_application_components
	// MaxdataOnSanApplicationComponents
	// file_system
	// FileSystem
	// xfs
	// END RIPPY DEBUGGING
	// MaxdataOnSanApplicationComponentsFileSystemXfs captures enum value "xfs"
	MaxdataOnSanApplicationComponentsFileSystemXfs string = "xfs"
)

// prop value enum
func (m *MaxdataOnSanApplicationComponents) validateFileSystemEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, maxdataOnSanApplicationComponentsTypeFileSystemPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MaxdataOnSanApplicationComponents) validateFileSystem(formats strfmt.Registry) error {
	if swag.IsZero(m.FileSystem) { // not required
		return nil
	}

	// value enum
	if err := m.validateFileSystemEnum("file_system", "body", *m.FileSystem); err != nil {
		return err
	}

	return nil
}

func (m *MaxdataOnSanApplicationComponents) validateHostName(formats strfmt.Registry) error {

	if err := validate.Required("host_name", "body", m.HostName); err != nil {
		return err
	}

	return nil
}

func (m *MaxdataOnSanApplicationComponents) validateIgroupName(formats strfmt.Registry) error {

	if err := validate.Required("igroup_name", "body", m.IgroupName); err != nil {
		return err
	}

	if err := validate.MinLength("igroup_name", "body", *m.IgroupName, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("igroup_name", "body", *m.IgroupName, 96); err != nil {
		return err
	}

	return nil
}

func (m *MaxdataOnSanApplicationComponents) validateLunCount(formats strfmt.Registry) error {

	if err := validate.Required("lun_count", "body", m.LunCount); err != nil {
		return err
	}

	if err := validate.MinimumInt("lun_count", "body", *m.LunCount, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("lun_count", "body", *m.LunCount, 100, false); err != nil {
		return err
	}

	return nil
}

func (m *MaxdataOnSanApplicationComponents) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	for i := 0; i < len(m.Metadata); i++ {
		if swag.IsZero(m.Metadata[i]) { // not required
			continue
		}

		if m.Metadata[i] != nil {
			if err := m.Metadata[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("metadata" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MaxdataOnSanApplicationComponents) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 512); err != nil {
		return err
	}

	return nil
}

func (m *MaxdataOnSanApplicationComponents) validateProtectionType(formats strfmt.Registry) error {
	if swag.IsZero(m.ProtectionType) { // not required
		return nil
	}

	if m.ProtectionType != nil {
		if err := m.ProtectionType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protection_type")
			}
			return err
		}
	}

	return nil
}

func (m *MaxdataOnSanApplicationComponents) validateStorageService(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageService) { // not required
		return nil
	}

	if m.StorageService != nil {
		if err := m.StorageService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storage_service")
			}
			return err
		}
	}

	return nil
}

func (m *MaxdataOnSanApplicationComponents) validateTotalSize(formats strfmt.Registry) error {

	if err := validate.Required("total_size", "body", m.TotalSize); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this maxdata on san application components based on the context it is used
func (m *MaxdataOnSanApplicationComponents) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHostManagementURL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProtectionType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MaxdataOnSanApplicationComponents) contextValidateHostManagementURL(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "host_management_url", "body", string(m.HostManagementURL)); err != nil {
		return err
	}

	return nil
}

func (m *MaxdataOnSanApplicationComponents) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Metadata); i++ {

		if m.Metadata[i] != nil {
			if err := m.Metadata[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("metadata" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MaxdataOnSanApplicationComponents) contextValidateProtectionType(ctx context.Context, formats strfmt.Registry) error {

	if m.ProtectionType != nil {
		if err := m.ProtectionType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protection_type")
			}
			return err
		}
	}

	return nil
}

func (m *MaxdataOnSanApplicationComponents) contextValidateStorageService(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageService != nil {
		if err := m.StorageService.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storage_service")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MaxdataOnSanApplicationComponents) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MaxdataOnSanApplicationComponents) UnmarshalBinary(b []byte) error {
	var res MaxdataOnSanApplicationComponents
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MaxdataOnSanApplicationComponentsMetadataItems0 maxdata on san application components metadata items0
//
// swagger:model MaxdataOnSanApplicationComponentsMetadataItems0
type MaxdataOnSanApplicationComponentsMetadataItems0 struct {

	// Key to look up metadata associated with an application component.
	Key string `json:"key,omitempty"`

	// Value associated with the key.
	Value string `json:"value,omitempty"`
}

// Validate validates this maxdata on san application components metadata items0
func (m *MaxdataOnSanApplicationComponentsMetadataItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this maxdata on san application components metadata items0 based on context it is used
func (m *MaxdataOnSanApplicationComponentsMetadataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MaxdataOnSanApplicationComponentsMetadataItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MaxdataOnSanApplicationComponentsMetadataItems0) UnmarshalBinary(b []byte) error {
	var res MaxdataOnSanApplicationComponentsMetadataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MaxdataOnSanApplicationComponentsProtectionType maxdata on san application components protection type
//
// swagger:model MaxdataOnSanApplicationComponentsProtectionType
type MaxdataOnSanApplicationComponentsProtectionType struct {

	// The local rpo of the application component.
	// Enum: [6_hourly 15_minutely hourly none]
	LocalRpo string `json:"local_rpo,omitempty"`

	// The remote rpo of the application component.
	// Enum: [6_hourly 15_minutely hourly none]
	RemoteRpo string `json:"remote_rpo,omitempty"`
}

// Validate validates this maxdata on san application components protection type
func (m *MaxdataOnSanApplicationComponentsProtectionType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLocalRpo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemoteRpo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var maxdataOnSanApplicationComponentsProtectionTypeTypeLocalRpoPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["6_hourly","15_minutely","hourly","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		maxdataOnSanApplicationComponentsProtectionTypeTypeLocalRpoPropEnum = append(maxdataOnSanApplicationComponentsProtectionTypeTypeLocalRpoPropEnum, v)
	}
}

const (

	// BEGIN RIPPY DEBUGGING
	// MaxdataOnSanApplicationComponentsProtectionType
	// MaxdataOnSanApplicationComponentsProtectionType
	// local_rpo
	// LocalRpo
	// 6_hourly
	// END RIPPY DEBUGGING
	// MaxdataOnSanApplicationComponentsProtectionTypeLocalRpoNr6Hourly captures enum value "6_hourly"
	MaxdataOnSanApplicationComponentsProtectionTypeLocalRpoNr6Hourly string = "6_hourly"

	// BEGIN RIPPY DEBUGGING
	// MaxdataOnSanApplicationComponentsProtectionType
	// MaxdataOnSanApplicationComponentsProtectionType
	// local_rpo
	// LocalRpo
	// 15_minutely
	// END RIPPY DEBUGGING
	// MaxdataOnSanApplicationComponentsProtectionTypeLocalRpoNr15Minutely captures enum value "15_minutely"
	MaxdataOnSanApplicationComponentsProtectionTypeLocalRpoNr15Minutely string = "15_minutely"

	// BEGIN RIPPY DEBUGGING
	// MaxdataOnSanApplicationComponentsProtectionType
	// MaxdataOnSanApplicationComponentsProtectionType
	// local_rpo
	// LocalRpo
	// hourly
	// END RIPPY DEBUGGING
	// MaxdataOnSanApplicationComponentsProtectionTypeLocalRpoHourly captures enum value "hourly"
	MaxdataOnSanApplicationComponentsProtectionTypeLocalRpoHourly string = "hourly"

	// BEGIN RIPPY DEBUGGING
	// MaxdataOnSanApplicationComponentsProtectionType
	// MaxdataOnSanApplicationComponentsProtectionType
	// local_rpo
	// LocalRpo
	// none
	// END RIPPY DEBUGGING
	// MaxdataOnSanApplicationComponentsProtectionTypeLocalRpoNone captures enum value "none"
	MaxdataOnSanApplicationComponentsProtectionTypeLocalRpoNone string = "none"
)

// prop value enum
func (m *MaxdataOnSanApplicationComponentsProtectionType) validateLocalRpoEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, maxdataOnSanApplicationComponentsProtectionTypeTypeLocalRpoPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MaxdataOnSanApplicationComponentsProtectionType) validateLocalRpo(formats strfmt.Registry) error {
	if swag.IsZero(m.LocalRpo) { // not required
		return nil
	}

	// value enum
	if err := m.validateLocalRpoEnum("protection_type"+"."+"local_rpo", "body", m.LocalRpo); err != nil {
		return err
	}

	return nil
}

var maxdataOnSanApplicationComponentsProtectionTypeTypeRemoteRpoPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["6_hourly","15_minutely","hourly","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		maxdataOnSanApplicationComponentsProtectionTypeTypeRemoteRpoPropEnum = append(maxdataOnSanApplicationComponentsProtectionTypeTypeRemoteRpoPropEnum, v)
	}
}

const (

	// BEGIN RIPPY DEBUGGING
	// MaxdataOnSanApplicationComponentsProtectionType
	// MaxdataOnSanApplicationComponentsProtectionType
	// remote_rpo
	// RemoteRpo
	// 6_hourly
	// END RIPPY DEBUGGING
	// MaxdataOnSanApplicationComponentsProtectionTypeRemoteRpoNr6Hourly captures enum value "6_hourly"
	MaxdataOnSanApplicationComponentsProtectionTypeRemoteRpoNr6Hourly string = "6_hourly"

	// BEGIN RIPPY DEBUGGING
	// MaxdataOnSanApplicationComponentsProtectionType
	// MaxdataOnSanApplicationComponentsProtectionType
	// remote_rpo
	// RemoteRpo
	// 15_minutely
	// END RIPPY DEBUGGING
	// MaxdataOnSanApplicationComponentsProtectionTypeRemoteRpoNr15Minutely captures enum value "15_minutely"
	MaxdataOnSanApplicationComponentsProtectionTypeRemoteRpoNr15Minutely string = "15_minutely"

	// BEGIN RIPPY DEBUGGING
	// MaxdataOnSanApplicationComponentsProtectionType
	// MaxdataOnSanApplicationComponentsProtectionType
	// remote_rpo
	// RemoteRpo
	// hourly
	// END RIPPY DEBUGGING
	// MaxdataOnSanApplicationComponentsProtectionTypeRemoteRpoHourly captures enum value "hourly"
	MaxdataOnSanApplicationComponentsProtectionTypeRemoteRpoHourly string = "hourly"

	// BEGIN RIPPY DEBUGGING
	// MaxdataOnSanApplicationComponentsProtectionType
	// MaxdataOnSanApplicationComponentsProtectionType
	// remote_rpo
	// RemoteRpo
	// none
	// END RIPPY DEBUGGING
	// MaxdataOnSanApplicationComponentsProtectionTypeRemoteRpoNone captures enum value "none"
	MaxdataOnSanApplicationComponentsProtectionTypeRemoteRpoNone string = "none"
)

// prop value enum
func (m *MaxdataOnSanApplicationComponentsProtectionType) validateRemoteRpoEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, maxdataOnSanApplicationComponentsProtectionTypeTypeRemoteRpoPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MaxdataOnSanApplicationComponentsProtectionType) validateRemoteRpo(formats strfmt.Registry) error {
	if swag.IsZero(m.RemoteRpo) { // not required
		return nil
	}

	// value enum
	if err := m.validateRemoteRpoEnum("protection_type"+"."+"remote_rpo", "body", m.RemoteRpo); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this maxdata on san application components protection type based on context it is used
func (m *MaxdataOnSanApplicationComponentsProtectionType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MaxdataOnSanApplicationComponentsProtectionType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MaxdataOnSanApplicationComponentsProtectionType) UnmarshalBinary(b []byte) error {
	var res MaxdataOnSanApplicationComponentsProtectionType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MaxdataOnSanApplicationComponentsStorageService maxdata on san application components storage service
//
// swagger:model MaxdataOnSanApplicationComponentsStorageService
type MaxdataOnSanApplicationComponentsStorageService struct {

	// The storage service of the application component.
	// Enum: [extreme maxdata performance value]
	Name *string `json:"name,omitempty"`
}

// Validate validates this maxdata on san application components storage service
func (m *MaxdataOnSanApplicationComponentsStorageService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var maxdataOnSanApplicationComponentsStorageServiceTypeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["extreme","maxdata","performance","value"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		maxdataOnSanApplicationComponentsStorageServiceTypeNamePropEnum = append(maxdataOnSanApplicationComponentsStorageServiceTypeNamePropEnum, v)
	}
}

const (

	// BEGIN RIPPY DEBUGGING
	// MaxdataOnSanApplicationComponentsStorageService
	// MaxdataOnSanApplicationComponentsStorageService
	// name
	// Name
	// extreme
	// END RIPPY DEBUGGING
	// MaxdataOnSanApplicationComponentsStorageServiceNameExtreme captures enum value "extreme"
	MaxdataOnSanApplicationComponentsStorageServiceNameExtreme string = "extreme"

	// BEGIN RIPPY DEBUGGING
	// MaxdataOnSanApplicationComponentsStorageService
	// MaxdataOnSanApplicationComponentsStorageService
	// name
	// Name
	// maxdata
	// END RIPPY DEBUGGING
	// MaxdataOnSanApplicationComponentsStorageServiceNameMaxdata captures enum value "maxdata"
	MaxdataOnSanApplicationComponentsStorageServiceNameMaxdata string = "maxdata"

	// BEGIN RIPPY DEBUGGING
	// MaxdataOnSanApplicationComponentsStorageService
	// MaxdataOnSanApplicationComponentsStorageService
	// name
	// Name
	// performance
	// END RIPPY DEBUGGING
	// MaxdataOnSanApplicationComponentsStorageServiceNamePerformance captures enum value "performance"
	MaxdataOnSanApplicationComponentsStorageServiceNamePerformance string = "performance"

	// BEGIN RIPPY DEBUGGING
	// MaxdataOnSanApplicationComponentsStorageService
	// MaxdataOnSanApplicationComponentsStorageService
	// name
	// Name
	// value
	// END RIPPY DEBUGGING
	// MaxdataOnSanApplicationComponentsStorageServiceNameValue captures enum value "value"
	MaxdataOnSanApplicationComponentsStorageServiceNameValue string = "value"
)

// prop value enum
func (m *MaxdataOnSanApplicationComponentsStorageService) validateNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, maxdataOnSanApplicationComponentsStorageServiceTypeNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MaxdataOnSanApplicationComponentsStorageService) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	// value enum
	if err := m.validateNameEnum("storage_service"+"."+"name", "body", *m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this maxdata on san application components storage service based on context it is used
func (m *MaxdataOnSanApplicationComponentsStorageService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MaxdataOnSanApplicationComponentsStorageService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MaxdataOnSanApplicationComponentsStorageService) UnmarshalBinary(b []byte) error {
	var res MaxdataOnSanApplicationComponentsStorageService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HELLO RIPPY
