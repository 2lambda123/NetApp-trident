// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// San A generic SAN application.
//
// swagger:model san
type San struct {

	// application components
	// Required: true
	// Max Items: 10
	// Min Items: 1
	ApplicationComponents []*SanApplicationComponentsItems0 `json:"application_components"`

	// exclude aggregates
	ExcludeAggregates []*SanExcludeAggregatesItems0 `json:"exclude_aggregates,omitempty"`

	// The list of initiator groups to create.
	// Max Items: 10
	// Min Items: 0
	NewIgroups []*SanNewIgroups `json:"new_igroups,omitempty"`

	// The name of the host OS running the application.
	// Enum: [aix hpux hyper_v linux netware openvms solaris solaris_efi vmware windows windows_2008 windows_gpt xen]
	OsType string `json:"os_type,omitempty"`

	// protection type
	ProtectionType *SanProtectionType `json:"protection_type,omitempty"`
}

// Validate validates this san
func (m *San) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationComponents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExcludeAggregates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewIgroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtectionType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *San) validateApplicationComponents(formats strfmt.Registry) error {

	if err := validate.Required("application_components", "body", m.ApplicationComponents); err != nil {
		return err
	}

	iApplicationComponentsSize := int64(len(m.ApplicationComponents))

	if err := validate.MinItems("application_components", "body", iApplicationComponentsSize, 1); err != nil {
		return err
	}

	if err := validate.MaxItems("application_components", "body", iApplicationComponentsSize, 10); err != nil {
		return err
	}

	for i := 0; i < len(m.ApplicationComponents); i++ {
		if swag.IsZero(m.ApplicationComponents[i]) { // not required
			continue
		}

		if m.ApplicationComponents[i] != nil {
			if err := m.ApplicationComponents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("application_components" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *San) validateExcludeAggregates(formats strfmt.Registry) error {
	if swag.IsZero(m.ExcludeAggregates) { // not required
		return nil
	}

	for i := 0; i < len(m.ExcludeAggregates); i++ {
		if swag.IsZero(m.ExcludeAggregates[i]) { // not required
			continue
		}

		if m.ExcludeAggregates[i] != nil {
			if err := m.ExcludeAggregates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("exclude_aggregates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *San) validateNewIgroups(formats strfmt.Registry) error {
	if swag.IsZero(m.NewIgroups) { // not required
		return nil
	}

	iNewIgroupsSize := int64(len(m.NewIgroups))

	if err := validate.MinItems("new_igroups", "body", iNewIgroupsSize, 0); err != nil {
		return err
	}

	if err := validate.MaxItems("new_igroups", "body", iNewIgroupsSize, 10); err != nil {
		return err
	}

	for i := 0; i < len(m.NewIgroups); i++ {
		if swag.IsZero(m.NewIgroups[i]) { // not required
			continue
		}

		if m.NewIgroups[i] != nil {
			if err := m.NewIgroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("new_igroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var sanTypeOsTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["aix","hpux","hyper_v","linux","netware","openvms","solaris","solaris_efi","vmware","windows","windows_2008","windows_gpt","xen"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sanTypeOsTypePropEnum = append(sanTypeOsTypePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// san
	// San
	// os_type
	// OsType
	// aix
	// END DEBUGGING
	// SanOsTypeAix captures enum value "aix"
	SanOsTypeAix string = "aix"

	// BEGIN DEBUGGING
	// san
	// San
	// os_type
	// OsType
	// hpux
	// END DEBUGGING
	// SanOsTypeHpux captures enum value "hpux"
	SanOsTypeHpux string = "hpux"

	// BEGIN DEBUGGING
	// san
	// San
	// os_type
	// OsType
	// hyper_v
	// END DEBUGGING
	// SanOsTypeHyperv captures enum value "hyper_v"
	SanOsTypeHyperv string = "hyper_v"

	// BEGIN DEBUGGING
	// san
	// San
	// os_type
	// OsType
	// linux
	// END DEBUGGING
	// SanOsTypeLinux captures enum value "linux"
	SanOsTypeLinux string = "linux"

	// BEGIN DEBUGGING
	// san
	// San
	// os_type
	// OsType
	// netware
	// END DEBUGGING
	// SanOsTypeNetware captures enum value "netware"
	SanOsTypeNetware string = "netware"

	// BEGIN DEBUGGING
	// san
	// San
	// os_type
	// OsType
	// openvms
	// END DEBUGGING
	// SanOsTypeOpenvms captures enum value "openvms"
	SanOsTypeOpenvms string = "openvms"

	// BEGIN DEBUGGING
	// san
	// San
	// os_type
	// OsType
	// solaris
	// END DEBUGGING
	// SanOsTypeSolaris captures enum value "solaris"
	SanOsTypeSolaris string = "solaris"

	// BEGIN DEBUGGING
	// san
	// San
	// os_type
	// OsType
	// solaris_efi
	// END DEBUGGING
	// SanOsTypeSolarisEfi captures enum value "solaris_efi"
	SanOsTypeSolarisEfi string = "solaris_efi"

	// BEGIN DEBUGGING
	// san
	// San
	// os_type
	// OsType
	// vmware
	// END DEBUGGING
	// SanOsTypeVmware captures enum value "vmware"
	SanOsTypeVmware string = "vmware"

	// BEGIN DEBUGGING
	// san
	// San
	// os_type
	// OsType
	// windows
	// END DEBUGGING
	// SanOsTypeWindows captures enum value "windows"
	SanOsTypeWindows string = "windows"

	// BEGIN DEBUGGING
	// san
	// San
	// os_type
	// OsType
	// windows_2008
	// END DEBUGGING
	// SanOsTypeWindows2008 captures enum value "windows_2008"
	SanOsTypeWindows2008 string = "windows_2008"

	// BEGIN DEBUGGING
	// san
	// San
	// os_type
	// OsType
	// windows_gpt
	// END DEBUGGING
	// SanOsTypeWindowsGpt captures enum value "windows_gpt"
	SanOsTypeWindowsGpt string = "windows_gpt"

	// BEGIN DEBUGGING
	// san
	// San
	// os_type
	// OsType
	// xen
	// END DEBUGGING
	// SanOsTypeXen captures enum value "xen"
	SanOsTypeXen string = "xen"
)

// prop value enum
func (m *San) validateOsTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, sanTypeOsTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *San) validateOsType(formats strfmt.Registry) error {
	if swag.IsZero(m.OsType) { // not required
		return nil
	}

	// value enum
	if err := m.validateOsTypeEnum("os_type", "body", m.OsType); err != nil {
		return err
	}

	return nil
}

func (m *San) validateProtectionType(formats strfmt.Registry) error {
	if swag.IsZero(m.ProtectionType) { // not required
		return nil
	}

	if m.ProtectionType != nil {
		if err := m.ProtectionType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protection_type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this san based on the context it is used
func (m *San) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApplicationComponents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExcludeAggregates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNewIgroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProtectionType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *San) contextValidateApplicationComponents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ApplicationComponents); i++ {

		if m.ApplicationComponents[i] != nil {
			if err := m.ApplicationComponents[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("application_components" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *San) contextValidateExcludeAggregates(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExcludeAggregates); i++ {

		if m.ExcludeAggregates[i] != nil {
			if err := m.ExcludeAggregates[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("exclude_aggregates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *San) contextValidateNewIgroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NewIgroups); i++ {

		if m.NewIgroups[i] != nil {
			if err := m.NewIgroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("new_igroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *San) contextValidateProtectionType(ctx context.Context, formats strfmt.Registry) error {

	if m.ProtectionType != nil {
		if err := m.ProtectionType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protection_type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *San) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *San) UnmarshalBinary(b []byte) error {
	var res San
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SanApplicationComponentsItems0 san application components items0
//
// swagger:model SanApplicationComponentsItems0
type SanApplicationComponentsItems0 struct {

	// The name of the initiator group through which the contents of this application will be accessed. Modification of this parameter is a disruptive operation. All LUNs in the application component will be unmapped from the current igroup and re-mapped to the new igroup.
	// Max Length: 96
	// Min Length: 1
	IgroupName string `json:"igroup_name,omitempty"`

	// The number of LUNs in the application component.
	// Maximum: 32
	// Minimum: 1
	LunCount int64 `json:"lun_count,omitempty"`

	// The name of the application component.
	// Required: true
	// Max Length: 512
	// Min Length: 1
	Name *string `json:"name"`

	// The name of the host OS running the application.
	// Enum: [aix hpux hyper_v linux netware openvms solaris solaris_efi vmware windows windows_2008 windows_gpt xen]
	OsType string `json:"os_type,omitempty"`

	// qos
	Qos *SanApplicationComponentsItems0Qos `json:"qos,omitempty"`

	// storage service
	StorageService *SanApplicationComponentsItems0StorageService `json:"storage_service,omitempty"`

	// tiering
	Tiering *SanApplicationComponentsTiering `json:"tiering,omitempty"`

	// The total size of the application component, split across the member LUNs. Usage: {&lt;integer&gt;[KB|MB|GB|TB|PB]}
	TotalSize int64 `json:"total_size,omitempty"`
}

// Validate validates this san application components items0
func (m *SanApplicationComponentsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIgroupName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLunCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQos(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTiering(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SanApplicationComponentsItems0) validateIgroupName(formats strfmt.Registry) error {
	if swag.IsZero(m.IgroupName) { // not required
		return nil
	}

	if err := validate.MinLength("igroup_name", "body", m.IgroupName, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("igroup_name", "body", m.IgroupName, 96); err != nil {
		return err
	}

	return nil
}

func (m *SanApplicationComponentsItems0) validateLunCount(formats strfmt.Registry) error {
	if swag.IsZero(m.LunCount) { // not required
		return nil
	}

	if err := validate.MinimumInt("lun_count", "body", m.LunCount, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("lun_count", "body", m.LunCount, 32, false); err != nil {
		return err
	}

	return nil
}

func (m *SanApplicationComponentsItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 512); err != nil {
		return err
	}

	return nil
}

var sanApplicationComponentsItems0TypeOsTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["aix","hpux","hyper_v","linux","netware","openvms","solaris","solaris_efi","vmware","windows","windows_2008","windows_gpt","xen"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sanApplicationComponentsItems0TypeOsTypePropEnum = append(sanApplicationComponentsItems0TypeOsTypePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// SanApplicationComponentsItems0
	// SanApplicationComponentsItems0
	// os_type
	// OsType
	// aix
	// END DEBUGGING
	// SanApplicationComponentsItems0OsTypeAix captures enum value "aix"
	SanApplicationComponentsItems0OsTypeAix string = "aix"

	// BEGIN DEBUGGING
	// SanApplicationComponentsItems0
	// SanApplicationComponentsItems0
	// os_type
	// OsType
	// hpux
	// END DEBUGGING
	// SanApplicationComponentsItems0OsTypeHpux captures enum value "hpux"
	SanApplicationComponentsItems0OsTypeHpux string = "hpux"

	// BEGIN DEBUGGING
	// SanApplicationComponentsItems0
	// SanApplicationComponentsItems0
	// os_type
	// OsType
	// hyper_v
	// END DEBUGGING
	// SanApplicationComponentsItems0OsTypeHyperv captures enum value "hyper_v"
	SanApplicationComponentsItems0OsTypeHyperv string = "hyper_v"

	// BEGIN DEBUGGING
	// SanApplicationComponentsItems0
	// SanApplicationComponentsItems0
	// os_type
	// OsType
	// linux
	// END DEBUGGING
	// SanApplicationComponentsItems0OsTypeLinux captures enum value "linux"
	SanApplicationComponentsItems0OsTypeLinux string = "linux"

	// BEGIN DEBUGGING
	// SanApplicationComponentsItems0
	// SanApplicationComponentsItems0
	// os_type
	// OsType
	// netware
	// END DEBUGGING
	// SanApplicationComponentsItems0OsTypeNetware captures enum value "netware"
	SanApplicationComponentsItems0OsTypeNetware string = "netware"

	// BEGIN DEBUGGING
	// SanApplicationComponentsItems0
	// SanApplicationComponentsItems0
	// os_type
	// OsType
	// openvms
	// END DEBUGGING
	// SanApplicationComponentsItems0OsTypeOpenvms captures enum value "openvms"
	SanApplicationComponentsItems0OsTypeOpenvms string = "openvms"

	// BEGIN DEBUGGING
	// SanApplicationComponentsItems0
	// SanApplicationComponentsItems0
	// os_type
	// OsType
	// solaris
	// END DEBUGGING
	// SanApplicationComponentsItems0OsTypeSolaris captures enum value "solaris"
	SanApplicationComponentsItems0OsTypeSolaris string = "solaris"

	// BEGIN DEBUGGING
	// SanApplicationComponentsItems0
	// SanApplicationComponentsItems0
	// os_type
	// OsType
	// solaris_efi
	// END DEBUGGING
	// SanApplicationComponentsItems0OsTypeSolarisEfi captures enum value "solaris_efi"
	SanApplicationComponentsItems0OsTypeSolarisEfi string = "solaris_efi"

	// BEGIN DEBUGGING
	// SanApplicationComponentsItems0
	// SanApplicationComponentsItems0
	// os_type
	// OsType
	// vmware
	// END DEBUGGING
	// SanApplicationComponentsItems0OsTypeVmware captures enum value "vmware"
	SanApplicationComponentsItems0OsTypeVmware string = "vmware"

	// BEGIN DEBUGGING
	// SanApplicationComponentsItems0
	// SanApplicationComponentsItems0
	// os_type
	// OsType
	// windows
	// END DEBUGGING
	// SanApplicationComponentsItems0OsTypeWindows captures enum value "windows"
	SanApplicationComponentsItems0OsTypeWindows string = "windows"

	// BEGIN DEBUGGING
	// SanApplicationComponentsItems0
	// SanApplicationComponentsItems0
	// os_type
	// OsType
	// windows_2008
	// END DEBUGGING
	// SanApplicationComponentsItems0OsTypeWindows2008 captures enum value "windows_2008"
	SanApplicationComponentsItems0OsTypeWindows2008 string = "windows_2008"

	// BEGIN DEBUGGING
	// SanApplicationComponentsItems0
	// SanApplicationComponentsItems0
	// os_type
	// OsType
	// windows_gpt
	// END DEBUGGING
	// SanApplicationComponentsItems0OsTypeWindowsGpt captures enum value "windows_gpt"
	SanApplicationComponentsItems0OsTypeWindowsGpt string = "windows_gpt"

	// BEGIN DEBUGGING
	// SanApplicationComponentsItems0
	// SanApplicationComponentsItems0
	// os_type
	// OsType
	// xen
	// END DEBUGGING
	// SanApplicationComponentsItems0OsTypeXen captures enum value "xen"
	SanApplicationComponentsItems0OsTypeXen string = "xen"
)

// prop value enum
func (m *SanApplicationComponentsItems0) validateOsTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, sanApplicationComponentsItems0TypeOsTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SanApplicationComponentsItems0) validateOsType(formats strfmt.Registry) error {
	if swag.IsZero(m.OsType) { // not required
		return nil
	}

	// value enum
	if err := m.validateOsTypeEnum("os_type", "body", m.OsType); err != nil {
		return err
	}

	return nil
}

func (m *SanApplicationComponentsItems0) validateQos(formats strfmt.Registry) error {
	if swag.IsZero(m.Qos) { // not required
		return nil
	}

	if m.Qos != nil {
		if err := m.Qos.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("qos")
			}
			return err
		}
	}

	return nil
}

func (m *SanApplicationComponentsItems0) validateStorageService(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageService) { // not required
		return nil
	}

	if m.StorageService != nil {
		if err := m.StorageService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storage_service")
			}
			return err
		}
	}

	return nil
}

func (m *SanApplicationComponentsItems0) validateTiering(formats strfmt.Registry) error {
	if swag.IsZero(m.Tiering) { // not required
		return nil
	}

	if m.Tiering != nil {
		if err := m.Tiering.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tiering")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this san application components items0 based on the context it is used
func (m *SanApplicationComponentsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateQos(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTiering(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SanApplicationComponentsItems0) contextValidateQos(ctx context.Context, formats strfmt.Registry) error {

	if m.Qos != nil {
		if err := m.Qos.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("qos")
			}
			return err
		}
	}

	return nil
}

func (m *SanApplicationComponentsItems0) contextValidateStorageService(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageService != nil {
		if err := m.StorageService.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storage_service")
			}
			return err
		}
	}

	return nil
}

func (m *SanApplicationComponentsItems0) contextValidateTiering(ctx context.Context, formats strfmt.Registry) error {

	if m.Tiering != nil {
		if err := m.Tiering.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tiering")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SanApplicationComponentsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SanApplicationComponentsItems0) UnmarshalBinary(b []byte) error {
	var res SanApplicationComponentsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SanApplicationComponentsItems0Qos san application components items0 qos
//
// swagger:model SanApplicationComponentsItems0Qos
type SanApplicationComponentsItems0Qos struct {

	// policy
	Policy *SanApplicationComponentsItems0QosPolicy `json:"policy,omitempty"`
}

// Validate validates this san application components items0 qos
func (m *SanApplicationComponentsItems0Qos) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SanApplicationComponentsItems0Qos) validatePolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.Policy) { // not required
		return nil
	}

	if m.Policy != nil {
		if err := m.Policy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("qos" + "." + "policy")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this san application components items0 qos based on the context it is used
func (m *SanApplicationComponentsItems0Qos) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SanApplicationComponentsItems0Qos) contextValidatePolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.Policy != nil {
		if err := m.Policy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("qos" + "." + "policy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SanApplicationComponentsItems0Qos) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SanApplicationComponentsItems0Qos) UnmarshalBinary(b []byte) error {
	var res SanApplicationComponentsItems0Qos
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SanApplicationComponentsItems0QosPolicy san application components items0 qos policy
//
// swagger:model SanApplicationComponentsItems0QosPolicy
type SanApplicationComponentsItems0QosPolicy struct {

	// The name of an existing QoS policy.
	Name string `json:"name,omitempty"`

	// The UUID of an existing QoS policy. Usage: &lt;UUID&gt;
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this san application components items0 qos policy
func (m *SanApplicationComponentsItems0QosPolicy) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this san application components items0 qos policy based on context it is used
func (m *SanApplicationComponentsItems0QosPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SanApplicationComponentsItems0QosPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SanApplicationComponentsItems0QosPolicy) UnmarshalBinary(b []byte) error {
	var res SanApplicationComponentsItems0QosPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SanApplicationComponentsItems0StorageService san application components items0 storage service
//
// swagger:model SanApplicationComponentsItems0StorageService
type SanApplicationComponentsItems0StorageService struct {

	// The storage service of the application component.
	// Enum: [extreme performance value]
	Name *string `json:"name,omitempty"`
}

// Validate validates this san application components items0 storage service
func (m *SanApplicationComponentsItems0StorageService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var sanApplicationComponentsItems0StorageServiceTypeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["extreme","performance","value"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sanApplicationComponentsItems0StorageServiceTypeNamePropEnum = append(sanApplicationComponentsItems0StorageServiceTypeNamePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// SanApplicationComponentsItems0StorageService
	// SanApplicationComponentsItems0StorageService
	// name
	// Name
	// extreme
	// END DEBUGGING
	// SanApplicationComponentsItems0StorageServiceNameExtreme captures enum value "extreme"
	SanApplicationComponentsItems0StorageServiceNameExtreme string = "extreme"

	// BEGIN DEBUGGING
	// SanApplicationComponentsItems0StorageService
	// SanApplicationComponentsItems0StorageService
	// name
	// Name
	// performance
	// END DEBUGGING
	// SanApplicationComponentsItems0StorageServiceNamePerformance captures enum value "performance"
	SanApplicationComponentsItems0StorageServiceNamePerformance string = "performance"

	// BEGIN DEBUGGING
	// SanApplicationComponentsItems0StorageService
	// SanApplicationComponentsItems0StorageService
	// name
	// Name
	// value
	// END DEBUGGING
	// SanApplicationComponentsItems0StorageServiceNameValue captures enum value "value"
	SanApplicationComponentsItems0StorageServiceNameValue string = "value"
)

// prop value enum
func (m *SanApplicationComponentsItems0StorageService) validateNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, sanApplicationComponentsItems0StorageServiceTypeNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SanApplicationComponentsItems0StorageService) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	// value enum
	if err := m.validateNameEnum("storage_service"+"."+"name", "body", *m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this san application components items0 storage service based on context it is used
func (m *SanApplicationComponentsItems0StorageService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SanApplicationComponentsItems0StorageService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SanApplicationComponentsItems0StorageService) UnmarshalBinary(b []byte) error {
	var res SanApplicationComponentsItems0StorageService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SanExcludeAggregatesItems0 san exclude aggregates items0
//
// swagger:model SanExcludeAggregatesItems0
type SanExcludeAggregatesItems0 struct {

	// The name of the aggregate to exclude. Usage: &lt;aggr0_svctridentci_vsim3&gt;
	Name string `json:"name,omitempty"`

	// The ID of the aggregate to exclude. Usage: &lt;UUID&gt;
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this san exclude aggregates items0
func (m *SanExcludeAggregatesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this san exclude aggregates items0 based on context it is used
func (m *SanExcludeAggregatesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SanExcludeAggregatesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SanExcludeAggregatesItems0) UnmarshalBinary(b []byte) error {
	var res SanExcludeAggregatesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SanProtectionType san protection type
//
// swagger:model SanProtectionType
type SanProtectionType struct {

	// The Snapshot copy policy to apply to each volume in the smart container. This property is only supported for smart containers. Usage: &lt;snapshot policy&gt;
	LocalPolicy string `json:"local_policy,omitempty"`

	// The local RPO of the application.
	// Enum: [hourly none]
	LocalRpo string `json:"local_rpo,omitempty"`

	// The remote RPO of the application.
	// Enum: [none zero]
	RemoteRpo string `json:"remote_rpo,omitempty"`
}

// Validate validates this san protection type
func (m *SanProtectionType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLocalRpo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemoteRpo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var sanProtectionTypeTypeLocalRpoPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["hourly","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sanProtectionTypeTypeLocalRpoPropEnum = append(sanProtectionTypeTypeLocalRpoPropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// SanProtectionType
	// SanProtectionType
	// local_rpo
	// LocalRpo
	// hourly
	// END DEBUGGING
	// SanProtectionTypeLocalRpoHourly captures enum value "hourly"
	SanProtectionTypeLocalRpoHourly string = "hourly"

	// BEGIN DEBUGGING
	// SanProtectionType
	// SanProtectionType
	// local_rpo
	// LocalRpo
	// none
	// END DEBUGGING
	// SanProtectionTypeLocalRpoNone captures enum value "none"
	SanProtectionTypeLocalRpoNone string = "none"
)

// prop value enum
func (m *SanProtectionType) validateLocalRpoEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, sanProtectionTypeTypeLocalRpoPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SanProtectionType) validateLocalRpo(formats strfmt.Registry) error {
	if swag.IsZero(m.LocalRpo) { // not required
		return nil
	}

	// value enum
	if err := m.validateLocalRpoEnum("protection_type"+"."+"local_rpo", "body", m.LocalRpo); err != nil {
		return err
	}

	return nil
}

var sanProtectionTypeTypeRemoteRpoPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["none","zero"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sanProtectionTypeTypeRemoteRpoPropEnum = append(sanProtectionTypeTypeRemoteRpoPropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// SanProtectionType
	// SanProtectionType
	// remote_rpo
	// RemoteRpo
	// none
	// END DEBUGGING
	// SanProtectionTypeRemoteRpoNone captures enum value "none"
	SanProtectionTypeRemoteRpoNone string = "none"

	// BEGIN DEBUGGING
	// SanProtectionType
	// SanProtectionType
	// remote_rpo
	// RemoteRpo
	// zero
	// END DEBUGGING
	// SanProtectionTypeRemoteRpoZero captures enum value "zero"
	SanProtectionTypeRemoteRpoZero string = "zero"
)

// prop value enum
func (m *SanProtectionType) validateRemoteRpoEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, sanProtectionTypeTypeRemoteRpoPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SanProtectionType) validateRemoteRpo(formats strfmt.Registry) error {
	if swag.IsZero(m.RemoteRpo) { // not required
		return nil
	}

	// value enum
	if err := m.validateRemoteRpoEnum("protection_type"+"."+"remote_rpo", "body", m.RemoteRpo); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this san protection type based on context it is used
func (m *SanProtectionType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SanProtectionType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SanProtectionType) UnmarshalBinary(b []byte) error {
	var res SanProtectionType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
