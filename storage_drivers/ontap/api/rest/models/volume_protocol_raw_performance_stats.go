// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VolumeProtocolRawPerformanceStats volume protocol raw performance stats
//
// swagger:model volume_protocol_raw_performance_stats
type VolumeProtocolRawPerformanceStats struct {

	// access
	Access *VolumeProtocolRawPerformanceStatsAccess `json:"access,omitempty"`

	// audit
	Audit *VolumeProtocolRawPerformanceStatsAudit `json:"audit,omitempty"`

	// create
	Create *VolumeProtocolRawPerformanceStatsCreate `json:"create,omitempty"`

	// getattr
	Getattr *VolumeProtocolRawPerformanceStatsGetattr `json:"getattr,omitempty"`

	// link
	Link *VolumeProtocolRawPerformanceStatsLink `json:"link,omitempty"`

	// lock
	Lock *VolumeProtocolRawPerformanceStatsLock `json:"lock,omitempty"`

	// lookup
	Lookup *VolumeProtocolRawPerformanceStatsLookup `json:"lookup,omitempty"`

	// open
	Open *VolumeProtocolRawPerformanceStatsOpen `json:"open,omitempty"`

	// read
	Read *VolumeProtocolRawPerformanceStatsRead `json:"read,omitempty"`

	// readdir
	Readdir *VolumeProtocolRawPerformanceStatsReaddir `json:"readdir,omitempty"`

	// readlink
	Readlink *VolumeProtocolRawPerformanceStatsReadlink `json:"readlink,omitempty"`

	// rename
	Rename *VolumeProtocolRawPerformanceStatsRename `json:"rename,omitempty"`

	// setattr
	Setattr *VolumeProtocolRawPerformanceStatsSetattr `json:"setattr,omitempty"`

	// unlink
	Unlink *VolumeProtocolRawPerformanceStatsUnlink `json:"unlink,omitempty"`

	// watch
	Watch *VolumeProtocolRawPerformanceStatsWatch `json:"watch,omitempty"`

	// write
	Write *VolumeProtocolRawPerformanceStatsWrite `json:"write,omitempty"`
}

// Validate validates this volume protocol raw performance stats
func (m *VolumeProtocolRawPerformanceStats) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccess(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAudit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGetattr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLock(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLookup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOpen(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRead(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReaddir(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReadlink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRename(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSetattr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnlink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWatch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWrite(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VolumeProtocolRawPerformanceStats) validateAccess(formats strfmt.Registry) error {
	if swag.IsZero(m.Access) { // not required
		return nil
	}

	if m.Access != nil {
		if err := m.Access.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("access")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeProtocolRawPerformanceStats) validateAudit(formats strfmt.Registry) error {
	if swag.IsZero(m.Audit) { // not required
		return nil
	}

	if m.Audit != nil {
		if err := m.Audit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("audit")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeProtocolRawPerformanceStats) validateCreate(formats strfmt.Registry) error {
	if swag.IsZero(m.Create) { // not required
		return nil
	}

	if m.Create != nil {
		if err := m.Create.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("create")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeProtocolRawPerformanceStats) validateGetattr(formats strfmt.Registry) error {
	if swag.IsZero(m.Getattr) { // not required
		return nil
	}

	if m.Getattr != nil {
		if err := m.Getattr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getattr")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeProtocolRawPerformanceStats) validateLink(formats strfmt.Registry) error {
	if swag.IsZero(m.Link) { // not required
		return nil
	}

	if m.Link != nil {
		if err := m.Link.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("link")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeProtocolRawPerformanceStats) validateLock(formats strfmt.Registry) error {
	if swag.IsZero(m.Lock) { // not required
		return nil
	}

	if m.Lock != nil {
		if err := m.Lock.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lock")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeProtocolRawPerformanceStats) validateLookup(formats strfmt.Registry) error {
	if swag.IsZero(m.Lookup) { // not required
		return nil
	}

	if m.Lookup != nil {
		if err := m.Lookup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lookup")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeProtocolRawPerformanceStats) validateOpen(formats strfmt.Registry) error {
	if swag.IsZero(m.Open) { // not required
		return nil
	}

	if m.Open != nil {
		if err := m.Open.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("open")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeProtocolRawPerformanceStats) validateRead(formats strfmt.Registry) error {
	if swag.IsZero(m.Read) { // not required
		return nil
	}

	if m.Read != nil {
		if err := m.Read.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("read")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeProtocolRawPerformanceStats) validateReaddir(formats strfmt.Registry) error {
	if swag.IsZero(m.Readdir) { // not required
		return nil
	}

	if m.Readdir != nil {
		if err := m.Readdir.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("readdir")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeProtocolRawPerformanceStats) validateReadlink(formats strfmt.Registry) error {
	if swag.IsZero(m.Readlink) { // not required
		return nil
	}

	if m.Readlink != nil {
		if err := m.Readlink.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("readlink")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeProtocolRawPerformanceStats) validateRename(formats strfmt.Registry) error {
	if swag.IsZero(m.Rename) { // not required
		return nil
	}

	if m.Rename != nil {
		if err := m.Rename.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rename")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeProtocolRawPerformanceStats) validateSetattr(formats strfmt.Registry) error {
	if swag.IsZero(m.Setattr) { // not required
		return nil
	}

	if m.Setattr != nil {
		if err := m.Setattr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("setattr")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeProtocolRawPerformanceStats) validateUnlink(formats strfmt.Registry) error {
	if swag.IsZero(m.Unlink) { // not required
		return nil
	}

	if m.Unlink != nil {
		if err := m.Unlink.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unlink")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeProtocolRawPerformanceStats) validateWatch(formats strfmt.Registry) error {
	if swag.IsZero(m.Watch) { // not required
		return nil
	}

	if m.Watch != nil {
		if err := m.Watch.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("watch")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeProtocolRawPerformanceStats) validateWrite(formats strfmt.Registry) error {
	if swag.IsZero(m.Write) { // not required
		return nil
	}

	if m.Write != nil {
		if err := m.Write.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("write")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this volume protocol raw performance stats based on the context it is used
func (m *VolumeProtocolRawPerformanceStats) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccess(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAudit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGetattr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLink(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLock(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLookup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOpen(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRead(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReaddir(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReadlink(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRename(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSetattr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUnlink(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWatch(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWrite(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VolumeProtocolRawPerformanceStats) contextValidateAccess(ctx context.Context, formats strfmt.Registry) error {

	if m.Access != nil {
		if err := m.Access.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("access")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeProtocolRawPerformanceStats) contextValidateAudit(ctx context.Context, formats strfmt.Registry) error {

	if m.Audit != nil {
		if err := m.Audit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("audit")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeProtocolRawPerformanceStats) contextValidateCreate(ctx context.Context, formats strfmt.Registry) error {

	if m.Create != nil {
		if err := m.Create.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("create")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeProtocolRawPerformanceStats) contextValidateGetattr(ctx context.Context, formats strfmt.Registry) error {

	if m.Getattr != nil {
		if err := m.Getattr.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getattr")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeProtocolRawPerformanceStats) contextValidateLink(ctx context.Context, formats strfmt.Registry) error {

	if m.Link != nil {
		if err := m.Link.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("link")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeProtocolRawPerformanceStats) contextValidateLock(ctx context.Context, formats strfmt.Registry) error {

	if m.Lock != nil {
		if err := m.Lock.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lock")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeProtocolRawPerformanceStats) contextValidateLookup(ctx context.Context, formats strfmt.Registry) error {

	if m.Lookup != nil {
		if err := m.Lookup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lookup")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeProtocolRawPerformanceStats) contextValidateOpen(ctx context.Context, formats strfmt.Registry) error {

	if m.Open != nil {
		if err := m.Open.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("open")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeProtocolRawPerformanceStats) contextValidateRead(ctx context.Context, formats strfmt.Registry) error {

	if m.Read != nil {
		if err := m.Read.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("read")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeProtocolRawPerformanceStats) contextValidateReaddir(ctx context.Context, formats strfmt.Registry) error {

	if m.Readdir != nil {
		if err := m.Readdir.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("readdir")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeProtocolRawPerformanceStats) contextValidateReadlink(ctx context.Context, formats strfmt.Registry) error {

	if m.Readlink != nil {
		if err := m.Readlink.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("readlink")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeProtocolRawPerformanceStats) contextValidateRename(ctx context.Context, formats strfmt.Registry) error {

	if m.Rename != nil {
		if err := m.Rename.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rename")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeProtocolRawPerformanceStats) contextValidateSetattr(ctx context.Context, formats strfmt.Registry) error {

	if m.Setattr != nil {
		if err := m.Setattr.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("setattr")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeProtocolRawPerformanceStats) contextValidateUnlink(ctx context.Context, formats strfmt.Registry) error {

	if m.Unlink != nil {
		if err := m.Unlink.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unlink")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeProtocolRawPerformanceStats) contextValidateWatch(ctx context.Context, formats strfmt.Registry) error {

	if m.Watch != nil {
		if err := m.Watch.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("watch")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeProtocolRawPerformanceStats) contextValidateWrite(ctx context.Context, formats strfmt.Registry) error {

	if m.Write != nil {
		if err := m.Write.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("write")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VolumeProtocolRawPerformanceStats) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeProtocolRawPerformanceStats) UnmarshalBinary(b []byte) error {
	var res VolumeProtocolRawPerformanceStats
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VolumeProtocolRawPerformanceStatsAccess Raw count and latency data for access operations.
//
// swagger:model VolumeProtocolRawPerformanceStatsAccess
type VolumeProtocolRawPerformanceStatsAccess struct {

	// Number of operations of the given type performed on this volume.
	// Example: 1000
	Count int64 `json:"count,omitempty"`

	// The raw data component latency in microseconds measured within ONTAP for all operations of the given type.
	// Example: 200
	TotalTime int64 `json:"total_time,omitempty"`
}

// Validate validates this volume protocol raw performance stats access
func (m *VolumeProtocolRawPerformanceStatsAccess) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this volume protocol raw performance stats access based on context it is used
func (m *VolumeProtocolRawPerformanceStatsAccess) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VolumeProtocolRawPerformanceStatsAccess) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeProtocolRawPerformanceStatsAccess) UnmarshalBinary(b []byte) error {
	var res VolumeProtocolRawPerformanceStatsAccess
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VolumeProtocolRawPerformanceStatsAudit Raw count and latency data for audit operations. These statistics are only applicable for CIFS protocol operations.
//
// swagger:model VolumeProtocolRawPerformanceStatsAudit
type VolumeProtocolRawPerformanceStatsAudit struct {

	// Number of operations of the given type performed on this volume.
	// Example: 1000
	Count int64 `json:"count,omitempty"`

	// The raw data component latency in microseconds measured within ONTAP for all operations of the given type.
	// Example: 200
	TotalTime int64 `json:"total_time,omitempty"`
}

// Validate validates this volume protocol raw performance stats audit
func (m *VolumeProtocolRawPerformanceStatsAudit) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this volume protocol raw performance stats audit based on context it is used
func (m *VolumeProtocolRawPerformanceStatsAudit) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VolumeProtocolRawPerformanceStatsAudit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeProtocolRawPerformanceStatsAudit) UnmarshalBinary(b []byte) error {
	var res VolumeProtocolRawPerformanceStatsAudit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VolumeProtocolRawPerformanceStatsCreate Raw count and latency data for create operations.
//
// swagger:model VolumeProtocolRawPerformanceStatsCreate
type VolumeProtocolRawPerformanceStatsCreate struct {

	// dir
	Dir *VolumeProtocolRawPerformanceStatsCreateDir `json:"dir,omitempty"`

	// file
	File *VolumeProtocolRawPerformanceStatsCreateFile `json:"file,omitempty"`

	// other
	Other *VolumeProtocolRawPerformanceStatsCreateOther `json:"other,omitempty"`

	// symlink
	Symlink *VolumeProtocolRawPerformanceStatsCreateSymlink `json:"symlink,omitempty"`
}

// Validate validates this volume protocol raw performance stats create
func (m *VolumeProtocolRawPerformanceStatsCreate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDir(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOther(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSymlink(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VolumeProtocolRawPerformanceStatsCreate) validateDir(formats strfmt.Registry) error {
	if swag.IsZero(m.Dir) { // not required
		return nil
	}

	if m.Dir != nil {
		if err := m.Dir.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("create" + "." + "dir")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeProtocolRawPerformanceStatsCreate) validateFile(formats strfmt.Registry) error {
	if swag.IsZero(m.File) { // not required
		return nil
	}

	if m.File != nil {
		if err := m.File.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("create" + "." + "file")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeProtocolRawPerformanceStatsCreate) validateOther(formats strfmt.Registry) error {
	if swag.IsZero(m.Other) { // not required
		return nil
	}

	if m.Other != nil {
		if err := m.Other.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("create" + "." + "other")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeProtocolRawPerformanceStatsCreate) validateSymlink(formats strfmt.Registry) error {
	if swag.IsZero(m.Symlink) { // not required
		return nil
	}

	if m.Symlink != nil {
		if err := m.Symlink.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("create" + "." + "symlink")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this volume protocol raw performance stats create based on the context it is used
func (m *VolumeProtocolRawPerformanceStatsCreate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDir(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFile(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOther(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSymlink(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VolumeProtocolRawPerformanceStatsCreate) contextValidateDir(ctx context.Context, formats strfmt.Registry) error {

	if m.Dir != nil {
		if err := m.Dir.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("create" + "." + "dir")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeProtocolRawPerformanceStatsCreate) contextValidateFile(ctx context.Context, formats strfmt.Registry) error {

	if m.File != nil {
		if err := m.File.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("create" + "." + "file")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeProtocolRawPerformanceStatsCreate) contextValidateOther(ctx context.Context, formats strfmt.Registry) error {

	if m.Other != nil {
		if err := m.Other.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("create" + "." + "other")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeProtocolRawPerformanceStatsCreate) contextValidateSymlink(ctx context.Context, formats strfmt.Registry) error {

	if m.Symlink != nil {
		if err := m.Symlink.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("create" + "." + "symlink")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VolumeProtocolRawPerformanceStatsCreate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeProtocolRawPerformanceStatsCreate) UnmarshalBinary(b []byte) error {
	var res VolumeProtocolRawPerformanceStatsCreate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VolumeProtocolRawPerformanceStatsCreateDir Raw count and latency data for directory-create operations.
//
// swagger:model VolumeProtocolRawPerformanceStatsCreateDir
type VolumeProtocolRawPerformanceStatsCreateDir struct {

	// Number of operations of the given type performed on this volume.
	// Example: 1000
	Count int64 `json:"count,omitempty"`

	// The raw data component latency in microseconds measured within ONTAP for all operations of the given type.
	// Example: 200
	TotalTime int64 `json:"total_time,omitempty"`
}

// Validate validates this volume protocol raw performance stats create dir
func (m *VolumeProtocolRawPerformanceStatsCreateDir) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this volume protocol raw performance stats create dir based on context it is used
func (m *VolumeProtocolRawPerformanceStatsCreateDir) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VolumeProtocolRawPerformanceStatsCreateDir) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeProtocolRawPerformanceStatsCreateDir) UnmarshalBinary(b []byte) error {
	var res VolumeProtocolRawPerformanceStatsCreateDir
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VolumeProtocolRawPerformanceStatsCreateFile Raw count and latency data for file-create operations.
//
// swagger:model VolumeProtocolRawPerformanceStatsCreateFile
type VolumeProtocolRawPerformanceStatsCreateFile struct {

	// Number of operations of the given type performed on this volume.
	// Example: 1000
	Count int64 `json:"count,omitempty"`

	// The raw data component latency in microseconds measured within ONTAP for all operations of the given type.
	// Example: 200
	TotalTime int64 `json:"total_time,omitempty"`
}

// Validate validates this volume protocol raw performance stats create file
func (m *VolumeProtocolRawPerformanceStatsCreateFile) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this volume protocol raw performance stats create file based on context it is used
func (m *VolumeProtocolRawPerformanceStatsCreateFile) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VolumeProtocolRawPerformanceStatsCreateFile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeProtocolRawPerformanceStatsCreateFile) UnmarshalBinary(b []byte) error {
	var res VolumeProtocolRawPerformanceStatsCreateFile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VolumeProtocolRawPerformanceStatsCreateOther Raw count and latency data for create operations on objects other than files, directories and symlinks.
//
// swagger:model VolumeProtocolRawPerformanceStatsCreateOther
type VolumeProtocolRawPerformanceStatsCreateOther struct {

	// Number of operations of the given type performed on this volume.
	// Example: 1000
	Count int64 `json:"count,omitempty"`

	// The raw data component latency in microseconds measured within ONTAP for all operations of the given type.
	// Example: 200
	TotalTime int64 `json:"total_time,omitempty"`
}

// Validate validates this volume protocol raw performance stats create other
func (m *VolumeProtocolRawPerformanceStatsCreateOther) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this volume protocol raw performance stats create other based on context it is used
func (m *VolumeProtocolRawPerformanceStatsCreateOther) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VolumeProtocolRawPerformanceStatsCreateOther) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeProtocolRawPerformanceStatsCreateOther) UnmarshalBinary(b []byte) error {
	var res VolumeProtocolRawPerformanceStatsCreateOther
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VolumeProtocolRawPerformanceStatsCreateSymlink Raw count and latency data for symlink-create operations.
//
// swagger:model VolumeProtocolRawPerformanceStatsCreateSymlink
type VolumeProtocolRawPerformanceStatsCreateSymlink struct {

	// Number of operations of the given type performed on this volume.
	// Example: 1000
	Count int64 `json:"count,omitempty"`

	// The raw data component latency in microseconds measured within ONTAP for all operations of the given type.
	// Example: 200
	TotalTime int64 `json:"total_time,omitempty"`
}

// Validate validates this volume protocol raw performance stats create symlink
func (m *VolumeProtocolRawPerformanceStatsCreateSymlink) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this volume protocol raw performance stats create symlink based on context it is used
func (m *VolumeProtocolRawPerformanceStatsCreateSymlink) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VolumeProtocolRawPerformanceStatsCreateSymlink) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeProtocolRawPerformanceStatsCreateSymlink) UnmarshalBinary(b []byte) error {
	var res VolumeProtocolRawPerformanceStatsCreateSymlink
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VolumeProtocolRawPerformanceStatsGetattr Raw count and latency data for getattr operations.
//
// swagger:model VolumeProtocolRawPerformanceStatsGetattr
type VolumeProtocolRawPerformanceStatsGetattr struct {

	// Number of operations of the given type performed on this volume.
	// Example: 1000
	Count int64 `json:"count,omitempty"`

	// The raw data component latency in microseconds measured within ONTAP for all operations of the given type.
	// Example: 200
	TotalTime int64 `json:"total_time,omitempty"`
}

// Validate validates this volume protocol raw performance stats getattr
func (m *VolumeProtocolRawPerformanceStatsGetattr) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this volume protocol raw performance stats getattr based on context it is used
func (m *VolumeProtocolRawPerformanceStatsGetattr) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VolumeProtocolRawPerformanceStatsGetattr) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeProtocolRawPerformanceStatsGetattr) UnmarshalBinary(b []byte) error {
	var res VolumeProtocolRawPerformanceStatsGetattr
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VolumeProtocolRawPerformanceStatsLink Raw count and latency data for link operations.
//
// swagger:model VolumeProtocolRawPerformanceStatsLink
type VolumeProtocolRawPerformanceStatsLink struct {

	// Number of operations of the given type performed on this volume.
	// Example: 1000
	Count int64 `json:"count,omitempty"`

	// The raw data component latency in microseconds measured within ONTAP for all operations of the given type.
	// Example: 200
	TotalTime int64 `json:"total_time,omitempty"`
}

// Validate validates this volume protocol raw performance stats link
func (m *VolumeProtocolRawPerformanceStatsLink) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this volume protocol raw performance stats link based on context it is used
func (m *VolumeProtocolRawPerformanceStatsLink) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VolumeProtocolRawPerformanceStatsLink) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeProtocolRawPerformanceStatsLink) UnmarshalBinary(b []byte) error {
	var res VolumeProtocolRawPerformanceStatsLink
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VolumeProtocolRawPerformanceStatsLock Raw count and latency data for lock operations.
//
// swagger:model VolumeProtocolRawPerformanceStatsLock
type VolumeProtocolRawPerformanceStatsLock struct {

	// Number of operations of the given type performed on this volume.
	// Example: 1000
	Count int64 `json:"count,omitempty"`

	// The raw data component latency in microseconds measured within ONTAP for all operations of the given type.
	// Example: 200
	TotalTime int64 `json:"total_time,omitempty"`
}

// Validate validates this volume protocol raw performance stats lock
func (m *VolumeProtocolRawPerformanceStatsLock) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this volume protocol raw performance stats lock based on context it is used
func (m *VolumeProtocolRawPerformanceStatsLock) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VolumeProtocolRawPerformanceStatsLock) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeProtocolRawPerformanceStatsLock) UnmarshalBinary(b []byte) error {
	var res VolumeProtocolRawPerformanceStatsLock
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VolumeProtocolRawPerformanceStatsLookup Raw count and latency data for lookup operations.
//
// swagger:model VolumeProtocolRawPerformanceStatsLookup
type VolumeProtocolRawPerformanceStatsLookup struct {

	// Number of operations of the given type performed on this volume.
	// Example: 1000
	Count int64 `json:"count,omitempty"`

	// The raw data component latency in microseconds measured within ONTAP for all operations of the given type.
	// Example: 200
	TotalTime int64 `json:"total_time,omitempty"`
}

// Validate validates this volume protocol raw performance stats lookup
func (m *VolumeProtocolRawPerformanceStatsLookup) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this volume protocol raw performance stats lookup based on context it is used
func (m *VolumeProtocolRawPerformanceStatsLookup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VolumeProtocolRawPerformanceStatsLookup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeProtocolRawPerformanceStatsLookup) UnmarshalBinary(b []byte) error {
	var res VolumeProtocolRawPerformanceStatsLookup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VolumeProtocolRawPerformanceStatsOpen Raw count and latency data for open operations.
//
// swagger:model VolumeProtocolRawPerformanceStatsOpen
type VolumeProtocolRawPerformanceStatsOpen struct {

	// Number of operations of the given type performed on this volume.
	// Example: 1000
	Count int64 `json:"count,omitempty"`

	// The raw data component latency in microseconds measured within ONTAP for all operations of the given type.
	// Example: 200
	TotalTime int64 `json:"total_time,omitempty"`
}

// Validate validates this volume protocol raw performance stats open
func (m *VolumeProtocolRawPerformanceStatsOpen) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this volume protocol raw performance stats open based on context it is used
func (m *VolumeProtocolRawPerformanceStatsOpen) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VolumeProtocolRawPerformanceStatsOpen) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeProtocolRawPerformanceStatsOpen) UnmarshalBinary(b []byte) error {
	var res VolumeProtocolRawPerformanceStatsOpen
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VolumeProtocolRawPerformanceStatsRead Raw count and latency data for read operations, including histograms categorizing operations by size and latency.
//
// swagger:model VolumeProtocolRawPerformanceStatsRead
type VolumeProtocolRawPerformanceStatsRead struct {

	// Number of operations of the given type performed on this volume.
	// Example: 1000
	// Read Only: true
	Count int64 `json:"count,omitempty"`

	// The raw data component latency in microseconds measured within ONTAP for all operations of the given type.
	// Example: 200
	// Read Only: true
	TotalTime int64 `json:"total_time,omitempty"`

	// volume protocol latency histogram counts
	// Example: ["0","0","0","0","0","15","35","100","200","200","300","500","500","500","1000","1000","800","500","500","300","200","50","40","15","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0"]
	VolumeProtocolLatencyHistogramCounts []int64 `json:"volume_protocol_latency_histogram_counts,omitempty"`

	// Labels for the latency histogram, ranging from <2us to >20s.
	// Example: ["\u003c2us","\u003c6us","\u003c10us","\u003c14us","\u003c20us","\u003c40us","\u003c60us","\u003c80us","\u003c100us","\u003c200us","\u003c400us","\u003c600us","\u003c800us","\u003c1ms","\u003c2ms","\u003c4ms","\u003c6ms","\u003c8ms","\u003c10ms","\u003c12ms","\u003c14ms","\u003c16ms","\u003c18ms","\u003c20ms","\u003c40ms","\u003c60ms","\u003c80ms","\u003c100ms","\u003c200ms","\u003c400ms","\u003c600ms","\u003c800ms","\u003c1s","\u003c2s","\u003c4s","\u003c6s","\u003c8s","\u003c10s","\u003c20s","\u003e20s"]
	VolumeProtocolLatencyHistogramLabels []string `json:"volume_protocol_latency_histogram_labels,omitempty"`

	// volume protocol size histogram counts
	// Example: ["2400","1055","1100","700","500","300","200","100","100","50","50","75","25","0","0"]
	VolumeProtocolSizeHistogramCounts []int64 `json:"volume_protocol_size_histogram_counts,omitempty"`

	// Labels for the size histogram, ranging from <4KB to >1024KB.
	// Example: ["\u003c    4KB","=    4KB","\u003c    8KB","=    8KB","\u003c   16KB","=   16KB","\u003c   32KB","=   32KB","\u003c   64KB","=   64KB","\u003c  256KB","=  256KB","\u003c 1024KB","= 1024KB","\u003e 1024KB"]
	VolumeProtocolSizeHistogramLabels []string `json:"volume_protocol_size_histogram_labels,omitempty"`
}

// Validate validates this volume protocol raw performance stats read
func (m *VolumeProtocolRawPerformanceStatsRead) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this volume protocol raw performance stats read based on the context it is used
func (m *VolumeProtocolRawPerformanceStatsRead) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VolumeProtocolRawPerformanceStatsRead) contextValidateCount(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "read"+"."+"count", "body", int64(m.Count)); err != nil {
		return err
	}

	return nil
}

func (m *VolumeProtocolRawPerformanceStatsRead) contextValidateTotalTime(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "read"+"."+"total_time", "body", int64(m.TotalTime)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VolumeProtocolRawPerformanceStatsRead) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeProtocolRawPerformanceStatsRead) UnmarshalBinary(b []byte) error {
	var res VolumeProtocolRawPerformanceStatsRead
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VolumeProtocolRawPerformanceStatsReaddir Raw count and latency data for readdir operations.
//
// swagger:model VolumeProtocolRawPerformanceStatsReaddir
type VolumeProtocolRawPerformanceStatsReaddir struct {

	// Number of operations of the given type performed on this volume.
	// Example: 1000
	Count int64 `json:"count,omitempty"`

	// The raw data component latency in microseconds measured within ONTAP for all operations of the given type.
	// Example: 200
	TotalTime int64 `json:"total_time,omitempty"`
}

// Validate validates this volume protocol raw performance stats readdir
func (m *VolumeProtocolRawPerformanceStatsReaddir) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this volume protocol raw performance stats readdir based on context it is used
func (m *VolumeProtocolRawPerformanceStatsReaddir) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VolumeProtocolRawPerformanceStatsReaddir) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeProtocolRawPerformanceStatsReaddir) UnmarshalBinary(b []byte) error {
	var res VolumeProtocolRawPerformanceStatsReaddir
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VolumeProtocolRawPerformanceStatsReadlink Raw count and latency data for readlink operations.
//
// swagger:model VolumeProtocolRawPerformanceStatsReadlink
type VolumeProtocolRawPerformanceStatsReadlink struct {

	// Number of operations of the given type performed on this volume.
	// Example: 1000
	Count int64 `json:"count,omitempty"`

	// The raw data component latency in microseconds measured within ONTAP for all operations of the given type.
	// Example: 200
	TotalTime int64 `json:"total_time,omitempty"`
}

// Validate validates this volume protocol raw performance stats readlink
func (m *VolumeProtocolRawPerformanceStatsReadlink) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this volume protocol raw performance stats readlink based on context it is used
func (m *VolumeProtocolRawPerformanceStatsReadlink) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VolumeProtocolRawPerformanceStatsReadlink) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeProtocolRawPerformanceStatsReadlink) UnmarshalBinary(b []byte) error {
	var res VolumeProtocolRawPerformanceStatsReadlink
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VolumeProtocolRawPerformanceStatsRename Raw count and latency data for rename operations.
//
// swagger:model VolumeProtocolRawPerformanceStatsRename
type VolumeProtocolRawPerformanceStatsRename struct {

	// Number of operations of the given type performed on this volume.
	// Example: 1000
	Count int64 `json:"count,omitempty"`

	// The raw data component latency in microseconds measured within ONTAP for all operations of the given type.
	// Example: 200
	TotalTime int64 `json:"total_time,omitempty"`
}

// Validate validates this volume protocol raw performance stats rename
func (m *VolumeProtocolRawPerformanceStatsRename) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this volume protocol raw performance stats rename based on context it is used
func (m *VolumeProtocolRawPerformanceStatsRename) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VolumeProtocolRawPerformanceStatsRename) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeProtocolRawPerformanceStatsRename) UnmarshalBinary(b []byte) error {
	var res VolumeProtocolRawPerformanceStatsRename
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VolumeProtocolRawPerformanceStatsSetattr Raw count and latency data for setattr operations.
//
// swagger:model VolumeProtocolRawPerformanceStatsSetattr
type VolumeProtocolRawPerformanceStatsSetattr struct {

	// Number of operations of the given type performed on this volume.
	// Example: 1000
	Count int64 `json:"count,omitempty"`

	// The raw data component latency in microseconds measured within ONTAP for all operations of the given type.
	// Example: 200
	TotalTime int64 `json:"total_time,omitempty"`
}

// Validate validates this volume protocol raw performance stats setattr
func (m *VolumeProtocolRawPerformanceStatsSetattr) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this volume protocol raw performance stats setattr based on context it is used
func (m *VolumeProtocolRawPerformanceStatsSetattr) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VolumeProtocolRawPerformanceStatsSetattr) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeProtocolRawPerformanceStatsSetattr) UnmarshalBinary(b []byte) error {
	var res VolumeProtocolRawPerformanceStatsSetattr
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VolumeProtocolRawPerformanceStatsUnlink Raw count and latency data for unlink operations.
//
// swagger:model VolumeProtocolRawPerformanceStatsUnlink
type VolumeProtocolRawPerformanceStatsUnlink struct {

	// Number of operations of the given type performed on this volume.
	// Example: 1000
	Count int64 `json:"count,omitempty"`

	// The raw data component latency in microseconds measured within ONTAP for all operations of the given type.
	// Example: 200
	TotalTime int64 `json:"total_time,omitempty"`
}

// Validate validates this volume protocol raw performance stats unlink
func (m *VolumeProtocolRawPerformanceStatsUnlink) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this volume protocol raw performance stats unlink based on context it is used
func (m *VolumeProtocolRawPerformanceStatsUnlink) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VolumeProtocolRawPerformanceStatsUnlink) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeProtocolRawPerformanceStatsUnlink) UnmarshalBinary(b []byte) error {
	var res VolumeProtocolRawPerformanceStatsUnlink
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VolumeProtocolRawPerformanceStatsWatch Raw count and latency data for watch operations. These statistics are only applicable for CIFS protocol operations.
//
// swagger:model VolumeProtocolRawPerformanceStatsWatch
type VolumeProtocolRawPerformanceStatsWatch struct {

	// Number of operations of the given type performed on this volume.
	// Example: 1000
	Count int64 `json:"count,omitempty"`

	// The raw data component latency in microseconds measured within ONTAP for all operations of the given type.
	// Example: 200
	TotalTime int64 `json:"total_time,omitempty"`
}

// Validate validates this volume protocol raw performance stats watch
func (m *VolumeProtocolRawPerformanceStatsWatch) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this volume protocol raw performance stats watch based on context it is used
func (m *VolumeProtocolRawPerformanceStatsWatch) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VolumeProtocolRawPerformanceStatsWatch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeProtocolRawPerformanceStatsWatch) UnmarshalBinary(b []byte) error {
	var res VolumeProtocolRawPerformanceStatsWatch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VolumeProtocolRawPerformanceStatsWrite Raw count and latency data for write operations, including histograms categorizing operations by size and latency.
//
// swagger:model VolumeProtocolRawPerformanceStatsWrite
type VolumeProtocolRawPerformanceStatsWrite struct {

	// Number of operations of the given type performed on this volume.
	// Example: 1000
	// Read Only: true
	Count int64 `json:"count,omitempty"`

	// The raw data component latency in microseconds measured within ONTAP for all operations of the given type.
	// Example: 200
	// Read Only: true
	TotalTime int64 `json:"total_time,omitempty"`

	// volume protocol latency histogram counts
	// Example: ["0","0","0","0","0","15","35","100","200","200","300","500","500","500","1000","1000","800","500","500","300","200","50","40","15","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0"]
	VolumeProtocolLatencyHistogramCounts []int64 `json:"volume_protocol_latency_histogram_counts,omitempty"`

	// Labels for the latency histogram, ranging from <2us to >20s.
	// Example: ["\u003c2us","\u003c6us","\u003c10us","\u003c14us","\u003c20us","\u003c40us","\u003c60us","\u003c80us","\u003c100us","\u003c200us","\u003c400us","\u003c600us","\u003c800us","\u003c1ms","\u003c2ms","\u003c4ms","\u003c6ms","\u003c8ms","\u003c10ms","\u003c12ms","\u003c14ms","\u003c16ms","\u003c18ms","\u003c20ms","\u003c40ms","\u003c60ms","\u003c80ms","\u003c100ms","\u003c200ms","\u003c400ms","\u003c600ms","\u003c800ms","\u003c1s","\u003c2s","\u003c4s","\u003c6s","\u003c8s","\u003c10s","\u003c20s","\u003e20s"]
	VolumeProtocolLatencyHistogramLabels []string `json:"volume_protocol_latency_histogram_labels,omitempty"`

	// volume protocol size histogram counts
	// Example: ["2400","1055","1100","700","500","300","200","100","100","50","50","75","25","0","0"]
	VolumeProtocolSizeHistogramCounts []int64 `json:"volume_protocol_size_histogram_counts,omitempty"`

	// Labels for the size histogram, ranging from <4KB to >1024KB.
	// Example: ["\u003c    4KB","=    4KB","\u003c    8KB","=    8KB","\u003c   16KB","=   16KB","\u003c   32KB","=   32KB","\u003c   64KB","=   64KB","\u003c  256KB","=  256KB","\u003c 1024KB","= 1024KB","\u003e 1024KB"]
	VolumeProtocolSizeHistogramLabels []string `json:"volume_protocol_size_histogram_labels,omitempty"`
}

// Validate validates this volume protocol raw performance stats write
func (m *VolumeProtocolRawPerformanceStatsWrite) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this volume protocol raw performance stats write based on the context it is used
func (m *VolumeProtocolRawPerformanceStatsWrite) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VolumeProtocolRawPerformanceStatsWrite) contextValidateCount(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "write"+"."+"count", "body", int64(m.Count)); err != nil {
		return err
	}

	return nil
}

func (m *VolumeProtocolRawPerformanceStatsWrite) contextValidateTotalTime(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "write"+"."+"total_time", "body", int64(m.TotalTime)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VolumeProtocolRawPerformanceStatsWrite) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeProtocolRawPerformanceStatsWrite) UnmarshalBinary(b []byte) error {
	var res VolumeProtocolRawPerformanceStatsWrite
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
