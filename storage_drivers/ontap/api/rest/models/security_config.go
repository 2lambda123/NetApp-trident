// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SecurityConfig security config
//
// swagger:model security_config
type SecurityConfig struct {

	// links
	Links *SecurityConfigLinks `json:"_links,omitempty"`

	// onboard key manager configurable status
	OnboardKeyManagerConfigurableStatus *SecurityConfigOnboardKeyManagerConfigurableStatus `json:"onboard_key_manager_configurable_status,omitempty"`
}

// Validate validates this security config
func (m *SecurityConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnboardKeyManagerConfigurableStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityConfig) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityConfig) validateOnboardKeyManagerConfigurableStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.OnboardKeyManagerConfigurableStatus) { // not required
		return nil
	}

	if m.OnboardKeyManagerConfigurableStatus != nil {
		if err := m.OnboardKeyManagerConfigurableStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("onboard_key_manager_configurable_status")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this security config based on the context it is used
func (m *SecurityConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOnboardKeyManagerConfigurableStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityConfig) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityConfig) contextValidateOnboardKeyManagerConfigurableStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.OnboardKeyManagerConfigurableStatus != nil {
		if err := m.OnboardKeyManagerConfigurableStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("onboard_key_manager_configurable_status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SecurityConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecurityConfig) UnmarshalBinary(b []byte) error {
	var res SecurityConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SecurityConfigLinks security config links
//
// swagger:model SecurityConfigLinks
type SecurityConfigLinks struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this security config links
func (m *SecurityConfigLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityConfigLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this security config links based on the context it is used
func (m *SecurityConfigLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityConfigLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SecurityConfigLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecurityConfigLinks) UnmarshalBinary(b []byte) error {
	var res SecurityConfigLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SecurityConfigOnboardKeyManagerConfigurableStatus Indicates whether the Onboard Key Manager can be configured in the cluster.
//
//
// swagger:model SecurityConfigOnboardKeyManagerConfigurableStatus
type SecurityConfigOnboardKeyManagerConfigurableStatus struct {

	// Code corresponding to the status message. Returns a 0 if the Onboard Key Manager can be configured in the cluster.
	// Example: 65537300
	Code int64 `json:"code,omitempty"`

	// Reason that Onboard Key Manager cannot be configured in the cluster.
	// Example: No platform support for volume encryption in following nodes - node1, node2.
	Message string `json:"message,omitempty"`

	// Set to true if the Onboard Key Manager can be configured in the cluster.
	Supported bool `json:"supported,omitempty"`
}

// Validate validates this security config onboard key manager configurable status
func (m *SecurityConfigOnboardKeyManagerConfigurableStatus) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this security config onboard key manager configurable status based on the context it is used
func (m *SecurityConfigOnboardKeyManagerConfigurableStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *SecurityConfigOnboardKeyManagerConfigurableStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecurityConfigOnboardKeyManagerConfigurableStatus) UnmarshalBinary(b []byte) error {
	var res SecurityConfigOnboardKeyManagerConfigurableStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HELLO RIPPY
