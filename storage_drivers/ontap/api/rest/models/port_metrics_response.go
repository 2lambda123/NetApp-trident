// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PortMetricsResponse port metrics response
//
// swagger:model port_metrics_response
type PortMetricsResponse struct {

	// links
	Links *PortMetricsResponseLinks `json:"_links,omitempty"`

	// Number of records
	NumRecords int64 `json:"num_records,omitempty"`

	// records
	Records []*PortMetricsResponseRecordsItems0 `json:"records,omitempty"`
}

// Validate validates this port metrics response
func (m *PortMetricsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecords(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PortMetricsResponse) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *PortMetricsResponse) validateRecords(formats strfmt.Registry) error {
	if swag.IsZero(m.Records) { // not required
		return nil
	}

	for i := 0; i < len(m.Records); i++ {
		if swag.IsZero(m.Records[i]) { // not required
			continue
		}

		if m.Records[i] != nil {
			if err := m.Records[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("records" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this port metrics response based on the context it is used
func (m *PortMetricsResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecords(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PortMetricsResponse) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *PortMetricsResponse) contextValidateRecords(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Records); i++ {

		if m.Records[i] != nil {
			if err := m.Records[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("records" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PortMetricsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PortMetricsResponse) UnmarshalBinary(b []byte) error {
	var res PortMetricsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PortMetricsResponseLinks port metrics response links
//
// swagger:model PortMetricsResponseLinks
type PortMetricsResponseLinks struct {

	// next
	Next *Href `json:"next,omitempty"`

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this port metrics response links
func (m *PortMetricsResponseLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PortMetricsResponseLinks) validateNext(formats strfmt.Registry) error {
	if swag.IsZero(m.Next) { // not required
		return nil
	}

	if m.Next != nil {
		if err := m.Next.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "next")
			}
			return err
		}
	}

	return nil
}

func (m *PortMetricsResponseLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this port metrics response links based on the context it is used
func (m *PortMetricsResponseLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNext(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PortMetricsResponseLinks) contextValidateNext(ctx context.Context, formats strfmt.Registry) error {

	if m.Next != nil {
		if err := m.Next.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "next")
			}
			return err
		}
	}

	return nil
}

func (m *PortMetricsResponseLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PortMetricsResponseLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PortMetricsResponseLinks) UnmarshalBinary(b []byte) error {
	var res PortMetricsResponseLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PortMetricsResponseRecordsItems0 Throughput performance for the Ethernet port.
//
// swagger:model PortMetricsResponseRecordsItems0
type PortMetricsResponseRecordsItems0 struct {

	// links
	Links *PortMetricsResponseRecordsItems0Links `json:"_links,omitempty"`

	// The duration over which this sample is calculated. The time durations are represented in the ISO-8601 standard format. Samples can be calculated over the following durations:
	//
	// Example: PT15S
	// Enum: [PT15S PT4M PT30M PT2H P1D PT5M]
	Duration string `json:"duration,omitempty"`

	// Errors associated with the sample. For example, if the aggregation of data over multiple nodes fails, then any partial errors might return "ok" on success or "error" on an internal uncategorized failure. Whenever a sample collection is missed but done at a later time, it is back filled to the previous 15 second timestamp and tagged with "backfilled_data". "inconsistent_delta_time" is encountered when the time between two collections is not the same for all nodes. Therefore, the aggregated value might be over or under inflated. "Negative_delta" is returned when an expected monotonically increasing value has decreased in value. "inconsistent_old_data" is returned when one or more nodes do not have the latest data.
	// Example: ok
	// Enum: [ok error partial_no_data partial_no_uuid partial_no_response partial_other_error negative_delta backfilled_data inconsistent_delta_time inconsistent_old_data]
	Status string `json:"status,omitempty"`

	// throughput
	Throughput *PortMetricsResponseRecordsItems0Throughput `json:"throughput,omitempty"`

	// The timestamp of the performance data.
	// Example: 2017-01-25T11:20:13Z
	// Format: date-time
	Timestamp *strfmt.DateTime `json:"timestamp,omitempty"`
}

// Validate validates this port metrics response records items0
func (m *PortMetricsResponseRecordsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThroughput(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PortMetricsResponseRecordsItems0) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

var portMetricsResponseRecordsItems0TypeDurationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PT15S","PT4M","PT30M","PT2H","P1D","PT5M"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		portMetricsResponseRecordsItems0TypeDurationPropEnum = append(portMetricsResponseRecordsItems0TypeDurationPropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// PortMetricsResponseRecordsItems0
	// PortMetricsResponseRecordsItems0
	// duration
	// Duration
	// PT15S
	// END DEBUGGING
	// PortMetricsResponseRecordsItems0DurationPT15S captures enum value "PT15S"
	PortMetricsResponseRecordsItems0DurationPT15S string = "PT15S"

	// BEGIN DEBUGGING
	// PortMetricsResponseRecordsItems0
	// PortMetricsResponseRecordsItems0
	// duration
	// Duration
	// PT4M
	// END DEBUGGING
	// PortMetricsResponseRecordsItems0DurationPT4M captures enum value "PT4M"
	PortMetricsResponseRecordsItems0DurationPT4M string = "PT4M"

	// BEGIN DEBUGGING
	// PortMetricsResponseRecordsItems0
	// PortMetricsResponseRecordsItems0
	// duration
	// Duration
	// PT30M
	// END DEBUGGING
	// PortMetricsResponseRecordsItems0DurationPT30M captures enum value "PT30M"
	PortMetricsResponseRecordsItems0DurationPT30M string = "PT30M"

	// BEGIN DEBUGGING
	// PortMetricsResponseRecordsItems0
	// PortMetricsResponseRecordsItems0
	// duration
	// Duration
	// PT2H
	// END DEBUGGING
	// PortMetricsResponseRecordsItems0DurationPT2H captures enum value "PT2H"
	PortMetricsResponseRecordsItems0DurationPT2H string = "PT2H"

	// BEGIN DEBUGGING
	// PortMetricsResponseRecordsItems0
	// PortMetricsResponseRecordsItems0
	// duration
	// Duration
	// P1D
	// END DEBUGGING
	// PortMetricsResponseRecordsItems0DurationP1D captures enum value "P1D"
	PortMetricsResponseRecordsItems0DurationP1D string = "P1D"

	// BEGIN DEBUGGING
	// PortMetricsResponseRecordsItems0
	// PortMetricsResponseRecordsItems0
	// duration
	// Duration
	// PT5M
	// END DEBUGGING
	// PortMetricsResponseRecordsItems0DurationPT5M captures enum value "PT5M"
	PortMetricsResponseRecordsItems0DurationPT5M string = "PT5M"
)

// prop value enum
func (m *PortMetricsResponseRecordsItems0) validateDurationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, portMetricsResponseRecordsItems0TypeDurationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PortMetricsResponseRecordsItems0) validateDuration(formats strfmt.Registry) error {
	if swag.IsZero(m.Duration) { // not required
		return nil
	}

	// value enum
	if err := m.validateDurationEnum("duration", "body", m.Duration); err != nil {
		return err
	}

	return nil
}

var portMetricsResponseRecordsItems0TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ok","error","partial_no_data","partial_no_uuid","partial_no_response","partial_other_error","negative_delta","backfilled_data","inconsistent_delta_time","inconsistent_old_data"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		portMetricsResponseRecordsItems0TypeStatusPropEnum = append(portMetricsResponseRecordsItems0TypeStatusPropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// PortMetricsResponseRecordsItems0
	// PortMetricsResponseRecordsItems0
	// status
	// Status
	// ok
	// END DEBUGGING
	// PortMetricsResponseRecordsItems0StatusOk captures enum value "ok"
	PortMetricsResponseRecordsItems0StatusOk string = "ok"

	// BEGIN DEBUGGING
	// PortMetricsResponseRecordsItems0
	// PortMetricsResponseRecordsItems0
	// status
	// Status
	// error
	// END DEBUGGING
	// PortMetricsResponseRecordsItems0StatusError captures enum value "error"
	PortMetricsResponseRecordsItems0StatusError string = "error"

	// BEGIN DEBUGGING
	// PortMetricsResponseRecordsItems0
	// PortMetricsResponseRecordsItems0
	// status
	// Status
	// partial_no_data
	// END DEBUGGING
	// PortMetricsResponseRecordsItems0StatusPartialNoData captures enum value "partial_no_data"
	PortMetricsResponseRecordsItems0StatusPartialNoData string = "partial_no_data"

	// BEGIN DEBUGGING
	// PortMetricsResponseRecordsItems0
	// PortMetricsResponseRecordsItems0
	// status
	// Status
	// partial_no_uuid
	// END DEBUGGING
	// PortMetricsResponseRecordsItems0StatusPartialNoUUID captures enum value "partial_no_uuid"
	PortMetricsResponseRecordsItems0StatusPartialNoUUID string = "partial_no_uuid"

	// BEGIN DEBUGGING
	// PortMetricsResponseRecordsItems0
	// PortMetricsResponseRecordsItems0
	// status
	// Status
	// partial_no_response
	// END DEBUGGING
	// PortMetricsResponseRecordsItems0StatusPartialNoResponse captures enum value "partial_no_response"
	PortMetricsResponseRecordsItems0StatusPartialNoResponse string = "partial_no_response"

	// BEGIN DEBUGGING
	// PortMetricsResponseRecordsItems0
	// PortMetricsResponseRecordsItems0
	// status
	// Status
	// partial_other_error
	// END DEBUGGING
	// PortMetricsResponseRecordsItems0StatusPartialOtherError captures enum value "partial_other_error"
	PortMetricsResponseRecordsItems0StatusPartialOtherError string = "partial_other_error"

	// BEGIN DEBUGGING
	// PortMetricsResponseRecordsItems0
	// PortMetricsResponseRecordsItems0
	// status
	// Status
	// negative_delta
	// END DEBUGGING
	// PortMetricsResponseRecordsItems0StatusNegativeDelta captures enum value "negative_delta"
	PortMetricsResponseRecordsItems0StatusNegativeDelta string = "negative_delta"

	// BEGIN DEBUGGING
	// PortMetricsResponseRecordsItems0
	// PortMetricsResponseRecordsItems0
	// status
	// Status
	// backfilled_data
	// END DEBUGGING
	// PortMetricsResponseRecordsItems0StatusBackfilledData captures enum value "backfilled_data"
	PortMetricsResponseRecordsItems0StatusBackfilledData string = "backfilled_data"

	// BEGIN DEBUGGING
	// PortMetricsResponseRecordsItems0
	// PortMetricsResponseRecordsItems0
	// status
	// Status
	// inconsistent_delta_time
	// END DEBUGGING
	// PortMetricsResponseRecordsItems0StatusInconsistentDeltaTime captures enum value "inconsistent_delta_time"
	PortMetricsResponseRecordsItems0StatusInconsistentDeltaTime string = "inconsistent_delta_time"

	// BEGIN DEBUGGING
	// PortMetricsResponseRecordsItems0
	// PortMetricsResponseRecordsItems0
	// status
	// Status
	// inconsistent_old_data
	// END DEBUGGING
	// PortMetricsResponseRecordsItems0StatusInconsistentOldData captures enum value "inconsistent_old_data"
	PortMetricsResponseRecordsItems0StatusInconsistentOldData string = "inconsistent_old_data"
)

// prop value enum
func (m *PortMetricsResponseRecordsItems0) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, portMetricsResponseRecordsItems0TypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PortMetricsResponseRecordsItems0) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *PortMetricsResponseRecordsItems0) validateThroughput(formats strfmt.Registry) error {
	if swag.IsZero(m.Throughput) { // not required
		return nil
	}

	if m.Throughput != nil {
		if err := m.Throughput.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("throughput")
			}
			return err
		}
	}

	return nil
}

func (m *PortMetricsResponseRecordsItems0) validateTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this port metrics response records items0 based on the context it is used
func (m *PortMetricsResponseRecordsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateThroughput(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PortMetricsResponseRecordsItems0) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *PortMetricsResponseRecordsItems0) contextValidateThroughput(ctx context.Context, formats strfmt.Registry) error {

	if m.Throughput != nil {
		if err := m.Throughput.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("throughput")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PortMetricsResponseRecordsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PortMetricsResponseRecordsItems0) UnmarshalBinary(b []byte) error {
	var res PortMetricsResponseRecordsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PortMetricsResponseRecordsItems0Links port metrics response records items0 links
//
// swagger:model PortMetricsResponseRecordsItems0Links
type PortMetricsResponseRecordsItems0Links struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this port metrics response records items0 links
func (m *PortMetricsResponseRecordsItems0Links) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PortMetricsResponseRecordsItems0Links) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this port metrics response records items0 links based on the context it is used
func (m *PortMetricsResponseRecordsItems0Links) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PortMetricsResponseRecordsItems0Links) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PortMetricsResponseRecordsItems0Links) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PortMetricsResponseRecordsItems0Links) UnmarshalBinary(b []byte) error {
	var res PortMetricsResponseRecordsItems0Links
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PortMetricsResponseRecordsItems0Throughput The rate of throughput bytes per second observed at the port object.
//
// swagger:model PortMetricsResponseRecordsItems0Throughput
type PortMetricsResponseRecordsItems0Throughput struct {

	// Performance metric for read I/O operations.
	// Example: 200
	Read int64 `json:"read,omitempty"`

	// Performance metric aggregated over all types of I/O operations.
	// Example: 1000
	Total int64 `json:"total,omitempty"`

	// Peformance metric for write I/O operations.
	// Example: 100
	Write int64 `json:"write,omitempty"`
}

// Validate validates this port metrics response records items0 throughput
func (m *PortMetricsResponseRecordsItems0Throughput) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this port metrics response records items0 throughput based on context it is used
func (m *PortMetricsResponseRecordsItems0Throughput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PortMetricsResponseRecordsItems0Throughput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PortMetricsResponseRecordsItems0Throughput) UnmarshalBinary(b []byte) error {
	var res PortMetricsResponseRecordsItems0Throughput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
