// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PerformanceNvmeMetricResponse performance nvme metric response
//
// swagger:model performance_nvme_metric_response
type PerformanceNvmeMetricResponse struct {

	// links
	Links *PerformanceNvmeMetricResponseLinks `json:"_links,omitempty"`

	// Number of records
	NumRecords int64 `json:"num_records,omitempty"`

	// records
	Records []*PerformanceNvmeMetricResponseRecordsItems0 `json:"records,omitempty"`
}

// Validate validates this performance nvme metric response
func (m *PerformanceNvmeMetricResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecords(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformanceNvmeMetricResponse) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceNvmeMetricResponse) validateRecords(formats strfmt.Registry) error {
	if swag.IsZero(m.Records) { // not required
		return nil
	}

	for i := 0; i < len(m.Records); i++ {
		if swag.IsZero(m.Records[i]) { // not required
			continue
		}

		if m.Records[i] != nil {
			if err := m.Records[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("records" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this performance nvme metric response based on the context it is used
func (m *PerformanceNvmeMetricResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecords(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformanceNvmeMetricResponse) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceNvmeMetricResponse) contextValidateRecords(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Records); i++ {

		if m.Records[i] != nil {
			if err := m.Records[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("records" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PerformanceNvmeMetricResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformanceNvmeMetricResponse) UnmarshalBinary(b []byte) error {
	var res PerformanceNvmeMetricResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PerformanceNvmeMetricResponseLinks performance nvme metric response links
//
// swagger:model PerformanceNvmeMetricResponseLinks
type PerformanceNvmeMetricResponseLinks struct {

	// next
	Next *Href `json:"next,omitempty"`

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this performance nvme metric response links
func (m *PerformanceNvmeMetricResponseLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformanceNvmeMetricResponseLinks) validateNext(formats strfmt.Registry) error {
	if swag.IsZero(m.Next) { // not required
		return nil
	}

	if m.Next != nil {
		if err := m.Next.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "next")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceNvmeMetricResponseLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this performance nvme metric response links based on the context it is used
func (m *PerformanceNvmeMetricResponseLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNext(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformanceNvmeMetricResponseLinks) contextValidateNext(ctx context.Context, formats strfmt.Registry) error {

	if m.Next != nil {
		if err := m.Next.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "next")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceNvmeMetricResponseLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PerformanceNvmeMetricResponseLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformanceNvmeMetricResponseLinks) UnmarshalBinary(b []byte) error {
	var res PerformanceNvmeMetricResponseLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PerformanceNvmeMetricResponseRecordsItems0 Performance numbers, such as IOPS latency and throughput.
//
// swagger:model PerformanceNvmeMetricResponseRecordsItems0
type PerformanceNvmeMetricResponseRecordsItems0 struct {

	// links
	Links *PerformanceNvmeMetricResponseRecordsItems0Links `json:"_links,omitempty"`

	// The duration over which this sample is calculated. The time durations are represented in the ISO-8601 standard format. Samples can be calculated over the following durations:
	//
	// Example: PT15S
	// Read Only: true
	// Enum: [PT15S PT4M PT30M PT2H P1D PT5M]
	Duration string `json:"duration,omitempty"`

	// iops
	Iops *PerformanceNvmeMetricResponseRecordsItems0Iops `json:"iops,omitempty"`

	// latency
	Latency *PerformanceNvmeMetricResponseRecordsItems0Latency `json:"latency,omitempty"`

	// Errors associated with the sample. For example, if the aggregation of data over multiple nodes fails, then any partial errors might return "ok" on success or "error" on an internal uncategorized failure. Whenever a sample collection is missed but done at a later time, it is back filled to the previous 15 second timestamp and tagged with "backfilled_data". "Inconsistent_ delta_time" is encountered when the time between two collections is not the same for all nodes. Therefore, the aggregated value might be over or under inflated. "Negative_delta" is returned when an expected monotonically increasing value has decreased in value. "Inconsistent_old_data" is returned when one or more nodes do not have the latest data.
	// Example: ok
	// Read Only: true
	// Enum: [ok error partial_no_data partial_no_uuid partial_no_response partial_other_error negative_delta backfilled_data inconsistent_delta_time inconsistent_old_data]
	Status string `json:"status,omitempty"`

	// throughput
	Throughput *PerformanceNvmeMetricResponseRecordsItems0Throughput `json:"throughput,omitempty"`

	// The timestamp of the performance data.
	// Example: 2017-01-25 11:20:13
	// Read Only: true
	// Format: date-time
	Timestamp *strfmt.DateTime `json:"timestamp,omitempty"`
}

// Validate validates this performance nvme metric response records items0
func (m *PerformanceNvmeMetricResponseRecordsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIops(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLatency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThroughput(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformanceNvmeMetricResponseRecordsItems0) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

var performanceNvmeMetricResponseRecordsItems0TypeDurationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PT15S","PT4M","PT30M","PT2H","P1D","PT5M"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		performanceNvmeMetricResponseRecordsItems0TypeDurationPropEnum = append(performanceNvmeMetricResponseRecordsItems0TypeDurationPropEnum, v)
	}
}

const (

	// BEGIN RIPPY DEBUGGING
	// PerformanceNvmeMetricResponseRecordsItems0
	// PerformanceNvmeMetricResponseRecordsItems0
	// duration
	// Duration
	// PT15S
	// END RIPPY DEBUGGING
	// PerformanceNvmeMetricResponseRecordsItems0DurationPT15S captures enum value "PT15S"
	PerformanceNvmeMetricResponseRecordsItems0DurationPT15S string = "PT15S"

	// BEGIN RIPPY DEBUGGING
	// PerformanceNvmeMetricResponseRecordsItems0
	// PerformanceNvmeMetricResponseRecordsItems0
	// duration
	// Duration
	// PT4M
	// END RIPPY DEBUGGING
	// PerformanceNvmeMetricResponseRecordsItems0DurationPT4M captures enum value "PT4M"
	PerformanceNvmeMetricResponseRecordsItems0DurationPT4M string = "PT4M"

	// BEGIN RIPPY DEBUGGING
	// PerformanceNvmeMetricResponseRecordsItems0
	// PerformanceNvmeMetricResponseRecordsItems0
	// duration
	// Duration
	// PT30M
	// END RIPPY DEBUGGING
	// PerformanceNvmeMetricResponseRecordsItems0DurationPT30M captures enum value "PT30M"
	PerformanceNvmeMetricResponseRecordsItems0DurationPT30M string = "PT30M"

	// BEGIN RIPPY DEBUGGING
	// PerformanceNvmeMetricResponseRecordsItems0
	// PerformanceNvmeMetricResponseRecordsItems0
	// duration
	// Duration
	// PT2H
	// END RIPPY DEBUGGING
	// PerformanceNvmeMetricResponseRecordsItems0DurationPT2H captures enum value "PT2H"
	PerformanceNvmeMetricResponseRecordsItems0DurationPT2H string = "PT2H"

	// BEGIN RIPPY DEBUGGING
	// PerformanceNvmeMetricResponseRecordsItems0
	// PerformanceNvmeMetricResponseRecordsItems0
	// duration
	// Duration
	// P1D
	// END RIPPY DEBUGGING
	// PerformanceNvmeMetricResponseRecordsItems0DurationP1D captures enum value "P1D"
	PerformanceNvmeMetricResponseRecordsItems0DurationP1D string = "P1D"

	// BEGIN RIPPY DEBUGGING
	// PerformanceNvmeMetricResponseRecordsItems0
	// PerformanceNvmeMetricResponseRecordsItems0
	// duration
	// Duration
	// PT5M
	// END RIPPY DEBUGGING
	// PerformanceNvmeMetricResponseRecordsItems0DurationPT5M captures enum value "PT5M"
	PerformanceNvmeMetricResponseRecordsItems0DurationPT5M string = "PT5M"
)

// prop value enum
func (m *PerformanceNvmeMetricResponseRecordsItems0) validateDurationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, performanceNvmeMetricResponseRecordsItems0TypeDurationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PerformanceNvmeMetricResponseRecordsItems0) validateDuration(formats strfmt.Registry) error {
	if swag.IsZero(m.Duration) { // not required
		return nil
	}

	// value enum
	if err := m.validateDurationEnum("duration", "body", m.Duration); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceNvmeMetricResponseRecordsItems0) validateIops(formats strfmt.Registry) error {
	if swag.IsZero(m.Iops) { // not required
		return nil
	}

	if m.Iops != nil {
		if err := m.Iops.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iops")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceNvmeMetricResponseRecordsItems0) validateLatency(formats strfmt.Registry) error {
	if swag.IsZero(m.Latency) { // not required
		return nil
	}

	if m.Latency != nil {
		if err := m.Latency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("latency")
			}
			return err
		}
	}

	return nil
}

var performanceNvmeMetricResponseRecordsItems0TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ok","error","partial_no_data","partial_no_uuid","partial_no_response","partial_other_error","negative_delta","backfilled_data","inconsistent_delta_time","inconsistent_old_data"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		performanceNvmeMetricResponseRecordsItems0TypeStatusPropEnum = append(performanceNvmeMetricResponseRecordsItems0TypeStatusPropEnum, v)
	}
}

const (

	// BEGIN RIPPY DEBUGGING
	// PerformanceNvmeMetricResponseRecordsItems0
	// PerformanceNvmeMetricResponseRecordsItems0
	// status
	// Status
	// ok
	// END RIPPY DEBUGGING
	// PerformanceNvmeMetricResponseRecordsItems0StatusOk captures enum value "ok"
	PerformanceNvmeMetricResponseRecordsItems0StatusOk string = "ok"

	// BEGIN RIPPY DEBUGGING
	// PerformanceNvmeMetricResponseRecordsItems0
	// PerformanceNvmeMetricResponseRecordsItems0
	// status
	// Status
	// error
	// END RIPPY DEBUGGING
	// PerformanceNvmeMetricResponseRecordsItems0StatusError captures enum value "error"
	PerformanceNvmeMetricResponseRecordsItems0StatusError string = "error"

	// BEGIN RIPPY DEBUGGING
	// PerformanceNvmeMetricResponseRecordsItems0
	// PerformanceNvmeMetricResponseRecordsItems0
	// status
	// Status
	// partial_no_data
	// END RIPPY DEBUGGING
	// PerformanceNvmeMetricResponseRecordsItems0StatusPartialNoData captures enum value "partial_no_data"
	PerformanceNvmeMetricResponseRecordsItems0StatusPartialNoData string = "partial_no_data"

	// BEGIN RIPPY DEBUGGING
	// PerformanceNvmeMetricResponseRecordsItems0
	// PerformanceNvmeMetricResponseRecordsItems0
	// status
	// Status
	// partial_no_uuid
	// END RIPPY DEBUGGING
	// PerformanceNvmeMetricResponseRecordsItems0StatusPartialNoUUID captures enum value "partial_no_uuid"
	PerformanceNvmeMetricResponseRecordsItems0StatusPartialNoUUID string = "partial_no_uuid"

	// BEGIN RIPPY DEBUGGING
	// PerformanceNvmeMetricResponseRecordsItems0
	// PerformanceNvmeMetricResponseRecordsItems0
	// status
	// Status
	// partial_no_response
	// END RIPPY DEBUGGING
	// PerformanceNvmeMetricResponseRecordsItems0StatusPartialNoResponse captures enum value "partial_no_response"
	PerformanceNvmeMetricResponseRecordsItems0StatusPartialNoResponse string = "partial_no_response"

	// BEGIN RIPPY DEBUGGING
	// PerformanceNvmeMetricResponseRecordsItems0
	// PerformanceNvmeMetricResponseRecordsItems0
	// status
	// Status
	// partial_other_error
	// END RIPPY DEBUGGING
	// PerformanceNvmeMetricResponseRecordsItems0StatusPartialOtherError captures enum value "partial_other_error"
	PerformanceNvmeMetricResponseRecordsItems0StatusPartialOtherError string = "partial_other_error"

	// BEGIN RIPPY DEBUGGING
	// PerformanceNvmeMetricResponseRecordsItems0
	// PerformanceNvmeMetricResponseRecordsItems0
	// status
	// Status
	// negative_delta
	// END RIPPY DEBUGGING
	// PerformanceNvmeMetricResponseRecordsItems0StatusNegativeDelta captures enum value "negative_delta"
	PerformanceNvmeMetricResponseRecordsItems0StatusNegativeDelta string = "negative_delta"

	// BEGIN RIPPY DEBUGGING
	// PerformanceNvmeMetricResponseRecordsItems0
	// PerformanceNvmeMetricResponseRecordsItems0
	// status
	// Status
	// backfilled_data
	// END RIPPY DEBUGGING
	// PerformanceNvmeMetricResponseRecordsItems0StatusBackfilledData captures enum value "backfilled_data"
	PerformanceNvmeMetricResponseRecordsItems0StatusBackfilledData string = "backfilled_data"

	// BEGIN RIPPY DEBUGGING
	// PerformanceNvmeMetricResponseRecordsItems0
	// PerformanceNvmeMetricResponseRecordsItems0
	// status
	// Status
	// inconsistent_delta_time
	// END RIPPY DEBUGGING
	// PerformanceNvmeMetricResponseRecordsItems0StatusInconsistentDeltaTime captures enum value "inconsistent_delta_time"
	PerformanceNvmeMetricResponseRecordsItems0StatusInconsistentDeltaTime string = "inconsistent_delta_time"

	// BEGIN RIPPY DEBUGGING
	// PerformanceNvmeMetricResponseRecordsItems0
	// PerformanceNvmeMetricResponseRecordsItems0
	// status
	// Status
	// inconsistent_old_data
	// END RIPPY DEBUGGING
	// PerformanceNvmeMetricResponseRecordsItems0StatusInconsistentOldData captures enum value "inconsistent_old_data"
	PerformanceNvmeMetricResponseRecordsItems0StatusInconsistentOldData string = "inconsistent_old_data"
)

// prop value enum
func (m *PerformanceNvmeMetricResponseRecordsItems0) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, performanceNvmeMetricResponseRecordsItems0TypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PerformanceNvmeMetricResponseRecordsItems0) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceNvmeMetricResponseRecordsItems0) validateThroughput(formats strfmt.Registry) error {
	if swag.IsZero(m.Throughput) { // not required
		return nil
	}

	if m.Throughput != nil {
		if err := m.Throughput.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("throughput")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceNvmeMetricResponseRecordsItems0) validateTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this performance nvme metric response records items0 based on the context it is used
func (m *PerformanceNvmeMetricResponseRecordsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDuration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIops(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLatency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateThroughput(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimestamp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformanceNvmeMetricResponseRecordsItems0) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceNvmeMetricResponseRecordsItems0) contextValidateDuration(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "duration", "body", string(m.Duration)); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceNvmeMetricResponseRecordsItems0) contextValidateIops(ctx context.Context, formats strfmt.Registry) error {

	if m.Iops != nil {
		if err := m.Iops.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iops")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceNvmeMetricResponseRecordsItems0) contextValidateLatency(ctx context.Context, formats strfmt.Registry) error {

	if m.Latency != nil {
		if err := m.Latency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("latency")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceNvmeMetricResponseRecordsItems0) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "status", "body", string(m.Status)); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceNvmeMetricResponseRecordsItems0) contextValidateThroughput(ctx context.Context, formats strfmt.Registry) error {

	if m.Throughput != nil {
		if err := m.Throughput.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("throughput")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceNvmeMetricResponseRecordsItems0) contextValidateTimestamp(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PerformanceNvmeMetricResponseRecordsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformanceNvmeMetricResponseRecordsItems0) UnmarshalBinary(b []byte) error {
	var res PerformanceNvmeMetricResponseRecordsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PerformanceNvmeMetricResponseRecordsItems0Iops The rate of I/O operations observed at the storage object.
//
// swagger:model PerformanceNvmeMetricResponseRecordsItems0Iops
type PerformanceNvmeMetricResponseRecordsItems0Iops struct {

	// Performance metric for other I/O operations. Other I/O operations can be metadata operations, such as directory lookups and so on.
	Other int64 `json:"other,omitempty"`

	// Performance metric for read I/O operations.
	// Example: 200
	Read int64 `json:"read,omitempty"`

	// Performance metric aggregated over all types of I/O operations.
	// Example: 1000
	Total int64 `json:"total,omitempty"`

	// Peformance metric for write I/O operations.
	// Example: 100
	Write int64 `json:"write,omitempty"`
}

// Validate validates this performance nvme metric response records items0 iops
func (m *PerformanceNvmeMetricResponseRecordsItems0Iops) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this performance nvme metric response records items0 iops based on the context it is used
func (m *PerformanceNvmeMetricResponseRecordsItems0Iops) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *PerformanceNvmeMetricResponseRecordsItems0Iops) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformanceNvmeMetricResponseRecordsItems0Iops) UnmarshalBinary(b []byte) error {
	var res PerformanceNvmeMetricResponseRecordsItems0Iops
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PerformanceNvmeMetricResponseRecordsItems0Latency The round trip latency in microseconds observed at the storage object.
//
// swagger:model PerformanceNvmeMetricResponseRecordsItems0Latency
type PerformanceNvmeMetricResponseRecordsItems0Latency struct {

	// Performance metric for other I/O operations. Other I/O operations can be metadata operations, such as directory lookups and so on.
	Other int64 `json:"other,omitempty"`

	// Performance metric for read I/O operations.
	// Example: 200
	Read int64 `json:"read,omitempty"`

	// Performance metric aggregated over all types of I/O operations.
	// Example: 1000
	Total int64 `json:"total,omitempty"`

	// Peformance metric for write I/O operations.
	// Example: 100
	Write int64 `json:"write,omitempty"`
}

// Validate validates this performance nvme metric response records items0 latency
func (m *PerformanceNvmeMetricResponseRecordsItems0Latency) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this performance nvme metric response records items0 latency based on the context it is used
func (m *PerformanceNvmeMetricResponseRecordsItems0Latency) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *PerformanceNvmeMetricResponseRecordsItems0Latency) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformanceNvmeMetricResponseRecordsItems0Latency) UnmarshalBinary(b []byte) error {
	var res PerformanceNvmeMetricResponseRecordsItems0Latency
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PerformanceNvmeMetricResponseRecordsItems0Links performance nvme metric response records items0 links
//
// swagger:model PerformanceNvmeMetricResponseRecordsItems0Links
type PerformanceNvmeMetricResponseRecordsItems0Links struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this performance nvme metric response records items0 links
func (m *PerformanceNvmeMetricResponseRecordsItems0Links) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformanceNvmeMetricResponseRecordsItems0Links) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this performance nvme metric response records items0 links based on the context it is used
func (m *PerformanceNvmeMetricResponseRecordsItems0Links) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformanceNvmeMetricResponseRecordsItems0Links) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PerformanceNvmeMetricResponseRecordsItems0Links) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformanceNvmeMetricResponseRecordsItems0Links) UnmarshalBinary(b []byte) error {
	var res PerformanceNvmeMetricResponseRecordsItems0Links
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PerformanceNvmeMetricResponseRecordsItems0Throughput The rate of throughput bytes per second observed at the storage object.
//
// swagger:model PerformanceNvmeMetricResponseRecordsItems0Throughput
type PerformanceNvmeMetricResponseRecordsItems0Throughput struct {

	// Performance metric for other I/O operations. Other I/O operations can be metadata operations, such as directory lookups and so on.
	Other int64 `json:"other,omitempty"`

	// Performance metric for read I/O operations.
	// Example: 200
	Read int64 `json:"read,omitempty"`

	// Performance metric aggregated over all types of I/O operations.
	// Example: 1000
	Total int64 `json:"total,omitempty"`

	// Peformance metric for write I/O operations.
	// Example: 100
	Write int64 `json:"write,omitempty"`
}

// Validate validates this performance nvme metric response records items0 throughput
func (m *PerformanceNvmeMetricResponseRecordsItems0Throughput) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this performance nvme metric response records items0 throughput based on the context it is used
func (m *PerformanceNvmeMetricResponseRecordsItems0Throughput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *PerformanceNvmeMetricResponseRecordsItems0Throughput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformanceNvmeMetricResponseRecordsItems0Throughput) UnmarshalBinary(b []byte) error {
	var res PerformanceNvmeMetricResponseRecordsItems0Throughput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HELLO RIPPY
