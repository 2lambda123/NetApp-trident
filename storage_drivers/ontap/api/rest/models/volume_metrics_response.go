// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VolumeMetricsResponse volume metrics response
//
// swagger:model volume_metrics_response
type VolumeMetricsResponse struct {

	// links
	Links *VolumeMetricsResponseLinks `json:"_links,omitempty"`

	// Number of records
	NumRecords int64 `json:"num_records,omitempty"`

	// records
	Records []*VolumeMetricsResponseRecordsItems0 `json:"records,omitempty"`
}

// Validate validates this volume metrics response
func (m *VolumeMetricsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecords(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VolumeMetricsResponse) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeMetricsResponse) validateRecords(formats strfmt.Registry) error {
	if swag.IsZero(m.Records) { // not required
		return nil
	}

	for i := 0; i < len(m.Records); i++ {
		if swag.IsZero(m.Records[i]) { // not required
			continue
		}

		if m.Records[i] != nil {
			if err := m.Records[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("records" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this volume metrics response based on the context it is used
func (m *VolumeMetricsResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecords(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VolumeMetricsResponse) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeMetricsResponse) contextValidateRecords(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Records); i++ {

		if m.Records[i] != nil {
			if err := m.Records[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("records" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *VolumeMetricsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeMetricsResponse) UnmarshalBinary(b []byte) error {
	var res VolumeMetricsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VolumeMetricsResponseLinks volume metrics response links
//
// swagger:model VolumeMetricsResponseLinks
type VolumeMetricsResponseLinks struct {

	// next
	Next *Href `json:"next,omitempty"`

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this volume metrics response links
func (m *VolumeMetricsResponseLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VolumeMetricsResponseLinks) validateNext(formats strfmt.Registry) error {
	if swag.IsZero(m.Next) { // not required
		return nil
	}

	if m.Next != nil {
		if err := m.Next.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "next")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeMetricsResponseLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this volume metrics response links based on the context it is used
func (m *VolumeMetricsResponseLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNext(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VolumeMetricsResponseLinks) contextValidateNext(ctx context.Context, formats strfmt.Registry) error {

	if m.Next != nil {
		if err := m.Next.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "next")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeMetricsResponseLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VolumeMetricsResponseLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeMetricsResponseLinks) UnmarshalBinary(b []byte) error {
	var res VolumeMetricsResponseLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VolumeMetricsResponseRecordsItems0 Performance numbers, such as IOPS latency and throughput.
//
// swagger:model VolumeMetricsResponseRecordsItems0
type VolumeMetricsResponseRecordsItems0 struct {

	// links
	Links *VolumeMetricsResponseRecordsItems0Links `json:"_links,omitempty"`

	// The duration over which this sample is calculated. The time durations are represented in the ISO-8601 standard format. Samples can be calculated over the following durations:
	//
	// Example: PT15S
	// Read Only: true
	// Enum: [PT15S PT4M PT30M PT2H P1D PT5M]
	Duration string `json:"duration,omitempty"`

	// iops
	Iops *VolumeMetricsResponseRecordsItems0Iops `json:"iops,omitempty"`

	// latency
	Latency *VolumeMetricsResponseRecordsItems0Latency `json:"latency,omitempty"`

	// Errors associated with the sample. For example, if the aggregation of data over multiple nodes fails, then any partial errors might return "ok" on success or "error" on an internal uncategorized failure. Whenever a sample collection is missed but done at a later time, it is back filled to the previous 15 second timestamp and tagged with "backfilled_data". "Inconsistent_ delta_time" is encountered when the time between two collections is not the same for all nodes. Therefore, the aggregated value might be over or under inflated. "Negative_delta" is returned when an expected monotonically increasing value has decreased in value. "Inconsistent_old_data" is returned when one or more nodes do not have the latest data.
	// Example: ok
	// Read Only: true
	// Enum: [ok error partial_no_data partial_no_uuid partial_no_response partial_other_error negative_delta backfilled_data inconsistent_delta_time inconsistent_old_data]
	Status string `json:"status,omitempty"`

	// throughput
	Throughput *VolumeMetricsResponseRecordsItems0Throughput `json:"throughput,omitempty"`

	// The timestamp of the performance data.
	// Example: 2017-01-25 11:20:13
	// Read Only: true
	// Format: date-time
	Timestamp *strfmt.DateTime `json:"timestamp,omitempty"`
}

// Validate validates this volume metrics response records items0
func (m *VolumeMetricsResponseRecordsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIops(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLatency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThroughput(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VolumeMetricsResponseRecordsItems0) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

var volumeMetricsResponseRecordsItems0TypeDurationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PT15S","PT4M","PT30M","PT2H","P1D","PT5M"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		volumeMetricsResponseRecordsItems0TypeDurationPropEnum = append(volumeMetricsResponseRecordsItems0TypeDurationPropEnum, v)
	}
}

const (

	// BEGIN RIPPY DEBUGGING
	// VolumeMetricsResponseRecordsItems0
	// VolumeMetricsResponseRecordsItems0
	// duration
	// Duration
	// PT15S
	// END RIPPY DEBUGGING
	// VolumeMetricsResponseRecordsItems0DurationPT15S captures enum value "PT15S"
	VolumeMetricsResponseRecordsItems0DurationPT15S string = "PT15S"

	// BEGIN RIPPY DEBUGGING
	// VolumeMetricsResponseRecordsItems0
	// VolumeMetricsResponseRecordsItems0
	// duration
	// Duration
	// PT4M
	// END RIPPY DEBUGGING
	// VolumeMetricsResponseRecordsItems0DurationPT4M captures enum value "PT4M"
	VolumeMetricsResponseRecordsItems0DurationPT4M string = "PT4M"

	// BEGIN RIPPY DEBUGGING
	// VolumeMetricsResponseRecordsItems0
	// VolumeMetricsResponseRecordsItems0
	// duration
	// Duration
	// PT30M
	// END RIPPY DEBUGGING
	// VolumeMetricsResponseRecordsItems0DurationPT30M captures enum value "PT30M"
	VolumeMetricsResponseRecordsItems0DurationPT30M string = "PT30M"

	// BEGIN RIPPY DEBUGGING
	// VolumeMetricsResponseRecordsItems0
	// VolumeMetricsResponseRecordsItems0
	// duration
	// Duration
	// PT2H
	// END RIPPY DEBUGGING
	// VolumeMetricsResponseRecordsItems0DurationPT2H captures enum value "PT2H"
	VolumeMetricsResponseRecordsItems0DurationPT2H string = "PT2H"

	// BEGIN RIPPY DEBUGGING
	// VolumeMetricsResponseRecordsItems0
	// VolumeMetricsResponseRecordsItems0
	// duration
	// Duration
	// P1D
	// END RIPPY DEBUGGING
	// VolumeMetricsResponseRecordsItems0DurationP1D captures enum value "P1D"
	VolumeMetricsResponseRecordsItems0DurationP1D string = "P1D"

	// BEGIN RIPPY DEBUGGING
	// VolumeMetricsResponseRecordsItems0
	// VolumeMetricsResponseRecordsItems0
	// duration
	// Duration
	// PT5M
	// END RIPPY DEBUGGING
	// VolumeMetricsResponseRecordsItems0DurationPT5M captures enum value "PT5M"
	VolumeMetricsResponseRecordsItems0DurationPT5M string = "PT5M"
)

// prop value enum
func (m *VolumeMetricsResponseRecordsItems0) validateDurationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, volumeMetricsResponseRecordsItems0TypeDurationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VolumeMetricsResponseRecordsItems0) validateDuration(formats strfmt.Registry) error {
	if swag.IsZero(m.Duration) { // not required
		return nil
	}

	// value enum
	if err := m.validateDurationEnum("duration", "body", m.Duration); err != nil {
		return err
	}

	return nil
}

func (m *VolumeMetricsResponseRecordsItems0) validateIops(formats strfmt.Registry) error {
	if swag.IsZero(m.Iops) { // not required
		return nil
	}

	if m.Iops != nil {
		if err := m.Iops.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iops")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeMetricsResponseRecordsItems0) validateLatency(formats strfmt.Registry) error {
	if swag.IsZero(m.Latency) { // not required
		return nil
	}

	if m.Latency != nil {
		if err := m.Latency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("latency")
			}
			return err
		}
	}

	return nil
}

var volumeMetricsResponseRecordsItems0TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ok","error","partial_no_data","partial_no_uuid","partial_no_response","partial_other_error","negative_delta","backfilled_data","inconsistent_delta_time","inconsistent_old_data"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		volumeMetricsResponseRecordsItems0TypeStatusPropEnum = append(volumeMetricsResponseRecordsItems0TypeStatusPropEnum, v)
	}
}

const (

	// BEGIN RIPPY DEBUGGING
	// VolumeMetricsResponseRecordsItems0
	// VolumeMetricsResponseRecordsItems0
	// status
	// Status
	// ok
	// END RIPPY DEBUGGING
	// VolumeMetricsResponseRecordsItems0StatusOk captures enum value "ok"
	VolumeMetricsResponseRecordsItems0StatusOk string = "ok"

	// BEGIN RIPPY DEBUGGING
	// VolumeMetricsResponseRecordsItems0
	// VolumeMetricsResponseRecordsItems0
	// status
	// Status
	// error
	// END RIPPY DEBUGGING
	// VolumeMetricsResponseRecordsItems0StatusError captures enum value "error"
	VolumeMetricsResponseRecordsItems0StatusError string = "error"

	// BEGIN RIPPY DEBUGGING
	// VolumeMetricsResponseRecordsItems0
	// VolumeMetricsResponseRecordsItems0
	// status
	// Status
	// partial_no_data
	// END RIPPY DEBUGGING
	// VolumeMetricsResponseRecordsItems0StatusPartialNoData captures enum value "partial_no_data"
	VolumeMetricsResponseRecordsItems0StatusPartialNoData string = "partial_no_data"

	// BEGIN RIPPY DEBUGGING
	// VolumeMetricsResponseRecordsItems0
	// VolumeMetricsResponseRecordsItems0
	// status
	// Status
	// partial_no_uuid
	// END RIPPY DEBUGGING
	// VolumeMetricsResponseRecordsItems0StatusPartialNoUUID captures enum value "partial_no_uuid"
	VolumeMetricsResponseRecordsItems0StatusPartialNoUUID string = "partial_no_uuid"

	// BEGIN RIPPY DEBUGGING
	// VolumeMetricsResponseRecordsItems0
	// VolumeMetricsResponseRecordsItems0
	// status
	// Status
	// partial_no_response
	// END RIPPY DEBUGGING
	// VolumeMetricsResponseRecordsItems0StatusPartialNoResponse captures enum value "partial_no_response"
	VolumeMetricsResponseRecordsItems0StatusPartialNoResponse string = "partial_no_response"

	// BEGIN RIPPY DEBUGGING
	// VolumeMetricsResponseRecordsItems0
	// VolumeMetricsResponseRecordsItems0
	// status
	// Status
	// partial_other_error
	// END RIPPY DEBUGGING
	// VolumeMetricsResponseRecordsItems0StatusPartialOtherError captures enum value "partial_other_error"
	VolumeMetricsResponseRecordsItems0StatusPartialOtherError string = "partial_other_error"

	// BEGIN RIPPY DEBUGGING
	// VolumeMetricsResponseRecordsItems0
	// VolumeMetricsResponseRecordsItems0
	// status
	// Status
	// negative_delta
	// END RIPPY DEBUGGING
	// VolumeMetricsResponseRecordsItems0StatusNegativeDelta captures enum value "negative_delta"
	VolumeMetricsResponseRecordsItems0StatusNegativeDelta string = "negative_delta"

	// BEGIN RIPPY DEBUGGING
	// VolumeMetricsResponseRecordsItems0
	// VolumeMetricsResponseRecordsItems0
	// status
	// Status
	// backfilled_data
	// END RIPPY DEBUGGING
	// VolumeMetricsResponseRecordsItems0StatusBackfilledData captures enum value "backfilled_data"
	VolumeMetricsResponseRecordsItems0StatusBackfilledData string = "backfilled_data"

	// BEGIN RIPPY DEBUGGING
	// VolumeMetricsResponseRecordsItems0
	// VolumeMetricsResponseRecordsItems0
	// status
	// Status
	// inconsistent_delta_time
	// END RIPPY DEBUGGING
	// VolumeMetricsResponseRecordsItems0StatusInconsistentDeltaTime captures enum value "inconsistent_delta_time"
	VolumeMetricsResponseRecordsItems0StatusInconsistentDeltaTime string = "inconsistent_delta_time"

	// BEGIN RIPPY DEBUGGING
	// VolumeMetricsResponseRecordsItems0
	// VolumeMetricsResponseRecordsItems0
	// status
	// Status
	// inconsistent_old_data
	// END RIPPY DEBUGGING
	// VolumeMetricsResponseRecordsItems0StatusInconsistentOldData captures enum value "inconsistent_old_data"
	VolumeMetricsResponseRecordsItems0StatusInconsistentOldData string = "inconsistent_old_data"
)

// prop value enum
func (m *VolumeMetricsResponseRecordsItems0) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, volumeMetricsResponseRecordsItems0TypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VolumeMetricsResponseRecordsItems0) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *VolumeMetricsResponseRecordsItems0) validateThroughput(formats strfmt.Registry) error {
	if swag.IsZero(m.Throughput) { // not required
		return nil
	}

	if m.Throughput != nil {
		if err := m.Throughput.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("throughput")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeMetricsResponseRecordsItems0) validateTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this volume metrics response records items0 based on the context it is used
func (m *VolumeMetricsResponseRecordsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDuration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIops(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLatency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateThroughput(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimestamp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VolumeMetricsResponseRecordsItems0) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeMetricsResponseRecordsItems0) contextValidateDuration(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "duration", "body", string(m.Duration)); err != nil {
		return err
	}

	return nil
}

func (m *VolumeMetricsResponseRecordsItems0) contextValidateIops(ctx context.Context, formats strfmt.Registry) error {

	if m.Iops != nil {
		if err := m.Iops.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iops")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeMetricsResponseRecordsItems0) contextValidateLatency(ctx context.Context, formats strfmt.Registry) error {

	if m.Latency != nil {
		if err := m.Latency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("latency")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeMetricsResponseRecordsItems0) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "status", "body", string(m.Status)); err != nil {
		return err
	}

	return nil
}

func (m *VolumeMetricsResponseRecordsItems0) contextValidateThroughput(ctx context.Context, formats strfmt.Registry) error {

	if m.Throughput != nil {
		if err := m.Throughput.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("throughput")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeMetricsResponseRecordsItems0) contextValidateTimestamp(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VolumeMetricsResponseRecordsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeMetricsResponseRecordsItems0) UnmarshalBinary(b []byte) error {
	var res VolumeMetricsResponseRecordsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VolumeMetricsResponseRecordsItems0Iops The rate of I/O operations observed at the storage object.
//
// swagger:model VolumeMetricsResponseRecordsItems0Iops
type VolumeMetricsResponseRecordsItems0Iops struct {

	// Performance metric for other I/O operations. Other I/O operations can be metadata operations, such as directory lookups and so on.
	Other int64 `json:"other,omitempty"`

	// Performance metric for read I/O operations.
	// Example: 200
	Read int64 `json:"read,omitempty"`

	// Performance metric aggregated over all types of I/O operations.
	// Example: 1000
	Total int64 `json:"total,omitempty"`

	// Peformance metric for write I/O operations.
	// Example: 100
	Write int64 `json:"write,omitempty"`
}

// Validate validates this volume metrics response records items0 iops
func (m *VolumeMetricsResponseRecordsItems0Iops) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this volume metrics response records items0 iops based on the context it is used
func (m *VolumeMetricsResponseRecordsItems0Iops) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *VolumeMetricsResponseRecordsItems0Iops) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeMetricsResponseRecordsItems0Iops) UnmarshalBinary(b []byte) error {
	var res VolumeMetricsResponseRecordsItems0Iops
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VolumeMetricsResponseRecordsItems0Latency The round trip latency in microseconds observed at the storage object.
//
// swagger:model VolumeMetricsResponseRecordsItems0Latency
type VolumeMetricsResponseRecordsItems0Latency struct {

	// Performance metric for other I/O operations. Other I/O operations can be metadata operations, such as directory lookups and so on.
	Other int64 `json:"other,omitempty"`

	// Performance metric for read I/O operations.
	// Example: 200
	Read int64 `json:"read,omitempty"`

	// Performance metric aggregated over all types of I/O operations.
	// Example: 1000
	Total int64 `json:"total,omitempty"`

	// Peformance metric for write I/O operations.
	// Example: 100
	Write int64 `json:"write,omitempty"`
}

// Validate validates this volume metrics response records items0 latency
func (m *VolumeMetricsResponseRecordsItems0Latency) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this volume metrics response records items0 latency based on the context it is used
func (m *VolumeMetricsResponseRecordsItems0Latency) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *VolumeMetricsResponseRecordsItems0Latency) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeMetricsResponseRecordsItems0Latency) UnmarshalBinary(b []byte) error {
	var res VolumeMetricsResponseRecordsItems0Latency
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VolumeMetricsResponseRecordsItems0Links volume metrics response records items0 links
//
// swagger:model VolumeMetricsResponseRecordsItems0Links
type VolumeMetricsResponseRecordsItems0Links struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this volume metrics response records items0 links
func (m *VolumeMetricsResponseRecordsItems0Links) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VolumeMetricsResponseRecordsItems0Links) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this volume metrics response records items0 links based on the context it is used
func (m *VolumeMetricsResponseRecordsItems0Links) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VolumeMetricsResponseRecordsItems0Links) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VolumeMetricsResponseRecordsItems0Links) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeMetricsResponseRecordsItems0Links) UnmarshalBinary(b []byte) error {
	var res VolumeMetricsResponseRecordsItems0Links
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VolumeMetricsResponseRecordsItems0Throughput The rate of throughput bytes per second observed at the storage object.
//
// swagger:model VolumeMetricsResponseRecordsItems0Throughput
type VolumeMetricsResponseRecordsItems0Throughput struct {

	// Performance metric for other I/O operations. Other I/O operations can be metadata operations, such as directory lookups and so on.
	Other int64 `json:"other,omitempty"`

	// Performance metric for read I/O operations.
	// Example: 200
	Read int64 `json:"read,omitempty"`

	// Performance metric aggregated over all types of I/O operations.
	// Example: 1000
	Total int64 `json:"total,omitempty"`

	// Peformance metric for write I/O operations.
	// Example: 100
	Write int64 `json:"write,omitempty"`
}

// Validate validates this volume metrics response records items0 throughput
func (m *VolumeMetricsResponseRecordsItems0Throughput) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this volume metrics response records items0 throughput based on the context it is used
func (m *VolumeMetricsResponseRecordsItems0Throughput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *VolumeMetricsResponseRecordsItems0Throughput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeMetricsResponseRecordsItems0Throughput) UnmarshalBinary(b []byte) error {
	var res VolumeMetricsResponseRecordsItems0Throughput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HELLO RIPPY
