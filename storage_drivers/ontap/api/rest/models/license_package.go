// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LicensePackage license package
//
// swagger:model license_package
type LicensePackage struct {

	// links
	Links *LicensePackageLinks `json:"_links,omitempty"`

	// License description
	// Example: NFS License
	// Read Only: true
	Description string `json:"description,omitempty"`

	// entitlement
	Entitlement *LicensePackageEntitlement `json:"entitlement,omitempty"`

	// keys
	Keys []string `json:"keys,omitempty"`

	// Installed licenses of the package.
	// Read Only: true
	Licenses []*LicensePackageLicensesItems0 `json:"licenses,omitempty"`

	// Name of the license.
	// Example: NFS
	// Read Only: true
	Name string `json:"name,omitempty"`

	// Scope of the license.
	// Read Only: true
	// Enum: [not_available site cluster node]
	Scope string `json:"scope,omitempty"`

	// Summary state of package based on all installed licenses.
	// Example: compliant
	// Read Only: true
	// Enum: [compliant noncompliant unlicensed unknown]
	State string `json:"state,omitempty"`
}

// Validate validates this license package
func (m *LicensePackage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntitlement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLicenses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LicensePackage) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *LicensePackage) validateEntitlement(formats strfmt.Registry) error {
	if swag.IsZero(m.Entitlement) { // not required
		return nil
	}

	if m.Entitlement != nil {
		if err := m.Entitlement.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entitlement")
			}
			return err
		}
	}

	return nil
}

func (m *LicensePackage) validateLicenses(formats strfmt.Registry) error {
	if swag.IsZero(m.Licenses) { // not required
		return nil
	}

	for i := 0; i < len(m.Licenses); i++ {
		if swag.IsZero(m.Licenses[i]) { // not required
			continue
		}

		if m.Licenses[i] != nil {
			if err := m.Licenses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("licenses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var licensePackageTypeScopePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["not_available","site","cluster","node"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		licensePackageTypeScopePropEnum = append(licensePackageTypeScopePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// license_package
	// LicensePackage
	// scope
	// Scope
	// not_available
	// END DEBUGGING
	// LicensePackageScopeNotAvailable captures enum value "not_available"
	LicensePackageScopeNotAvailable string = "not_available"

	// BEGIN DEBUGGING
	// license_package
	// LicensePackage
	// scope
	// Scope
	// site
	// END DEBUGGING
	// LicensePackageScopeSite captures enum value "site"
	LicensePackageScopeSite string = "site"

	// BEGIN DEBUGGING
	// license_package
	// LicensePackage
	// scope
	// Scope
	// cluster
	// END DEBUGGING
	// LicensePackageScopeCluster captures enum value "cluster"
	LicensePackageScopeCluster string = "cluster"

	// BEGIN DEBUGGING
	// license_package
	// LicensePackage
	// scope
	// Scope
	// node
	// END DEBUGGING
	// LicensePackageScopeNode captures enum value "node"
	LicensePackageScopeNode string = "node"
)

// prop value enum
func (m *LicensePackage) validateScopeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, licensePackageTypeScopePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *LicensePackage) validateScope(formats strfmt.Registry) error {
	if swag.IsZero(m.Scope) { // not required
		return nil
	}

	// value enum
	if err := m.validateScopeEnum("scope", "body", m.Scope); err != nil {
		return err
	}

	return nil
}

var licensePackageTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["compliant","noncompliant","unlicensed","unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		licensePackageTypeStatePropEnum = append(licensePackageTypeStatePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// license_package
	// LicensePackage
	// state
	// State
	// compliant
	// END DEBUGGING
	// LicensePackageStateCompliant captures enum value "compliant"
	LicensePackageStateCompliant string = "compliant"

	// BEGIN DEBUGGING
	// license_package
	// LicensePackage
	// state
	// State
	// noncompliant
	// END DEBUGGING
	// LicensePackageStateNoncompliant captures enum value "noncompliant"
	LicensePackageStateNoncompliant string = "noncompliant"

	// BEGIN DEBUGGING
	// license_package
	// LicensePackage
	// state
	// State
	// unlicensed
	// END DEBUGGING
	// LicensePackageStateUnlicensed captures enum value "unlicensed"
	LicensePackageStateUnlicensed string = "unlicensed"

	// BEGIN DEBUGGING
	// license_package
	// LicensePackage
	// state
	// State
	// unknown
	// END DEBUGGING
	// LicensePackageStateUnknown captures enum value "unknown"
	LicensePackageStateUnknown string = "unknown"
)

// prop value enum
func (m *LicensePackage) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, licensePackageTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *LicensePackage) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this license package based on the context it is used
func (m *LicensePackage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDescription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntitlement(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLicenses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScope(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LicensePackage) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *LicensePackage) contextValidateDescription(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "description", "body", string(m.Description)); err != nil {
		return err
	}

	return nil
}

func (m *LicensePackage) contextValidateEntitlement(ctx context.Context, formats strfmt.Registry) error {

	if m.Entitlement != nil {
		if err := m.Entitlement.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entitlement")
			}
			return err
		}
	}

	return nil
}

func (m *LicensePackage) contextValidateLicenses(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "licenses", "body", []*LicensePackageLicensesItems0(m.Licenses)); err != nil {
		return err
	}

	for i := 0; i < len(m.Licenses); i++ {

		if m.Licenses[i] != nil {
			if err := m.Licenses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("licenses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LicensePackage) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *LicensePackage) contextValidateScope(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "scope", "body", string(m.Scope)); err != nil {
		return err
	}

	return nil
}

func (m *LicensePackage) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "state", "body", string(m.State)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LicensePackage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LicensePackage) UnmarshalBinary(b []byte) error {
	var res LicensePackage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// LicensePackageEntitlement license package entitlement
//
// swagger:model LicensePackageEntitlement
type LicensePackageEntitlement struct {

	// Entitlement action to be taken to mitigate the risk
	// Read Only: true
	// Enum: [acquire_license adjust_capacity verify_entitlement verify_system_health none]
	Action string `json:"action,omitempty"`

	// Entitlement risk of the package
	// Read Only: true
	// Enum: [high medium low unlicensed unknown]
	Risk string `json:"risk,omitempty"`
}

// Validate validates this license package entitlement
func (m *LicensePackageEntitlement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRisk(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var licensePackageEntitlementTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["acquire_license","adjust_capacity","verify_entitlement","verify_system_health","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		licensePackageEntitlementTypeActionPropEnum = append(licensePackageEntitlementTypeActionPropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// LicensePackageEntitlement
	// LicensePackageEntitlement
	// action
	// Action
	// acquire_license
	// END DEBUGGING
	// LicensePackageEntitlementActionAcquireLicense captures enum value "acquire_license"
	LicensePackageEntitlementActionAcquireLicense string = "acquire_license"

	// BEGIN DEBUGGING
	// LicensePackageEntitlement
	// LicensePackageEntitlement
	// action
	// Action
	// adjust_capacity
	// END DEBUGGING
	// LicensePackageEntitlementActionAdjustCapacity captures enum value "adjust_capacity"
	LicensePackageEntitlementActionAdjustCapacity string = "adjust_capacity"

	// BEGIN DEBUGGING
	// LicensePackageEntitlement
	// LicensePackageEntitlement
	// action
	// Action
	// verify_entitlement
	// END DEBUGGING
	// LicensePackageEntitlementActionVerifyEntitlement captures enum value "verify_entitlement"
	LicensePackageEntitlementActionVerifyEntitlement string = "verify_entitlement"

	// BEGIN DEBUGGING
	// LicensePackageEntitlement
	// LicensePackageEntitlement
	// action
	// Action
	// verify_system_health
	// END DEBUGGING
	// LicensePackageEntitlementActionVerifySystemHealth captures enum value "verify_system_health"
	LicensePackageEntitlementActionVerifySystemHealth string = "verify_system_health"

	// BEGIN DEBUGGING
	// LicensePackageEntitlement
	// LicensePackageEntitlement
	// action
	// Action
	// none
	// END DEBUGGING
	// LicensePackageEntitlementActionNone captures enum value "none"
	LicensePackageEntitlementActionNone string = "none"
)

// prop value enum
func (m *LicensePackageEntitlement) validateActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, licensePackageEntitlementTypeActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *LicensePackageEntitlement) validateAction(formats strfmt.Registry) error {
	if swag.IsZero(m.Action) { // not required
		return nil
	}

	// value enum
	if err := m.validateActionEnum("entitlement"+"."+"action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

var licensePackageEntitlementTypeRiskPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["high","medium","low","unlicensed","unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		licensePackageEntitlementTypeRiskPropEnum = append(licensePackageEntitlementTypeRiskPropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// LicensePackageEntitlement
	// LicensePackageEntitlement
	// risk
	// Risk
	// high
	// END DEBUGGING
	// LicensePackageEntitlementRiskHigh captures enum value "high"
	LicensePackageEntitlementRiskHigh string = "high"

	// BEGIN DEBUGGING
	// LicensePackageEntitlement
	// LicensePackageEntitlement
	// risk
	// Risk
	// medium
	// END DEBUGGING
	// LicensePackageEntitlementRiskMedium captures enum value "medium"
	LicensePackageEntitlementRiskMedium string = "medium"

	// BEGIN DEBUGGING
	// LicensePackageEntitlement
	// LicensePackageEntitlement
	// risk
	// Risk
	// low
	// END DEBUGGING
	// LicensePackageEntitlementRiskLow captures enum value "low"
	LicensePackageEntitlementRiskLow string = "low"

	// BEGIN DEBUGGING
	// LicensePackageEntitlement
	// LicensePackageEntitlement
	// risk
	// Risk
	// unlicensed
	// END DEBUGGING
	// LicensePackageEntitlementRiskUnlicensed captures enum value "unlicensed"
	LicensePackageEntitlementRiskUnlicensed string = "unlicensed"

	// BEGIN DEBUGGING
	// LicensePackageEntitlement
	// LicensePackageEntitlement
	// risk
	// Risk
	// unknown
	// END DEBUGGING
	// LicensePackageEntitlementRiskUnknown captures enum value "unknown"
	LicensePackageEntitlementRiskUnknown string = "unknown"
)

// prop value enum
func (m *LicensePackageEntitlement) validateRiskEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, licensePackageEntitlementTypeRiskPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *LicensePackageEntitlement) validateRisk(formats strfmt.Registry) error {
	if swag.IsZero(m.Risk) { // not required
		return nil
	}

	// value enum
	if err := m.validateRiskEnum("entitlement"+"."+"risk", "body", m.Risk); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this license package entitlement based on the context it is used
func (m *LicensePackageEntitlement) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAction(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRisk(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LicensePackageEntitlement) contextValidateAction(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "entitlement"+"."+"action", "body", string(m.Action)); err != nil {
		return err
	}

	return nil
}

func (m *LicensePackageEntitlement) contextValidateRisk(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "entitlement"+"."+"risk", "body", string(m.Risk)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LicensePackageEntitlement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LicensePackageEntitlement) UnmarshalBinary(b []byte) error {
	var res LicensePackageEntitlement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// LicensePackageLicensesItems0 license package licenses items0
//
// swagger:model LicensePackageLicensesItems0
type LicensePackageLicensesItems0 struct {

	// A flag indicating whether the license is currently being enforced.
	// Read Only: true
	Active *bool `json:"active,omitempty"`

	// capacity
	Capacity *LicensePackageLicensesItems0Capacity `json:"capacity,omitempty"`

	// compliance
	Compliance *LicensePackageLicensesItems0Compliance `json:"compliance,omitempty"`

	// A flag indicating whether the license is in evaluation mode.
	// Read Only: true
	Evaluation *bool `json:"evaluation,omitempty"`

	// Date and time when the license expires.
	// Example: 2019-03-02T19:00:00Z
	// Read Only: true
	// Format: date-time
	ExpiryTime *strfmt.DateTime `json:"expiry_time,omitempty"`

	// A string that associates the license with a node or cluster.
	// Example: 456-44-1234
	// Read Only: true
	HostID string `json:"host_id,omitempty"`

	// Name of license that enabled the feature.
	// Example: Core Bundle
	// Read Only: true
	InstalledLicense string `json:"installed_license,omitempty"`

	// Cluster, node or license manager that owns the license.
	// Example: cluster1
	// Read Only: true
	Owner string `json:"owner,omitempty"`

	// Serial number of the license.
	// Example: 123456789
	// Read Only: true
	SerialNumber string `json:"serial_number,omitempty"`

	// A flag indicating whether the Cloud ONTAP system is going to shutdown as the Cloud platform license has already expired.
	// Read Only: true
	ShutdownImminent *bool `json:"shutdown_imminent,omitempty"`

	// Date and time when the license starts.
	// Example: 2019-02-02T19:00:00Z
	// Read Only: true
	// Format: date-time
	StartTime *strfmt.DateTime `json:"start_time,omitempty"`
}

// Validate validates this license package licenses items0
func (m *LicensePackageLicensesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCapacity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompliance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpiryTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LicensePackageLicensesItems0) validateCapacity(formats strfmt.Registry) error {
	if swag.IsZero(m.Capacity) { // not required
		return nil
	}

	if m.Capacity != nil {
		if err := m.Capacity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("capacity")
			}
			return err
		}
	}

	return nil
}

func (m *LicensePackageLicensesItems0) validateCompliance(formats strfmt.Registry) error {
	if swag.IsZero(m.Compliance) { // not required
		return nil
	}

	if m.Compliance != nil {
		if err := m.Compliance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("compliance")
			}
			return err
		}
	}

	return nil
}

func (m *LicensePackageLicensesItems0) validateExpiryTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpiryTime) { // not required
		return nil
	}

	if err := validate.FormatOf("expiry_time", "body", "date-time", m.ExpiryTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *LicensePackageLicensesItems0) validateStartTime(formats strfmt.Registry) error {
	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("start_time", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this license package licenses items0 based on the context it is used
func (m *LicensePackageLicensesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActive(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCapacity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCompliance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEvaluation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExpiryTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHostID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInstalledLicense(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOwner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSerialNumber(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShutdownImminent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStartTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LicensePackageLicensesItems0) contextValidateActive(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "active", "body", m.Active); err != nil {
		return err
	}

	return nil
}

func (m *LicensePackageLicensesItems0) contextValidateCapacity(ctx context.Context, formats strfmt.Registry) error {

	if m.Capacity != nil {
		if err := m.Capacity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("capacity")
			}
			return err
		}
	}

	return nil
}

func (m *LicensePackageLicensesItems0) contextValidateCompliance(ctx context.Context, formats strfmt.Registry) error {

	if m.Compliance != nil {
		if err := m.Compliance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("compliance")
			}
			return err
		}
	}

	return nil
}

func (m *LicensePackageLicensesItems0) contextValidateEvaluation(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "evaluation", "body", m.Evaluation); err != nil {
		return err
	}

	return nil
}

func (m *LicensePackageLicensesItems0) contextValidateExpiryTime(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "expiry_time", "body", m.ExpiryTime); err != nil {
		return err
	}

	return nil
}

func (m *LicensePackageLicensesItems0) contextValidateHostID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "host_id", "body", string(m.HostID)); err != nil {
		return err
	}

	return nil
}

func (m *LicensePackageLicensesItems0) contextValidateInstalledLicense(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "installed_license", "body", string(m.InstalledLicense)); err != nil {
		return err
	}

	return nil
}

func (m *LicensePackageLicensesItems0) contextValidateOwner(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "owner", "body", string(m.Owner)); err != nil {
		return err
	}

	return nil
}

func (m *LicensePackageLicensesItems0) contextValidateSerialNumber(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "serial_number", "body", string(m.SerialNumber)); err != nil {
		return err
	}

	return nil
}

func (m *LicensePackageLicensesItems0) contextValidateShutdownImminent(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "shutdown_imminent", "body", m.ShutdownImminent); err != nil {
		return err
	}

	return nil
}

func (m *LicensePackageLicensesItems0) contextValidateStartTime(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "start_time", "body", m.StartTime); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LicensePackageLicensesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LicensePackageLicensesItems0) UnmarshalBinary(b []byte) error {
	var res LicensePackageLicensesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// LicensePackageLicensesItems0Capacity license package licenses items0 capacity
//
// swagger:model LicensePackageLicensesItems0Capacity
type LicensePackageLicensesItems0Capacity struct {

	// Licensed capacity size (in bytes) that can be used.
	// Read Only: true
	MaximumSize int64 `json:"maximum_size,omitempty"`

	// Capacity that is currently used (in bytes).
	// Read Only: true
	UsedSize int64 `json:"used_size,omitempty"`
}

// Validate validates this license package licenses items0 capacity
func (m *LicensePackageLicensesItems0Capacity) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this license package licenses items0 capacity based on the context it is used
func (m *LicensePackageLicensesItems0Capacity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMaximumSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsedSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LicensePackageLicensesItems0Capacity) contextValidateMaximumSize(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "capacity"+"."+"maximum_size", "body", int64(m.MaximumSize)); err != nil {
		return err
	}

	return nil
}

func (m *LicensePackageLicensesItems0Capacity) contextValidateUsedSize(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "capacity"+"."+"used_size", "body", int64(m.UsedSize)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LicensePackageLicensesItems0Capacity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LicensePackageLicensesItems0Capacity) UnmarshalBinary(b []byte) error {
	var res LicensePackageLicensesItems0Capacity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// LicensePackageLicensesItems0Compliance license package licenses items0 compliance
//
// swagger:model LicensePackageLicensesItems0Compliance
type LicensePackageLicensesItems0Compliance struct {

	// Compliance state of the license.
	// Example: compliant
	// Read Only: true
	// Enum: [compliant noncompliant unlicensed unknown]
	State string `json:"state,omitempty"`
}

// Validate validates this license package licenses items0 compliance
func (m *LicensePackageLicensesItems0Compliance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var licensePackageLicensesItems0ComplianceTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["compliant","noncompliant","unlicensed","unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		licensePackageLicensesItems0ComplianceTypeStatePropEnum = append(licensePackageLicensesItems0ComplianceTypeStatePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// LicensePackageLicensesItems0Compliance
	// LicensePackageLicensesItems0Compliance
	// state
	// State
	// compliant
	// END DEBUGGING
	// LicensePackageLicensesItems0ComplianceStateCompliant captures enum value "compliant"
	LicensePackageLicensesItems0ComplianceStateCompliant string = "compliant"

	// BEGIN DEBUGGING
	// LicensePackageLicensesItems0Compliance
	// LicensePackageLicensesItems0Compliance
	// state
	// State
	// noncompliant
	// END DEBUGGING
	// LicensePackageLicensesItems0ComplianceStateNoncompliant captures enum value "noncompliant"
	LicensePackageLicensesItems0ComplianceStateNoncompliant string = "noncompliant"

	// BEGIN DEBUGGING
	// LicensePackageLicensesItems0Compliance
	// LicensePackageLicensesItems0Compliance
	// state
	// State
	// unlicensed
	// END DEBUGGING
	// LicensePackageLicensesItems0ComplianceStateUnlicensed captures enum value "unlicensed"
	LicensePackageLicensesItems0ComplianceStateUnlicensed string = "unlicensed"

	// BEGIN DEBUGGING
	// LicensePackageLicensesItems0Compliance
	// LicensePackageLicensesItems0Compliance
	// state
	// State
	// unknown
	// END DEBUGGING
	// LicensePackageLicensesItems0ComplianceStateUnknown captures enum value "unknown"
	LicensePackageLicensesItems0ComplianceStateUnknown string = "unknown"
)

// prop value enum
func (m *LicensePackageLicensesItems0Compliance) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, licensePackageLicensesItems0ComplianceTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *LicensePackageLicensesItems0Compliance) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("compliance"+"."+"state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this license package licenses items0 compliance based on the context it is used
func (m *LicensePackageLicensesItems0Compliance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LicensePackageLicensesItems0Compliance) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "compliance"+"."+"state", "body", string(m.State)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LicensePackageLicensesItems0Compliance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LicensePackageLicensesItems0Compliance) UnmarshalBinary(b []byte) error {
	var res LicensePackageLicensesItems0Compliance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// LicensePackageLinks license package links
//
// swagger:model LicensePackageLinks
type LicensePackageLinks struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this license package links
func (m *LicensePackageLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LicensePackageLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this license package links based on the context it is used
func (m *LicensePackageLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LicensePackageLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LicensePackageLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LicensePackageLinks) UnmarshalBinary(b []byte) error {
	var res LicensePackageLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
