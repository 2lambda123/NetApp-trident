// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PerformanceSvmNfsResponse performance svm nfs response
//
// swagger:model performance_svm_nfs_response
type PerformanceSvmNfsResponse struct {

	// links
	Links *PerformanceSvmNfsResponseLinks `json:"_links,omitempty"`

	// Number of records
	NumRecords int64 `json:"num_records,omitempty"`

	// records
	Records []*PerformanceSvmNfsResponseRecordsItems0 `json:"records,omitempty"`
}

// Validate validates this performance svm nfs response
func (m *PerformanceSvmNfsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecords(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformanceSvmNfsResponse) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceSvmNfsResponse) validateRecords(formats strfmt.Registry) error {
	if swag.IsZero(m.Records) { // not required
		return nil
	}

	for i := 0; i < len(m.Records); i++ {
		if swag.IsZero(m.Records[i]) { // not required
			continue
		}

		if m.Records[i] != nil {
			if err := m.Records[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("records" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this performance svm nfs response based on the context it is used
func (m *PerformanceSvmNfsResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecords(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformanceSvmNfsResponse) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceSvmNfsResponse) contextValidateRecords(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Records); i++ {

		if m.Records[i] != nil {
			if err := m.Records[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("records" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PerformanceSvmNfsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformanceSvmNfsResponse) UnmarshalBinary(b []byte) error {
	var res PerformanceSvmNfsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PerformanceSvmNfsResponseLinks performance svm nfs response links
//
// swagger:model PerformanceSvmNfsResponseLinks
type PerformanceSvmNfsResponseLinks struct {

	// next
	Next *Href `json:"next,omitempty"`

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this performance svm nfs response links
func (m *PerformanceSvmNfsResponseLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformanceSvmNfsResponseLinks) validateNext(formats strfmt.Registry) error {
	if swag.IsZero(m.Next) { // not required
		return nil
	}

	if m.Next != nil {
		if err := m.Next.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "next")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceSvmNfsResponseLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this performance svm nfs response links based on the context it is used
func (m *PerformanceSvmNfsResponseLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNext(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformanceSvmNfsResponseLinks) contextValidateNext(ctx context.Context, formats strfmt.Registry) error {

	if m.Next != nil {
		if err := m.Next.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "next")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceSvmNfsResponseLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PerformanceSvmNfsResponseLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformanceSvmNfsResponseLinks) UnmarshalBinary(b []byte) error {
	var res PerformanceSvmNfsResponseLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PerformanceSvmNfsResponseRecordsItems0 Historical performance numbers, such as IOPS latency and throughput, for SVM-NFS protocol.
//
// swagger:model PerformanceSvmNfsResponseRecordsItems0
type PerformanceSvmNfsResponseRecordsItems0 struct {

	// v3
	V3 *PerformanceSvmNfsResponseRecordsItems0V3 `json:"v3,omitempty"`

	// v4
	V4 *PerformanceSvmNfsResponseRecordsItems0V4 `json:"v4,omitempty"`

	// v41
	V41 *PerformanceSvmNfsResponseRecordsItems0V41 `json:"v41,omitempty"`
}

// Validate validates this performance svm nfs response records items0
func (m *PerformanceSvmNfsResponseRecordsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateV3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateV4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateV41(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0) validateV3(formats strfmt.Registry) error {
	if swag.IsZero(m.V3) { // not required
		return nil
	}

	if m.V3 != nil {
		if err := m.V3.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("v3")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0) validateV4(formats strfmt.Registry) error {
	if swag.IsZero(m.V4) { // not required
		return nil
	}

	if m.V4 != nil {
		if err := m.V4.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("v4")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0) validateV41(formats strfmt.Registry) error {
	if swag.IsZero(m.V41) { // not required
		return nil
	}

	if m.V41 != nil {
		if err := m.V41.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("v41")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this performance svm nfs response records items0 based on the context it is used
func (m *PerformanceSvmNfsResponseRecordsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateV3(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateV4(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateV41(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0) contextValidateV3(ctx context.Context, formats strfmt.Registry) error {

	if m.V3 != nil {
		if err := m.V3.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("v3")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0) contextValidateV4(ctx context.Context, formats strfmt.Registry) error {

	if m.V4 != nil {
		if err := m.V4.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("v4")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0) contextValidateV41(ctx context.Context, formats strfmt.Registry) error {

	if m.V41 != nil {
		if err := m.V41.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("v41")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PerformanceSvmNfsResponseRecordsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformanceSvmNfsResponseRecordsItems0) UnmarshalBinary(b []byte) error {
	var res PerformanceSvmNfsResponseRecordsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PerformanceSvmNfsResponseRecordsItems0V3 The NFSv3 operations
//
// swagger:model PerformanceSvmNfsResponseRecordsItems0V3
type PerformanceSvmNfsResponseRecordsItems0V3 struct {

	// links
	Links *PerformanceSvmNfsResponseRecordsItems0V3Links `json:"_links,omitempty"`

	// The duration over which this sample is calculated. The time durations are represented in the ISO-8601 standard format. Samples can be calculated over the following durations:
	//
	// Example: PT15S
	// Read Only: true
	// Enum: [PT15S PT4M PT30M PT2H P1D PT5M]
	Duration string `json:"duration,omitempty"`

	// iops
	Iops *PerformanceSvmNfsResponseRecordsItems0V3Iops `json:"iops,omitempty"`

	// latency
	Latency *PerformanceSvmNfsResponseRecordsItems0V3Latency `json:"latency,omitempty"`

	// Any errors associated with the sample. For example, if the aggregation of data over multiple nodes fails then any of the partial errors might be returned, "ok" on success, or "error" on any internal uncategorized failure. Whenever a sample collection is missed but done at a later time, it is back filled to the previous 15 second timestamp and tagged with "backfilled_data". "Inconsistent_ delta_time" is encountered when the time between two collections is not the same for all nodes. Therefore, the aggregated value might be over or under inflated. "Negative_delta" is returned when an expected monotonically increasing value has decreased in value. "Inconsistent_old_data" is returned when one or more nodes do not have the latest data.
	// Example: ok
	// Read Only: true
	// Enum: [ok error partial_no_data partial_no_response partial_other_error negative_delta not_found backfilled_data inconsistent_delta_time inconsistent_old_data partial_no_uuid]
	Status string `json:"status,omitempty"`

	// throughput
	Throughput *PerformanceSvmNfsResponseRecordsItems0V3Throughput `json:"throughput,omitempty"`

	// The timestamp of the performance data.
	// Example: 2017-01-25T11:20:13Z
	// Read Only: true
	// Format: date-time
	Timestamp *strfmt.DateTime `json:"timestamp,omitempty"`
}

// Validate validates this performance svm nfs response records items0 v3
func (m *PerformanceSvmNfsResponseRecordsItems0V3) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIops(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLatency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThroughput(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0V3) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("v3" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

var performanceSvmNfsResponseRecordsItems0V3TypeDurationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PT15S","PT4M","PT30M","PT2H","P1D","PT5M"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		performanceSvmNfsResponseRecordsItems0V3TypeDurationPropEnum = append(performanceSvmNfsResponseRecordsItems0V3TypeDurationPropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V3
	// PerformanceSvmNfsResponseRecordsItems0V3
	// duration
	// Duration
	// PT15S
	// END DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V3DurationPT15S captures enum value "PT15S"
	PerformanceSvmNfsResponseRecordsItems0V3DurationPT15S string = "PT15S"

	// BEGIN DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V3
	// PerformanceSvmNfsResponseRecordsItems0V3
	// duration
	// Duration
	// PT4M
	// END DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V3DurationPT4M captures enum value "PT4M"
	PerformanceSvmNfsResponseRecordsItems0V3DurationPT4M string = "PT4M"

	// BEGIN DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V3
	// PerformanceSvmNfsResponseRecordsItems0V3
	// duration
	// Duration
	// PT30M
	// END DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V3DurationPT30M captures enum value "PT30M"
	PerformanceSvmNfsResponseRecordsItems0V3DurationPT30M string = "PT30M"

	// BEGIN DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V3
	// PerformanceSvmNfsResponseRecordsItems0V3
	// duration
	// Duration
	// PT2H
	// END DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V3DurationPT2H captures enum value "PT2H"
	PerformanceSvmNfsResponseRecordsItems0V3DurationPT2H string = "PT2H"

	// BEGIN DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V3
	// PerformanceSvmNfsResponseRecordsItems0V3
	// duration
	// Duration
	// P1D
	// END DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V3DurationP1D captures enum value "P1D"
	PerformanceSvmNfsResponseRecordsItems0V3DurationP1D string = "P1D"

	// BEGIN DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V3
	// PerformanceSvmNfsResponseRecordsItems0V3
	// duration
	// Duration
	// PT5M
	// END DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V3DurationPT5M captures enum value "PT5M"
	PerformanceSvmNfsResponseRecordsItems0V3DurationPT5M string = "PT5M"
)

// prop value enum
func (m *PerformanceSvmNfsResponseRecordsItems0V3) validateDurationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, performanceSvmNfsResponseRecordsItems0V3TypeDurationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0V3) validateDuration(formats strfmt.Registry) error {
	if swag.IsZero(m.Duration) { // not required
		return nil
	}

	// value enum
	if err := m.validateDurationEnum("v3"+"."+"duration", "body", m.Duration); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0V3) validateIops(formats strfmt.Registry) error {
	if swag.IsZero(m.Iops) { // not required
		return nil
	}

	if m.Iops != nil {
		if err := m.Iops.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("v3" + "." + "iops")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0V3) validateLatency(formats strfmt.Registry) error {
	if swag.IsZero(m.Latency) { // not required
		return nil
	}

	if m.Latency != nil {
		if err := m.Latency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("v3" + "." + "latency")
			}
			return err
		}
	}

	return nil
}

var performanceSvmNfsResponseRecordsItems0V3TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ok","error","partial_no_data","partial_no_response","partial_other_error","negative_delta","not_found","backfilled_data","inconsistent_delta_time","inconsistent_old_data","partial_no_uuid"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		performanceSvmNfsResponseRecordsItems0V3TypeStatusPropEnum = append(performanceSvmNfsResponseRecordsItems0V3TypeStatusPropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V3
	// PerformanceSvmNfsResponseRecordsItems0V3
	// status
	// Status
	// ok
	// END DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V3StatusOk captures enum value "ok"
	PerformanceSvmNfsResponseRecordsItems0V3StatusOk string = "ok"

	// BEGIN DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V3
	// PerformanceSvmNfsResponseRecordsItems0V3
	// status
	// Status
	// error
	// END DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V3StatusError captures enum value "error"
	PerformanceSvmNfsResponseRecordsItems0V3StatusError string = "error"

	// BEGIN DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V3
	// PerformanceSvmNfsResponseRecordsItems0V3
	// status
	// Status
	// partial_no_data
	// END DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V3StatusPartialNoData captures enum value "partial_no_data"
	PerformanceSvmNfsResponseRecordsItems0V3StatusPartialNoData string = "partial_no_data"

	// BEGIN DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V3
	// PerformanceSvmNfsResponseRecordsItems0V3
	// status
	// Status
	// partial_no_response
	// END DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V3StatusPartialNoResponse captures enum value "partial_no_response"
	PerformanceSvmNfsResponseRecordsItems0V3StatusPartialNoResponse string = "partial_no_response"

	// BEGIN DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V3
	// PerformanceSvmNfsResponseRecordsItems0V3
	// status
	// Status
	// partial_other_error
	// END DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V3StatusPartialOtherError captures enum value "partial_other_error"
	PerformanceSvmNfsResponseRecordsItems0V3StatusPartialOtherError string = "partial_other_error"

	// BEGIN DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V3
	// PerformanceSvmNfsResponseRecordsItems0V3
	// status
	// Status
	// negative_delta
	// END DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V3StatusNegativeDelta captures enum value "negative_delta"
	PerformanceSvmNfsResponseRecordsItems0V3StatusNegativeDelta string = "negative_delta"

	// BEGIN DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V3
	// PerformanceSvmNfsResponseRecordsItems0V3
	// status
	// Status
	// not_found
	// END DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V3StatusNotFound captures enum value "not_found"
	PerformanceSvmNfsResponseRecordsItems0V3StatusNotFound string = "not_found"

	// BEGIN DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V3
	// PerformanceSvmNfsResponseRecordsItems0V3
	// status
	// Status
	// backfilled_data
	// END DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V3StatusBackfilledData captures enum value "backfilled_data"
	PerformanceSvmNfsResponseRecordsItems0V3StatusBackfilledData string = "backfilled_data"

	// BEGIN DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V3
	// PerformanceSvmNfsResponseRecordsItems0V3
	// status
	// Status
	// inconsistent_delta_time
	// END DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V3StatusInconsistentDeltaTime captures enum value "inconsistent_delta_time"
	PerformanceSvmNfsResponseRecordsItems0V3StatusInconsistentDeltaTime string = "inconsistent_delta_time"

	// BEGIN DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V3
	// PerformanceSvmNfsResponseRecordsItems0V3
	// status
	// Status
	// inconsistent_old_data
	// END DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V3StatusInconsistentOldData captures enum value "inconsistent_old_data"
	PerformanceSvmNfsResponseRecordsItems0V3StatusInconsistentOldData string = "inconsistent_old_data"

	// BEGIN DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V3
	// PerformanceSvmNfsResponseRecordsItems0V3
	// status
	// Status
	// partial_no_uuid
	// END DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V3StatusPartialNoUUID captures enum value "partial_no_uuid"
	PerformanceSvmNfsResponseRecordsItems0V3StatusPartialNoUUID string = "partial_no_uuid"
)

// prop value enum
func (m *PerformanceSvmNfsResponseRecordsItems0V3) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, performanceSvmNfsResponseRecordsItems0V3TypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0V3) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("v3"+"."+"status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0V3) validateThroughput(formats strfmt.Registry) error {
	if swag.IsZero(m.Throughput) { // not required
		return nil
	}

	if m.Throughput != nil {
		if err := m.Throughput.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("v3" + "." + "throughput")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0V3) validateTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("v3"+"."+"timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this performance svm nfs response records items0 v3 based on the context it is used
func (m *PerformanceSvmNfsResponseRecordsItems0V3) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDuration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIops(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLatency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateThroughput(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimestamp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0V3) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("v3" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0V3) contextValidateDuration(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "v3"+"."+"duration", "body", string(m.Duration)); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0V3) contextValidateIops(ctx context.Context, formats strfmt.Registry) error {

	if m.Iops != nil {
		if err := m.Iops.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("v3" + "." + "iops")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0V3) contextValidateLatency(ctx context.Context, formats strfmt.Registry) error {

	if m.Latency != nil {
		if err := m.Latency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("v3" + "." + "latency")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0V3) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "v3"+"."+"status", "body", string(m.Status)); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0V3) contextValidateThroughput(ctx context.Context, formats strfmt.Registry) error {

	if m.Throughput != nil {
		if err := m.Throughput.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("v3" + "." + "throughput")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0V3) contextValidateTimestamp(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "v3"+"."+"timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PerformanceSvmNfsResponseRecordsItems0V3) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformanceSvmNfsResponseRecordsItems0V3) UnmarshalBinary(b []byte) error {
	var res PerformanceSvmNfsResponseRecordsItems0V3
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PerformanceSvmNfsResponseRecordsItems0V3Iops The rate of I/O operations observed at the storage object.
//
// swagger:model PerformanceSvmNfsResponseRecordsItems0V3Iops
type PerformanceSvmNfsResponseRecordsItems0V3Iops struct {

	// Performance metric for other I/O operations. Other I/O operations can be metadata operations, such as directory lookups and so on.
	Other int64 `json:"other,omitempty"`

	// Performance metric for read I/O operations.
	// Example: 200
	Read int64 `json:"read,omitempty"`

	// Performance metric aggregated over all types of I/O operations.
	// Example: 1000
	Total int64 `json:"total,omitempty"`

	// Peformance metric for write I/O operations.
	// Example: 100
	Write int64 `json:"write,omitempty"`
}

// Validate validates this performance svm nfs response records items0 v3 iops
func (m *PerformanceSvmNfsResponseRecordsItems0V3Iops) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this performance svm nfs response records items0 v3 iops based on the context it is used
func (m *PerformanceSvmNfsResponseRecordsItems0V3Iops) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *PerformanceSvmNfsResponseRecordsItems0V3Iops) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformanceSvmNfsResponseRecordsItems0V3Iops) UnmarshalBinary(b []byte) error {
	var res PerformanceSvmNfsResponseRecordsItems0V3Iops
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PerformanceSvmNfsResponseRecordsItems0V3Latency The round trip latency in microseconds observed at the storage object.
//
// swagger:model PerformanceSvmNfsResponseRecordsItems0V3Latency
type PerformanceSvmNfsResponseRecordsItems0V3Latency struct {

	// Performance metric for other I/O operations. Other I/O operations can be metadata operations, such as directory lookups and so on.
	Other int64 `json:"other,omitempty"`

	// Performance metric for read I/O operations.
	// Example: 200
	Read int64 `json:"read,omitempty"`

	// Performance metric aggregated over all types of I/O operations.
	// Example: 1000
	Total int64 `json:"total,omitempty"`

	// Peformance metric for write I/O operations.
	// Example: 100
	Write int64 `json:"write,omitempty"`
}

// Validate validates this performance svm nfs response records items0 v3 latency
func (m *PerformanceSvmNfsResponseRecordsItems0V3Latency) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this performance svm nfs response records items0 v3 latency based on the context it is used
func (m *PerformanceSvmNfsResponseRecordsItems0V3Latency) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *PerformanceSvmNfsResponseRecordsItems0V3Latency) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformanceSvmNfsResponseRecordsItems0V3Latency) UnmarshalBinary(b []byte) error {
	var res PerformanceSvmNfsResponseRecordsItems0V3Latency
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PerformanceSvmNfsResponseRecordsItems0V3Links performance svm nfs response records items0 v3 links
//
// swagger:model PerformanceSvmNfsResponseRecordsItems0V3Links
type PerformanceSvmNfsResponseRecordsItems0V3Links struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this performance svm nfs response records items0 v3 links
func (m *PerformanceSvmNfsResponseRecordsItems0V3Links) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0V3Links) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("v3" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this performance svm nfs response records items0 v3 links based on the context it is used
func (m *PerformanceSvmNfsResponseRecordsItems0V3Links) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0V3Links) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("v3" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PerformanceSvmNfsResponseRecordsItems0V3Links) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformanceSvmNfsResponseRecordsItems0V3Links) UnmarshalBinary(b []byte) error {
	var res PerformanceSvmNfsResponseRecordsItems0V3Links
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PerformanceSvmNfsResponseRecordsItems0V3Throughput The rate of throughput bytes per second observed at the storage object.
//
// swagger:model PerformanceSvmNfsResponseRecordsItems0V3Throughput
type PerformanceSvmNfsResponseRecordsItems0V3Throughput struct {

	// Performance metric for read I/O operations.
	// Example: 200
	Read int64 `json:"read,omitempty"`

	// Performance metric aggregated over all types of I/O operations.
	// Example: 1000
	Total int64 `json:"total,omitempty"`

	// Peformance metric for write I/O operations.
	// Example: 100
	Write int64 `json:"write,omitempty"`
}

// Validate validates this performance svm nfs response records items0 v3 throughput
func (m *PerformanceSvmNfsResponseRecordsItems0V3Throughput) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this performance svm nfs response records items0 v3 throughput based on the context it is used
func (m *PerformanceSvmNfsResponseRecordsItems0V3Throughput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *PerformanceSvmNfsResponseRecordsItems0V3Throughput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformanceSvmNfsResponseRecordsItems0V3Throughput) UnmarshalBinary(b []byte) error {
	var res PerformanceSvmNfsResponseRecordsItems0V3Throughput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PerformanceSvmNfsResponseRecordsItems0V4 The NFSv4 operations
//
// swagger:model PerformanceSvmNfsResponseRecordsItems0V4
type PerformanceSvmNfsResponseRecordsItems0V4 struct {

	// links
	Links *PerformanceSvmNfsResponseRecordsItems0V4Links `json:"_links,omitempty"`

	// The duration over which this sample is calculated. The time durations are represented in the ISO-8601 standard format. Samples can be calculated over the following durations:
	//
	// Example: PT15S
	// Read Only: true
	// Enum: [PT15S PT4M PT30M PT2H P1D PT5M]
	Duration string `json:"duration,omitempty"`

	// iops
	Iops *PerformanceSvmNfsResponseRecordsItems0V4Iops `json:"iops,omitempty"`

	// latency
	Latency *PerformanceSvmNfsResponseRecordsItems0V4Latency `json:"latency,omitempty"`

	// Any errors associated with the sample. For example, if the aggregation of data over multiple nodes fails then any of the partial errors might be returned, "ok" on success, or "error" on any internal uncategorized failure. Whenever a sample collection is missed but done at a later time, it is back filled to the previous 15 second timestamp and tagged with "backfilled_data". "Inconsistent_ delta_time" is encountered when the time between two collections is not the same for all nodes. Therefore, the aggregated value might be over or under inflated. "Negative_delta" is returned when an expected monotonically increasing value has decreased in value. "Inconsistent_old_data" is returned when one or more nodes do not have the latest data.
	// Example: ok
	// Read Only: true
	// Enum: [ok error partial_no_data partial_no_response partial_other_error negative_delta not_found backfilled_data inconsistent_delta_time inconsistent_old_data partial_no_uuid]
	Status string `json:"status,omitempty"`

	// throughput
	Throughput *PerformanceSvmNfsResponseRecordsItems0V4Throughput `json:"throughput,omitempty"`

	// The timestamp of the performance data.
	// Example: 2017-01-25T11:20:13Z
	// Read Only: true
	// Format: date-time
	Timestamp *strfmt.DateTime `json:"timestamp,omitempty"`
}

// Validate validates this performance svm nfs response records items0 v4
func (m *PerformanceSvmNfsResponseRecordsItems0V4) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIops(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLatency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThroughput(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0V4) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("v4" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

var performanceSvmNfsResponseRecordsItems0V4TypeDurationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PT15S","PT4M","PT30M","PT2H","P1D","PT5M"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		performanceSvmNfsResponseRecordsItems0V4TypeDurationPropEnum = append(performanceSvmNfsResponseRecordsItems0V4TypeDurationPropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V4
	// PerformanceSvmNfsResponseRecordsItems0V4
	// duration
	// Duration
	// PT15S
	// END DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V4DurationPT15S captures enum value "PT15S"
	PerformanceSvmNfsResponseRecordsItems0V4DurationPT15S string = "PT15S"

	// BEGIN DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V4
	// PerformanceSvmNfsResponseRecordsItems0V4
	// duration
	// Duration
	// PT4M
	// END DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V4DurationPT4M captures enum value "PT4M"
	PerformanceSvmNfsResponseRecordsItems0V4DurationPT4M string = "PT4M"

	// BEGIN DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V4
	// PerformanceSvmNfsResponseRecordsItems0V4
	// duration
	// Duration
	// PT30M
	// END DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V4DurationPT30M captures enum value "PT30M"
	PerformanceSvmNfsResponseRecordsItems0V4DurationPT30M string = "PT30M"

	// BEGIN DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V4
	// PerformanceSvmNfsResponseRecordsItems0V4
	// duration
	// Duration
	// PT2H
	// END DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V4DurationPT2H captures enum value "PT2H"
	PerformanceSvmNfsResponseRecordsItems0V4DurationPT2H string = "PT2H"

	// BEGIN DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V4
	// PerformanceSvmNfsResponseRecordsItems0V4
	// duration
	// Duration
	// P1D
	// END DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V4DurationP1D captures enum value "P1D"
	PerformanceSvmNfsResponseRecordsItems0V4DurationP1D string = "P1D"

	// BEGIN DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V4
	// PerformanceSvmNfsResponseRecordsItems0V4
	// duration
	// Duration
	// PT5M
	// END DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V4DurationPT5M captures enum value "PT5M"
	PerformanceSvmNfsResponseRecordsItems0V4DurationPT5M string = "PT5M"
)

// prop value enum
func (m *PerformanceSvmNfsResponseRecordsItems0V4) validateDurationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, performanceSvmNfsResponseRecordsItems0V4TypeDurationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0V4) validateDuration(formats strfmt.Registry) error {
	if swag.IsZero(m.Duration) { // not required
		return nil
	}

	// value enum
	if err := m.validateDurationEnum("v4"+"."+"duration", "body", m.Duration); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0V4) validateIops(formats strfmt.Registry) error {
	if swag.IsZero(m.Iops) { // not required
		return nil
	}

	if m.Iops != nil {
		if err := m.Iops.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("v4" + "." + "iops")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0V4) validateLatency(formats strfmt.Registry) error {
	if swag.IsZero(m.Latency) { // not required
		return nil
	}

	if m.Latency != nil {
		if err := m.Latency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("v4" + "." + "latency")
			}
			return err
		}
	}

	return nil
}

var performanceSvmNfsResponseRecordsItems0V4TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ok","error","partial_no_data","partial_no_response","partial_other_error","negative_delta","not_found","backfilled_data","inconsistent_delta_time","inconsistent_old_data","partial_no_uuid"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		performanceSvmNfsResponseRecordsItems0V4TypeStatusPropEnum = append(performanceSvmNfsResponseRecordsItems0V4TypeStatusPropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V4
	// PerformanceSvmNfsResponseRecordsItems0V4
	// status
	// Status
	// ok
	// END DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V4StatusOk captures enum value "ok"
	PerformanceSvmNfsResponseRecordsItems0V4StatusOk string = "ok"

	// BEGIN DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V4
	// PerformanceSvmNfsResponseRecordsItems0V4
	// status
	// Status
	// error
	// END DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V4StatusError captures enum value "error"
	PerformanceSvmNfsResponseRecordsItems0V4StatusError string = "error"

	// BEGIN DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V4
	// PerformanceSvmNfsResponseRecordsItems0V4
	// status
	// Status
	// partial_no_data
	// END DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V4StatusPartialNoData captures enum value "partial_no_data"
	PerformanceSvmNfsResponseRecordsItems0V4StatusPartialNoData string = "partial_no_data"

	// BEGIN DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V4
	// PerformanceSvmNfsResponseRecordsItems0V4
	// status
	// Status
	// partial_no_response
	// END DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V4StatusPartialNoResponse captures enum value "partial_no_response"
	PerformanceSvmNfsResponseRecordsItems0V4StatusPartialNoResponse string = "partial_no_response"

	// BEGIN DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V4
	// PerformanceSvmNfsResponseRecordsItems0V4
	// status
	// Status
	// partial_other_error
	// END DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V4StatusPartialOtherError captures enum value "partial_other_error"
	PerformanceSvmNfsResponseRecordsItems0V4StatusPartialOtherError string = "partial_other_error"

	// BEGIN DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V4
	// PerformanceSvmNfsResponseRecordsItems0V4
	// status
	// Status
	// negative_delta
	// END DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V4StatusNegativeDelta captures enum value "negative_delta"
	PerformanceSvmNfsResponseRecordsItems0V4StatusNegativeDelta string = "negative_delta"

	// BEGIN DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V4
	// PerformanceSvmNfsResponseRecordsItems0V4
	// status
	// Status
	// not_found
	// END DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V4StatusNotFound captures enum value "not_found"
	PerformanceSvmNfsResponseRecordsItems0V4StatusNotFound string = "not_found"

	// BEGIN DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V4
	// PerformanceSvmNfsResponseRecordsItems0V4
	// status
	// Status
	// backfilled_data
	// END DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V4StatusBackfilledData captures enum value "backfilled_data"
	PerformanceSvmNfsResponseRecordsItems0V4StatusBackfilledData string = "backfilled_data"

	// BEGIN DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V4
	// PerformanceSvmNfsResponseRecordsItems0V4
	// status
	// Status
	// inconsistent_delta_time
	// END DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V4StatusInconsistentDeltaTime captures enum value "inconsistent_delta_time"
	PerformanceSvmNfsResponseRecordsItems0V4StatusInconsistentDeltaTime string = "inconsistent_delta_time"

	// BEGIN DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V4
	// PerformanceSvmNfsResponseRecordsItems0V4
	// status
	// Status
	// inconsistent_old_data
	// END DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V4StatusInconsistentOldData captures enum value "inconsistent_old_data"
	PerformanceSvmNfsResponseRecordsItems0V4StatusInconsistentOldData string = "inconsistent_old_data"

	// BEGIN DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V4
	// PerformanceSvmNfsResponseRecordsItems0V4
	// status
	// Status
	// partial_no_uuid
	// END DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V4StatusPartialNoUUID captures enum value "partial_no_uuid"
	PerformanceSvmNfsResponseRecordsItems0V4StatusPartialNoUUID string = "partial_no_uuid"
)

// prop value enum
func (m *PerformanceSvmNfsResponseRecordsItems0V4) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, performanceSvmNfsResponseRecordsItems0V4TypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0V4) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("v4"+"."+"status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0V4) validateThroughput(formats strfmt.Registry) error {
	if swag.IsZero(m.Throughput) { // not required
		return nil
	}

	if m.Throughput != nil {
		if err := m.Throughput.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("v4" + "." + "throughput")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0V4) validateTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("v4"+"."+"timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this performance svm nfs response records items0 v4 based on the context it is used
func (m *PerformanceSvmNfsResponseRecordsItems0V4) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDuration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIops(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLatency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateThroughput(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimestamp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0V4) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("v4" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0V4) contextValidateDuration(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "v4"+"."+"duration", "body", string(m.Duration)); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0V4) contextValidateIops(ctx context.Context, formats strfmt.Registry) error {

	if m.Iops != nil {
		if err := m.Iops.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("v4" + "." + "iops")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0V4) contextValidateLatency(ctx context.Context, formats strfmt.Registry) error {

	if m.Latency != nil {
		if err := m.Latency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("v4" + "." + "latency")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0V4) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "v4"+"."+"status", "body", string(m.Status)); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0V4) contextValidateThroughput(ctx context.Context, formats strfmt.Registry) error {

	if m.Throughput != nil {
		if err := m.Throughput.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("v4" + "." + "throughput")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0V4) contextValidateTimestamp(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "v4"+"."+"timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PerformanceSvmNfsResponseRecordsItems0V4) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformanceSvmNfsResponseRecordsItems0V4) UnmarshalBinary(b []byte) error {
	var res PerformanceSvmNfsResponseRecordsItems0V4
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PerformanceSvmNfsResponseRecordsItems0V41 The NFSv4.1 operations
//
// swagger:model PerformanceSvmNfsResponseRecordsItems0V41
type PerformanceSvmNfsResponseRecordsItems0V41 struct {

	// links
	Links *PerformanceSvmNfsResponseRecordsItems0V41Links `json:"_links,omitempty"`

	// The duration over which this sample is calculated. The time durations are represented in the ISO-8601 standard format. Samples can be calculated over the following durations:
	//
	// Example: PT15S
	// Read Only: true
	// Enum: [PT15S PT4M PT30M PT2H P1D PT5M]
	Duration string `json:"duration,omitempty"`

	// iops
	Iops *PerformanceSvmNfsResponseRecordsItems0V41Iops `json:"iops,omitempty"`

	// latency
	Latency *PerformanceSvmNfsResponseRecordsItems0V41Latency `json:"latency,omitempty"`

	// Any errors associated with the sample. For example, if the aggregation of data over multiple nodes fails then any of the partial errors might be returned, "ok" on success, or "error" on any internal uncategorized failure. Whenever a sample collection is missed but done at a later time, it is back filled to the previous 15 second timestamp and tagged with "backfilled_data". "Inconsistent_ delta_time" is encountered when the time between two collections is not the same for all nodes. Therefore, the aggregated value might be over or under inflated. "Negative_delta" is returned when an expected monotonically increasing value has decreased in value. "Inconsistent_old_data" is returned when one or more nodes do not have the latest data.
	// Example: ok
	// Read Only: true
	// Enum: [ok error partial_no_data partial_no_response partial_other_error negative_delta not_found backfilled_data inconsistent_delta_time inconsistent_old_data partial_no_uuid]
	Status string `json:"status,omitempty"`

	// throughput
	Throughput *PerformanceSvmNfsResponseRecordsItems0V41Throughput `json:"throughput,omitempty"`

	// The timestamp of the performance data.
	// Example: 2017-01-25T11:20:13Z
	// Read Only: true
	// Format: date-time
	Timestamp *strfmt.DateTime `json:"timestamp,omitempty"`
}

// Validate validates this performance svm nfs response records items0 v41
func (m *PerformanceSvmNfsResponseRecordsItems0V41) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIops(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLatency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThroughput(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0V41) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("v41" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

var performanceSvmNfsResponseRecordsItems0V41TypeDurationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PT15S","PT4M","PT30M","PT2H","P1D","PT5M"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		performanceSvmNfsResponseRecordsItems0V41TypeDurationPropEnum = append(performanceSvmNfsResponseRecordsItems0V41TypeDurationPropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V41
	// PerformanceSvmNfsResponseRecordsItems0V41
	// duration
	// Duration
	// PT15S
	// END DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V41DurationPT15S captures enum value "PT15S"
	PerformanceSvmNfsResponseRecordsItems0V41DurationPT15S string = "PT15S"

	// BEGIN DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V41
	// PerformanceSvmNfsResponseRecordsItems0V41
	// duration
	// Duration
	// PT4M
	// END DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V41DurationPT4M captures enum value "PT4M"
	PerformanceSvmNfsResponseRecordsItems0V41DurationPT4M string = "PT4M"

	// BEGIN DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V41
	// PerformanceSvmNfsResponseRecordsItems0V41
	// duration
	// Duration
	// PT30M
	// END DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V41DurationPT30M captures enum value "PT30M"
	PerformanceSvmNfsResponseRecordsItems0V41DurationPT30M string = "PT30M"

	// BEGIN DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V41
	// PerformanceSvmNfsResponseRecordsItems0V41
	// duration
	// Duration
	// PT2H
	// END DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V41DurationPT2H captures enum value "PT2H"
	PerformanceSvmNfsResponseRecordsItems0V41DurationPT2H string = "PT2H"

	// BEGIN DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V41
	// PerformanceSvmNfsResponseRecordsItems0V41
	// duration
	// Duration
	// P1D
	// END DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V41DurationP1D captures enum value "P1D"
	PerformanceSvmNfsResponseRecordsItems0V41DurationP1D string = "P1D"

	// BEGIN DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V41
	// PerformanceSvmNfsResponseRecordsItems0V41
	// duration
	// Duration
	// PT5M
	// END DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V41DurationPT5M captures enum value "PT5M"
	PerformanceSvmNfsResponseRecordsItems0V41DurationPT5M string = "PT5M"
)

// prop value enum
func (m *PerformanceSvmNfsResponseRecordsItems0V41) validateDurationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, performanceSvmNfsResponseRecordsItems0V41TypeDurationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0V41) validateDuration(formats strfmt.Registry) error {
	if swag.IsZero(m.Duration) { // not required
		return nil
	}

	// value enum
	if err := m.validateDurationEnum("v41"+"."+"duration", "body", m.Duration); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0V41) validateIops(formats strfmt.Registry) error {
	if swag.IsZero(m.Iops) { // not required
		return nil
	}

	if m.Iops != nil {
		if err := m.Iops.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("v41" + "." + "iops")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0V41) validateLatency(formats strfmt.Registry) error {
	if swag.IsZero(m.Latency) { // not required
		return nil
	}

	if m.Latency != nil {
		if err := m.Latency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("v41" + "." + "latency")
			}
			return err
		}
	}

	return nil
}

var performanceSvmNfsResponseRecordsItems0V41TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ok","error","partial_no_data","partial_no_response","partial_other_error","negative_delta","not_found","backfilled_data","inconsistent_delta_time","inconsistent_old_data","partial_no_uuid"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		performanceSvmNfsResponseRecordsItems0V41TypeStatusPropEnum = append(performanceSvmNfsResponseRecordsItems0V41TypeStatusPropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V41
	// PerformanceSvmNfsResponseRecordsItems0V41
	// status
	// Status
	// ok
	// END DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V41StatusOk captures enum value "ok"
	PerformanceSvmNfsResponseRecordsItems0V41StatusOk string = "ok"

	// BEGIN DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V41
	// PerformanceSvmNfsResponseRecordsItems0V41
	// status
	// Status
	// error
	// END DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V41StatusError captures enum value "error"
	PerformanceSvmNfsResponseRecordsItems0V41StatusError string = "error"

	// BEGIN DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V41
	// PerformanceSvmNfsResponseRecordsItems0V41
	// status
	// Status
	// partial_no_data
	// END DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V41StatusPartialNoData captures enum value "partial_no_data"
	PerformanceSvmNfsResponseRecordsItems0V41StatusPartialNoData string = "partial_no_data"

	// BEGIN DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V41
	// PerformanceSvmNfsResponseRecordsItems0V41
	// status
	// Status
	// partial_no_response
	// END DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V41StatusPartialNoResponse captures enum value "partial_no_response"
	PerformanceSvmNfsResponseRecordsItems0V41StatusPartialNoResponse string = "partial_no_response"

	// BEGIN DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V41
	// PerformanceSvmNfsResponseRecordsItems0V41
	// status
	// Status
	// partial_other_error
	// END DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V41StatusPartialOtherError captures enum value "partial_other_error"
	PerformanceSvmNfsResponseRecordsItems0V41StatusPartialOtherError string = "partial_other_error"

	// BEGIN DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V41
	// PerformanceSvmNfsResponseRecordsItems0V41
	// status
	// Status
	// negative_delta
	// END DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V41StatusNegativeDelta captures enum value "negative_delta"
	PerformanceSvmNfsResponseRecordsItems0V41StatusNegativeDelta string = "negative_delta"

	// BEGIN DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V41
	// PerformanceSvmNfsResponseRecordsItems0V41
	// status
	// Status
	// not_found
	// END DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V41StatusNotFound captures enum value "not_found"
	PerformanceSvmNfsResponseRecordsItems0V41StatusNotFound string = "not_found"

	// BEGIN DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V41
	// PerformanceSvmNfsResponseRecordsItems0V41
	// status
	// Status
	// backfilled_data
	// END DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V41StatusBackfilledData captures enum value "backfilled_data"
	PerformanceSvmNfsResponseRecordsItems0V41StatusBackfilledData string = "backfilled_data"

	// BEGIN DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V41
	// PerformanceSvmNfsResponseRecordsItems0V41
	// status
	// Status
	// inconsistent_delta_time
	// END DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V41StatusInconsistentDeltaTime captures enum value "inconsistent_delta_time"
	PerformanceSvmNfsResponseRecordsItems0V41StatusInconsistentDeltaTime string = "inconsistent_delta_time"

	// BEGIN DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V41
	// PerformanceSvmNfsResponseRecordsItems0V41
	// status
	// Status
	// inconsistent_old_data
	// END DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V41StatusInconsistentOldData captures enum value "inconsistent_old_data"
	PerformanceSvmNfsResponseRecordsItems0V41StatusInconsistentOldData string = "inconsistent_old_data"

	// BEGIN DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V41
	// PerformanceSvmNfsResponseRecordsItems0V41
	// status
	// Status
	// partial_no_uuid
	// END DEBUGGING
	// PerformanceSvmNfsResponseRecordsItems0V41StatusPartialNoUUID captures enum value "partial_no_uuid"
	PerformanceSvmNfsResponseRecordsItems0V41StatusPartialNoUUID string = "partial_no_uuid"
)

// prop value enum
func (m *PerformanceSvmNfsResponseRecordsItems0V41) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, performanceSvmNfsResponseRecordsItems0V41TypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0V41) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("v41"+"."+"status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0V41) validateThroughput(formats strfmt.Registry) error {
	if swag.IsZero(m.Throughput) { // not required
		return nil
	}

	if m.Throughput != nil {
		if err := m.Throughput.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("v41" + "." + "throughput")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0V41) validateTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("v41"+"."+"timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this performance svm nfs response records items0 v41 based on the context it is used
func (m *PerformanceSvmNfsResponseRecordsItems0V41) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDuration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIops(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLatency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateThroughput(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimestamp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0V41) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("v41" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0V41) contextValidateDuration(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "v41"+"."+"duration", "body", string(m.Duration)); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0V41) contextValidateIops(ctx context.Context, formats strfmt.Registry) error {

	if m.Iops != nil {
		if err := m.Iops.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("v41" + "." + "iops")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0V41) contextValidateLatency(ctx context.Context, formats strfmt.Registry) error {

	if m.Latency != nil {
		if err := m.Latency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("v41" + "." + "latency")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0V41) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "v41"+"."+"status", "body", string(m.Status)); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0V41) contextValidateThroughput(ctx context.Context, formats strfmt.Registry) error {

	if m.Throughput != nil {
		if err := m.Throughput.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("v41" + "." + "throughput")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0V41) contextValidateTimestamp(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "v41"+"."+"timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PerformanceSvmNfsResponseRecordsItems0V41) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformanceSvmNfsResponseRecordsItems0V41) UnmarshalBinary(b []byte) error {
	var res PerformanceSvmNfsResponseRecordsItems0V41
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PerformanceSvmNfsResponseRecordsItems0V41Iops The rate of I/O operations observed at the storage object.
//
// swagger:model PerformanceSvmNfsResponseRecordsItems0V41Iops
type PerformanceSvmNfsResponseRecordsItems0V41Iops struct {

	// Performance metric for other I/O operations. Other I/O operations can be metadata operations, such as directory lookups and so on.
	Other int64 `json:"other,omitempty"`

	// Performance metric for read I/O operations.
	// Example: 200
	Read int64 `json:"read,omitempty"`

	// Performance metric aggregated over all types of I/O operations.
	// Example: 1000
	Total int64 `json:"total,omitempty"`

	// Peformance metric for write I/O operations.
	// Example: 100
	Write int64 `json:"write,omitempty"`
}

// Validate validates this performance svm nfs response records items0 v41 iops
func (m *PerformanceSvmNfsResponseRecordsItems0V41Iops) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this performance svm nfs response records items0 v41 iops based on the context it is used
func (m *PerformanceSvmNfsResponseRecordsItems0V41Iops) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *PerformanceSvmNfsResponseRecordsItems0V41Iops) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformanceSvmNfsResponseRecordsItems0V41Iops) UnmarshalBinary(b []byte) error {
	var res PerformanceSvmNfsResponseRecordsItems0V41Iops
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PerformanceSvmNfsResponseRecordsItems0V41Latency The round trip latency in microseconds observed at the storage object.
//
// swagger:model PerformanceSvmNfsResponseRecordsItems0V41Latency
type PerformanceSvmNfsResponseRecordsItems0V41Latency struct {

	// Performance metric for other I/O operations. Other I/O operations can be metadata operations, such as directory lookups and so on.
	Other int64 `json:"other,omitempty"`

	// Performance metric for read I/O operations.
	// Example: 200
	Read int64 `json:"read,omitempty"`

	// Performance metric aggregated over all types of I/O operations.
	// Example: 1000
	Total int64 `json:"total,omitempty"`

	// Peformance metric for write I/O operations.
	// Example: 100
	Write int64 `json:"write,omitempty"`
}

// Validate validates this performance svm nfs response records items0 v41 latency
func (m *PerformanceSvmNfsResponseRecordsItems0V41Latency) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this performance svm nfs response records items0 v41 latency based on the context it is used
func (m *PerformanceSvmNfsResponseRecordsItems0V41Latency) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *PerformanceSvmNfsResponseRecordsItems0V41Latency) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformanceSvmNfsResponseRecordsItems0V41Latency) UnmarshalBinary(b []byte) error {
	var res PerformanceSvmNfsResponseRecordsItems0V41Latency
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PerformanceSvmNfsResponseRecordsItems0V41Links performance svm nfs response records items0 v41 links
//
// swagger:model PerformanceSvmNfsResponseRecordsItems0V41Links
type PerformanceSvmNfsResponseRecordsItems0V41Links struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this performance svm nfs response records items0 v41 links
func (m *PerformanceSvmNfsResponseRecordsItems0V41Links) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0V41Links) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("v41" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this performance svm nfs response records items0 v41 links based on the context it is used
func (m *PerformanceSvmNfsResponseRecordsItems0V41Links) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0V41Links) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("v41" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PerformanceSvmNfsResponseRecordsItems0V41Links) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformanceSvmNfsResponseRecordsItems0V41Links) UnmarshalBinary(b []byte) error {
	var res PerformanceSvmNfsResponseRecordsItems0V41Links
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PerformanceSvmNfsResponseRecordsItems0V41Throughput The rate of throughput bytes per second observed at the storage object.
//
// swagger:model PerformanceSvmNfsResponseRecordsItems0V41Throughput
type PerformanceSvmNfsResponseRecordsItems0V41Throughput struct {

	// Performance metric for read I/O operations.
	// Example: 200
	Read int64 `json:"read,omitempty"`

	// Performance metric aggregated over all types of I/O operations.
	// Example: 1000
	Total int64 `json:"total,omitempty"`

	// Peformance metric for write I/O operations.
	// Example: 100
	Write int64 `json:"write,omitempty"`
}

// Validate validates this performance svm nfs response records items0 v41 throughput
func (m *PerformanceSvmNfsResponseRecordsItems0V41Throughput) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this performance svm nfs response records items0 v41 throughput based on the context it is used
func (m *PerformanceSvmNfsResponseRecordsItems0V41Throughput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *PerformanceSvmNfsResponseRecordsItems0V41Throughput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformanceSvmNfsResponseRecordsItems0V41Throughput) UnmarshalBinary(b []byte) error {
	var res PerformanceSvmNfsResponseRecordsItems0V41Throughput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PerformanceSvmNfsResponseRecordsItems0V4Iops The rate of I/O operations observed at the storage object.
//
// swagger:model PerformanceSvmNfsResponseRecordsItems0V4Iops
type PerformanceSvmNfsResponseRecordsItems0V4Iops struct {

	// Performance metric for other I/O operations. Other I/O operations can be metadata operations, such as directory lookups and so on.
	Other int64 `json:"other,omitempty"`

	// Performance metric for read I/O operations.
	// Example: 200
	Read int64 `json:"read,omitempty"`

	// Performance metric aggregated over all types of I/O operations.
	// Example: 1000
	Total int64 `json:"total,omitempty"`

	// Peformance metric for write I/O operations.
	// Example: 100
	Write int64 `json:"write,omitempty"`
}

// Validate validates this performance svm nfs response records items0 v4 iops
func (m *PerformanceSvmNfsResponseRecordsItems0V4Iops) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this performance svm nfs response records items0 v4 iops based on the context it is used
func (m *PerformanceSvmNfsResponseRecordsItems0V4Iops) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *PerformanceSvmNfsResponseRecordsItems0V4Iops) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformanceSvmNfsResponseRecordsItems0V4Iops) UnmarshalBinary(b []byte) error {
	var res PerformanceSvmNfsResponseRecordsItems0V4Iops
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PerformanceSvmNfsResponseRecordsItems0V4Latency The round trip latency in microseconds observed at the storage object.
//
// swagger:model PerformanceSvmNfsResponseRecordsItems0V4Latency
type PerformanceSvmNfsResponseRecordsItems0V4Latency struct {

	// Performance metric for other I/O operations. Other I/O operations can be metadata operations, such as directory lookups and so on.
	Other int64 `json:"other,omitempty"`

	// Performance metric for read I/O operations.
	// Example: 200
	Read int64 `json:"read,omitempty"`

	// Performance metric aggregated over all types of I/O operations.
	// Example: 1000
	Total int64 `json:"total,omitempty"`

	// Peformance metric for write I/O operations.
	// Example: 100
	Write int64 `json:"write,omitempty"`
}

// Validate validates this performance svm nfs response records items0 v4 latency
func (m *PerformanceSvmNfsResponseRecordsItems0V4Latency) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this performance svm nfs response records items0 v4 latency based on the context it is used
func (m *PerformanceSvmNfsResponseRecordsItems0V4Latency) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *PerformanceSvmNfsResponseRecordsItems0V4Latency) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformanceSvmNfsResponseRecordsItems0V4Latency) UnmarshalBinary(b []byte) error {
	var res PerformanceSvmNfsResponseRecordsItems0V4Latency
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PerformanceSvmNfsResponseRecordsItems0V4Links performance svm nfs response records items0 v4 links
//
// swagger:model PerformanceSvmNfsResponseRecordsItems0V4Links
type PerformanceSvmNfsResponseRecordsItems0V4Links struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this performance svm nfs response records items0 v4 links
func (m *PerformanceSvmNfsResponseRecordsItems0V4Links) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0V4Links) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("v4" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this performance svm nfs response records items0 v4 links based on the context it is used
func (m *PerformanceSvmNfsResponseRecordsItems0V4Links) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformanceSvmNfsResponseRecordsItems0V4Links) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("v4" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PerformanceSvmNfsResponseRecordsItems0V4Links) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformanceSvmNfsResponseRecordsItems0V4Links) UnmarshalBinary(b []byte) error {
	var res PerformanceSvmNfsResponseRecordsItems0V4Links
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PerformanceSvmNfsResponseRecordsItems0V4Throughput The rate of throughput bytes per second observed at the storage object.
//
// swagger:model PerformanceSvmNfsResponseRecordsItems0V4Throughput
type PerformanceSvmNfsResponseRecordsItems0V4Throughput struct {

	// Performance metric for read I/O operations.
	// Example: 200
	Read int64 `json:"read,omitempty"`

	// Performance metric aggregated over all types of I/O operations.
	// Example: 1000
	Total int64 `json:"total,omitempty"`

	// Peformance metric for write I/O operations.
	// Example: 100
	Write int64 `json:"write,omitempty"`
}

// Validate validates this performance svm nfs response records items0 v4 throughput
func (m *PerformanceSvmNfsResponseRecordsItems0V4Throughput) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this performance svm nfs response records items0 v4 throughput based on the context it is used
func (m *PerformanceSvmNfsResponseRecordsItems0V4Throughput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *PerformanceSvmNfsResponseRecordsItems0V4Throughput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformanceSvmNfsResponseRecordsItems0V4Throughput) UnmarshalBinary(b []byte) error {
	var res PerformanceSvmNfsResponseRecordsItems0V4Throughput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
