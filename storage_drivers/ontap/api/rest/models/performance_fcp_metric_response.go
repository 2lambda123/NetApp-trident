// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PerformanceFcpMetricResponse performance fcp metric response
//
// swagger:model performance_fcp_metric_response
type PerformanceFcpMetricResponse struct {

	// links
	Links *PerformanceFcpMetricResponseLinks `json:"_links,omitempty"`

	// Number of records
	NumRecords int64 `json:"num_records,omitempty"`

	// records
	Records []*PerformanceFcpMetricResponseRecordsItems0 `json:"records,omitempty"`
}

// Validate validates this performance fcp metric response
func (m *PerformanceFcpMetricResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecords(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformanceFcpMetricResponse) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceFcpMetricResponse) validateRecords(formats strfmt.Registry) error {
	if swag.IsZero(m.Records) { // not required
		return nil
	}

	for i := 0; i < len(m.Records); i++ {
		if swag.IsZero(m.Records[i]) { // not required
			continue
		}

		if m.Records[i] != nil {
			if err := m.Records[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("records" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this performance fcp metric response based on the context it is used
func (m *PerformanceFcpMetricResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecords(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformanceFcpMetricResponse) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceFcpMetricResponse) contextValidateRecords(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Records); i++ {

		if m.Records[i] != nil {
			if err := m.Records[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("records" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PerformanceFcpMetricResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformanceFcpMetricResponse) UnmarshalBinary(b []byte) error {
	var res PerformanceFcpMetricResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PerformanceFcpMetricResponseLinks performance fcp metric response links
//
// swagger:model PerformanceFcpMetricResponseLinks
type PerformanceFcpMetricResponseLinks struct {

	// next
	Next *Href `json:"next,omitempty"`

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this performance fcp metric response links
func (m *PerformanceFcpMetricResponseLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformanceFcpMetricResponseLinks) validateNext(formats strfmt.Registry) error {
	if swag.IsZero(m.Next) { // not required
		return nil
	}

	if m.Next != nil {
		if err := m.Next.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "next")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceFcpMetricResponseLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this performance fcp metric response links based on the context it is used
func (m *PerformanceFcpMetricResponseLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNext(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformanceFcpMetricResponseLinks) contextValidateNext(ctx context.Context, formats strfmt.Registry) error {

	if m.Next != nil {
		if err := m.Next.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "next")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceFcpMetricResponseLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PerformanceFcpMetricResponseLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformanceFcpMetricResponseLinks) UnmarshalBinary(b []byte) error {
	var res PerformanceFcpMetricResponseLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PerformanceFcpMetricResponseRecordsItems0 Performance numbers, such as IOPS latency and throughput, for SVM protocols.
//
// swagger:model PerformanceFcpMetricResponseRecordsItems0
type PerformanceFcpMetricResponseRecordsItems0 struct {

	// links
	Links *PerformanceFcpMetricResponseRecordsItems0Links `json:"_links,omitempty"`

	// The duration over which this sample is calculated. The time durations are represented in the ISO-8601 standard format. Samples can be calculated over the following durations:
	//
	// Example: PT15S
	// Read Only: true
	// Enum: [PT15S PT4M PT30M PT2H P1D PT5M]
	Duration string `json:"duration,omitempty"`

	// iops
	Iops *PerformanceFcpMetricResponseRecordsItems0Iops `json:"iops,omitempty"`

	// latency
	Latency *PerformanceFcpMetricResponseRecordsItems0Latency `json:"latency,omitempty"`

	// Any errors associated with the sample. For example, if the aggregation of data over multiple nodes fails then any of the partial errors might be returned, "ok" on success, or "error" on any internal uncategorized failure. Whenever a sample collection is missed but done at a later time, it is back filled to the previous 15 second timestamp and tagged with "backfilled_data". "Inconsistent_ delta_time" is encountered when the time between two collections is not the same for all nodes. Therefore, the aggregated value might be over or under inflated. "Negative_delta" is returned when an expected monotonically increasing value has decreased in value. "Inconsistent_old_data" is returned when one or more nodes do not have the latest data.
	// Example: ok
	// Read Only: true
	// Enum: [ok error partial_no_data partial_no_response partial_other_error negative_delta not_found backfilled_data inconsistent_delta_time inconsistent_old_data partial_no_uuid]
	Status string `json:"status,omitempty"`

	// svm
	Svm *PerformanceFcpMetricResponseRecordsItems0Svm `json:"svm,omitempty"`

	// throughput
	Throughput *PerformanceFcpMetricResponseRecordsItems0Throughput `json:"throughput,omitempty"`

	// The timestamp of the performance data.
	// Example: 2017-01-25T11:20:13Z
	// Read Only: true
	// Format: date-time
	Timestamp *strfmt.DateTime `json:"timestamp,omitempty"`
}

// Validate validates this performance fcp metric response records items0
func (m *PerformanceFcpMetricResponseRecordsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIops(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLatency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThroughput(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformanceFcpMetricResponseRecordsItems0) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

var performanceFcpMetricResponseRecordsItems0TypeDurationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PT15S","PT4M","PT30M","PT2H","P1D","PT5M"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		performanceFcpMetricResponseRecordsItems0TypeDurationPropEnum = append(performanceFcpMetricResponseRecordsItems0TypeDurationPropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// PerformanceFcpMetricResponseRecordsItems0
	// PerformanceFcpMetricResponseRecordsItems0
	// duration
	// Duration
	// PT15S
	// END DEBUGGING
	// PerformanceFcpMetricResponseRecordsItems0DurationPT15S captures enum value "PT15S"
	PerformanceFcpMetricResponseRecordsItems0DurationPT15S string = "PT15S"

	// BEGIN DEBUGGING
	// PerformanceFcpMetricResponseRecordsItems0
	// PerformanceFcpMetricResponseRecordsItems0
	// duration
	// Duration
	// PT4M
	// END DEBUGGING
	// PerformanceFcpMetricResponseRecordsItems0DurationPT4M captures enum value "PT4M"
	PerformanceFcpMetricResponseRecordsItems0DurationPT4M string = "PT4M"

	// BEGIN DEBUGGING
	// PerformanceFcpMetricResponseRecordsItems0
	// PerformanceFcpMetricResponseRecordsItems0
	// duration
	// Duration
	// PT30M
	// END DEBUGGING
	// PerformanceFcpMetricResponseRecordsItems0DurationPT30M captures enum value "PT30M"
	PerformanceFcpMetricResponseRecordsItems0DurationPT30M string = "PT30M"

	// BEGIN DEBUGGING
	// PerformanceFcpMetricResponseRecordsItems0
	// PerformanceFcpMetricResponseRecordsItems0
	// duration
	// Duration
	// PT2H
	// END DEBUGGING
	// PerformanceFcpMetricResponseRecordsItems0DurationPT2H captures enum value "PT2H"
	PerformanceFcpMetricResponseRecordsItems0DurationPT2H string = "PT2H"

	// BEGIN DEBUGGING
	// PerformanceFcpMetricResponseRecordsItems0
	// PerformanceFcpMetricResponseRecordsItems0
	// duration
	// Duration
	// P1D
	// END DEBUGGING
	// PerformanceFcpMetricResponseRecordsItems0DurationP1D captures enum value "P1D"
	PerformanceFcpMetricResponseRecordsItems0DurationP1D string = "P1D"

	// BEGIN DEBUGGING
	// PerformanceFcpMetricResponseRecordsItems0
	// PerformanceFcpMetricResponseRecordsItems0
	// duration
	// Duration
	// PT5M
	// END DEBUGGING
	// PerformanceFcpMetricResponseRecordsItems0DurationPT5M captures enum value "PT5M"
	PerformanceFcpMetricResponseRecordsItems0DurationPT5M string = "PT5M"
)

// prop value enum
func (m *PerformanceFcpMetricResponseRecordsItems0) validateDurationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, performanceFcpMetricResponseRecordsItems0TypeDurationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PerformanceFcpMetricResponseRecordsItems0) validateDuration(formats strfmt.Registry) error {
	if swag.IsZero(m.Duration) { // not required
		return nil
	}

	// value enum
	if err := m.validateDurationEnum("duration", "body", m.Duration); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceFcpMetricResponseRecordsItems0) validateIops(formats strfmt.Registry) error {
	if swag.IsZero(m.Iops) { // not required
		return nil
	}

	if m.Iops != nil {
		if err := m.Iops.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iops")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceFcpMetricResponseRecordsItems0) validateLatency(formats strfmt.Registry) error {
	if swag.IsZero(m.Latency) { // not required
		return nil
	}

	if m.Latency != nil {
		if err := m.Latency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("latency")
			}
			return err
		}
	}

	return nil
}

var performanceFcpMetricResponseRecordsItems0TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ok","error","partial_no_data","partial_no_response","partial_other_error","negative_delta","not_found","backfilled_data","inconsistent_delta_time","inconsistent_old_data","partial_no_uuid"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		performanceFcpMetricResponseRecordsItems0TypeStatusPropEnum = append(performanceFcpMetricResponseRecordsItems0TypeStatusPropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// PerformanceFcpMetricResponseRecordsItems0
	// PerformanceFcpMetricResponseRecordsItems0
	// status
	// Status
	// ok
	// END DEBUGGING
	// PerformanceFcpMetricResponseRecordsItems0StatusOk captures enum value "ok"
	PerformanceFcpMetricResponseRecordsItems0StatusOk string = "ok"

	// BEGIN DEBUGGING
	// PerformanceFcpMetricResponseRecordsItems0
	// PerformanceFcpMetricResponseRecordsItems0
	// status
	// Status
	// error
	// END DEBUGGING
	// PerformanceFcpMetricResponseRecordsItems0StatusError captures enum value "error"
	PerformanceFcpMetricResponseRecordsItems0StatusError string = "error"

	// BEGIN DEBUGGING
	// PerformanceFcpMetricResponseRecordsItems0
	// PerformanceFcpMetricResponseRecordsItems0
	// status
	// Status
	// partial_no_data
	// END DEBUGGING
	// PerformanceFcpMetricResponseRecordsItems0StatusPartialNoData captures enum value "partial_no_data"
	PerformanceFcpMetricResponseRecordsItems0StatusPartialNoData string = "partial_no_data"

	// BEGIN DEBUGGING
	// PerformanceFcpMetricResponseRecordsItems0
	// PerformanceFcpMetricResponseRecordsItems0
	// status
	// Status
	// partial_no_response
	// END DEBUGGING
	// PerformanceFcpMetricResponseRecordsItems0StatusPartialNoResponse captures enum value "partial_no_response"
	PerformanceFcpMetricResponseRecordsItems0StatusPartialNoResponse string = "partial_no_response"

	// BEGIN DEBUGGING
	// PerformanceFcpMetricResponseRecordsItems0
	// PerformanceFcpMetricResponseRecordsItems0
	// status
	// Status
	// partial_other_error
	// END DEBUGGING
	// PerformanceFcpMetricResponseRecordsItems0StatusPartialOtherError captures enum value "partial_other_error"
	PerformanceFcpMetricResponseRecordsItems0StatusPartialOtherError string = "partial_other_error"

	// BEGIN DEBUGGING
	// PerformanceFcpMetricResponseRecordsItems0
	// PerformanceFcpMetricResponseRecordsItems0
	// status
	// Status
	// negative_delta
	// END DEBUGGING
	// PerformanceFcpMetricResponseRecordsItems0StatusNegativeDelta captures enum value "negative_delta"
	PerformanceFcpMetricResponseRecordsItems0StatusNegativeDelta string = "negative_delta"

	// BEGIN DEBUGGING
	// PerformanceFcpMetricResponseRecordsItems0
	// PerformanceFcpMetricResponseRecordsItems0
	// status
	// Status
	// not_found
	// END DEBUGGING
	// PerformanceFcpMetricResponseRecordsItems0StatusNotFound captures enum value "not_found"
	PerformanceFcpMetricResponseRecordsItems0StatusNotFound string = "not_found"

	// BEGIN DEBUGGING
	// PerformanceFcpMetricResponseRecordsItems0
	// PerformanceFcpMetricResponseRecordsItems0
	// status
	// Status
	// backfilled_data
	// END DEBUGGING
	// PerformanceFcpMetricResponseRecordsItems0StatusBackfilledData captures enum value "backfilled_data"
	PerformanceFcpMetricResponseRecordsItems0StatusBackfilledData string = "backfilled_data"

	// BEGIN DEBUGGING
	// PerformanceFcpMetricResponseRecordsItems0
	// PerformanceFcpMetricResponseRecordsItems0
	// status
	// Status
	// inconsistent_delta_time
	// END DEBUGGING
	// PerformanceFcpMetricResponseRecordsItems0StatusInconsistentDeltaTime captures enum value "inconsistent_delta_time"
	PerformanceFcpMetricResponseRecordsItems0StatusInconsistentDeltaTime string = "inconsistent_delta_time"

	// BEGIN DEBUGGING
	// PerformanceFcpMetricResponseRecordsItems0
	// PerformanceFcpMetricResponseRecordsItems0
	// status
	// Status
	// inconsistent_old_data
	// END DEBUGGING
	// PerformanceFcpMetricResponseRecordsItems0StatusInconsistentOldData captures enum value "inconsistent_old_data"
	PerformanceFcpMetricResponseRecordsItems0StatusInconsistentOldData string = "inconsistent_old_data"

	// BEGIN DEBUGGING
	// PerformanceFcpMetricResponseRecordsItems0
	// PerformanceFcpMetricResponseRecordsItems0
	// status
	// Status
	// partial_no_uuid
	// END DEBUGGING
	// PerformanceFcpMetricResponseRecordsItems0StatusPartialNoUUID captures enum value "partial_no_uuid"
	PerformanceFcpMetricResponseRecordsItems0StatusPartialNoUUID string = "partial_no_uuid"
)

// prop value enum
func (m *PerformanceFcpMetricResponseRecordsItems0) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, performanceFcpMetricResponseRecordsItems0TypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PerformanceFcpMetricResponseRecordsItems0) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceFcpMetricResponseRecordsItems0) validateSvm(formats strfmt.Registry) error {
	if swag.IsZero(m.Svm) { // not required
		return nil
	}

	if m.Svm != nil {
		if err := m.Svm.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svm")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceFcpMetricResponseRecordsItems0) validateThroughput(formats strfmt.Registry) error {
	if swag.IsZero(m.Throughput) { // not required
		return nil
	}

	if m.Throughput != nil {
		if err := m.Throughput.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("throughput")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceFcpMetricResponseRecordsItems0) validateTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this performance fcp metric response records items0 based on the context it is used
func (m *PerformanceFcpMetricResponseRecordsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDuration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIops(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLatency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSvm(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateThroughput(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimestamp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformanceFcpMetricResponseRecordsItems0) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceFcpMetricResponseRecordsItems0) contextValidateDuration(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "duration", "body", string(m.Duration)); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceFcpMetricResponseRecordsItems0) contextValidateIops(ctx context.Context, formats strfmt.Registry) error {

	if m.Iops != nil {
		if err := m.Iops.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iops")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceFcpMetricResponseRecordsItems0) contextValidateLatency(ctx context.Context, formats strfmt.Registry) error {

	if m.Latency != nil {
		if err := m.Latency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("latency")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceFcpMetricResponseRecordsItems0) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "status", "body", string(m.Status)); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceFcpMetricResponseRecordsItems0) contextValidateSvm(ctx context.Context, formats strfmt.Registry) error {

	if m.Svm != nil {
		if err := m.Svm.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svm")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceFcpMetricResponseRecordsItems0) contextValidateThroughput(ctx context.Context, formats strfmt.Registry) error {

	if m.Throughput != nil {
		if err := m.Throughput.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("throughput")
			}
			return err
		}
	}

	return nil
}

func (m *PerformanceFcpMetricResponseRecordsItems0) contextValidateTimestamp(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PerformanceFcpMetricResponseRecordsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformanceFcpMetricResponseRecordsItems0) UnmarshalBinary(b []byte) error {
	var res PerformanceFcpMetricResponseRecordsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PerformanceFcpMetricResponseRecordsItems0Iops The rate of I/O operations observed at the storage object.
//
// swagger:model PerformanceFcpMetricResponseRecordsItems0Iops
type PerformanceFcpMetricResponseRecordsItems0Iops struct {

	// Performance metric for other I/O operations. Other I/O operations can be metadata operations, such as directory lookups and so on.
	Other int64 `json:"other,omitempty"`

	// Performance metric for read I/O operations.
	// Example: 200
	Read int64 `json:"read,omitempty"`

	// Performance metric aggregated over all types of I/O operations.
	// Example: 1000
	Total int64 `json:"total,omitempty"`

	// Peformance metric for write I/O operations.
	// Example: 100
	Write int64 `json:"write,omitempty"`
}

// Validate validates this performance fcp metric response records items0 iops
func (m *PerformanceFcpMetricResponseRecordsItems0Iops) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this performance fcp metric response records items0 iops based on the context it is used
func (m *PerformanceFcpMetricResponseRecordsItems0Iops) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *PerformanceFcpMetricResponseRecordsItems0Iops) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformanceFcpMetricResponseRecordsItems0Iops) UnmarshalBinary(b []byte) error {
	var res PerformanceFcpMetricResponseRecordsItems0Iops
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PerformanceFcpMetricResponseRecordsItems0Latency The round trip latency in microseconds observed at the storage object.
//
// swagger:model PerformanceFcpMetricResponseRecordsItems0Latency
type PerformanceFcpMetricResponseRecordsItems0Latency struct {

	// Performance metric for other I/O operations. Other I/O operations can be metadata operations, such as directory lookups and so on.
	Other int64 `json:"other,omitempty"`

	// Performance metric for read I/O operations.
	// Example: 200
	Read int64 `json:"read,omitempty"`

	// Performance metric aggregated over all types of I/O operations.
	// Example: 1000
	Total int64 `json:"total,omitempty"`

	// Peformance metric for write I/O operations.
	// Example: 100
	Write int64 `json:"write,omitempty"`
}

// Validate validates this performance fcp metric response records items0 latency
func (m *PerformanceFcpMetricResponseRecordsItems0Latency) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this performance fcp metric response records items0 latency based on the context it is used
func (m *PerformanceFcpMetricResponseRecordsItems0Latency) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *PerformanceFcpMetricResponseRecordsItems0Latency) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformanceFcpMetricResponseRecordsItems0Latency) UnmarshalBinary(b []byte) error {
	var res PerformanceFcpMetricResponseRecordsItems0Latency
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PerformanceFcpMetricResponseRecordsItems0Links performance fcp metric response records items0 links
//
// swagger:model PerformanceFcpMetricResponseRecordsItems0Links
type PerformanceFcpMetricResponseRecordsItems0Links struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this performance fcp metric response records items0 links
func (m *PerformanceFcpMetricResponseRecordsItems0Links) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformanceFcpMetricResponseRecordsItems0Links) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this performance fcp metric response records items0 links based on the context it is used
func (m *PerformanceFcpMetricResponseRecordsItems0Links) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformanceFcpMetricResponseRecordsItems0Links) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PerformanceFcpMetricResponseRecordsItems0Links) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformanceFcpMetricResponseRecordsItems0Links) UnmarshalBinary(b []byte) error {
	var res PerformanceFcpMetricResponseRecordsItems0Links
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PerformanceFcpMetricResponseRecordsItems0Svm performance fcp metric response records items0 svm
//
// swagger:model PerformanceFcpMetricResponseRecordsItems0Svm
type PerformanceFcpMetricResponseRecordsItems0Svm struct {

	// The unique identifier of the SVM.
	//
	// Example: 02c9e252-41be-11e9-81d5-00a0986138f7
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this performance fcp metric response records items0 svm
func (m *PerformanceFcpMetricResponseRecordsItems0Svm) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this performance fcp metric response records items0 svm based on context it is used
func (m *PerformanceFcpMetricResponseRecordsItems0Svm) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PerformanceFcpMetricResponseRecordsItems0Svm) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformanceFcpMetricResponseRecordsItems0Svm) UnmarshalBinary(b []byte) error {
	var res PerformanceFcpMetricResponseRecordsItems0Svm
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PerformanceFcpMetricResponseRecordsItems0Throughput The rate of throughput bytes per second observed at the storage object.
//
// swagger:model PerformanceFcpMetricResponseRecordsItems0Throughput
type PerformanceFcpMetricResponseRecordsItems0Throughput struct {

	// Performance metric for read I/O operations.
	// Example: 200
	Read int64 `json:"read,omitempty"`

	// Performance metric aggregated over all types of I/O operations.
	// Example: 1000
	Total int64 `json:"total,omitempty"`

	// Peformance metric for write I/O operations.
	// Example: 100
	Write int64 `json:"write,omitempty"`
}

// Validate validates this performance fcp metric response records items0 throughput
func (m *PerformanceFcpMetricResponseRecordsItems0Throughput) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this performance fcp metric response records items0 throughput based on the context it is used
func (m *PerformanceFcpMetricResponseRecordsItems0Throughput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *PerformanceFcpMetricResponseRecordsItems0Throughput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformanceFcpMetricResponseRecordsItems0Throughput) UnmarshalBinary(b []byte) error {
	var res PerformanceFcpMetricResponseRecordsItems0Throughput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
