// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CifsDomain cifs domain
//
// swagger:model cifs_domain
type CifsDomain struct {

	// Specifies the discovered servers records.
	//
	DiscoveredServers []*CifsDomainDiscoveredServersItems0 `json:"discovered_servers,omitempty"`

	// name mapping
	NameMapping *CifsDomainNameMappingType `json:"name_mapping,omitempty"`

	// password schedule
	PasswordSchedule *CifsDomainPasswordScheduleType `json:"password_schedule,omitempty"`

	// Specifies the preferred DC records.
	//
	PreferredDcs []*CifsDomainPreferredDcsItems0 `json:"preferred_dcs,omitempty"`

	// svm
	Svm *CifsDomainSvm `json:"svm,omitempty"`

	// Specifies the trusted domain records.
	//
	TrustRelationships []*CifsDomainTrustRelationshipsItems0 `json:"trust_relationships,omitempty"`
}

// Validate validates this cifs domain
func (m *CifsDomain) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiscoveredServers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNameMapping(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePasswordSchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreferredDcs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrustRelationships(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CifsDomain) validateDiscoveredServers(formats strfmt.Registry) error {
	if swag.IsZero(m.DiscoveredServers) { // not required
		return nil
	}

	for i := 0; i < len(m.DiscoveredServers); i++ {
		if swag.IsZero(m.DiscoveredServers[i]) { // not required
			continue
		}

		if m.DiscoveredServers[i] != nil {
			if err := m.DiscoveredServers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("discovered_servers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CifsDomain) validateNameMapping(formats strfmt.Registry) error {
	if swag.IsZero(m.NameMapping) { // not required
		return nil
	}

	if m.NameMapping != nil {
		if err := m.NameMapping.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("name_mapping")
			}
			return err
		}
	}

	return nil
}

func (m *CifsDomain) validatePasswordSchedule(formats strfmt.Registry) error {
	if swag.IsZero(m.PasswordSchedule) { // not required
		return nil
	}

	if m.PasswordSchedule != nil {
		if err := m.PasswordSchedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("password_schedule")
			}
			return err
		}
	}

	return nil
}

func (m *CifsDomain) validatePreferredDcs(formats strfmt.Registry) error {
	if swag.IsZero(m.PreferredDcs) { // not required
		return nil
	}

	for i := 0; i < len(m.PreferredDcs); i++ {
		if swag.IsZero(m.PreferredDcs[i]) { // not required
			continue
		}

		if m.PreferredDcs[i] != nil {
			if err := m.PreferredDcs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("preferred_dcs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CifsDomain) validateSvm(formats strfmt.Registry) error {
	if swag.IsZero(m.Svm) { // not required
		return nil
	}

	if m.Svm != nil {
		if err := m.Svm.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svm")
			}
			return err
		}
	}

	return nil
}

func (m *CifsDomain) validateTrustRelationships(formats strfmt.Registry) error {
	if swag.IsZero(m.TrustRelationships) { // not required
		return nil
	}

	for i := 0; i < len(m.TrustRelationships); i++ {
		if swag.IsZero(m.TrustRelationships[i]) { // not required
			continue
		}

		if m.TrustRelationships[i] != nil {
			if err := m.TrustRelationships[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("trust_relationships" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this cifs domain based on the context it is used
func (m *CifsDomain) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDiscoveredServers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNameMapping(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePasswordSchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePreferredDcs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSvm(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTrustRelationships(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CifsDomain) contextValidateDiscoveredServers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DiscoveredServers); i++ {

		if m.DiscoveredServers[i] != nil {
			if err := m.DiscoveredServers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("discovered_servers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CifsDomain) contextValidateNameMapping(ctx context.Context, formats strfmt.Registry) error {

	if m.NameMapping != nil {
		if err := m.NameMapping.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("name_mapping")
			}
			return err
		}
	}

	return nil
}

func (m *CifsDomain) contextValidatePasswordSchedule(ctx context.Context, formats strfmt.Registry) error {

	if m.PasswordSchedule != nil {
		if err := m.PasswordSchedule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("password_schedule")
			}
			return err
		}
	}

	return nil
}

func (m *CifsDomain) contextValidatePreferredDcs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PreferredDcs); i++ {

		if m.PreferredDcs[i] != nil {
			if err := m.PreferredDcs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("preferred_dcs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CifsDomain) contextValidateSvm(ctx context.Context, formats strfmt.Registry) error {

	if m.Svm != nil {
		if err := m.Svm.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svm")
			}
			return err
		}
	}

	return nil
}

func (m *CifsDomain) contextValidateTrustRelationships(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TrustRelationships); i++ {

		if m.TrustRelationships[i] != nil {
			if err := m.TrustRelationships[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("trust_relationships" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CifsDomain) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CifsDomain) UnmarshalBinary(b []byte) error {
	var res CifsDomain
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CifsDomainDiscoveredServersItems0 cifs domain discovered servers items0
//
// swagger:model CifsDomainDiscoveredServersItems0
type CifsDomainDiscoveredServersItems0 struct {

	// Fully Qualified Domain Name.
	//
	// Example: test.com
	Domain string `json:"domain,omitempty"`

	// node
	Node *CifsDomainDiscoveredServersItems0Node `json:"node,omitempty"`

	// Server Preference
	//
	// Enum: [unknown preferred favored adequate]
	Preference string `json:"preference,omitempty"`

	// Server IP address
	//
	ServerIP string `json:"server_ip,omitempty"`

	// Server Name
	//
	ServerName string `json:"server_name,omitempty"`

	// Server Type
	//
	// Enum: [unknown kerberos ms_ldap ms_dc ldap]
	ServerType string `json:"server_type,omitempty"`

	// Server status
	//
	// Enum: [ok unavailable slow expired undetermined unreachable]
	State string `json:"state,omitempty"`
}

// Validate validates this cifs domain discovered servers items0
func (m *CifsDomainDiscoveredServersItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CifsDomainDiscoveredServersItems0) validateNode(formats strfmt.Registry) error {
	if swag.IsZero(m.Node) { // not required
		return nil
	}

	if m.Node != nil {
		if err := m.Node.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node")
			}
			return err
		}
	}

	return nil
}

var cifsDomainDiscoveredServersItems0TypePreferencePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["unknown","preferred","favored","adequate"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cifsDomainDiscoveredServersItems0TypePreferencePropEnum = append(cifsDomainDiscoveredServersItems0TypePreferencePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// CifsDomainDiscoveredServersItems0
	// CifsDomainDiscoveredServersItems0
	// preference
	// Preference
	// unknown
	// END DEBUGGING
	// CifsDomainDiscoveredServersItems0PreferenceUnknown captures enum value "unknown"
	CifsDomainDiscoveredServersItems0PreferenceUnknown string = "unknown"

	// BEGIN DEBUGGING
	// CifsDomainDiscoveredServersItems0
	// CifsDomainDiscoveredServersItems0
	// preference
	// Preference
	// preferred
	// END DEBUGGING
	// CifsDomainDiscoveredServersItems0PreferencePreferred captures enum value "preferred"
	CifsDomainDiscoveredServersItems0PreferencePreferred string = "preferred"

	// BEGIN DEBUGGING
	// CifsDomainDiscoveredServersItems0
	// CifsDomainDiscoveredServersItems0
	// preference
	// Preference
	// favored
	// END DEBUGGING
	// CifsDomainDiscoveredServersItems0PreferenceFavored captures enum value "favored"
	CifsDomainDiscoveredServersItems0PreferenceFavored string = "favored"

	// BEGIN DEBUGGING
	// CifsDomainDiscoveredServersItems0
	// CifsDomainDiscoveredServersItems0
	// preference
	// Preference
	// adequate
	// END DEBUGGING
	// CifsDomainDiscoveredServersItems0PreferenceAdequate captures enum value "adequate"
	CifsDomainDiscoveredServersItems0PreferenceAdequate string = "adequate"
)

// prop value enum
func (m *CifsDomainDiscoveredServersItems0) validatePreferenceEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, cifsDomainDiscoveredServersItems0TypePreferencePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CifsDomainDiscoveredServersItems0) validatePreference(formats strfmt.Registry) error {
	if swag.IsZero(m.Preference) { // not required
		return nil
	}

	// value enum
	if err := m.validatePreferenceEnum("preference", "body", m.Preference); err != nil {
		return err
	}

	return nil
}

var cifsDomainDiscoveredServersItems0TypeServerTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["unknown","kerberos","ms_ldap","ms_dc","ldap"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cifsDomainDiscoveredServersItems0TypeServerTypePropEnum = append(cifsDomainDiscoveredServersItems0TypeServerTypePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// CifsDomainDiscoveredServersItems0
	// CifsDomainDiscoveredServersItems0
	// server_type
	// ServerType
	// unknown
	// END DEBUGGING
	// CifsDomainDiscoveredServersItems0ServerTypeUnknown captures enum value "unknown"
	CifsDomainDiscoveredServersItems0ServerTypeUnknown string = "unknown"

	// BEGIN DEBUGGING
	// CifsDomainDiscoveredServersItems0
	// CifsDomainDiscoveredServersItems0
	// server_type
	// ServerType
	// kerberos
	// END DEBUGGING
	// CifsDomainDiscoveredServersItems0ServerTypeKerberos captures enum value "kerberos"
	CifsDomainDiscoveredServersItems0ServerTypeKerberos string = "kerberos"

	// BEGIN DEBUGGING
	// CifsDomainDiscoveredServersItems0
	// CifsDomainDiscoveredServersItems0
	// server_type
	// ServerType
	// ms_ldap
	// END DEBUGGING
	// CifsDomainDiscoveredServersItems0ServerTypeMsLdap captures enum value "ms_ldap"
	CifsDomainDiscoveredServersItems0ServerTypeMsLdap string = "ms_ldap"

	// BEGIN DEBUGGING
	// CifsDomainDiscoveredServersItems0
	// CifsDomainDiscoveredServersItems0
	// server_type
	// ServerType
	// ms_dc
	// END DEBUGGING
	// CifsDomainDiscoveredServersItems0ServerTypeMsDc captures enum value "ms_dc"
	CifsDomainDiscoveredServersItems0ServerTypeMsDc string = "ms_dc"

	// BEGIN DEBUGGING
	// CifsDomainDiscoveredServersItems0
	// CifsDomainDiscoveredServersItems0
	// server_type
	// ServerType
	// ldap
	// END DEBUGGING
	// CifsDomainDiscoveredServersItems0ServerTypeLdap captures enum value "ldap"
	CifsDomainDiscoveredServersItems0ServerTypeLdap string = "ldap"
)

// prop value enum
func (m *CifsDomainDiscoveredServersItems0) validateServerTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, cifsDomainDiscoveredServersItems0TypeServerTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CifsDomainDiscoveredServersItems0) validateServerType(formats strfmt.Registry) error {
	if swag.IsZero(m.ServerType) { // not required
		return nil
	}

	// value enum
	if err := m.validateServerTypeEnum("server_type", "body", m.ServerType); err != nil {
		return err
	}

	return nil
}

var cifsDomainDiscoveredServersItems0TypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ok","unavailable","slow","expired","undetermined","unreachable"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cifsDomainDiscoveredServersItems0TypeStatePropEnum = append(cifsDomainDiscoveredServersItems0TypeStatePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// CifsDomainDiscoveredServersItems0
	// CifsDomainDiscoveredServersItems0
	// state
	// State
	// ok
	// END DEBUGGING
	// CifsDomainDiscoveredServersItems0StateOk captures enum value "ok"
	CifsDomainDiscoveredServersItems0StateOk string = "ok"

	// BEGIN DEBUGGING
	// CifsDomainDiscoveredServersItems0
	// CifsDomainDiscoveredServersItems0
	// state
	// State
	// unavailable
	// END DEBUGGING
	// CifsDomainDiscoveredServersItems0StateUnavailable captures enum value "unavailable"
	CifsDomainDiscoveredServersItems0StateUnavailable string = "unavailable"

	// BEGIN DEBUGGING
	// CifsDomainDiscoveredServersItems0
	// CifsDomainDiscoveredServersItems0
	// state
	// State
	// slow
	// END DEBUGGING
	// CifsDomainDiscoveredServersItems0StateSlow captures enum value "slow"
	CifsDomainDiscoveredServersItems0StateSlow string = "slow"

	// BEGIN DEBUGGING
	// CifsDomainDiscoveredServersItems0
	// CifsDomainDiscoveredServersItems0
	// state
	// State
	// expired
	// END DEBUGGING
	// CifsDomainDiscoveredServersItems0StateExpired captures enum value "expired"
	CifsDomainDiscoveredServersItems0StateExpired string = "expired"

	// BEGIN DEBUGGING
	// CifsDomainDiscoveredServersItems0
	// CifsDomainDiscoveredServersItems0
	// state
	// State
	// undetermined
	// END DEBUGGING
	// CifsDomainDiscoveredServersItems0StateUndetermined captures enum value "undetermined"
	CifsDomainDiscoveredServersItems0StateUndetermined string = "undetermined"

	// BEGIN DEBUGGING
	// CifsDomainDiscoveredServersItems0
	// CifsDomainDiscoveredServersItems0
	// state
	// State
	// unreachable
	// END DEBUGGING
	// CifsDomainDiscoveredServersItems0StateUnreachable captures enum value "unreachable"
	CifsDomainDiscoveredServersItems0StateUnreachable string = "unreachable"
)

// prop value enum
func (m *CifsDomainDiscoveredServersItems0) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, cifsDomainDiscoveredServersItems0TypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CifsDomainDiscoveredServersItems0) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this cifs domain discovered servers items0 based on the context it is used
func (m *CifsDomainDiscoveredServersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CifsDomainDiscoveredServersItems0) contextValidateNode(ctx context.Context, formats strfmt.Registry) error {

	if m.Node != nil {
		if err := m.Node.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CifsDomainDiscoveredServersItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CifsDomainDiscoveredServersItems0) UnmarshalBinary(b []byte) error {
	var res CifsDomainDiscoveredServersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CifsDomainDiscoveredServersItems0Node cifs domain discovered servers items0 node
//
// swagger:model CifsDomainDiscoveredServersItems0Node
type CifsDomainDiscoveredServersItems0Node struct {

	// links
	Links *CifsDomainDiscoveredServersItems0NodeLinks `json:"_links,omitempty"`

	// name
	// Example: node1
	Name string `json:"name,omitempty"`

	// uuid
	// Example: 1cd8a442-86d1-11e0-ae1c-123478563412
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this cifs domain discovered servers items0 node
func (m *CifsDomainDiscoveredServersItems0Node) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CifsDomainDiscoveredServersItems0Node) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cifs domain discovered servers items0 node based on the context it is used
func (m *CifsDomainDiscoveredServersItems0Node) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CifsDomainDiscoveredServersItems0Node) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CifsDomainDiscoveredServersItems0Node) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CifsDomainDiscoveredServersItems0Node) UnmarshalBinary(b []byte) error {
	var res CifsDomainDiscoveredServersItems0Node
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CifsDomainDiscoveredServersItems0NodeLinks cifs domain discovered servers items0 node links
//
// swagger:model CifsDomainDiscoveredServersItems0NodeLinks
type CifsDomainDiscoveredServersItems0NodeLinks struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this cifs domain discovered servers items0 node links
func (m *CifsDomainDiscoveredServersItems0NodeLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CifsDomainDiscoveredServersItems0NodeLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cifs domain discovered servers items0 node links based on the context it is used
func (m *CifsDomainDiscoveredServersItems0NodeLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CifsDomainDiscoveredServersItems0NodeLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CifsDomainDiscoveredServersItems0NodeLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CifsDomainDiscoveredServersItems0NodeLinks) UnmarshalBinary(b []byte) error {
	var res CifsDomainDiscoveredServersItems0NodeLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CifsDomainNameMappingType Specifies the name mapping search records.
//
//
// swagger:model CifsDomainNameMappingType
type CifsDomainNameMappingType struct {

	// trusted domains
	TrustedDomains []string `json:"trusted_domains,omitempty"`
}

// Validate validates this cifs domain name mapping type
func (m *CifsDomainNameMappingType) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this cifs domain name mapping type based on context it is used
func (m *CifsDomainNameMappingType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CifsDomainNameMappingType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CifsDomainNameMappingType) UnmarshalBinary(b []byte) error {
	var res CifsDomainNameMappingType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CifsDomainPasswordScheduleType Specifies the password schedule records.
//
//
// swagger:model CifsDomainPasswordScheduleType
type CifsDomainPasswordScheduleType struct {

	// Schedule description.
	ScheduleDescription string `json:"schedule_description,omitempty"`

	// Is password schedule enabled.
	ScheduleEnabled bool `json:"schedule_enabled,omitempty"`

	// Last successful password change time.
	// Format: date-time
	ScheduleLastChangedTime *strfmt.DateTime `json:"schedule_last_changed_time,omitempty"`

	// Minutes within which schedule start can be randomized.
	// Maximum: 180
	// Minimum: 1
	ScheduleRandomizedMinute int64 `json:"schedule_randomized_minute,omitempty"`

	// Warning message in case job is deleted.
	ScheduleWarnMessage string `json:"schedule_warn_message,omitempty"`

	// Interval in weeks for password change schedule.
	// Maximum: 52
	// Minimum: 1
	ScheduleWeeklyInterval int64 `json:"schedule_weekly_interval,omitempty"`
}

// Validate validates this cifs domain password schedule type
func (m *CifsDomainPasswordScheduleType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateScheduleLastChangedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheduleRandomizedMinute(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheduleWeeklyInterval(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CifsDomainPasswordScheduleType) validateScheduleLastChangedTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ScheduleLastChangedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("password_schedule"+"."+"schedule_last_changed_time", "body", "date-time", m.ScheduleLastChangedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CifsDomainPasswordScheduleType) validateScheduleRandomizedMinute(formats strfmt.Registry) error {
	if swag.IsZero(m.ScheduleRandomizedMinute) { // not required
		return nil
	}

	if err := validate.MinimumInt("password_schedule"+"."+"schedule_randomized_minute", "body", m.ScheduleRandomizedMinute, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("password_schedule"+"."+"schedule_randomized_minute", "body", m.ScheduleRandomizedMinute, 180, false); err != nil {
		return err
	}

	return nil
}

func (m *CifsDomainPasswordScheduleType) validateScheduleWeeklyInterval(formats strfmt.Registry) error {
	if swag.IsZero(m.ScheduleWeeklyInterval) { // not required
		return nil
	}

	if err := validate.MinimumInt("password_schedule"+"."+"schedule_weekly_interval", "body", m.ScheduleWeeklyInterval, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("password_schedule"+"."+"schedule_weekly_interval", "body", m.ScheduleWeeklyInterval, 52, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this cifs domain password schedule type based on context it is used
func (m *CifsDomainPasswordScheduleType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CifsDomainPasswordScheduleType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CifsDomainPasswordScheduleType) UnmarshalBinary(b []byte) error {
	var res CifsDomainPasswordScheduleType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CifsDomainPreferredDcsItems0 cifs domain preferred dcs items0
//
// swagger:model CifsDomainPreferredDcsItems0
type CifsDomainPreferredDcsItems0 struct {

	// Fully Qualified Domain Name.
	//
	// Example: test.com
	Fqdn string `json:"fqdn,omitempty"`

	// IP address of the preferred domain controller (DC). The address can be either an IPv4 or an IPv6 address.
	//
	// Example: 4.4.4.4
	ServerIP string `json:"server_ip,omitempty"`
}

// Validate validates this cifs domain preferred dcs items0
func (m *CifsDomainPreferredDcsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this cifs domain preferred dcs items0 based on context it is used
func (m *CifsDomainPreferredDcsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CifsDomainPreferredDcsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CifsDomainPreferredDcsItems0) UnmarshalBinary(b []byte) error {
	var res CifsDomainPreferredDcsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CifsDomainSvm cifs domain svm
//
// swagger:model CifsDomainSvm
type CifsDomainSvm struct {

	// links
	Links *CifsDomainSvmLinks `json:"_links,omitempty"`

	// The name of the SVM.
	//
	// Example: svm1
	Name string `json:"name,omitempty"`

	// The unique identifier of the SVM.
	//
	// Example: 02c9e252-41be-11e9-81d5-00a0986138f7
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this cifs domain svm
func (m *CifsDomainSvm) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CifsDomainSvm) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svm" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cifs domain svm based on the context it is used
func (m *CifsDomainSvm) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CifsDomainSvm) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svm" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CifsDomainSvm) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CifsDomainSvm) UnmarshalBinary(b []byte) error {
	var res CifsDomainSvm
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CifsDomainSvmLinks cifs domain svm links
//
// swagger:model CifsDomainSvmLinks
type CifsDomainSvmLinks struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this cifs domain svm links
func (m *CifsDomainSvmLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CifsDomainSvmLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svm" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cifs domain svm links based on the context it is used
func (m *CifsDomainSvmLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CifsDomainSvmLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svm" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CifsDomainSvmLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CifsDomainSvmLinks) UnmarshalBinary(b []byte) error {
	var res CifsDomainSvmLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CifsDomainTrustRelationshipsItems0 cifs domain trust relationships items0
//
// swagger:model CifsDomainTrustRelationshipsItems0
type CifsDomainTrustRelationshipsItems0 struct {

	// Home Domain Name
	//
	HomeDomain string `json:"home_domain,omitempty"`

	// node
	Node *CifsDomainTrustRelationshipsItems0Node `json:"node,omitempty"`

	// Trusted Domain Name
	//
	TrustedDomains []string `json:"trusted_domains,omitempty"`
}

// Validate validates this cifs domain trust relationships items0
func (m *CifsDomainTrustRelationshipsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CifsDomainTrustRelationshipsItems0) validateNode(formats strfmt.Registry) error {
	if swag.IsZero(m.Node) { // not required
		return nil
	}

	if m.Node != nil {
		if err := m.Node.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cifs domain trust relationships items0 based on the context it is used
func (m *CifsDomainTrustRelationshipsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CifsDomainTrustRelationshipsItems0) contextValidateNode(ctx context.Context, formats strfmt.Registry) error {

	if m.Node != nil {
		if err := m.Node.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CifsDomainTrustRelationshipsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CifsDomainTrustRelationshipsItems0) UnmarshalBinary(b []byte) error {
	var res CifsDomainTrustRelationshipsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CifsDomainTrustRelationshipsItems0Node cifs domain trust relationships items0 node
//
// swagger:model CifsDomainTrustRelationshipsItems0Node
type CifsDomainTrustRelationshipsItems0Node struct {

	// links
	Links *CifsDomainTrustRelationshipsItems0NodeLinks `json:"_links,omitempty"`

	// name
	// Example: node1
	Name string `json:"name,omitempty"`

	// uuid
	// Example: 1cd8a442-86d1-11e0-ae1c-123478563412
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this cifs domain trust relationships items0 node
func (m *CifsDomainTrustRelationshipsItems0Node) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CifsDomainTrustRelationshipsItems0Node) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cifs domain trust relationships items0 node based on the context it is used
func (m *CifsDomainTrustRelationshipsItems0Node) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CifsDomainTrustRelationshipsItems0Node) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CifsDomainTrustRelationshipsItems0Node) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CifsDomainTrustRelationshipsItems0Node) UnmarshalBinary(b []byte) error {
	var res CifsDomainTrustRelationshipsItems0Node
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CifsDomainTrustRelationshipsItems0NodeLinks cifs domain trust relationships items0 node links
//
// swagger:model CifsDomainTrustRelationshipsItems0NodeLinks
type CifsDomainTrustRelationshipsItems0NodeLinks struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this cifs domain trust relationships items0 node links
func (m *CifsDomainTrustRelationshipsItems0NodeLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CifsDomainTrustRelationshipsItems0NodeLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cifs domain trust relationships items0 node links based on the context it is used
func (m *CifsDomainTrustRelationshipsItems0NodeLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CifsDomainTrustRelationshipsItems0NodeLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CifsDomainTrustRelationshipsItems0NodeLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CifsDomainTrustRelationshipsItems0NodeLinks) UnmarshalBinary(b []byte) error {
	var res CifsDomainTrustRelationshipsItems0NodeLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
