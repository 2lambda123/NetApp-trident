// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Fabric A Fibre Channel (FC) fabric REST object provides information about an FC network (fabric) connected to the cluster. Logically, the FC fabric also contains FC switches and the FC zones that comprise the active zoneset of the fabric. FC switch and zone infromation is not reported directly in the FC fabric REST object for reasons of scale and flexibility; they are found by querying the FC switches and FC zones REST endpoints.
//
// swagger:model fabric
type Fabric struct {

	// links
	Links *FabricLinks `json:"_links,omitempty"`

	// cache
	Cache *FabricCache `json:"cache,omitempty"`

	// An array of the connections between the cluster and the switches Fibre Channel fabric.
	//
	Connections []*FabricConnectionsItems0 `json:"connections,omitempty"`

	// The world wide name (WWN) of the primary switch of the Fibre Channel (FC) fabric. This is used as a unique identifier for the FC fabric.
	//
	// Example: 10:00:c1:c2:c3:c4:c5:c6
	// Read Only: true
	Name string `json:"name,omitempty"`

	// zoneset
	Zoneset *FabricZoneset `json:"zoneset,omitempty"`
}

// Validate validates this fabric
func (m *Fabric) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCache(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnections(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZoneset(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Fabric) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *Fabric) validateCache(formats strfmt.Registry) error {
	if swag.IsZero(m.Cache) { // not required
		return nil
	}

	if m.Cache != nil {
		if err := m.Cache.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cache")
			}
			return err
		}
	}

	return nil
}

func (m *Fabric) validateConnections(formats strfmt.Registry) error {
	if swag.IsZero(m.Connections) { // not required
		return nil
	}

	for i := 0; i < len(m.Connections); i++ {
		if swag.IsZero(m.Connections[i]) { // not required
			continue
		}

		if m.Connections[i] != nil {
			if err := m.Connections[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("connections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Fabric) validateZoneset(formats strfmt.Registry) error {
	if swag.IsZero(m.Zoneset) { // not required
		return nil
	}

	if m.Zoneset != nil {
		if err := m.Zoneset.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("zoneset")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this fabric based on the context it is used
func (m *Fabric) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCache(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConnections(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateZoneset(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Fabric) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *Fabric) contextValidateCache(ctx context.Context, formats strfmt.Registry) error {

	if m.Cache != nil {
		if err := m.Cache.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cache")
			}
			return err
		}
	}

	return nil
}

func (m *Fabric) contextValidateConnections(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Connections); i++ {

		if m.Connections[i] != nil {
			if err := m.Connections[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("connections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Fabric) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *Fabric) contextValidateZoneset(ctx context.Context, formats strfmt.Registry) error {

	if m.Zoneset != nil {
		if err := m.Zoneset.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("zoneset")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Fabric) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Fabric) UnmarshalBinary(b []byte) error {
	var res Fabric
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FabricCache Properties of Fibre Chanel fabric cache.
//
// swagger:model FabricCache
type FabricCache struct {

	// The age of the Fibre Channel fabric data cache retrieved. If the FC fabric data cache has not been fully updated for a newly discovered fabric, or a fabric that has been re-discovered after being purged, a value for this property will not be retrieved. The value is in ISO 8601 duration format.
	//
	// Example: PT3M30S
	// Read Only: true
	Age string `json:"age,omitempty"`

	// A boolean that indicates if the retrieved data is current relative to the `cache.maximum_age` value of the request. A value of `true` indicates that the data is no older than the requested maximum age. A value of `false` indicates that the data is older than the requested maximum age; if more current data is required, the caller should wait for some time for the cache update to complete and query the data again.
	//
	// Read Only: true
	IsCurrent *bool `json:"is_current,omitempty"`

	// The date and time at which the Fibre Channel fabric data cache retrieved was last updated. If the FC fabric data cache has not been fully updated for a newly discovered fabric, or a fabric that has been re-discovered after being purged, a value for this property will not be retrieved.
	//
	// Read Only: true
	// Format: date-time
	UpdateTime *strfmt.DateTime `json:"update_time,omitempty"`
}

// Validate validates this fabric cache
func (m *FabricCache) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FabricCache) validateUpdateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("cache"+"."+"update_time", "body", "date-time", m.UpdateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this fabric cache based on the context it is used
func (m *FabricCache) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAge(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsCurrent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdateTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FabricCache) contextValidateAge(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "cache"+"."+"age", "body", string(m.Age)); err != nil {
		return err
	}

	return nil
}

func (m *FabricCache) contextValidateIsCurrent(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "cache"+"."+"is_current", "body", m.IsCurrent); err != nil {
		return err
	}

	return nil
}

func (m *FabricCache) contextValidateUpdateTime(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "cache"+"."+"update_time", "body", m.UpdateTime); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FabricCache) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FabricCache) UnmarshalBinary(b []byte) error {
	var res FabricCache
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FabricConnectionsItems0 A connection between a cluster node Fibre Channel (FC) port and an FC switch port.
//
// swagger:model FabricConnectionsItems0
type FabricConnectionsItems0 struct {

	// cluster port
	ClusterPort *FabricConnectionsItems0ClusterPort `json:"cluster_port,omitempty"`

	// switch
	Switch *FabricConnectionsItems0Switch `json:"switch,omitempty"`
}

// Validate validates this fabric connections items0
func (m *FabricConnectionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSwitch(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FabricConnectionsItems0) validateClusterPort(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterPort) { // not required
		return nil
	}

	if m.ClusterPort != nil {
		if err := m.ClusterPort.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster_port")
			}
			return err
		}
	}

	return nil
}

func (m *FabricConnectionsItems0) validateSwitch(formats strfmt.Registry) error {
	if swag.IsZero(m.Switch) { // not required
		return nil
	}

	if m.Switch != nil {
		if err := m.Switch.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("switch")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this fabric connections items0 based on the context it is used
func (m *FabricConnectionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusterPort(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSwitch(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FabricConnectionsItems0) contextValidateClusterPort(ctx context.Context, formats strfmt.Registry) error {

	if m.ClusterPort != nil {
		if err := m.ClusterPort.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster_port")
			}
			return err
		}
	}

	return nil
}

func (m *FabricConnectionsItems0) contextValidateSwitch(ctx context.Context, formats strfmt.Registry) error {

	if m.Switch != nil {
		if err := m.Switch.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("switch")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FabricConnectionsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FabricConnectionsItems0) UnmarshalBinary(b []byte) error {
	var res FabricConnectionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FabricConnectionsItems0ClusterPort The cluster Fibre Channel (FC) port that connects the FC fabric.
//
// swagger:model FabricConnectionsItems0ClusterPort
type FabricConnectionsItems0ClusterPort struct {

	// links
	Links *FabricConnectionsItems0ClusterPortLinks `json:"_links,omitempty"`

	// The name of the cluster Fibre Channel port.
	//
	// Example: 0a
	Name string `json:"name,omitempty"`

	// node
	Node *FabricConnectionsItems0ClusterPortNode `json:"node,omitempty"`

	// The unique identifier of the cluster Fibre Channel port.
	//
	// Example: 1cd8a442-86d1-11e0-ae1c-123478563412
	UUID string `json:"uuid,omitempty"`

	// The world wide port name (WWPN) of the cluster Fibre Channel port.
	//
	// Example: 50:0a:11:22:33:44:55:66
	// Read Only: true
	Wwpn string `json:"wwpn,omitempty"`
}

// Validate validates this fabric connections items0 cluster port
func (m *FabricConnectionsItems0ClusterPort) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FabricConnectionsItems0ClusterPort) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster_port" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (m *FabricConnectionsItems0ClusterPort) validateNode(formats strfmt.Registry) error {
	if swag.IsZero(m.Node) { // not required
		return nil
	}

	if m.Node != nil {
		if err := m.Node.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster_port" + "." + "node")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this fabric connections items0 cluster port based on the context it is used
func (m *FabricConnectionsItems0ClusterPort) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWwpn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FabricConnectionsItems0ClusterPort) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster_port" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (m *FabricConnectionsItems0ClusterPort) contextValidateNode(ctx context.Context, formats strfmt.Registry) error {

	if m.Node != nil {
		if err := m.Node.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster_port" + "." + "node")
			}
			return err
		}
	}

	return nil
}

func (m *FabricConnectionsItems0ClusterPort) contextValidateWwpn(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "cluster_port"+"."+"wwpn", "body", string(m.Wwpn)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FabricConnectionsItems0ClusterPort) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FabricConnectionsItems0ClusterPort) UnmarshalBinary(b []byte) error {
	var res FabricConnectionsItems0ClusterPort
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FabricConnectionsItems0ClusterPortLinks fabric connections items0 cluster port links
//
// swagger:model FabricConnectionsItems0ClusterPortLinks
type FabricConnectionsItems0ClusterPortLinks struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this fabric connections items0 cluster port links
func (m *FabricConnectionsItems0ClusterPortLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FabricConnectionsItems0ClusterPortLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster_port" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this fabric connections items0 cluster port links based on the context it is used
func (m *FabricConnectionsItems0ClusterPortLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FabricConnectionsItems0ClusterPortLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster_port" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FabricConnectionsItems0ClusterPortLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FabricConnectionsItems0ClusterPortLinks) UnmarshalBinary(b []byte) error {
	var res FabricConnectionsItems0ClusterPortLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FabricConnectionsItems0ClusterPortNode The node on which the cluster Fibre Channel port is located.
//
// swagger:model FabricConnectionsItems0ClusterPortNode
type FabricConnectionsItems0ClusterPortNode struct {

	// The name of the node on which the cluster Fibre Channel port is located.
	//
	// Example: node1
	// Read Only: true
	Name string `json:"name,omitempty"`
}

// Validate validates this fabric connections items0 cluster port node
func (m *FabricConnectionsItems0ClusterPortNode) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this fabric connections items0 cluster port node based on the context it is used
func (m *FabricConnectionsItems0ClusterPortNode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FabricConnectionsItems0ClusterPortNode) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "cluster_port"+"."+"node"+"."+"name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FabricConnectionsItems0ClusterPortNode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FabricConnectionsItems0ClusterPortNode) UnmarshalBinary(b []byte) error {
	var res FabricConnectionsItems0ClusterPortNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FabricConnectionsItems0Switch The Fibre Channel switch to which the cluster node port is connected.
//
// swagger:model FabricConnectionsItems0Switch
type FabricConnectionsItems0Switch struct {

	// links
	Links *FabricConnectionsItems0SwitchLinks `json:"_links,omitempty"`

	// port
	Port *FabricConnectionsItems0SwitchPort `json:"port,omitempty"`

	// The world-wide name (WWN) of the Fibre Channel switch to which the cluster node port is attached.
	//
	// Example: 10:00:b1:b2:b3:b4:b4:b6
	// Read Only: true
	Wwn string `json:"wwn,omitempty"`
}

// Validate validates this fabric connections items0 switch
func (m *FabricConnectionsItems0Switch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FabricConnectionsItems0Switch) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("switch" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (m *FabricConnectionsItems0Switch) validatePort(formats strfmt.Registry) error {
	if swag.IsZero(m.Port) { // not required
		return nil
	}

	if m.Port != nil {
		if err := m.Port.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("switch" + "." + "port")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this fabric connections items0 switch based on the context it is used
func (m *FabricConnectionsItems0Switch) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePort(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWwn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FabricConnectionsItems0Switch) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("switch" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (m *FabricConnectionsItems0Switch) contextValidatePort(ctx context.Context, formats strfmt.Registry) error {

	if m.Port != nil {
		if err := m.Port.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("switch" + "." + "port")
			}
			return err
		}
	}

	return nil
}

func (m *FabricConnectionsItems0Switch) contextValidateWwn(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "switch"+"."+"wwn", "body", string(m.Wwn)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FabricConnectionsItems0Switch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FabricConnectionsItems0Switch) UnmarshalBinary(b []byte) error {
	var res FabricConnectionsItems0Switch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FabricConnectionsItems0SwitchLinks fabric connections items0 switch links
//
// swagger:model FabricConnectionsItems0SwitchLinks
type FabricConnectionsItems0SwitchLinks struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this fabric connections items0 switch links
func (m *FabricConnectionsItems0SwitchLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FabricConnectionsItems0SwitchLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("switch" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this fabric connections items0 switch links based on the context it is used
func (m *FabricConnectionsItems0SwitchLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FabricConnectionsItems0SwitchLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("switch" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FabricConnectionsItems0SwitchLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FabricConnectionsItems0SwitchLinks) UnmarshalBinary(b []byte) error {
	var res FabricConnectionsItems0SwitchLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FabricConnectionsItems0SwitchPort The port of the Fibre Channel switch to which the cluster node port is connected.
//
// swagger:model FabricConnectionsItems0SwitchPort
type FabricConnectionsItems0SwitchPort struct {

	// The world wide port name (WWPN) of the Fibre Channel switch port.
	//
	// Example: 50:0a:a1:a2:a3:a4:a5:a6
	// Read Only: true
	Wwpn string `json:"wwpn,omitempty"`
}

// Validate validates this fabric connections items0 switch port
func (m *FabricConnectionsItems0SwitchPort) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this fabric connections items0 switch port based on the context it is used
func (m *FabricConnectionsItems0SwitchPort) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateWwpn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FabricConnectionsItems0SwitchPort) contextValidateWwpn(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "switch"+"."+"port"+"."+"wwpn", "body", string(m.Wwpn)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FabricConnectionsItems0SwitchPort) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FabricConnectionsItems0SwitchPort) UnmarshalBinary(b []byte) error {
	var res FabricConnectionsItems0SwitchPort
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FabricLinks fabric links
//
// swagger:model FabricLinks
type FabricLinks struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this fabric links
func (m *FabricLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FabricLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this fabric links based on the context it is used
func (m *FabricLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FabricLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FabricLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FabricLinks) UnmarshalBinary(b []byte) error {
	var res FabricLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FabricZoneset The active Fibre Channel zoneset in the fabric.
//
// swagger:model FabricZoneset
type FabricZoneset struct {

	// The name of the Fibre Channel zoneset.
	//
	// Example: zoneset1
	// Read Only: true
	Name string `json:"name,omitempty"`
}

// Validate validates this fabric zoneset
func (m *FabricZoneset) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this fabric zoneset based on the context it is used
func (m *FabricZoneset) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FabricZoneset) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "zoneset"+"."+"name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FabricZoneset) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FabricZoneset) UnmarshalBinary(b []byte) error {
	var res FabricZoneset
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
