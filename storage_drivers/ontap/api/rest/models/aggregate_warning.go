// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AggregateWarning aggregate warning
//
// swagger:model aggregate_warning
type AggregateWarning struct {

	// action
	Action *AggregateWarningAction `json:"action,omitempty"`

	// Name of the entity that returns the warning.
	Name string `json:"name,omitempty"`

	// warning
	Warning *AggregateWarningWarning `json:"warning,omitempty"`
}

// Validate validates this aggregate warning
func (m *AggregateWarning) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWarning(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AggregateWarning) validateAction(formats strfmt.Registry) error {
	if swag.IsZero(m.Action) { // not required
		return nil
	}

	if m.Action != nil {
		if err := m.Action.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("action")
			}
			return err
		}
	}

	return nil
}

func (m *AggregateWarning) validateWarning(formats strfmt.Registry) error {
	if swag.IsZero(m.Warning) { // not required
		return nil
	}

	if m.Warning != nil {
		if err := m.Warning.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("warning")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this aggregate warning based on the context it is used
func (m *AggregateWarning) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAction(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWarning(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AggregateWarning) contextValidateAction(ctx context.Context, formats strfmt.Registry) error {

	if m.Action != nil {
		if err := m.Action.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("action")
			}
			return err
		}
	}

	return nil
}

func (m *AggregateWarning) contextValidateWarning(ctx context.Context, formats strfmt.Registry) error {

	if m.Warning != nil {
		if err := m.Warning.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("warning")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AggregateWarning) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AggregateWarning) UnmarshalBinary(b []byte) error {
	var res AggregateWarning
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AggregateWarningAction aggregate warning action
//
// swagger:model AggregateWarningAction
type AggregateWarningAction struct {

	// Arguments present in the specified action message.
	Arguments []string `json:"arguments,omitempty"`

	// Corrective action code of the specified action.
	Code int64 `json:"code,omitempty"`

	// Specifies the corrective action to be taken to resolve the issue.
	Message string `json:"message,omitempty"`
}

// Validate validates this aggregate warning action
func (m *AggregateWarningAction) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this aggregate warning action based on context it is used
func (m *AggregateWarningAction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AggregateWarningAction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AggregateWarningAction) UnmarshalBinary(b []byte) error {
	var res AggregateWarningAction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AggregateWarningWarning aggregate warning warning
//
// swagger:model AggregateWarningWarning
type AggregateWarningWarning struct {

	// Arguments present in the warning message encountered.
	Arguments []string `json:"arguments,omitempty"`

	// Warning code of the warning encountered.
	Code int64 `json:"code,omitempty"`

	// Details of the warning encountered by the aggregate simulate query.
	Message string `json:"message,omitempty"`
}

// Validate validates this aggregate warning warning
func (m *AggregateWarningWarning) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this aggregate warning warning based on context it is used
func (m *AggregateWarningWarning) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AggregateWarningWarning) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AggregateWarningWarning) UnmarshalBinary(b []byte) error {
	var res AggregateWarningWarning
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
