// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ApplicationProtectionGroups application protection groups
//
// swagger:model application_protection_groups
type ApplicationProtectionGroups struct {

	// Protection group name
	// Read Only: true
	Name string `json:"name,omitempty"`

	// rpo
	Rpo *ApplicationProtectionGroupsRpo `json:"rpo,omitempty"`

	// Protection group UUID
	// Read Only: true
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this application protection groups
func (m *ApplicationProtectionGroups) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRpo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationProtectionGroups) validateRpo(formats strfmt.Registry) error {
	if swag.IsZero(m.Rpo) { // not required
		return nil
	}

	if m.Rpo != nil {
		if err := m.Rpo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rpo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this application protection groups based on the context it is used
func (m *ApplicationProtectionGroups) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRpo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationProtectionGroups) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *ApplicationProtectionGroups) contextValidateRpo(ctx context.Context, formats strfmt.Registry) error {

	if m.Rpo != nil {
		if err := m.Rpo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rpo")
			}
			return err
		}
	}

	return nil
}

func (m *ApplicationProtectionGroups) contextValidateUUID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "uuid", "body", string(m.UUID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApplicationProtectionGroups) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplicationProtectionGroups) UnmarshalBinary(b []byte) error {
	var res ApplicationProtectionGroups
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ApplicationProtectionGroupsRpo application protection groups rpo
//
// swagger:model ApplicationProtectionGroupsRpo
type ApplicationProtectionGroupsRpo struct {

	// local
	Local *ApplicationProtectionGroupsRpoLocal `json:"local,omitempty"`

	// remote
	Remote *ApplicationProtectionGroupsRpoRemote `json:"remote,omitempty"`
}

// Validate validates this application protection groups rpo
func (m *ApplicationProtectionGroupsRpo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLocal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemote(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationProtectionGroupsRpo) validateLocal(formats strfmt.Registry) error {
	if swag.IsZero(m.Local) { // not required
		return nil
	}

	if m.Local != nil {
		if err := m.Local.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rpo" + "." + "local")
			}
			return err
		}
	}

	return nil
}

func (m *ApplicationProtectionGroupsRpo) validateRemote(formats strfmt.Registry) error {
	if swag.IsZero(m.Remote) { // not required
		return nil
	}

	if m.Remote != nil {
		if err := m.Remote.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rpo" + "." + "remote")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this application protection groups rpo based on the context it is used
func (m *ApplicationProtectionGroupsRpo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLocal(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemote(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationProtectionGroupsRpo) contextValidateLocal(ctx context.Context, formats strfmt.Registry) error {

	if m.Local != nil {
		if err := m.Local.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rpo" + "." + "local")
			}
			return err
		}
	}

	return nil
}

func (m *ApplicationProtectionGroupsRpo) contextValidateRemote(ctx context.Context, formats strfmt.Registry) error {

	if m.Remote != nil {
		if err := m.Remote.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rpo" + "." + "remote")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApplicationProtectionGroupsRpo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplicationProtectionGroupsRpo) UnmarshalBinary(b []byte) error {
	var res ApplicationProtectionGroupsRpo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ApplicationProtectionGroupsRpoLocal application protection groups rpo local
//
// swagger:model ApplicationProtectionGroupsRpoLocal
type ApplicationProtectionGroupsRpoLocal struct {

	// A detailed description of the local RPO. This includes details on the Snapshot copy schedule.
	// Read Only: true
	Description string `json:"description,omitempty"`

	// The local RPO of the component. This indicates how often component Snapshot copies are automatically created.
	// Read Only: true
	// Enum: [none hourly 6_hourly 15_minutely]
	Name string `json:"name,omitempty"`
}

// Validate validates this application protection groups rpo local
func (m *ApplicationProtectionGroupsRpoLocal) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var applicationProtectionGroupsRpoLocalTypeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["none","hourly","6_hourly","15_minutely"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		applicationProtectionGroupsRpoLocalTypeNamePropEnum = append(applicationProtectionGroupsRpoLocalTypeNamePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// ApplicationProtectionGroupsRpoLocal
	// ApplicationProtectionGroupsRpoLocal
	// name
	// Name
	// none
	// END DEBUGGING
	// ApplicationProtectionGroupsRpoLocalNameNone captures enum value "none"
	ApplicationProtectionGroupsRpoLocalNameNone string = "none"

	// BEGIN DEBUGGING
	// ApplicationProtectionGroupsRpoLocal
	// ApplicationProtectionGroupsRpoLocal
	// name
	// Name
	// hourly
	// END DEBUGGING
	// ApplicationProtectionGroupsRpoLocalNameHourly captures enum value "hourly"
	ApplicationProtectionGroupsRpoLocalNameHourly string = "hourly"

	// BEGIN DEBUGGING
	// ApplicationProtectionGroupsRpoLocal
	// ApplicationProtectionGroupsRpoLocal
	// name
	// Name
	// 6_hourly
	// END DEBUGGING
	// ApplicationProtectionGroupsRpoLocalNameNr6Hourly captures enum value "6_hourly"
	ApplicationProtectionGroupsRpoLocalNameNr6Hourly string = "6_hourly"

	// BEGIN DEBUGGING
	// ApplicationProtectionGroupsRpoLocal
	// ApplicationProtectionGroupsRpoLocal
	// name
	// Name
	// 15_minutely
	// END DEBUGGING
	// ApplicationProtectionGroupsRpoLocalNameNr15Minutely captures enum value "15_minutely"
	ApplicationProtectionGroupsRpoLocalNameNr15Minutely string = "15_minutely"
)

// prop value enum
func (m *ApplicationProtectionGroupsRpoLocal) validateNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, applicationProtectionGroupsRpoLocalTypeNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ApplicationProtectionGroupsRpoLocal) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	// value enum
	if err := m.validateNameEnum("rpo"+"."+"local"+"."+"name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this application protection groups rpo local based on the context it is used
func (m *ApplicationProtectionGroupsRpoLocal) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDescription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationProtectionGroupsRpoLocal) contextValidateDescription(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "rpo"+"."+"local"+"."+"description", "body", string(m.Description)); err != nil {
		return err
	}

	return nil
}

func (m *ApplicationProtectionGroupsRpoLocal) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "rpo"+"."+"local"+"."+"name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApplicationProtectionGroupsRpoLocal) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplicationProtectionGroupsRpoLocal) UnmarshalBinary(b []byte) error {
	var res ApplicationProtectionGroupsRpoLocal
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ApplicationProtectionGroupsRpoRemote application protection groups rpo remote
//
// swagger:model ApplicationProtectionGroupsRpoRemote
type ApplicationProtectionGroupsRpoRemote struct {

	// A detailed description of the remote RPO.
	// Read Only: true
	Description string `json:"description,omitempty"`

	// The remote RPO of the component. A remote RPO of zero indicates that the component is synchronously replicated to another cluster.
	// Read Only: true
	// Enum: [none zero hourly 6_hourly 15_minutely]
	Name string `json:"name,omitempty"`
}

// Validate validates this application protection groups rpo remote
func (m *ApplicationProtectionGroupsRpoRemote) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var applicationProtectionGroupsRpoRemoteTypeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["none","zero","hourly","6_hourly","15_minutely"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		applicationProtectionGroupsRpoRemoteTypeNamePropEnum = append(applicationProtectionGroupsRpoRemoteTypeNamePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// ApplicationProtectionGroupsRpoRemote
	// ApplicationProtectionGroupsRpoRemote
	// name
	// Name
	// none
	// END DEBUGGING
	// ApplicationProtectionGroupsRpoRemoteNameNone captures enum value "none"
	ApplicationProtectionGroupsRpoRemoteNameNone string = "none"

	// BEGIN DEBUGGING
	// ApplicationProtectionGroupsRpoRemote
	// ApplicationProtectionGroupsRpoRemote
	// name
	// Name
	// zero
	// END DEBUGGING
	// ApplicationProtectionGroupsRpoRemoteNameZero captures enum value "zero"
	ApplicationProtectionGroupsRpoRemoteNameZero string = "zero"

	// BEGIN DEBUGGING
	// ApplicationProtectionGroupsRpoRemote
	// ApplicationProtectionGroupsRpoRemote
	// name
	// Name
	// hourly
	// END DEBUGGING
	// ApplicationProtectionGroupsRpoRemoteNameHourly captures enum value "hourly"
	ApplicationProtectionGroupsRpoRemoteNameHourly string = "hourly"

	// BEGIN DEBUGGING
	// ApplicationProtectionGroupsRpoRemote
	// ApplicationProtectionGroupsRpoRemote
	// name
	// Name
	// 6_hourly
	// END DEBUGGING
	// ApplicationProtectionGroupsRpoRemoteNameNr6Hourly captures enum value "6_hourly"
	ApplicationProtectionGroupsRpoRemoteNameNr6Hourly string = "6_hourly"

	// BEGIN DEBUGGING
	// ApplicationProtectionGroupsRpoRemote
	// ApplicationProtectionGroupsRpoRemote
	// name
	// Name
	// 15_minutely
	// END DEBUGGING
	// ApplicationProtectionGroupsRpoRemoteNameNr15Minutely captures enum value "15_minutely"
	ApplicationProtectionGroupsRpoRemoteNameNr15Minutely string = "15_minutely"
)

// prop value enum
func (m *ApplicationProtectionGroupsRpoRemote) validateNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, applicationProtectionGroupsRpoRemoteTypeNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ApplicationProtectionGroupsRpoRemote) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	// value enum
	if err := m.validateNameEnum("rpo"+"."+"remote"+"."+"name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this application protection groups rpo remote based on the context it is used
func (m *ApplicationProtectionGroupsRpoRemote) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDescription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationProtectionGroupsRpoRemote) contextValidateDescription(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "rpo"+"."+"remote"+"."+"description", "body", string(m.Description)); err != nil {
		return err
	}

	return nil
}

func (m *ApplicationProtectionGroupsRpoRemote) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "rpo"+"."+"remote"+"."+"name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApplicationProtectionGroupsRpoRemote) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplicationProtectionGroupsRpoRemote) UnmarshalBinary(b []byte) error {
	var res ApplicationProtectionGroupsRpoRemote
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
