// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Chassis chassis
//
// swagger:model chassis
type Chassis struct {

	// List of FRUs in chassis.
	Frus []*ChassisFrusItems0 `json:"frus,omitempty"`

	// id
	// Example: 21352005981
	ID string `json:"id,omitempty"`

	// List of nodes in chassis.
	Nodes []*ChassisNodesItems0 `json:"nodes,omitempty"`

	// List of shelves in chassis.
	Shelves []*ShelfReference `json:"shelves,omitempty"`

	// state
	// Enum: [ok error]
	State string `json:"state,omitempty"`
}

// Validate validates this chassis
func (m *Chassis) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFrus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShelves(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Chassis) validateFrus(formats strfmt.Registry) error {
	if swag.IsZero(m.Frus) { // not required
		return nil
	}

	for i := 0; i < len(m.Frus); i++ {
		if swag.IsZero(m.Frus[i]) { // not required
			continue
		}

		if m.Frus[i] != nil {
			if err := m.Frus[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("frus" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Chassis) validateNodes(formats strfmt.Registry) error {
	if swag.IsZero(m.Nodes) { // not required
		return nil
	}

	for i := 0; i < len(m.Nodes); i++ {
		if swag.IsZero(m.Nodes[i]) { // not required
			continue
		}

		if m.Nodes[i] != nil {
			if err := m.Nodes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Chassis) validateShelves(formats strfmt.Registry) error {
	if swag.IsZero(m.Shelves) { // not required
		return nil
	}

	for i := 0; i < len(m.Shelves); i++ {
		if swag.IsZero(m.Shelves[i]) { // not required
			continue
		}

		if m.Shelves[i] != nil {
			if err := m.Shelves[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("shelves" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var chassisTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ok","error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		chassisTypeStatePropEnum = append(chassisTypeStatePropEnum, v)
	}
}

const (

	// BEGIN RIPPY DEBUGGING
	// chassis
	// Chassis
	// state
	// State
	// ok
	// END RIPPY DEBUGGING
	// ChassisStateOk captures enum value "ok"
	ChassisStateOk string = "ok"

	// BEGIN RIPPY DEBUGGING
	// chassis
	// Chassis
	// state
	// State
	// error
	// END RIPPY DEBUGGING
	// ChassisStateError captures enum value "error"
	ChassisStateError string = "error"
)

// prop value enum
func (m *Chassis) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, chassisTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Chassis) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this chassis based on the context it is used
func (m *Chassis) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFrus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShelves(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Chassis) contextValidateFrus(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Frus); i++ {

		if m.Frus[i] != nil {
			if err := m.Frus[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("frus" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Chassis) contextValidateNodes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Nodes); i++ {

		if m.Nodes[i] != nil {
			if err := m.Nodes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Chassis) contextValidateShelves(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Shelves); i++ {

		if m.Shelves[i] != nil {
			if err := m.Shelves[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("shelves" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Chassis) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Chassis) UnmarshalBinary(b []byte) error {
	var res Chassis
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ChassisFrusItems0 chassis frus items0
//
// swagger:model ChassisFrusItems0
type ChassisFrusItems0 struct {

	// id
	ID string `json:"id,omitempty"`

	// state
	// Enum: [ok error]
	State string `json:"state,omitempty"`

	// type
	// Enum: [fan psu]
	Type string `json:"type,omitempty"`
}

// Validate validates this chassis frus items0
func (m *ChassisFrusItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var chassisFrusItems0TypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ok","error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		chassisFrusItems0TypeStatePropEnum = append(chassisFrusItems0TypeStatePropEnum, v)
	}
}

const (

	// BEGIN RIPPY DEBUGGING
	// ChassisFrusItems0
	// ChassisFrusItems0
	// state
	// State
	// ok
	// END RIPPY DEBUGGING
	// ChassisFrusItems0StateOk captures enum value "ok"
	ChassisFrusItems0StateOk string = "ok"

	// BEGIN RIPPY DEBUGGING
	// ChassisFrusItems0
	// ChassisFrusItems0
	// state
	// State
	// error
	// END RIPPY DEBUGGING
	// ChassisFrusItems0StateError captures enum value "error"
	ChassisFrusItems0StateError string = "error"
)

// prop value enum
func (m *ChassisFrusItems0) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, chassisFrusItems0TypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ChassisFrusItems0) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

var chassisFrusItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["fan","psu"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		chassisFrusItems0TypeTypePropEnum = append(chassisFrusItems0TypeTypePropEnum, v)
	}
}

const (

	// BEGIN RIPPY DEBUGGING
	// ChassisFrusItems0
	// ChassisFrusItems0
	// type
	// Type
	// fan
	// END RIPPY DEBUGGING
	// ChassisFrusItems0TypeFan captures enum value "fan"
	ChassisFrusItems0TypeFan string = "fan"

	// BEGIN RIPPY DEBUGGING
	// ChassisFrusItems0
	// ChassisFrusItems0
	// type
	// Type
	// psu
	// END RIPPY DEBUGGING
	// ChassisFrusItems0TypePsu captures enum value "psu"
	ChassisFrusItems0TypePsu string = "psu"
)

// prop value enum
func (m *ChassisFrusItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, chassisFrusItems0TypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ChassisFrusItems0) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this chassis frus items0 based on context it is used
func (m *ChassisFrusItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ChassisFrusItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChassisFrusItems0) UnmarshalBinary(b []byte) error {
	var res ChassisFrusItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ChassisNodesItems0 chassis nodes items0
//
// swagger:model ChassisNodesItems0
type ChassisNodesItems0 struct {

	// links
	Links *ChassisNodesItems0Links `json:"_links,omitempty"`

	// name
	// Example: node1
	Name string `json:"name,omitempty"`

	// uuid
	// Example: 1cd8a442-86d1-11e0-ae1c-123478563412
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this chassis nodes items0
func (m *ChassisNodesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChassisNodesItems0) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this chassis nodes items0 based on the context it is used
func (m *ChassisNodesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChassisNodesItems0) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ChassisNodesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChassisNodesItems0) UnmarshalBinary(b []byte) error {
	var res ChassisNodesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ChassisNodesItems0Links chassis nodes items0 links
//
// swagger:model ChassisNodesItems0Links
type ChassisNodesItems0Links struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this chassis nodes items0 links
func (m *ChassisNodesItems0Links) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChassisNodesItems0Links) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this chassis nodes items0 links based on the context it is used
func (m *ChassisNodesItems0Links) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChassisNodesItems0Links) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ChassisNodesItems0Links) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChassisNodesItems0Links) UnmarshalBinary(b []byte) error {
	var res ChassisNodesItems0Links
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HELLO RIPPY
