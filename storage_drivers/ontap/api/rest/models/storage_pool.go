// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StoragePool storage pool
//
// swagger:model storage_pool
type StoragePool struct {

	// links
	Links *StoragePoolLinks `json:"_links,omitempty"`

	// capacity
	Capacity *StoragePoolCapacity `json:"capacity,omitempty"`

	// health
	Health *StoragePoolHealth `json:"health,omitempty"`

	// Storage pool name.
	Name string `json:"name,omitempty"`

	// Nodes that can use this storage pool for their aggregates.
	Nodes []*NodeReference `json:"nodes,omitempty"`

	// Storage type for the disks used to create the storage pool.
	// Read Only: true
	// Enum: [SSD]
	StorageType string `json:"storage_type,omitempty"`

	// Storage pool UUID.
	// Read Only: true
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this storage pool
func (m *StoragePool) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCapacity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHealth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StoragePool) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *StoragePool) validateCapacity(formats strfmt.Registry) error {
	if swag.IsZero(m.Capacity) { // not required
		return nil
	}

	if m.Capacity != nil {
		if err := m.Capacity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("capacity")
			}
			return err
		}
	}

	return nil
}

func (m *StoragePool) validateHealth(formats strfmt.Registry) error {
	if swag.IsZero(m.Health) { // not required
		return nil
	}

	if m.Health != nil {
		if err := m.Health.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("health")
			}
			return err
		}
	}

	return nil
}

func (m *StoragePool) validateNodes(formats strfmt.Registry) error {
	if swag.IsZero(m.Nodes) { // not required
		return nil
	}

	for i := 0; i < len(m.Nodes); i++ {
		if swag.IsZero(m.Nodes[i]) { // not required
			continue
		}

		if m.Nodes[i] != nil {
			if err := m.Nodes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var storagePoolTypeStorageTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SSD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storagePoolTypeStorageTypePropEnum = append(storagePoolTypeStorageTypePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// storage_pool
	// StoragePool
	// storage_type
	// StorageType
	// SSD
	// END DEBUGGING
	// StoragePoolStorageTypeSSD captures enum value "SSD"
	StoragePoolStorageTypeSSD string = "SSD"
)

// prop value enum
func (m *StoragePool) validateStorageTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, storagePoolTypeStorageTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StoragePool) validateStorageType(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageType) { // not required
		return nil
	}

	// value enum
	if err := m.validateStorageTypeEnum("storage_type", "body", m.StorageType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this storage pool based on the context it is used
func (m *StoragePool) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCapacity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHealth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StoragePool) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *StoragePool) contextValidateCapacity(ctx context.Context, formats strfmt.Registry) error {

	if m.Capacity != nil {
		if err := m.Capacity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("capacity")
			}
			return err
		}
	}

	return nil
}

func (m *StoragePool) contextValidateHealth(ctx context.Context, formats strfmt.Registry) error {

	if m.Health != nil {
		if err := m.Health.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("health")
			}
			return err
		}
	}

	return nil
}

func (m *StoragePool) contextValidateNodes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Nodes); i++ {

		if m.Nodes[i] != nil {
			if err := m.Nodes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StoragePool) contextValidateStorageType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "storage_type", "body", string(m.StorageType)); err != nil {
		return err
	}

	return nil
}

func (m *StoragePool) contextValidateUUID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "uuid", "body", string(m.UUID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StoragePool) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StoragePool) UnmarshalBinary(b []byte) error {
	var res StoragePool
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StoragePoolCapacity storage pool capacity
//
// swagger:model StoragePoolCapacity
type StoragePoolCapacity struct {

	// The number of disks in the storage pool.
	DiskCount int64 `json:"disk_count,omitempty"`

	// Properties of each disk used in the shared storage pool.
	Disks []*StoragePoolDisk `json:"disks,omitempty"`

	// Remaining usable capacity in the flash pool, in bytes.
	// Read Only: true
	Remaining int64 `json:"remaining,omitempty"`

	// Properties of spare allocation units.
	SpareAllocationUnits []*StoragePoolSpareAllocationUnit `json:"spare_allocation_units,omitempty"`

	// Total size of the flash pool, in bytes.
	// Read Only: true
	Total int64 `json:"total,omitempty"`

	// Information about the storage pool allocation units participating in the cache tier of an aggregate.
	UsedAllocationUnits []*StoragePoolUsedAllocationUnit `json:"used_allocation_units,omitempty"`
}

// Validate validates this storage pool capacity
func (m *StoragePoolCapacity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpareAllocationUnits(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsedAllocationUnits(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StoragePoolCapacity) validateDisks(formats strfmt.Registry) error {
	if swag.IsZero(m.Disks) { // not required
		return nil
	}

	for i := 0; i < len(m.Disks); i++ {
		if swag.IsZero(m.Disks[i]) { // not required
			continue
		}

		if m.Disks[i] != nil {
			if err := m.Disks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("capacity" + "." + "disks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StoragePoolCapacity) validateSpareAllocationUnits(formats strfmt.Registry) error {
	if swag.IsZero(m.SpareAllocationUnits) { // not required
		return nil
	}

	for i := 0; i < len(m.SpareAllocationUnits); i++ {
		if swag.IsZero(m.SpareAllocationUnits[i]) { // not required
			continue
		}

		if m.SpareAllocationUnits[i] != nil {
			if err := m.SpareAllocationUnits[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("capacity" + "." + "spare_allocation_units" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StoragePoolCapacity) validateUsedAllocationUnits(formats strfmt.Registry) error {
	if swag.IsZero(m.UsedAllocationUnits) { // not required
		return nil
	}

	for i := 0; i < len(m.UsedAllocationUnits); i++ {
		if swag.IsZero(m.UsedAllocationUnits[i]) { // not required
			continue
		}

		if m.UsedAllocationUnits[i] != nil {
			if err := m.UsedAllocationUnits[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("capacity" + "." + "used_allocation_units" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this storage pool capacity based on the context it is used
func (m *StoragePoolCapacity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDisks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemaining(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSpareAllocationUnits(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotal(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsedAllocationUnits(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StoragePoolCapacity) contextValidateDisks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Disks); i++ {

		if m.Disks[i] != nil {
			if err := m.Disks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("capacity" + "." + "disks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StoragePoolCapacity) contextValidateRemaining(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "capacity"+"."+"remaining", "body", int64(m.Remaining)); err != nil {
		return err
	}

	return nil
}

func (m *StoragePoolCapacity) contextValidateSpareAllocationUnits(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SpareAllocationUnits); i++ {

		if m.SpareAllocationUnits[i] != nil {
			if err := m.SpareAllocationUnits[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("capacity" + "." + "spare_allocation_units" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StoragePoolCapacity) contextValidateTotal(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "capacity"+"."+"total", "body", int64(m.Total)); err != nil {
		return err
	}

	return nil
}

func (m *StoragePoolCapacity) contextValidateUsedAllocationUnits(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UsedAllocationUnits); i++ {

		if m.UsedAllocationUnits[i] != nil {
			if err := m.UsedAllocationUnits[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("capacity" + "." + "used_allocation_units" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *StoragePoolCapacity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StoragePoolCapacity) UnmarshalBinary(b []byte) error {
	var res StoragePoolCapacity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StoragePoolHealth Properties that outline shared storage pool health.
//
// swagger:model StoragePoolHealth
type StoragePoolHealth struct {

	// Indicates whether the storage pool is able to participate in provisioning operations.
	// Read Only: true
	IsHealthy *bool `json:"is_healthy,omitempty"`

	// The state of the shared storage pool.
	// Read Only: true
	// Enum: [normal degraded creating deleting reassigning growing]
	State string `json:"state,omitempty"`

	// Indicates why the storage pool is unhealthy. This property is not returned for healthy storage pools.
	// Read Only: true
	UnhealthyReason *Error `json:"unhealthy_reason,omitempty"`
}

// Validate validates this storage pool health
func (m *StoragePoolHealth) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnhealthyReason(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var storagePoolHealthTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["normal","degraded","creating","deleting","reassigning","growing"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storagePoolHealthTypeStatePropEnum = append(storagePoolHealthTypeStatePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// StoragePoolHealth
	// StoragePoolHealth
	// state
	// State
	// normal
	// END DEBUGGING
	// StoragePoolHealthStateNormal captures enum value "normal"
	StoragePoolHealthStateNormal string = "normal"

	// BEGIN DEBUGGING
	// StoragePoolHealth
	// StoragePoolHealth
	// state
	// State
	// degraded
	// END DEBUGGING
	// StoragePoolHealthStateDegraded captures enum value "degraded"
	StoragePoolHealthStateDegraded string = "degraded"

	// BEGIN DEBUGGING
	// StoragePoolHealth
	// StoragePoolHealth
	// state
	// State
	// creating
	// END DEBUGGING
	// StoragePoolHealthStateCreating captures enum value "creating"
	StoragePoolHealthStateCreating string = "creating"

	// BEGIN DEBUGGING
	// StoragePoolHealth
	// StoragePoolHealth
	// state
	// State
	// deleting
	// END DEBUGGING
	// StoragePoolHealthStateDeleting captures enum value "deleting"
	StoragePoolHealthStateDeleting string = "deleting"

	// BEGIN DEBUGGING
	// StoragePoolHealth
	// StoragePoolHealth
	// state
	// State
	// reassigning
	// END DEBUGGING
	// StoragePoolHealthStateReassigning captures enum value "reassigning"
	StoragePoolHealthStateReassigning string = "reassigning"

	// BEGIN DEBUGGING
	// StoragePoolHealth
	// StoragePoolHealth
	// state
	// State
	// growing
	// END DEBUGGING
	// StoragePoolHealthStateGrowing captures enum value "growing"
	StoragePoolHealthStateGrowing string = "growing"
)

// prop value enum
func (m *StoragePoolHealth) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, storagePoolHealthTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StoragePoolHealth) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("health"+"."+"state", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *StoragePoolHealth) validateUnhealthyReason(formats strfmt.Registry) error {
	if swag.IsZero(m.UnhealthyReason) { // not required
		return nil
	}

	if m.UnhealthyReason != nil {
		if err := m.UnhealthyReason.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("health" + "." + "unhealthy_reason")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this storage pool health based on the context it is used
func (m *StoragePoolHealth) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIsHealthy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUnhealthyReason(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StoragePoolHealth) contextValidateIsHealthy(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "health"+"."+"is_healthy", "body", m.IsHealthy); err != nil {
		return err
	}

	return nil
}

func (m *StoragePoolHealth) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "health"+"."+"state", "body", string(m.State)); err != nil {
		return err
	}

	return nil
}

func (m *StoragePoolHealth) contextValidateUnhealthyReason(ctx context.Context, formats strfmt.Registry) error {

	if m.UnhealthyReason != nil {
		if err := m.UnhealthyReason.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("health" + "." + "unhealthy_reason")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StoragePoolHealth) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StoragePoolHealth) UnmarshalBinary(b []byte) error {
	var res StoragePoolHealth
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StoragePoolLinks storage pool links
//
// swagger:model StoragePoolLinks
type StoragePoolLinks struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this storage pool links
func (m *StoragePoolLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StoragePoolLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this storage pool links based on the context it is used
func (m *StoragePoolLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StoragePoolLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StoragePoolLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StoragePoolLinks) UnmarshalBinary(b []byte) error {
	var res StoragePoolLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
