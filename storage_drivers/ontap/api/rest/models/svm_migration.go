// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SvmMigration Provides information on SVM migration, default and user specified configurations, the state of the migration, and volume transfer metrics.
//
// swagger:model svm_migration
type SvmMigration struct {

	// Optional property that when set to true automatically performs cutover when the migration state reaches "ready for cutover".
	AutoCutover *bool `json:"auto_cutover,omitempty"`

	// Optional property that when set to true automatically cleans up the SVM on the source cluster after the migration cutover.
	AutoSourceCleanup *bool `json:"auto_source_cleanup,omitempty"`

	// Optional property that when set to true performs only migration pre-checks not the actual migration.
	CheckOnly *bool `json:"check_only,omitempty"`

	// current operation
	// Read Only: true
	CurrentOperation SvmMigrationOperation `json:"current_operation,omitempty"`

	// destination
	Destination *SvmMigrationDestination `json:"destination,omitempty"`

	// last failed state
	// Read Only: true
	LastFailedState SvmMigrationState `json:"last_failed_state,omitempty"`

	// last operation
	// Read Only: true
	// Enum: [none start resume pause cleanup cutover]
	LastOperation string `json:"last_operation,omitempty"`

	// Errors and warnings returned/displayed during migration.
	// Read Only: true
	Messages []*SvmMigrationMessagesItems0 `json:"messages,omitempty"`

	// Indicates if the migration has progressed beyond the point of no return. When true, the migration cannot be aborted or paused. When false, the migration can be paused or aborted.
	// Read Only: true
	PointOfNoReturn *bool `json:"point_of_no_return,omitempty"`

	// Number of times SVM migration was restarted since initially started.
	// Read Only: true
	RestartCount int64 `json:"restart_count,omitempty"`

	// source
	Source *SvmMigrationSource `json:"source,omitempty"`

	// state
	// Read Only: true
	State SvmMigrationState `json:"state,omitempty"`

	// time metrics
	TimeMetrics *SvmMigrationTimeMetrics `json:"time_metrics,omitempty"`

	// SVM migration UUID
	// Example: 4ea7a442-86d1-11e0-ae1c-123478563412
	// Read Only: true
	// Format: uuid
	UUID strfmt.UUID `json:"uuid,omitempty"`
}

// Validate validates this svm migration
func (m *SvmMigration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrentOperation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestination(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastFailedState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastOperation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeMetrics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SvmMigration) validateCurrentOperation(formats strfmt.Registry) error {
	if swag.IsZero(m.CurrentOperation) { // not required
		return nil
	}

	if err := m.CurrentOperation.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("current_operation")
		}
		return err
	}

	return nil
}

func (m *SvmMigration) validateDestination(formats strfmt.Registry) error {
	if swag.IsZero(m.Destination) { // not required
		return nil
	}

	if m.Destination != nil {
		if err := m.Destination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destination")
			}
			return err
		}
	}

	return nil
}

func (m *SvmMigration) validateLastFailedState(formats strfmt.Registry) error {
	if swag.IsZero(m.LastFailedState) { // not required
		return nil
	}

	if err := m.LastFailedState.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("last_failed_state")
		}
		return err
	}

	return nil
}

var svmMigrationTypeLastOperationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["none","start","resume","pause","cleanup","cutover"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		svmMigrationTypeLastOperationPropEnum = append(svmMigrationTypeLastOperationPropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// svm_migration
	// SvmMigration
	// last_operation
	// LastOperation
	// none
	// END DEBUGGING
	// SvmMigrationLastOperationNone captures enum value "none"
	SvmMigrationLastOperationNone string = "none"

	// BEGIN DEBUGGING
	// svm_migration
	// SvmMigration
	// last_operation
	// LastOperation
	// start
	// END DEBUGGING
	// SvmMigrationLastOperationStart captures enum value "start"
	SvmMigrationLastOperationStart string = "start"

	// BEGIN DEBUGGING
	// svm_migration
	// SvmMigration
	// last_operation
	// LastOperation
	// resume
	// END DEBUGGING
	// SvmMigrationLastOperationResume captures enum value "resume"
	SvmMigrationLastOperationResume string = "resume"

	// BEGIN DEBUGGING
	// svm_migration
	// SvmMigration
	// last_operation
	// LastOperation
	// pause
	// END DEBUGGING
	// SvmMigrationLastOperationPause captures enum value "pause"
	SvmMigrationLastOperationPause string = "pause"

	// BEGIN DEBUGGING
	// svm_migration
	// SvmMigration
	// last_operation
	// LastOperation
	// cleanup
	// END DEBUGGING
	// SvmMigrationLastOperationCleanup captures enum value "cleanup"
	SvmMigrationLastOperationCleanup string = "cleanup"

	// BEGIN DEBUGGING
	// svm_migration
	// SvmMigration
	// last_operation
	// LastOperation
	// cutover
	// END DEBUGGING
	// SvmMigrationLastOperationCutover captures enum value "cutover"
	SvmMigrationLastOperationCutover string = "cutover"
)

// prop value enum
func (m *SvmMigration) validateLastOperationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, svmMigrationTypeLastOperationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SvmMigration) validateLastOperation(formats strfmt.Registry) error {
	if swag.IsZero(m.LastOperation) { // not required
		return nil
	}

	// value enum
	if err := m.validateLastOperationEnum("last_operation", "body", m.LastOperation); err != nil {
		return err
	}

	return nil
}

func (m *SvmMigration) validateMessages(formats strfmt.Registry) error {
	if swag.IsZero(m.Messages) { // not required
		return nil
	}

	for i := 0; i < len(m.Messages); i++ {
		if swag.IsZero(m.Messages[i]) { // not required
			continue
		}

		if m.Messages[i] != nil {
			if err := m.Messages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("messages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SvmMigration) validateSource(formats strfmt.Registry) error {
	if swag.IsZero(m.Source) { // not required
		return nil
	}

	if m.Source != nil {
		if err := m.Source.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

func (m *SvmMigration) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	if err := m.State.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("state")
		}
		return err
	}

	return nil
}

func (m *SvmMigration) validateTimeMetrics(formats strfmt.Registry) error {
	if swag.IsZero(m.TimeMetrics) { // not required
		return nil
	}

	if m.TimeMetrics != nil {
		if err := m.TimeMetrics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("time_metrics")
			}
			return err
		}
	}

	return nil
}

func (m *SvmMigration) validateUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UUID) { // not required
		return nil
	}

	if err := validate.FormatOf("uuid", "body", "uuid", m.UUID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this svm migration based on the context it is used
func (m *SvmMigration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCurrentOperation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDestination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastFailedState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastOperation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMessages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePointOfNoReturn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestartCount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimeMetrics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SvmMigration) contextValidateCurrentOperation(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CurrentOperation.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("current_operation")
		}
		return err
	}

	return nil
}

func (m *SvmMigration) contextValidateDestination(ctx context.Context, formats strfmt.Registry) error {

	if m.Destination != nil {
		if err := m.Destination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destination")
			}
			return err
		}
	}

	return nil
}

func (m *SvmMigration) contextValidateLastFailedState(ctx context.Context, formats strfmt.Registry) error {

	if err := m.LastFailedState.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("last_failed_state")
		}
		return err
	}

	return nil
}

func (m *SvmMigration) contextValidateLastOperation(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "last_operation", "body", string(m.LastOperation)); err != nil {
		return err
	}

	return nil
}

func (m *SvmMigration) contextValidateMessages(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "messages", "body", []*SvmMigrationMessagesItems0(m.Messages)); err != nil {
		return err
	}

	for i := 0; i < len(m.Messages); i++ {

		if m.Messages[i] != nil {
			if err := m.Messages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("messages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SvmMigration) contextValidatePointOfNoReturn(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "point_of_no_return", "body", m.PointOfNoReturn); err != nil {
		return err
	}

	return nil
}

func (m *SvmMigration) contextValidateRestartCount(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "restart_count", "body", int64(m.RestartCount)); err != nil {
		return err
	}

	return nil
}

func (m *SvmMigration) contextValidateSource(ctx context.Context, formats strfmt.Registry) error {

	if m.Source != nil {
		if err := m.Source.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

func (m *SvmMigration) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if err := m.State.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("state")
		}
		return err
	}

	return nil
}

func (m *SvmMigration) contextValidateTimeMetrics(ctx context.Context, formats strfmt.Registry) error {

	if m.TimeMetrics != nil {
		if err := m.TimeMetrics.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("time_metrics")
			}
			return err
		}
	}

	return nil
}

func (m *SvmMigration) contextValidateUUID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "uuid", "body", strfmt.UUID(m.UUID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SvmMigration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SvmMigration) UnmarshalBinary(b []byte) error {
	var res SvmMigration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SvmMigrationDestination Destination cluster details for the SVM migration.
//
// swagger:model SvmMigrationDestination
type SvmMigrationDestination struct {

	// ipspace
	Ipspace *SvmMigrationDestinationIpspace `json:"ipspace,omitempty"`

	// volume placement
	VolumePlacement *SvmMigrationDestinationVolumePlacement `json:"volume_placement,omitempty"`
}

// Validate validates this svm migration destination
func (m *SvmMigrationDestination) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIpspace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumePlacement(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SvmMigrationDestination) validateIpspace(formats strfmt.Registry) error {
	if swag.IsZero(m.Ipspace) { // not required
		return nil
	}

	if m.Ipspace != nil {
		if err := m.Ipspace.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destination" + "." + "ipspace")
			}
			return err
		}
	}

	return nil
}

func (m *SvmMigrationDestination) validateVolumePlacement(formats strfmt.Registry) error {
	if swag.IsZero(m.VolumePlacement) { // not required
		return nil
	}

	if m.VolumePlacement != nil {
		if err := m.VolumePlacement.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destination" + "." + "volume_placement")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this svm migration destination based on the context it is used
func (m *SvmMigrationDestination) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIpspace(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVolumePlacement(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SvmMigrationDestination) contextValidateIpspace(ctx context.Context, formats strfmt.Registry) error {

	if m.Ipspace != nil {
		if err := m.Ipspace.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destination" + "." + "ipspace")
			}
			return err
		}
	}

	return nil
}

func (m *SvmMigrationDestination) contextValidateVolumePlacement(ctx context.Context, formats strfmt.Registry) error {

	if m.VolumePlacement != nil {
		if err := m.VolumePlacement.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destination" + "." + "volume_placement")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SvmMigrationDestination) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SvmMigrationDestination) UnmarshalBinary(b []byte) error {
	var res SvmMigrationDestination
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SvmMigrationDestinationIpspace Optional property used to specify which IPspace to use for the SVM. By default, the "default" ipspace is used.
//
// swagger:model SvmMigrationDestinationIpspace
type SvmMigrationDestinationIpspace struct {

	// links
	Links *SvmMigrationDestinationIpspaceLinks `json:"_links,omitempty"`

	// IPspace name
	// Example: exchange
	Name string `json:"name,omitempty"`

	// IPspace UUID
	// Example: 1cd8a442-86d1-11e0-ae1c-123478563412
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this svm migration destination ipspace
func (m *SvmMigrationDestinationIpspace) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SvmMigrationDestinationIpspace) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destination" + "." + "ipspace" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this svm migration destination ipspace based on the context it is used
func (m *SvmMigrationDestinationIpspace) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SvmMigrationDestinationIpspace) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destination" + "." + "ipspace" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SvmMigrationDestinationIpspace) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SvmMigrationDestinationIpspace) UnmarshalBinary(b []byte) error {
	var res SvmMigrationDestinationIpspace
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SvmMigrationDestinationIpspaceLinks svm migration destination ipspace links
//
// swagger:model SvmMigrationDestinationIpspaceLinks
type SvmMigrationDestinationIpspaceLinks struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this svm migration destination ipspace links
func (m *SvmMigrationDestinationIpspaceLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SvmMigrationDestinationIpspaceLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destination" + "." + "ipspace" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this svm migration destination ipspace links based on the context it is used
func (m *SvmMigrationDestinationIpspaceLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SvmMigrationDestinationIpspaceLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destination" + "." + "ipspace" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SvmMigrationDestinationIpspaceLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SvmMigrationDestinationIpspaceLinks) UnmarshalBinary(b []byte) error {
	var res SvmMigrationDestinationIpspaceLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SvmMigrationDestinationVolumePlacement Optional property to specify the source volume placement in the destination.
//
// swagger:model SvmMigrationDestinationVolumePlacement
type SvmMigrationDestinationVolumePlacement struct {

	// Optional property used to specify the list of desired aggregates to use for volume creation in the destination.
	Aggregates []*SvmMigrationDestinationVolumePlacementAggregatesItems0 `json:"aggregates,omitempty"`
}

// Validate validates this svm migration destination volume placement
func (m *SvmMigrationDestinationVolumePlacement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAggregates(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SvmMigrationDestinationVolumePlacement) validateAggregates(formats strfmt.Registry) error {
	if swag.IsZero(m.Aggregates) { // not required
		return nil
	}

	for i := 0; i < len(m.Aggregates); i++ {
		if swag.IsZero(m.Aggregates[i]) { // not required
			continue
		}

		if m.Aggregates[i] != nil {
			if err := m.Aggregates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("destination" + "." + "volume_placement" + "." + "aggregates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this svm migration destination volume placement based on the context it is used
func (m *SvmMigrationDestinationVolumePlacement) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAggregates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SvmMigrationDestinationVolumePlacement) contextValidateAggregates(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Aggregates); i++ {

		if m.Aggregates[i] != nil {
			if err := m.Aggregates[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("destination" + "." + "volume_placement" + "." + "aggregates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SvmMigrationDestinationVolumePlacement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SvmMigrationDestinationVolumePlacement) UnmarshalBinary(b []byte) error {
	var res SvmMigrationDestinationVolumePlacement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SvmMigrationDestinationVolumePlacementAggregatesItems0 Aggregate
//
// swagger:model SvmMigrationDestinationVolumePlacementAggregatesItems0
type SvmMigrationDestinationVolumePlacementAggregatesItems0 struct {

	// links
	Links *SvmMigrationDestinationVolumePlacementAggregatesItems0Links `json:"_links,omitempty"`

	// name
	// Example: aggr1
	Name string `json:"name,omitempty"`

	// uuid
	// Example: 1cd8a442-86d1-11e0-ae1c-123478563412
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this svm migration destination volume placement aggregates items0
func (m *SvmMigrationDestinationVolumePlacementAggregatesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SvmMigrationDestinationVolumePlacementAggregatesItems0) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this svm migration destination volume placement aggregates items0 based on the context it is used
func (m *SvmMigrationDestinationVolumePlacementAggregatesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SvmMigrationDestinationVolumePlacementAggregatesItems0) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SvmMigrationDestinationVolumePlacementAggregatesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SvmMigrationDestinationVolumePlacementAggregatesItems0) UnmarshalBinary(b []byte) error {
	var res SvmMigrationDestinationVolumePlacementAggregatesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SvmMigrationDestinationVolumePlacementAggregatesItems0Links svm migration destination volume placement aggregates items0 links
//
// swagger:model SvmMigrationDestinationVolumePlacementAggregatesItems0Links
type SvmMigrationDestinationVolumePlacementAggregatesItems0Links struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this svm migration destination volume placement aggregates items0 links
func (m *SvmMigrationDestinationVolumePlacementAggregatesItems0Links) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SvmMigrationDestinationVolumePlacementAggregatesItems0Links) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this svm migration destination volume placement aggregates items0 links based on the context it is used
func (m *SvmMigrationDestinationVolumePlacementAggregatesItems0Links) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SvmMigrationDestinationVolumePlacementAggregatesItems0Links) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SvmMigrationDestinationVolumePlacementAggregatesItems0Links) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SvmMigrationDestinationVolumePlacementAggregatesItems0Links) UnmarshalBinary(b []byte) error {
	var res SvmMigrationDestinationVolumePlacementAggregatesItems0Links
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SvmMigrationMessagesItems0 Specifies failure codes and messages.
//
// swagger:model SvmMigrationMessagesItems0
type SvmMigrationMessagesItems0 struct {

	// Message code
	Code int64 `json:"code,omitempty"`

	// Detailed message of warning or error.
	Message string `json:"message,omitempty"`
}

// Validate validates this svm migration messages items0
func (m *SvmMigrationMessagesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this svm migration messages items0 based on the context it is used
func (m *SvmMigrationMessagesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *SvmMigrationMessagesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SvmMigrationMessagesItems0) UnmarshalBinary(b []byte) error {
	var res SvmMigrationMessagesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SvmMigrationSource Source cluster details for the SVM migration.
//
// swagger:model SvmMigrationSource
type SvmMigrationSource struct {

	// cluster
	Cluster *SvmMigrationSourceCluster `json:"cluster,omitempty"`

	// svm
	Svm *SvmMigrationSourceSvm `json:"svm,omitempty"`
}

// Validate validates this svm migration source
func (m *SvmMigrationSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvm(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SvmMigrationSource) validateCluster(formats strfmt.Registry) error {
	if swag.IsZero(m.Cluster) { // not required
		return nil
	}

	if m.Cluster != nil {
		if err := m.Cluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source" + "." + "cluster")
			}
			return err
		}
	}

	return nil
}

func (m *SvmMigrationSource) validateSvm(formats strfmt.Registry) error {
	if swag.IsZero(m.Svm) { // not required
		return nil
	}

	if m.Svm != nil {
		if err := m.Svm.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source" + "." + "svm")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this svm migration source based on the context it is used
func (m *SvmMigrationSource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSvm(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SvmMigrationSource) contextValidateCluster(ctx context.Context, formats strfmt.Registry) error {

	if m.Cluster != nil {
		if err := m.Cluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source" + "." + "cluster")
			}
			return err
		}
	}

	return nil
}

func (m *SvmMigrationSource) contextValidateSvm(ctx context.Context, formats strfmt.Registry) error {

	if m.Svm != nil {
		if err := m.Svm.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source" + "." + "svm")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SvmMigrationSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SvmMigrationSource) UnmarshalBinary(b []byte) error {
	var res SvmMigrationSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SvmMigrationSourceCluster Source cluster for the SVM migration.
//
// swagger:model SvmMigrationSourceCluster
type SvmMigrationSourceCluster struct {

	// links
	Links *SvmMigrationSourceClusterLinks `json:"_links,omitempty"`

	// name
	// Example: cluster1
	Name string `json:"name,omitempty"`

	// uuid
	// Example: 1cd8a442-86d1-11e0-ae1c-123478563412
	// Format: uuid
	UUID strfmt.UUID `json:"uuid,omitempty"`
}

// Validate validates this svm migration source cluster
func (m *SvmMigrationSourceCluster) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SvmMigrationSourceCluster) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source" + "." + "cluster" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (m *SvmMigrationSourceCluster) validateUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UUID) { // not required
		return nil
	}

	if err := validate.FormatOf("source"+"."+"cluster"+"."+"uuid", "body", "uuid", m.UUID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this svm migration source cluster based on the context it is used
func (m *SvmMigrationSourceCluster) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SvmMigrationSourceCluster) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source" + "." + "cluster" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SvmMigrationSourceCluster) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SvmMigrationSourceCluster) UnmarshalBinary(b []byte) error {
	var res SvmMigrationSourceCluster
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SvmMigrationSourceClusterLinks svm migration source cluster links
//
// swagger:model SvmMigrationSourceClusterLinks
type SvmMigrationSourceClusterLinks struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this svm migration source cluster links
func (m *SvmMigrationSourceClusterLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SvmMigrationSourceClusterLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source" + "." + "cluster" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this svm migration source cluster links based on the context it is used
func (m *SvmMigrationSourceClusterLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SvmMigrationSourceClusterLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source" + "." + "cluster" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SvmMigrationSourceClusterLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SvmMigrationSourceClusterLinks) UnmarshalBinary(b []byte) error {
	var res SvmMigrationSourceClusterLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SvmMigrationSourceSvm Source SVM
//
// swagger:model SvmMigrationSourceSvm
type SvmMigrationSourceSvm struct {

	// links
	Links *SvmMigrationSourceSvmLinks `json:"_links,omitempty"`

	// The name of the SVM.
	//
	// Example: svm1
	Name string `json:"name,omitempty"`

	// The unique identifier of the SVM.
	//
	// Example: 02c9e252-41be-11e9-81d5-00a0986138f7
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this svm migration source svm
func (m *SvmMigrationSourceSvm) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SvmMigrationSourceSvm) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source" + "." + "svm" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this svm migration source svm based on the context it is used
func (m *SvmMigrationSourceSvm) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SvmMigrationSourceSvm) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source" + "." + "svm" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SvmMigrationSourceSvm) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SvmMigrationSourceSvm) UnmarshalBinary(b []byte) error {
	var res SvmMigrationSourceSvm
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SvmMigrationSourceSvmLinks svm migration source svm links
//
// swagger:model SvmMigrationSourceSvmLinks
type SvmMigrationSourceSvmLinks struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this svm migration source svm links
func (m *SvmMigrationSourceSvmLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SvmMigrationSourceSvmLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source" + "." + "svm" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this svm migration source svm links based on the context it is used
func (m *SvmMigrationSourceSvmLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SvmMigrationSourceSvmLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source" + "." + "svm" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SvmMigrationSourceSvmLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SvmMigrationSourceSvmLinks) UnmarshalBinary(b []byte) error {
	var res SvmMigrationSourceSvmLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SvmMigrationTimeMetrics Various time metrics details
//
// swagger:model SvmMigrationTimeMetrics
type SvmMigrationTimeMetrics struct {

	// Cutover end time
	// Example: 2020-12-02T19:30:19-08:00
	// Read Only: true
	// Format: date-time
	CutoverCompleteTime *strfmt.DateTime `json:"cutover_complete_time,omitempty"`

	// Cutover start time
	// Example: 2020-12-02T18:20:19-08:00
	// Read Only: true
	// Format: date-time
	CutoverStartTime *strfmt.DateTime `json:"cutover_start_time,omitempty"`

	// Cutover trigger time
	// Example: 2020-12-02T19:15:19-08:00
	// Read Only: true
	// Format: date-time
	CutoverTriggerTime *strfmt.DateTime `json:"cutover_trigger_time,omitempty"`

	// Migration end time
	// Example: 2020-12-02T19:36:19-08:00
	// Read Only: true
	// Format: date-time
	EndTime *strfmt.DateTime `json:"end_time,omitempty"`

	// Last migration pause time
	// Example: 2020-12-02T18:50:19-08:00
	// Read Only: true
	// Format: date-time
	LastPauseTime *strfmt.DateTime `json:"last_pause_time,omitempty"`

	// Last migration resume time
	// Example: 2020-12-02T18:54:19-08:00
	// Read Only: true
	// Format: date-time
	LastResumeTime *strfmt.DateTime `json:"last_resume_time,omitempty"`

	// Migration start time
	// Example: 2020-12-02T18:36:19-08:00
	// Read Only: true
	// Format: date-time
	StartTime *strfmt.DateTime `json:"start_time,omitempty"`
}

// Validate validates this svm migration time metrics
func (m *SvmMigrationTimeMetrics) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCutoverCompleteTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCutoverStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCutoverTriggerTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastPauseTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastResumeTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SvmMigrationTimeMetrics) validateCutoverCompleteTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CutoverCompleteTime) { // not required
		return nil
	}

	if err := validate.FormatOf("time_metrics"+"."+"cutover_complete_time", "body", "date-time", m.CutoverCompleteTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SvmMigrationTimeMetrics) validateCutoverStartTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CutoverStartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("time_metrics"+"."+"cutover_start_time", "body", "date-time", m.CutoverStartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SvmMigrationTimeMetrics) validateCutoverTriggerTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CutoverTriggerTime) { // not required
		return nil
	}

	if err := validate.FormatOf("time_metrics"+"."+"cutover_trigger_time", "body", "date-time", m.CutoverTriggerTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SvmMigrationTimeMetrics) validateEndTime(formats strfmt.Registry) error {
	if swag.IsZero(m.EndTime) { // not required
		return nil
	}

	if err := validate.FormatOf("time_metrics"+"."+"end_time", "body", "date-time", m.EndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SvmMigrationTimeMetrics) validateLastPauseTime(formats strfmt.Registry) error {
	if swag.IsZero(m.LastPauseTime) { // not required
		return nil
	}

	if err := validate.FormatOf("time_metrics"+"."+"last_pause_time", "body", "date-time", m.LastPauseTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SvmMigrationTimeMetrics) validateLastResumeTime(formats strfmt.Registry) error {
	if swag.IsZero(m.LastResumeTime) { // not required
		return nil
	}

	if err := validate.FormatOf("time_metrics"+"."+"last_resume_time", "body", "date-time", m.LastResumeTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SvmMigrationTimeMetrics) validateStartTime(formats strfmt.Registry) error {
	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("time_metrics"+"."+"start_time", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this svm migration time metrics based on the context it is used
func (m *SvmMigrationTimeMetrics) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCutoverCompleteTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCutoverStartTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCutoverTriggerTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEndTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastPauseTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastResumeTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStartTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SvmMigrationTimeMetrics) contextValidateCutoverCompleteTime(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "time_metrics"+"."+"cutover_complete_time", "body", m.CutoverCompleteTime); err != nil {
		return err
	}

	return nil
}

func (m *SvmMigrationTimeMetrics) contextValidateCutoverStartTime(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "time_metrics"+"."+"cutover_start_time", "body", m.CutoverStartTime); err != nil {
		return err
	}

	return nil
}

func (m *SvmMigrationTimeMetrics) contextValidateCutoverTriggerTime(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "time_metrics"+"."+"cutover_trigger_time", "body", m.CutoverTriggerTime); err != nil {
		return err
	}

	return nil
}

func (m *SvmMigrationTimeMetrics) contextValidateEndTime(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "time_metrics"+"."+"end_time", "body", m.EndTime); err != nil {
		return err
	}

	return nil
}

func (m *SvmMigrationTimeMetrics) contextValidateLastPauseTime(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "time_metrics"+"."+"last_pause_time", "body", m.LastPauseTime); err != nil {
		return err
	}

	return nil
}

func (m *SvmMigrationTimeMetrics) contextValidateLastResumeTime(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "time_metrics"+"."+"last_resume_time", "body", m.LastResumeTime); err != nil {
		return err
	}

	return nil
}

func (m *SvmMigrationTimeMetrics) contextValidateStartTime(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "time_metrics"+"."+"start_time", "body", m.StartTime); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SvmMigrationTimeMetrics) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SvmMigrationTimeMetrics) UnmarshalBinary(b []byte) error {
	var res SvmMigrationTimeMetrics
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
