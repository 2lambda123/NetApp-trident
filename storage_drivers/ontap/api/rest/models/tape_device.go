// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TapeDevice tape device
//
// swagger:model tape_device
type TapeDevice struct {

	// alias
	Alias *TapeDeviceAlias `json:"alias,omitempty"`

	// Block number.
	// Example: 0
	BlockNumber int64 `json:"block_number,omitempty"`

	// description
	// Example: QUANTUM LTO-8 ULTRIUM
	Description string `json:"description,omitempty"`

	// device id
	// Example: 1a.0
	DeviceID string `json:"device_id,omitempty"`

	// device names
	DeviceNames []*TapeDeviceDeviceNamesItems0 `json:"device_names,omitempty"`

	// Operational state of the device.
	// Example: read_write_enabled
	// Enum: [unknown available ready_write_enabled ready_write_protected offline in_use error reserved_by_another_host normal rewinding erasing]
	DeviceState string `json:"device_state,omitempty"`

	// File number.
	// Example: 0
	FileNumber int64 `json:"file_number,omitempty"`

	// Tape cartridge format.
	// Example: ["LTO-7 6TB","LTO-7 15TB Compressed","LTO-8 12TB","LTO-8 30TB Compressed"]
	Formats []string `json:"formats,omitempty"`

	// Device interface type.
	// Example: sas
	// Enum: [unknown fibre_channel sas pscsi]
	Interface string `json:"interface,omitempty"`

	// node
	Node *TapeDeviceNode `json:"node,omitempty"`

	// reservation type
	// Example: off
	// Enum: [off persistent scsi]
	ReservationType string `json:"reservation_type,omitempty"`

	// Residual count of the last I/O operation.
	// Example: 0
	ResidualCount int64 `json:"residual_count,omitempty"`

	// serial number
	// Example: 10WT00093
	SerialNumber string `json:"serial_number,omitempty"`

	// storage port
	StoragePort *TapeDeviceStoragePort `json:"storage_port,omitempty"`

	// Device type.
	// Example: tape
	// Enum: [unknown tape media_changer]
	Type string `json:"type,omitempty"`

	// World Wide Node Name.
	// Example: 500507631295741c
	Wwnn string `json:"wwnn,omitempty"`

	// World Wide Port Name.
	// Example: 500507631295741c
	Wwpn string `json:"wwpn,omitempty"`
}

// Validate validates this tape device
func (m *TapeDevice) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlias(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceNames(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterface(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReservationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoragePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TapeDevice) validateAlias(formats strfmt.Registry) error {
	if swag.IsZero(m.Alias) { // not required
		return nil
	}

	if m.Alias != nil {
		if err := m.Alias.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("alias")
			}
			return err
		}
	}

	return nil
}

func (m *TapeDevice) validateDeviceNames(formats strfmt.Registry) error {
	if swag.IsZero(m.DeviceNames) { // not required
		return nil
	}

	for i := 0; i < len(m.DeviceNames); i++ {
		if swag.IsZero(m.DeviceNames[i]) { // not required
			continue
		}

		if m.DeviceNames[i] != nil {
			if err := m.DeviceNames[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("device_names" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var tapeDeviceTypeDeviceStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["unknown","available","ready_write_enabled","ready_write_protected","offline","in_use","error","reserved_by_another_host","normal","rewinding","erasing"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tapeDeviceTypeDeviceStatePropEnum = append(tapeDeviceTypeDeviceStatePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// tape_device
	// TapeDevice
	// device_state
	// DeviceState
	// unknown
	// END DEBUGGING
	// TapeDeviceDeviceStateUnknown captures enum value "unknown"
	TapeDeviceDeviceStateUnknown string = "unknown"

	// BEGIN DEBUGGING
	// tape_device
	// TapeDevice
	// device_state
	// DeviceState
	// available
	// END DEBUGGING
	// TapeDeviceDeviceStateAvailable captures enum value "available"
	TapeDeviceDeviceStateAvailable string = "available"

	// BEGIN DEBUGGING
	// tape_device
	// TapeDevice
	// device_state
	// DeviceState
	// ready_write_enabled
	// END DEBUGGING
	// TapeDeviceDeviceStateReadyWriteEnabled captures enum value "ready_write_enabled"
	TapeDeviceDeviceStateReadyWriteEnabled string = "ready_write_enabled"

	// BEGIN DEBUGGING
	// tape_device
	// TapeDevice
	// device_state
	// DeviceState
	// ready_write_protected
	// END DEBUGGING
	// TapeDeviceDeviceStateReadyWriteProtected captures enum value "ready_write_protected"
	TapeDeviceDeviceStateReadyWriteProtected string = "ready_write_protected"

	// BEGIN DEBUGGING
	// tape_device
	// TapeDevice
	// device_state
	// DeviceState
	// offline
	// END DEBUGGING
	// TapeDeviceDeviceStateOffline captures enum value "offline"
	TapeDeviceDeviceStateOffline string = "offline"

	// BEGIN DEBUGGING
	// tape_device
	// TapeDevice
	// device_state
	// DeviceState
	// in_use
	// END DEBUGGING
	// TapeDeviceDeviceStateInUse captures enum value "in_use"
	TapeDeviceDeviceStateInUse string = "in_use"

	// BEGIN DEBUGGING
	// tape_device
	// TapeDevice
	// device_state
	// DeviceState
	// error
	// END DEBUGGING
	// TapeDeviceDeviceStateError captures enum value "error"
	TapeDeviceDeviceStateError string = "error"

	// BEGIN DEBUGGING
	// tape_device
	// TapeDevice
	// device_state
	// DeviceState
	// reserved_by_another_host
	// END DEBUGGING
	// TapeDeviceDeviceStateReservedByAnotherHost captures enum value "reserved_by_another_host"
	TapeDeviceDeviceStateReservedByAnotherHost string = "reserved_by_another_host"

	// BEGIN DEBUGGING
	// tape_device
	// TapeDevice
	// device_state
	// DeviceState
	// normal
	// END DEBUGGING
	// TapeDeviceDeviceStateNormal captures enum value "normal"
	TapeDeviceDeviceStateNormal string = "normal"

	// BEGIN DEBUGGING
	// tape_device
	// TapeDevice
	// device_state
	// DeviceState
	// rewinding
	// END DEBUGGING
	// TapeDeviceDeviceStateRewinding captures enum value "rewinding"
	TapeDeviceDeviceStateRewinding string = "rewinding"

	// BEGIN DEBUGGING
	// tape_device
	// TapeDevice
	// device_state
	// DeviceState
	// erasing
	// END DEBUGGING
	// TapeDeviceDeviceStateErasing captures enum value "erasing"
	TapeDeviceDeviceStateErasing string = "erasing"
)

// prop value enum
func (m *TapeDevice) validateDeviceStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tapeDeviceTypeDeviceStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TapeDevice) validateDeviceState(formats strfmt.Registry) error {
	if swag.IsZero(m.DeviceState) { // not required
		return nil
	}

	// value enum
	if err := m.validateDeviceStateEnum("device_state", "body", m.DeviceState); err != nil {
		return err
	}

	return nil
}

var tapeDeviceTypeInterfacePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["unknown","fibre_channel","sas","pscsi"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tapeDeviceTypeInterfacePropEnum = append(tapeDeviceTypeInterfacePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// tape_device
	// TapeDevice
	// interface
	// Interface
	// unknown
	// END DEBUGGING
	// TapeDeviceInterfaceUnknown captures enum value "unknown"
	TapeDeviceInterfaceUnknown string = "unknown"

	// BEGIN DEBUGGING
	// tape_device
	// TapeDevice
	// interface
	// Interface
	// fibre_channel
	// END DEBUGGING
	// TapeDeviceInterfaceFibreChannel captures enum value "fibre_channel"
	TapeDeviceInterfaceFibreChannel string = "fibre_channel"

	// BEGIN DEBUGGING
	// tape_device
	// TapeDevice
	// interface
	// Interface
	// sas
	// END DEBUGGING
	// TapeDeviceInterfaceSas captures enum value "sas"
	TapeDeviceInterfaceSas string = "sas"

	// BEGIN DEBUGGING
	// tape_device
	// TapeDevice
	// interface
	// Interface
	// pscsi
	// END DEBUGGING
	// TapeDeviceInterfacePscsi captures enum value "pscsi"
	TapeDeviceInterfacePscsi string = "pscsi"
)

// prop value enum
func (m *TapeDevice) validateInterfaceEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tapeDeviceTypeInterfacePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TapeDevice) validateInterface(formats strfmt.Registry) error {
	if swag.IsZero(m.Interface) { // not required
		return nil
	}

	// value enum
	if err := m.validateInterfaceEnum("interface", "body", m.Interface); err != nil {
		return err
	}

	return nil
}

func (m *TapeDevice) validateNode(formats strfmt.Registry) error {
	if swag.IsZero(m.Node) { // not required
		return nil
	}

	if m.Node != nil {
		if err := m.Node.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node")
			}
			return err
		}
	}

	return nil
}

var tapeDeviceTypeReservationTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["off","persistent","scsi"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tapeDeviceTypeReservationTypePropEnum = append(tapeDeviceTypeReservationTypePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// tape_device
	// TapeDevice
	// reservation_type
	// ReservationType
	// off
	// END DEBUGGING
	// TapeDeviceReservationTypeOff captures enum value "off"
	TapeDeviceReservationTypeOff string = "off"

	// BEGIN DEBUGGING
	// tape_device
	// TapeDevice
	// reservation_type
	// ReservationType
	// persistent
	// END DEBUGGING
	// TapeDeviceReservationTypePersistent captures enum value "persistent"
	TapeDeviceReservationTypePersistent string = "persistent"

	// BEGIN DEBUGGING
	// tape_device
	// TapeDevice
	// reservation_type
	// ReservationType
	// scsi
	// END DEBUGGING
	// TapeDeviceReservationTypeScsi captures enum value "scsi"
	TapeDeviceReservationTypeScsi string = "scsi"
)

// prop value enum
func (m *TapeDevice) validateReservationTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tapeDeviceTypeReservationTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TapeDevice) validateReservationType(formats strfmt.Registry) error {
	if swag.IsZero(m.ReservationType) { // not required
		return nil
	}

	// value enum
	if err := m.validateReservationTypeEnum("reservation_type", "body", m.ReservationType); err != nil {
		return err
	}

	return nil
}

func (m *TapeDevice) validateStoragePort(formats strfmt.Registry) error {
	if swag.IsZero(m.StoragePort) { // not required
		return nil
	}

	if m.StoragePort != nil {
		if err := m.StoragePort.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storage_port")
			}
			return err
		}
	}

	return nil
}

var tapeDeviceTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["unknown","tape","media_changer"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tapeDeviceTypeTypePropEnum = append(tapeDeviceTypeTypePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// tape_device
	// TapeDevice
	// type
	// Type
	// unknown
	// END DEBUGGING
	// TapeDeviceTypeUnknown captures enum value "unknown"
	TapeDeviceTypeUnknown string = "unknown"

	// BEGIN DEBUGGING
	// tape_device
	// TapeDevice
	// type
	// Type
	// tape
	// END DEBUGGING
	// TapeDeviceTypeTape captures enum value "tape"
	TapeDeviceTypeTape string = "tape"

	// BEGIN DEBUGGING
	// tape_device
	// TapeDevice
	// type
	// Type
	// media_changer
	// END DEBUGGING
	// TapeDeviceTypeMediaChanger captures enum value "media_changer"
	TapeDeviceTypeMediaChanger string = "media_changer"
)

// prop value enum
func (m *TapeDevice) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tapeDeviceTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TapeDevice) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this tape device based on the context it is used
func (m *TapeDevice) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAlias(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeviceNames(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStoragePort(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TapeDevice) contextValidateAlias(ctx context.Context, formats strfmt.Registry) error {

	if m.Alias != nil {
		if err := m.Alias.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("alias")
			}
			return err
		}
	}

	return nil
}

func (m *TapeDevice) contextValidateDeviceNames(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DeviceNames); i++ {

		if m.DeviceNames[i] != nil {
			if err := m.DeviceNames[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("device_names" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TapeDevice) contextValidateNode(ctx context.Context, formats strfmt.Registry) error {

	if m.Node != nil {
		if err := m.Node.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node")
			}
			return err
		}
	}

	return nil
}

func (m *TapeDevice) contextValidateStoragePort(ctx context.Context, formats strfmt.Registry) error {

	if m.StoragePort != nil {
		if err := m.StoragePort.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storage_port")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TapeDevice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TapeDevice) UnmarshalBinary(b []byte) error {
	var res TapeDevice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TapeDeviceAlias tape device alias
//
// swagger:model TapeDeviceAlias
type TapeDeviceAlias struct {

	// Alias mapping.
	// Example: SN[10WT000933]
	Mapping string `json:"mapping,omitempty"`

	// Alias name.
	// Example: st6
	Name string `json:"name,omitempty"`
}

// Validate validates this tape device alias
func (m *TapeDeviceAlias) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this tape device alias based on the context it is used
func (m *TapeDeviceAlias) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *TapeDeviceAlias) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TapeDeviceAlias) UnmarshalBinary(b []byte) error {
	var res TapeDeviceAlias
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TapeDeviceDeviceNamesItems0 tape device device names items0
//
// swagger:model TapeDeviceDeviceNamesItems0
type TapeDeviceDeviceNamesItems0 struct {

	// Device name for no rewind.
	// Example: nrst6l
	NoRewindDevice string `json:"no_rewind_device,omitempty"`

	// Device name for rewind.
	// Example: rst6l
	RewindDevice string `json:"rewind_device,omitempty"`

	// Device name for unload or reload operations.
	// Example: urst6l
	UnloadReloadDevice string `json:"unload_reload_device,omitempty"`
}

// Validate validates this tape device device names items0
func (m *TapeDeviceDeviceNamesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this tape device device names items0 based on context it is used
func (m *TapeDeviceDeviceNamesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TapeDeviceDeviceNamesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TapeDeviceDeviceNamesItems0) UnmarshalBinary(b []byte) error {
	var res TapeDeviceDeviceNamesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TapeDeviceNode tape device node
//
// swagger:model TapeDeviceNode
type TapeDeviceNode struct {

	// links
	Links *TapeDeviceNodeLinks `json:"_links,omitempty"`

	// name
	// Example: node1
	Name string `json:"name,omitempty"`

	// uuid
	// Example: 1cd8a442-86d1-11e0-ae1c-123478563412
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this tape device node
func (m *TapeDeviceNode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TapeDeviceNode) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this tape device node based on the context it is used
func (m *TapeDeviceNode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TapeDeviceNode) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TapeDeviceNode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TapeDeviceNode) UnmarshalBinary(b []byte) error {
	var res TapeDeviceNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TapeDeviceNodeLinks tape device node links
//
// swagger:model TapeDeviceNodeLinks
type TapeDeviceNodeLinks struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this tape device node links
func (m *TapeDeviceNodeLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TapeDeviceNodeLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this tape device node links based on the context it is used
func (m *TapeDeviceNodeLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TapeDeviceNodeLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TapeDeviceNodeLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TapeDeviceNodeLinks) UnmarshalBinary(b []byte) error {
	var res TapeDeviceNodeLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TapeDeviceStoragePort tape device storage port
//
// swagger:model TapeDeviceStoragePort
type TapeDeviceStoragePort struct {

	// Initiator port.
	// Example: 2b
	Name string `json:"name,omitempty"`
}

// Validate validates this tape device storage port
func (m *TapeDeviceStoragePort) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this tape device storage port based on context it is used
func (m *TapeDeviceStoragePort) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TapeDeviceStoragePort) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TapeDeviceStoragePort) UnmarshalBinary(b []byte) error {
	var res TapeDeviceStoragePort
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
