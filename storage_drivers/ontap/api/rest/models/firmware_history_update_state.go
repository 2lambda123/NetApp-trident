// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FirmwareHistoryUpdateState firmware history update state
//
// swagger:model firmware_history_update_state
type FirmwareHistoryUpdateState struct {

	// worker
	Worker *FirmwareHistoryUpdateStateWorker `json:"worker,omitempty"`
}

// Validate validates this firmware history update state
func (m *FirmwareHistoryUpdateState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateWorker(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FirmwareHistoryUpdateState) validateWorker(formats strfmt.Registry) error {
	if swag.IsZero(m.Worker) { // not required
		return nil
	}

	if m.Worker != nil {
		if err := m.Worker.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("worker")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this firmware history update state based on the context it is used
func (m *FirmwareHistoryUpdateState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateWorker(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FirmwareHistoryUpdateState) contextValidateWorker(ctx context.Context, formats strfmt.Registry) error {

	if m.Worker != nil {
		if err := m.Worker.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("worker")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FirmwareHistoryUpdateState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FirmwareHistoryUpdateState) UnmarshalBinary(b []byte) error {
	var res FirmwareHistoryUpdateState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FirmwareHistoryUpdateStateWorker firmware history update state worker
//
// swagger:model FirmwareHistoryUpdateStateWorker
type FirmwareHistoryUpdateStateWorker struct {

	// error
	Error *FirmwareHistoryUpdateStateError `json:"error,omitempty"`

	// node
	Node *FirmwareHistoryUpdateStateWorkerNode `json:"node,omitempty"`

	// The state of each worker that a node is controlling.
	// Example: waiting_to_retry
	// Enum: [idle working complete failed waiting_to_retry]
	State string `json:"state,omitempty"`
}

// Validate validates this firmware history update state worker
func (m *FirmwareHistoryUpdateStateWorker) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FirmwareHistoryUpdateStateWorker) validateError(formats strfmt.Registry) error {
	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if m.Error != nil {
		if err := m.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("worker" + "." + "error")
			}
			return err
		}
	}

	return nil
}

func (m *FirmwareHistoryUpdateStateWorker) validateNode(formats strfmt.Registry) error {
	if swag.IsZero(m.Node) { // not required
		return nil
	}

	if m.Node != nil {
		if err := m.Node.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("worker" + "." + "node")
			}
			return err
		}
	}

	return nil
}

var firmwareHistoryUpdateStateWorkerTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["idle","working","complete","failed","waiting_to_retry"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		firmwareHistoryUpdateStateWorkerTypeStatePropEnum = append(firmwareHistoryUpdateStateWorkerTypeStatePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// FirmwareHistoryUpdateStateWorker
	// FirmwareHistoryUpdateStateWorker
	// state
	// State
	// idle
	// END DEBUGGING
	// FirmwareHistoryUpdateStateWorkerStateIdle captures enum value "idle"
	FirmwareHistoryUpdateStateWorkerStateIdle string = "idle"

	// BEGIN DEBUGGING
	// FirmwareHistoryUpdateStateWorker
	// FirmwareHistoryUpdateStateWorker
	// state
	// State
	// working
	// END DEBUGGING
	// FirmwareHistoryUpdateStateWorkerStateWorking captures enum value "working"
	FirmwareHistoryUpdateStateWorkerStateWorking string = "working"

	// BEGIN DEBUGGING
	// FirmwareHistoryUpdateStateWorker
	// FirmwareHistoryUpdateStateWorker
	// state
	// State
	// complete
	// END DEBUGGING
	// FirmwareHistoryUpdateStateWorkerStateComplete captures enum value "complete"
	FirmwareHistoryUpdateStateWorkerStateComplete string = "complete"

	// BEGIN DEBUGGING
	// FirmwareHistoryUpdateStateWorker
	// FirmwareHistoryUpdateStateWorker
	// state
	// State
	// failed
	// END DEBUGGING
	// FirmwareHistoryUpdateStateWorkerStateFailed captures enum value "failed"
	FirmwareHistoryUpdateStateWorkerStateFailed string = "failed"

	// BEGIN DEBUGGING
	// FirmwareHistoryUpdateStateWorker
	// FirmwareHistoryUpdateStateWorker
	// state
	// State
	// waiting_to_retry
	// END DEBUGGING
	// FirmwareHistoryUpdateStateWorkerStateWaitingToRetry captures enum value "waiting_to_retry"
	FirmwareHistoryUpdateStateWorkerStateWaitingToRetry string = "waiting_to_retry"
)

// prop value enum
func (m *FirmwareHistoryUpdateStateWorker) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, firmwareHistoryUpdateStateWorkerTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FirmwareHistoryUpdateStateWorker) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("worker"+"."+"state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this firmware history update state worker based on the context it is used
func (m *FirmwareHistoryUpdateStateWorker) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FirmwareHistoryUpdateStateWorker) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if m.Error != nil {
		if err := m.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("worker" + "." + "error")
			}
			return err
		}
	}

	return nil
}

func (m *FirmwareHistoryUpdateStateWorker) contextValidateNode(ctx context.Context, formats strfmt.Registry) error {

	if m.Node != nil {
		if err := m.Node.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("worker" + "." + "node")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FirmwareHistoryUpdateStateWorker) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FirmwareHistoryUpdateStateWorker) UnmarshalBinary(b []byte) error {
	var res FirmwareHistoryUpdateStateWorker
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FirmwareHistoryUpdateStateWorkerNode firmware history update state worker node
//
// swagger:model FirmwareHistoryUpdateStateWorkerNode
type FirmwareHistoryUpdateStateWorkerNode struct {

	// links
	Links *FirmwareHistoryUpdateStateWorkerNodeLinks `json:"_links,omitempty"`

	// name
	// Example: node1
	Name string `json:"name,omitempty"`

	// uuid
	// Example: 1cd8a442-86d1-11e0-ae1c-123478563412
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this firmware history update state worker node
func (m *FirmwareHistoryUpdateStateWorkerNode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FirmwareHistoryUpdateStateWorkerNode) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("worker" + "." + "node" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this firmware history update state worker node based on the context it is used
func (m *FirmwareHistoryUpdateStateWorkerNode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FirmwareHistoryUpdateStateWorkerNode) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("worker" + "." + "node" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FirmwareHistoryUpdateStateWorkerNode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FirmwareHistoryUpdateStateWorkerNode) UnmarshalBinary(b []byte) error {
	var res FirmwareHistoryUpdateStateWorkerNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FirmwareHistoryUpdateStateWorkerNodeLinks firmware history update state worker node links
//
// swagger:model FirmwareHistoryUpdateStateWorkerNodeLinks
type FirmwareHistoryUpdateStateWorkerNodeLinks struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this firmware history update state worker node links
func (m *FirmwareHistoryUpdateStateWorkerNodeLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FirmwareHistoryUpdateStateWorkerNodeLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("worker" + "." + "node" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this firmware history update state worker node links based on the context it is used
func (m *FirmwareHistoryUpdateStateWorkerNodeLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FirmwareHistoryUpdateStateWorkerNodeLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("worker" + "." + "node" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FirmwareHistoryUpdateStateWorkerNodeLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FirmwareHistoryUpdateStateWorkerNodeLinks) UnmarshalBinary(b []byte) error {
	var res FirmwareHistoryUpdateStateWorkerNodeLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
