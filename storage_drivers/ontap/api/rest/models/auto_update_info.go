// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AutoUpdateInfo auto update info
//
// swagger:model auto_update_info
type AutoUpdateInfo struct {

	// links
	Links *AutoUpdateInfoLinks `json:"_links,omitempty"`

	// Flag indicating feature state.
	// Example: true
	Enabled bool `json:"enabled,omitempty"`

	// eula
	Eula *AutoUpdateInfoEula `json:"eula,omitempty"`
}

// Validate validates this auto update info
func (m *AutoUpdateInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEula(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AutoUpdateInfo) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *AutoUpdateInfo) validateEula(formats strfmt.Registry) error {
	if swag.IsZero(m.Eula) { // not required
		return nil
	}

	if m.Eula != nil {
		if err := m.Eula.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eula")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this auto update info based on the context it is used
func (m *AutoUpdateInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEula(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AutoUpdateInfo) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *AutoUpdateInfo) contextValidateEula(ctx context.Context, formats strfmt.Registry) error {

	if m.Eula != nil {
		if err := m.Eula.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eula")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AutoUpdateInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AutoUpdateInfo) UnmarshalBinary(b []byte) error {
	var res AutoUpdateInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AutoUpdateInfoEula auto update info eula
//
// swagger:model AutoUpdateInfoEula
type AutoUpdateInfoEula struct {

	// Flag indicating the End User License Agreement (EULA) acceptance. When the feature is enabled, it is assumed that the EULA is accepted.
	// Example: true
	// Read Only: true
	Accepted *bool `json:"accepted,omitempty"`

	// IP Address from where the EULA was accepted.
	// Example: 192.168.1.125
	// Read Only: true
	AcceptedIPAddress string `json:"accepted_ip_address,omitempty"`

	// Date and time when the EULA was accepted.
	// Example: 2020-12-01T09:12:23-04:00
	// Read Only: true
	// Format: date-time
	AcceptedTimestamp *strfmt.DateTime `json:"accepted_timestamp,omitempty"`

	// User ID that provided the EULA acceptance.
	// Example: admin
	// Read Only: true
	UserIDAccepted string `json:"user_id_accepted,omitempty"`
}

// Validate validates this auto update info eula
func (m *AutoUpdateInfoEula) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcceptedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AutoUpdateInfoEula) validateAcceptedTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.AcceptedTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("eula"+"."+"accepted_timestamp", "body", "date-time", m.AcceptedTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this auto update info eula based on the context it is used
func (m *AutoUpdateInfoEula) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccepted(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAcceptedIPAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAcceptedTimestamp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserIDAccepted(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AutoUpdateInfoEula) contextValidateAccepted(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "eula"+"."+"accepted", "body", m.Accepted); err != nil {
		return err
	}

	return nil
}

func (m *AutoUpdateInfoEula) contextValidateAcceptedIPAddress(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "eula"+"."+"accepted_ip_address", "body", string(m.AcceptedIPAddress)); err != nil {
		return err
	}

	return nil
}

func (m *AutoUpdateInfoEula) contextValidateAcceptedTimestamp(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "eula"+"."+"accepted_timestamp", "body", m.AcceptedTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *AutoUpdateInfoEula) contextValidateUserIDAccepted(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "eula"+"."+"user_id_accepted", "body", string(m.UserIDAccepted)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AutoUpdateInfoEula) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AutoUpdateInfoEula) UnmarshalBinary(b []byte) error {
	var res AutoUpdateInfoEula
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AutoUpdateInfoLinks auto update info links
//
// swagger:model AutoUpdateInfoLinks
type AutoUpdateInfoLinks struct {

	// self
	Self *AutoUpdateInfoLinksSelf `json:"self,omitempty"`
}

// Validate validates this auto update info links
func (m *AutoUpdateInfoLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AutoUpdateInfoLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this auto update info links based on the context it is used
func (m *AutoUpdateInfoLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AutoUpdateInfoLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AutoUpdateInfoLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AutoUpdateInfoLinks) UnmarshalBinary(b []byte) error {
	var res AutoUpdateInfoLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AutoUpdateInfoLinksSelf auto update info links self
//
// swagger:model AutoUpdateInfoLinksSelf
type AutoUpdateInfoLinksSelf struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this auto update info links self
func (m *AutoUpdateInfoLinksSelf) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AutoUpdateInfoLinksSelf) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this auto update info links self based on the context it is used
func (m *AutoUpdateInfoLinksSelf) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AutoUpdateInfoLinksSelf) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AutoUpdateInfoLinksSelf) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AutoUpdateInfoLinksSelf) UnmarshalBinary(b []byte) error {
	var res AutoUpdateInfoLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
