// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SvmMigrationIPInterfacePlacement Optional property used to specify the list of source SVM's IP interface and network port pairs in the destination for migrating the source SVM IP interfaces. Note that the SVM migration does not perform any reachability checks on the IP interfaces provided.
//
// swagger:model svm_migration_ip_interface_placement
type SvmMigrationIPInterfacePlacement struct {

	// List of source SVM's IP interface and port pairs on the destination for migrating the source SVM's IP interfaces.
	IPInterfaces []*SvmMigrationIPInterfacePlacementIPInterfacesItems0 `json:"ip_interfaces,omitempty"`
}

// Validate validates this svm migration ip interface placement
func (m *SvmMigrationIPInterfacePlacement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIPInterfaces(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SvmMigrationIPInterfacePlacement) validateIPInterfaces(formats strfmt.Registry) error {
	if swag.IsZero(m.IPInterfaces) { // not required
		return nil
	}

	for i := 0; i < len(m.IPInterfaces); i++ {
		if swag.IsZero(m.IPInterfaces[i]) { // not required
			continue
		}

		if m.IPInterfaces[i] != nil {
			if err := m.IPInterfaces[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ip_interfaces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this svm migration ip interface placement based on the context it is used
func (m *SvmMigrationIPInterfacePlacement) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIPInterfaces(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SvmMigrationIPInterfacePlacement) contextValidateIPInterfaces(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IPInterfaces); i++ {

		if m.IPInterfaces[i] != nil {
			if err := m.IPInterfaces[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ip_interfaces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SvmMigrationIPInterfacePlacement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SvmMigrationIPInterfacePlacement) UnmarshalBinary(b []byte) error {
	var res SvmMigrationIPInterfacePlacement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SvmMigrationIPInterfacePlacementIPInterfacesItems0 IP interface and network port pair information.
//
// swagger:model SvmMigrationIPInterfacePlacementIPInterfacesItems0
type SvmMigrationIPInterfacePlacementIPInterfacesItems0 struct {

	// interface
	Interface *SvmMigrationIPInterfacePlacementIPInterfacesItems0Interface `json:"interface,omitempty"`

	// port
	Port *SvmMigrationIPInterfacePlacementIPInterfacesItems0Port `json:"port,omitempty"`
}

// Validate validates this svm migration IP interface placement IP interfaces items0
func (m *SvmMigrationIPInterfacePlacementIPInterfacesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInterface(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SvmMigrationIPInterfacePlacementIPInterfacesItems0) validateInterface(formats strfmt.Registry) error {
	if swag.IsZero(m.Interface) { // not required
		return nil
	}

	if m.Interface != nil {
		if err := m.Interface.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("interface")
			}
			return err
		}
	}

	return nil
}

func (m *SvmMigrationIPInterfacePlacementIPInterfacesItems0) validatePort(formats strfmt.Registry) error {
	if swag.IsZero(m.Port) { // not required
		return nil
	}

	if m.Port != nil {
		if err := m.Port.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("port")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this svm migration IP interface placement IP interfaces items0 based on the context it is used
func (m *SvmMigrationIPInterfacePlacementIPInterfacesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInterface(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePort(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SvmMigrationIPInterfacePlacementIPInterfacesItems0) contextValidateInterface(ctx context.Context, formats strfmt.Registry) error {

	if m.Interface != nil {
		if err := m.Interface.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("interface")
			}
			return err
		}
	}

	return nil
}

func (m *SvmMigrationIPInterfacePlacementIPInterfacesItems0) contextValidatePort(ctx context.Context, formats strfmt.Registry) error {

	if m.Port != nil {
		if err := m.Port.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("port")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SvmMigrationIPInterfacePlacementIPInterfacesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SvmMigrationIPInterfacePlacementIPInterfacesItems0) UnmarshalBinary(b []byte) error {
	var res SvmMigrationIPInterfacePlacementIPInterfacesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SvmMigrationIPInterfacePlacementIPInterfacesItems0Interface Network interface on the source SVM.
//
// swagger:model SvmMigrationIPInterfacePlacementIPInterfacesItems0Interface
type SvmMigrationIPInterfacePlacementIPInterfacesItems0Interface struct {

	// links
	Links *SvmMigrationIPInterfacePlacementIPInterfacesItems0InterfaceLinks `json:"_links,omitempty"`

	// ip
	IP *SvmMigrationIPInterfacePlacementIPInterfacesItems0InterfaceIP `json:"ip,omitempty"`

	// The name of the interface. If only the name is provided, the SVM scope
	// must be provided by the object this object is embedded in.
	//
	// Example: lif1
	Name string `json:"name,omitempty"`

	// The UUID that uniquely identifies the interface.
	// Example: 1cd8a442-86d1-11e0-ae1c-123478563412
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this svm migration IP interface placement IP interfaces items0 interface
func (m *SvmMigrationIPInterfacePlacementIPInterfacesItems0Interface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIP(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SvmMigrationIPInterfacePlacementIPInterfacesItems0Interface) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("interface" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (m *SvmMigrationIPInterfacePlacementIPInterfacesItems0Interface) validateIP(formats strfmt.Registry) error {
	if swag.IsZero(m.IP) { // not required
		return nil
	}

	if m.IP != nil {
		if err := m.IP.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("interface" + "." + "ip")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this svm migration IP interface placement IP interfaces items0 interface based on the context it is used
func (m *SvmMigrationIPInterfacePlacementIPInterfacesItems0Interface) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIP(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SvmMigrationIPInterfacePlacementIPInterfacesItems0Interface) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("interface" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (m *SvmMigrationIPInterfacePlacementIPInterfacesItems0Interface) contextValidateIP(ctx context.Context, formats strfmt.Registry) error {

	if m.IP != nil {
		if err := m.IP.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("interface" + "." + "ip")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SvmMigrationIPInterfacePlacementIPInterfacesItems0Interface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SvmMigrationIPInterfacePlacementIPInterfacesItems0Interface) UnmarshalBinary(b []byte) error {
	var res SvmMigrationIPInterfacePlacementIPInterfacesItems0Interface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SvmMigrationIPInterfacePlacementIPInterfacesItems0InterfaceIP IP information
//
// swagger:model SvmMigrationIPInterfacePlacementIPInterfacesItems0InterfaceIP
type SvmMigrationIPInterfacePlacementIPInterfacesItems0InterfaceIP struct {

	// address
	Address IPAddressReadonly `json:"address,omitempty"`
}

// Validate validates this svm migration IP interface placement IP interfaces items0 interface IP
func (m *SvmMigrationIPInterfacePlacementIPInterfacesItems0InterfaceIP) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SvmMigrationIPInterfacePlacementIPInterfacesItems0InterfaceIP) validateAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.Address) { // not required
		return nil
	}

	if err := m.Address.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("interface" + "." + "ip" + "." + "address")
		}
		return err
	}

	return nil
}

// ContextValidate validate this svm migration IP interface placement IP interfaces items0 interface IP based on the context it is used
func (m *SvmMigrationIPInterfacePlacementIPInterfacesItems0InterfaceIP) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SvmMigrationIPInterfacePlacementIPInterfacesItems0InterfaceIP) contextValidateAddress(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Address.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("interface" + "." + "ip" + "." + "address")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SvmMigrationIPInterfacePlacementIPInterfacesItems0InterfaceIP) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SvmMigrationIPInterfacePlacementIPInterfacesItems0InterfaceIP) UnmarshalBinary(b []byte) error {
	var res SvmMigrationIPInterfacePlacementIPInterfacesItems0InterfaceIP
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SvmMigrationIPInterfacePlacementIPInterfacesItems0InterfaceLinks svm migration IP interface placement IP interfaces items0 interface links
//
// swagger:model SvmMigrationIPInterfacePlacementIPInterfacesItems0InterfaceLinks
type SvmMigrationIPInterfacePlacementIPInterfacesItems0InterfaceLinks struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this svm migration IP interface placement IP interfaces items0 interface links
func (m *SvmMigrationIPInterfacePlacementIPInterfacesItems0InterfaceLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SvmMigrationIPInterfacePlacementIPInterfacesItems0InterfaceLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("interface" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this svm migration IP interface placement IP interfaces items0 interface links based on the context it is used
func (m *SvmMigrationIPInterfacePlacementIPInterfacesItems0InterfaceLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SvmMigrationIPInterfacePlacementIPInterfacesItems0InterfaceLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("interface" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SvmMigrationIPInterfacePlacementIPInterfacesItems0InterfaceLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SvmMigrationIPInterfacePlacementIPInterfacesItems0InterfaceLinks) UnmarshalBinary(b []byte) error {
	var res SvmMigrationIPInterfacePlacementIPInterfacesItems0InterfaceLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SvmMigrationIPInterfacePlacementIPInterfacesItems0Port Port to use for IP interface placement on the destination SVM.
//
// swagger:model SvmMigrationIPInterfacePlacementIPInterfacesItems0Port
type SvmMigrationIPInterfacePlacementIPInterfacesItems0Port struct {

	// links
	Links *SvmMigrationIPInterfacePlacementIPInterfacesItems0PortLinks `json:"_links,omitempty"`

	// name
	// Example: e1b
	Name string `json:"name,omitempty"`

	// node
	Node *SvmMigrationIPInterfacePlacementIPInterfacesItems0PortNode `json:"node,omitempty"`

	// uuid
	// Example: 1cd8a442-86d1-11e0-ae1c-123478563412
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this svm migration IP interface placement IP interfaces items0 port
func (m *SvmMigrationIPInterfacePlacementIPInterfacesItems0Port) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SvmMigrationIPInterfacePlacementIPInterfacesItems0Port) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("port" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (m *SvmMigrationIPInterfacePlacementIPInterfacesItems0Port) validateNode(formats strfmt.Registry) error {
	if swag.IsZero(m.Node) { // not required
		return nil
	}

	if m.Node != nil {
		if err := m.Node.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("port" + "." + "node")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this svm migration IP interface placement IP interfaces items0 port based on the context it is used
func (m *SvmMigrationIPInterfacePlacementIPInterfacesItems0Port) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SvmMigrationIPInterfacePlacementIPInterfacesItems0Port) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("port" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (m *SvmMigrationIPInterfacePlacementIPInterfacesItems0Port) contextValidateNode(ctx context.Context, formats strfmt.Registry) error {

	if m.Node != nil {
		if err := m.Node.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("port" + "." + "node")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SvmMigrationIPInterfacePlacementIPInterfacesItems0Port) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SvmMigrationIPInterfacePlacementIPInterfacesItems0Port) UnmarshalBinary(b []byte) error {
	var res SvmMigrationIPInterfacePlacementIPInterfacesItems0Port
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SvmMigrationIPInterfacePlacementIPInterfacesItems0PortLinks svm migration IP interface placement IP interfaces items0 port links
//
// swagger:model SvmMigrationIPInterfacePlacementIPInterfacesItems0PortLinks
type SvmMigrationIPInterfacePlacementIPInterfacesItems0PortLinks struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this svm migration IP interface placement IP interfaces items0 port links
func (m *SvmMigrationIPInterfacePlacementIPInterfacesItems0PortLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SvmMigrationIPInterfacePlacementIPInterfacesItems0PortLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("port" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this svm migration IP interface placement IP interfaces items0 port links based on the context it is used
func (m *SvmMigrationIPInterfacePlacementIPInterfacesItems0PortLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SvmMigrationIPInterfacePlacementIPInterfacesItems0PortLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("port" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SvmMigrationIPInterfacePlacementIPInterfacesItems0PortLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SvmMigrationIPInterfacePlacementIPInterfacesItems0PortLinks) UnmarshalBinary(b []byte) error {
	var res SvmMigrationIPInterfacePlacementIPInterfacesItems0PortLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SvmMigrationIPInterfacePlacementIPInterfacesItems0PortNode svm migration IP interface placement IP interfaces items0 port node
//
// swagger:model SvmMigrationIPInterfacePlacementIPInterfacesItems0PortNode
type SvmMigrationIPInterfacePlacementIPInterfacesItems0PortNode struct {

	// Name of node on which the port is located.
	// Example: node1
	Name string `json:"name,omitempty"`
}

// Validate validates this svm migration IP interface placement IP interfaces items0 port node
func (m *SvmMigrationIPInterfacePlacementIPInterfacesItems0PortNode) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this svm migration IP interface placement IP interfaces items0 port node based on context it is used
func (m *SvmMigrationIPInterfacePlacementIPInterfacesItems0PortNode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SvmMigrationIPInterfacePlacementIPInterfacesItems0PortNode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SvmMigrationIPInterfacePlacementIPInterfacesItems0PortNode) UnmarshalBinary(b []byte) error {
	var res SvmMigrationIPInterfacePlacementIPInterfacesItems0PortNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
