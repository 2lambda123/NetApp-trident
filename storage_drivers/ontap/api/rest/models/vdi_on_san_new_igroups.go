// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VdiOnSanNewIgroups The list of initiator groups to create.
//
// swagger:model vdi_on_san_new_igroups
type VdiOnSanNewIgroups struct {

	// initiators
	Initiators []string `json:"initiators,omitempty"`

	// The name of the new initiator group.
	// Required: true
	// Max Length: 96
	// Min Length: 1
	Name *string `json:"name"`

	// The protocol of the new initiator group.
	// Enum: [fcp iscsi mixed]
	Protocol *string `json:"protocol,omitempty"`
}

// Validate validates this vdi on san new igroups
func (m *VdiOnSanNewIgroups) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VdiOnSanNewIgroups) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 96); err != nil {
		return err
	}

	return nil
}

var vdiOnSanNewIgroupsTypeProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["fcp","iscsi","mixed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vdiOnSanNewIgroupsTypeProtocolPropEnum = append(vdiOnSanNewIgroupsTypeProtocolPropEnum, v)
	}
}

const (

	// BEGIN RIPPY DEBUGGING
	// vdi_on_san_new_igroups
	// VdiOnSanNewIgroups
	// protocol
	// Protocol
	// fcp
	// END RIPPY DEBUGGING
	// VdiOnSanNewIgroupsProtocolFcp captures enum value "fcp"
	VdiOnSanNewIgroupsProtocolFcp string = "fcp"

	// BEGIN RIPPY DEBUGGING
	// vdi_on_san_new_igroups
	// VdiOnSanNewIgroups
	// protocol
	// Protocol
	// iscsi
	// END RIPPY DEBUGGING
	// VdiOnSanNewIgroupsProtocolIscsi captures enum value "iscsi"
	VdiOnSanNewIgroupsProtocolIscsi string = "iscsi"

	// BEGIN RIPPY DEBUGGING
	// vdi_on_san_new_igroups
	// VdiOnSanNewIgroups
	// protocol
	// Protocol
	// mixed
	// END RIPPY DEBUGGING
	// VdiOnSanNewIgroupsProtocolMixed captures enum value "mixed"
	VdiOnSanNewIgroupsProtocolMixed string = "mixed"
)

// prop value enum
func (m *VdiOnSanNewIgroups) validateProtocolEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, vdiOnSanNewIgroupsTypeProtocolPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VdiOnSanNewIgroups) validateProtocol(formats strfmt.Registry) error {
	if swag.IsZero(m.Protocol) { // not required
		return nil
	}

	// value enum
	if err := m.validateProtocolEnum("protocol", "body", *m.Protocol); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this vdi on san new igroups based on context it is used
func (m *VdiOnSanNewIgroups) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VdiOnSanNewIgroups) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VdiOnSanNewIgroups) UnmarshalBinary(b []byte) error {
	var res VdiOnSanNewIgroups
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HELLO RIPPY
