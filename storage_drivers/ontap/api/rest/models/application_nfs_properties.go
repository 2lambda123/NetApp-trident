// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ApplicationNfsProperties application nfs properties
//
// swagger:model application_nfs_properties
type ApplicationNfsProperties struct {

	// backing storage
	BackingStorage *ApplicationNfsPropertiesBackingStorage `json:"backing_storage,omitempty"`

	// export policy
	ExportPolicy *ApplicationNfsPropertiesExportPolicy `json:"export_policy,omitempty"`

	// ips
	Ips []string `json:"ips,omitempty"`

	// Junction path
	// Read Only: true
	Path string `json:"path,omitempty"`

	// permissions
	// Read Only: true
	Permissions []*ApplicationNfsPropertiesPermissionsItems0 `json:"permissions,omitempty"`
}

// Validate validates this application nfs properties
func (m *ApplicationNfsProperties) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBackingStorage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExportPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationNfsProperties) validateBackingStorage(formats strfmt.Registry) error {
	if swag.IsZero(m.BackingStorage) { // not required
		return nil
	}

	if m.BackingStorage != nil {
		if err := m.BackingStorage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backing_storage")
			}
			return err
		}
	}

	return nil
}

func (m *ApplicationNfsProperties) validateExportPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.ExportPolicy) { // not required
		return nil
	}

	if m.ExportPolicy != nil {
		if err := m.ExportPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("export_policy")
			}
			return err
		}
	}

	return nil
}

func (m *ApplicationNfsProperties) validatePermissions(formats strfmt.Registry) error {
	if swag.IsZero(m.Permissions) { // not required
		return nil
	}

	for i := 0; i < len(m.Permissions); i++ {
		if swag.IsZero(m.Permissions[i]) { // not required
			continue
		}

		if m.Permissions[i] != nil {
			if err := m.Permissions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("permissions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this application nfs properties based on the context it is used
func (m *ApplicationNfsProperties) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBackingStorage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExportPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIps(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePath(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePermissions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationNfsProperties) contextValidateBackingStorage(ctx context.Context, formats strfmt.Registry) error {

	if m.BackingStorage != nil {
		if err := m.BackingStorage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backing_storage")
			}
			return err
		}
	}

	return nil
}

func (m *ApplicationNfsProperties) contextValidateExportPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.ExportPolicy != nil {
		if err := m.ExportPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("export_policy")
			}
			return err
		}
	}

	return nil
}

func (m *ApplicationNfsProperties) contextValidateIps(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Ips); i++ {

		if err := validate.ReadOnly(ctx, "ips"+"."+strconv.Itoa(i), "body", string(m.Ips[i])); err != nil {
			return err
		}

	}

	return nil
}

func (m *ApplicationNfsProperties) contextValidatePath(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "path", "body", string(m.Path)); err != nil {
		return err
	}

	return nil
}

func (m *ApplicationNfsProperties) contextValidatePermissions(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "permissions", "body", []*ApplicationNfsPropertiesPermissionsItems0(m.Permissions)); err != nil {
		return err
	}

	for i := 0; i < len(m.Permissions); i++ {

		if m.Permissions[i] != nil {
			if err := m.Permissions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("permissions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApplicationNfsProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplicationNfsProperties) UnmarshalBinary(b []byte) error {
	var res ApplicationNfsProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ApplicationNfsPropertiesBackingStorage application nfs properties backing storage
//
// swagger:model ApplicationNfsPropertiesBackingStorage
type ApplicationNfsPropertiesBackingStorage struct {

	// Backing storage type
	// Read Only: true
	// Enum: [volume]
	Type string `json:"type,omitempty"`

	// Backing storage UUID
	// Read Only: true
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this application nfs properties backing storage
func (m *ApplicationNfsPropertiesBackingStorage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var applicationNfsPropertiesBackingStorageTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["volume"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		applicationNfsPropertiesBackingStorageTypeTypePropEnum = append(applicationNfsPropertiesBackingStorageTypeTypePropEnum, v)
	}
}

const (

	// BEGIN RIPPY DEBUGGING
	// ApplicationNfsPropertiesBackingStorage
	// ApplicationNfsPropertiesBackingStorage
	// type
	// Type
	// volume
	// END RIPPY DEBUGGING
	// ApplicationNfsPropertiesBackingStorageTypeVolume captures enum value "volume"
	ApplicationNfsPropertiesBackingStorageTypeVolume string = "volume"
)

// prop value enum
func (m *ApplicationNfsPropertiesBackingStorage) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, applicationNfsPropertiesBackingStorageTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ApplicationNfsPropertiesBackingStorage) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("backing_storage"+"."+"type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this application nfs properties backing storage based on the context it is used
func (m *ApplicationNfsPropertiesBackingStorage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationNfsPropertiesBackingStorage) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "backing_storage"+"."+"type", "body", string(m.Type)); err != nil {
		return err
	}

	return nil
}

func (m *ApplicationNfsPropertiesBackingStorage) contextValidateUUID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "backing_storage"+"."+"uuid", "body", string(m.UUID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApplicationNfsPropertiesBackingStorage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplicationNfsPropertiesBackingStorage) UnmarshalBinary(b []byte) error {
	var res ApplicationNfsPropertiesBackingStorage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ApplicationNfsPropertiesExportPolicy application nfs properties export policy
//
// swagger:model ApplicationNfsPropertiesExportPolicy
type ApplicationNfsPropertiesExportPolicy struct {

	// Export policy name
	// Read Only: true
	Name string `json:"name,omitempty"`
}

// Validate validates this application nfs properties export policy
func (m *ApplicationNfsPropertiesExportPolicy) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this application nfs properties export policy based on the context it is used
func (m *ApplicationNfsPropertiesExportPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationNfsPropertiesExportPolicy) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "export_policy"+"."+"name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApplicationNfsPropertiesExportPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplicationNfsPropertiesExportPolicy) UnmarshalBinary(b []byte) error {
	var res ApplicationNfsPropertiesExportPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ApplicationNfsPropertiesPermissionsItems0 application nfs properties permissions items0
//
// swagger:model ApplicationNfsPropertiesPermissionsItems0
type ApplicationNfsPropertiesPermissionsItems0 struct {

	// Access granted to the host
	// Read Only: true
	Access string `json:"access,omitempty"`

	// Host granted access
	// Read Only: true
	Host string `json:"host,omitempty"`
}

// Validate validates this application nfs properties permissions items0
func (m *ApplicationNfsPropertiesPermissionsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this application nfs properties permissions items0 based on the context it is used
func (m *ApplicationNfsPropertiesPermissionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccess(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHost(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationNfsPropertiesPermissionsItems0) contextValidateAccess(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "access", "body", string(m.Access)); err != nil {
		return err
	}

	return nil
}

func (m *ApplicationNfsPropertiesPermissionsItems0) contextValidateHost(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "host", "body", string(m.Host)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApplicationNfsPropertiesPermissionsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplicationNfsPropertiesPermissionsItems0) UnmarshalBinary(b []byte) error {
	var res ApplicationNfsPropertiesPermissionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HELLO RIPPY
