// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SnapmirrorPolicy SnapMirror policy information
//
// swagger:model snapmirror_policy
type SnapmirrorPolicy struct {

	// links
	Links *SnapmirrorPolicyLinks `json:"_links,omitempty"`

	// Comment associated with the policy.
	Comment string `json:"comment,omitempty"`

	// Specifies which configuration of the source SVM is replicated to the destination. This property is applicable only for SVM data protection and async policies.
	// Enum: [full exclude_network_config exclude_network_and_protocol_config]
	IdentityPreservation string `json:"identity_preservation,omitempty"`

	// name
	// Example: Asynchronous
	Name string `json:"name,omitempty"`

	// Specifies whether network compression is enabled for transfers. This is applicable only to async policies.
	NetworkCompressionEnabled *bool `json:"network_compression_enabled,omitempty"`

	// Policy on Snapshot copy retention. This is applicable only to async policies.
	Retention []*SnapmirrorPolicyRule `json:"retention,omitempty"`

	// Set to "svm" for policies owned by an SVM, otherwise set to "cluster".
	// Read Only: true
	// Enum: [svm cluster]
	Scope string `json:"scope,omitempty"`

	// svm
	Svm *SnapmirrorPolicySvm `json:"svm,omitempty"`

	// sync common snapshot schedule
	SyncCommonSnapshotSchedule *SnapmirrorPolicySyncCommonSnapshotSchedule `json:"sync_common_snapshot_schedule,omitempty"`

	// sync type
	// Enum: [sync strict_sync active_sync]
	SyncType string `json:"sync_type,omitempty"`

	// Throttle in KB/s. Default to unlimited.
	Throttle int64 `json:"throttle,omitempty"`

	// transfer schedule
	TransferSchedule *SnapmirrorPolicyTransferSchedule `json:"transfer_schedule,omitempty"`

	// type
	// Enum: [async sync]
	Type *string `json:"type,omitempty"`

	// uuid
	// Example: 4ea7a442-86d1-11e0-ae1c-123478563412
	// Read Only: true
	// Format: uuid
	UUID strfmt.UUID `json:"uuid,omitempty"`
}

// Validate validates this snapmirror policy
func (m *SnapmirrorPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentityPreservation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetention(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSyncCommonSnapshotSchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSyncType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransferSchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapmirrorPolicy) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

var snapmirrorPolicyTypeIdentityPreservationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["full","exclude_network_config","exclude_network_and_protocol_config"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		snapmirrorPolicyTypeIdentityPreservationPropEnum = append(snapmirrorPolicyTypeIdentityPreservationPropEnum, v)
	}
}

const (

	// BEGIN RIPPY DEBUGGING
	// snapmirror_policy
	// SnapmirrorPolicy
	// identity_preservation
	// IdentityPreservation
	// full
	// END RIPPY DEBUGGING
	// SnapmirrorPolicyIdentityPreservationFull captures enum value "full"
	SnapmirrorPolicyIdentityPreservationFull string = "full"

	// BEGIN RIPPY DEBUGGING
	// snapmirror_policy
	// SnapmirrorPolicy
	// identity_preservation
	// IdentityPreservation
	// exclude_network_config
	// END RIPPY DEBUGGING
	// SnapmirrorPolicyIdentityPreservationExcludeNetworkConfig captures enum value "exclude_network_config"
	SnapmirrorPolicyIdentityPreservationExcludeNetworkConfig string = "exclude_network_config"

	// BEGIN RIPPY DEBUGGING
	// snapmirror_policy
	// SnapmirrorPolicy
	// identity_preservation
	// IdentityPreservation
	// exclude_network_and_protocol_config
	// END RIPPY DEBUGGING
	// SnapmirrorPolicyIdentityPreservationExcludeNetworkAndProtocolConfig captures enum value "exclude_network_and_protocol_config"
	SnapmirrorPolicyIdentityPreservationExcludeNetworkAndProtocolConfig string = "exclude_network_and_protocol_config"
)

// prop value enum
func (m *SnapmirrorPolicy) validateIdentityPreservationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, snapmirrorPolicyTypeIdentityPreservationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SnapmirrorPolicy) validateIdentityPreservation(formats strfmt.Registry) error {
	if swag.IsZero(m.IdentityPreservation) { // not required
		return nil
	}

	// value enum
	if err := m.validateIdentityPreservationEnum("identity_preservation", "body", m.IdentityPreservation); err != nil {
		return err
	}

	return nil
}

func (m *SnapmirrorPolicy) validateRetention(formats strfmt.Registry) error {
	if swag.IsZero(m.Retention) { // not required
		return nil
	}

	for i := 0; i < len(m.Retention); i++ {
		if swag.IsZero(m.Retention[i]) { // not required
			continue
		}

		if m.Retention[i] != nil {
			if err := m.Retention[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("retention" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var snapmirrorPolicyTypeScopePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["svm","cluster"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		snapmirrorPolicyTypeScopePropEnum = append(snapmirrorPolicyTypeScopePropEnum, v)
	}
}

const (

	// BEGIN RIPPY DEBUGGING
	// snapmirror_policy
	// SnapmirrorPolicy
	// scope
	// Scope
	// svm
	// END RIPPY DEBUGGING
	// SnapmirrorPolicyScopeSvm captures enum value "svm"
	SnapmirrorPolicyScopeSvm string = "svm"

	// BEGIN RIPPY DEBUGGING
	// snapmirror_policy
	// SnapmirrorPolicy
	// scope
	// Scope
	// cluster
	// END RIPPY DEBUGGING
	// SnapmirrorPolicyScopeCluster captures enum value "cluster"
	SnapmirrorPolicyScopeCluster string = "cluster"
)

// prop value enum
func (m *SnapmirrorPolicy) validateScopeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, snapmirrorPolicyTypeScopePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SnapmirrorPolicy) validateScope(formats strfmt.Registry) error {
	if swag.IsZero(m.Scope) { // not required
		return nil
	}

	// value enum
	if err := m.validateScopeEnum("scope", "body", m.Scope); err != nil {
		return err
	}

	return nil
}

func (m *SnapmirrorPolicy) validateSvm(formats strfmt.Registry) error {
	if swag.IsZero(m.Svm) { // not required
		return nil
	}

	if m.Svm != nil {
		if err := m.Svm.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svm")
			}
			return err
		}
	}

	return nil
}

func (m *SnapmirrorPolicy) validateSyncCommonSnapshotSchedule(formats strfmt.Registry) error {
	if swag.IsZero(m.SyncCommonSnapshotSchedule) { // not required
		return nil
	}

	if m.SyncCommonSnapshotSchedule != nil {
		if err := m.SyncCommonSnapshotSchedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sync_common_snapshot_schedule")
			}
			return err
		}
	}

	return nil
}

var snapmirrorPolicyTypeSyncTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["sync","strict_sync","active_sync"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		snapmirrorPolicyTypeSyncTypePropEnum = append(snapmirrorPolicyTypeSyncTypePropEnum, v)
	}
}

const (

	// BEGIN RIPPY DEBUGGING
	// snapmirror_policy
	// SnapmirrorPolicy
	// sync_type
	// SyncType
	// sync
	// END RIPPY DEBUGGING
	// SnapmirrorPolicySyncTypeSync captures enum value "sync"
	SnapmirrorPolicySyncTypeSync string = "sync"

	// BEGIN RIPPY DEBUGGING
	// snapmirror_policy
	// SnapmirrorPolicy
	// sync_type
	// SyncType
	// strict_sync
	// END RIPPY DEBUGGING
	// SnapmirrorPolicySyncTypeStrictSync captures enum value "strict_sync"
	SnapmirrorPolicySyncTypeStrictSync string = "strict_sync"

	// BEGIN RIPPY DEBUGGING
	// snapmirror_policy
	// SnapmirrorPolicy
	// sync_type
	// SyncType
	// active_sync
	// END RIPPY DEBUGGING
	// SnapmirrorPolicySyncTypeActiveSync captures enum value "active_sync"
	SnapmirrorPolicySyncTypeActiveSync string = "active_sync"
)

// prop value enum
func (m *SnapmirrorPolicy) validateSyncTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, snapmirrorPolicyTypeSyncTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SnapmirrorPolicy) validateSyncType(formats strfmt.Registry) error {
	if swag.IsZero(m.SyncType) { // not required
		return nil
	}

	// value enum
	if err := m.validateSyncTypeEnum("sync_type", "body", m.SyncType); err != nil {
		return err
	}

	return nil
}

func (m *SnapmirrorPolicy) validateTransferSchedule(formats strfmt.Registry) error {
	if swag.IsZero(m.TransferSchedule) { // not required
		return nil
	}

	if m.TransferSchedule != nil {
		if err := m.TransferSchedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transfer_schedule")
			}
			return err
		}
	}

	return nil
}

var snapmirrorPolicyTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["async","sync"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		snapmirrorPolicyTypeTypePropEnum = append(snapmirrorPolicyTypeTypePropEnum, v)
	}
}

const (

	// BEGIN RIPPY DEBUGGING
	// snapmirror_policy
	// SnapmirrorPolicy
	// type
	// Type
	// async
	// END RIPPY DEBUGGING
	// SnapmirrorPolicyTypeAsync captures enum value "async"
	SnapmirrorPolicyTypeAsync string = "async"

	// BEGIN RIPPY DEBUGGING
	// snapmirror_policy
	// SnapmirrorPolicy
	// type
	// Type
	// sync
	// END RIPPY DEBUGGING
	// SnapmirrorPolicyTypeSync captures enum value "sync"
	SnapmirrorPolicyTypeSync string = "sync"
)

// prop value enum
func (m *SnapmirrorPolicy) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, snapmirrorPolicyTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SnapmirrorPolicy) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *SnapmirrorPolicy) validateUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UUID) { // not required
		return nil
	}

	if err := validate.FormatOf("uuid", "body", "uuid", m.UUID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this snapmirror policy based on the context it is used
func (m *SnapmirrorPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRetention(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScope(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSvm(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSyncCommonSnapshotSchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTransferSchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapmirrorPolicy) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *SnapmirrorPolicy) contextValidateRetention(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Retention); i++ {

		if m.Retention[i] != nil {
			if err := m.Retention[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("retention" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SnapmirrorPolicy) contextValidateScope(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "scope", "body", string(m.Scope)); err != nil {
		return err
	}

	return nil
}

func (m *SnapmirrorPolicy) contextValidateSvm(ctx context.Context, formats strfmt.Registry) error {

	if m.Svm != nil {
		if err := m.Svm.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svm")
			}
			return err
		}
	}

	return nil
}

func (m *SnapmirrorPolicy) contextValidateSyncCommonSnapshotSchedule(ctx context.Context, formats strfmt.Registry) error {

	if m.SyncCommonSnapshotSchedule != nil {
		if err := m.SyncCommonSnapshotSchedule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sync_common_snapshot_schedule")
			}
			return err
		}
	}

	return nil
}

func (m *SnapmirrorPolicy) contextValidateTransferSchedule(ctx context.Context, formats strfmt.Registry) error {

	if m.TransferSchedule != nil {
		if err := m.TransferSchedule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transfer_schedule")
			}
			return err
		}
	}

	return nil
}

func (m *SnapmirrorPolicy) contextValidateUUID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "uuid", "body", strfmt.UUID(m.UUID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SnapmirrorPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnapmirrorPolicy) UnmarshalBinary(b []byte) error {
	var res SnapmirrorPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SnapmirrorPolicyLinks snapmirror policy links
//
// swagger:model SnapmirrorPolicyLinks
type SnapmirrorPolicyLinks struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this snapmirror policy links
func (m *SnapmirrorPolicyLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapmirrorPolicyLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this snapmirror policy links based on the context it is used
func (m *SnapmirrorPolicyLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapmirrorPolicyLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SnapmirrorPolicyLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnapmirrorPolicyLinks) UnmarshalBinary(b []byte) error {
	var res SnapmirrorPolicyLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SnapmirrorPolicySvm snapmirror policy svm
//
// swagger:model SnapmirrorPolicySvm
type SnapmirrorPolicySvm struct {

	// links
	Links *SnapmirrorPolicySvmLinks `json:"_links,omitempty"`

	// The name of the SVM.
	//
	// Example: svm1
	Name string `json:"name,omitempty"`

	// The unique identifier of the SVM.
	//
	// Example: 02c9e252-41be-11e9-81d5-00a0986138f7
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this snapmirror policy svm
func (m *SnapmirrorPolicySvm) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapmirrorPolicySvm) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svm" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this snapmirror policy svm based on the context it is used
func (m *SnapmirrorPolicySvm) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapmirrorPolicySvm) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svm" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SnapmirrorPolicySvm) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnapmirrorPolicySvm) UnmarshalBinary(b []byte) error {
	var res SnapmirrorPolicySvm
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SnapmirrorPolicySvmLinks snapmirror policy svm links
//
// swagger:model SnapmirrorPolicySvmLinks
type SnapmirrorPolicySvmLinks struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this snapmirror policy svm links
func (m *SnapmirrorPolicySvmLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapmirrorPolicySvmLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svm" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this snapmirror policy svm links based on the context it is used
func (m *SnapmirrorPolicySvmLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapmirrorPolicySvmLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svm" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SnapmirrorPolicySvmLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnapmirrorPolicySvmLinks) UnmarshalBinary(b []byte) error {
	var res SnapmirrorPolicySvmLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SnapmirrorPolicySyncCommonSnapshotSchedule Schedule used to create common Snapshot copies for synchronous relationships.
//
// swagger:model SnapmirrorPolicySyncCommonSnapshotSchedule
type SnapmirrorPolicySyncCommonSnapshotSchedule struct {

	// links
	Links *SnapmirrorPolicySyncCommonSnapshotScheduleLinks `json:"_links,omitempty"`

	// Job schedule name
	// Example: weekly
	Name string `json:"name,omitempty"`

	// Job schedule UUID
	// Example: 1cd8a442-86d1-11e0-ae1c-123478563412
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this snapmirror policy sync common snapshot schedule
func (m *SnapmirrorPolicySyncCommonSnapshotSchedule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapmirrorPolicySyncCommonSnapshotSchedule) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sync_common_snapshot_schedule" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this snapmirror policy sync common snapshot schedule based on the context it is used
func (m *SnapmirrorPolicySyncCommonSnapshotSchedule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapmirrorPolicySyncCommonSnapshotSchedule) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sync_common_snapshot_schedule" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SnapmirrorPolicySyncCommonSnapshotSchedule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnapmirrorPolicySyncCommonSnapshotSchedule) UnmarshalBinary(b []byte) error {
	var res SnapmirrorPolicySyncCommonSnapshotSchedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SnapmirrorPolicySyncCommonSnapshotScheduleLinks snapmirror policy sync common snapshot schedule links
//
// swagger:model SnapmirrorPolicySyncCommonSnapshotScheduleLinks
type SnapmirrorPolicySyncCommonSnapshotScheduleLinks struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this snapmirror policy sync common snapshot schedule links
func (m *SnapmirrorPolicySyncCommonSnapshotScheduleLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapmirrorPolicySyncCommonSnapshotScheduleLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sync_common_snapshot_schedule" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this snapmirror policy sync common snapshot schedule links based on the context it is used
func (m *SnapmirrorPolicySyncCommonSnapshotScheduleLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapmirrorPolicySyncCommonSnapshotScheduleLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sync_common_snapshot_schedule" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SnapmirrorPolicySyncCommonSnapshotScheduleLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnapmirrorPolicySyncCommonSnapshotScheduleLinks) UnmarshalBinary(b []byte) error {
	var res SnapmirrorPolicySyncCommonSnapshotScheduleLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SnapmirrorPolicyTransferSchedule The schedule used to update asynchronous relationships.
//
// swagger:model SnapmirrorPolicyTransferSchedule
type SnapmirrorPolicyTransferSchedule struct {

	// links
	Links *SnapmirrorPolicyTransferScheduleLinks `json:"_links,omitempty"`

	// Job schedule name
	// Example: weekly
	Name string `json:"name,omitempty"`

	// Job schedule UUID
	// Example: 1cd8a442-86d1-11e0-ae1c-123478563412
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this snapmirror policy transfer schedule
func (m *SnapmirrorPolicyTransferSchedule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapmirrorPolicyTransferSchedule) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transfer_schedule" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this snapmirror policy transfer schedule based on the context it is used
func (m *SnapmirrorPolicyTransferSchedule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapmirrorPolicyTransferSchedule) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transfer_schedule" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SnapmirrorPolicyTransferSchedule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnapmirrorPolicyTransferSchedule) UnmarshalBinary(b []byte) error {
	var res SnapmirrorPolicyTransferSchedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SnapmirrorPolicyTransferScheduleLinks snapmirror policy transfer schedule links
//
// swagger:model SnapmirrorPolicyTransferScheduleLinks
type SnapmirrorPolicyTransferScheduleLinks struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this snapmirror policy transfer schedule links
func (m *SnapmirrorPolicyTransferScheduleLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapmirrorPolicyTransferScheduleLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transfer_schedule" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this snapmirror policy transfer schedule links based on the context it is used
func (m *SnapmirrorPolicyTransferScheduleLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapmirrorPolicyTransferScheduleLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transfer_schedule" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SnapmirrorPolicyTransferScheduleLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnapmirrorPolicyTransferScheduleLinks) UnmarshalBinary(b []byte) error {
	var res SnapmirrorPolicyTransferScheduleLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HELLO RIPPY
