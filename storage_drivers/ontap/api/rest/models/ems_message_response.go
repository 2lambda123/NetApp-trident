// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EmsMessageResponse ems message response
//
// swagger:model ems_message_response
type EmsMessageResponse struct {

	// links
	Links *EmsMessageResponseLinks `json:"_links,omitempty"`

	// Number of records
	// Example: 3
	NumRecords int64 `json:"num_records,omitempty"`

	// records
	Records []*EmsMessageResponseRecordsItems0 `json:"records,omitempty"`
}

// Validate validates this ems message response
func (m *EmsMessageResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecords(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EmsMessageResponse) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *EmsMessageResponse) validateRecords(formats strfmt.Registry) error {
	if swag.IsZero(m.Records) { // not required
		return nil
	}

	for i := 0; i < len(m.Records); i++ {
		if swag.IsZero(m.Records[i]) { // not required
			continue
		}

		if m.Records[i] != nil {
			if err := m.Records[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("records" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this ems message response based on the context it is used
func (m *EmsMessageResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecords(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EmsMessageResponse) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *EmsMessageResponse) contextValidateRecords(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Records); i++ {

		if m.Records[i] != nil {
			if err := m.Records[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("records" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *EmsMessageResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EmsMessageResponse) UnmarshalBinary(b []byte) error {
	var res EmsMessageResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// EmsMessageResponseLinks ems message response links
//
// swagger:model EmsMessageResponseLinks
type EmsMessageResponseLinks struct {

	// next
	Next *Href `json:"next,omitempty"`

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this ems message response links
func (m *EmsMessageResponseLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EmsMessageResponseLinks) validateNext(formats strfmt.Registry) error {
	if swag.IsZero(m.Next) { // not required
		return nil
	}

	if m.Next != nil {
		if err := m.Next.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "next")
			}
			return err
		}
	}

	return nil
}

func (m *EmsMessageResponseLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this ems message response links based on the context it is used
func (m *EmsMessageResponseLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNext(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EmsMessageResponseLinks) contextValidateNext(ctx context.Context, formats strfmt.Registry) error {

	if m.Next != nil {
		if err := m.Next.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "next")
			}
			return err
		}
	}

	return nil
}

func (m *EmsMessageResponseLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EmsMessageResponseLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EmsMessageResponseLinks) UnmarshalBinary(b []byte) error {
	var res EmsMessageResponseLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// EmsMessageResponseRecordsItems0 ems message response records items0
//
// swagger:model EmsMessageResponseRecordsItems0
type EmsMessageResponseRecordsItems0 struct {

	// links
	Links *EmsMessageResponseRecordsItems0Links `json:"_links,omitempty"`

	// Corrective action
	// Read Only: true
	CorrectiveAction string `json:"corrective_action,omitempty"`

	// Is deprecated?
	// Example: true
	// Read Only: true
	Deprecated *bool `json:"deprecated,omitempty"`

	// Description of the event.
	// Read Only: true
	Description string `json:"description,omitempty"`

	// Name of the event.
	// Example: callhome.spares.low
	// Read Only: true
	Name string `json:"name,omitempty"`

	// Severity
	// Example: error
	// Read Only: true
	// Enum: [emergency alert error notice informational debug]
	Severity string `json:"severity,omitempty"`

	// SNMP trap type
	// Example: standard
	// Read Only: true
	// Enum: [standard built_in severity_based]
	SnmpTrapType string `json:"snmp_trap_type,omitempty"`
}

// Validate validates this ems message response records items0
func (m *EmsMessageResponseRecordsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnmpTrapType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EmsMessageResponseRecordsItems0) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

var emsMessageResponseRecordsItems0TypeSeverityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["emergency","alert","error","notice","informational","debug"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		emsMessageResponseRecordsItems0TypeSeverityPropEnum = append(emsMessageResponseRecordsItems0TypeSeverityPropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// EmsMessageResponseRecordsItems0
	// EmsMessageResponseRecordsItems0
	// severity
	// Severity
	// emergency
	// END DEBUGGING
	// EmsMessageResponseRecordsItems0SeverityEmergency captures enum value "emergency"
	EmsMessageResponseRecordsItems0SeverityEmergency string = "emergency"

	// BEGIN DEBUGGING
	// EmsMessageResponseRecordsItems0
	// EmsMessageResponseRecordsItems0
	// severity
	// Severity
	// alert
	// END DEBUGGING
	// EmsMessageResponseRecordsItems0SeverityAlert captures enum value "alert"
	EmsMessageResponseRecordsItems0SeverityAlert string = "alert"

	// BEGIN DEBUGGING
	// EmsMessageResponseRecordsItems0
	// EmsMessageResponseRecordsItems0
	// severity
	// Severity
	// error
	// END DEBUGGING
	// EmsMessageResponseRecordsItems0SeverityError captures enum value "error"
	EmsMessageResponseRecordsItems0SeverityError string = "error"

	// BEGIN DEBUGGING
	// EmsMessageResponseRecordsItems0
	// EmsMessageResponseRecordsItems0
	// severity
	// Severity
	// notice
	// END DEBUGGING
	// EmsMessageResponseRecordsItems0SeverityNotice captures enum value "notice"
	EmsMessageResponseRecordsItems0SeverityNotice string = "notice"

	// BEGIN DEBUGGING
	// EmsMessageResponseRecordsItems0
	// EmsMessageResponseRecordsItems0
	// severity
	// Severity
	// informational
	// END DEBUGGING
	// EmsMessageResponseRecordsItems0SeverityInformational captures enum value "informational"
	EmsMessageResponseRecordsItems0SeverityInformational string = "informational"

	// BEGIN DEBUGGING
	// EmsMessageResponseRecordsItems0
	// EmsMessageResponseRecordsItems0
	// severity
	// Severity
	// debug
	// END DEBUGGING
	// EmsMessageResponseRecordsItems0SeverityDebug captures enum value "debug"
	EmsMessageResponseRecordsItems0SeverityDebug string = "debug"
)

// prop value enum
func (m *EmsMessageResponseRecordsItems0) validateSeverityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, emsMessageResponseRecordsItems0TypeSeverityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EmsMessageResponseRecordsItems0) validateSeverity(formats strfmt.Registry) error {
	if swag.IsZero(m.Severity) { // not required
		return nil
	}

	// value enum
	if err := m.validateSeverityEnum("severity", "body", m.Severity); err != nil {
		return err
	}

	return nil
}

var emsMessageResponseRecordsItems0TypeSnmpTrapTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["standard","built_in","severity_based"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		emsMessageResponseRecordsItems0TypeSnmpTrapTypePropEnum = append(emsMessageResponseRecordsItems0TypeSnmpTrapTypePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// EmsMessageResponseRecordsItems0
	// EmsMessageResponseRecordsItems0
	// snmp_trap_type
	// SnmpTrapType
	// standard
	// END DEBUGGING
	// EmsMessageResponseRecordsItems0SnmpTrapTypeStandard captures enum value "standard"
	EmsMessageResponseRecordsItems0SnmpTrapTypeStandard string = "standard"

	// BEGIN DEBUGGING
	// EmsMessageResponseRecordsItems0
	// EmsMessageResponseRecordsItems0
	// snmp_trap_type
	// SnmpTrapType
	// built_in
	// END DEBUGGING
	// EmsMessageResponseRecordsItems0SnmpTrapTypeBuiltIn captures enum value "built_in"
	EmsMessageResponseRecordsItems0SnmpTrapTypeBuiltIn string = "built_in"

	// BEGIN DEBUGGING
	// EmsMessageResponseRecordsItems0
	// EmsMessageResponseRecordsItems0
	// snmp_trap_type
	// SnmpTrapType
	// severity_based
	// END DEBUGGING
	// EmsMessageResponseRecordsItems0SnmpTrapTypeSeverityBased captures enum value "severity_based"
	EmsMessageResponseRecordsItems0SnmpTrapTypeSeverityBased string = "severity_based"
)

// prop value enum
func (m *EmsMessageResponseRecordsItems0) validateSnmpTrapTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, emsMessageResponseRecordsItems0TypeSnmpTrapTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EmsMessageResponseRecordsItems0) validateSnmpTrapType(formats strfmt.Registry) error {
	if swag.IsZero(m.SnmpTrapType) { // not required
		return nil
	}

	// value enum
	if err := m.validateSnmpTrapTypeEnum("snmp_trap_type", "body", m.SnmpTrapType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this ems message response records items0 based on the context it is used
func (m *EmsMessageResponseRecordsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCorrectiveAction(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeprecated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDescription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSeverity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSnmpTrapType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EmsMessageResponseRecordsItems0) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *EmsMessageResponseRecordsItems0) contextValidateCorrectiveAction(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "corrective_action", "body", string(m.CorrectiveAction)); err != nil {
		return err
	}

	return nil
}

func (m *EmsMessageResponseRecordsItems0) contextValidateDeprecated(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "deprecated", "body", m.Deprecated); err != nil {
		return err
	}

	return nil
}

func (m *EmsMessageResponseRecordsItems0) contextValidateDescription(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "description", "body", string(m.Description)); err != nil {
		return err
	}

	return nil
}

func (m *EmsMessageResponseRecordsItems0) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *EmsMessageResponseRecordsItems0) contextValidateSeverity(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "severity", "body", string(m.Severity)); err != nil {
		return err
	}

	return nil
}

func (m *EmsMessageResponseRecordsItems0) contextValidateSnmpTrapType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "snmp_trap_type", "body", string(m.SnmpTrapType)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EmsMessageResponseRecordsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EmsMessageResponseRecordsItems0) UnmarshalBinary(b []byte) error {
	var res EmsMessageResponseRecordsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// EmsMessageResponseRecordsItems0Links ems message response records items0 links
//
// swagger:model EmsMessageResponseRecordsItems0Links
type EmsMessageResponseRecordsItems0Links struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this ems message response records items0 links
func (m *EmsMessageResponseRecordsItems0Links) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EmsMessageResponseRecordsItems0Links) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this ems message response records items0 links based on the context it is used
func (m *EmsMessageResponseRecordsItems0Links) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EmsMessageResponseRecordsItems0Links) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EmsMessageResponseRecordsItems0Links) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EmsMessageResponseRecordsItems0Links) UnmarshalBinary(b []byte) error {
	var res EmsMessageResponseRecordsItems0Links
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
