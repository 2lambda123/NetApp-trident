// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NetworkScopeReadonly Set to "svm" for interfaces owned by an SVM. Otherwise, set to "cluster".
//
// swagger:model network_scope_readonly
type NetworkScopeReadonly string

const (

	// NetworkScopeReadonlySvm captures enum value "svm"
	NetworkScopeReadonlySvm NetworkScopeReadonly = "svm"

	// NetworkScopeReadonlyCluster captures enum value "cluster"
	NetworkScopeReadonlyCluster NetworkScopeReadonly = "cluster"
)

// for schema
var networkScopeReadonlyEnum []interface{}

func init() {
	var res []NetworkScopeReadonly
	if err := json.Unmarshal([]byte(`["svm","cluster"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		networkScopeReadonlyEnum = append(networkScopeReadonlyEnum, v)
	}
}

func (m NetworkScopeReadonly) validateNetworkScopeReadonlyEnum(path, location string, value NetworkScopeReadonly) error {
	if err := validate.EnumCase(path, location, value, networkScopeReadonlyEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this network scope readonly
func (m NetworkScopeReadonly) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateNetworkScopeReadonlyEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this network scope readonly based on the context it is used
func (m NetworkScopeReadonly) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := validate.ReadOnly(ctx, "", "body", NetworkScopeReadonly(m)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// HELLO RIPPY
