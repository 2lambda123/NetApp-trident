// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StorageBridge storage bridge
//
// swagger:model storage_bridge
type StorageBridge struct {

	// Chassis throughput status
	// Example: ok
	// Enum: [ok warning]
	ChassisThroughputState string `json:"chassis_throughput_state,omitempty"`

	// dram single bit error count
	DramSingleBitErrorCount int64 `json:"dram_single_bit_error_count,omitempty"`

	// errors
	Errors []*StorageBridgeErrorsItems0 `json:"errors,omitempty"`

	// fc ports
	FcPorts []*StorageBridgeFcPortsItems0 `json:"fc_ports,omitempty"`

	// Bridge firmware version
	// Example: 4.10 007A
	FirmwareVersion string `json:"firmware_version,omitempty"`

	// IP Address
	// Read Only: true
	IPAddress string `json:"ip_address,omitempty"`

	// last reboot
	LastReboot *StorageBridgeLastReboot `json:"last_reboot,omitempty"`

	// managed by
	// Enum: [snmp in_band]
	ManagedBy string `json:"managed_by,omitempty"`

	// Bridge model
	// Example: FibreBridge6500N
	Model string `json:"model,omitempty"`

	// Indicates whether monitoring is enabled for the bridge.
	MonitoringEnabled bool `json:"monitoring_enabled,omitempty"`

	// Bridge name
	// Example: ATTO_FibreBridge6500N_1
	Name string `json:"name,omitempty"`

	// paths
	Paths []*StorageBridgePathsItems0 `json:"paths,omitempty"`

	// power supply units
	PowerSupplyUnits []*StorageBridgePowerSupplyUnitsItems0 `json:"power_supply_units,omitempty"`

	// sas ports
	SasPorts []*StorageBridgeSasPortsItems0 `json:"sas_ports,omitempty"`

	// Indicates whether security is enabled for the bridge.
	SecurityEnabled bool `json:"security_enabled,omitempty"`

	// Bridge serial number
	// Example: FB7600N100004
	SerialNumber string `json:"serial_number,omitempty"`

	// Bridge state
	// Enum: [unknown ok error]
	State string `json:"state,omitempty"`

	// Bridge symbolic name
	// Example: rtp-fcsas03-41kk11
	SymbolicName string `json:"symbolic_name,omitempty"`

	// temperature sensor
	TemperatureSensor *StorageBridgeTemperatureSensor `json:"temperature_sensor,omitempty"`

	// Bridge vendor
	// Example: atto
	// Enum: [unknown atto]
	Vendor string `json:"vendor,omitempty"`

	// Bridge world wide name
	// Example: 2000001086600476
	Wwn string `json:"wwn,omitempty"`
}

// Validate validates this storage bridge
func (m *StorageBridge) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChassisThroughputState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFcPorts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastReboot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManagedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaths(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePowerSupplyUnits(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSasPorts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemperatureSensor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVendor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var storageBridgeTypeChassisThroughputStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ok","warning"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageBridgeTypeChassisThroughputStatePropEnum = append(storageBridgeTypeChassisThroughputStatePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// storage_bridge
	// StorageBridge
	// chassis_throughput_state
	// ChassisThroughputState
	// ok
	// END DEBUGGING
	// StorageBridgeChassisThroughputStateOk captures enum value "ok"
	StorageBridgeChassisThroughputStateOk string = "ok"

	// BEGIN DEBUGGING
	// storage_bridge
	// StorageBridge
	// chassis_throughput_state
	// ChassisThroughputState
	// warning
	// END DEBUGGING
	// StorageBridgeChassisThroughputStateWarning captures enum value "warning"
	StorageBridgeChassisThroughputStateWarning string = "warning"
)

// prop value enum
func (m *StorageBridge) validateChassisThroughputStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, storageBridgeTypeChassisThroughputStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StorageBridge) validateChassisThroughputState(formats strfmt.Registry) error {
	if swag.IsZero(m.ChassisThroughputState) { // not required
		return nil
	}

	// value enum
	if err := m.validateChassisThroughputStateEnum("chassis_throughput_state", "body", m.ChassisThroughputState); err != nil {
		return err
	}

	return nil
}

func (m *StorageBridge) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(m.Errors) { // not required
		return nil
	}

	for i := 0; i < len(m.Errors); i++ {
		if swag.IsZero(m.Errors[i]) { // not required
			continue
		}

		if m.Errors[i] != nil {
			if err := m.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StorageBridge) validateFcPorts(formats strfmt.Registry) error {
	if swag.IsZero(m.FcPorts) { // not required
		return nil
	}

	for i := 0; i < len(m.FcPorts); i++ {
		if swag.IsZero(m.FcPorts[i]) { // not required
			continue
		}

		if m.FcPorts[i] != nil {
			if err := m.FcPorts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fc_ports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StorageBridge) validateLastReboot(formats strfmt.Registry) error {
	if swag.IsZero(m.LastReboot) { // not required
		return nil
	}

	if m.LastReboot != nil {
		if err := m.LastReboot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_reboot")
			}
			return err
		}
	}

	return nil
}

var storageBridgeTypeManagedByPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["snmp","in_band"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageBridgeTypeManagedByPropEnum = append(storageBridgeTypeManagedByPropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// storage_bridge
	// StorageBridge
	// managed_by
	// ManagedBy
	// snmp
	// END DEBUGGING
	// StorageBridgeManagedBySnmp captures enum value "snmp"
	StorageBridgeManagedBySnmp string = "snmp"

	// BEGIN DEBUGGING
	// storage_bridge
	// StorageBridge
	// managed_by
	// ManagedBy
	// in_band
	// END DEBUGGING
	// StorageBridgeManagedByInBand captures enum value "in_band"
	StorageBridgeManagedByInBand string = "in_band"
)

// prop value enum
func (m *StorageBridge) validateManagedByEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, storageBridgeTypeManagedByPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StorageBridge) validateManagedBy(formats strfmt.Registry) error {
	if swag.IsZero(m.ManagedBy) { // not required
		return nil
	}

	// value enum
	if err := m.validateManagedByEnum("managed_by", "body", m.ManagedBy); err != nil {
		return err
	}

	return nil
}

func (m *StorageBridge) validatePaths(formats strfmt.Registry) error {
	if swag.IsZero(m.Paths) { // not required
		return nil
	}

	for i := 0; i < len(m.Paths); i++ {
		if swag.IsZero(m.Paths[i]) { // not required
			continue
		}

		if m.Paths[i] != nil {
			if err := m.Paths[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("paths" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StorageBridge) validatePowerSupplyUnits(formats strfmt.Registry) error {
	if swag.IsZero(m.PowerSupplyUnits) { // not required
		return nil
	}

	for i := 0; i < len(m.PowerSupplyUnits); i++ {
		if swag.IsZero(m.PowerSupplyUnits[i]) { // not required
			continue
		}

		if m.PowerSupplyUnits[i] != nil {
			if err := m.PowerSupplyUnits[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("power_supply_units" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StorageBridge) validateSasPorts(formats strfmt.Registry) error {
	if swag.IsZero(m.SasPorts) { // not required
		return nil
	}

	for i := 0; i < len(m.SasPorts); i++ {
		if swag.IsZero(m.SasPorts[i]) { // not required
			continue
		}

		if m.SasPorts[i] != nil {
			if err := m.SasPorts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sas_ports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var storageBridgeTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["unknown","ok","error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageBridgeTypeStatePropEnum = append(storageBridgeTypeStatePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// storage_bridge
	// StorageBridge
	// state
	// State
	// unknown
	// END DEBUGGING
	// StorageBridgeStateUnknown captures enum value "unknown"
	StorageBridgeStateUnknown string = "unknown"

	// BEGIN DEBUGGING
	// storage_bridge
	// StorageBridge
	// state
	// State
	// ok
	// END DEBUGGING
	// StorageBridgeStateOk captures enum value "ok"
	StorageBridgeStateOk string = "ok"

	// BEGIN DEBUGGING
	// storage_bridge
	// StorageBridge
	// state
	// State
	// error
	// END DEBUGGING
	// StorageBridgeStateError captures enum value "error"
	StorageBridgeStateError string = "error"
)

// prop value enum
func (m *StorageBridge) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, storageBridgeTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StorageBridge) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *StorageBridge) validateTemperatureSensor(formats strfmt.Registry) error {
	if swag.IsZero(m.TemperatureSensor) { // not required
		return nil
	}

	if m.TemperatureSensor != nil {
		if err := m.TemperatureSensor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("temperature_sensor")
			}
			return err
		}
	}

	return nil
}

var storageBridgeTypeVendorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["unknown","atto"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageBridgeTypeVendorPropEnum = append(storageBridgeTypeVendorPropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// storage_bridge
	// StorageBridge
	// vendor
	// Vendor
	// unknown
	// END DEBUGGING
	// StorageBridgeVendorUnknown captures enum value "unknown"
	StorageBridgeVendorUnknown string = "unknown"

	// BEGIN DEBUGGING
	// storage_bridge
	// StorageBridge
	// vendor
	// Vendor
	// atto
	// END DEBUGGING
	// StorageBridgeVendorAtto captures enum value "atto"
	StorageBridgeVendorAtto string = "atto"
)

// prop value enum
func (m *StorageBridge) validateVendorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, storageBridgeTypeVendorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StorageBridge) validateVendor(formats strfmt.Registry) error {
	if swag.IsZero(m.Vendor) { // not required
		return nil
	}

	// value enum
	if err := m.validateVendorEnum("vendor", "body", m.Vendor); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this storage bridge based on the context it is used
func (m *StorageBridge) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFcPorts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIPAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastReboot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePaths(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePowerSupplyUnits(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSasPorts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTemperatureSensor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageBridge) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Errors); i++ {

		if m.Errors[i] != nil {
			if err := m.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StorageBridge) contextValidateFcPorts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FcPorts); i++ {

		if m.FcPorts[i] != nil {
			if err := m.FcPorts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fc_ports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StorageBridge) contextValidateIPAddress(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "ip_address", "body", string(m.IPAddress)); err != nil {
		return err
	}

	return nil
}

func (m *StorageBridge) contextValidateLastReboot(ctx context.Context, formats strfmt.Registry) error {

	if m.LastReboot != nil {
		if err := m.LastReboot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_reboot")
			}
			return err
		}
	}

	return nil
}

func (m *StorageBridge) contextValidatePaths(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Paths); i++ {

		if m.Paths[i] != nil {
			if err := m.Paths[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("paths" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StorageBridge) contextValidatePowerSupplyUnits(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PowerSupplyUnits); i++ {

		if m.PowerSupplyUnits[i] != nil {
			if err := m.PowerSupplyUnits[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("power_supply_units" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StorageBridge) contextValidateSasPorts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SasPorts); i++ {

		if m.SasPorts[i] != nil {
			if err := m.SasPorts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sas_ports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StorageBridge) contextValidateTemperatureSensor(ctx context.Context, formats strfmt.Registry) error {

	if m.TemperatureSensor != nil {
		if err := m.TemperatureSensor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("temperature_sensor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StorageBridge) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageBridge) UnmarshalBinary(b []byte) error {
	var res StorageBridge
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StorageBridgeErrorsItems0 storage bridge errors items0
//
// swagger:model StorageBridgeErrorsItems0
type StorageBridgeErrorsItems0 struct {

	// component
	Component *StorageBridgeErrorsItems0Component `json:"component,omitempty"`

	// reason
	Reason *StorageBridgeErrorsItems0Reason `json:"reason,omitempty"`

	// Bridge error severity
	// Enum: [unknown notice warning error]
	Severity string `json:"severity,omitempty"`

	// Bridge error type
	// Enum: [unknown bridge_unreachable temp_above_critical_level temp_below_critical_level temp_sensor_status_critical temp_sensor_status_unavailable invalid_configuration sas_port_offline link_failure sas_port_online power_supply_offline]
	Type string `json:"type,omitempty"`
}

// Validate validates this storage bridge errors items0
func (m *StorageBridgeErrorsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComponent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageBridgeErrorsItems0) validateComponent(formats strfmt.Registry) error {
	if swag.IsZero(m.Component) { // not required
		return nil
	}

	if m.Component != nil {
		if err := m.Component.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("component")
			}
			return err
		}
	}

	return nil
}

func (m *StorageBridgeErrorsItems0) validateReason(formats strfmt.Registry) error {
	if swag.IsZero(m.Reason) { // not required
		return nil
	}

	if m.Reason != nil {
		if err := m.Reason.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reason")
			}
			return err
		}
	}

	return nil
}

var storageBridgeErrorsItems0TypeSeverityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["unknown","notice","warning","error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageBridgeErrorsItems0TypeSeverityPropEnum = append(storageBridgeErrorsItems0TypeSeverityPropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// StorageBridgeErrorsItems0
	// StorageBridgeErrorsItems0
	// severity
	// Severity
	// unknown
	// END DEBUGGING
	// StorageBridgeErrorsItems0SeverityUnknown captures enum value "unknown"
	StorageBridgeErrorsItems0SeverityUnknown string = "unknown"

	// BEGIN DEBUGGING
	// StorageBridgeErrorsItems0
	// StorageBridgeErrorsItems0
	// severity
	// Severity
	// notice
	// END DEBUGGING
	// StorageBridgeErrorsItems0SeverityNotice captures enum value "notice"
	StorageBridgeErrorsItems0SeverityNotice string = "notice"

	// BEGIN DEBUGGING
	// StorageBridgeErrorsItems0
	// StorageBridgeErrorsItems0
	// severity
	// Severity
	// warning
	// END DEBUGGING
	// StorageBridgeErrorsItems0SeverityWarning captures enum value "warning"
	StorageBridgeErrorsItems0SeverityWarning string = "warning"

	// BEGIN DEBUGGING
	// StorageBridgeErrorsItems0
	// StorageBridgeErrorsItems0
	// severity
	// Severity
	// error
	// END DEBUGGING
	// StorageBridgeErrorsItems0SeverityError captures enum value "error"
	StorageBridgeErrorsItems0SeverityError string = "error"
)

// prop value enum
func (m *StorageBridgeErrorsItems0) validateSeverityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, storageBridgeErrorsItems0TypeSeverityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StorageBridgeErrorsItems0) validateSeverity(formats strfmt.Registry) error {
	if swag.IsZero(m.Severity) { // not required
		return nil
	}

	// value enum
	if err := m.validateSeverityEnum("severity", "body", m.Severity); err != nil {
		return err
	}

	return nil
}

var storageBridgeErrorsItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["unknown","bridge_unreachable","temp_above_critical_level","temp_below_critical_level","temp_sensor_status_critical","temp_sensor_status_unavailable","invalid_configuration","sas_port_offline","link_failure","sas_port_online","power_supply_offline"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageBridgeErrorsItems0TypeTypePropEnum = append(storageBridgeErrorsItems0TypeTypePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// StorageBridgeErrorsItems0
	// StorageBridgeErrorsItems0
	// type
	// Type
	// unknown
	// END DEBUGGING
	// StorageBridgeErrorsItems0TypeUnknown captures enum value "unknown"
	StorageBridgeErrorsItems0TypeUnknown string = "unknown"

	// BEGIN DEBUGGING
	// StorageBridgeErrorsItems0
	// StorageBridgeErrorsItems0
	// type
	// Type
	// bridge_unreachable
	// END DEBUGGING
	// StorageBridgeErrorsItems0TypeBridgeUnreachable captures enum value "bridge_unreachable"
	StorageBridgeErrorsItems0TypeBridgeUnreachable string = "bridge_unreachable"

	// BEGIN DEBUGGING
	// StorageBridgeErrorsItems0
	// StorageBridgeErrorsItems0
	// type
	// Type
	// temp_above_critical_level
	// END DEBUGGING
	// StorageBridgeErrorsItems0TypeTempAboveCriticalLevel captures enum value "temp_above_critical_level"
	StorageBridgeErrorsItems0TypeTempAboveCriticalLevel string = "temp_above_critical_level"

	// BEGIN DEBUGGING
	// StorageBridgeErrorsItems0
	// StorageBridgeErrorsItems0
	// type
	// Type
	// temp_below_critical_level
	// END DEBUGGING
	// StorageBridgeErrorsItems0TypeTempBelowCriticalLevel captures enum value "temp_below_critical_level"
	StorageBridgeErrorsItems0TypeTempBelowCriticalLevel string = "temp_below_critical_level"

	// BEGIN DEBUGGING
	// StorageBridgeErrorsItems0
	// StorageBridgeErrorsItems0
	// type
	// Type
	// temp_sensor_status_critical
	// END DEBUGGING
	// StorageBridgeErrorsItems0TypeTempSensorStatusCritical captures enum value "temp_sensor_status_critical"
	StorageBridgeErrorsItems0TypeTempSensorStatusCritical string = "temp_sensor_status_critical"

	// BEGIN DEBUGGING
	// StorageBridgeErrorsItems0
	// StorageBridgeErrorsItems0
	// type
	// Type
	// temp_sensor_status_unavailable
	// END DEBUGGING
	// StorageBridgeErrorsItems0TypeTempSensorStatusUnavailable captures enum value "temp_sensor_status_unavailable"
	StorageBridgeErrorsItems0TypeTempSensorStatusUnavailable string = "temp_sensor_status_unavailable"

	// BEGIN DEBUGGING
	// StorageBridgeErrorsItems0
	// StorageBridgeErrorsItems0
	// type
	// Type
	// invalid_configuration
	// END DEBUGGING
	// StorageBridgeErrorsItems0TypeInvalidConfiguration captures enum value "invalid_configuration"
	StorageBridgeErrorsItems0TypeInvalidConfiguration string = "invalid_configuration"

	// BEGIN DEBUGGING
	// StorageBridgeErrorsItems0
	// StorageBridgeErrorsItems0
	// type
	// Type
	// sas_port_offline
	// END DEBUGGING
	// StorageBridgeErrorsItems0TypeSasPortOffline captures enum value "sas_port_offline"
	StorageBridgeErrorsItems0TypeSasPortOffline string = "sas_port_offline"

	// BEGIN DEBUGGING
	// StorageBridgeErrorsItems0
	// StorageBridgeErrorsItems0
	// type
	// Type
	// link_failure
	// END DEBUGGING
	// StorageBridgeErrorsItems0TypeLinkFailure captures enum value "link_failure"
	StorageBridgeErrorsItems0TypeLinkFailure string = "link_failure"

	// BEGIN DEBUGGING
	// StorageBridgeErrorsItems0
	// StorageBridgeErrorsItems0
	// type
	// Type
	// sas_port_online
	// END DEBUGGING
	// StorageBridgeErrorsItems0TypeSasPortOnline captures enum value "sas_port_online"
	StorageBridgeErrorsItems0TypeSasPortOnline string = "sas_port_online"

	// BEGIN DEBUGGING
	// StorageBridgeErrorsItems0
	// StorageBridgeErrorsItems0
	// type
	// Type
	// power_supply_offline
	// END DEBUGGING
	// StorageBridgeErrorsItems0TypePowerSupplyOffline captures enum value "power_supply_offline"
	StorageBridgeErrorsItems0TypePowerSupplyOffline string = "power_supply_offline"
)

// prop value enum
func (m *StorageBridgeErrorsItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, storageBridgeErrorsItems0TypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StorageBridgeErrorsItems0) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this storage bridge errors items0 based on the context it is used
func (m *StorageBridgeErrorsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateComponent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReason(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageBridgeErrorsItems0) contextValidateComponent(ctx context.Context, formats strfmt.Registry) error {

	if m.Component != nil {
		if err := m.Component.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("component")
			}
			return err
		}
	}

	return nil
}

func (m *StorageBridgeErrorsItems0) contextValidateReason(ctx context.Context, formats strfmt.Registry) error {

	if m.Reason != nil {
		if err := m.Reason.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reason")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StorageBridgeErrorsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageBridgeErrorsItems0) UnmarshalBinary(b []byte) error {
	var res StorageBridgeErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StorageBridgeErrorsItems0Component storage bridge errors items0 component
//
// swagger:model StorageBridgeErrorsItems0Component
type StorageBridgeErrorsItems0Component struct {

	// Bridge error component ID
	ID int64 `json:"id,omitempty"`

	// Bridge error component name
	Name string `json:"name,omitempty"`

	// Bridge error component unique ID
	UniqueID string `json:"unique_id,omitempty"`
}

// Validate validates this storage bridge errors items0 component
func (m *StorageBridgeErrorsItems0Component) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this storage bridge errors items0 component based on context it is used
func (m *StorageBridgeErrorsItems0Component) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StorageBridgeErrorsItems0Component) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageBridgeErrorsItems0Component) UnmarshalBinary(b []byte) error {
	var res StorageBridgeErrorsItems0Component
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StorageBridgeErrorsItems0Reason storage bridge errors items0 reason
//
// swagger:model StorageBridgeErrorsItems0Reason
type StorageBridgeErrorsItems0Reason struct {

	// code
	Code string `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this storage bridge errors items0 reason
func (m *StorageBridgeErrorsItems0Reason) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this storage bridge errors items0 reason based on context it is used
func (m *StorageBridgeErrorsItems0Reason) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StorageBridgeErrorsItems0Reason) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageBridgeErrorsItems0Reason) UnmarshalBinary(b []byte) error {
	var res StorageBridgeErrorsItems0Reason
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StorageBridgeFcPortsItems0 storage bridge fc ports items0
//
// swagger:model StorageBridgeFcPortsItems0
type StorageBridgeFcPortsItems0 struct {

	// Bridge FC port configured data rate, in Gbps
	// Enum: [0 2 4 8 16 32]
	ConfiguredDataRate float64 `json:"configured_data_rate,omitempty"`

	// Bridge FC port configured connection mode
	// Enum: [loop ptp loop_preferred ptp_preferred]
	ConnectionMode string `json:"connection_mode,omitempty"`

	// Bridge FC port data rate capability, in Gbps
	// Enum: [2 4 8 16 32]
	DataRateCapability float64 `json:"data_rate_capability,omitempty"`

	// Indicates whether the bridge FC port is enabled.
	Enabled bool `json:"enabled,omitempty"`

	// Bridge FC port index
	ID int64 `json:"id,omitempty"`

	// Bridge FC port negotiated data rate, in Gbps
	// Enum: [0 2 4 8 16 32]
	NegotiatedDataRate float64 `json:"negotiated_data_rate,omitempty"`

	// Bridge FC port peer port world wide name
	// Example: 200650eb1a238892
	PeerWwn string `json:"peer_wwn,omitempty"`

	// sfp
	Sfp *StorageBridgeFcPortsItems0Sfp `json:"sfp,omitempty"`

	// Bridge FC port state
	// Enum: [error online offline]
	State string `json:"state,omitempty"`

	// Bridge FC port world wide name
	// Example: 2100001086a54100
	Wwn string `json:"wwn,omitempty"`
}

// Validate validates this storage bridge fc ports items0
func (m *StorageBridgeFcPortsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfiguredDataRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectionMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataRateCapability(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNegotiatedDataRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSfp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var storageBridgeFcPortsItems0TypeConfiguredDataRatePropEnum []interface{}

func init() {
	var res []float64
	if err := json.Unmarshal([]byte(`[0,2,4,8,16,32]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageBridgeFcPortsItems0TypeConfiguredDataRatePropEnum = append(storageBridgeFcPortsItems0TypeConfiguredDataRatePropEnum, v)
	}
}

// prop value enum
func (m *StorageBridgeFcPortsItems0) validateConfiguredDataRateEnum(path, location string, value float64) error {
	if err := validate.EnumCase(path, location, value, storageBridgeFcPortsItems0TypeConfiguredDataRatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StorageBridgeFcPortsItems0) validateConfiguredDataRate(formats strfmt.Registry) error {
	if swag.IsZero(m.ConfiguredDataRate) { // not required
		return nil
	}

	// value enum
	if err := m.validateConfiguredDataRateEnum("configured_data_rate", "body", m.ConfiguredDataRate); err != nil {
		return err
	}

	return nil
}

var storageBridgeFcPortsItems0TypeConnectionModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["loop","ptp","loop_preferred","ptp_preferred"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageBridgeFcPortsItems0TypeConnectionModePropEnum = append(storageBridgeFcPortsItems0TypeConnectionModePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// StorageBridgeFcPortsItems0
	// StorageBridgeFcPortsItems0
	// connection_mode
	// ConnectionMode
	// loop
	// END DEBUGGING
	// StorageBridgeFcPortsItems0ConnectionModeLoop captures enum value "loop"
	StorageBridgeFcPortsItems0ConnectionModeLoop string = "loop"

	// BEGIN DEBUGGING
	// StorageBridgeFcPortsItems0
	// StorageBridgeFcPortsItems0
	// connection_mode
	// ConnectionMode
	// ptp
	// END DEBUGGING
	// StorageBridgeFcPortsItems0ConnectionModePtp captures enum value "ptp"
	StorageBridgeFcPortsItems0ConnectionModePtp string = "ptp"

	// BEGIN DEBUGGING
	// StorageBridgeFcPortsItems0
	// StorageBridgeFcPortsItems0
	// connection_mode
	// ConnectionMode
	// loop_preferred
	// END DEBUGGING
	// StorageBridgeFcPortsItems0ConnectionModeLoopPreferred captures enum value "loop_preferred"
	StorageBridgeFcPortsItems0ConnectionModeLoopPreferred string = "loop_preferred"

	// BEGIN DEBUGGING
	// StorageBridgeFcPortsItems0
	// StorageBridgeFcPortsItems0
	// connection_mode
	// ConnectionMode
	// ptp_preferred
	// END DEBUGGING
	// StorageBridgeFcPortsItems0ConnectionModePtpPreferred captures enum value "ptp_preferred"
	StorageBridgeFcPortsItems0ConnectionModePtpPreferred string = "ptp_preferred"
)

// prop value enum
func (m *StorageBridgeFcPortsItems0) validateConnectionModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, storageBridgeFcPortsItems0TypeConnectionModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StorageBridgeFcPortsItems0) validateConnectionMode(formats strfmt.Registry) error {
	if swag.IsZero(m.ConnectionMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateConnectionModeEnum("connection_mode", "body", m.ConnectionMode); err != nil {
		return err
	}

	return nil
}

var storageBridgeFcPortsItems0TypeDataRateCapabilityPropEnum []interface{}

func init() {
	var res []float64
	if err := json.Unmarshal([]byte(`[2,4,8,16,32]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageBridgeFcPortsItems0TypeDataRateCapabilityPropEnum = append(storageBridgeFcPortsItems0TypeDataRateCapabilityPropEnum, v)
	}
}

// prop value enum
func (m *StorageBridgeFcPortsItems0) validateDataRateCapabilityEnum(path, location string, value float64) error {
	if err := validate.EnumCase(path, location, value, storageBridgeFcPortsItems0TypeDataRateCapabilityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StorageBridgeFcPortsItems0) validateDataRateCapability(formats strfmt.Registry) error {
	if swag.IsZero(m.DataRateCapability) { // not required
		return nil
	}

	// value enum
	if err := m.validateDataRateCapabilityEnum("data_rate_capability", "body", m.DataRateCapability); err != nil {
		return err
	}

	return nil
}

var storageBridgeFcPortsItems0TypeNegotiatedDataRatePropEnum []interface{}

func init() {
	var res []float64
	if err := json.Unmarshal([]byte(`[0,2,4,8,16,32]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageBridgeFcPortsItems0TypeNegotiatedDataRatePropEnum = append(storageBridgeFcPortsItems0TypeNegotiatedDataRatePropEnum, v)
	}
}

// prop value enum
func (m *StorageBridgeFcPortsItems0) validateNegotiatedDataRateEnum(path, location string, value float64) error {
	if err := validate.EnumCase(path, location, value, storageBridgeFcPortsItems0TypeNegotiatedDataRatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StorageBridgeFcPortsItems0) validateNegotiatedDataRate(formats strfmt.Registry) error {
	if swag.IsZero(m.NegotiatedDataRate) { // not required
		return nil
	}

	// value enum
	if err := m.validateNegotiatedDataRateEnum("negotiated_data_rate", "body", m.NegotiatedDataRate); err != nil {
		return err
	}

	return nil
}

func (m *StorageBridgeFcPortsItems0) validateSfp(formats strfmt.Registry) error {
	if swag.IsZero(m.Sfp) { // not required
		return nil
	}

	if m.Sfp != nil {
		if err := m.Sfp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sfp")
			}
			return err
		}
	}

	return nil
}

var storageBridgeFcPortsItems0TypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["error","online","offline"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageBridgeFcPortsItems0TypeStatePropEnum = append(storageBridgeFcPortsItems0TypeStatePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// StorageBridgeFcPortsItems0
	// StorageBridgeFcPortsItems0
	// state
	// State
	// error
	// END DEBUGGING
	// StorageBridgeFcPortsItems0StateError captures enum value "error"
	StorageBridgeFcPortsItems0StateError string = "error"

	// BEGIN DEBUGGING
	// StorageBridgeFcPortsItems0
	// StorageBridgeFcPortsItems0
	// state
	// State
	// online
	// END DEBUGGING
	// StorageBridgeFcPortsItems0StateOnline captures enum value "online"
	StorageBridgeFcPortsItems0StateOnline string = "online"

	// BEGIN DEBUGGING
	// StorageBridgeFcPortsItems0
	// StorageBridgeFcPortsItems0
	// state
	// State
	// offline
	// END DEBUGGING
	// StorageBridgeFcPortsItems0StateOffline captures enum value "offline"
	StorageBridgeFcPortsItems0StateOffline string = "offline"
)

// prop value enum
func (m *StorageBridgeFcPortsItems0) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, storageBridgeFcPortsItems0TypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StorageBridgeFcPortsItems0) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this storage bridge fc ports items0 based on the context it is used
func (m *StorageBridgeFcPortsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSfp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageBridgeFcPortsItems0) contextValidateSfp(ctx context.Context, formats strfmt.Registry) error {

	if m.Sfp != nil {
		if err := m.Sfp.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sfp")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StorageBridgeFcPortsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageBridgeFcPortsItems0) UnmarshalBinary(b []byte) error {
	var res StorageBridgeFcPortsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StorageBridgeFcPortsItems0Sfp storage bridge fc ports items0 sfp
//
// swagger:model StorageBridgeFcPortsItems0Sfp
type StorageBridgeFcPortsItems0Sfp struct {

	// Bridge FC port SFP data rate capability, in Gbps
	// Enum: [2 4 8 16 32]
	DataRateCapability float64 `json:"data_rate_capability,omitempty"`

	// part number
	PartNumber string `json:"part_number,omitempty"`

	// Bridge FC port SFP serial number
	SerialNumber string `json:"serial_number,omitempty"`

	// Bridge FC port SFP vendor
	Vendor string `json:"vendor,omitempty"`
}

// Validate validates this storage bridge fc ports items0 sfp
func (m *StorageBridgeFcPortsItems0Sfp) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataRateCapability(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var storageBridgeFcPortsItems0SfpTypeDataRateCapabilityPropEnum []interface{}

func init() {
	var res []float64
	if err := json.Unmarshal([]byte(`[2,4,8,16,32]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageBridgeFcPortsItems0SfpTypeDataRateCapabilityPropEnum = append(storageBridgeFcPortsItems0SfpTypeDataRateCapabilityPropEnum, v)
	}
}

// prop value enum
func (m *StorageBridgeFcPortsItems0Sfp) validateDataRateCapabilityEnum(path, location string, value float64) error {
	if err := validate.EnumCase(path, location, value, storageBridgeFcPortsItems0SfpTypeDataRateCapabilityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StorageBridgeFcPortsItems0Sfp) validateDataRateCapability(formats strfmt.Registry) error {
	if swag.IsZero(m.DataRateCapability) { // not required
		return nil
	}

	// value enum
	if err := m.validateDataRateCapabilityEnum("sfp"+"."+"data_rate_capability", "body", m.DataRateCapability); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this storage bridge fc ports items0 sfp based on context it is used
func (m *StorageBridgeFcPortsItems0Sfp) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StorageBridgeFcPortsItems0Sfp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageBridgeFcPortsItems0Sfp) UnmarshalBinary(b []byte) error {
	var res StorageBridgeFcPortsItems0Sfp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StorageBridgeLastReboot storage bridge last reboot
//
// swagger:model StorageBridgeLastReboot
type StorageBridgeLastReboot struct {

	// reason
	Reason *StorageBridgeLastRebootReason `json:"reason,omitempty"`

	// time
	// Example: 2020-12-09T00:47:58-05:00
	// Format: date-time
	Time *strfmt.DateTime `json:"time,omitempty"`
}

// Validate validates this storage bridge last reboot
func (m *StorageBridgeLastReboot) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageBridgeLastReboot) validateReason(formats strfmt.Registry) error {
	if swag.IsZero(m.Reason) { // not required
		return nil
	}

	if m.Reason != nil {
		if err := m.Reason.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_reboot" + "." + "reason")
			}
			return err
		}
	}

	return nil
}

func (m *StorageBridgeLastReboot) validateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.Time) { // not required
		return nil
	}

	if err := validate.FormatOf("last_reboot"+"."+"time", "body", "date-time", m.Time.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this storage bridge last reboot based on the context it is used
func (m *StorageBridgeLastReboot) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateReason(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageBridgeLastReboot) contextValidateReason(ctx context.Context, formats strfmt.Registry) error {

	if m.Reason != nil {
		if err := m.Reason.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_reboot" + "." + "reason")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StorageBridgeLastReboot) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageBridgeLastReboot) UnmarshalBinary(b []byte) error {
	var res StorageBridgeLastReboot
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StorageBridgeLastRebootReason storage bridge last reboot reason
//
// swagger:model StorageBridgeLastRebootReason
type StorageBridgeLastRebootReason struct {

	// This field provides the error code explaining why did the bridge reboot.
	// Example: 39321683
	Code string `json:"code,omitempty"`

	// This field provides the error message explaining why did the bridge reboot.
	// Example: FirmwareRestart Command
	Message string `json:"message,omitempty"`
}

// Validate validates this storage bridge last reboot reason
func (m *StorageBridgeLastRebootReason) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this storage bridge last reboot reason based on context it is used
func (m *StorageBridgeLastRebootReason) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StorageBridgeLastRebootReason) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageBridgeLastRebootReason) UnmarshalBinary(b []byte) error {
	var res StorageBridgeLastRebootReason
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StorageBridgePathsItems0 storage bridge paths items0
//
// swagger:model StorageBridgePathsItems0
type StorageBridgePathsItems0 struct {

	// name
	// Example: 2c
	Name string `json:"name,omitempty"`

	// node
	Node *StorageBridgePathsItems0Node `json:"node,omitempty"`

	// source port
	SourcePort *StorageBridgePathsItems0SourcePort `json:"source_port,omitempty"`

	// target port
	TargetPort *StorageBridgePathsItems0TargetPort `json:"target_port,omitempty"`
}

// Validate validates this storage bridge paths items0
func (m *StorageBridgePathsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourcePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetPort(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageBridgePathsItems0) validateNode(formats strfmt.Registry) error {
	if swag.IsZero(m.Node) { // not required
		return nil
	}

	if m.Node != nil {
		if err := m.Node.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node")
			}
			return err
		}
	}

	return nil
}

func (m *StorageBridgePathsItems0) validateSourcePort(formats strfmt.Registry) error {
	if swag.IsZero(m.SourcePort) { // not required
		return nil
	}

	if m.SourcePort != nil {
		if err := m.SourcePort.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source_port")
			}
			return err
		}
	}

	return nil
}

func (m *StorageBridgePathsItems0) validateTargetPort(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetPort) { // not required
		return nil
	}

	if m.TargetPort != nil {
		if err := m.TargetPort.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target_port")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this storage bridge paths items0 based on the context it is used
func (m *StorageBridgePathsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourcePort(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetPort(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageBridgePathsItems0) contextValidateNode(ctx context.Context, formats strfmt.Registry) error {

	if m.Node != nil {
		if err := m.Node.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node")
			}
			return err
		}
	}

	return nil
}

func (m *StorageBridgePathsItems0) contextValidateSourcePort(ctx context.Context, formats strfmt.Registry) error {

	if m.SourcePort != nil {
		if err := m.SourcePort.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source_port")
			}
			return err
		}
	}

	return nil
}

func (m *StorageBridgePathsItems0) contextValidateTargetPort(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetPort != nil {
		if err := m.TargetPort.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target_port")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StorageBridgePathsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageBridgePathsItems0) UnmarshalBinary(b []byte) error {
	var res StorageBridgePathsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StorageBridgePathsItems0Node storage bridge paths items0 node
//
// swagger:model StorageBridgePathsItems0Node
type StorageBridgePathsItems0Node struct {

	// links
	Links *StorageBridgePathsItems0NodeLinks `json:"_links,omitempty"`

	// name
	// Example: node1
	Name string `json:"name,omitempty"`

	// uuid
	// Example: 1cd8a442-86d1-11e0-ae1c-123478563412
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this storage bridge paths items0 node
func (m *StorageBridgePathsItems0Node) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageBridgePathsItems0Node) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this storage bridge paths items0 node based on the context it is used
func (m *StorageBridgePathsItems0Node) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageBridgePathsItems0Node) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StorageBridgePathsItems0Node) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageBridgePathsItems0Node) UnmarshalBinary(b []byte) error {
	var res StorageBridgePathsItems0Node
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StorageBridgePathsItems0NodeLinks storage bridge paths items0 node links
//
// swagger:model StorageBridgePathsItems0NodeLinks
type StorageBridgePathsItems0NodeLinks struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this storage bridge paths items0 node links
func (m *StorageBridgePathsItems0NodeLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageBridgePathsItems0NodeLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this storage bridge paths items0 node links based on the context it is used
func (m *StorageBridgePathsItems0NodeLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageBridgePathsItems0NodeLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StorageBridgePathsItems0NodeLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageBridgePathsItems0NodeLinks) UnmarshalBinary(b []byte) error {
	var res StorageBridgePathsItems0NodeLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StorageBridgePathsItems0SourcePort storage bridge paths items0 source port
//
// swagger:model StorageBridgePathsItems0SourcePort
type StorageBridgePathsItems0SourcePort struct {

	// Initiator side switch port id
	// Example: 100050eb1a238892
	ID string `json:"id,omitempty"`

	// Initiator side switch port name
	// Example: rtp-fc03-41kk11:1
	Name string `json:"name,omitempty"`
}

// Validate validates this storage bridge paths items0 source port
func (m *StorageBridgePathsItems0SourcePort) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this storage bridge paths items0 source port based on context it is used
func (m *StorageBridgePathsItems0SourcePort) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StorageBridgePathsItems0SourcePort) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageBridgePathsItems0SourcePort) UnmarshalBinary(b []byte) error {
	var res StorageBridgePathsItems0SourcePort
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StorageBridgePathsItems0TargetPort storage bridge paths items0 target port
//
// swagger:model StorageBridgePathsItems0TargetPort
type StorageBridgePathsItems0TargetPort struct {

	// Target side switch port id
	// Example: 100050eb1a238892
	ID string `json:"id,omitempty"`

	// Target side switch port name
	// Example: rtp-fc03-41kk11:6
	Name string `json:"name,omitempty"`

	// Target side switch port world wide name
	// Example: 2100001086a54100
	Wwn string `json:"wwn,omitempty"`
}

// Validate validates this storage bridge paths items0 target port
func (m *StorageBridgePathsItems0TargetPort) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this storage bridge paths items0 target port based on context it is used
func (m *StorageBridgePathsItems0TargetPort) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StorageBridgePathsItems0TargetPort) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageBridgePathsItems0TargetPort) UnmarshalBinary(b []byte) error {
	var res StorageBridgePathsItems0TargetPort
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StorageBridgePowerSupplyUnitsItems0 storage bridge power supply units items0
//
// swagger:model StorageBridgePowerSupplyUnitsItems0
type StorageBridgePowerSupplyUnitsItems0 struct {

	// Power supply unit name
	Name string `json:"name,omitempty"`

	// Power supply unit state
	// Enum: [ok error]
	State string `json:"state,omitempty"`
}

// Validate validates this storage bridge power supply units items0
func (m *StorageBridgePowerSupplyUnitsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var storageBridgePowerSupplyUnitsItems0TypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ok","error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageBridgePowerSupplyUnitsItems0TypeStatePropEnum = append(storageBridgePowerSupplyUnitsItems0TypeStatePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// StorageBridgePowerSupplyUnitsItems0
	// StorageBridgePowerSupplyUnitsItems0
	// state
	// State
	// ok
	// END DEBUGGING
	// StorageBridgePowerSupplyUnitsItems0StateOk captures enum value "ok"
	StorageBridgePowerSupplyUnitsItems0StateOk string = "ok"

	// BEGIN DEBUGGING
	// StorageBridgePowerSupplyUnitsItems0
	// StorageBridgePowerSupplyUnitsItems0
	// state
	// State
	// error
	// END DEBUGGING
	// StorageBridgePowerSupplyUnitsItems0StateError captures enum value "error"
	StorageBridgePowerSupplyUnitsItems0StateError string = "error"
)

// prop value enum
func (m *StorageBridgePowerSupplyUnitsItems0) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, storageBridgePowerSupplyUnitsItems0TypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StorageBridgePowerSupplyUnitsItems0) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this storage bridge power supply units items0 based on context it is used
func (m *StorageBridgePowerSupplyUnitsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StorageBridgePowerSupplyUnitsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageBridgePowerSupplyUnitsItems0) UnmarshalBinary(b []byte) error {
	var res StorageBridgePowerSupplyUnitsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StorageBridgeSasPortsItems0 storage bridge sas ports items0
//
// swagger:model StorageBridgeSasPortsItems0
type StorageBridgeSasPortsItems0 struct {

	// cable
	Cable *StorageBridgeSasPortsItems0Cable `json:"cable,omitempty"`

	// Bridge SAS port data rate capability, in Gbps
	// Enum: [0 1.5 3 6 12]
	DataRateCapability float64 `json:"data_rate_capability,omitempty"`

	// Indicates whether a bridge SAS port is enabled.
	Enabled bool `json:"enabled,omitempty"`

	// Bridge SAS port index
	ID int64 `json:"id,omitempty"`

	// Bridge SAS port negotiated data rate, in Gbps
	// Enum: [0 1.5 3 6 12]
	NegotiatedDataRate float64 `json:"negotiated_data_rate,omitempty"`

	// phy 1
	Phy1 *StorageBridgeSasPortsItems0Phy1 `json:"phy_1,omitempty"`

	// phy 2
	Phy2 *StorageBridgeSasPortsItems0Phy2 `json:"phy_2,omitempty"`

	// phy 3
	Phy3 *StorageBridgeSasPortsItems0Phy3 `json:"phy_3,omitempty"`

	// phy 4
	Phy4 *StorageBridgeSasPortsItems0Phy4 `json:"phy_4,omitempty"`

	// Bridge SAS port state
	// Enum: [error online offline]
	State string `json:"state,omitempty"`

	// Bridge SAS port world wide name
	// Example: 2100001086a54100
	Wwn string `json:"wwn,omitempty"`
}

// Validate validates this storage bridge sas ports items0
func (m *StorageBridgeSasPortsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataRateCapability(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNegotiatedDataRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhy1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhy2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhy3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhy4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageBridgeSasPortsItems0) validateCable(formats strfmt.Registry) error {
	if swag.IsZero(m.Cable) { // not required
		return nil
	}

	if m.Cable != nil {
		if err := m.Cable.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cable")
			}
			return err
		}
	}

	return nil
}

var storageBridgeSasPortsItems0TypeDataRateCapabilityPropEnum []interface{}

func init() {
	var res []float64
	if err := json.Unmarshal([]byte(`[0,1.5,3,6,12]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageBridgeSasPortsItems0TypeDataRateCapabilityPropEnum = append(storageBridgeSasPortsItems0TypeDataRateCapabilityPropEnum, v)
	}
}

// prop value enum
func (m *StorageBridgeSasPortsItems0) validateDataRateCapabilityEnum(path, location string, value float64) error {
	if err := validate.EnumCase(path, location, value, storageBridgeSasPortsItems0TypeDataRateCapabilityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StorageBridgeSasPortsItems0) validateDataRateCapability(formats strfmt.Registry) error {
	if swag.IsZero(m.DataRateCapability) { // not required
		return nil
	}

	// value enum
	if err := m.validateDataRateCapabilityEnum("data_rate_capability", "body", m.DataRateCapability); err != nil {
		return err
	}

	return nil
}

var storageBridgeSasPortsItems0TypeNegotiatedDataRatePropEnum []interface{}

func init() {
	var res []float64
	if err := json.Unmarshal([]byte(`[0,1.5,3,6,12]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageBridgeSasPortsItems0TypeNegotiatedDataRatePropEnum = append(storageBridgeSasPortsItems0TypeNegotiatedDataRatePropEnum, v)
	}
}

// prop value enum
func (m *StorageBridgeSasPortsItems0) validateNegotiatedDataRateEnum(path, location string, value float64) error {
	if err := validate.EnumCase(path, location, value, storageBridgeSasPortsItems0TypeNegotiatedDataRatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StorageBridgeSasPortsItems0) validateNegotiatedDataRate(formats strfmt.Registry) error {
	if swag.IsZero(m.NegotiatedDataRate) { // not required
		return nil
	}

	// value enum
	if err := m.validateNegotiatedDataRateEnum("negotiated_data_rate", "body", m.NegotiatedDataRate); err != nil {
		return err
	}

	return nil
}

func (m *StorageBridgeSasPortsItems0) validatePhy1(formats strfmt.Registry) error {
	if swag.IsZero(m.Phy1) { // not required
		return nil
	}

	if m.Phy1 != nil {
		if err := m.Phy1.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phy_1")
			}
			return err
		}
	}

	return nil
}

func (m *StorageBridgeSasPortsItems0) validatePhy2(formats strfmt.Registry) error {
	if swag.IsZero(m.Phy2) { // not required
		return nil
	}

	if m.Phy2 != nil {
		if err := m.Phy2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phy_2")
			}
			return err
		}
	}

	return nil
}

func (m *StorageBridgeSasPortsItems0) validatePhy3(formats strfmt.Registry) error {
	if swag.IsZero(m.Phy3) { // not required
		return nil
	}

	if m.Phy3 != nil {
		if err := m.Phy3.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phy_3")
			}
			return err
		}
	}

	return nil
}

func (m *StorageBridgeSasPortsItems0) validatePhy4(formats strfmt.Registry) error {
	if swag.IsZero(m.Phy4) { // not required
		return nil
	}

	if m.Phy4 != nil {
		if err := m.Phy4.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phy_4")
			}
			return err
		}
	}

	return nil
}

var storageBridgeSasPortsItems0TypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["error","online","offline"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageBridgeSasPortsItems0TypeStatePropEnum = append(storageBridgeSasPortsItems0TypeStatePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// StorageBridgeSasPortsItems0
	// StorageBridgeSasPortsItems0
	// state
	// State
	// error
	// END DEBUGGING
	// StorageBridgeSasPortsItems0StateError captures enum value "error"
	StorageBridgeSasPortsItems0StateError string = "error"

	// BEGIN DEBUGGING
	// StorageBridgeSasPortsItems0
	// StorageBridgeSasPortsItems0
	// state
	// State
	// online
	// END DEBUGGING
	// StorageBridgeSasPortsItems0StateOnline captures enum value "online"
	StorageBridgeSasPortsItems0StateOnline string = "online"

	// BEGIN DEBUGGING
	// StorageBridgeSasPortsItems0
	// StorageBridgeSasPortsItems0
	// state
	// State
	// offline
	// END DEBUGGING
	// StorageBridgeSasPortsItems0StateOffline captures enum value "offline"
	StorageBridgeSasPortsItems0StateOffline string = "offline"
)

// prop value enum
func (m *StorageBridgeSasPortsItems0) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, storageBridgeSasPortsItems0TypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StorageBridgeSasPortsItems0) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this storage bridge sas ports items0 based on the context it is used
func (m *StorageBridgeSasPortsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCable(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhy1(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhy2(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhy3(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhy4(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageBridgeSasPortsItems0) contextValidateCable(ctx context.Context, formats strfmt.Registry) error {

	if m.Cable != nil {
		if err := m.Cable.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cable")
			}
			return err
		}
	}

	return nil
}

func (m *StorageBridgeSasPortsItems0) contextValidatePhy1(ctx context.Context, formats strfmt.Registry) error {

	if m.Phy1 != nil {
		if err := m.Phy1.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phy_1")
			}
			return err
		}
	}

	return nil
}

func (m *StorageBridgeSasPortsItems0) contextValidatePhy2(ctx context.Context, formats strfmt.Registry) error {

	if m.Phy2 != nil {
		if err := m.Phy2.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phy_2")
			}
			return err
		}
	}

	return nil
}

func (m *StorageBridgeSasPortsItems0) contextValidatePhy3(ctx context.Context, formats strfmt.Registry) error {

	if m.Phy3 != nil {
		if err := m.Phy3.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phy_3")
			}
			return err
		}
	}

	return nil
}

func (m *StorageBridgeSasPortsItems0) contextValidatePhy4(ctx context.Context, formats strfmt.Registry) error {

	if m.Phy4 != nil {
		if err := m.Phy4.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phy_4")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StorageBridgeSasPortsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageBridgeSasPortsItems0) UnmarshalBinary(b []byte) error {
	var res StorageBridgeSasPortsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StorageBridgeSasPortsItems0Cable storage bridge sas ports items0 cable
//
// swagger:model StorageBridgeSasPortsItems0Cable
type StorageBridgeSasPortsItems0Cable struct {

	// Bridge cable part number
	PartNumber string `json:"part_number,omitempty"`

	// Bridge cable serial number
	SerialNumber string `json:"serial_number,omitempty"`

	// Bridge cable type
	Technology string `json:"technology,omitempty"`

	// Bridge cable vendor
	Vendor string `json:"vendor,omitempty"`
}

// Validate validates this storage bridge sas ports items0 cable
func (m *StorageBridgeSasPortsItems0Cable) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this storage bridge sas ports items0 cable based on context it is used
func (m *StorageBridgeSasPortsItems0Cable) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StorageBridgeSasPortsItems0Cable) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageBridgeSasPortsItems0Cable) UnmarshalBinary(b []byte) error {
	var res StorageBridgeSasPortsItems0Cable
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StorageBridgeSasPortsItems0Phy1 storage bridge sas ports items0 phy1
//
// swagger:model StorageBridgeSasPortsItems0Phy1
type StorageBridgeSasPortsItems0Phy1 struct {

	// Bridge SAS port PHY1 state
	State string `json:"state,omitempty"`
}

// Validate validates this storage bridge sas ports items0 phy1
func (m *StorageBridgeSasPortsItems0Phy1) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this storage bridge sas ports items0 phy1 based on context it is used
func (m *StorageBridgeSasPortsItems0Phy1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StorageBridgeSasPortsItems0Phy1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageBridgeSasPortsItems0Phy1) UnmarshalBinary(b []byte) error {
	var res StorageBridgeSasPortsItems0Phy1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StorageBridgeSasPortsItems0Phy2 storage bridge sas ports items0 phy2
//
// swagger:model StorageBridgeSasPortsItems0Phy2
type StorageBridgeSasPortsItems0Phy2 struct {

	// Bridge SAS port PHY2 state
	State string `json:"state,omitempty"`
}

// Validate validates this storage bridge sas ports items0 phy2
func (m *StorageBridgeSasPortsItems0Phy2) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this storage bridge sas ports items0 phy2 based on context it is used
func (m *StorageBridgeSasPortsItems0Phy2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StorageBridgeSasPortsItems0Phy2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageBridgeSasPortsItems0Phy2) UnmarshalBinary(b []byte) error {
	var res StorageBridgeSasPortsItems0Phy2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StorageBridgeSasPortsItems0Phy3 storage bridge sas ports items0 phy3
//
// swagger:model StorageBridgeSasPortsItems0Phy3
type StorageBridgeSasPortsItems0Phy3 struct {

	// Bridge SAS port PHY3 state
	State string `json:"state,omitempty"`
}

// Validate validates this storage bridge sas ports items0 phy3
func (m *StorageBridgeSasPortsItems0Phy3) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this storage bridge sas ports items0 phy3 based on context it is used
func (m *StorageBridgeSasPortsItems0Phy3) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StorageBridgeSasPortsItems0Phy3) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageBridgeSasPortsItems0Phy3) UnmarshalBinary(b []byte) error {
	var res StorageBridgeSasPortsItems0Phy3
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StorageBridgeSasPortsItems0Phy4 storage bridge sas ports items0 phy4
//
// swagger:model StorageBridgeSasPortsItems0Phy4
type StorageBridgeSasPortsItems0Phy4 struct {

	// Bridge SAS port PHY4 state
	State string `json:"state,omitempty"`
}

// Validate validates this storage bridge sas ports items0 phy4
func (m *StorageBridgeSasPortsItems0Phy4) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this storage bridge sas ports items0 phy4 based on context it is used
func (m *StorageBridgeSasPortsItems0Phy4) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StorageBridgeSasPortsItems0Phy4) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageBridgeSasPortsItems0Phy4) UnmarshalBinary(b []byte) error {
	var res StorageBridgeSasPortsItems0Phy4
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StorageBridgeTemperatureSensor storage bridge temperature sensor
//
// swagger:model StorageBridgeTemperatureSensor
type StorageBridgeTemperatureSensor struct {

	// Maximum safe operating temperature, in degrees Celsius.
	Maximum int64 `json:"maximum,omitempty"`

	// Minimum safe operating temperature, in degrees Celsius.
	Minimum int64 `json:"minimum,omitempty"`

	// Temperature sensor name
	// Example: Chassis temperature sensor
	Name string `json:"name,omitempty"`

	// Chassis temperature sensor reading, in degrees Celsius.
	Reading int64 `json:"reading,omitempty"`

	// state
	// Enum: [ok warning error]
	State string `json:"state,omitempty"`
}

// Validate validates this storage bridge temperature sensor
func (m *StorageBridgeTemperatureSensor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var storageBridgeTemperatureSensorTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ok","warning","error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageBridgeTemperatureSensorTypeStatePropEnum = append(storageBridgeTemperatureSensorTypeStatePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// StorageBridgeTemperatureSensor
	// StorageBridgeTemperatureSensor
	// state
	// State
	// ok
	// END DEBUGGING
	// StorageBridgeTemperatureSensorStateOk captures enum value "ok"
	StorageBridgeTemperatureSensorStateOk string = "ok"

	// BEGIN DEBUGGING
	// StorageBridgeTemperatureSensor
	// StorageBridgeTemperatureSensor
	// state
	// State
	// warning
	// END DEBUGGING
	// StorageBridgeTemperatureSensorStateWarning captures enum value "warning"
	StorageBridgeTemperatureSensorStateWarning string = "warning"

	// BEGIN DEBUGGING
	// StorageBridgeTemperatureSensor
	// StorageBridgeTemperatureSensor
	// state
	// State
	// error
	// END DEBUGGING
	// StorageBridgeTemperatureSensorStateError captures enum value "error"
	StorageBridgeTemperatureSensorStateError string = "error"
)

// prop value enum
func (m *StorageBridgeTemperatureSensor) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, storageBridgeTemperatureSensorTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StorageBridgeTemperatureSensor) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("temperature_sensor"+"."+"state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this storage bridge temperature sensor based on context it is used
func (m *StorageBridgeTemperatureSensor) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StorageBridgeTemperatureSensor) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageBridgeTemperatureSensor) UnmarshalBinary(b []byte) error {
	var res StorageBridgeTemperatureSensor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
