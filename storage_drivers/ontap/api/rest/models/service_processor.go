// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceProcessor service processor
//
// swagger:model service_processor
type ServiceProcessor struct {

	// Set to "true" to use DHCP to configure an IPv4 interface.
	DhcpEnabled bool `json:"dhcp_enabled,omitempty"`

	// The version of firmware installed.
	// Read Only: true
	FirmwareVersion string `json:"firmware_version,omitempty"`

	// ipv4 interface
	IPV4Interface *ServiceProcessorIPV4Interface `json:"ipv4_interface,omitempty"`

	// ipv6 interface
	IPV6Interface *ServiceProcessorIPV6Interface `json:"ipv6_interface,omitempty"`

	// link status
	// Read Only: true
	// Enum: [up down disabled unknown]
	LinkStatus string `json:"link_status,omitempty"`

	// mac address
	// Read Only: true
	MacAddress string `json:"mac_address,omitempty"`

	// state
	// Read Only: true
	// Enum: [online offline degraded rebooting unknown updating node_offline sp_daemon_offline]
	State string `json:"state,omitempty"`
}

// Validate validates this service processor
func (m *ServiceProcessor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIPV4Interface(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPV6Interface(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinkStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceProcessor) validateIPV4Interface(formats strfmt.Registry) error {
	if swag.IsZero(m.IPV4Interface) { // not required
		return nil
	}

	if m.IPV4Interface != nil {
		if err := m.IPV4Interface.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipv4_interface")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceProcessor) validateIPV6Interface(formats strfmt.Registry) error {
	if swag.IsZero(m.IPV6Interface) { // not required
		return nil
	}

	if m.IPV6Interface != nil {
		if err := m.IPV6Interface.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipv6_interface")
			}
			return err
		}
	}

	return nil
}

var serviceProcessorTypeLinkStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["up","down","disabled","unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceProcessorTypeLinkStatusPropEnum = append(serviceProcessorTypeLinkStatusPropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// service_processor
	// ServiceProcessor
	// link_status
	// LinkStatus
	// up
	// END DEBUGGING
	// ServiceProcessorLinkStatusUp captures enum value "up"
	ServiceProcessorLinkStatusUp string = "up"

	// BEGIN DEBUGGING
	// service_processor
	// ServiceProcessor
	// link_status
	// LinkStatus
	// down
	// END DEBUGGING
	// ServiceProcessorLinkStatusDown captures enum value "down"
	ServiceProcessorLinkStatusDown string = "down"

	// BEGIN DEBUGGING
	// service_processor
	// ServiceProcessor
	// link_status
	// LinkStatus
	// disabled
	// END DEBUGGING
	// ServiceProcessorLinkStatusDisabled captures enum value "disabled"
	ServiceProcessorLinkStatusDisabled string = "disabled"

	// BEGIN DEBUGGING
	// service_processor
	// ServiceProcessor
	// link_status
	// LinkStatus
	// unknown
	// END DEBUGGING
	// ServiceProcessorLinkStatusUnknown captures enum value "unknown"
	ServiceProcessorLinkStatusUnknown string = "unknown"
)

// prop value enum
func (m *ServiceProcessor) validateLinkStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serviceProcessorTypeLinkStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServiceProcessor) validateLinkStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.LinkStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateLinkStatusEnum("link_status", "body", m.LinkStatus); err != nil {
		return err
	}

	return nil
}

var serviceProcessorTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["online","offline","degraded","rebooting","unknown","updating","node_offline","sp_daemon_offline"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceProcessorTypeStatePropEnum = append(serviceProcessorTypeStatePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// service_processor
	// ServiceProcessor
	// state
	// State
	// online
	// END DEBUGGING
	// ServiceProcessorStateOnline captures enum value "online"
	ServiceProcessorStateOnline string = "online"

	// BEGIN DEBUGGING
	// service_processor
	// ServiceProcessor
	// state
	// State
	// offline
	// END DEBUGGING
	// ServiceProcessorStateOffline captures enum value "offline"
	ServiceProcessorStateOffline string = "offline"

	// BEGIN DEBUGGING
	// service_processor
	// ServiceProcessor
	// state
	// State
	// degraded
	// END DEBUGGING
	// ServiceProcessorStateDegraded captures enum value "degraded"
	ServiceProcessorStateDegraded string = "degraded"

	// BEGIN DEBUGGING
	// service_processor
	// ServiceProcessor
	// state
	// State
	// rebooting
	// END DEBUGGING
	// ServiceProcessorStateRebooting captures enum value "rebooting"
	ServiceProcessorStateRebooting string = "rebooting"

	// BEGIN DEBUGGING
	// service_processor
	// ServiceProcessor
	// state
	// State
	// unknown
	// END DEBUGGING
	// ServiceProcessorStateUnknown captures enum value "unknown"
	ServiceProcessorStateUnknown string = "unknown"

	// BEGIN DEBUGGING
	// service_processor
	// ServiceProcessor
	// state
	// State
	// updating
	// END DEBUGGING
	// ServiceProcessorStateUpdating captures enum value "updating"
	ServiceProcessorStateUpdating string = "updating"

	// BEGIN DEBUGGING
	// service_processor
	// ServiceProcessor
	// state
	// State
	// node_offline
	// END DEBUGGING
	// ServiceProcessorStateNodeOffline captures enum value "node_offline"
	ServiceProcessorStateNodeOffline string = "node_offline"

	// BEGIN DEBUGGING
	// service_processor
	// ServiceProcessor
	// state
	// State
	// sp_daemon_offline
	// END DEBUGGING
	// ServiceProcessorStateSpDaemonOffline captures enum value "sp_daemon_offline"
	ServiceProcessorStateSpDaemonOffline string = "sp_daemon_offline"
)

// prop value enum
func (m *ServiceProcessor) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serviceProcessorTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServiceProcessor) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this service processor based on the context it is used
func (m *ServiceProcessor) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFirmwareVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIPV4Interface(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIPV6Interface(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLinkStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMacAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceProcessor) contextValidateFirmwareVersion(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "firmware_version", "body", string(m.FirmwareVersion)); err != nil {
		return err
	}

	return nil
}

func (m *ServiceProcessor) contextValidateIPV4Interface(ctx context.Context, formats strfmt.Registry) error {

	if m.IPV4Interface != nil {
		if err := m.IPV4Interface.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipv4_interface")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceProcessor) contextValidateIPV6Interface(ctx context.Context, formats strfmt.Registry) error {

	if m.IPV6Interface != nil {
		if err := m.IPV6Interface.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipv6_interface")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceProcessor) contextValidateLinkStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "link_status", "body", string(m.LinkStatus)); err != nil {
		return err
	}

	return nil
}

func (m *ServiceProcessor) contextValidateMacAddress(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "mac_address", "body", string(m.MacAddress)); err != nil {
		return err
	}

	return nil
}

func (m *ServiceProcessor) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "state", "body", string(m.State)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceProcessor) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceProcessor) UnmarshalBinary(b []byte) error {
	var res ServiceProcessor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ServiceProcessorIPV4Interface Object to setup an interface along with its default router.
//
// swagger:model ServiceProcessorIPV4Interface
type ServiceProcessorIPV4Interface struct {

	// IPv4 or IPv6 address
	// Example: 10.10.10.7
	Address string `json:"address,omitempty"`

	// The IPv4 or IPv6 address of the default router.
	// Example: 10.1.1.1
	Gateway string `json:"gateway,omitempty"`

	// netmask
	Netmask IPNetmask `json:"netmask,omitempty"`
}

// Validate validates this service processor IP v4 interface
func (m *ServiceProcessorIPV4Interface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNetmask(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceProcessorIPV4Interface) validateNetmask(formats strfmt.Registry) error {
	if swag.IsZero(m.Netmask) { // not required
		return nil
	}

	if err := m.Netmask.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ipv4_interface" + "." + "netmask")
		}
		return err
	}

	return nil
}

// ContextValidate validate this service processor IP v4 interface based on the context it is used
func (m *ServiceProcessorIPV4Interface) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNetmask(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceProcessorIPV4Interface) contextValidateNetmask(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Netmask.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ipv4_interface" + "." + "netmask")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceProcessorIPV4Interface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceProcessorIPV4Interface) UnmarshalBinary(b []byte) error {
	var res ServiceProcessorIPV4Interface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ServiceProcessorIPV6Interface Object to setup an interface along with its default router.
//
// swagger:model ServiceProcessorIPV6Interface
type ServiceProcessorIPV6Interface struct {

	// IPv6 address
	// Example: fd20:8b1e:b255:5011:10:141:4:97
	Address string `json:"address,omitempty"`

	// The IPv6 address of the default router.
	// Example: fd20:8b1e:b255:5011:10::1
	Gateway string `json:"gateway,omitempty"`

	// The IPv6 netmask/prefix length. The default value is 64 with a valid range of 1 to 127.
	// Example: 64
	Netmask int64 `json:"netmask,omitempty"`
}

// Validate validates this service processor IP v6 interface
func (m *ServiceProcessorIPV6Interface) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this service processor IP v6 interface based on context it is used
func (m *ServiceProcessorIPV6Interface) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ServiceProcessorIPV6Interface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceProcessorIPV6Interface) UnmarshalBinary(b []byte) error {
	var res ServiceProcessorIPV6Interface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
