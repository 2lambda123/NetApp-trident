// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SnapmirrorPolicyRule SnapMirror policy rule for retention.
//
// swagger:model snapmirror_policy_rule
type SnapmirrorPolicyRule struct {

	// Number of Snapshot copies to be kept for retention.
	// Example: 7
	Count int64 `json:"count,omitempty"`

	// creation schedule
	CreationSchedule *SnapmirrorPolicyRuleCreationSchedule `json:"creation_schedule,omitempty"`

	// Snapshot copy label
	// Example: hourly
	Label string `json:"label,omitempty"`

	// Specifies the prefix for the Snapshot copy name to be created as per the schedule. If no value is specified, then the label is used as the prefix.
	Prefix string `json:"prefix,omitempty"`
}

// Validate validates this snapmirror policy rule
func (m *SnapmirrorPolicyRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationSchedule(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapmirrorPolicyRule) validateCreationSchedule(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationSchedule) { // not required
		return nil
	}

	if m.CreationSchedule != nil {
		if err := m.CreationSchedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creation_schedule")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this snapmirror policy rule based on the context it is used
func (m *SnapmirrorPolicyRule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreationSchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapmirrorPolicyRule) contextValidateCreationSchedule(ctx context.Context, formats strfmt.Registry) error {

	if m.CreationSchedule != nil {
		if err := m.CreationSchedule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creation_schedule")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SnapmirrorPolicyRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnapmirrorPolicyRule) UnmarshalBinary(b []byte) error {
	var res SnapmirrorPolicyRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SnapmirrorPolicyRuleCreationSchedule Schedule used to create Snapshot copies on the destination for long term retention.
//
// swagger:model SnapmirrorPolicyRuleCreationSchedule
type SnapmirrorPolicyRuleCreationSchedule struct {

	// links
	Links *SnapmirrorPolicyRuleCreationScheduleLinks `json:"_links,omitempty"`

	// Job schedule name
	// Example: weekly
	Name string `json:"name,omitempty"`

	// Job schedule UUID
	// Example: 1cd8a442-86d1-11e0-ae1c-123478563412
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this snapmirror policy rule creation schedule
func (m *SnapmirrorPolicyRuleCreationSchedule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapmirrorPolicyRuleCreationSchedule) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creation_schedule" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this snapmirror policy rule creation schedule based on the context it is used
func (m *SnapmirrorPolicyRuleCreationSchedule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapmirrorPolicyRuleCreationSchedule) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creation_schedule" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SnapmirrorPolicyRuleCreationSchedule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnapmirrorPolicyRuleCreationSchedule) UnmarshalBinary(b []byte) error {
	var res SnapmirrorPolicyRuleCreationSchedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SnapmirrorPolicyRuleCreationScheduleLinks snapmirror policy rule creation schedule links
//
// swagger:model SnapmirrorPolicyRuleCreationScheduleLinks
type SnapmirrorPolicyRuleCreationScheduleLinks struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this snapmirror policy rule creation schedule links
func (m *SnapmirrorPolicyRuleCreationScheduleLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapmirrorPolicyRuleCreationScheduleLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creation_schedule" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this snapmirror policy rule creation schedule links based on the context it is used
func (m *SnapmirrorPolicyRuleCreationScheduleLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapmirrorPolicyRuleCreationScheduleLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creation_schedule" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SnapmirrorPolicyRuleCreationScheduleLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnapmirrorPolicyRuleCreationScheduleLinks) UnmarshalBinary(b []byte) error {
	var res SnapmirrorPolicyRuleCreationScheduleLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HELLO RIPPY
