// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OracleOnSan Oracle using SAN.
//
// swagger:model oracle_on_san
type OracleOnSan struct {

	// archive log
	ArchiveLog *OracleOnSanArchiveLog `json:"archive_log,omitempty"`

	// db
	// Required: true
	Db *OracleOnSanDb `json:"db"`

	// The name of the initiator group through which the contents of this application will be accessed. Modification of this parameter is a disruptive operation. All LUNs in the application component will be unmapped from the current igroup and re-mapped to the new igroup.
	// Required: true
	// Max Length: 96
	// Min Length: 1
	IgroupName *string `json:"igroup_name"`

	// The list of initiator groups to create.
	// Max Items: 1
	// Min Items: 0
	NewIgroups []*OracleOnSanNewIgroups `json:"new_igroups,omitempty"`

	// ora home
	OraHome *OracleOnSanOraHome `json:"ora_home,omitempty"`

	// The name of the host OS running the application.
	// Required: true
	// Enum: [aix hpux hyper_v linux solaris solaris_efi vmware windows windows_2008 windows_gpt xen]
	OsType *string `json:"os_type"`

	// protection type
	ProtectionType *OracleOnSanProtectionType `json:"protection_type,omitempty"`

	// redo log
	// Required: true
	RedoLog *OracleOnSanRedoLog `json:"redo_log"`
}

// Validate validates this oracle on san
func (m *OracleOnSan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArchiveLog(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDb(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIgroupName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewIgroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOraHome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtectionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRedoLog(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleOnSan) validateArchiveLog(formats strfmt.Registry) error {
	if swag.IsZero(m.ArchiveLog) { // not required
		return nil
	}

	if m.ArchiveLog != nil {
		if err := m.ArchiveLog.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("archive_log")
			}
			return err
		}
	}

	return nil
}

func (m *OracleOnSan) validateDb(formats strfmt.Registry) error {

	if err := validate.Required("db", "body", m.Db); err != nil {
		return err
	}

	if m.Db != nil {
		if err := m.Db.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("db")
			}
			return err
		}
	}

	return nil
}

func (m *OracleOnSan) validateIgroupName(formats strfmt.Registry) error {

	if err := validate.Required("igroup_name", "body", m.IgroupName); err != nil {
		return err
	}

	if err := validate.MinLength("igroup_name", "body", *m.IgroupName, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("igroup_name", "body", *m.IgroupName, 96); err != nil {
		return err
	}

	return nil
}

func (m *OracleOnSan) validateNewIgroups(formats strfmt.Registry) error {
	if swag.IsZero(m.NewIgroups) { // not required
		return nil
	}

	iNewIgroupsSize := int64(len(m.NewIgroups))

	if err := validate.MinItems("new_igroups", "body", iNewIgroupsSize, 0); err != nil {
		return err
	}

	if err := validate.MaxItems("new_igroups", "body", iNewIgroupsSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.NewIgroups); i++ {
		if swag.IsZero(m.NewIgroups[i]) { // not required
			continue
		}

		if m.NewIgroups[i] != nil {
			if err := m.NewIgroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("new_igroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OracleOnSan) validateOraHome(formats strfmt.Registry) error {
	if swag.IsZero(m.OraHome) { // not required
		return nil
	}

	if m.OraHome != nil {
		if err := m.OraHome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ora_home")
			}
			return err
		}
	}

	return nil
}

var oracleOnSanTypeOsTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["aix","hpux","hyper_v","linux","solaris","solaris_efi","vmware","windows","windows_2008","windows_gpt","xen"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oracleOnSanTypeOsTypePropEnum = append(oracleOnSanTypeOsTypePropEnum, v)
	}
}

const (

	// BEGIN RIPPY DEBUGGING
	// oracle_on_san
	// OracleOnSan
	// os_type
	// OsType
	// aix
	// END RIPPY DEBUGGING
	// OracleOnSanOsTypeAix captures enum value "aix"
	OracleOnSanOsTypeAix string = "aix"

	// BEGIN RIPPY DEBUGGING
	// oracle_on_san
	// OracleOnSan
	// os_type
	// OsType
	// hpux
	// END RIPPY DEBUGGING
	// OracleOnSanOsTypeHpux captures enum value "hpux"
	OracleOnSanOsTypeHpux string = "hpux"

	// BEGIN RIPPY DEBUGGING
	// oracle_on_san
	// OracleOnSan
	// os_type
	// OsType
	// hyper_v
	// END RIPPY DEBUGGING
	// OracleOnSanOsTypeHyperv captures enum value "hyper_v"
	OracleOnSanOsTypeHyperv string = "hyper_v"

	// BEGIN RIPPY DEBUGGING
	// oracle_on_san
	// OracleOnSan
	// os_type
	// OsType
	// linux
	// END RIPPY DEBUGGING
	// OracleOnSanOsTypeLinux captures enum value "linux"
	OracleOnSanOsTypeLinux string = "linux"

	// BEGIN RIPPY DEBUGGING
	// oracle_on_san
	// OracleOnSan
	// os_type
	// OsType
	// solaris
	// END RIPPY DEBUGGING
	// OracleOnSanOsTypeSolaris captures enum value "solaris"
	OracleOnSanOsTypeSolaris string = "solaris"

	// BEGIN RIPPY DEBUGGING
	// oracle_on_san
	// OracleOnSan
	// os_type
	// OsType
	// solaris_efi
	// END RIPPY DEBUGGING
	// OracleOnSanOsTypeSolarisEfi captures enum value "solaris_efi"
	OracleOnSanOsTypeSolarisEfi string = "solaris_efi"

	// BEGIN RIPPY DEBUGGING
	// oracle_on_san
	// OracleOnSan
	// os_type
	// OsType
	// vmware
	// END RIPPY DEBUGGING
	// OracleOnSanOsTypeVmware captures enum value "vmware"
	OracleOnSanOsTypeVmware string = "vmware"

	// BEGIN RIPPY DEBUGGING
	// oracle_on_san
	// OracleOnSan
	// os_type
	// OsType
	// windows
	// END RIPPY DEBUGGING
	// OracleOnSanOsTypeWindows captures enum value "windows"
	OracleOnSanOsTypeWindows string = "windows"

	// BEGIN RIPPY DEBUGGING
	// oracle_on_san
	// OracleOnSan
	// os_type
	// OsType
	// windows_2008
	// END RIPPY DEBUGGING
	// OracleOnSanOsTypeWindows2008 captures enum value "windows_2008"
	OracleOnSanOsTypeWindows2008 string = "windows_2008"

	// BEGIN RIPPY DEBUGGING
	// oracle_on_san
	// OracleOnSan
	// os_type
	// OsType
	// windows_gpt
	// END RIPPY DEBUGGING
	// OracleOnSanOsTypeWindowsGpt captures enum value "windows_gpt"
	OracleOnSanOsTypeWindowsGpt string = "windows_gpt"

	// BEGIN RIPPY DEBUGGING
	// oracle_on_san
	// OracleOnSan
	// os_type
	// OsType
	// xen
	// END RIPPY DEBUGGING
	// OracleOnSanOsTypeXen captures enum value "xen"
	OracleOnSanOsTypeXen string = "xen"
)

// prop value enum
func (m *OracleOnSan) validateOsTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oracleOnSanTypeOsTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OracleOnSan) validateOsType(formats strfmt.Registry) error {

	if err := validate.Required("os_type", "body", m.OsType); err != nil {
		return err
	}

	// value enum
	if err := m.validateOsTypeEnum("os_type", "body", *m.OsType); err != nil {
		return err
	}

	return nil
}

func (m *OracleOnSan) validateProtectionType(formats strfmt.Registry) error {
	if swag.IsZero(m.ProtectionType) { // not required
		return nil
	}

	if m.ProtectionType != nil {
		if err := m.ProtectionType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protection_type")
			}
			return err
		}
	}

	return nil
}

func (m *OracleOnSan) validateRedoLog(formats strfmt.Registry) error {

	if err := validate.Required("redo_log", "body", m.RedoLog); err != nil {
		return err
	}

	if m.RedoLog != nil {
		if err := m.RedoLog.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("redo_log")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this oracle on san based on the context it is used
func (m *OracleOnSan) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArchiveLog(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDb(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNewIgroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOraHome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProtectionType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRedoLog(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleOnSan) contextValidateArchiveLog(ctx context.Context, formats strfmt.Registry) error {

	if m.ArchiveLog != nil {
		if err := m.ArchiveLog.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("archive_log")
			}
			return err
		}
	}

	return nil
}

func (m *OracleOnSan) contextValidateDb(ctx context.Context, formats strfmt.Registry) error {

	if m.Db != nil {
		if err := m.Db.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("db")
			}
			return err
		}
	}

	return nil
}

func (m *OracleOnSan) contextValidateNewIgroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NewIgroups); i++ {

		if m.NewIgroups[i] != nil {
			if err := m.NewIgroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("new_igroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OracleOnSan) contextValidateOraHome(ctx context.Context, formats strfmt.Registry) error {

	if m.OraHome != nil {
		if err := m.OraHome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ora_home")
			}
			return err
		}
	}

	return nil
}

func (m *OracleOnSan) contextValidateProtectionType(ctx context.Context, formats strfmt.Registry) error {

	if m.ProtectionType != nil {
		if err := m.ProtectionType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protection_type")
			}
			return err
		}
	}

	return nil
}

func (m *OracleOnSan) contextValidateRedoLog(ctx context.Context, formats strfmt.Registry) error {

	if m.RedoLog != nil {
		if err := m.RedoLog.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("redo_log")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OracleOnSan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleOnSan) UnmarshalBinary(b []byte) error {
	var res OracleOnSan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OracleOnSanArchiveLog oracle on san archive log
//
// swagger:model OracleOnSanArchiveLog
type OracleOnSanArchiveLog struct {

	// The size of the archive log. Usage: {&lt;integer&gt;[KB|MB|GB|TB|PB]}
	Size int64 `json:"size,omitempty"`

	// storage service
	StorageService *OracleOnSanArchiveLogStorageService `json:"storage_service,omitempty"`
}

// Validate validates this oracle on san archive log
func (m *OracleOnSanArchiveLog) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStorageService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleOnSanArchiveLog) validateStorageService(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageService) { // not required
		return nil
	}

	if m.StorageService != nil {
		if err := m.StorageService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("archive_log" + "." + "storage_service")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this oracle on san archive log based on the context it is used
func (m *OracleOnSanArchiveLog) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStorageService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleOnSanArchiveLog) contextValidateStorageService(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageService != nil {
		if err := m.StorageService.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("archive_log" + "." + "storage_service")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OracleOnSanArchiveLog) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleOnSanArchiveLog) UnmarshalBinary(b []byte) error {
	var res OracleOnSanArchiveLog
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OracleOnSanArchiveLogStorageService oracle on san archive log storage service
//
// swagger:model OracleOnSanArchiveLogStorageService
type OracleOnSanArchiveLogStorageService struct {

	// The storage service of the archive log.
	// Enum: [extreme performance value]
	Name *string `json:"name,omitempty"`
}

// Validate validates this oracle on san archive log storage service
func (m *OracleOnSanArchiveLogStorageService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oracleOnSanArchiveLogStorageServiceTypeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["extreme","performance","value"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oracleOnSanArchiveLogStorageServiceTypeNamePropEnum = append(oracleOnSanArchiveLogStorageServiceTypeNamePropEnum, v)
	}
}

const (

	// BEGIN RIPPY DEBUGGING
	// OracleOnSanArchiveLogStorageService
	// OracleOnSanArchiveLogStorageService
	// name
	// Name
	// extreme
	// END RIPPY DEBUGGING
	// OracleOnSanArchiveLogStorageServiceNameExtreme captures enum value "extreme"
	OracleOnSanArchiveLogStorageServiceNameExtreme string = "extreme"

	// BEGIN RIPPY DEBUGGING
	// OracleOnSanArchiveLogStorageService
	// OracleOnSanArchiveLogStorageService
	// name
	// Name
	// performance
	// END RIPPY DEBUGGING
	// OracleOnSanArchiveLogStorageServiceNamePerformance captures enum value "performance"
	OracleOnSanArchiveLogStorageServiceNamePerformance string = "performance"

	// BEGIN RIPPY DEBUGGING
	// OracleOnSanArchiveLogStorageService
	// OracleOnSanArchiveLogStorageService
	// name
	// Name
	// value
	// END RIPPY DEBUGGING
	// OracleOnSanArchiveLogStorageServiceNameValue captures enum value "value"
	OracleOnSanArchiveLogStorageServiceNameValue string = "value"
)

// prop value enum
func (m *OracleOnSanArchiveLogStorageService) validateNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oracleOnSanArchiveLogStorageServiceTypeNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OracleOnSanArchiveLogStorageService) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	// value enum
	if err := m.validateNameEnum("archive_log"+"."+"storage_service"+"."+"name", "body", *m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this oracle on san archive log storage service based on context it is used
func (m *OracleOnSanArchiveLogStorageService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OracleOnSanArchiveLogStorageService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleOnSanArchiveLogStorageService) UnmarshalBinary(b []byte) error {
	var res OracleOnSanArchiveLogStorageService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OracleOnSanDb oracle on san db
//
// swagger:model OracleOnSanDb
type OracleOnSanDb struct {

	// The size of the database. Usage: {&lt;integer&gt;[KB|MB|GB|TB|PB]}
	// Required: true
	Size *int64 `json:"size"`

	// storage service
	StorageService *OracleOnSanDbStorageService `json:"storage_service,omitempty"`
}

// Validate validates this oracle on san db
func (m *OracleOnSanDb) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleOnSanDb) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("db"+"."+"size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

func (m *OracleOnSanDb) validateStorageService(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageService) { // not required
		return nil
	}

	if m.StorageService != nil {
		if err := m.StorageService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("db" + "." + "storage_service")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this oracle on san db based on the context it is used
func (m *OracleOnSanDb) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStorageService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleOnSanDb) contextValidateStorageService(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageService != nil {
		if err := m.StorageService.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("db" + "." + "storage_service")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OracleOnSanDb) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleOnSanDb) UnmarshalBinary(b []byte) error {
	var res OracleOnSanDb
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OracleOnSanDbStorageService oracle on san db storage service
//
// swagger:model OracleOnSanDbStorageService
type OracleOnSanDbStorageService struct {

	// The storage service of the database.
	// Enum: [extreme performance value]
	Name *string `json:"name,omitempty"`
}

// Validate validates this oracle on san db storage service
func (m *OracleOnSanDbStorageService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oracleOnSanDbStorageServiceTypeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["extreme","performance","value"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oracleOnSanDbStorageServiceTypeNamePropEnum = append(oracleOnSanDbStorageServiceTypeNamePropEnum, v)
	}
}

const (

	// BEGIN RIPPY DEBUGGING
	// OracleOnSanDbStorageService
	// OracleOnSanDbStorageService
	// name
	// Name
	// extreme
	// END RIPPY DEBUGGING
	// OracleOnSanDbStorageServiceNameExtreme captures enum value "extreme"
	OracleOnSanDbStorageServiceNameExtreme string = "extreme"

	// BEGIN RIPPY DEBUGGING
	// OracleOnSanDbStorageService
	// OracleOnSanDbStorageService
	// name
	// Name
	// performance
	// END RIPPY DEBUGGING
	// OracleOnSanDbStorageServiceNamePerformance captures enum value "performance"
	OracleOnSanDbStorageServiceNamePerformance string = "performance"

	// BEGIN RIPPY DEBUGGING
	// OracleOnSanDbStorageService
	// OracleOnSanDbStorageService
	// name
	// Name
	// value
	// END RIPPY DEBUGGING
	// OracleOnSanDbStorageServiceNameValue captures enum value "value"
	OracleOnSanDbStorageServiceNameValue string = "value"
)

// prop value enum
func (m *OracleOnSanDbStorageService) validateNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oracleOnSanDbStorageServiceTypeNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OracleOnSanDbStorageService) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	// value enum
	if err := m.validateNameEnum("db"+"."+"storage_service"+"."+"name", "body", *m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this oracle on san db storage service based on context it is used
func (m *OracleOnSanDbStorageService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OracleOnSanDbStorageService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleOnSanDbStorageService) UnmarshalBinary(b []byte) error {
	var res OracleOnSanDbStorageService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OracleOnSanOraHome oracle on san ora home
//
// swagger:model OracleOnSanOraHome
type OracleOnSanOraHome struct {

	// The size of the ORACLE_HOME storage volume. Usage: {&lt;integer&gt;[KB|MB|GB|TB|PB]}
	Size int64 `json:"size,omitempty"`

	// storage service
	StorageService *OracleOnSanOraHomeStorageService `json:"storage_service,omitempty"`
}

// Validate validates this oracle on san ora home
func (m *OracleOnSanOraHome) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStorageService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleOnSanOraHome) validateStorageService(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageService) { // not required
		return nil
	}

	if m.StorageService != nil {
		if err := m.StorageService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ora_home" + "." + "storage_service")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this oracle on san ora home based on the context it is used
func (m *OracleOnSanOraHome) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStorageService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleOnSanOraHome) contextValidateStorageService(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageService != nil {
		if err := m.StorageService.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ora_home" + "." + "storage_service")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OracleOnSanOraHome) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleOnSanOraHome) UnmarshalBinary(b []byte) error {
	var res OracleOnSanOraHome
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OracleOnSanOraHomeStorageService oracle on san ora home storage service
//
// swagger:model OracleOnSanOraHomeStorageService
type OracleOnSanOraHomeStorageService struct {

	// The storage service of the ORACLE_HOME storage volume.
	// Enum: [extreme performance value]
	Name *string `json:"name,omitempty"`
}

// Validate validates this oracle on san ora home storage service
func (m *OracleOnSanOraHomeStorageService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oracleOnSanOraHomeStorageServiceTypeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["extreme","performance","value"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oracleOnSanOraHomeStorageServiceTypeNamePropEnum = append(oracleOnSanOraHomeStorageServiceTypeNamePropEnum, v)
	}
}

const (

	// BEGIN RIPPY DEBUGGING
	// OracleOnSanOraHomeStorageService
	// OracleOnSanOraHomeStorageService
	// name
	// Name
	// extreme
	// END RIPPY DEBUGGING
	// OracleOnSanOraHomeStorageServiceNameExtreme captures enum value "extreme"
	OracleOnSanOraHomeStorageServiceNameExtreme string = "extreme"

	// BEGIN RIPPY DEBUGGING
	// OracleOnSanOraHomeStorageService
	// OracleOnSanOraHomeStorageService
	// name
	// Name
	// performance
	// END RIPPY DEBUGGING
	// OracleOnSanOraHomeStorageServiceNamePerformance captures enum value "performance"
	OracleOnSanOraHomeStorageServiceNamePerformance string = "performance"

	// BEGIN RIPPY DEBUGGING
	// OracleOnSanOraHomeStorageService
	// OracleOnSanOraHomeStorageService
	// name
	// Name
	// value
	// END RIPPY DEBUGGING
	// OracleOnSanOraHomeStorageServiceNameValue captures enum value "value"
	OracleOnSanOraHomeStorageServiceNameValue string = "value"
)

// prop value enum
func (m *OracleOnSanOraHomeStorageService) validateNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oracleOnSanOraHomeStorageServiceTypeNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OracleOnSanOraHomeStorageService) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	// value enum
	if err := m.validateNameEnum("ora_home"+"."+"storage_service"+"."+"name", "body", *m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this oracle on san ora home storage service based on context it is used
func (m *OracleOnSanOraHomeStorageService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OracleOnSanOraHomeStorageService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleOnSanOraHomeStorageService) UnmarshalBinary(b []byte) error {
	var res OracleOnSanOraHomeStorageService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OracleOnSanProtectionType oracle on san protection type
//
// swagger:model OracleOnSanProtectionType
type OracleOnSanProtectionType struct {

	// The local rpo of the application.
	// Enum: [hourly none]
	LocalRpo string `json:"local_rpo,omitempty"`

	// The remote rpo of the application.
	// Enum: [none zero]
	RemoteRpo string `json:"remote_rpo,omitempty"`
}

// Validate validates this oracle on san protection type
func (m *OracleOnSanProtectionType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLocalRpo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemoteRpo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oracleOnSanProtectionTypeTypeLocalRpoPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["hourly","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oracleOnSanProtectionTypeTypeLocalRpoPropEnum = append(oracleOnSanProtectionTypeTypeLocalRpoPropEnum, v)
	}
}

const (

	// BEGIN RIPPY DEBUGGING
	// OracleOnSanProtectionType
	// OracleOnSanProtectionType
	// local_rpo
	// LocalRpo
	// hourly
	// END RIPPY DEBUGGING
	// OracleOnSanProtectionTypeLocalRpoHourly captures enum value "hourly"
	OracleOnSanProtectionTypeLocalRpoHourly string = "hourly"

	// BEGIN RIPPY DEBUGGING
	// OracleOnSanProtectionType
	// OracleOnSanProtectionType
	// local_rpo
	// LocalRpo
	// none
	// END RIPPY DEBUGGING
	// OracleOnSanProtectionTypeLocalRpoNone captures enum value "none"
	OracleOnSanProtectionTypeLocalRpoNone string = "none"
)

// prop value enum
func (m *OracleOnSanProtectionType) validateLocalRpoEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oracleOnSanProtectionTypeTypeLocalRpoPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OracleOnSanProtectionType) validateLocalRpo(formats strfmt.Registry) error {
	if swag.IsZero(m.LocalRpo) { // not required
		return nil
	}

	// value enum
	if err := m.validateLocalRpoEnum("protection_type"+"."+"local_rpo", "body", m.LocalRpo); err != nil {
		return err
	}

	return nil
}

var oracleOnSanProtectionTypeTypeRemoteRpoPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["none","zero"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oracleOnSanProtectionTypeTypeRemoteRpoPropEnum = append(oracleOnSanProtectionTypeTypeRemoteRpoPropEnum, v)
	}
}

const (

	// BEGIN RIPPY DEBUGGING
	// OracleOnSanProtectionType
	// OracleOnSanProtectionType
	// remote_rpo
	// RemoteRpo
	// none
	// END RIPPY DEBUGGING
	// OracleOnSanProtectionTypeRemoteRpoNone captures enum value "none"
	OracleOnSanProtectionTypeRemoteRpoNone string = "none"

	// BEGIN RIPPY DEBUGGING
	// OracleOnSanProtectionType
	// OracleOnSanProtectionType
	// remote_rpo
	// RemoteRpo
	// zero
	// END RIPPY DEBUGGING
	// OracleOnSanProtectionTypeRemoteRpoZero captures enum value "zero"
	OracleOnSanProtectionTypeRemoteRpoZero string = "zero"
)

// prop value enum
func (m *OracleOnSanProtectionType) validateRemoteRpoEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oracleOnSanProtectionTypeTypeRemoteRpoPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OracleOnSanProtectionType) validateRemoteRpo(formats strfmt.Registry) error {
	if swag.IsZero(m.RemoteRpo) { // not required
		return nil
	}

	// value enum
	if err := m.validateRemoteRpoEnum("protection_type"+"."+"remote_rpo", "body", m.RemoteRpo); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this oracle on san protection type based on context it is used
func (m *OracleOnSanProtectionType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OracleOnSanProtectionType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleOnSanProtectionType) UnmarshalBinary(b []byte) error {
	var res OracleOnSanProtectionType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OracleOnSanRedoLog oracle on san redo log
//
// swagger:model OracleOnSanRedoLog
type OracleOnSanRedoLog struct {

	// Specifies whether the redo log group should be mirrored.
	// Enum: [false true]
	Mirrored *bool `json:"mirrored,omitempty"`

	// The size of the redo log group. Usage: {&lt;integer&gt;[KB|MB|GB|TB|PB]}
	// Required: true
	Size *int64 `json:"size"`

	// storage service
	StorageService *OracleOnSanRedoLogStorageService `json:"storage_service,omitempty"`
}

// Validate validates this oracle on san redo log
func (m *OracleOnSanRedoLog) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMirrored(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oracleOnSanRedoLogTypeMirroredPropEnum []interface{}

func init() {
	var res []bool
	if err := json.Unmarshal([]byte(`[false,true]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oracleOnSanRedoLogTypeMirroredPropEnum = append(oracleOnSanRedoLogTypeMirroredPropEnum, v)
	}
}

// prop value enum
func (m *OracleOnSanRedoLog) validateMirroredEnum(path, location string, value bool) error {
	if err := validate.EnumCase(path, location, value, oracleOnSanRedoLogTypeMirroredPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OracleOnSanRedoLog) validateMirrored(formats strfmt.Registry) error {
	if swag.IsZero(m.Mirrored) { // not required
		return nil
	}

	// value enum
	if err := m.validateMirroredEnum("redo_log"+"."+"mirrored", "body", *m.Mirrored); err != nil {
		return err
	}

	return nil
}

func (m *OracleOnSanRedoLog) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("redo_log"+"."+"size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

func (m *OracleOnSanRedoLog) validateStorageService(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageService) { // not required
		return nil
	}

	if m.StorageService != nil {
		if err := m.StorageService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("redo_log" + "." + "storage_service")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this oracle on san redo log based on the context it is used
func (m *OracleOnSanRedoLog) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStorageService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleOnSanRedoLog) contextValidateStorageService(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageService != nil {
		if err := m.StorageService.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("redo_log" + "." + "storage_service")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OracleOnSanRedoLog) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleOnSanRedoLog) UnmarshalBinary(b []byte) error {
	var res OracleOnSanRedoLog
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OracleOnSanRedoLogStorageService oracle on san redo log storage service
//
// swagger:model OracleOnSanRedoLogStorageService
type OracleOnSanRedoLogStorageService struct {

	// The storage service of the redo log group.
	// Enum: [extreme performance value]
	Name *string `json:"name,omitempty"`
}

// Validate validates this oracle on san redo log storage service
func (m *OracleOnSanRedoLogStorageService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oracleOnSanRedoLogStorageServiceTypeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["extreme","performance","value"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oracleOnSanRedoLogStorageServiceTypeNamePropEnum = append(oracleOnSanRedoLogStorageServiceTypeNamePropEnum, v)
	}
}

const (

	// BEGIN RIPPY DEBUGGING
	// OracleOnSanRedoLogStorageService
	// OracleOnSanRedoLogStorageService
	// name
	// Name
	// extreme
	// END RIPPY DEBUGGING
	// OracleOnSanRedoLogStorageServiceNameExtreme captures enum value "extreme"
	OracleOnSanRedoLogStorageServiceNameExtreme string = "extreme"

	// BEGIN RIPPY DEBUGGING
	// OracleOnSanRedoLogStorageService
	// OracleOnSanRedoLogStorageService
	// name
	// Name
	// performance
	// END RIPPY DEBUGGING
	// OracleOnSanRedoLogStorageServiceNamePerformance captures enum value "performance"
	OracleOnSanRedoLogStorageServiceNamePerformance string = "performance"

	// BEGIN RIPPY DEBUGGING
	// OracleOnSanRedoLogStorageService
	// OracleOnSanRedoLogStorageService
	// name
	// Name
	// value
	// END RIPPY DEBUGGING
	// OracleOnSanRedoLogStorageServiceNameValue captures enum value "value"
	OracleOnSanRedoLogStorageServiceNameValue string = "value"
)

// prop value enum
func (m *OracleOnSanRedoLogStorageService) validateNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oracleOnSanRedoLogStorageServiceTypeNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OracleOnSanRedoLogStorageService) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	// value enum
	if err := m.validateNameEnum("redo_log"+"."+"storage_service"+"."+"name", "body", *m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this oracle on san redo log storage service based on context it is used
func (m *OracleOnSanRedoLogStorageService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OracleOnSanRedoLogStorageService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleOnSanRedoLogStorageService) UnmarshalBinary(b []byte) error {
	var res OracleOnSanRedoLogStorageService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HELLO RIPPY
