// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SvmSSHServer svm ssh server
//
// swagger:model svm_ssh_server
type SvmSSHServer struct {

	// links
	Links *SvmSSHServerLinks `json:"_links,omitempty"`

	// Ciphers for encrypting the data.
	// Example: ["aes256_ctr","aes192_ctr","aes128_ctr"]
	Ciphers []Cipher `json:"ciphers,omitempty"`

	// Key exchange algorithms.
	// Example: ["diffie_hellman_group_exchange_sha256","diffie_hellman_group14_sha1"]
	KeyExchangeAlgorithms []KeyExchangeAlgorithm `json:"key_exchange_algorithms,omitempty"`

	// MAC algorithms.
	// Example: ["hmac_sha1","hmac_sha2_512_etm"]
	MacAlgorithms []MacAlgorithm `json:"mac_algorithms,omitempty"`

	// Maximum authentication retries allowed before closing the connection.
	// Maximum: 6
	// Minimum: 2
	MaxAuthenticationRetryCount int64 `json:"max_authentication_retry_count,omitempty"`

	// svm
	Svm *SvmSSHServerSvm `json:"svm,omitempty"`
}

// Validate validates this svm ssh server
func (m *SvmSSHServer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCiphers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeyExchangeAlgorithms(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMacAlgorithms(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxAuthenticationRetryCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvm(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SvmSSHServer) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *SvmSSHServer) validateCiphers(formats strfmt.Registry) error {
	if swag.IsZero(m.Ciphers) { // not required
		return nil
	}

	for i := 0; i < len(m.Ciphers); i++ {

		if err := m.Ciphers[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ciphers" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *SvmSSHServer) validateKeyExchangeAlgorithms(formats strfmt.Registry) error {
	if swag.IsZero(m.KeyExchangeAlgorithms) { // not required
		return nil
	}

	for i := 0; i < len(m.KeyExchangeAlgorithms); i++ {

		if err := m.KeyExchangeAlgorithms[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("key_exchange_algorithms" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *SvmSSHServer) validateMacAlgorithms(formats strfmt.Registry) error {
	if swag.IsZero(m.MacAlgorithms) { // not required
		return nil
	}

	for i := 0; i < len(m.MacAlgorithms); i++ {

		if err := m.MacAlgorithms[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mac_algorithms" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *SvmSSHServer) validateMaxAuthenticationRetryCount(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxAuthenticationRetryCount) { // not required
		return nil
	}

	if err := validate.MinimumInt("max_authentication_retry_count", "body", m.MaxAuthenticationRetryCount, 2, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("max_authentication_retry_count", "body", m.MaxAuthenticationRetryCount, 6, false); err != nil {
		return err
	}

	return nil
}

func (m *SvmSSHServer) validateSvm(formats strfmt.Registry) error {
	if swag.IsZero(m.Svm) { // not required
		return nil
	}

	if m.Svm != nil {
		if err := m.Svm.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svm")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this svm ssh server based on the context it is used
func (m *SvmSSHServer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCiphers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKeyExchangeAlgorithms(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMacAlgorithms(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSvm(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SvmSSHServer) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *SvmSSHServer) contextValidateCiphers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Ciphers); i++ {

		if err := m.Ciphers[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ciphers" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *SvmSSHServer) contextValidateKeyExchangeAlgorithms(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.KeyExchangeAlgorithms); i++ {

		if err := m.KeyExchangeAlgorithms[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("key_exchange_algorithms" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *SvmSSHServer) contextValidateMacAlgorithms(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MacAlgorithms); i++ {

		if err := m.MacAlgorithms[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mac_algorithms" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *SvmSSHServer) contextValidateSvm(ctx context.Context, formats strfmt.Registry) error {

	if m.Svm != nil {
		if err := m.Svm.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svm")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SvmSSHServer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SvmSSHServer) UnmarshalBinary(b []byte) error {
	var res SvmSSHServer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SvmSSHServerLinks svm SSH server links
//
// swagger:model SvmSSHServerLinks
type SvmSSHServerLinks struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this svm SSH server links
func (m *SvmSSHServerLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SvmSSHServerLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this svm SSH server links based on the context it is used
func (m *SvmSSHServerLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SvmSSHServerLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SvmSSHServerLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SvmSSHServerLinks) UnmarshalBinary(b []byte) error {
	var res SvmSSHServerLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SvmSSHServerSvm SVM name and UUID for which the SSH server is configured.
//
// swagger:model SvmSSHServerSvm
type SvmSSHServerSvm struct {

	// links
	Links *SvmSSHServerSvmLinks `json:"_links,omitempty"`

	// The name of the SVM.
	//
	// Example: svm1
	Name string `json:"name,omitempty"`

	// The unique identifier of the SVM.
	//
	// Example: 02c9e252-41be-11e9-81d5-00a0986138f7
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this svm SSH server svm
func (m *SvmSSHServerSvm) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SvmSSHServerSvm) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svm" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this svm SSH server svm based on the context it is used
func (m *SvmSSHServerSvm) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SvmSSHServerSvm) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svm" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SvmSSHServerSvm) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SvmSSHServerSvm) UnmarshalBinary(b []byte) error {
	var res SvmSSHServerSvm
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SvmSSHServerSvmLinks svm SSH server svm links
//
// swagger:model SvmSSHServerSvmLinks
type SvmSSHServerSvmLinks struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this svm SSH server svm links
func (m *SvmSSHServerSvmLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SvmSSHServerSvmLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svm" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this svm SSH server svm links based on the context it is used
func (m *SvmSSHServerSvmLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SvmSSHServerSvmLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svm" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SvmSSHServerSvmLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SvmSSHServerSvmLinks) UnmarshalBinary(b []byte) error {
	var res SvmSSHServerSvmLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
