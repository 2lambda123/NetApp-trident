// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SecurityKeystore security keystore
//
// swagger:model security_keystore
type SecurityKeystore struct {

	// Indicates whether the keystore is onboard or external.
	Location string `json:"location,omitempty"`

	// svm
	Svm *SecurityKeystoreSvm `json:"svm,omitempty"`

	// Type of keystore that is configured: * 'okm' - Onboard Key Manager * 'kmip' - External Key Manager * 'akv' - Azure Key Vault Key Management Service * 'gcp' - Google Cloud Platform Key Management Service * 'aws' - Amazon Web Service Key Management Service
	//
	// Enum: [okm kmip akv gcp aws]
	Type string `json:"type,omitempty"`

	// uuid
	// Read Only: true
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this security keystore
func (m *SecurityKeystore) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSvm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityKeystore) validateSvm(formats strfmt.Registry) error {
	if swag.IsZero(m.Svm) { // not required
		return nil
	}

	if m.Svm != nil {
		if err := m.Svm.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svm")
			}
			return err
		}
	}

	return nil
}

var securityKeystoreTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["okm","kmip","akv","gcp","aws"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		securityKeystoreTypeTypePropEnum = append(securityKeystoreTypeTypePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// security_keystore
	// SecurityKeystore
	// type
	// Type
	// okm
	// END DEBUGGING
	// SecurityKeystoreTypeOkm captures enum value "okm"
	SecurityKeystoreTypeOkm string = "okm"

	// BEGIN DEBUGGING
	// security_keystore
	// SecurityKeystore
	// type
	// Type
	// kmip
	// END DEBUGGING
	// SecurityKeystoreTypeKmip captures enum value "kmip"
	SecurityKeystoreTypeKmip string = "kmip"

	// BEGIN DEBUGGING
	// security_keystore
	// SecurityKeystore
	// type
	// Type
	// akv
	// END DEBUGGING
	// SecurityKeystoreTypeAkv captures enum value "akv"
	SecurityKeystoreTypeAkv string = "akv"

	// BEGIN DEBUGGING
	// security_keystore
	// SecurityKeystore
	// type
	// Type
	// gcp
	// END DEBUGGING
	// SecurityKeystoreTypeGcp captures enum value "gcp"
	SecurityKeystoreTypeGcp string = "gcp"

	// BEGIN DEBUGGING
	// security_keystore
	// SecurityKeystore
	// type
	// Type
	// aws
	// END DEBUGGING
	// SecurityKeystoreTypeAws captures enum value "aws"
	SecurityKeystoreTypeAws string = "aws"
)

// prop value enum
func (m *SecurityKeystore) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, securityKeystoreTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SecurityKeystore) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this security keystore based on the context it is used
func (m *SecurityKeystore) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSvm(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityKeystore) contextValidateSvm(ctx context.Context, formats strfmt.Registry) error {

	if m.Svm != nil {
		if err := m.Svm.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svm")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityKeystore) contextValidateUUID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "uuid", "body", string(m.UUID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SecurityKeystore) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecurityKeystore) UnmarshalBinary(b []byte) error {
	var res SecurityKeystore
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SecurityKeystoreSvm security keystore svm
//
// swagger:model SecurityKeystoreSvm
type SecurityKeystoreSvm struct {

	// links
	Links *SecurityKeystoreSvmLinks `json:"_links,omitempty"`

	// The name of the SVM.
	//
	// Example: svm1
	Name string `json:"name,omitempty"`

	// The unique identifier of the SVM.
	//
	// Example: 02c9e252-41be-11e9-81d5-00a0986138f7
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this security keystore svm
func (m *SecurityKeystoreSvm) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityKeystoreSvm) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svm" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this security keystore svm based on the context it is used
func (m *SecurityKeystoreSvm) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityKeystoreSvm) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svm" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SecurityKeystoreSvm) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecurityKeystoreSvm) UnmarshalBinary(b []byte) error {
	var res SecurityKeystoreSvm
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SecurityKeystoreSvmLinks security keystore svm links
//
// swagger:model SecurityKeystoreSvmLinks
type SecurityKeystoreSvmLinks struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this security keystore svm links
func (m *SecurityKeystoreSvmLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityKeystoreSvmLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svm" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this security keystore svm links based on the context it is used
func (m *SecurityKeystoreSvmLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityKeystoreSvmLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svm" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SecurityKeystoreSvmLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecurityKeystoreSvmLinks) UnmarshalBinary(b []byte) error {
	var res SecurityKeystoreSvmLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
