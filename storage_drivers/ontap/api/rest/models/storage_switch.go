// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StorageSwitch The Storage switch object describes the storage switch properties, features and cabling.
//
// swagger:model storage_switch
type StorageSwitch struct {

	// connections
	Connections []*StorageSwitchConnectionsItems0 `json:"connections,omitempty"`

	// director class
	DirectorClass bool `json:"director_class,omitempty"`

	// Domain ID
	DomainID int64 `json:"domain_id,omitempty"`

	// errors
	Errors []*StorageSwitchErrorsItems0 `json:"errors,omitempty"`

	// Storage switch fabric name
	FabricName string `json:"fabric_name,omitempty"`

	// fans
	Fans []*StorageSwitchFansItems0 `json:"fans,omitempty"`

	// Storage switch firmware version
	FirmwareVersion string `json:"firmware_version,omitempty"`

	// IP Address
	IPAddress string `json:"ip_address,omitempty"`

	// Indicates whether the storage switch is directly connected to the reporting cluster.
	Local bool `json:"local,omitempty"`

	// Storage switch model.
	Model string `json:"model,omitempty"`

	// Indicates the blades that are being monitored for a director-class switch.
	MonitoredBlades []int64 `json:"monitored_blades,omitempty"`

	// Indicates whether monitoring is enabled for the storage switch.
	MonitoringEnabled bool `json:"monitoring_enabled,omitempty"`

	// Storage switch name
	Name string `json:"name,omitempty"`

	// paths
	Paths []*StorageSwitchPathsItems0 `json:"paths,omitempty"`

	// ports
	Ports []*StorageSwitchPortsItems0 `json:"ports,omitempty"`

	// power supply units
	PowerSupplyUnits []*StorageSwitchPowerSupplyUnitsItems0 `json:"power_supply_units,omitempty"`

	// Storage switch role in fabric.
	// Enum: [unknown primary subordinate]
	Role string `json:"role,omitempty"`

	// Storage switch state
	// Enum: [ok error]
	State string `json:"state,omitempty"`

	// Storage switch symbolic name
	SymbolicName string `json:"symbolic_name,omitempty"`

	// temperature sensors
	TemperatureSensors []*StorageSwitchTemperatureSensorsItems0 `json:"temperature_sensors,omitempty"`

	// Storage switch vendor
	// Enum: [unknown brocade cisco]
	Vendor string `json:"vendor,omitempty"`

	// vsans
	Vsans []*StorageSwitchVsansItems0 `json:"vsans,omitempty"`

	// Storage switch world wide name
	Wwn string `json:"wwn,omitempty"`

	// zones
	Zones []*StorageSwitchZonesItems0 `json:"zones,omitempty"`
}

// Validate validates this storage switch
func (m *StorageSwitch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnections(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFans(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaths(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePorts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePowerSupplyUnits(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemperatureSensors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVendor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVsans(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZones(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageSwitch) validateConnections(formats strfmt.Registry) error {
	if swag.IsZero(m.Connections) { // not required
		return nil
	}

	for i := 0; i < len(m.Connections); i++ {
		if swag.IsZero(m.Connections[i]) { // not required
			continue
		}

		if m.Connections[i] != nil {
			if err := m.Connections[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("connections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StorageSwitch) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(m.Errors) { // not required
		return nil
	}

	for i := 0; i < len(m.Errors); i++ {
		if swag.IsZero(m.Errors[i]) { // not required
			continue
		}

		if m.Errors[i] != nil {
			if err := m.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StorageSwitch) validateFans(formats strfmt.Registry) error {
	if swag.IsZero(m.Fans) { // not required
		return nil
	}

	for i := 0; i < len(m.Fans); i++ {
		if swag.IsZero(m.Fans[i]) { // not required
			continue
		}

		if m.Fans[i] != nil {
			if err := m.Fans[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fans" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StorageSwitch) validatePaths(formats strfmt.Registry) error {
	if swag.IsZero(m.Paths) { // not required
		return nil
	}

	for i := 0; i < len(m.Paths); i++ {
		if swag.IsZero(m.Paths[i]) { // not required
			continue
		}

		if m.Paths[i] != nil {
			if err := m.Paths[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("paths" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StorageSwitch) validatePorts(formats strfmt.Registry) error {
	if swag.IsZero(m.Ports) { // not required
		return nil
	}

	for i := 0; i < len(m.Ports); i++ {
		if swag.IsZero(m.Ports[i]) { // not required
			continue
		}

		if m.Ports[i] != nil {
			if err := m.Ports[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StorageSwitch) validatePowerSupplyUnits(formats strfmt.Registry) error {
	if swag.IsZero(m.PowerSupplyUnits) { // not required
		return nil
	}

	for i := 0; i < len(m.PowerSupplyUnits); i++ {
		if swag.IsZero(m.PowerSupplyUnits[i]) { // not required
			continue
		}

		if m.PowerSupplyUnits[i] != nil {
			if err := m.PowerSupplyUnits[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("power_supply_units" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var storageSwitchTypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["unknown","primary","subordinate"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageSwitchTypeRolePropEnum = append(storageSwitchTypeRolePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// storage_switch
	// StorageSwitch
	// role
	// Role
	// unknown
	// END DEBUGGING
	// StorageSwitchRoleUnknown captures enum value "unknown"
	StorageSwitchRoleUnknown string = "unknown"

	// BEGIN DEBUGGING
	// storage_switch
	// StorageSwitch
	// role
	// Role
	// primary
	// END DEBUGGING
	// StorageSwitchRolePrimary captures enum value "primary"
	StorageSwitchRolePrimary string = "primary"

	// BEGIN DEBUGGING
	// storage_switch
	// StorageSwitch
	// role
	// Role
	// subordinate
	// END DEBUGGING
	// StorageSwitchRoleSubordinate captures enum value "subordinate"
	StorageSwitchRoleSubordinate string = "subordinate"
)

// prop value enum
func (m *StorageSwitch) validateRoleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, storageSwitchTypeRolePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StorageSwitch) validateRole(formats strfmt.Registry) error {
	if swag.IsZero(m.Role) { // not required
		return nil
	}

	// value enum
	if err := m.validateRoleEnum("role", "body", m.Role); err != nil {
		return err
	}

	return nil
}

var storageSwitchTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ok","error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageSwitchTypeStatePropEnum = append(storageSwitchTypeStatePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// storage_switch
	// StorageSwitch
	// state
	// State
	// ok
	// END DEBUGGING
	// StorageSwitchStateOk captures enum value "ok"
	StorageSwitchStateOk string = "ok"

	// BEGIN DEBUGGING
	// storage_switch
	// StorageSwitch
	// state
	// State
	// error
	// END DEBUGGING
	// StorageSwitchStateError captures enum value "error"
	StorageSwitchStateError string = "error"
)

// prop value enum
func (m *StorageSwitch) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, storageSwitchTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StorageSwitch) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *StorageSwitch) validateTemperatureSensors(formats strfmt.Registry) error {
	if swag.IsZero(m.TemperatureSensors) { // not required
		return nil
	}

	for i := 0; i < len(m.TemperatureSensors); i++ {
		if swag.IsZero(m.TemperatureSensors[i]) { // not required
			continue
		}

		if m.TemperatureSensors[i] != nil {
			if err := m.TemperatureSensors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("temperature_sensors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var storageSwitchTypeVendorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["unknown","brocade","cisco"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageSwitchTypeVendorPropEnum = append(storageSwitchTypeVendorPropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// storage_switch
	// StorageSwitch
	// vendor
	// Vendor
	// unknown
	// END DEBUGGING
	// StorageSwitchVendorUnknown captures enum value "unknown"
	StorageSwitchVendorUnknown string = "unknown"

	// BEGIN DEBUGGING
	// storage_switch
	// StorageSwitch
	// vendor
	// Vendor
	// brocade
	// END DEBUGGING
	// StorageSwitchVendorBrocade captures enum value "brocade"
	StorageSwitchVendorBrocade string = "brocade"

	// BEGIN DEBUGGING
	// storage_switch
	// StorageSwitch
	// vendor
	// Vendor
	// cisco
	// END DEBUGGING
	// StorageSwitchVendorCisco captures enum value "cisco"
	StorageSwitchVendorCisco string = "cisco"
)

// prop value enum
func (m *StorageSwitch) validateVendorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, storageSwitchTypeVendorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StorageSwitch) validateVendor(formats strfmt.Registry) error {
	if swag.IsZero(m.Vendor) { // not required
		return nil
	}

	// value enum
	if err := m.validateVendorEnum("vendor", "body", m.Vendor); err != nil {
		return err
	}

	return nil
}

func (m *StorageSwitch) validateVsans(formats strfmt.Registry) error {
	if swag.IsZero(m.Vsans) { // not required
		return nil
	}

	for i := 0; i < len(m.Vsans); i++ {
		if swag.IsZero(m.Vsans[i]) { // not required
			continue
		}

		if m.Vsans[i] != nil {
			if err := m.Vsans[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vsans" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StorageSwitch) validateZones(formats strfmt.Registry) error {
	if swag.IsZero(m.Zones) { // not required
		return nil
	}

	for i := 0; i < len(m.Zones); i++ {
		if swag.IsZero(m.Zones[i]) { // not required
			continue
		}

		if m.Zones[i] != nil {
			if err := m.Zones[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("zones" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this storage switch based on the context it is used
func (m *StorageSwitch) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConnections(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFans(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePaths(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePorts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePowerSupplyUnits(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTemperatureSensors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVsans(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateZones(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageSwitch) contextValidateConnections(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Connections); i++ {

		if m.Connections[i] != nil {
			if err := m.Connections[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("connections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StorageSwitch) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Errors); i++ {

		if m.Errors[i] != nil {
			if err := m.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StorageSwitch) contextValidateFans(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Fans); i++ {

		if m.Fans[i] != nil {
			if err := m.Fans[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fans" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StorageSwitch) contextValidatePaths(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Paths); i++ {

		if m.Paths[i] != nil {
			if err := m.Paths[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("paths" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StorageSwitch) contextValidatePorts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Ports); i++ {

		if m.Ports[i] != nil {
			if err := m.Ports[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StorageSwitch) contextValidatePowerSupplyUnits(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PowerSupplyUnits); i++ {

		if m.PowerSupplyUnits[i] != nil {
			if err := m.PowerSupplyUnits[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("power_supply_units" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StorageSwitch) contextValidateTemperatureSensors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TemperatureSensors); i++ {

		if m.TemperatureSensors[i] != nil {
			if err := m.TemperatureSensors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("temperature_sensors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StorageSwitch) contextValidateVsans(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Vsans); i++ {

		if m.Vsans[i] != nil {
			if err := m.Vsans[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vsans" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StorageSwitch) contextValidateZones(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Zones); i++ {

		if m.Zones[i] != nil {
			if err := m.Zones[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("zones" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *StorageSwitch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageSwitch) UnmarshalBinary(b []byte) error {
	var res StorageSwitch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StorageSwitchConnectionsItems0 storage switch connections items0
//
// swagger:model StorageSwitchConnectionsItems0
type StorageSwitchConnectionsItems0 struct {

	// peer port
	PeerPort *StorageSwitchConnectionsItems0PeerPort `json:"peer_port,omitempty"`

	// source port
	SourcePort *StorageSwitchConnectionsItems0SourcePort `json:"source_port,omitempty"`
}

// Validate validates this storage switch connections items0
func (m *StorageSwitchConnectionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePeerPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourcePort(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageSwitchConnectionsItems0) validatePeerPort(formats strfmt.Registry) error {
	if swag.IsZero(m.PeerPort) { // not required
		return nil
	}

	if m.PeerPort != nil {
		if err := m.PeerPort.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("peer_port")
			}
			return err
		}
	}

	return nil
}

func (m *StorageSwitchConnectionsItems0) validateSourcePort(formats strfmt.Registry) error {
	if swag.IsZero(m.SourcePort) { // not required
		return nil
	}

	if m.SourcePort != nil {
		if err := m.SourcePort.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source_port")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this storage switch connections items0 based on the context it is used
func (m *StorageSwitchConnectionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePeerPort(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourcePort(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageSwitchConnectionsItems0) contextValidatePeerPort(ctx context.Context, formats strfmt.Registry) error {

	if m.PeerPort != nil {
		if err := m.PeerPort.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("peer_port")
			}
			return err
		}
	}

	return nil
}

func (m *StorageSwitchConnectionsItems0) contextValidateSourcePort(ctx context.Context, formats strfmt.Registry) error {

	if m.SourcePort != nil {
		if err := m.SourcePort.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source_port")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StorageSwitchConnectionsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageSwitchConnectionsItems0) UnmarshalBinary(b []byte) error {
	var res StorageSwitchConnectionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StorageSwitchConnectionsItems0PeerPort storage switch connections items0 peer port
//
// swagger:model StorageSwitchConnectionsItems0PeerPort
type StorageSwitchConnectionsItems0PeerPort struct {

	// Storage switch peer port host and name
	Connection string `json:"connection,omitempty"`

	// Storage switch peer type
	// Enum: [unknown bridge switch fcp_adapter fcvi_adapter]
	Type string `json:"type,omitempty"`

	// Storage switch peer unique ID
	UniqueID string `json:"unique_id,omitempty"`

	// Storage switch peer port world wide name
	Wwn string `json:"wwn,omitempty"`
}

// Validate validates this storage switch connections items0 peer port
func (m *StorageSwitchConnectionsItems0PeerPort) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var storageSwitchConnectionsItems0PeerPortTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["unknown","bridge","switch","fcp_adapter","fcvi_adapter"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageSwitchConnectionsItems0PeerPortTypeTypePropEnum = append(storageSwitchConnectionsItems0PeerPortTypeTypePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// StorageSwitchConnectionsItems0PeerPort
	// StorageSwitchConnectionsItems0PeerPort
	// type
	// Type
	// unknown
	// END DEBUGGING
	// StorageSwitchConnectionsItems0PeerPortTypeUnknown captures enum value "unknown"
	StorageSwitchConnectionsItems0PeerPortTypeUnknown string = "unknown"

	// BEGIN DEBUGGING
	// StorageSwitchConnectionsItems0PeerPort
	// StorageSwitchConnectionsItems0PeerPort
	// type
	// Type
	// bridge
	// END DEBUGGING
	// StorageSwitchConnectionsItems0PeerPortTypeBridge captures enum value "bridge"
	StorageSwitchConnectionsItems0PeerPortTypeBridge string = "bridge"

	// BEGIN DEBUGGING
	// StorageSwitchConnectionsItems0PeerPort
	// StorageSwitchConnectionsItems0PeerPort
	// type
	// Type
	// switch
	// END DEBUGGING
	// StorageSwitchConnectionsItems0PeerPortTypeSwitch captures enum value "switch"
	StorageSwitchConnectionsItems0PeerPortTypeSwitch string = "switch"

	// BEGIN DEBUGGING
	// StorageSwitchConnectionsItems0PeerPort
	// StorageSwitchConnectionsItems0PeerPort
	// type
	// Type
	// fcp_adapter
	// END DEBUGGING
	// StorageSwitchConnectionsItems0PeerPortTypeFcpAdapter captures enum value "fcp_adapter"
	StorageSwitchConnectionsItems0PeerPortTypeFcpAdapter string = "fcp_adapter"

	// BEGIN DEBUGGING
	// StorageSwitchConnectionsItems0PeerPort
	// StorageSwitchConnectionsItems0PeerPort
	// type
	// Type
	// fcvi_adapter
	// END DEBUGGING
	// StorageSwitchConnectionsItems0PeerPortTypeFcviAdapter captures enum value "fcvi_adapter"
	StorageSwitchConnectionsItems0PeerPortTypeFcviAdapter string = "fcvi_adapter"
)

// prop value enum
func (m *StorageSwitchConnectionsItems0PeerPort) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, storageSwitchConnectionsItems0PeerPortTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StorageSwitchConnectionsItems0PeerPort) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("peer_port"+"."+"type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this storage switch connections items0 peer port based on context it is used
func (m *StorageSwitchConnectionsItems0PeerPort) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StorageSwitchConnectionsItems0PeerPort) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageSwitchConnectionsItems0PeerPort) UnmarshalBinary(b []byte) error {
	var res StorageSwitchConnectionsItems0PeerPort
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StorageSwitchConnectionsItems0SourcePort storage switch connections items0 source port
//
// swagger:model StorageSwitchConnectionsItems0SourcePort
type StorageSwitchConnectionsItems0SourcePort struct {

	// Storage switch port operating mode
	Mode string `json:"mode,omitempty"`

	// Storage switch port name
	Name string `json:"name,omitempty"`

	// Storage switch peer port world wide name
	Wwn string `json:"wwn,omitempty"`
}

// Validate validates this storage switch connections items0 source port
func (m *StorageSwitchConnectionsItems0SourcePort) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this storage switch connections items0 source port based on context it is used
func (m *StorageSwitchConnectionsItems0SourcePort) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StorageSwitchConnectionsItems0SourcePort) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageSwitchConnectionsItems0SourcePort) UnmarshalBinary(b []byte) error {
	var res StorageSwitchConnectionsItems0SourcePort
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StorageSwitchErrorsItems0 storage switch errors items0
//
// swagger:model StorageSwitchErrorsItems0
type StorageSwitchErrorsItems0 struct {

	// component
	Component *StorageSwitchErrorsItems0Component `json:"component,omitempty"`

	// reason
	Reason *Error `json:"reason,omitempty"`

	// Error component severity
	// Enum: [unknown notice warning error]
	Severity string `json:"severity,omitempty"`

	// Error component type
	// Enum: [switch_unreachable temp_above_warning_level temp_above_critical_level temp_below_warning_level temp_below_critical_level temp_sensor_status_failed fan_status_non_operational power_supply_status_failed power_above_warning_level power_above_critical_level power_below_warning_level power_below_critical_level sfp_rx_power_above_warning_level sfp_rx_power_above_critical_level sfp_tx_power_above_warning_level sfp_tx_power_above_critical_level sfp_rx_power_below_warning_level sfp_rx_power_below_critical_level sfp_tx_power_below_warning_level sfp_tx_power_below_critical_level sfp_status_failed vsan_invalid_frame_delivery_configuration temp_sensor_status_unavailable fan_status_unavailable power_supply_inline_power_failed power_supply_status_unavailable unknown power_supply_off_env_other power_supply_off_admin power_supply_off_denied power_supply_off_env_power power_supply_off_env_temp power_supply_off_env_fan power_supply_on_but_fan_fail power_supply_off_cooling power_supply_off_connector_rating e_ports_down snmpv3_user_not_configured incomplete_snmp_data_refresh]
	Type string `json:"type,omitempty"`
}

// Validate validates this storage switch errors items0
func (m *StorageSwitchErrorsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComponent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageSwitchErrorsItems0) validateComponent(formats strfmt.Registry) error {
	if swag.IsZero(m.Component) { // not required
		return nil
	}

	if m.Component != nil {
		if err := m.Component.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("component")
			}
			return err
		}
	}

	return nil
}

func (m *StorageSwitchErrorsItems0) validateReason(formats strfmt.Registry) error {
	if swag.IsZero(m.Reason) { // not required
		return nil
	}

	if m.Reason != nil {
		if err := m.Reason.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reason")
			}
			return err
		}
	}

	return nil
}

var storageSwitchErrorsItems0TypeSeverityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["unknown","notice","warning","error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageSwitchErrorsItems0TypeSeverityPropEnum = append(storageSwitchErrorsItems0TypeSeverityPropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// StorageSwitchErrorsItems0
	// StorageSwitchErrorsItems0
	// severity
	// Severity
	// unknown
	// END DEBUGGING
	// StorageSwitchErrorsItems0SeverityUnknown captures enum value "unknown"
	StorageSwitchErrorsItems0SeverityUnknown string = "unknown"

	// BEGIN DEBUGGING
	// StorageSwitchErrorsItems0
	// StorageSwitchErrorsItems0
	// severity
	// Severity
	// notice
	// END DEBUGGING
	// StorageSwitchErrorsItems0SeverityNotice captures enum value "notice"
	StorageSwitchErrorsItems0SeverityNotice string = "notice"

	// BEGIN DEBUGGING
	// StorageSwitchErrorsItems0
	// StorageSwitchErrorsItems0
	// severity
	// Severity
	// warning
	// END DEBUGGING
	// StorageSwitchErrorsItems0SeverityWarning captures enum value "warning"
	StorageSwitchErrorsItems0SeverityWarning string = "warning"

	// BEGIN DEBUGGING
	// StorageSwitchErrorsItems0
	// StorageSwitchErrorsItems0
	// severity
	// Severity
	// error
	// END DEBUGGING
	// StorageSwitchErrorsItems0SeverityError captures enum value "error"
	StorageSwitchErrorsItems0SeverityError string = "error"
)

// prop value enum
func (m *StorageSwitchErrorsItems0) validateSeverityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, storageSwitchErrorsItems0TypeSeverityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StorageSwitchErrorsItems0) validateSeverity(formats strfmt.Registry) error {
	if swag.IsZero(m.Severity) { // not required
		return nil
	}

	// value enum
	if err := m.validateSeverityEnum("severity", "body", m.Severity); err != nil {
		return err
	}

	return nil
}

var storageSwitchErrorsItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["switch_unreachable","temp_above_warning_level","temp_above_critical_level","temp_below_warning_level","temp_below_critical_level","temp_sensor_status_failed","fan_status_non_operational","power_supply_status_failed","power_above_warning_level","power_above_critical_level","power_below_warning_level","power_below_critical_level","sfp_rx_power_above_warning_level","sfp_rx_power_above_critical_level","sfp_tx_power_above_warning_level","sfp_tx_power_above_critical_level","sfp_rx_power_below_warning_level","sfp_rx_power_below_critical_level","sfp_tx_power_below_warning_level","sfp_tx_power_below_critical_level","sfp_status_failed","vsan_invalid_frame_delivery_configuration","temp_sensor_status_unavailable","fan_status_unavailable","power_supply_inline_power_failed","power_supply_status_unavailable","unknown","power_supply_off_env_other","power_supply_off_admin","power_supply_off_denied","power_supply_off_env_power","power_supply_off_env_temp","power_supply_off_env_fan","power_supply_on_but_fan_fail","power_supply_off_cooling","power_supply_off_connector_rating","e_ports_down","snmpv3_user_not_configured","incomplete_snmp_data_refresh"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageSwitchErrorsItems0TypeTypePropEnum = append(storageSwitchErrorsItems0TypeTypePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// StorageSwitchErrorsItems0
	// StorageSwitchErrorsItems0
	// type
	// Type
	// switch_unreachable
	// END DEBUGGING
	// StorageSwitchErrorsItems0TypeSwitchUnreachable captures enum value "switch_unreachable"
	StorageSwitchErrorsItems0TypeSwitchUnreachable string = "switch_unreachable"

	// BEGIN DEBUGGING
	// StorageSwitchErrorsItems0
	// StorageSwitchErrorsItems0
	// type
	// Type
	// temp_above_warning_level
	// END DEBUGGING
	// StorageSwitchErrorsItems0TypeTempAboveWarningLevel captures enum value "temp_above_warning_level"
	StorageSwitchErrorsItems0TypeTempAboveWarningLevel string = "temp_above_warning_level"

	// BEGIN DEBUGGING
	// StorageSwitchErrorsItems0
	// StorageSwitchErrorsItems0
	// type
	// Type
	// temp_above_critical_level
	// END DEBUGGING
	// StorageSwitchErrorsItems0TypeTempAboveCriticalLevel captures enum value "temp_above_critical_level"
	StorageSwitchErrorsItems0TypeTempAboveCriticalLevel string = "temp_above_critical_level"

	// BEGIN DEBUGGING
	// StorageSwitchErrorsItems0
	// StorageSwitchErrorsItems0
	// type
	// Type
	// temp_below_warning_level
	// END DEBUGGING
	// StorageSwitchErrorsItems0TypeTempBelowWarningLevel captures enum value "temp_below_warning_level"
	StorageSwitchErrorsItems0TypeTempBelowWarningLevel string = "temp_below_warning_level"

	// BEGIN DEBUGGING
	// StorageSwitchErrorsItems0
	// StorageSwitchErrorsItems0
	// type
	// Type
	// temp_below_critical_level
	// END DEBUGGING
	// StorageSwitchErrorsItems0TypeTempBelowCriticalLevel captures enum value "temp_below_critical_level"
	StorageSwitchErrorsItems0TypeTempBelowCriticalLevel string = "temp_below_critical_level"

	// BEGIN DEBUGGING
	// StorageSwitchErrorsItems0
	// StorageSwitchErrorsItems0
	// type
	// Type
	// temp_sensor_status_failed
	// END DEBUGGING
	// StorageSwitchErrorsItems0TypeTempSensorStatusFailed captures enum value "temp_sensor_status_failed"
	StorageSwitchErrorsItems0TypeTempSensorStatusFailed string = "temp_sensor_status_failed"

	// BEGIN DEBUGGING
	// StorageSwitchErrorsItems0
	// StorageSwitchErrorsItems0
	// type
	// Type
	// fan_status_non_operational
	// END DEBUGGING
	// StorageSwitchErrorsItems0TypeFanStatusNonOperational captures enum value "fan_status_non_operational"
	StorageSwitchErrorsItems0TypeFanStatusNonOperational string = "fan_status_non_operational"

	// BEGIN DEBUGGING
	// StorageSwitchErrorsItems0
	// StorageSwitchErrorsItems0
	// type
	// Type
	// power_supply_status_failed
	// END DEBUGGING
	// StorageSwitchErrorsItems0TypePowerSupplyStatusFailed captures enum value "power_supply_status_failed"
	StorageSwitchErrorsItems0TypePowerSupplyStatusFailed string = "power_supply_status_failed"

	// BEGIN DEBUGGING
	// StorageSwitchErrorsItems0
	// StorageSwitchErrorsItems0
	// type
	// Type
	// power_above_warning_level
	// END DEBUGGING
	// StorageSwitchErrorsItems0TypePowerAboveWarningLevel captures enum value "power_above_warning_level"
	StorageSwitchErrorsItems0TypePowerAboveWarningLevel string = "power_above_warning_level"

	// BEGIN DEBUGGING
	// StorageSwitchErrorsItems0
	// StorageSwitchErrorsItems0
	// type
	// Type
	// power_above_critical_level
	// END DEBUGGING
	// StorageSwitchErrorsItems0TypePowerAboveCriticalLevel captures enum value "power_above_critical_level"
	StorageSwitchErrorsItems0TypePowerAboveCriticalLevel string = "power_above_critical_level"

	// BEGIN DEBUGGING
	// StorageSwitchErrorsItems0
	// StorageSwitchErrorsItems0
	// type
	// Type
	// power_below_warning_level
	// END DEBUGGING
	// StorageSwitchErrorsItems0TypePowerBelowWarningLevel captures enum value "power_below_warning_level"
	StorageSwitchErrorsItems0TypePowerBelowWarningLevel string = "power_below_warning_level"

	// BEGIN DEBUGGING
	// StorageSwitchErrorsItems0
	// StorageSwitchErrorsItems0
	// type
	// Type
	// power_below_critical_level
	// END DEBUGGING
	// StorageSwitchErrorsItems0TypePowerBelowCriticalLevel captures enum value "power_below_critical_level"
	StorageSwitchErrorsItems0TypePowerBelowCriticalLevel string = "power_below_critical_level"

	// BEGIN DEBUGGING
	// StorageSwitchErrorsItems0
	// StorageSwitchErrorsItems0
	// type
	// Type
	// sfp_rx_power_above_warning_level
	// END DEBUGGING
	// StorageSwitchErrorsItems0TypeSfpRxPowerAboveWarningLevel captures enum value "sfp_rx_power_above_warning_level"
	StorageSwitchErrorsItems0TypeSfpRxPowerAboveWarningLevel string = "sfp_rx_power_above_warning_level"

	// BEGIN DEBUGGING
	// StorageSwitchErrorsItems0
	// StorageSwitchErrorsItems0
	// type
	// Type
	// sfp_rx_power_above_critical_level
	// END DEBUGGING
	// StorageSwitchErrorsItems0TypeSfpRxPowerAboveCriticalLevel captures enum value "sfp_rx_power_above_critical_level"
	StorageSwitchErrorsItems0TypeSfpRxPowerAboveCriticalLevel string = "sfp_rx_power_above_critical_level"

	// BEGIN DEBUGGING
	// StorageSwitchErrorsItems0
	// StorageSwitchErrorsItems0
	// type
	// Type
	// sfp_tx_power_above_warning_level
	// END DEBUGGING
	// StorageSwitchErrorsItems0TypeSfpTxPowerAboveWarningLevel captures enum value "sfp_tx_power_above_warning_level"
	StorageSwitchErrorsItems0TypeSfpTxPowerAboveWarningLevel string = "sfp_tx_power_above_warning_level"

	// BEGIN DEBUGGING
	// StorageSwitchErrorsItems0
	// StorageSwitchErrorsItems0
	// type
	// Type
	// sfp_tx_power_above_critical_level
	// END DEBUGGING
	// StorageSwitchErrorsItems0TypeSfpTxPowerAboveCriticalLevel captures enum value "sfp_tx_power_above_critical_level"
	StorageSwitchErrorsItems0TypeSfpTxPowerAboveCriticalLevel string = "sfp_tx_power_above_critical_level"

	// BEGIN DEBUGGING
	// StorageSwitchErrorsItems0
	// StorageSwitchErrorsItems0
	// type
	// Type
	// sfp_rx_power_below_warning_level
	// END DEBUGGING
	// StorageSwitchErrorsItems0TypeSfpRxPowerBelowWarningLevel captures enum value "sfp_rx_power_below_warning_level"
	StorageSwitchErrorsItems0TypeSfpRxPowerBelowWarningLevel string = "sfp_rx_power_below_warning_level"

	// BEGIN DEBUGGING
	// StorageSwitchErrorsItems0
	// StorageSwitchErrorsItems0
	// type
	// Type
	// sfp_rx_power_below_critical_level
	// END DEBUGGING
	// StorageSwitchErrorsItems0TypeSfpRxPowerBelowCriticalLevel captures enum value "sfp_rx_power_below_critical_level"
	StorageSwitchErrorsItems0TypeSfpRxPowerBelowCriticalLevel string = "sfp_rx_power_below_critical_level"

	// BEGIN DEBUGGING
	// StorageSwitchErrorsItems0
	// StorageSwitchErrorsItems0
	// type
	// Type
	// sfp_tx_power_below_warning_level
	// END DEBUGGING
	// StorageSwitchErrorsItems0TypeSfpTxPowerBelowWarningLevel captures enum value "sfp_tx_power_below_warning_level"
	StorageSwitchErrorsItems0TypeSfpTxPowerBelowWarningLevel string = "sfp_tx_power_below_warning_level"

	// BEGIN DEBUGGING
	// StorageSwitchErrorsItems0
	// StorageSwitchErrorsItems0
	// type
	// Type
	// sfp_tx_power_below_critical_level
	// END DEBUGGING
	// StorageSwitchErrorsItems0TypeSfpTxPowerBelowCriticalLevel captures enum value "sfp_tx_power_below_critical_level"
	StorageSwitchErrorsItems0TypeSfpTxPowerBelowCriticalLevel string = "sfp_tx_power_below_critical_level"

	// BEGIN DEBUGGING
	// StorageSwitchErrorsItems0
	// StorageSwitchErrorsItems0
	// type
	// Type
	// sfp_status_failed
	// END DEBUGGING
	// StorageSwitchErrorsItems0TypeSfpStatusFailed captures enum value "sfp_status_failed"
	StorageSwitchErrorsItems0TypeSfpStatusFailed string = "sfp_status_failed"

	// BEGIN DEBUGGING
	// StorageSwitchErrorsItems0
	// StorageSwitchErrorsItems0
	// type
	// Type
	// vsan_invalid_frame_delivery_configuration
	// END DEBUGGING
	// StorageSwitchErrorsItems0TypeVsanInvalidFrameDeliveryConfiguration captures enum value "vsan_invalid_frame_delivery_configuration"
	StorageSwitchErrorsItems0TypeVsanInvalidFrameDeliveryConfiguration string = "vsan_invalid_frame_delivery_configuration"

	// BEGIN DEBUGGING
	// StorageSwitchErrorsItems0
	// StorageSwitchErrorsItems0
	// type
	// Type
	// temp_sensor_status_unavailable
	// END DEBUGGING
	// StorageSwitchErrorsItems0TypeTempSensorStatusUnavailable captures enum value "temp_sensor_status_unavailable"
	StorageSwitchErrorsItems0TypeTempSensorStatusUnavailable string = "temp_sensor_status_unavailable"

	// BEGIN DEBUGGING
	// StorageSwitchErrorsItems0
	// StorageSwitchErrorsItems0
	// type
	// Type
	// fan_status_unavailable
	// END DEBUGGING
	// StorageSwitchErrorsItems0TypeFanStatusUnavailable captures enum value "fan_status_unavailable"
	StorageSwitchErrorsItems0TypeFanStatusUnavailable string = "fan_status_unavailable"

	// BEGIN DEBUGGING
	// StorageSwitchErrorsItems0
	// StorageSwitchErrorsItems0
	// type
	// Type
	// power_supply_inline_power_failed
	// END DEBUGGING
	// StorageSwitchErrorsItems0TypePowerSupplyInlinePowerFailed captures enum value "power_supply_inline_power_failed"
	StorageSwitchErrorsItems0TypePowerSupplyInlinePowerFailed string = "power_supply_inline_power_failed"

	// BEGIN DEBUGGING
	// StorageSwitchErrorsItems0
	// StorageSwitchErrorsItems0
	// type
	// Type
	// power_supply_status_unavailable
	// END DEBUGGING
	// StorageSwitchErrorsItems0TypePowerSupplyStatusUnavailable captures enum value "power_supply_status_unavailable"
	StorageSwitchErrorsItems0TypePowerSupplyStatusUnavailable string = "power_supply_status_unavailable"

	// BEGIN DEBUGGING
	// StorageSwitchErrorsItems0
	// StorageSwitchErrorsItems0
	// type
	// Type
	// unknown
	// END DEBUGGING
	// StorageSwitchErrorsItems0TypeUnknown captures enum value "unknown"
	StorageSwitchErrorsItems0TypeUnknown string = "unknown"

	// BEGIN DEBUGGING
	// StorageSwitchErrorsItems0
	// StorageSwitchErrorsItems0
	// type
	// Type
	// power_supply_off_env_other
	// END DEBUGGING
	// StorageSwitchErrorsItems0TypePowerSupplyOffEnvOther captures enum value "power_supply_off_env_other"
	StorageSwitchErrorsItems0TypePowerSupplyOffEnvOther string = "power_supply_off_env_other"

	// BEGIN DEBUGGING
	// StorageSwitchErrorsItems0
	// StorageSwitchErrorsItems0
	// type
	// Type
	// power_supply_off_admin
	// END DEBUGGING
	// StorageSwitchErrorsItems0TypePowerSupplyOffAdmin captures enum value "power_supply_off_admin"
	StorageSwitchErrorsItems0TypePowerSupplyOffAdmin string = "power_supply_off_admin"

	// BEGIN DEBUGGING
	// StorageSwitchErrorsItems0
	// StorageSwitchErrorsItems0
	// type
	// Type
	// power_supply_off_denied
	// END DEBUGGING
	// StorageSwitchErrorsItems0TypePowerSupplyOffDenied captures enum value "power_supply_off_denied"
	StorageSwitchErrorsItems0TypePowerSupplyOffDenied string = "power_supply_off_denied"

	// BEGIN DEBUGGING
	// StorageSwitchErrorsItems0
	// StorageSwitchErrorsItems0
	// type
	// Type
	// power_supply_off_env_power
	// END DEBUGGING
	// StorageSwitchErrorsItems0TypePowerSupplyOffEnvPower captures enum value "power_supply_off_env_power"
	StorageSwitchErrorsItems0TypePowerSupplyOffEnvPower string = "power_supply_off_env_power"

	// BEGIN DEBUGGING
	// StorageSwitchErrorsItems0
	// StorageSwitchErrorsItems0
	// type
	// Type
	// power_supply_off_env_temp
	// END DEBUGGING
	// StorageSwitchErrorsItems0TypePowerSupplyOffEnvTemp captures enum value "power_supply_off_env_temp"
	StorageSwitchErrorsItems0TypePowerSupplyOffEnvTemp string = "power_supply_off_env_temp"

	// BEGIN DEBUGGING
	// StorageSwitchErrorsItems0
	// StorageSwitchErrorsItems0
	// type
	// Type
	// power_supply_off_env_fan
	// END DEBUGGING
	// StorageSwitchErrorsItems0TypePowerSupplyOffEnvFan captures enum value "power_supply_off_env_fan"
	StorageSwitchErrorsItems0TypePowerSupplyOffEnvFan string = "power_supply_off_env_fan"

	// BEGIN DEBUGGING
	// StorageSwitchErrorsItems0
	// StorageSwitchErrorsItems0
	// type
	// Type
	// power_supply_on_but_fan_fail
	// END DEBUGGING
	// StorageSwitchErrorsItems0TypePowerSupplyOnButFanFail captures enum value "power_supply_on_but_fan_fail"
	StorageSwitchErrorsItems0TypePowerSupplyOnButFanFail string = "power_supply_on_but_fan_fail"

	// BEGIN DEBUGGING
	// StorageSwitchErrorsItems0
	// StorageSwitchErrorsItems0
	// type
	// Type
	// power_supply_off_cooling
	// END DEBUGGING
	// StorageSwitchErrorsItems0TypePowerSupplyOffCooling captures enum value "power_supply_off_cooling"
	StorageSwitchErrorsItems0TypePowerSupplyOffCooling string = "power_supply_off_cooling"

	// BEGIN DEBUGGING
	// StorageSwitchErrorsItems0
	// StorageSwitchErrorsItems0
	// type
	// Type
	// power_supply_off_connector_rating
	// END DEBUGGING
	// StorageSwitchErrorsItems0TypePowerSupplyOffConnectorRating captures enum value "power_supply_off_connector_rating"
	StorageSwitchErrorsItems0TypePowerSupplyOffConnectorRating string = "power_supply_off_connector_rating"

	// BEGIN DEBUGGING
	// StorageSwitchErrorsItems0
	// StorageSwitchErrorsItems0
	// type
	// Type
	// e_ports_down
	// END DEBUGGING
	// StorageSwitchErrorsItems0TypeEPortsDown captures enum value "e_ports_down"
	StorageSwitchErrorsItems0TypeEPortsDown string = "e_ports_down"

	// BEGIN DEBUGGING
	// StorageSwitchErrorsItems0
	// StorageSwitchErrorsItems0
	// type
	// Type
	// snmpv3_user_not_configured
	// END DEBUGGING
	// StorageSwitchErrorsItems0TypeSnmpv3UserNotConfigured captures enum value "snmpv3_user_not_configured"
	StorageSwitchErrorsItems0TypeSnmpv3UserNotConfigured string = "snmpv3_user_not_configured"

	// BEGIN DEBUGGING
	// StorageSwitchErrorsItems0
	// StorageSwitchErrorsItems0
	// type
	// Type
	// incomplete_snmp_data_refresh
	// END DEBUGGING
	// StorageSwitchErrorsItems0TypeIncompleteSnmpDataRefresh captures enum value "incomplete_snmp_data_refresh"
	StorageSwitchErrorsItems0TypeIncompleteSnmpDataRefresh string = "incomplete_snmp_data_refresh"
)

// prop value enum
func (m *StorageSwitchErrorsItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, storageSwitchErrorsItems0TypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StorageSwitchErrorsItems0) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this storage switch errors items0 based on the context it is used
func (m *StorageSwitchErrorsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateComponent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReason(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageSwitchErrorsItems0) contextValidateComponent(ctx context.Context, formats strfmt.Registry) error {

	if m.Component != nil {
		if err := m.Component.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("component")
			}
			return err
		}
	}

	return nil
}

func (m *StorageSwitchErrorsItems0) contextValidateReason(ctx context.Context, formats strfmt.Registry) error {

	if m.Reason != nil {
		if err := m.Reason.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reason")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StorageSwitchErrorsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageSwitchErrorsItems0) UnmarshalBinary(b []byte) error {
	var res StorageSwitchErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StorageSwitchErrorsItems0Component storage switch errors items0 component
//
// swagger:model StorageSwitchErrorsItems0Component
type StorageSwitchErrorsItems0Component struct {

	// Error component ID
	ID int64 `json:"id,omitempty"`

	// Error component name
	Name string `json:"name,omitempty"`
}

// Validate validates this storage switch errors items0 component
func (m *StorageSwitchErrorsItems0Component) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this storage switch errors items0 component based on context it is used
func (m *StorageSwitchErrorsItems0Component) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StorageSwitchErrorsItems0Component) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageSwitchErrorsItems0Component) UnmarshalBinary(b []byte) error {
	var res StorageSwitchErrorsItems0Component
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StorageSwitchFansItems0 storage switch fans items0
//
// swagger:model StorageSwitchFansItems0
type StorageSwitchFansItems0 struct {

	// Storage switch fan name
	Name string `json:"name,omitempty"`

	// Storage switch fan speed
	Speed int64 `json:"speed,omitempty"`

	// Storage switch fan state
	// Enum: [ok error]
	State string `json:"state,omitempty"`
}

// Validate validates this storage switch fans items0
func (m *StorageSwitchFansItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var storageSwitchFansItems0TypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ok","error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageSwitchFansItems0TypeStatePropEnum = append(storageSwitchFansItems0TypeStatePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// StorageSwitchFansItems0
	// StorageSwitchFansItems0
	// state
	// State
	// ok
	// END DEBUGGING
	// StorageSwitchFansItems0StateOk captures enum value "ok"
	StorageSwitchFansItems0StateOk string = "ok"

	// BEGIN DEBUGGING
	// StorageSwitchFansItems0
	// StorageSwitchFansItems0
	// state
	// State
	// error
	// END DEBUGGING
	// StorageSwitchFansItems0StateError captures enum value "error"
	StorageSwitchFansItems0StateError string = "error"
)

// prop value enum
func (m *StorageSwitchFansItems0) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, storageSwitchFansItems0TypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StorageSwitchFansItems0) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this storage switch fans items0 based on context it is used
func (m *StorageSwitchFansItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StorageSwitchFansItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageSwitchFansItems0) UnmarshalBinary(b []byte) error {
	var res StorageSwitchFansItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StorageSwitchPathsItems0 storage switch paths items0
//
// swagger:model StorageSwitchPathsItems0
type StorageSwitchPathsItems0 struct {

	// adapter
	Adapter *StorageSwitchPathsItems0Adapter `json:"adapter,omitempty"`

	// node
	Node *StorageSwitchPathsItems0Node `json:"node,omitempty"`

	// port
	Port *StorageSwitchPathsItems0Port `json:"port,omitempty"`
}

// Validate validates this storage switch paths items0
func (m *StorageSwitchPathsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdapter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageSwitchPathsItems0) validateAdapter(formats strfmt.Registry) error {
	if swag.IsZero(m.Adapter) { // not required
		return nil
	}

	if m.Adapter != nil {
		if err := m.Adapter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adapter")
			}
			return err
		}
	}

	return nil
}

func (m *StorageSwitchPathsItems0) validateNode(formats strfmt.Registry) error {
	if swag.IsZero(m.Node) { // not required
		return nil
	}

	if m.Node != nil {
		if err := m.Node.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node")
			}
			return err
		}
	}

	return nil
}

func (m *StorageSwitchPathsItems0) validatePort(formats strfmt.Registry) error {
	if swag.IsZero(m.Port) { // not required
		return nil
	}

	if m.Port != nil {
		if err := m.Port.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("port")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this storage switch paths items0 based on the context it is used
func (m *StorageSwitchPathsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdapter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePort(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageSwitchPathsItems0) contextValidateAdapter(ctx context.Context, formats strfmt.Registry) error {

	if m.Adapter != nil {
		if err := m.Adapter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adapter")
			}
			return err
		}
	}

	return nil
}

func (m *StorageSwitchPathsItems0) contextValidateNode(ctx context.Context, formats strfmt.Registry) error {

	if m.Node != nil {
		if err := m.Node.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node")
			}
			return err
		}
	}

	return nil
}

func (m *StorageSwitchPathsItems0) contextValidatePort(ctx context.Context, formats strfmt.Registry) error {

	if m.Port != nil {
		if err := m.Port.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("port")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StorageSwitchPathsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageSwitchPathsItems0) UnmarshalBinary(b []byte) error {
	var res StorageSwitchPathsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StorageSwitchPathsItems0Adapter storage switch paths items0 adapter
//
// swagger:model StorageSwitchPathsItems0Adapter
type StorageSwitchPathsItems0Adapter struct {

	// Node adapter name
	Name string `json:"name,omitempty"`

	// Node adapter type
	// Enum: [unknown fcp_initiator fc_vi fcp_target]
	Type string `json:"type,omitempty"`

	// Node adapter world wide name
	Wwn string `json:"wwn,omitempty"`
}

// Validate validates this storage switch paths items0 adapter
func (m *StorageSwitchPathsItems0Adapter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var storageSwitchPathsItems0AdapterTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["unknown","fcp_initiator","fc_vi","fcp_target"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageSwitchPathsItems0AdapterTypeTypePropEnum = append(storageSwitchPathsItems0AdapterTypeTypePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// StorageSwitchPathsItems0Adapter
	// StorageSwitchPathsItems0Adapter
	// type
	// Type
	// unknown
	// END DEBUGGING
	// StorageSwitchPathsItems0AdapterTypeUnknown captures enum value "unknown"
	StorageSwitchPathsItems0AdapterTypeUnknown string = "unknown"

	// BEGIN DEBUGGING
	// StorageSwitchPathsItems0Adapter
	// StorageSwitchPathsItems0Adapter
	// type
	// Type
	// fcp_initiator
	// END DEBUGGING
	// StorageSwitchPathsItems0AdapterTypeFcpInitiator captures enum value "fcp_initiator"
	StorageSwitchPathsItems0AdapterTypeFcpInitiator string = "fcp_initiator"

	// BEGIN DEBUGGING
	// StorageSwitchPathsItems0Adapter
	// StorageSwitchPathsItems0Adapter
	// type
	// Type
	// fc_vi
	// END DEBUGGING
	// StorageSwitchPathsItems0AdapterTypeFcVi captures enum value "fc_vi"
	StorageSwitchPathsItems0AdapterTypeFcVi string = "fc_vi"

	// BEGIN DEBUGGING
	// StorageSwitchPathsItems0Adapter
	// StorageSwitchPathsItems0Adapter
	// type
	// Type
	// fcp_target
	// END DEBUGGING
	// StorageSwitchPathsItems0AdapterTypeFcpTarget captures enum value "fcp_target"
	StorageSwitchPathsItems0AdapterTypeFcpTarget string = "fcp_target"
)

// prop value enum
func (m *StorageSwitchPathsItems0Adapter) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, storageSwitchPathsItems0AdapterTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StorageSwitchPathsItems0Adapter) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("adapter"+"."+"type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this storage switch paths items0 adapter based on context it is used
func (m *StorageSwitchPathsItems0Adapter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StorageSwitchPathsItems0Adapter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageSwitchPathsItems0Adapter) UnmarshalBinary(b []byte) error {
	var res StorageSwitchPathsItems0Adapter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StorageSwitchPathsItems0Node storage switch paths items0 node
//
// swagger:model StorageSwitchPathsItems0Node
type StorageSwitchPathsItems0Node struct {

	// links
	Links *StorageSwitchPathsItems0NodeLinks `json:"_links,omitempty"`

	// name
	// Example: node1
	Name string `json:"name,omitempty"`

	// uuid
	// Example: 1cd8a442-86d1-11e0-ae1c-123478563412
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this storage switch paths items0 node
func (m *StorageSwitchPathsItems0Node) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageSwitchPathsItems0Node) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this storage switch paths items0 node based on the context it is used
func (m *StorageSwitchPathsItems0Node) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageSwitchPathsItems0Node) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StorageSwitchPathsItems0Node) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageSwitchPathsItems0Node) UnmarshalBinary(b []byte) error {
	var res StorageSwitchPathsItems0Node
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StorageSwitchPathsItems0NodeLinks storage switch paths items0 node links
//
// swagger:model StorageSwitchPathsItems0NodeLinks
type StorageSwitchPathsItems0NodeLinks struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this storage switch paths items0 node links
func (m *StorageSwitchPathsItems0NodeLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageSwitchPathsItems0NodeLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this storage switch paths items0 node links based on the context it is used
func (m *StorageSwitchPathsItems0NodeLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageSwitchPathsItems0NodeLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StorageSwitchPathsItems0NodeLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageSwitchPathsItems0NodeLinks) UnmarshalBinary(b []byte) error {
	var res StorageSwitchPathsItems0NodeLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StorageSwitchPathsItems0Port storage switch paths items0 port
//
// swagger:model StorageSwitchPathsItems0Port
type StorageSwitchPathsItems0Port struct {

	// Storage switch port name
	Name string `json:"name,omitempty"`

	// Storage switch port speed, in Gbps
	Speed int64 `json:"speed,omitempty"`
}

// Validate validates this storage switch paths items0 port
func (m *StorageSwitchPathsItems0Port) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this storage switch paths items0 port based on context it is used
func (m *StorageSwitchPathsItems0Port) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StorageSwitchPathsItems0Port) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageSwitchPathsItems0Port) UnmarshalBinary(b []byte) error {
	var res StorageSwitchPathsItems0Port
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StorageSwitchPortsItems0 storage switch ports items0
//
// swagger:model StorageSwitchPortsItems0
type StorageSwitchPortsItems0 struct {

	// Indicates whether the storage switch port is enabled.
	Enabled bool `json:"enabled,omitempty"`

	// Storage switch port mode
	// Enum: [unknown auto f_port fl_port e_port te_port u_port g_port other ex_port d_port sim_port ve_port ae_port af_port]
	Mode string `json:"mode,omitempty"`

	// Storage switch port name
	Name string `json:"name,omitempty"`

	// sfp
	Sfp *StorageSwitchPortsItems0Sfp `json:"sfp,omitempty"`

	// Storage switch port speed, in Gbps
	Speed int64 `json:"speed,omitempty"`

	// Storage switch port state
	// Enum: [error online offline]
	State string `json:"state,omitempty"`

	// Storage switch port world wide name
	Wwn string `json:"wwn,omitempty"`
}

// Validate validates this storage switch ports items0
func (m *StorageSwitchPortsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSfp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var storageSwitchPortsItems0TypeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["unknown","auto","f_port","fl_port","e_port","te_port","u_port","g_port","other","ex_port","d_port","sim_port","ve_port","ae_port","af_port"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageSwitchPortsItems0TypeModePropEnum = append(storageSwitchPortsItems0TypeModePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// StorageSwitchPortsItems0
	// StorageSwitchPortsItems0
	// mode
	// Mode
	// unknown
	// END DEBUGGING
	// StorageSwitchPortsItems0ModeUnknown captures enum value "unknown"
	StorageSwitchPortsItems0ModeUnknown string = "unknown"

	// BEGIN DEBUGGING
	// StorageSwitchPortsItems0
	// StorageSwitchPortsItems0
	// mode
	// Mode
	// auto
	// END DEBUGGING
	// StorageSwitchPortsItems0ModeAuto captures enum value "auto"
	StorageSwitchPortsItems0ModeAuto string = "auto"

	// BEGIN DEBUGGING
	// StorageSwitchPortsItems0
	// StorageSwitchPortsItems0
	// mode
	// Mode
	// f_port
	// END DEBUGGING
	// StorageSwitchPortsItems0ModeFPort captures enum value "f_port"
	StorageSwitchPortsItems0ModeFPort string = "f_port"

	// BEGIN DEBUGGING
	// StorageSwitchPortsItems0
	// StorageSwitchPortsItems0
	// mode
	// Mode
	// fl_port
	// END DEBUGGING
	// StorageSwitchPortsItems0ModeFlPort captures enum value "fl_port"
	StorageSwitchPortsItems0ModeFlPort string = "fl_port"

	// BEGIN DEBUGGING
	// StorageSwitchPortsItems0
	// StorageSwitchPortsItems0
	// mode
	// Mode
	// e_port
	// END DEBUGGING
	// StorageSwitchPortsItems0ModeEPort captures enum value "e_port"
	StorageSwitchPortsItems0ModeEPort string = "e_port"

	// BEGIN DEBUGGING
	// StorageSwitchPortsItems0
	// StorageSwitchPortsItems0
	// mode
	// Mode
	// te_port
	// END DEBUGGING
	// StorageSwitchPortsItems0ModeTePort captures enum value "te_port"
	StorageSwitchPortsItems0ModeTePort string = "te_port"

	// BEGIN DEBUGGING
	// StorageSwitchPortsItems0
	// StorageSwitchPortsItems0
	// mode
	// Mode
	// u_port
	// END DEBUGGING
	// StorageSwitchPortsItems0ModeUPort captures enum value "u_port"
	StorageSwitchPortsItems0ModeUPort string = "u_port"

	// BEGIN DEBUGGING
	// StorageSwitchPortsItems0
	// StorageSwitchPortsItems0
	// mode
	// Mode
	// g_port
	// END DEBUGGING
	// StorageSwitchPortsItems0ModeGPort captures enum value "g_port"
	StorageSwitchPortsItems0ModeGPort string = "g_port"

	// BEGIN DEBUGGING
	// StorageSwitchPortsItems0
	// StorageSwitchPortsItems0
	// mode
	// Mode
	// other
	// END DEBUGGING
	// StorageSwitchPortsItems0ModeOther captures enum value "other"
	StorageSwitchPortsItems0ModeOther string = "other"

	// BEGIN DEBUGGING
	// StorageSwitchPortsItems0
	// StorageSwitchPortsItems0
	// mode
	// Mode
	// ex_port
	// END DEBUGGING
	// StorageSwitchPortsItems0ModeExPort captures enum value "ex_port"
	StorageSwitchPortsItems0ModeExPort string = "ex_port"

	// BEGIN DEBUGGING
	// StorageSwitchPortsItems0
	// StorageSwitchPortsItems0
	// mode
	// Mode
	// d_port
	// END DEBUGGING
	// StorageSwitchPortsItems0ModeDPort captures enum value "d_port"
	StorageSwitchPortsItems0ModeDPort string = "d_port"

	// BEGIN DEBUGGING
	// StorageSwitchPortsItems0
	// StorageSwitchPortsItems0
	// mode
	// Mode
	// sim_port
	// END DEBUGGING
	// StorageSwitchPortsItems0ModeSimPort captures enum value "sim_port"
	StorageSwitchPortsItems0ModeSimPort string = "sim_port"

	// BEGIN DEBUGGING
	// StorageSwitchPortsItems0
	// StorageSwitchPortsItems0
	// mode
	// Mode
	// ve_port
	// END DEBUGGING
	// StorageSwitchPortsItems0ModeVePort captures enum value "ve_port"
	StorageSwitchPortsItems0ModeVePort string = "ve_port"

	// BEGIN DEBUGGING
	// StorageSwitchPortsItems0
	// StorageSwitchPortsItems0
	// mode
	// Mode
	// ae_port
	// END DEBUGGING
	// StorageSwitchPortsItems0ModeAePort captures enum value "ae_port"
	StorageSwitchPortsItems0ModeAePort string = "ae_port"

	// BEGIN DEBUGGING
	// StorageSwitchPortsItems0
	// StorageSwitchPortsItems0
	// mode
	// Mode
	// af_port
	// END DEBUGGING
	// StorageSwitchPortsItems0ModeAfPort captures enum value "af_port"
	StorageSwitchPortsItems0ModeAfPort string = "af_port"
)

// prop value enum
func (m *StorageSwitchPortsItems0) validateModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, storageSwitchPortsItems0TypeModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StorageSwitchPortsItems0) validateMode(formats strfmt.Registry) error {
	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	// value enum
	if err := m.validateModeEnum("mode", "body", m.Mode); err != nil {
		return err
	}

	return nil
}

func (m *StorageSwitchPortsItems0) validateSfp(formats strfmt.Registry) error {
	if swag.IsZero(m.Sfp) { // not required
		return nil
	}

	if m.Sfp != nil {
		if err := m.Sfp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sfp")
			}
			return err
		}
	}

	return nil
}

var storageSwitchPortsItems0TypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["error","online","offline"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageSwitchPortsItems0TypeStatePropEnum = append(storageSwitchPortsItems0TypeStatePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// StorageSwitchPortsItems0
	// StorageSwitchPortsItems0
	// state
	// State
	// error
	// END DEBUGGING
	// StorageSwitchPortsItems0StateError captures enum value "error"
	StorageSwitchPortsItems0StateError string = "error"

	// BEGIN DEBUGGING
	// StorageSwitchPortsItems0
	// StorageSwitchPortsItems0
	// state
	// State
	// online
	// END DEBUGGING
	// StorageSwitchPortsItems0StateOnline captures enum value "online"
	StorageSwitchPortsItems0StateOnline string = "online"

	// BEGIN DEBUGGING
	// StorageSwitchPortsItems0
	// StorageSwitchPortsItems0
	// state
	// State
	// offline
	// END DEBUGGING
	// StorageSwitchPortsItems0StateOffline captures enum value "offline"
	StorageSwitchPortsItems0StateOffline string = "offline"
)

// prop value enum
func (m *StorageSwitchPortsItems0) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, storageSwitchPortsItems0TypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StorageSwitchPortsItems0) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this storage switch ports items0 based on the context it is used
func (m *StorageSwitchPortsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSfp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageSwitchPortsItems0) contextValidateSfp(ctx context.Context, formats strfmt.Registry) error {

	if m.Sfp != nil {
		if err := m.Sfp.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sfp")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StorageSwitchPortsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageSwitchPortsItems0) UnmarshalBinary(b []byte) error {
	var res StorageSwitchPortsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StorageSwitchPortsItems0Sfp storage switch ports items0 sfp
//
// swagger:model StorageSwitchPortsItems0Sfp
type StorageSwitchPortsItems0Sfp struct {

	// Storage switch port SFP serial number
	SerialNumber string `json:"serial_number,omitempty"`

	// Storage switch port SFP transmitter type
	// Enum: [unknown long_wave_laser short_wave_laser long_wave_laser_cost_reduced electrical ten_gig_base_sr ten_gig_base_lr ten_gig_base_er ten_gig_base_lx4 ten_gig_base_sw ten_gig_base_lw ten_gig_base_ew]
	TransmitterType string `json:"transmitter_type,omitempty"`

	// Storage switch port SFP type
	// Enum: [unknown other gbic embedded glm gbic_with_serial_id gbic_without_serial_id sfp_with_serial_id sfp_without_serial_id xfp x2_short x2_medium x2_tall xpak_short xpak_medium xpak_tall xenpak sfp_dw_dm qsfp x2_dw_dm gbic_not_installed small_form_factor]
	Type string `json:"type,omitempty"`
}

// Validate validates this storage switch ports items0 sfp
func (m *StorageSwitchPortsItems0Sfp) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTransmitterType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var storageSwitchPortsItems0SfpTypeTransmitterTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["unknown","long_wave_laser","short_wave_laser","long_wave_laser_cost_reduced","electrical","ten_gig_base_sr","ten_gig_base_lr","ten_gig_base_er","ten_gig_base_lx4","ten_gig_base_sw","ten_gig_base_lw","ten_gig_base_ew"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageSwitchPortsItems0SfpTypeTransmitterTypePropEnum = append(storageSwitchPortsItems0SfpTypeTransmitterTypePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// StorageSwitchPortsItems0Sfp
	// StorageSwitchPortsItems0Sfp
	// transmitter_type
	// TransmitterType
	// unknown
	// END DEBUGGING
	// StorageSwitchPortsItems0SfpTransmitterTypeUnknown captures enum value "unknown"
	StorageSwitchPortsItems0SfpTransmitterTypeUnknown string = "unknown"

	// BEGIN DEBUGGING
	// StorageSwitchPortsItems0Sfp
	// StorageSwitchPortsItems0Sfp
	// transmitter_type
	// TransmitterType
	// long_wave_laser
	// END DEBUGGING
	// StorageSwitchPortsItems0SfpTransmitterTypeLongWaveLaser captures enum value "long_wave_laser"
	StorageSwitchPortsItems0SfpTransmitterTypeLongWaveLaser string = "long_wave_laser"

	// BEGIN DEBUGGING
	// StorageSwitchPortsItems0Sfp
	// StorageSwitchPortsItems0Sfp
	// transmitter_type
	// TransmitterType
	// short_wave_laser
	// END DEBUGGING
	// StorageSwitchPortsItems0SfpTransmitterTypeShortWaveLaser captures enum value "short_wave_laser"
	StorageSwitchPortsItems0SfpTransmitterTypeShortWaveLaser string = "short_wave_laser"

	// BEGIN DEBUGGING
	// StorageSwitchPortsItems0Sfp
	// StorageSwitchPortsItems0Sfp
	// transmitter_type
	// TransmitterType
	// long_wave_laser_cost_reduced
	// END DEBUGGING
	// StorageSwitchPortsItems0SfpTransmitterTypeLongWaveLaserCostReduced captures enum value "long_wave_laser_cost_reduced"
	StorageSwitchPortsItems0SfpTransmitterTypeLongWaveLaserCostReduced string = "long_wave_laser_cost_reduced"

	// BEGIN DEBUGGING
	// StorageSwitchPortsItems0Sfp
	// StorageSwitchPortsItems0Sfp
	// transmitter_type
	// TransmitterType
	// electrical
	// END DEBUGGING
	// StorageSwitchPortsItems0SfpTransmitterTypeElectrical captures enum value "electrical"
	StorageSwitchPortsItems0SfpTransmitterTypeElectrical string = "electrical"

	// BEGIN DEBUGGING
	// StorageSwitchPortsItems0Sfp
	// StorageSwitchPortsItems0Sfp
	// transmitter_type
	// TransmitterType
	// ten_gig_base_sr
	// END DEBUGGING
	// StorageSwitchPortsItems0SfpTransmitterTypeTenGigBaseSr captures enum value "ten_gig_base_sr"
	StorageSwitchPortsItems0SfpTransmitterTypeTenGigBaseSr string = "ten_gig_base_sr"

	// BEGIN DEBUGGING
	// StorageSwitchPortsItems0Sfp
	// StorageSwitchPortsItems0Sfp
	// transmitter_type
	// TransmitterType
	// ten_gig_base_lr
	// END DEBUGGING
	// StorageSwitchPortsItems0SfpTransmitterTypeTenGigBaseLr captures enum value "ten_gig_base_lr"
	StorageSwitchPortsItems0SfpTransmitterTypeTenGigBaseLr string = "ten_gig_base_lr"

	// BEGIN DEBUGGING
	// StorageSwitchPortsItems0Sfp
	// StorageSwitchPortsItems0Sfp
	// transmitter_type
	// TransmitterType
	// ten_gig_base_er
	// END DEBUGGING
	// StorageSwitchPortsItems0SfpTransmitterTypeTenGigBaseEr captures enum value "ten_gig_base_er"
	StorageSwitchPortsItems0SfpTransmitterTypeTenGigBaseEr string = "ten_gig_base_er"

	// BEGIN DEBUGGING
	// StorageSwitchPortsItems0Sfp
	// StorageSwitchPortsItems0Sfp
	// transmitter_type
	// TransmitterType
	// ten_gig_base_lx4
	// END DEBUGGING
	// StorageSwitchPortsItems0SfpTransmitterTypeTenGigBaseLx4 captures enum value "ten_gig_base_lx4"
	StorageSwitchPortsItems0SfpTransmitterTypeTenGigBaseLx4 string = "ten_gig_base_lx4"

	// BEGIN DEBUGGING
	// StorageSwitchPortsItems0Sfp
	// StorageSwitchPortsItems0Sfp
	// transmitter_type
	// TransmitterType
	// ten_gig_base_sw
	// END DEBUGGING
	// StorageSwitchPortsItems0SfpTransmitterTypeTenGigBaseSw captures enum value "ten_gig_base_sw"
	StorageSwitchPortsItems0SfpTransmitterTypeTenGigBaseSw string = "ten_gig_base_sw"

	// BEGIN DEBUGGING
	// StorageSwitchPortsItems0Sfp
	// StorageSwitchPortsItems0Sfp
	// transmitter_type
	// TransmitterType
	// ten_gig_base_lw
	// END DEBUGGING
	// StorageSwitchPortsItems0SfpTransmitterTypeTenGigBaseLw captures enum value "ten_gig_base_lw"
	StorageSwitchPortsItems0SfpTransmitterTypeTenGigBaseLw string = "ten_gig_base_lw"

	// BEGIN DEBUGGING
	// StorageSwitchPortsItems0Sfp
	// StorageSwitchPortsItems0Sfp
	// transmitter_type
	// TransmitterType
	// ten_gig_base_ew
	// END DEBUGGING
	// StorageSwitchPortsItems0SfpTransmitterTypeTenGigBaseEw captures enum value "ten_gig_base_ew"
	StorageSwitchPortsItems0SfpTransmitterTypeTenGigBaseEw string = "ten_gig_base_ew"
)

// prop value enum
func (m *StorageSwitchPortsItems0Sfp) validateTransmitterTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, storageSwitchPortsItems0SfpTypeTransmitterTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StorageSwitchPortsItems0Sfp) validateTransmitterType(formats strfmt.Registry) error {
	if swag.IsZero(m.TransmitterType) { // not required
		return nil
	}

	// value enum
	if err := m.validateTransmitterTypeEnum("sfp"+"."+"transmitter_type", "body", m.TransmitterType); err != nil {
		return err
	}

	return nil
}

var storageSwitchPortsItems0SfpTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["unknown","other","gbic","embedded","glm","gbic_with_serial_id","gbic_without_serial_id","sfp_with_serial_id","sfp_without_serial_id","xfp","x2_short","x2_medium","x2_tall","xpak_short","xpak_medium","xpak_tall","xenpak","sfp_dw_dm","qsfp","x2_dw_dm","gbic_not_installed","small_form_factor"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageSwitchPortsItems0SfpTypeTypePropEnum = append(storageSwitchPortsItems0SfpTypeTypePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// StorageSwitchPortsItems0Sfp
	// StorageSwitchPortsItems0Sfp
	// type
	// Type
	// unknown
	// END DEBUGGING
	// StorageSwitchPortsItems0SfpTypeUnknown captures enum value "unknown"
	StorageSwitchPortsItems0SfpTypeUnknown string = "unknown"

	// BEGIN DEBUGGING
	// StorageSwitchPortsItems0Sfp
	// StorageSwitchPortsItems0Sfp
	// type
	// Type
	// other
	// END DEBUGGING
	// StorageSwitchPortsItems0SfpTypeOther captures enum value "other"
	StorageSwitchPortsItems0SfpTypeOther string = "other"

	// BEGIN DEBUGGING
	// StorageSwitchPortsItems0Sfp
	// StorageSwitchPortsItems0Sfp
	// type
	// Type
	// gbic
	// END DEBUGGING
	// StorageSwitchPortsItems0SfpTypeGbic captures enum value "gbic"
	StorageSwitchPortsItems0SfpTypeGbic string = "gbic"

	// BEGIN DEBUGGING
	// StorageSwitchPortsItems0Sfp
	// StorageSwitchPortsItems0Sfp
	// type
	// Type
	// embedded
	// END DEBUGGING
	// StorageSwitchPortsItems0SfpTypeEmbedded captures enum value "embedded"
	StorageSwitchPortsItems0SfpTypeEmbedded string = "embedded"

	// BEGIN DEBUGGING
	// StorageSwitchPortsItems0Sfp
	// StorageSwitchPortsItems0Sfp
	// type
	// Type
	// glm
	// END DEBUGGING
	// StorageSwitchPortsItems0SfpTypeGlm captures enum value "glm"
	StorageSwitchPortsItems0SfpTypeGlm string = "glm"

	// BEGIN DEBUGGING
	// StorageSwitchPortsItems0Sfp
	// StorageSwitchPortsItems0Sfp
	// type
	// Type
	// gbic_with_serial_id
	// END DEBUGGING
	// StorageSwitchPortsItems0SfpTypeGbicWithSerialID captures enum value "gbic_with_serial_id"
	StorageSwitchPortsItems0SfpTypeGbicWithSerialID string = "gbic_with_serial_id"

	// BEGIN DEBUGGING
	// StorageSwitchPortsItems0Sfp
	// StorageSwitchPortsItems0Sfp
	// type
	// Type
	// gbic_without_serial_id
	// END DEBUGGING
	// StorageSwitchPortsItems0SfpTypeGbicWithoutSerialID captures enum value "gbic_without_serial_id"
	StorageSwitchPortsItems0SfpTypeGbicWithoutSerialID string = "gbic_without_serial_id"

	// BEGIN DEBUGGING
	// StorageSwitchPortsItems0Sfp
	// StorageSwitchPortsItems0Sfp
	// type
	// Type
	// sfp_with_serial_id
	// END DEBUGGING
	// StorageSwitchPortsItems0SfpTypeSfpWithSerialID captures enum value "sfp_with_serial_id"
	StorageSwitchPortsItems0SfpTypeSfpWithSerialID string = "sfp_with_serial_id"

	// BEGIN DEBUGGING
	// StorageSwitchPortsItems0Sfp
	// StorageSwitchPortsItems0Sfp
	// type
	// Type
	// sfp_without_serial_id
	// END DEBUGGING
	// StorageSwitchPortsItems0SfpTypeSfpWithoutSerialID captures enum value "sfp_without_serial_id"
	StorageSwitchPortsItems0SfpTypeSfpWithoutSerialID string = "sfp_without_serial_id"

	// BEGIN DEBUGGING
	// StorageSwitchPortsItems0Sfp
	// StorageSwitchPortsItems0Sfp
	// type
	// Type
	// xfp
	// END DEBUGGING
	// StorageSwitchPortsItems0SfpTypeXfp captures enum value "xfp"
	StorageSwitchPortsItems0SfpTypeXfp string = "xfp"

	// BEGIN DEBUGGING
	// StorageSwitchPortsItems0Sfp
	// StorageSwitchPortsItems0Sfp
	// type
	// Type
	// x2_short
	// END DEBUGGING
	// StorageSwitchPortsItems0SfpTypeX2Short captures enum value "x2_short"
	StorageSwitchPortsItems0SfpTypeX2Short string = "x2_short"

	// BEGIN DEBUGGING
	// StorageSwitchPortsItems0Sfp
	// StorageSwitchPortsItems0Sfp
	// type
	// Type
	// x2_medium
	// END DEBUGGING
	// StorageSwitchPortsItems0SfpTypeX2Medium captures enum value "x2_medium"
	StorageSwitchPortsItems0SfpTypeX2Medium string = "x2_medium"

	// BEGIN DEBUGGING
	// StorageSwitchPortsItems0Sfp
	// StorageSwitchPortsItems0Sfp
	// type
	// Type
	// x2_tall
	// END DEBUGGING
	// StorageSwitchPortsItems0SfpTypeX2Tall captures enum value "x2_tall"
	StorageSwitchPortsItems0SfpTypeX2Tall string = "x2_tall"

	// BEGIN DEBUGGING
	// StorageSwitchPortsItems0Sfp
	// StorageSwitchPortsItems0Sfp
	// type
	// Type
	// xpak_short
	// END DEBUGGING
	// StorageSwitchPortsItems0SfpTypeXpakShort captures enum value "xpak_short"
	StorageSwitchPortsItems0SfpTypeXpakShort string = "xpak_short"

	// BEGIN DEBUGGING
	// StorageSwitchPortsItems0Sfp
	// StorageSwitchPortsItems0Sfp
	// type
	// Type
	// xpak_medium
	// END DEBUGGING
	// StorageSwitchPortsItems0SfpTypeXpakMedium captures enum value "xpak_medium"
	StorageSwitchPortsItems0SfpTypeXpakMedium string = "xpak_medium"

	// BEGIN DEBUGGING
	// StorageSwitchPortsItems0Sfp
	// StorageSwitchPortsItems0Sfp
	// type
	// Type
	// xpak_tall
	// END DEBUGGING
	// StorageSwitchPortsItems0SfpTypeXpakTall captures enum value "xpak_tall"
	StorageSwitchPortsItems0SfpTypeXpakTall string = "xpak_tall"

	// BEGIN DEBUGGING
	// StorageSwitchPortsItems0Sfp
	// StorageSwitchPortsItems0Sfp
	// type
	// Type
	// xenpak
	// END DEBUGGING
	// StorageSwitchPortsItems0SfpTypeXenpak captures enum value "xenpak"
	StorageSwitchPortsItems0SfpTypeXenpak string = "xenpak"

	// BEGIN DEBUGGING
	// StorageSwitchPortsItems0Sfp
	// StorageSwitchPortsItems0Sfp
	// type
	// Type
	// sfp_dw_dm
	// END DEBUGGING
	// StorageSwitchPortsItems0SfpTypeSfpDwDm captures enum value "sfp_dw_dm"
	StorageSwitchPortsItems0SfpTypeSfpDwDm string = "sfp_dw_dm"

	// BEGIN DEBUGGING
	// StorageSwitchPortsItems0Sfp
	// StorageSwitchPortsItems0Sfp
	// type
	// Type
	// qsfp
	// END DEBUGGING
	// StorageSwitchPortsItems0SfpTypeQsfp captures enum value "qsfp"
	StorageSwitchPortsItems0SfpTypeQsfp string = "qsfp"

	// BEGIN DEBUGGING
	// StorageSwitchPortsItems0Sfp
	// StorageSwitchPortsItems0Sfp
	// type
	// Type
	// x2_dw_dm
	// END DEBUGGING
	// StorageSwitchPortsItems0SfpTypeX2DwDm captures enum value "x2_dw_dm"
	StorageSwitchPortsItems0SfpTypeX2DwDm string = "x2_dw_dm"

	// BEGIN DEBUGGING
	// StorageSwitchPortsItems0Sfp
	// StorageSwitchPortsItems0Sfp
	// type
	// Type
	// gbic_not_installed
	// END DEBUGGING
	// StorageSwitchPortsItems0SfpTypeGbicNotInstalled captures enum value "gbic_not_installed"
	StorageSwitchPortsItems0SfpTypeGbicNotInstalled string = "gbic_not_installed"

	// BEGIN DEBUGGING
	// StorageSwitchPortsItems0Sfp
	// StorageSwitchPortsItems0Sfp
	// type
	// Type
	// small_form_factor
	// END DEBUGGING
	// StorageSwitchPortsItems0SfpTypeSmallFormFactor captures enum value "small_form_factor"
	StorageSwitchPortsItems0SfpTypeSmallFormFactor string = "small_form_factor"
)

// prop value enum
func (m *StorageSwitchPortsItems0Sfp) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, storageSwitchPortsItems0SfpTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StorageSwitchPortsItems0Sfp) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("sfp"+"."+"type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this storage switch ports items0 sfp based on context it is used
func (m *StorageSwitchPortsItems0Sfp) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StorageSwitchPortsItems0Sfp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageSwitchPortsItems0Sfp) UnmarshalBinary(b []byte) error {
	var res StorageSwitchPortsItems0Sfp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StorageSwitchPowerSupplyUnitsItems0 storage switch power supply units items0
//
// swagger:model StorageSwitchPowerSupplyUnitsItems0
type StorageSwitchPowerSupplyUnitsItems0 struct {

	// Power supply unit name
	Name string `json:"name,omitempty"`

	// Power supply unit state
	// Enum: [ok error]
	State string `json:"state,omitempty"`
}

// Validate validates this storage switch power supply units items0
func (m *StorageSwitchPowerSupplyUnitsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var storageSwitchPowerSupplyUnitsItems0TypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ok","error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageSwitchPowerSupplyUnitsItems0TypeStatePropEnum = append(storageSwitchPowerSupplyUnitsItems0TypeStatePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// StorageSwitchPowerSupplyUnitsItems0
	// StorageSwitchPowerSupplyUnitsItems0
	// state
	// State
	// ok
	// END DEBUGGING
	// StorageSwitchPowerSupplyUnitsItems0StateOk captures enum value "ok"
	StorageSwitchPowerSupplyUnitsItems0StateOk string = "ok"

	// BEGIN DEBUGGING
	// StorageSwitchPowerSupplyUnitsItems0
	// StorageSwitchPowerSupplyUnitsItems0
	// state
	// State
	// error
	// END DEBUGGING
	// StorageSwitchPowerSupplyUnitsItems0StateError captures enum value "error"
	StorageSwitchPowerSupplyUnitsItems0StateError string = "error"
)

// prop value enum
func (m *StorageSwitchPowerSupplyUnitsItems0) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, storageSwitchPowerSupplyUnitsItems0TypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StorageSwitchPowerSupplyUnitsItems0) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this storage switch power supply units items0 based on context it is used
func (m *StorageSwitchPowerSupplyUnitsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StorageSwitchPowerSupplyUnitsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageSwitchPowerSupplyUnitsItems0) UnmarshalBinary(b []byte) error {
	var res StorageSwitchPowerSupplyUnitsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StorageSwitchTemperatureSensorsItems0 storage switch temperature sensors items0
//
// swagger:model StorageSwitchTemperatureSensorsItems0
type StorageSwitchTemperatureSensorsItems0 struct {

	// Temperature sensor name
	Name string `json:"name,omitempty"`

	// Temperature sensor reading, in degrees celsius.
	Reading int64 `json:"reading,omitempty"`

	// Temperature sensor state
	// Enum: [error ok]
	State string `json:"state,omitempty"`
}

// Validate validates this storage switch temperature sensors items0
func (m *StorageSwitchTemperatureSensorsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var storageSwitchTemperatureSensorsItems0TypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["error","ok"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageSwitchTemperatureSensorsItems0TypeStatePropEnum = append(storageSwitchTemperatureSensorsItems0TypeStatePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// StorageSwitchTemperatureSensorsItems0
	// StorageSwitchTemperatureSensorsItems0
	// state
	// State
	// error
	// END DEBUGGING
	// StorageSwitchTemperatureSensorsItems0StateError captures enum value "error"
	StorageSwitchTemperatureSensorsItems0StateError string = "error"

	// BEGIN DEBUGGING
	// StorageSwitchTemperatureSensorsItems0
	// StorageSwitchTemperatureSensorsItems0
	// state
	// State
	// ok
	// END DEBUGGING
	// StorageSwitchTemperatureSensorsItems0StateOk captures enum value "ok"
	StorageSwitchTemperatureSensorsItems0StateOk string = "ok"
)

// prop value enum
func (m *StorageSwitchTemperatureSensorsItems0) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, storageSwitchTemperatureSensorsItems0TypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StorageSwitchTemperatureSensorsItems0) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this storage switch temperature sensors items0 based on context it is used
func (m *StorageSwitchTemperatureSensorsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StorageSwitchTemperatureSensorsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageSwitchTemperatureSensorsItems0) UnmarshalBinary(b []byte) error {
	var res StorageSwitchTemperatureSensorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StorageSwitchVsansItems0 storage switch vsans items0
//
// swagger:model StorageSwitchVsansItems0
type StorageSwitchVsansItems0 struct {

	// Storage switch VSAN ID
	ID int64 `json:"id,omitempty"`

	// Indicates whether in-order delivery is set for a zone.
	Iod bool `json:"iod,omitempty"`

	// Storage switch VSAN load balancing type
	LoadBalancingTypes string `json:"load_balancing_types,omitempty"`

	// Storage switch VSAN name
	Name string `json:"name,omitempty"`

	// Storage switch VSAN Port state
	// Enum: [ok error]
	State string `json:"state,omitempty"`
}

// Validate validates this storage switch vsans items0
func (m *StorageSwitchVsansItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var storageSwitchVsansItems0TypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ok","error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageSwitchVsansItems0TypeStatePropEnum = append(storageSwitchVsansItems0TypeStatePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// StorageSwitchVsansItems0
	// StorageSwitchVsansItems0
	// state
	// State
	// ok
	// END DEBUGGING
	// StorageSwitchVsansItems0StateOk captures enum value "ok"
	StorageSwitchVsansItems0StateOk string = "ok"

	// BEGIN DEBUGGING
	// StorageSwitchVsansItems0
	// StorageSwitchVsansItems0
	// state
	// State
	// error
	// END DEBUGGING
	// StorageSwitchVsansItems0StateError captures enum value "error"
	StorageSwitchVsansItems0StateError string = "error"
)

// prop value enum
func (m *StorageSwitchVsansItems0) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, storageSwitchVsansItems0TypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StorageSwitchVsansItems0) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this storage switch vsans items0 based on context it is used
func (m *StorageSwitchVsansItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StorageSwitchVsansItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageSwitchVsansItems0) UnmarshalBinary(b []byte) error {
	var res StorageSwitchVsansItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StorageSwitchZonesItems0 storage switch zones items0
//
// swagger:model StorageSwitchZonesItems0
type StorageSwitchZonesItems0 struct {

	// Storage switch zone ID
	ID int64 `json:"id,omitempty"`

	// Storage switch zone name
	Name string `json:"name,omitempty"`

	// port
	Port *StorageSwitchZonesItems0Port `json:"port,omitempty"`

	// Storage switch zone world wide name
	Wwn string `json:"wwn,omitempty"`
}

// Validate validates this storage switch zones items0
func (m *StorageSwitchZonesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageSwitchZonesItems0) validatePort(formats strfmt.Registry) error {
	if swag.IsZero(m.Port) { // not required
		return nil
	}

	if m.Port != nil {
		if err := m.Port.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("port")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this storage switch zones items0 based on the context it is used
func (m *StorageSwitchZonesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePort(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageSwitchZonesItems0) contextValidatePort(ctx context.Context, formats strfmt.Registry) error {

	if m.Port != nil {
		if err := m.Port.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("port")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StorageSwitchZonesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageSwitchZonesItems0) UnmarshalBinary(b []byte) error {
	var res StorageSwitchZonesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StorageSwitchZonesItems0Port storage switch zones items0 port
//
// swagger:model StorageSwitchZonesItems0Port
type StorageSwitchZonesItems0Port struct {

	// Storage switch zone port ID
	ID string `json:"id,omitempty"`

	// Storage switch zone port
	Name string `json:"name,omitempty"`
}

// Validate validates this storage switch zones items0 port
func (m *StorageSwitchZonesItems0Port) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this storage switch zones items0 port based on context it is used
func (m *StorageSwitchZonesItems0Port) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StorageSwitchZonesItems0Port) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageSwitchZonesItems0Port) UnmarshalBinary(b []byte) error {
	var res StorageSwitchZonesItems0Port
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
