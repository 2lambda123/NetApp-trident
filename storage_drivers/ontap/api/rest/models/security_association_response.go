// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SecurityAssociationResponse security association response
//
// swagger:model security_association_response
type SecurityAssociationResponse struct {

	// links
	Links *SecurityAssociationResponseLinks `json:"_links,omitempty"`

	// error
	Error *SecurityAssociationResponseError `json:"error,omitempty"`

	// Number of records
	// Example: 1
	NumRecords int64 `json:"num_records,omitempty"`

	// records
	Records []*SecurityAssociationResponseRecordsItems0 `json:"records,omitempty"`
}

// Validate validates this security association response
func (m *SecurityAssociationResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecords(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityAssociationResponse) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityAssociationResponse) validateError(formats strfmt.Registry) error {
	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if m.Error != nil {
		if err := m.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityAssociationResponse) validateRecords(formats strfmt.Registry) error {
	if swag.IsZero(m.Records) { // not required
		return nil
	}

	for i := 0; i < len(m.Records); i++ {
		if swag.IsZero(m.Records[i]) { // not required
			continue
		}

		if m.Records[i] != nil {
			if err := m.Records[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("records" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this security association response based on the context it is used
func (m *SecurityAssociationResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecords(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityAssociationResponse) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityAssociationResponse) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if m.Error != nil {
		if err := m.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityAssociationResponse) contextValidateRecords(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Records); i++ {

		if m.Records[i] != nil {
			if err := m.Records[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("records" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SecurityAssociationResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecurityAssociationResponse) UnmarshalBinary(b []byte) error {
	var res SecurityAssociationResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SecurityAssociationResponseError security association response error
//
// swagger:model SecurityAssociationResponseError
type SecurityAssociationResponseError struct {

	// Message arguments
	// Read Only: true
	Arguments []*ErrorArguments `json:"arguments,omitempty"`

	// Error code
	// Example: 4
	// Read Only: true
	Code string `json:"code,omitempty"`

	// Error message
	// Example: entry doesn't exist
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The target parameter that caused the error.
	// Example: uuid
	// Read Only: true
	Target string `json:"target,omitempty"`
}

// Validate validates this security association response error
func (m *SecurityAssociationResponseError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArguments(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityAssociationResponseError) validateArguments(formats strfmt.Registry) error {
	if swag.IsZero(m.Arguments) { // not required
		return nil
	}

	for i := 0; i < len(m.Arguments); i++ {
		if swag.IsZero(m.Arguments[i]) { // not required
			continue
		}

		if m.Arguments[i] != nil {
			if err := m.Arguments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("error" + "." + "arguments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this security association response error based on the context it is used
func (m *SecurityAssociationResponseError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArguments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTarget(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityAssociationResponseError) contextValidateArguments(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "error"+"."+"arguments", "body", []*ErrorArguments(m.Arguments)); err != nil {
		return err
	}

	for i := 0; i < len(m.Arguments); i++ {

		if m.Arguments[i] != nil {
			if err := m.Arguments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("error" + "." + "arguments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SecurityAssociationResponseError) contextValidateCode(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "error"+"."+"code", "body", string(m.Code)); err != nil {
		return err
	}

	return nil
}

func (m *SecurityAssociationResponseError) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "error"+"."+"message", "body", string(m.Message)); err != nil {
		return err
	}

	return nil
}

func (m *SecurityAssociationResponseError) contextValidateTarget(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "error"+"."+"target", "body", string(m.Target)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SecurityAssociationResponseError) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecurityAssociationResponseError) UnmarshalBinary(b []byte) error {
	var res SecurityAssociationResponseError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SecurityAssociationResponseLinks security association response links
//
// swagger:model SecurityAssociationResponseLinks
type SecurityAssociationResponseLinks struct {

	// next
	Next *Href `json:"next,omitempty"`

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this security association response links
func (m *SecurityAssociationResponseLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityAssociationResponseLinks) validateNext(formats strfmt.Registry) error {
	if swag.IsZero(m.Next) { // not required
		return nil
	}

	if m.Next != nil {
		if err := m.Next.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "next")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityAssociationResponseLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this security association response links based on the context it is used
func (m *SecurityAssociationResponseLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNext(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityAssociationResponseLinks) contextValidateNext(ctx context.Context, formats strfmt.Registry) error {

	if m.Next != nil {
		if err := m.Next.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "next")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityAssociationResponseLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SecurityAssociationResponseLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecurityAssociationResponseLinks) UnmarshalBinary(b []byte) error {
	var res SecurityAssociationResponseLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SecurityAssociationResponseRecordsItems0 Security association object for IPsec security association and IKE (Internet Key Exchange) security association.
//
// swagger:model SecurityAssociationResponseRecordsItems0
type SecurityAssociationResponseRecordsItems0 struct {

	// Cipher suite for the security association.
	// Enum: [suite_aescbc suiteb_gcm256 suiteb_gmac256]
	CipherSuite *string `json:"cipher_suite,omitempty"`

	// ike
	Ike *SecurityAssociationResponseRecordsItems0Ike `json:"ike,omitempty"`

	// ipsec
	Ipsec *SecurityAssociationResponseRecordsItems0Ipsec `json:"ipsec,omitempty"`

	// Lifetime for the security association in seconds.
	Lifetime int64 `json:"lifetime,omitempty"`

	// Local address of the security association.
	LocalAddress string `json:"local_address,omitempty"`

	// node
	Node *SecurityAssociationResponseRecordsItems0Node `json:"node,omitempty"`

	// Policy name for the security association.
	PolicyName string `json:"policy_name,omitempty"`

	// Remote address of the security association.
	RemoteAddress string `json:"remote_address,omitempty"`

	// scope
	Scope NetworkScopeReadonly `json:"scope,omitempty"`

	// svm
	Svm *SecurityAssociationResponseRecordsItems0Svm `json:"svm,omitempty"`

	// Type of security association, it can be IPsec or IKE (Internet Key Exchange).
	// Enum: [ipsec ike]
	Type *string `json:"type,omitempty"`

	// Unique identifier of the security association.
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this security association response records items0
func (m *SecurityAssociationResponseRecordsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCipherSuite(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIke(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIpsec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var securityAssociationResponseRecordsItems0TypeCipherSuitePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["suite_aescbc","suiteb_gcm256","suiteb_gmac256"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		securityAssociationResponseRecordsItems0TypeCipherSuitePropEnum = append(securityAssociationResponseRecordsItems0TypeCipherSuitePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// SecurityAssociationResponseRecordsItems0
	// SecurityAssociationResponseRecordsItems0
	// cipher_suite
	// CipherSuite
	// suite_aescbc
	// END DEBUGGING
	// SecurityAssociationResponseRecordsItems0CipherSuiteSuiteAescbc captures enum value "suite_aescbc"
	SecurityAssociationResponseRecordsItems0CipherSuiteSuiteAescbc string = "suite_aescbc"

	// BEGIN DEBUGGING
	// SecurityAssociationResponseRecordsItems0
	// SecurityAssociationResponseRecordsItems0
	// cipher_suite
	// CipherSuite
	// suiteb_gcm256
	// END DEBUGGING
	// SecurityAssociationResponseRecordsItems0CipherSuiteSuitebGcm256 captures enum value "suiteb_gcm256"
	SecurityAssociationResponseRecordsItems0CipherSuiteSuitebGcm256 string = "suiteb_gcm256"

	// BEGIN DEBUGGING
	// SecurityAssociationResponseRecordsItems0
	// SecurityAssociationResponseRecordsItems0
	// cipher_suite
	// CipherSuite
	// suiteb_gmac256
	// END DEBUGGING
	// SecurityAssociationResponseRecordsItems0CipherSuiteSuitebGmac256 captures enum value "suiteb_gmac256"
	SecurityAssociationResponseRecordsItems0CipherSuiteSuitebGmac256 string = "suiteb_gmac256"
)

// prop value enum
func (m *SecurityAssociationResponseRecordsItems0) validateCipherSuiteEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, securityAssociationResponseRecordsItems0TypeCipherSuitePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SecurityAssociationResponseRecordsItems0) validateCipherSuite(formats strfmt.Registry) error {
	if swag.IsZero(m.CipherSuite) { // not required
		return nil
	}

	// value enum
	if err := m.validateCipherSuiteEnum("cipher_suite", "body", *m.CipherSuite); err != nil {
		return err
	}

	return nil
}

func (m *SecurityAssociationResponseRecordsItems0) validateIke(formats strfmt.Registry) error {
	if swag.IsZero(m.Ike) { // not required
		return nil
	}

	if m.Ike != nil {
		if err := m.Ike.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ike")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityAssociationResponseRecordsItems0) validateIpsec(formats strfmt.Registry) error {
	if swag.IsZero(m.Ipsec) { // not required
		return nil
	}

	if m.Ipsec != nil {
		if err := m.Ipsec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipsec")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityAssociationResponseRecordsItems0) validateNode(formats strfmt.Registry) error {
	if swag.IsZero(m.Node) { // not required
		return nil
	}

	if m.Node != nil {
		if err := m.Node.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityAssociationResponseRecordsItems0) validateScope(formats strfmt.Registry) error {
	if swag.IsZero(m.Scope) { // not required
		return nil
	}

	if err := m.Scope.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("scope")
		}
		return err
	}

	return nil
}

func (m *SecurityAssociationResponseRecordsItems0) validateSvm(formats strfmt.Registry) error {
	if swag.IsZero(m.Svm) { // not required
		return nil
	}

	if m.Svm != nil {
		if err := m.Svm.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svm")
			}
			return err
		}
	}

	return nil
}

var securityAssociationResponseRecordsItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ipsec","ike"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		securityAssociationResponseRecordsItems0TypeTypePropEnum = append(securityAssociationResponseRecordsItems0TypeTypePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// SecurityAssociationResponseRecordsItems0
	// SecurityAssociationResponseRecordsItems0
	// type
	// Type
	// ipsec
	// END DEBUGGING
	// SecurityAssociationResponseRecordsItems0TypeIpsec captures enum value "ipsec"
	SecurityAssociationResponseRecordsItems0TypeIpsec string = "ipsec"

	// BEGIN DEBUGGING
	// SecurityAssociationResponseRecordsItems0
	// SecurityAssociationResponseRecordsItems0
	// type
	// Type
	// ike
	// END DEBUGGING
	// SecurityAssociationResponseRecordsItems0TypeIke captures enum value "ike"
	SecurityAssociationResponseRecordsItems0TypeIke string = "ike"
)

// prop value enum
func (m *SecurityAssociationResponseRecordsItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, securityAssociationResponseRecordsItems0TypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SecurityAssociationResponseRecordsItems0) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this security association response records items0 based on the context it is used
func (m *SecurityAssociationResponseRecordsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIke(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIpsec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScope(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSvm(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityAssociationResponseRecordsItems0) contextValidateIke(ctx context.Context, formats strfmt.Registry) error {

	if m.Ike != nil {
		if err := m.Ike.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ike")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityAssociationResponseRecordsItems0) contextValidateIpsec(ctx context.Context, formats strfmt.Registry) error {

	if m.Ipsec != nil {
		if err := m.Ipsec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipsec")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityAssociationResponseRecordsItems0) contextValidateNode(ctx context.Context, formats strfmt.Registry) error {

	if m.Node != nil {
		if err := m.Node.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityAssociationResponseRecordsItems0) contextValidateScope(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Scope.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("scope")
		}
		return err
	}

	return nil
}

func (m *SecurityAssociationResponseRecordsItems0) contextValidateSvm(ctx context.Context, formats strfmt.Registry) error {

	if m.Svm != nil {
		if err := m.Svm.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svm")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SecurityAssociationResponseRecordsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecurityAssociationResponseRecordsItems0) UnmarshalBinary(b []byte) error {
	var res SecurityAssociationResponseRecordsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SecurityAssociationResponseRecordsItems0Ike Objects containing parameters specific to IKE (Internet Key Exchange) security association.
//
// swagger:model SecurityAssociationResponseRecordsItems0Ike
type SecurityAssociationResponseRecordsItems0Ike struct {

	// Authentication method for internet key exchange protocol.
	// Enum: [none psk cert]
	Authentication *string `json:"authentication,omitempty"`

	// Initiator's security parameter index for the IKE security association.
	InitiatorSecurityParameterIndex string `json:"initiator_security_parameter_index,omitempty"`

	// Indicates whether or not IKE has been initiated by this node.
	IsInitiator bool `json:"is_initiator,omitempty"`

	// Responder's security parameter index for the IKE security association.
	ResponderSecurityParameterIndex string `json:"responder_security_parameter_index,omitempty"`

	// State of the IKE connection.
	// Enum: [none connecting established dead_peer_probe]
	State string `json:"state,omitempty"`

	// Internet key exchange protocol version.
	Version int64 `json:"version,omitempty"`
}

// Validate validates this security association response records items0 ike
func (m *SecurityAssociationResponseRecordsItems0Ike) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthentication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var securityAssociationResponseRecordsItems0IkeTypeAuthenticationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["none","psk","cert"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		securityAssociationResponseRecordsItems0IkeTypeAuthenticationPropEnum = append(securityAssociationResponseRecordsItems0IkeTypeAuthenticationPropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// SecurityAssociationResponseRecordsItems0Ike
	// SecurityAssociationResponseRecordsItems0Ike
	// authentication
	// Authentication
	// none
	// END DEBUGGING
	// SecurityAssociationResponseRecordsItems0IkeAuthenticationNone captures enum value "none"
	SecurityAssociationResponseRecordsItems0IkeAuthenticationNone string = "none"

	// BEGIN DEBUGGING
	// SecurityAssociationResponseRecordsItems0Ike
	// SecurityAssociationResponseRecordsItems0Ike
	// authentication
	// Authentication
	// psk
	// END DEBUGGING
	// SecurityAssociationResponseRecordsItems0IkeAuthenticationPsk captures enum value "psk"
	SecurityAssociationResponseRecordsItems0IkeAuthenticationPsk string = "psk"

	// BEGIN DEBUGGING
	// SecurityAssociationResponseRecordsItems0Ike
	// SecurityAssociationResponseRecordsItems0Ike
	// authentication
	// Authentication
	// cert
	// END DEBUGGING
	// SecurityAssociationResponseRecordsItems0IkeAuthenticationCert captures enum value "cert"
	SecurityAssociationResponseRecordsItems0IkeAuthenticationCert string = "cert"
)

// prop value enum
func (m *SecurityAssociationResponseRecordsItems0Ike) validateAuthenticationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, securityAssociationResponseRecordsItems0IkeTypeAuthenticationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SecurityAssociationResponseRecordsItems0Ike) validateAuthentication(formats strfmt.Registry) error {
	if swag.IsZero(m.Authentication) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthenticationEnum("ike"+"."+"authentication", "body", *m.Authentication); err != nil {
		return err
	}

	return nil
}

var securityAssociationResponseRecordsItems0IkeTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["none","connecting","established","dead_peer_probe"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		securityAssociationResponseRecordsItems0IkeTypeStatePropEnum = append(securityAssociationResponseRecordsItems0IkeTypeStatePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// SecurityAssociationResponseRecordsItems0Ike
	// SecurityAssociationResponseRecordsItems0Ike
	// state
	// State
	// none
	// END DEBUGGING
	// SecurityAssociationResponseRecordsItems0IkeStateNone captures enum value "none"
	SecurityAssociationResponseRecordsItems0IkeStateNone string = "none"

	// BEGIN DEBUGGING
	// SecurityAssociationResponseRecordsItems0Ike
	// SecurityAssociationResponseRecordsItems0Ike
	// state
	// State
	// connecting
	// END DEBUGGING
	// SecurityAssociationResponseRecordsItems0IkeStateConnecting captures enum value "connecting"
	SecurityAssociationResponseRecordsItems0IkeStateConnecting string = "connecting"

	// BEGIN DEBUGGING
	// SecurityAssociationResponseRecordsItems0Ike
	// SecurityAssociationResponseRecordsItems0Ike
	// state
	// State
	// established
	// END DEBUGGING
	// SecurityAssociationResponseRecordsItems0IkeStateEstablished captures enum value "established"
	SecurityAssociationResponseRecordsItems0IkeStateEstablished string = "established"

	// BEGIN DEBUGGING
	// SecurityAssociationResponseRecordsItems0Ike
	// SecurityAssociationResponseRecordsItems0Ike
	// state
	// State
	// dead_peer_probe
	// END DEBUGGING
	// SecurityAssociationResponseRecordsItems0IkeStateDeadPeerProbe captures enum value "dead_peer_probe"
	SecurityAssociationResponseRecordsItems0IkeStateDeadPeerProbe string = "dead_peer_probe"
)

// prop value enum
func (m *SecurityAssociationResponseRecordsItems0Ike) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, securityAssociationResponseRecordsItems0IkeTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SecurityAssociationResponseRecordsItems0Ike) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("ike"+"."+"state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this security association response records items0 ike based on context it is used
func (m *SecurityAssociationResponseRecordsItems0Ike) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SecurityAssociationResponseRecordsItems0Ike) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecurityAssociationResponseRecordsItems0Ike) UnmarshalBinary(b []byte) error {
	var res SecurityAssociationResponseRecordsItems0Ike
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SecurityAssociationResponseRecordsItems0Ipsec Objects containing parameters specific to IPsec security association.
//
// swagger:model SecurityAssociationResponseRecordsItems0Ipsec
type SecurityAssociationResponseRecordsItems0Ipsec struct {

	// Action for the IPsec security association.
	// Enum: [bypass discard esp_transport]
	Action *string `json:"action,omitempty"`

	// inbound
	Inbound *SecurityAssociationResponseRecordsItems0IpsecInbound `json:"inbound,omitempty"`

	// outbound
	Outbound *SecurityAssociationResponseRecordsItems0IpsecOutbound `json:"outbound,omitempty"`

	// State of the IPsec security association.
	State string `json:"state,omitempty"`
}

// Validate validates this security association response records items0 ipsec
func (m *SecurityAssociationResponseRecordsItems0Ipsec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInbound(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutbound(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var securityAssociationResponseRecordsItems0IpsecTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["bypass","discard","esp_transport"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		securityAssociationResponseRecordsItems0IpsecTypeActionPropEnum = append(securityAssociationResponseRecordsItems0IpsecTypeActionPropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// SecurityAssociationResponseRecordsItems0Ipsec
	// SecurityAssociationResponseRecordsItems0Ipsec
	// action
	// Action
	// bypass
	// END DEBUGGING
	// SecurityAssociationResponseRecordsItems0IpsecActionBypass captures enum value "bypass"
	SecurityAssociationResponseRecordsItems0IpsecActionBypass string = "bypass"

	// BEGIN DEBUGGING
	// SecurityAssociationResponseRecordsItems0Ipsec
	// SecurityAssociationResponseRecordsItems0Ipsec
	// action
	// Action
	// discard
	// END DEBUGGING
	// SecurityAssociationResponseRecordsItems0IpsecActionDiscard captures enum value "discard"
	SecurityAssociationResponseRecordsItems0IpsecActionDiscard string = "discard"

	// BEGIN DEBUGGING
	// SecurityAssociationResponseRecordsItems0Ipsec
	// SecurityAssociationResponseRecordsItems0Ipsec
	// action
	// Action
	// esp_transport
	// END DEBUGGING
	// SecurityAssociationResponseRecordsItems0IpsecActionEspTransport captures enum value "esp_transport"
	SecurityAssociationResponseRecordsItems0IpsecActionEspTransport string = "esp_transport"
)

// prop value enum
func (m *SecurityAssociationResponseRecordsItems0Ipsec) validateActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, securityAssociationResponseRecordsItems0IpsecTypeActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SecurityAssociationResponseRecordsItems0Ipsec) validateAction(formats strfmt.Registry) error {
	if swag.IsZero(m.Action) { // not required
		return nil
	}

	// value enum
	if err := m.validateActionEnum("ipsec"+"."+"action", "body", *m.Action); err != nil {
		return err
	}

	return nil
}

func (m *SecurityAssociationResponseRecordsItems0Ipsec) validateInbound(formats strfmt.Registry) error {
	if swag.IsZero(m.Inbound) { // not required
		return nil
	}

	if m.Inbound != nil {
		if err := m.Inbound.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipsec" + "." + "inbound")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityAssociationResponseRecordsItems0Ipsec) validateOutbound(formats strfmt.Registry) error {
	if swag.IsZero(m.Outbound) { // not required
		return nil
	}

	if m.Outbound != nil {
		if err := m.Outbound.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipsec" + "." + "outbound")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this security association response records items0 ipsec based on the context it is used
func (m *SecurityAssociationResponseRecordsItems0Ipsec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInbound(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOutbound(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityAssociationResponseRecordsItems0Ipsec) contextValidateInbound(ctx context.Context, formats strfmt.Registry) error {

	if m.Inbound != nil {
		if err := m.Inbound.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipsec" + "." + "inbound")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityAssociationResponseRecordsItems0Ipsec) contextValidateOutbound(ctx context.Context, formats strfmt.Registry) error {

	if m.Outbound != nil {
		if err := m.Outbound.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipsec" + "." + "outbound")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SecurityAssociationResponseRecordsItems0Ipsec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecurityAssociationResponseRecordsItems0Ipsec) UnmarshalBinary(b []byte) error {
	var res SecurityAssociationResponseRecordsItems0Ipsec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SecurityAssociationResponseRecordsItems0IpsecInbound Status for inbound parameters for the IPsec security association.
//
// swagger:model SecurityAssociationResponseRecordsItems0IpsecInbound
type SecurityAssociationResponseRecordsItems0IpsecInbound struct {

	// Number of inbound bytes for the IPsec security association.
	Bytes int64 `json:"bytes,omitempty"`

	// Number of inbound packets for the IPsec security association.
	Packets int64 `json:"packets,omitempty"`

	// Inbound security parameter index for the IPSec security association.
	SecurityParameterIndex string `json:"security_parameter_index,omitempty"`
}

// Validate validates this security association response records items0 ipsec inbound
func (m *SecurityAssociationResponseRecordsItems0IpsecInbound) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this security association response records items0 ipsec inbound based on context it is used
func (m *SecurityAssociationResponseRecordsItems0IpsecInbound) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SecurityAssociationResponseRecordsItems0IpsecInbound) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecurityAssociationResponseRecordsItems0IpsecInbound) UnmarshalBinary(b []byte) error {
	var res SecurityAssociationResponseRecordsItems0IpsecInbound
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SecurityAssociationResponseRecordsItems0IpsecOutbound Status for outbound parameters for the IPsec security association.
//
// swagger:model SecurityAssociationResponseRecordsItems0IpsecOutbound
type SecurityAssociationResponseRecordsItems0IpsecOutbound struct {

	// Number of outbound bytes for the IPsec security association.
	Bytes int64 `json:"bytes,omitempty"`

	// Number of outbound packets for the IPsec security association.
	Packets int64 `json:"packets,omitempty"`

	// Outbound security parameter index for the IPSec security association.
	SecurityParameterIndex string `json:"security_parameter_index,omitempty"`
}

// Validate validates this security association response records items0 ipsec outbound
func (m *SecurityAssociationResponseRecordsItems0IpsecOutbound) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this security association response records items0 ipsec outbound based on context it is used
func (m *SecurityAssociationResponseRecordsItems0IpsecOutbound) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SecurityAssociationResponseRecordsItems0IpsecOutbound) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecurityAssociationResponseRecordsItems0IpsecOutbound) UnmarshalBinary(b []byte) error {
	var res SecurityAssociationResponseRecordsItems0IpsecOutbound
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SecurityAssociationResponseRecordsItems0Node Node with the security association.
//
// swagger:model SecurityAssociationResponseRecordsItems0Node
type SecurityAssociationResponseRecordsItems0Node struct {

	// links
	Links *SecurityAssociationResponseRecordsItems0NodeLinks `json:"_links,omitempty"`

	// name
	// Example: node1
	Name string `json:"name,omitempty"`

	// uuid
	// Example: 1cd8a442-86d1-11e0-ae1c-123478563412
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this security association response records items0 node
func (m *SecurityAssociationResponseRecordsItems0Node) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityAssociationResponseRecordsItems0Node) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this security association response records items0 node based on the context it is used
func (m *SecurityAssociationResponseRecordsItems0Node) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityAssociationResponseRecordsItems0Node) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SecurityAssociationResponseRecordsItems0Node) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecurityAssociationResponseRecordsItems0Node) UnmarshalBinary(b []byte) error {
	var res SecurityAssociationResponseRecordsItems0Node
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SecurityAssociationResponseRecordsItems0NodeLinks security association response records items0 node links
//
// swagger:model SecurityAssociationResponseRecordsItems0NodeLinks
type SecurityAssociationResponseRecordsItems0NodeLinks struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this security association response records items0 node links
func (m *SecurityAssociationResponseRecordsItems0NodeLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityAssociationResponseRecordsItems0NodeLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this security association response records items0 node links based on the context it is used
func (m *SecurityAssociationResponseRecordsItems0NodeLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityAssociationResponseRecordsItems0NodeLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SecurityAssociationResponseRecordsItems0NodeLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecurityAssociationResponseRecordsItems0NodeLinks) UnmarshalBinary(b []byte) error {
	var res SecurityAssociationResponseRecordsItems0NodeLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SecurityAssociationResponseRecordsItems0Svm SVM, applies only to SVM-scoped objects.
//
// swagger:model SecurityAssociationResponseRecordsItems0Svm
type SecurityAssociationResponseRecordsItems0Svm struct {

	// links
	Links *SecurityAssociationResponseRecordsItems0SvmLinks `json:"_links,omitempty"`

	// The name of the SVM.
	//
	// Example: svm1
	Name string `json:"name,omitempty"`

	// The unique identifier of the SVM.
	//
	// Example: 02c9e252-41be-11e9-81d5-00a0986138f7
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this security association response records items0 svm
func (m *SecurityAssociationResponseRecordsItems0Svm) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityAssociationResponseRecordsItems0Svm) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svm" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this security association response records items0 svm based on the context it is used
func (m *SecurityAssociationResponseRecordsItems0Svm) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityAssociationResponseRecordsItems0Svm) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svm" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SecurityAssociationResponseRecordsItems0Svm) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecurityAssociationResponseRecordsItems0Svm) UnmarshalBinary(b []byte) error {
	var res SecurityAssociationResponseRecordsItems0Svm
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SecurityAssociationResponseRecordsItems0SvmLinks security association response records items0 svm links
//
// swagger:model SecurityAssociationResponseRecordsItems0SvmLinks
type SecurityAssociationResponseRecordsItems0SvmLinks struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this security association response records items0 svm links
func (m *SecurityAssociationResponseRecordsItems0SvmLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityAssociationResponseRecordsItems0SvmLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svm" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this security association response records items0 svm links based on the context it is used
func (m *SecurityAssociationResponseRecordsItems0SvmLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityAssociationResponseRecordsItems0SvmLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svm" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SecurityAssociationResponseRecordsItems0SvmLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecurityAssociationResponseRecordsItems0SvmLinks) UnmarshalBinary(b []byte) error {
	var res SecurityAssociationResponseRecordsItems0SvmLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
