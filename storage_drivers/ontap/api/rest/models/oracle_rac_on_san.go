// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OracleRacOnSan Oracle RAC using SAN.
//
// swagger:model oracle_rac_on_san
type OracleRacOnSan struct {

	// archive log
	ArchiveLog *OracleRacOnSanArchiveLog `json:"archive_log,omitempty"`

	// db
	// Required: true
	Db *OracleRacOnSanDb `json:"db"`

	// db sids
	// Required: true
	// Max Items: 2
	// Min Items: 2
	DbSids []*OracleRacOnSanDbSidsItems0 `json:"db_sids"`

	// grid binary
	GridBinary *OracleRacOnSanGridBinary `json:"grid_binary,omitempty"`

	// The list of initiator groups to create.
	// Max Items: 2
	// Min Items: 0
	NewIgroups []*OracleRacOnSanNewIgroups `json:"new_igroups,omitempty"`

	// ora home
	OraHome *OracleRacOnSanOraHome `json:"ora_home,omitempty"`

	// oracle crs
	OracleCrs *OracleRacOnSanOracleCrs `json:"oracle_crs,omitempty"`

	// The name of the host OS running the application.
	// Required: true
	// Enum: [aix hpux hyper_v linux solaris solaris_efi vmware windows windows_2008 windows_gpt xen]
	OsType *string `json:"os_type"`

	// protection type
	ProtectionType *OracleRacOnSanProtectionType `json:"protection_type,omitempty"`

	// redo log
	// Required: true
	RedoLog *OracleRacOnSanRedoLog `json:"redo_log"`
}

// Validate validates this oracle rac on san
func (m *OracleRacOnSan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArchiveLog(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDb(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDbSids(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGridBinary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewIgroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOraHome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOracleCrs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtectionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRedoLog(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleRacOnSan) validateArchiveLog(formats strfmt.Registry) error {
	if swag.IsZero(m.ArchiveLog) { // not required
		return nil
	}

	if m.ArchiveLog != nil {
		if err := m.ArchiveLog.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("archive_log")
			}
			return err
		}
	}

	return nil
}

func (m *OracleRacOnSan) validateDb(formats strfmt.Registry) error {

	if err := validate.Required("db", "body", m.Db); err != nil {
		return err
	}

	if m.Db != nil {
		if err := m.Db.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("db")
			}
			return err
		}
	}

	return nil
}

func (m *OracleRacOnSan) validateDbSids(formats strfmt.Registry) error {

	if err := validate.Required("db_sids", "body", m.DbSids); err != nil {
		return err
	}

	iDbSidsSize := int64(len(m.DbSids))

	if err := validate.MinItems("db_sids", "body", iDbSidsSize, 2); err != nil {
		return err
	}

	if err := validate.MaxItems("db_sids", "body", iDbSidsSize, 2); err != nil {
		return err
	}

	for i := 0; i < len(m.DbSids); i++ {
		if swag.IsZero(m.DbSids[i]) { // not required
			continue
		}

		if m.DbSids[i] != nil {
			if err := m.DbSids[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("db_sids" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OracleRacOnSan) validateGridBinary(formats strfmt.Registry) error {
	if swag.IsZero(m.GridBinary) { // not required
		return nil
	}

	if m.GridBinary != nil {
		if err := m.GridBinary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("grid_binary")
			}
			return err
		}
	}

	return nil
}

func (m *OracleRacOnSan) validateNewIgroups(formats strfmt.Registry) error {
	if swag.IsZero(m.NewIgroups) { // not required
		return nil
	}

	iNewIgroupsSize := int64(len(m.NewIgroups))

	if err := validate.MinItems("new_igroups", "body", iNewIgroupsSize, 0); err != nil {
		return err
	}

	if err := validate.MaxItems("new_igroups", "body", iNewIgroupsSize, 2); err != nil {
		return err
	}

	for i := 0; i < len(m.NewIgroups); i++ {
		if swag.IsZero(m.NewIgroups[i]) { // not required
			continue
		}

		if m.NewIgroups[i] != nil {
			if err := m.NewIgroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("new_igroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OracleRacOnSan) validateOraHome(formats strfmt.Registry) error {
	if swag.IsZero(m.OraHome) { // not required
		return nil
	}

	if m.OraHome != nil {
		if err := m.OraHome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ora_home")
			}
			return err
		}
	}

	return nil
}

func (m *OracleRacOnSan) validateOracleCrs(formats strfmt.Registry) error {
	if swag.IsZero(m.OracleCrs) { // not required
		return nil
	}

	if m.OracleCrs != nil {
		if err := m.OracleCrs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracle_crs")
			}
			return err
		}
	}

	return nil
}

var oracleRacOnSanTypeOsTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["aix","hpux","hyper_v","linux","solaris","solaris_efi","vmware","windows","windows_2008","windows_gpt","xen"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oracleRacOnSanTypeOsTypePropEnum = append(oracleRacOnSanTypeOsTypePropEnum, v)
	}
}

const (

	// BEGIN RIPPY DEBUGGING
	// oracle_rac_on_san
	// OracleRacOnSan
	// os_type
	// OsType
	// aix
	// END RIPPY DEBUGGING
	// OracleRacOnSanOsTypeAix captures enum value "aix"
	OracleRacOnSanOsTypeAix string = "aix"

	// BEGIN RIPPY DEBUGGING
	// oracle_rac_on_san
	// OracleRacOnSan
	// os_type
	// OsType
	// hpux
	// END RIPPY DEBUGGING
	// OracleRacOnSanOsTypeHpux captures enum value "hpux"
	OracleRacOnSanOsTypeHpux string = "hpux"

	// BEGIN RIPPY DEBUGGING
	// oracle_rac_on_san
	// OracleRacOnSan
	// os_type
	// OsType
	// hyper_v
	// END RIPPY DEBUGGING
	// OracleRacOnSanOsTypeHyperv captures enum value "hyper_v"
	OracleRacOnSanOsTypeHyperv string = "hyper_v"

	// BEGIN RIPPY DEBUGGING
	// oracle_rac_on_san
	// OracleRacOnSan
	// os_type
	// OsType
	// linux
	// END RIPPY DEBUGGING
	// OracleRacOnSanOsTypeLinux captures enum value "linux"
	OracleRacOnSanOsTypeLinux string = "linux"

	// BEGIN RIPPY DEBUGGING
	// oracle_rac_on_san
	// OracleRacOnSan
	// os_type
	// OsType
	// solaris
	// END RIPPY DEBUGGING
	// OracleRacOnSanOsTypeSolaris captures enum value "solaris"
	OracleRacOnSanOsTypeSolaris string = "solaris"

	// BEGIN RIPPY DEBUGGING
	// oracle_rac_on_san
	// OracleRacOnSan
	// os_type
	// OsType
	// solaris_efi
	// END RIPPY DEBUGGING
	// OracleRacOnSanOsTypeSolarisEfi captures enum value "solaris_efi"
	OracleRacOnSanOsTypeSolarisEfi string = "solaris_efi"

	// BEGIN RIPPY DEBUGGING
	// oracle_rac_on_san
	// OracleRacOnSan
	// os_type
	// OsType
	// vmware
	// END RIPPY DEBUGGING
	// OracleRacOnSanOsTypeVmware captures enum value "vmware"
	OracleRacOnSanOsTypeVmware string = "vmware"

	// BEGIN RIPPY DEBUGGING
	// oracle_rac_on_san
	// OracleRacOnSan
	// os_type
	// OsType
	// windows
	// END RIPPY DEBUGGING
	// OracleRacOnSanOsTypeWindows captures enum value "windows"
	OracleRacOnSanOsTypeWindows string = "windows"

	// BEGIN RIPPY DEBUGGING
	// oracle_rac_on_san
	// OracleRacOnSan
	// os_type
	// OsType
	// windows_2008
	// END RIPPY DEBUGGING
	// OracleRacOnSanOsTypeWindows2008 captures enum value "windows_2008"
	OracleRacOnSanOsTypeWindows2008 string = "windows_2008"

	// BEGIN RIPPY DEBUGGING
	// oracle_rac_on_san
	// OracleRacOnSan
	// os_type
	// OsType
	// windows_gpt
	// END RIPPY DEBUGGING
	// OracleRacOnSanOsTypeWindowsGpt captures enum value "windows_gpt"
	OracleRacOnSanOsTypeWindowsGpt string = "windows_gpt"

	// BEGIN RIPPY DEBUGGING
	// oracle_rac_on_san
	// OracleRacOnSan
	// os_type
	// OsType
	// xen
	// END RIPPY DEBUGGING
	// OracleRacOnSanOsTypeXen captures enum value "xen"
	OracleRacOnSanOsTypeXen string = "xen"
)

// prop value enum
func (m *OracleRacOnSan) validateOsTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oracleRacOnSanTypeOsTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OracleRacOnSan) validateOsType(formats strfmt.Registry) error {

	if err := validate.Required("os_type", "body", m.OsType); err != nil {
		return err
	}

	// value enum
	if err := m.validateOsTypeEnum("os_type", "body", *m.OsType); err != nil {
		return err
	}

	return nil
}

func (m *OracleRacOnSan) validateProtectionType(formats strfmt.Registry) error {
	if swag.IsZero(m.ProtectionType) { // not required
		return nil
	}

	if m.ProtectionType != nil {
		if err := m.ProtectionType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protection_type")
			}
			return err
		}
	}

	return nil
}

func (m *OracleRacOnSan) validateRedoLog(formats strfmt.Registry) error {

	if err := validate.Required("redo_log", "body", m.RedoLog); err != nil {
		return err
	}

	if m.RedoLog != nil {
		if err := m.RedoLog.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("redo_log")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this oracle rac on san based on the context it is used
func (m *OracleRacOnSan) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArchiveLog(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDb(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDbSids(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGridBinary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNewIgroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOraHome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOracleCrs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProtectionType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRedoLog(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleRacOnSan) contextValidateArchiveLog(ctx context.Context, formats strfmt.Registry) error {

	if m.ArchiveLog != nil {
		if err := m.ArchiveLog.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("archive_log")
			}
			return err
		}
	}

	return nil
}

func (m *OracleRacOnSan) contextValidateDb(ctx context.Context, formats strfmt.Registry) error {

	if m.Db != nil {
		if err := m.Db.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("db")
			}
			return err
		}
	}

	return nil
}

func (m *OracleRacOnSan) contextValidateDbSids(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DbSids); i++ {

		if m.DbSids[i] != nil {
			if err := m.DbSids[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("db_sids" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OracleRacOnSan) contextValidateGridBinary(ctx context.Context, formats strfmt.Registry) error {

	if m.GridBinary != nil {
		if err := m.GridBinary.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("grid_binary")
			}
			return err
		}
	}

	return nil
}

func (m *OracleRacOnSan) contextValidateNewIgroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NewIgroups); i++ {

		if m.NewIgroups[i] != nil {
			if err := m.NewIgroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("new_igroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OracleRacOnSan) contextValidateOraHome(ctx context.Context, formats strfmt.Registry) error {

	if m.OraHome != nil {
		if err := m.OraHome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ora_home")
			}
			return err
		}
	}

	return nil
}

func (m *OracleRacOnSan) contextValidateOracleCrs(ctx context.Context, formats strfmt.Registry) error {

	if m.OracleCrs != nil {
		if err := m.OracleCrs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracle_crs")
			}
			return err
		}
	}

	return nil
}

func (m *OracleRacOnSan) contextValidateProtectionType(ctx context.Context, formats strfmt.Registry) error {

	if m.ProtectionType != nil {
		if err := m.ProtectionType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protection_type")
			}
			return err
		}
	}

	return nil
}

func (m *OracleRacOnSan) contextValidateRedoLog(ctx context.Context, formats strfmt.Registry) error {

	if m.RedoLog != nil {
		if err := m.RedoLog.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("redo_log")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OracleRacOnSan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleRacOnSan) UnmarshalBinary(b []byte) error {
	var res OracleRacOnSan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OracleRacOnSanArchiveLog oracle rac on san archive log
//
// swagger:model OracleRacOnSanArchiveLog
type OracleRacOnSanArchiveLog struct {

	// The size of the archive log. Usage: {&lt;integer&gt;[KB|MB|GB|TB|PB]}
	Size int64 `json:"size,omitempty"`

	// storage service
	StorageService *OracleRacOnSanArchiveLogStorageService `json:"storage_service,omitempty"`
}

// Validate validates this oracle rac on san archive log
func (m *OracleRacOnSanArchiveLog) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStorageService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleRacOnSanArchiveLog) validateStorageService(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageService) { // not required
		return nil
	}

	if m.StorageService != nil {
		if err := m.StorageService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("archive_log" + "." + "storage_service")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this oracle rac on san archive log based on the context it is used
func (m *OracleRacOnSanArchiveLog) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStorageService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleRacOnSanArchiveLog) contextValidateStorageService(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageService != nil {
		if err := m.StorageService.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("archive_log" + "." + "storage_service")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OracleRacOnSanArchiveLog) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleRacOnSanArchiveLog) UnmarshalBinary(b []byte) error {
	var res OracleRacOnSanArchiveLog
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OracleRacOnSanArchiveLogStorageService oracle rac on san archive log storage service
//
// swagger:model OracleRacOnSanArchiveLogStorageService
type OracleRacOnSanArchiveLogStorageService struct {

	// The storage service of the archive log.
	// Enum: [extreme performance value]
	Name *string `json:"name,omitempty"`
}

// Validate validates this oracle rac on san archive log storage service
func (m *OracleRacOnSanArchiveLogStorageService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oracleRacOnSanArchiveLogStorageServiceTypeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["extreme","performance","value"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oracleRacOnSanArchiveLogStorageServiceTypeNamePropEnum = append(oracleRacOnSanArchiveLogStorageServiceTypeNamePropEnum, v)
	}
}

const (

	// BEGIN RIPPY DEBUGGING
	// OracleRacOnSanArchiveLogStorageService
	// OracleRacOnSanArchiveLogStorageService
	// name
	// Name
	// extreme
	// END RIPPY DEBUGGING
	// OracleRacOnSanArchiveLogStorageServiceNameExtreme captures enum value "extreme"
	OracleRacOnSanArchiveLogStorageServiceNameExtreme string = "extreme"

	// BEGIN RIPPY DEBUGGING
	// OracleRacOnSanArchiveLogStorageService
	// OracleRacOnSanArchiveLogStorageService
	// name
	// Name
	// performance
	// END RIPPY DEBUGGING
	// OracleRacOnSanArchiveLogStorageServiceNamePerformance captures enum value "performance"
	OracleRacOnSanArchiveLogStorageServiceNamePerformance string = "performance"

	// BEGIN RIPPY DEBUGGING
	// OracleRacOnSanArchiveLogStorageService
	// OracleRacOnSanArchiveLogStorageService
	// name
	// Name
	// value
	// END RIPPY DEBUGGING
	// OracleRacOnSanArchiveLogStorageServiceNameValue captures enum value "value"
	OracleRacOnSanArchiveLogStorageServiceNameValue string = "value"
)

// prop value enum
func (m *OracleRacOnSanArchiveLogStorageService) validateNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oracleRacOnSanArchiveLogStorageServiceTypeNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OracleRacOnSanArchiveLogStorageService) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	// value enum
	if err := m.validateNameEnum("archive_log"+"."+"storage_service"+"."+"name", "body", *m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this oracle rac on san archive log storage service based on context it is used
func (m *OracleRacOnSanArchiveLogStorageService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OracleRacOnSanArchiveLogStorageService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleRacOnSanArchiveLogStorageService) UnmarshalBinary(b []byte) error {
	var res OracleRacOnSanArchiveLogStorageService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OracleRacOnSanDb oracle rac on san db
//
// swagger:model OracleRacOnSanDb
type OracleRacOnSanDb struct {

	// The size of the database. Usage: {&lt;integer&gt;[KB|MB|GB|TB|PB]}
	// Required: true
	Size *int64 `json:"size"`

	// storage service
	StorageService *OracleRacOnSanDbStorageService `json:"storage_service,omitempty"`
}

// Validate validates this oracle rac on san db
func (m *OracleRacOnSanDb) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleRacOnSanDb) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("db"+"."+"size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

func (m *OracleRacOnSanDb) validateStorageService(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageService) { // not required
		return nil
	}

	if m.StorageService != nil {
		if err := m.StorageService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("db" + "." + "storage_service")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this oracle rac on san db based on the context it is used
func (m *OracleRacOnSanDb) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStorageService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleRacOnSanDb) contextValidateStorageService(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageService != nil {
		if err := m.StorageService.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("db" + "." + "storage_service")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OracleRacOnSanDb) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleRacOnSanDb) UnmarshalBinary(b []byte) error {
	var res OracleRacOnSanDb
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OracleRacOnSanDbSidsItems0 oracle rac on san db sids items0
//
// swagger:model OracleRacOnSanDbSidsItems0
type OracleRacOnSanDbSidsItems0 struct {

	// The name of the initiator group through which the contents of this application will be accessed. Modification of this parameter is a disruptive operation. All LUNs in the application component will be unmapped from the current igroup and re-mapped to the new igroup.
	// Required: true
	// Max Length: 96
	// Min Length: 1
	IgroupName *string `json:"igroup_name"`
}

// Validate validates this oracle rac on san db sids items0
func (m *OracleRacOnSanDbSidsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIgroupName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleRacOnSanDbSidsItems0) validateIgroupName(formats strfmt.Registry) error {

	if err := validate.Required("igroup_name", "body", m.IgroupName); err != nil {
		return err
	}

	if err := validate.MinLength("igroup_name", "body", *m.IgroupName, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("igroup_name", "body", *m.IgroupName, 96); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this oracle rac on san db sids items0 based on context it is used
func (m *OracleRacOnSanDbSidsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OracleRacOnSanDbSidsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleRacOnSanDbSidsItems0) UnmarshalBinary(b []byte) error {
	var res OracleRacOnSanDbSidsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OracleRacOnSanDbStorageService oracle rac on san db storage service
//
// swagger:model OracleRacOnSanDbStorageService
type OracleRacOnSanDbStorageService struct {

	// The storage service of the database.
	// Enum: [extreme performance value]
	Name *string `json:"name,omitempty"`
}

// Validate validates this oracle rac on san db storage service
func (m *OracleRacOnSanDbStorageService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oracleRacOnSanDbStorageServiceTypeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["extreme","performance","value"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oracleRacOnSanDbStorageServiceTypeNamePropEnum = append(oracleRacOnSanDbStorageServiceTypeNamePropEnum, v)
	}
}

const (

	// BEGIN RIPPY DEBUGGING
	// OracleRacOnSanDbStorageService
	// OracleRacOnSanDbStorageService
	// name
	// Name
	// extreme
	// END RIPPY DEBUGGING
	// OracleRacOnSanDbStorageServiceNameExtreme captures enum value "extreme"
	OracleRacOnSanDbStorageServiceNameExtreme string = "extreme"

	// BEGIN RIPPY DEBUGGING
	// OracleRacOnSanDbStorageService
	// OracleRacOnSanDbStorageService
	// name
	// Name
	// performance
	// END RIPPY DEBUGGING
	// OracleRacOnSanDbStorageServiceNamePerformance captures enum value "performance"
	OracleRacOnSanDbStorageServiceNamePerformance string = "performance"

	// BEGIN RIPPY DEBUGGING
	// OracleRacOnSanDbStorageService
	// OracleRacOnSanDbStorageService
	// name
	// Name
	// value
	// END RIPPY DEBUGGING
	// OracleRacOnSanDbStorageServiceNameValue captures enum value "value"
	OracleRacOnSanDbStorageServiceNameValue string = "value"
)

// prop value enum
func (m *OracleRacOnSanDbStorageService) validateNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oracleRacOnSanDbStorageServiceTypeNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OracleRacOnSanDbStorageService) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	// value enum
	if err := m.validateNameEnum("db"+"."+"storage_service"+"."+"name", "body", *m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this oracle rac on san db storage service based on context it is used
func (m *OracleRacOnSanDbStorageService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OracleRacOnSanDbStorageService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleRacOnSanDbStorageService) UnmarshalBinary(b []byte) error {
	var res OracleRacOnSanDbStorageService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OracleRacOnSanGridBinary oracle rac on san grid binary
//
// swagger:model OracleRacOnSanGridBinary
type OracleRacOnSanGridBinary struct {

	// The size of the Oracle grid binary storage volume. Usage: {&lt;integer&gt;[KB|MB|GB|TB|PB]}
	Size int64 `json:"size,omitempty"`

	// storage service
	StorageService *OracleRacOnSanGridBinaryStorageService `json:"storage_service,omitempty"`
}

// Validate validates this oracle rac on san grid binary
func (m *OracleRacOnSanGridBinary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStorageService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleRacOnSanGridBinary) validateStorageService(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageService) { // not required
		return nil
	}

	if m.StorageService != nil {
		if err := m.StorageService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("grid_binary" + "." + "storage_service")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this oracle rac on san grid binary based on the context it is used
func (m *OracleRacOnSanGridBinary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStorageService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleRacOnSanGridBinary) contextValidateStorageService(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageService != nil {
		if err := m.StorageService.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("grid_binary" + "." + "storage_service")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OracleRacOnSanGridBinary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleRacOnSanGridBinary) UnmarshalBinary(b []byte) error {
	var res OracleRacOnSanGridBinary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OracleRacOnSanGridBinaryStorageService oracle rac on san grid binary storage service
//
// swagger:model OracleRacOnSanGridBinaryStorageService
type OracleRacOnSanGridBinaryStorageService struct {

	// The storage service of the Oracle grid binary storage volume.
	// Enum: [extreme performance value]
	Name *string `json:"name,omitempty"`
}

// Validate validates this oracle rac on san grid binary storage service
func (m *OracleRacOnSanGridBinaryStorageService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oracleRacOnSanGridBinaryStorageServiceTypeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["extreme","performance","value"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oracleRacOnSanGridBinaryStorageServiceTypeNamePropEnum = append(oracleRacOnSanGridBinaryStorageServiceTypeNamePropEnum, v)
	}
}

const (

	// BEGIN RIPPY DEBUGGING
	// OracleRacOnSanGridBinaryStorageService
	// OracleRacOnSanGridBinaryStorageService
	// name
	// Name
	// extreme
	// END RIPPY DEBUGGING
	// OracleRacOnSanGridBinaryStorageServiceNameExtreme captures enum value "extreme"
	OracleRacOnSanGridBinaryStorageServiceNameExtreme string = "extreme"

	// BEGIN RIPPY DEBUGGING
	// OracleRacOnSanGridBinaryStorageService
	// OracleRacOnSanGridBinaryStorageService
	// name
	// Name
	// performance
	// END RIPPY DEBUGGING
	// OracleRacOnSanGridBinaryStorageServiceNamePerformance captures enum value "performance"
	OracleRacOnSanGridBinaryStorageServiceNamePerformance string = "performance"

	// BEGIN RIPPY DEBUGGING
	// OracleRacOnSanGridBinaryStorageService
	// OracleRacOnSanGridBinaryStorageService
	// name
	// Name
	// value
	// END RIPPY DEBUGGING
	// OracleRacOnSanGridBinaryStorageServiceNameValue captures enum value "value"
	OracleRacOnSanGridBinaryStorageServiceNameValue string = "value"
)

// prop value enum
func (m *OracleRacOnSanGridBinaryStorageService) validateNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oracleRacOnSanGridBinaryStorageServiceTypeNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OracleRacOnSanGridBinaryStorageService) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	// value enum
	if err := m.validateNameEnum("grid_binary"+"."+"storage_service"+"."+"name", "body", *m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this oracle rac on san grid binary storage service based on context it is used
func (m *OracleRacOnSanGridBinaryStorageService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OracleRacOnSanGridBinaryStorageService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleRacOnSanGridBinaryStorageService) UnmarshalBinary(b []byte) error {
	var res OracleRacOnSanGridBinaryStorageService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OracleRacOnSanOraHome oracle rac on san ora home
//
// swagger:model OracleRacOnSanOraHome
type OracleRacOnSanOraHome struct {

	// The size of the ORACLE_HOME storage volume. Usage: {&lt;integer&gt;[KB|MB|GB|TB|PB]}
	Size int64 `json:"size,omitempty"`

	// storage service
	StorageService *OracleRacOnSanOraHomeStorageService `json:"storage_service,omitempty"`
}

// Validate validates this oracle rac on san ora home
func (m *OracleRacOnSanOraHome) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStorageService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleRacOnSanOraHome) validateStorageService(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageService) { // not required
		return nil
	}

	if m.StorageService != nil {
		if err := m.StorageService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ora_home" + "." + "storage_service")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this oracle rac on san ora home based on the context it is used
func (m *OracleRacOnSanOraHome) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStorageService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleRacOnSanOraHome) contextValidateStorageService(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageService != nil {
		if err := m.StorageService.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ora_home" + "." + "storage_service")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OracleRacOnSanOraHome) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleRacOnSanOraHome) UnmarshalBinary(b []byte) error {
	var res OracleRacOnSanOraHome
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OracleRacOnSanOraHomeStorageService oracle rac on san ora home storage service
//
// swagger:model OracleRacOnSanOraHomeStorageService
type OracleRacOnSanOraHomeStorageService struct {

	// The storage service of the ORACLE_HOME storage volume.
	// Enum: [extreme performance value]
	Name *string `json:"name,omitempty"`
}

// Validate validates this oracle rac on san ora home storage service
func (m *OracleRacOnSanOraHomeStorageService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oracleRacOnSanOraHomeStorageServiceTypeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["extreme","performance","value"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oracleRacOnSanOraHomeStorageServiceTypeNamePropEnum = append(oracleRacOnSanOraHomeStorageServiceTypeNamePropEnum, v)
	}
}

const (

	// BEGIN RIPPY DEBUGGING
	// OracleRacOnSanOraHomeStorageService
	// OracleRacOnSanOraHomeStorageService
	// name
	// Name
	// extreme
	// END RIPPY DEBUGGING
	// OracleRacOnSanOraHomeStorageServiceNameExtreme captures enum value "extreme"
	OracleRacOnSanOraHomeStorageServiceNameExtreme string = "extreme"

	// BEGIN RIPPY DEBUGGING
	// OracleRacOnSanOraHomeStorageService
	// OracleRacOnSanOraHomeStorageService
	// name
	// Name
	// performance
	// END RIPPY DEBUGGING
	// OracleRacOnSanOraHomeStorageServiceNamePerformance captures enum value "performance"
	OracleRacOnSanOraHomeStorageServiceNamePerformance string = "performance"

	// BEGIN RIPPY DEBUGGING
	// OracleRacOnSanOraHomeStorageService
	// OracleRacOnSanOraHomeStorageService
	// name
	// Name
	// value
	// END RIPPY DEBUGGING
	// OracleRacOnSanOraHomeStorageServiceNameValue captures enum value "value"
	OracleRacOnSanOraHomeStorageServiceNameValue string = "value"
)

// prop value enum
func (m *OracleRacOnSanOraHomeStorageService) validateNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oracleRacOnSanOraHomeStorageServiceTypeNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OracleRacOnSanOraHomeStorageService) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	// value enum
	if err := m.validateNameEnum("ora_home"+"."+"storage_service"+"."+"name", "body", *m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this oracle rac on san ora home storage service based on context it is used
func (m *OracleRacOnSanOraHomeStorageService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OracleRacOnSanOraHomeStorageService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleRacOnSanOraHomeStorageService) UnmarshalBinary(b []byte) error {
	var res OracleRacOnSanOraHomeStorageService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OracleRacOnSanOracleCrs oracle rac on san oracle crs
//
// swagger:model OracleRacOnSanOracleCrs
type OracleRacOnSanOracleCrs struct {

	// The number of CRS volumes.
	// Maximum: 10
	// Minimum: 1
	Copies int64 `json:"copies,omitempty"`

	// The size of the Oracle CRS/voting storage volume. Usage: {&lt;integer&gt;[KB|MB|GB|TB|PB]}
	Size int64 `json:"size,omitempty"`

	// storage service
	StorageService *OracleRacOnSanOracleCrsStorageService `json:"storage_service,omitempty"`
}

// Validate validates this oracle rac on san oracle crs
func (m *OracleRacOnSanOracleCrs) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCopies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleRacOnSanOracleCrs) validateCopies(formats strfmt.Registry) error {
	if swag.IsZero(m.Copies) { // not required
		return nil
	}

	if err := validate.MinimumInt("oracle_crs"+"."+"copies", "body", m.Copies, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("oracle_crs"+"."+"copies", "body", m.Copies, 10, false); err != nil {
		return err
	}

	return nil
}

func (m *OracleRacOnSanOracleCrs) validateStorageService(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageService) { // not required
		return nil
	}

	if m.StorageService != nil {
		if err := m.StorageService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracle_crs" + "." + "storage_service")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this oracle rac on san oracle crs based on the context it is used
func (m *OracleRacOnSanOracleCrs) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStorageService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleRacOnSanOracleCrs) contextValidateStorageService(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageService != nil {
		if err := m.StorageService.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracle_crs" + "." + "storage_service")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OracleRacOnSanOracleCrs) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleRacOnSanOracleCrs) UnmarshalBinary(b []byte) error {
	var res OracleRacOnSanOracleCrs
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OracleRacOnSanOracleCrsStorageService oracle rac on san oracle crs storage service
//
// swagger:model OracleRacOnSanOracleCrsStorageService
type OracleRacOnSanOracleCrsStorageService struct {

	// The storage service of the Oracle CRS volume.
	// Enum: [extreme performance value]
	Name *string `json:"name,omitempty"`
}

// Validate validates this oracle rac on san oracle crs storage service
func (m *OracleRacOnSanOracleCrsStorageService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oracleRacOnSanOracleCrsStorageServiceTypeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["extreme","performance","value"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oracleRacOnSanOracleCrsStorageServiceTypeNamePropEnum = append(oracleRacOnSanOracleCrsStorageServiceTypeNamePropEnum, v)
	}
}

const (

	// BEGIN RIPPY DEBUGGING
	// OracleRacOnSanOracleCrsStorageService
	// OracleRacOnSanOracleCrsStorageService
	// name
	// Name
	// extreme
	// END RIPPY DEBUGGING
	// OracleRacOnSanOracleCrsStorageServiceNameExtreme captures enum value "extreme"
	OracleRacOnSanOracleCrsStorageServiceNameExtreme string = "extreme"

	// BEGIN RIPPY DEBUGGING
	// OracleRacOnSanOracleCrsStorageService
	// OracleRacOnSanOracleCrsStorageService
	// name
	// Name
	// performance
	// END RIPPY DEBUGGING
	// OracleRacOnSanOracleCrsStorageServiceNamePerformance captures enum value "performance"
	OracleRacOnSanOracleCrsStorageServiceNamePerformance string = "performance"

	// BEGIN RIPPY DEBUGGING
	// OracleRacOnSanOracleCrsStorageService
	// OracleRacOnSanOracleCrsStorageService
	// name
	// Name
	// value
	// END RIPPY DEBUGGING
	// OracleRacOnSanOracleCrsStorageServiceNameValue captures enum value "value"
	OracleRacOnSanOracleCrsStorageServiceNameValue string = "value"
)

// prop value enum
func (m *OracleRacOnSanOracleCrsStorageService) validateNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oracleRacOnSanOracleCrsStorageServiceTypeNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OracleRacOnSanOracleCrsStorageService) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	// value enum
	if err := m.validateNameEnum("oracle_crs"+"."+"storage_service"+"."+"name", "body", *m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this oracle rac on san oracle crs storage service based on context it is used
func (m *OracleRacOnSanOracleCrsStorageService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OracleRacOnSanOracleCrsStorageService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleRacOnSanOracleCrsStorageService) UnmarshalBinary(b []byte) error {
	var res OracleRacOnSanOracleCrsStorageService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OracleRacOnSanProtectionType oracle rac on san protection type
//
// swagger:model OracleRacOnSanProtectionType
type OracleRacOnSanProtectionType struct {

	// The local rpo of the application.
	// Enum: [hourly none]
	LocalRpo string `json:"local_rpo,omitempty"`

	// The remote rpo of the application.
	// Enum: [none zero]
	RemoteRpo string `json:"remote_rpo,omitempty"`
}

// Validate validates this oracle rac on san protection type
func (m *OracleRacOnSanProtectionType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLocalRpo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemoteRpo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oracleRacOnSanProtectionTypeTypeLocalRpoPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["hourly","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oracleRacOnSanProtectionTypeTypeLocalRpoPropEnum = append(oracleRacOnSanProtectionTypeTypeLocalRpoPropEnum, v)
	}
}

const (

	// BEGIN RIPPY DEBUGGING
	// OracleRacOnSanProtectionType
	// OracleRacOnSanProtectionType
	// local_rpo
	// LocalRpo
	// hourly
	// END RIPPY DEBUGGING
	// OracleRacOnSanProtectionTypeLocalRpoHourly captures enum value "hourly"
	OracleRacOnSanProtectionTypeLocalRpoHourly string = "hourly"

	// BEGIN RIPPY DEBUGGING
	// OracleRacOnSanProtectionType
	// OracleRacOnSanProtectionType
	// local_rpo
	// LocalRpo
	// none
	// END RIPPY DEBUGGING
	// OracleRacOnSanProtectionTypeLocalRpoNone captures enum value "none"
	OracleRacOnSanProtectionTypeLocalRpoNone string = "none"
)

// prop value enum
func (m *OracleRacOnSanProtectionType) validateLocalRpoEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oracleRacOnSanProtectionTypeTypeLocalRpoPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OracleRacOnSanProtectionType) validateLocalRpo(formats strfmt.Registry) error {
	if swag.IsZero(m.LocalRpo) { // not required
		return nil
	}

	// value enum
	if err := m.validateLocalRpoEnum("protection_type"+"."+"local_rpo", "body", m.LocalRpo); err != nil {
		return err
	}

	return nil
}

var oracleRacOnSanProtectionTypeTypeRemoteRpoPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["none","zero"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oracleRacOnSanProtectionTypeTypeRemoteRpoPropEnum = append(oracleRacOnSanProtectionTypeTypeRemoteRpoPropEnum, v)
	}
}

const (

	// BEGIN RIPPY DEBUGGING
	// OracleRacOnSanProtectionType
	// OracleRacOnSanProtectionType
	// remote_rpo
	// RemoteRpo
	// none
	// END RIPPY DEBUGGING
	// OracleRacOnSanProtectionTypeRemoteRpoNone captures enum value "none"
	OracleRacOnSanProtectionTypeRemoteRpoNone string = "none"

	// BEGIN RIPPY DEBUGGING
	// OracleRacOnSanProtectionType
	// OracleRacOnSanProtectionType
	// remote_rpo
	// RemoteRpo
	// zero
	// END RIPPY DEBUGGING
	// OracleRacOnSanProtectionTypeRemoteRpoZero captures enum value "zero"
	OracleRacOnSanProtectionTypeRemoteRpoZero string = "zero"
)

// prop value enum
func (m *OracleRacOnSanProtectionType) validateRemoteRpoEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oracleRacOnSanProtectionTypeTypeRemoteRpoPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OracleRacOnSanProtectionType) validateRemoteRpo(formats strfmt.Registry) error {
	if swag.IsZero(m.RemoteRpo) { // not required
		return nil
	}

	// value enum
	if err := m.validateRemoteRpoEnum("protection_type"+"."+"remote_rpo", "body", m.RemoteRpo); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this oracle rac on san protection type based on context it is used
func (m *OracleRacOnSanProtectionType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OracleRacOnSanProtectionType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleRacOnSanProtectionType) UnmarshalBinary(b []byte) error {
	var res OracleRacOnSanProtectionType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OracleRacOnSanRedoLog oracle rac on san redo log
//
// swagger:model OracleRacOnSanRedoLog
type OracleRacOnSanRedoLog struct {

	// Specifies whether the redo log group should be mirrored.
	// Enum: [false true]
	Mirrored *bool `json:"mirrored,omitempty"`

	// The size of the redo log group. Usage: {&lt;integer&gt;[KB|MB|GB|TB|PB]}
	// Required: true
	Size *int64 `json:"size"`

	// storage service
	StorageService *OracleRacOnSanRedoLogStorageService `json:"storage_service,omitempty"`
}

// Validate validates this oracle rac on san redo log
func (m *OracleRacOnSanRedoLog) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMirrored(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oracleRacOnSanRedoLogTypeMirroredPropEnum []interface{}

func init() {
	var res []bool
	if err := json.Unmarshal([]byte(`[false,true]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oracleRacOnSanRedoLogTypeMirroredPropEnum = append(oracleRacOnSanRedoLogTypeMirroredPropEnum, v)
	}
}

// prop value enum
func (m *OracleRacOnSanRedoLog) validateMirroredEnum(path, location string, value bool) error {
	if err := validate.EnumCase(path, location, value, oracleRacOnSanRedoLogTypeMirroredPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OracleRacOnSanRedoLog) validateMirrored(formats strfmt.Registry) error {
	if swag.IsZero(m.Mirrored) { // not required
		return nil
	}

	// value enum
	if err := m.validateMirroredEnum("redo_log"+"."+"mirrored", "body", *m.Mirrored); err != nil {
		return err
	}

	return nil
}

func (m *OracleRacOnSanRedoLog) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("redo_log"+"."+"size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

func (m *OracleRacOnSanRedoLog) validateStorageService(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageService) { // not required
		return nil
	}

	if m.StorageService != nil {
		if err := m.StorageService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("redo_log" + "." + "storage_service")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this oracle rac on san redo log based on the context it is used
func (m *OracleRacOnSanRedoLog) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStorageService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleRacOnSanRedoLog) contextValidateStorageService(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageService != nil {
		if err := m.StorageService.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("redo_log" + "." + "storage_service")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OracleRacOnSanRedoLog) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleRacOnSanRedoLog) UnmarshalBinary(b []byte) error {
	var res OracleRacOnSanRedoLog
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OracleRacOnSanRedoLogStorageService oracle rac on san redo log storage service
//
// swagger:model OracleRacOnSanRedoLogStorageService
type OracleRacOnSanRedoLogStorageService struct {

	// The storage service of the redo log group.
	// Enum: [extreme performance value]
	Name *string `json:"name,omitempty"`
}

// Validate validates this oracle rac on san redo log storage service
func (m *OracleRacOnSanRedoLogStorageService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oracleRacOnSanRedoLogStorageServiceTypeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["extreme","performance","value"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oracleRacOnSanRedoLogStorageServiceTypeNamePropEnum = append(oracleRacOnSanRedoLogStorageServiceTypeNamePropEnum, v)
	}
}

const (

	// BEGIN RIPPY DEBUGGING
	// OracleRacOnSanRedoLogStorageService
	// OracleRacOnSanRedoLogStorageService
	// name
	// Name
	// extreme
	// END RIPPY DEBUGGING
	// OracleRacOnSanRedoLogStorageServiceNameExtreme captures enum value "extreme"
	OracleRacOnSanRedoLogStorageServiceNameExtreme string = "extreme"

	// BEGIN RIPPY DEBUGGING
	// OracleRacOnSanRedoLogStorageService
	// OracleRacOnSanRedoLogStorageService
	// name
	// Name
	// performance
	// END RIPPY DEBUGGING
	// OracleRacOnSanRedoLogStorageServiceNamePerformance captures enum value "performance"
	OracleRacOnSanRedoLogStorageServiceNamePerformance string = "performance"

	// BEGIN RIPPY DEBUGGING
	// OracleRacOnSanRedoLogStorageService
	// OracleRacOnSanRedoLogStorageService
	// name
	// Name
	// value
	// END RIPPY DEBUGGING
	// OracleRacOnSanRedoLogStorageServiceNameValue captures enum value "value"
	OracleRacOnSanRedoLogStorageServiceNameValue string = "value"
)

// prop value enum
func (m *OracleRacOnSanRedoLogStorageService) validateNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oracleRacOnSanRedoLogStorageServiceTypeNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OracleRacOnSanRedoLogStorageService) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	// value enum
	if err := m.validateNameEnum("redo_log"+"."+"storage_service"+"."+"name", "body", *m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this oracle rac on san redo log storage service based on context it is used
func (m *OracleRacOnSanRedoLogStorageService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OracleRacOnSanRedoLogStorageService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleRacOnSanRedoLogStorageService) UnmarshalBinary(b []byte) error {
	var res OracleRacOnSanRedoLogStorageService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HELLO RIPPY
