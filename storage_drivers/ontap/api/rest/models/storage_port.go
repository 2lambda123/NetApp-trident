// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StoragePort storage port
//
// swagger:model storage_port
type StoragePort struct {

	// board name
	BoardName string `json:"board_name,omitempty"`

	// cable
	Cable *StoragePortCable `json:"cable,omitempty"`

	// description
	// Example: SAS Host Adapter 2a (PMC-Sierra PM8072 rev. C)
	Description string `json:"description,omitempty"`

	// error
	Error *StoragePortError `json:"error,omitempty"`

	// mac address
	MacAddress string `json:"mac_address,omitempty"`

	// name
	// Example: 2a
	Name string `json:"name,omitempty"`

	// node
	Node *StoragePortNode `json:"node,omitempty"`

	// part number
	// Example: 111-03801
	PartNumber string `json:"part_number,omitempty"`

	// serial number
	// Example: 7A2463CC45B
	SerialNumber string `json:"serial_number,omitempty"`

	// Operational port speed in Gbps
	// Example: 6
	Speed float64 `json:"speed,omitempty"`

	// state
	// Example: online
	// Enum: [online offline error]
	State string `json:"state,omitempty"`

	// World Wide Name
	// Example: 50000d1703544b80
	Wwn string `json:"wwn,omitempty"`
}

// Validate validates this storage port
func (m *StoragePort) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StoragePort) validateCable(formats strfmt.Registry) error {
	if swag.IsZero(m.Cable) { // not required
		return nil
	}

	if m.Cable != nil {
		if err := m.Cable.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cable")
			}
			return err
		}
	}

	return nil
}

func (m *StoragePort) validateError(formats strfmt.Registry) error {
	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if m.Error != nil {
		if err := m.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *StoragePort) validateNode(formats strfmt.Registry) error {
	if swag.IsZero(m.Node) { // not required
		return nil
	}

	if m.Node != nil {
		if err := m.Node.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node")
			}
			return err
		}
	}

	return nil
}

var storagePortTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["online","offline","error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storagePortTypeStatePropEnum = append(storagePortTypeStatePropEnum, v)
	}
}

const (

	// BEGIN RIPPY DEBUGGING
	// storage_port
	// StoragePort
	// state
	// State
	// online
	// END RIPPY DEBUGGING
	// StoragePortStateOnline captures enum value "online"
	StoragePortStateOnline string = "online"

	// BEGIN RIPPY DEBUGGING
	// storage_port
	// StoragePort
	// state
	// State
	// offline
	// END RIPPY DEBUGGING
	// StoragePortStateOffline captures enum value "offline"
	StoragePortStateOffline string = "offline"

	// BEGIN RIPPY DEBUGGING
	// storage_port
	// StoragePort
	// state
	// State
	// error
	// END RIPPY DEBUGGING
	// StoragePortStateError captures enum value "error"
	StoragePortStateError string = "error"
)

// prop value enum
func (m *StoragePort) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, storagePortTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StoragePort) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this storage port based on the context it is used
func (m *StoragePort) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCable(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StoragePort) contextValidateCable(ctx context.Context, formats strfmt.Registry) error {

	if m.Cable != nil {
		if err := m.Cable.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cable")
			}
			return err
		}
	}

	return nil
}

func (m *StoragePort) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if m.Error != nil {
		if err := m.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *StoragePort) contextValidateNode(ctx context.Context, formats strfmt.Registry) error {

	if m.Node != nil {
		if err := m.Node.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StoragePort) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StoragePort) UnmarshalBinary(b []byte) error {
	var res StoragePort
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StoragePortCable storage port cable
//
// swagger:model StoragePortCable
type StoragePortCable struct {

	// identifier
	// Example: 500a0980000b6c3f-50000d1703544b80
	Identifier string `json:"identifier,omitempty"`

	// length
	// Example: 2m
	Length string `json:"length,omitempty"`

	// part number
	// Example: 112-00431+A0
	PartNumber string `json:"part_number,omitempty"`

	// serial number
	// Example: 616930439
	SerialNumber string `json:"serial_number,omitempty"`
}

// Validate validates this storage port cable
func (m *StoragePortCable) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this storage port cable based on context it is used
func (m *StoragePortCable) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StoragePortCable) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StoragePortCable) UnmarshalBinary(b []byte) error {
	var res StoragePortCable
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StoragePortError storage port error
//
// swagger:model StoragePortError
type StoragePortError struct {

	// Error corrective action
	CorrectiveAction string `json:"corrective_action,omitempty"`

	// Error message
	Message string `json:"message,omitempty"`
}

// Validate validates this storage port error
func (m *StoragePortError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this storage port error based on context it is used
func (m *StoragePortError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StoragePortError) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StoragePortError) UnmarshalBinary(b []byte) error {
	var res StoragePortError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StoragePortNode storage port node
//
// swagger:model StoragePortNode
type StoragePortNode struct {

	// links
	Links *StoragePortNodeLinks `json:"_links,omitempty"`

	// name
	// Example: node1
	Name string `json:"name,omitempty"`

	// uuid
	// Example: 1cd8a442-86d1-11e0-ae1c-123478563412
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this storage port node
func (m *StoragePortNode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StoragePortNode) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this storage port node based on the context it is used
func (m *StoragePortNode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StoragePortNode) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StoragePortNode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StoragePortNode) UnmarshalBinary(b []byte) error {
	var res StoragePortNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StoragePortNodeLinks storage port node links
//
// swagger:model StoragePortNodeLinks
type StoragePortNodeLinks struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this storage port node links
func (m *StoragePortNodeLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StoragePortNodeLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this storage port node links based on the context it is used
func (m *StoragePortNodeLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StoragePortNodeLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StoragePortNodeLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StoragePortNodeLinks) UnmarshalBinary(b []byte) error {
	var res StoragePortNodeLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HELLO RIPPY
