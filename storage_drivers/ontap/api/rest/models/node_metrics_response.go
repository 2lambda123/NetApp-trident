// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NodeMetricsResponse node metrics response
//
// swagger:model node_metrics_response
type NodeMetricsResponse struct {

	// links
	Links *NodeMetricsResponseLinks `json:"_links,omitempty"`

	// Number of records
	NumRecords int64 `json:"num_records,omitempty"`

	// records
	Records []*NodeMetricsResponseRecordsItems0 `json:"records,omitempty"`
}

// Validate validates this node metrics response
func (m *NodeMetricsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecords(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeMetricsResponse) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *NodeMetricsResponse) validateRecords(formats strfmt.Registry) error {
	if swag.IsZero(m.Records) { // not required
		return nil
	}

	for i := 0; i < len(m.Records); i++ {
		if swag.IsZero(m.Records[i]) { // not required
			continue
		}

		if m.Records[i] != nil {
			if err := m.Records[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("records" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this node metrics response based on the context it is used
func (m *NodeMetricsResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecords(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeMetricsResponse) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *NodeMetricsResponse) contextValidateRecords(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Records); i++ {

		if m.Records[i] != nil {
			if err := m.Records[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("records" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NodeMetricsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodeMetricsResponse) UnmarshalBinary(b []byte) error {
	var res NodeMetricsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NodeMetricsResponseLinks node metrics response links
//
// swagger:model NodeMetricsResponseLinks
type NodeMetricsResponseLinks struct {

	// next
	Next *Href `json:"next,omitempty"`

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this node metrics response links
func (m *NodeMetricsResponseLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeMetricsResponseLinks) validateNext(formats strfmt.Registry) error {
	if swag.IsZero(m.Next) { // not required
		return nil
	}

	if m.Next != nil {
		if err := m.Next.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "next")
			}
			return err
		}
	}

	return nil
}

func (m *NodeMetricsResponseLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this node metrics response links based on the context it is used
func (m *NodeMetricsResponseLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNext(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeMetricsResponseLinks) contextValidateNext(ctx context.Context, formats strfmt.Registry) error {

	if m.Next != nil {
		if err := m.Next.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "next")
			}
			return err
		}
	}

	return nil
}

func (m *NodeMetricsResponseLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NodeMetricsResponseLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodeMetricsResponseLinks) UnmarshalBinary(b []byte) error {
	var res NodeMetricsResponseLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NodeMetricsResponseRecordsItems0 CPU performance for the nodes.
//
// swagger:model NodeMetricsResponseRecordsItems0
type NodeMetricsResponseRecordsItems0 struct {

	// links
	Links *NodeMetricsResponseRecordsItems0Links `json:"_links,omitempty"`

	// The duration over which this sample is calculated. The time durations are represented in the ISO-8601 standard format. Samples can be calculated over the following durations:
	//
	// Example: PT15S
	// Enum: [PT15S PT5M PT30M PT2H P1D]
	Duration string `json:"duration,omitempty"`

	// Average CPU Utilization for the node
	// Example: 13
	ProcessorUtilization int64 `json:"processor_utilization,omitempty"`

	// Errors associated with the sample. For example, if the aggregation of data over multiple nodes fails, then any partial errors might return "ok" on success or "error" on an internal uncategorized failure. Whenever a sample collection is missed but done at a later time, it is back filled to the previous 15 second timestamp and tagged with "backfilled_data". "inconsistent_delta_time" is encountered when the time between two collections is not the same for all nodes. Therefore, the aggregated value might be over or under inflated. "Negative_delta" is returned when an expected monotonically increasing value has decreased in value. "inconsistent_old_data" is returned when one or more nodes do not have the latest data.
	// Example: ok
	// Enum: [ok error partial_no_data partial_no_uuid partial_no_response partial_other_error negative_delta backfilled_data inconsistent_delta_time inconsistent_old_data]
	Status string `json:"status,omitempty"`

	// The timestamp of the performance data.
	// Example: 2017-01-25T11:20:13Z
	// Format: date-time
	Timestamp *strfmt.DateTime `json:"timestamp,omitempty"`

	// uuid
	// Example: 1cd8a442-86d1-11e0-ae1c-123478563412
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this node metrics response records items0
func (m *NodeMetricsResponseRecordsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeMetricsResponseRecordsItems0) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

var nodeMetricsResponseRecordsItems0TypeDurationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PT15S","PT5M","PT30M","PT2H","P1D"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nodeMetricsResponseRecordsItems0TypeDurationPropEnum = append(nodeMetricsResponseRecordsItems0TypeDurationPropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// NodeMetricsResponseRecordsItems0
	// NodeMetricsResponseRecordsItems0
	// duration
	// Duration
	// PT15S
	// END DEBUGGING
	// NodeMetricsResponseRecordsItems0DurationPT15S captures enum value "PT15S"
	NodeMetricsResponseRecordsItems0DurationPT15S string = "PT15S"

	// BEGIN DEBUGGING
	// NodeMetricsResponseRecordsItems0
	// NodeMetricsResponseRecordsItems0
	// duration
	// Duration
	// PT5M
	// END DEBUGGING
	// NodeMetricsResponseRecordsItems0DurationPT5M captures enum value "PT5M"
	NodeMetricsResponseRecordsItems0DurationPT5M string = "PT5M"

	// BEGIN DEBUGGING
	// NodeMetricsResponseRecordsItems0
	// NodeMetricsResponseRecordsItems0
	// duration
	// Duration
	// PT30M
	// END DEBUGGING
	// NodeMetricsResponseRecordsItems0DurationPT30M captures enum value "PT30M"
	NodeMetricsResponseRecordsItems0DurationPT30M string = "PT30M"

	// BEGIN DEBUGGING
	// NodeMetricsResponseRecordsItems0
	// NodeMetricsResponseRecordsItems0
	// duration
	// Duration
	// PT2H
	// END DEBUGGING
	// NodeMetricsResponseRecordsItems0DurationPT2H captures enum value "PT2H"
	NodeMetricsResponseRecordsItems0DurationPT2H string = "PT2H"

	// BEGIN DEBUGGING
	// NodeMetricsResponseRecordsItems0
	// NodeMetricsResponseRecordsItems0
	// duration
	// Duration
	// P1D
	// END DEBUGGING
	// NodeMetricsResponseRecordsItems0DurationP1D captures enum value "P1D"
	NodeMetricsResponseRecordsItems0DurationP1D string = "P1D"
)

// prop value enum
func (m *NodeMetricsResponseRecordsItems0) validateDurationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, nodeMetricsResponseRecordsItems0TypeDurationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NodeMetricsResponseRecordsItems0) validateDuration(formats strfmt.Registry) error {
	if swag.IsZero(m.Duration) { // not required
		return nil
	}

	// value enum
	if err := m.validateDurationEnum("duration", "body", m.Duration); err != nil {
		return err
	}

	return nil
}

var nodeMetricsResponseRecordsItems0TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ok","error","partial_no_data","partial_no_uuid","partial_no_response","partial_other_error","negative_delta","backfilled_data","inconsistent_delta_time","inconsistent_old_data"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nodeMetricsResponseRecordsItems0TypeStatusPropEnum = append(nodeMetricsResponseRecordsItems0TypeStatusPropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// NodeMetricsResponseRecordsItems0
	// NodeMetricsResponseRecordsItems0
	// status
	// Status
	// ok
	// END DEBUGGING
	// NodeMetricsResponseRecordsItems0StatusOk captures enum value "ok"
	NodeMetricsResponseRecordsItems0StatusOk string = "ok"

	// BEGIN DEBUGGING
	// NodeMetricsResponseRecordsItems0
	// NodeMetricsResponseRecordsItems0
	// status
	// Status
	// error
	// END DEBUGGING
	// NodeMetricsResponseRecordsItems0StatusError captures enum value "error"
	NodeMetricsResponseRecordsItems0StatusError string = "error"

	// BEGIN DEBUGGING
	// NodeMetricsResponseRecordsItems0
	// NodeMetricsResponseRecordsItems0
	// status
	// Status
	// partial_no_data
	// END DEBUGGING
	// NodeMetricsResponseRecordsItems0StatusPartialNoData captures enum value "partial_no_data"
	NodeMetricsResponseRecordsItems0StatusPartialNoData string = "partial_no_data"

	// BEGIN DEBUGGING
	// NodeMetricsResponseRecordsItems0
	// NodeMetricsResponseRecordsItems0
	// status
	// Status
	// partial_no_uuid
	// END DEBUGGING
	// NodeMetricsResponseRecordsItems0StatusPartialNoUUID captures enum value "partial_no_uuid"
	NodeMetricsResponseRecordsItems0StatusPartialNoUUID string = "partial_no_uuid"

	// BEGIN DEBUGGING
	// NodeMetricsResponseRecordsItems0
	// NodeMetricsResponseRecordsItems0
	// status
	// Status
	// partial_no_response
	// END DEBUGGING
	// NodeMetricsResponseRecordsItems0StatusPartialNoResponse captures enum value "partial_no_response"
	NodeMetricsResponseRecordsItems0StatusPartialNoResponse string = "partial_no_response"

	// BEGIN DEBUGGING
	// NodeMetricsResponseRecordsItems0
	// NodeMetricsResponseRecordsItems0
	// status
	// Status
	// partial_other_error
	// END DEBUGGING
	// NodeMetricsResponseRecordsItems0StatusPartialOtherError captures enum value "partial_other_error"
	NodeMetricsResponseRecordsItems0StatusPartialOtherError string = "partial_other_error"

	// BEGIN DEBUGGING
	// NodeMetricsResponseRecordsItems0
	// NodeMetricsResponseRecordsItems0
	// status
	// Status
	// negative_delta
	// END DEBUGGING
	// NodeMetricsResponseRecordsItems0StatusNegativeDelta captures enum value "negative_delta"
	NodeMetricsResponseRecordsItems0StatusNegativeDelta string = "negative_delta"

	// BEGIN DEBUGGING
	// NodeMetricsResponseRecordsItems0
	// NodeMetricsResponseRecordsItems0
	// status
	// Status
	// backfilled_data
	// END DEBUGGING
	// NodeMetricsResponseRecordsItems0StatusBackfilledData captures enum value "backfilled_data"
	NodeMetricsResponseRecordsItems0StatusBackfilledData string = "backfilled_data"

	// BEGIN DEBUGGING
	// NodeMetricsResponseRecordsItems0
	// NodeMetricsResponseRecordsItems0
	// status
	// Status
	// inconsistent_delta_time
	// END DEBUGGING
	// NodeMetricsResponseRecordsItems0StatusInconsistentDeltaTime captures enum value "inconsistent_delta_time"
	NodeMetricsResponseRecordsItems0StatusInconsistentDeltaTime string = "inconsistent_delta_time"

	// BEGIN DEBUGGING
	// NodeMetricsResponseRecordsItems0
	// NodeMetricsResponseRecordsItems0
	// status
	// Status
	// inconsistent_old_data
	// END DEBUGGING
	// NodeMetricsResponseRecordsItems0StatusInconsistentOldData captures enum value "inconsistent_old_data"
	NodeMetricsResponseRecordsItems0StatusInconsistentOldData string = "inconsistent_old_data"
)

// prop value enum
func (m *NodeMetricsResponseRecordsItems0) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, nodeMetricsResponseRecordsItems0TypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NodeMetricsResponseRecordsItems0) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *NodeMetricsResponseRecordsItems0) validateTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this node metrics response records items0 based on the context it is used
func (m *NodeMetricsResponseRecordsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeMetricsResponseRecordsItems0) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NodeMetricsResponseRecordsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodeMetricsResponseRecordsItems0) UnmarshalBinary(b []byte) error {
	var res NodeMetricsResponseRecordsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NodeMetricsResponseRecordsItems0Links node metrics response records items0 links
//
// swagger:model NodeMetricsResponseRecordsItems0Links
type NodeMetricsResponseRecordsItems0Links struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this node metrics response records items0 links
func (m *NodeMetricsResponseRecordsItems0Links) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeMetricsResponseRecordsItems0Links) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this node metrics response records items0 links based on the context it is used
func (m *NodeMetricsResponseRecordsItems0Links) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeMetricsResponseRecordsItems0Links) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NodeMetricsResponseRecordsItems0Links) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodeMetricsResponseRecordsItems0Links) UnmarshalBinary(b []byte) error {
	var res NodeMetricsResponseRecordsItems0Links
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
