// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FcZone A Fibre Channel zone.
//
// swagger:model fc_zone
type FcZone struct {

	// links
	Links *FcZoneLinks `json:"_links,omitempty"`

	// cache
	Cache *FcZoneCache `json:"cache,omitempty"`

	// fabric
	Fabric *FcZoneFabric `json:"fabric,omitempty"`

	// An array of Fibre Channel zone members.
	//
	Members []*FcZoneMembersItems0 `json:"members,omitempty"`

	// The name of the Fibre Channel zone.
	//
	// Example: zone1
	// Read Only: true
	Name string `json:"name,omitempty"`
}

// Validate validates this fc zone
func (m *FcZone) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCache(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFabric(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMembers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FcZone) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *FcZone) validateCache(formats strfmt.Registry) error {
	if swag.IsZero(m.Cache) { // not required
		return nil
	}

	if m.Cache != nil {
		if err := m.Cache.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cache")
			}
			return err
		}
	}

	return nil
}

func (m *FcZone) validateFabric(formats strfmt.Registry) error {
	if swag.IsZero(m.Fabric) { // not required
		return nil
	}

	if m.Fabric != nil {
		if err := m.Fabric.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fabric")
			}
			return err
		}
	}

	return nil
}

func (m *FcZone) validateMembers(formats strfmt.Registry) error {
	if swag.IsZero(m.Members) { // not required
		return nil
	}

	for i := 0; i < len(m.Members); i++ {
		if swag.IsZero(m.Members[i]) { // not required
			continue
		}

		if m.Members[i] != nil {
			if err := m.Members[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("members" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this fc zone based on the context it is used
func (m *FcZone) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCache(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFabric(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMembers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FcZone) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *FcZone) contextValidateCache(ctx context.Context, formats strfmt.Registry) error {

	if m.Cache != nil {
		if err := m.Cache.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cache")
			}
			return err
		}
	}

	return nil
}

func (m *FcZone) contextValidateFabric(ctx context.Context, formats strfmt.Registry) error {

	if m.Fabric != nil {
		if err := m.Fabric.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fabric")
			}
			return err
		}
	}

	return nil
}

func (m *FcZone) contextValidateMembers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Members); i++ {

		if m.Members[i] != nil {
			if err := m.Members[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("members" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FcZone) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FcZone) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FcZone) UnmarshalBinary(b []byte) error {
	var res FcZone
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FcZoneCache Properties of Fibre Chanel fabric cache.
//
// swagger:model FcZoneCache
type FcZoneCache struct {

	// The age of the Fibre Channel fabric data cache retrieved. If the FC fabric data cache has not been fully updated for a newly discovered fabric, or a fabric that has been re-discovered after being purged, a value for this property will not be retrieved. The value is in ISO 8601 duration format.
	//
	// Example: PT3M30S
	// Read Only: true
	Age string `json:"age,omitempty"`

	// A boolean that indicates if the retrieved data is current relative to the `cache.maximum_age` value of the request. A value of `true` indicates that the data is no older than the requested maximum age. A value of `false` indicates that the data is older than the requested maximum age; if more current data is required, the caller should wait for some time for the cache update to complete and query the data again.
	//
	// Read Only: true
	IsCurrent *bool `json:"is_current,omitempty"`

	// The date and time at which the Fibre Channel fabric data cache retrieved was last updated. If the FC fabric data cache has not been fully updated for a newly discovered fabric, or a fabric that has been re-discovered after being purged, a value for this property will not be retrieved.
	//
	// Read Only: true
	// Format: date-time
	UpdateTime *strfmt.DateTime `json:"update_time,omitempty"`
}

// Validate validates this fc zone cache
func (m *FcZoneCache) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FcZoneCache) validateUpdateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("cache"+"."+"update_time", "body", "date-time", m.UpdateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this fc zone cache based on the context it is used
func (m *FcZoneCache) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAge(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsCurrent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdateTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FcZoneCache) contextValidateAge(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "cache"+"."+"age", "body", string(m.Age)); err != nil {
		return err
	}

	return nil
}

func (m *FcZoneCache) contextValidateIsCurrent(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "cache"+"."+"is_current", "body", m.IsCurrent); err != nil {
		return err
	}

	return nil
}

func (m *FcZoneCache) contextValidateUpdateTime(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "cache"+"."+"update_time", "body", m.UpdateTime); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FcZoneCache) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FcZoneCache) UnmarshalBinary(b []byte) error {
	var res FcZoneCache
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FcZoneFabric A reference to a Fibre Channel fabric.
//
// swagger:model FcZoneFabric
type FcZoneFabric struct {

	// links
	Links *FcZoneFabricLinks `json:"_links,omitempty"`

	// The world wide name (WWN) of the primary switch of the Fibre Channel (FC) fabric. This is used as a unique identifier for the FC fabric.
	//
	// Example: 10:00:d1:d2:d3:d4:d5:d6
	Name string `json:"name,omitempty"`
}

// Validate validates this fc zone fabric
func (m *FcZoneFabric) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FcZoneFabric) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fabric" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this fc zone fabric based on the context it is used
func (m *FcZoneFabric) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FcZoneFabric) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fabric" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FcZoneFabric) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FcZoneFabric) UnmarshalBinary(b []byte) error {
	var res FcZoneFabric
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FcZoneFabricLinks fc zone fabric links
//
// swagger:model FcZoneFabricLinks
type FcZoneFabricLinks struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this fc zone fabric links
func (m *FcZoneFabricLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FcZoneFabricLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fabric" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this fc zone fabric links based on the context it is used
func (m *FcZoneFabricLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FcZoneFabricLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fabric" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FcZoneFabricLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FcZoneFabricLinks) UnmarshalBinary(b []byte) error {
	var res FcZoneFabricLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FcZoneLinks fc zone links
//
// swagger:model FcZoneLinks
type FcZoneLinks struct {

	// self
	Self *Href `json:"self,omitempty"`
}

// Validate validates this fc zone links
func (m *FcZoneLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FcZoneLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this fc zone links based on the context it is used
func (m *FcZoneLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FcZoneLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FcZoneLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FcZoneLinks) UnmarshalBinary(b []byte) error {
	var res FcZoneLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FcZoneMembersItems0 A Fibre Channel zone member.
//
// swagger:model FcZoneMembersItems0
type FcZoneMembersItems0 struct {

	// The identifying property value of the zone member. The format of this value depends on the member type:
	//   * `port_id`: A zero-filled 6-digit hexadecimal value with a 0x prefer. Example: 0x0000A0.
	//   * `port_name`: A world-wide name. Example: 10:00:12:34:56:78:9a:bc.
	//   * `domain_id_port`: A domain ID and a port ID as decimal integers separated by a slash. Example: 1/2.
	//   * `node_name`: A world-wide name. Example: 10:00:11:22:33:44:55:66.
	//   * `fabric_port_name`: A world-wide name. Example: 10:00:ab:cd:ef:12:34:56.
	// #####
	// The following types might not report a name:
	//   * `interface`
	//   * `domain_interface`
	//   * `ip_address`
	//   * `symbolic_node_name`
	//   * `device_alias`
	//
	// Example: 10:00:12:34:56:78:9a:bc
	// Read Only: true
	Name string `json:"name,omitempty"`

	// The type of Fibre Channel zone member. This value should be used to interpret the contents of the `name` property.
	//
	// Example: port_name
	// Read Only: true
	// Enum: [port_id port_name domain_id_port node_name fabric_port_name interface domain_interface ip_address symbolic_node_name device_alias]
	Type string `json:"type,omitempty"`
}

// Validate validates this fc zone members items0
func (m *FcZoneMembersItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var fcZoneMembersItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["port_id","port_name","domain_id_port","node_name","fabric_port_name","interface","domain_interface","ip_address","symbolic_node_name","device_alias"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fcZoneMembersItems0TypeTypePropEnum = append(fcZoneMembersItems0TypeTypePropEnum, v)
	}
}

const (

	// BEGIN DEBUGGING
	// FcZoneMembersItems0
	// FcZoneMembersItems0
	// type
	// Type
	// port_id
	// END DEBUGGING
	// FcZoneMembersItems0TypePortID captures enum value "port_id"
	FcZoneMembersItems0TypePortID string = "port_id"

	// BEGIN DEBUGGING
	// FcZoneMembersItems0
	// FcZoneMembersItems0
	// type
	// Type
	// port_name
	// END DEBUGGING
	// FcZoneMembersItems0TypePortName captures enum value "port_name"
	FcZoneMembersItems0TypePortName string = "port_name"

	// BEGIN DEBUGGING
	// FcZoneMembersItems0
	// FcZoneMembersItems0
	// type
	// Type
	// domain_id_port
	// END DEBUGGING
	// FcZoneMembersItems0TypeDomainIDPort captures enum value "domain_id_port"
	FcZoneMembersItems0TypeDomainIDPort string = "domain_id_port"

	// BEGIN DEBUGGING
	// FcZoneMembersItems0
	// FcZoneMembersItems0
	// type
	// Type
	// node_name
	// END DEBUGGING
	// FcZoneMembersItems0TypeNodeName captures enum value "node_name"
	FcZoneMembersItems0TypeNodeName string = "node_name"

	// BEGIN DEBUGGING
	// FcZoneMembersItems0
	// FcZoneMembersItems0
	// type
	// Type
	// fabric_port_name
	// END DEBUGGING
	// FcZoneMembersItems0TypeFabricPortName captures enum value "fabric_port_name"
	FcZoneMembersItems0TypeFabricPortName string = "fabric_port_name"

	// BEGIN DEBUGGING
	// FcZoneMembersItems0
	// FcZoneMembersItems0
	// type
	// Type
	// interface
	// END DEBUGGING
	// FcZoneMembersItems0TypeInterface captures enum value "interface"
	FcZoneMembersItems0TypeInterface string = "interface"

	// BEGIN DEBUGGING
	// FcZoneMembersItems0
	// FcZoneMembersItems0
	// type
	// Type
	// domain_interface
	// END DEBUGGING
	// FcZoneMembersItems0TypeDomainInterface captures enum value "domain_interface"
	FcZoneMembersItems0TypeDomainInterface string = "domain_interface"

	// BEGIN DEBUGGING
	// FcZoneMembersItems0
	// FcZoneMembersItems0
	// type
	// Type
	// ip_address
	// END DEBUGGING
	// FcZoneMembersItems0TypeIPAddress captures enum value "ip_address"
	FcZoneMembersItems0TypeIPAddress string = "ip_address"

	// BEGIN DEBUGGING
	// FcZoneMembersItems0
	// FcZoneMembersItems0
	// type
	// Type
	// symbolic_node_name
	// END DEBUGGING
	// FcZoneMembersItems0TypeSymbolicNodeName captures enum value "symbolic_node_name"
	FcZoneMembersItems0TypeSymbolicNodeName string = "symbolic_node_name"

	// BEGIN DEBUGGING
	// FcZoneMembersItems0
	// FcZoneMembersItems0
	// type
	// Type
	// device_alias
	// END DEBUGGING
	// FcZoneMembersItems0TypeDeviceAlias captures enum value "device_alias"
	FcZoneMembersItems0TypeDeviceAlias string = "device_alias"
)

// prop value enum
func (m *FcZoneMembersItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, fcZoneMembersItems0TypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FcZoneMembersItems0) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this fc zone members items0 based on the context it is used
func (m *FcZoneMembersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FcZoneMembersItems0) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *FcZoneMembersItems0) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(m.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FcZoneMembersItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FcZoneMembersItems0) UnmarshalBinary(b []byte) error {
	var res FcZoneMembersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
