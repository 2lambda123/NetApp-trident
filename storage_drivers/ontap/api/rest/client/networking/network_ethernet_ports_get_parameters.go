// Code generated by go-swagger; DO NOT EDIT.

package networking

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewNetworkEthernetPortsGetParams creates a new NetworkEthernetPortsGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewNetworkEthernetPortsGetParams() *NetworkEthernetPortsGetParams {
	return &NetworkEthernetPortsGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewNetworkEthernetPortsGetParamsWithTimeout creates a new NetworkEthernetPortsGetParams object
// with the ability to set a timeout on a request.
func NewNetworkEthernetPortsGetParamsWithTimeout(timeout time.Duration) *NetworkEthernetPortsGetParams {
	return &NetworkEthernetPortsGetParams{
		timeout: timeout,
	}
}

// NewNetworkEthernetPortsGetParamsWithContext creates a new NetworkEthernetPortsGetParams object
// with the ability to set a context for a request.
func NewNetworkEthernetPortsGetParamsWithContext(ctx context.Context) *NetworkEthernetPortsGetParams {
	return &NetworkEthernetPortsGetParams{
		Context: ctx,
	}
}

// NewNetworkEthernetPortsGetParamsWithHTTPClient creates a new NetworkEthernetPortsGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewNetworkEthernetPortsGetParamsWithHTTPClient(client *http.Client) *NetworkEthernetPortsGetParams {
	return &NetworkEthernetPortsGetParams{
		HTTPClient: client,
	}
}

/* NetworkEthernetPortsGetParams contains all the parameters to send to the API endpoint
   for the network ethernet ports get operation.

   Typically these are written to a http.Request.
*/
type NetworkEthernetPortsGetParams struct {

	/* BroadcastDomainIpspaceName.

	   Filter by broadcast_domain.ipspace.name
	*/
	BroadcastDomainIPspaceNameQueryParameter *string

	/* BroadcastDomainName.

	   Filter by broadcast_domain.name
	*/
	BroadcastDomainNameQueryParameter *string

	/* BroadcastDomainUUID.

	   Filter by broadcast_domain.uuid
	*/
	BroadcastDomainUUIDQueryParameter *string

	/* Enabled.

	   Filter by enabled
	*/
	EnabledQueryParameter *bool

	/* Fields.

	   Specify the fields to return.
	*/
	FieldsQueryParameter []string

	/* LagActivePortsName.

	   Filter by lag.active_ports.name
	*/
	LagActivePortsNameQueryParameter *string

	/* LagActivePortsNodeName.

	   Filter by lag.active_ports.node.name
	*/
	LagActivePortsNodeNameQueryParameter *string

	/* LagActivePortsUUID.

	   Filter by lag.active_ports.uuid
	*/
	LagActivePortsUUIDQueryParameter *string

	/* LagDistributionPolicy.

	   Filter by lag.distribution_policy
	*/
	LagDistributionPolicyQueryParameter *string

	/* LagMemberPortsName.

	   Filter by lag.member_ports.name
	*/
	LagMemberPortsNameQueryParameter *string

	/* LagMemberPortsNodeName.

	   Filter by lag.member_ports.node.name
	*/
	LagMemberPortsNodeNameQueryParameter *string

	/* LagMemberPortsUUID.

	   Filter by lag.member_ports.uuid
	*/
	LagMemberPortsUUIDQueryParameter *string

	/* LagMode.

	   Filter by lag.mode
	*/
	LagModeQueryParameter *string

	/* MacAddress.

	   Filter by mac_address
	*/
	MacAddressQueryParameter *string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecordsQueryParameter *int64

	/* MetricDuration.

	   Filter by metric.duration
	*/
	MetricDurationQueryParameter *string

	/* MetricStatus.

	   Filter by metric.status
	*/
	MetricStatusQueryParameter *string

	/* MetricThroughputRead.

	   Filter by metric.throughput.read
	*/
	MetricThroughputReadQueryParameter *int64

	/* MetricThroughputTotal.

	   Filter by metric.throughput.total
	*/
	MetricThroughputTotalQueryParameter *int64

	/* MetricThroughputWrite.

	   Filter by metric.throughput.write
	*/
	MetricThroughputWriteQueryParameter *int64

	/* MetricTimestamp.

	   Filter by metric.timestamp
	*/
	MetricTimestampQueryParameter *string

	/* Mtu.

	   Filter by mtu
	*/
	MtuQueryParameter *int64

	/* Name.

	   Filter by name
	*/
	NameQueryParameter *string

	/* NodeName.

	   Filter by node.name
	*/
	NodeNameQueryParameter *string

	/* NodeUUID.

	   Filter by node.uuid
	*/
	NodeUUIDQueryParameter *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderByQueryParameter []string

	/* Reachability.

	   Filter by reachability
	*/
	ReachabilityQueryParameter *string

	/* ReachableBroadcastDomainsIpspaceName.

	   Filter by reachable_broadcast_domains.ipspace.name
	*/
	ReachableBroadcastDomainsIPspaceNameQueryParameter *string

	/* ReachableBroadcastDomainsName.

	   Filter by reachable_broadcast_domains.name
	*/
	ReachableBroadcastDomainsNameQueryParameter *string

	/* ReachableBroadcastDomainsUUID.

	   Filter by reachable_broadcast_domains.uuid
	*/
	ReachableBroadcastDomainsUUIDQueryParameter *string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecordsQueryParameter *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeoutQueryParameter *int64

	/* Speed.

	   Filter by speed
	*/
	SpeedQueryParameter *int64

	/* State.

	   Filter by state
	*/
	StateQueryParameter *string

	/* StatisticsDeviceLinkDownCountRaw.

	   Filter by statistics.device.link_down_count_raw
	*/
	StatisticsDeviceLinkDownCountRawQueryParameter *int64

	/* StatisticsDeviceReceiveRawDiscards.

	   Filter by statistics.device.receive_raw.discards
	*/
	StatisticsDeviceReceiveRawDiscardsQueryParameter *int64

	/* StatisticsDeviceReceiveRawErrors.

	   Filter by statistics.device.receive_raw.errors
	*/
	StatisticsDeviceReceiveRawErrorsQueryParameter *int64

	/* StatisticsDeviceReceiveRawPackets.

	   Filter by statistics.device.receive_raw.packets
	*/
	StatisticsDeviceReceiveRawPacketsQueryParameter *int64

	/* StatisticsDeviceTimestamp.

	   Filter by statistics.device.timestamp
	*/
	StatisticsDeviceTimestampQueryParameter *string

	/* StatisticsDeviceTransmitRawDiscards.

	   Filter by statistics.device.transmit_raw.discards
	*/
	StatisticsDeviceTransmitRawDiscardsQueryParameter *int64

	/* StatisticsDeviceTransmitRawErrors.

	   Filter by statistics.device.transmit_raw.errors
	*/
	StatisticsDeviceTransmitRawErrorsQueryParameter *int64

	/* StatisticsDeviceTransmitRawPackets.

	   Filter by statistics.device.transmit_raw.packets
	*/
	StatisticsDeviceTransmitRawPacketsQueryParameter *int64

	/* StatisticsStatus.

	   Filter by statistics.status
	*/
	StatisticsStatusQueryParameter *string

	/* StatisticsThroughputRawRead.

	   Filter by statistics.throughput_raw.read
	*/
	StatisticsThroughputRawReadQueryParameter *int64

	/* StatisticsThroughputRawTotal.

	   Filter by statistics.throughput_raw.total
	*/
	StatisticsThroughputRawTotalQueryParameter *int64

	/* StatisticsThroughputRawWrite.

	   Filter by statistics.throughput_raw.write
	*/
	StatisticsThroughputRawWriteQueryParameter *int64

	/* StatisticsTimestamp.

	   Filter by statistics.timestamp
	*/
	StatisticsTimestampQueryParameter *string

	/* Type.

	   Filter by type
	*/
	TypeQueryParameter *string

	/* UUID.

	   Filter by uuid
	*/
	UUIDQueryParameter *string

	/* VlanBasePortName.

	   Filter by vlan.base_port.name
	*/
	VlanBasePortNameQueryParameter *string

	/* VlanBasePortNodeName.

	   Filter by vlan.base_port.node.name
	*/
	VlanBasePortNodeNameQueryParameter *string

	/* VlanBasePortUUID.

	   Filter by vlan.base_port.uuid
	*/
	VlanBasePortUUIDQueryParameter *string

	/* VlanTag.

	   Filter by vlan.tag
	*/
	VlanTagQueryParameter *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the network ethernet ports get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NetworkEthernetPortsGetParams) WithDefaults() *NetworkEthernetPortsGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the network ethernet ports get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NetworkEthernetPortsGetParams) SetDefaults() {
	var (
		returnRecordsQueryParameterDefault = bool(true)

		returnTimeoutQueryParameterDefault = int64(15)
	)

	val := NetworkEthernetPortsGetParams{
		ReturnRecordsQueryParameter: &returnRecordsQueryParameterDefault,
		ReturnTimeoutQueryParameter: &returnTimeoutQueryParameterDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithTimeout(timeout time.Duration) *NetworkEthernetPortsGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithContext(ctx context.Context) *NetworkEthernetPortsGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithHTTPClient(client *http.Client) *NetworkEthernetPortsGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBroadcastDomainIPspaceNameQueryParameter adds the broadcastDomainIpspaceName to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithBroadcastDomainIPspaceNameQueryParameter(broadcastDomainIpspaceName *string) *NetworkEthernetPortsGetParams {
	o.SetBroadcastDomainIPspaceNameQueryParameter(broadcastDomainIpspaceName)
	return o
}

// SetBroadcastDomainIPspaceNameQueryParameter adds the broadcastDomainIpspaceName to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetBroadcastDomainIPspaceNameQueryParameter(broadcastDomainIpspaceName *string) {
	o.BroadcastDomainIPspaceNameQueryParameter = broadcastDomainIpspaceName
}

// WithBroadcastDomainNameQueryParameter adds the broadcastDomainName to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithBroadcastDomainNameQueryParameter(broadcastDomainName *string) *NetworkEthernetPortsGetParams {
	o.SetBroadcastDomainNameQueryParameter(broadcastDomainName)
	return o
}

// SetBroadcastDomainNameQueryParameter adds the broadcastDomainName to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetBroadcastDomainNameQueryParameter(broadcastDomainName *string) {
	o.BroadcastDomainNameQueryParameter = broadcastDomainName
}

// WithBroadcastDomainUUIDQueryParameter adds the broadcastDomainUUID to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithBroadcastDomainUUIDQueryParameter(broadcastDomainUUID *string) *NetworkEthernetPortsGetParams {
	o.SetBroadcastDomainUUIDQueryParameter(broadcastDomainUUID)
	return o
}

// SetBroadcastDomainUUIDQueryParameter adds the broadcastDomainUuid to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetBroadcastDomainUUIDQueryParameter(broadcastDomainUUID *string) {
	o.BroadcastDomainUUIDQueryParameter = broadcastDomainUUID
}

// WithEnabledQueryParameter adds the enabled to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithEnabledQueryParameter(enabled *bool) *NetworkEthernetPortsGetParams {
	o.SetEnabledQueryParameter(enabled)
	return o
}

// SetEnabledQueryParameter adds the enabled to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetEnabledQueryParameter(enabled *bool) {
	o.EnabledQueryParameter = enabled
}

// WithFieldsQueryParameter adds the fields to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithFieldsQueryParameter(fields []string) *NetworkEthernetPortsGetParams {
	o.SetFieldsQueryParameter(fields)
	return o
}

// SetFieldsQueryParameter adds the fields to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetFieldsQueryParameter(fields []string) {
	o.FieldsQueryParameter = fields
}

// WithLagActivePortsNameQueryParameter adds the lagActivePortsName to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithLagActivePortsNameQueryParameter(lagActivePortsName *string) *NetworkEthernetPortsGetParams {
	o.SetLagActivePortsNameQueryParameter(lagActivePortsName)
	return o
}

// SetLagActivePortsNameQueryParameter adds the lagActivePortsName to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetLagActivePortsNameQueryParameter(lagActivePortsName *string) {
	o.LagActivePortsNameQueryParameter = lagActivePortsName
}

// WithLagActivePortsNodeNameQueryParameter adds the lagActivePortsNodeName to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithLagActivePortsNodeNameQueryParameter(lagActivePortsNodeName *string) *NetworkEthernetPortsGetParams {
	o.SetLagActivePortsNodeNameQueryParameter(lagActivePortsNodeName)
	return o
}

// SetLagActivePortsNodeNameQueryParameter adds the lagActivePortsNodeName to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetLagActivePortsNodeNameQueryParameter(lagActivePortsNodeName *string) {
	o.LagActivePortsNodeNameQueryParameter = lagActivePortsNodeName
}

// WithLagActivePortsUUIDQueryParameter adds the lagActivePortsUUID to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithLagActivePortsUUIDQueryParameter(lagActivePortsUUID *string) *NetworkEthernetPortsGetParams {
	o.SetLagActivePortsUUIDQueryParameter(lagActivePortsUUID)
	return o
}

// SetLagActivePortsUUIDQueryParameter adds the lagActivePortsUuid to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetLagActivePortsUUIDQueryParameter(lagActivePortsUUID *string) {
	o.LagActivePortsUUIDQueryParameter = lagActivePortsUUID
}

// WithLagDistributionPolicyQueryParameter adds the lagDistributionPolicy to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithLagDistributionPolicyQueryParameter(lagDistributionPolicy *string) *NetworkEthernetPortsGetParams {
	o.SetLagDistributionPolicyQueryParameter(lagDistributionPolicy)
	return o
}

// SetLagDistributionPolicyQueryParameter adds the lagDistributionPolicy to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetLagDistributionPolicyQueryParameter(lagDistributionPolicy *string) {
	o.LagDistributionPolicyQueryParameter = lagDistributionPolicy
}

// WithLagMemberPortsNameQueryParameter adds the lagMemberPortsName to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithLagMemberPortsNameQueryParameter(lagMemberPortsName *string) *NetworkEthernetPortsGetParams {
	o.SetLagMemberPortsNameQueryParameter(lagMemberPortsName)
	return o
}

// SetLagMemberPortsNameQueryParameter adds the lagMemberPortsName to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetLagMemberPortsNameQueryParameter(lagMemberPortsName *string) {
	o.LagMemberPortsNameQueryParameter = lagMemberPortsName
}

// WithLagMemberPortsNodeNameQueryParameter adds the lagMemberPortsNodeName to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithLagMemberPortsNodeNameQueryParameter(lagMemberPortsNodeName *string) *NetworkEthernetPortsGetParams {
	o.SetLagMemberPortsNodeNameQueryParameter(lagMemberPortsNodeName)
	return o
}

// SetLagMemberPortsNodeNameQueryParameter adds the lagMemberPortsNodeName to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetLagMemberPortsNodeNameQueryParameter(lagMemberPortsNodeName *string) {
	o.LagMemberPortsNodeNameQueryParameter = lagMemberPortsNodeName
}

// WithLagMemberPortsUUIDQueryParameter adds the lagMemberPortsUUID to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithLagMemberPortsUUIDQueryParameter(lagMemberPortsUUID *string) *NetworkEthernetPortsGetParams {
	o.SetLagMemberPortsUUIDQueryParameter(lagMemberPortsUUID)
	return o
}

// SetLagMemberPortsUUIDQueryParameter adds the lagMemberPortsUuid to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetLagMemberPortsUUIDQueryParameter(lagMemberPortsUUID *string) {
	o.LagMemberPortsUUIDQueryParameter = lagMemberPortsUUID
}

// WithLagModeQueryParameter adds the lagMode to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithLagModeQueryParameter(lagMode *string) *NetworkEthernetPortsGetParams {
	o.SetLagModeQueryParameter(lagMode)
	return o
}

// SetLagModeQueryParameter adds the lagMode to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetLagModeQueryParameter(lagMode *string) {
	o.LagModeQueryParameter = lagMode
}

// WithMacAddressQueryParameter adds the macAddress to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithMacAddressQueryParameter(macAddress *string) *NetworkEthernetPortsGetParams {
	o.SetMacAddressQueryParameter(macAddress)
	return o
}

// SetMacAddressQueryParameter adds the macAddress to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetMacAddressQueryParameter(macAddress *string) {
	o.MacAddressQueryParameter = macAddress
}

// WithMaxRecordsQueryParameter adds the maxRecords to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithMaxRecordsQueryParameter(maxRecords *int64) *NetworkEthernetPortsGetParams {
	o.SetMaxRecordsQueryParameter(maxRecords)
	return o
}

// SetMaxRecordsQueryParameter adds the maxRecords to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetMaxRecordsQueryParameter(maxRecords *int64) {
	o.MaxRecordsQueryParameter = maxRecords
}

// WithMetricDurationQueryParameter adds the metricDuration to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithMetricDurationQueryParameter(metricDuration *string) *NetworkEthernetPortsGetParams {
	o.SetMetricDurationQueryParameter(metricDuration)
	return o
}

// SetMetricDurationQueryParameter adds the metricDuration to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetMetricDurationQueryParameter(metricDuration *string) {
	o.MetricDurationQueryParameter = metricDuration
}

// WithMetricStatusQueryParameter adds the metricStatus to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithMetricStatusQueryParameter(metricStatus *string) *NetworkEthernetPortsGetParams {
	o.SetMetricStatusQueryParameter(metricStatus)
	return o
}

// SetMetricStatusQueryParameter adds the metricStatus to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetMetricStatusQueryParameter(metricStatus *string) {
	o.MetricStatusQueryParameter = metricStatus
}

// WithMetricThroughputReadQueryParameter adds the metricThroughputRead to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithMetricThroughputReadQueryParameter(metricThroughputRead *int64) *NetworkEthernetPortsGetParams {
	o.SetMetricThroughputReadQueryParameter(metricThroughputRead)
	return o
}

// SetMetricThroughputReadQueryParameter adds the metricThroughputRead to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetMetricThroughputReadQueryParameter(metricThroughputRead *int64) {
	o.MetricThroughputReadQueryParameter = metricThroughputRead
}

// WithMetricThroughputTotalQueryParameter adds the metricThroughputTotal to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithMetricThroughputTotalQueryParameter(metricThroughputTotal *int64) *NetworkEthernetPortsGetParams {
	o.SetMetricThroughputTotalQueryParameter(metricThroughputTotal)
	return o
}

// SetMetricThroughputTotalQueryParameter adds the metricThroughputTotal to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetMetricThroughputTotalQueryParameter(metricThroughputTotal *int64) {
	o.MetricThroughputTotalQueryParameter = metricThroughputTotal
}

// WithMetricThroughputWriteQueryParameter adds the metricThroughputWrite to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithMetricThroughputWriteQueryParameter(metricThroughputWrite *int64) *NetworkEthernetPortsGetParams {
	o.SetMetricThroughputWriteQueryParameter(metricThroughputWrite)
	return o
}

// SetMetricThroughputWriteQueryParameter adds the metricThroughputWrite to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetMetricThroughputWriteQueryParameter(metricThroughputWrite *int64) {
	o.MetricThroughputWriteQueryParameter = metricThroughputWrite
}

// WithMetricTimestampQueryParameter adds the metricTimestamp to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithMetricTimestampQueryParameter(metricTimestamp *string) *NetworkEthernetPortsGetParams {
	o.SetMetricTimestampQueryParameter(metricTimestamp)
	return o
}

// SetMetricTimestampQueryParameter adds the metricTimestamp to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetMetricTimestampQueryParameter(metricTimestamp *string) {
	o.MetricTimestampQueryParameter = metricTimestamp
}

// WithMtuQueryParameter adds the mtu to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithMtuQueryParameter(mtu *int64) *NetworkEthernetPortsGetParams {
	o.SetMtuQueryParameter(mtu)
	return o
}

// SetMtuQueryParameter adds the mtu to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetMtuQueryParameter(mtu *int64) {
	o.MtuQueryParameter = mtu
}

// WithNameQueryParameter adds the name to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithNameQueryParameter(name *string) *NetworkEthernetPortsGetParams {
	o.SetNameQueryParameter(name)
	return o
}

// SetNameQueryParameter adds the name to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetNameQueryParameter(name *string) {
	o.NameQueryParameter = name
}

// WithNodeNameQueryParameter adds the nodeName to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithNodeNameQueryParameter(nodeName *string) *NetworkEthernetPortsGetParams {
	o.SetNodeNameQueryParameter(nodeName)
	return o
}

// SetNodeNameQueryParameter adds the nodeName to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetNodeNameQueryParameter(nodeName *string) {
	o.NodeNameQueryParameter = nodeName
}

// WithNodeUUIDQueryParameter adds the nodeUUID to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithNodeUUIDQueryParameter(nodeUUID *string) *NetworkEthernetPortsGetParams {
	o.SetNodeUUIDQueryParameter(nodeUUID)
	return o
}

// SetNodeUUIDQueryParameter adds the nodeUuid to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetNodeUUIDQueryParameter(nodeUUID *string) {
	o.NodeUUIDQueryParameter = nodeUUID
}

// WithOrderByQueryParameter adds the orderBy to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithOrderByQueryParameter(orderBy []string) *NetworkEthernetPortsGetParams {
	o.SetOrderByQueryParameter(orderBy)
	return o
}

// SetOrderByQueryParameter adds the orderBy to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetOrderByQueryParameter(orderBy []string) {
	o.OrderByQueryParameter = orderBy
}

// WithReachabilityQueryParameter adds the reachability to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithReachabilityQueryParameter(reachability *string) *NetworkEthernetPortsGetParams {
	o.SetReachabilityQueryParameter(reachability)
	return o
}

// SetReachabilityQueryParameter adds the reachability to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetReachabilityQueryParameter(reachability *string) {
	o.ReachabilityQueryParameter = reachability
}

// WithReachableBroadcastDomainsIPspaceNameQueryParameter adds the reachableBroadcastDomainsIpspaceName to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithReachableBroadcastDomainsIPspaceNameQueryParameter(reachableBroadcastDomainsIpspaceName *string) *NetworkEthernetPortsGetParams {
	o.SetReachableBroadcastDomainsIPspaceNameQueryParameter(reachableBroadcastDomainsIpspaceName)
	return o
}

// SetReachableBroadcastDomainsIPspaceNameQueryParameter adds the reachableBroadcastDomainsIpspaceName to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetReachableBroadcastDomainsIPspaceNameQueryParameter(reachableBroadcastDomainsIpspaceName *string) {
	o.ReachableBroadcastDomainsIPspaceNameQueryParameter = reachableBroadcastDomainsIpspaceName
}

// WithReachableBroadcastDomainsNameQueryParameter adds the reachableBroadcastDomainsName to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithReachableBroadcastDomainsNameQueryParameter(reachableBroadcastDomainsName *string) *NetworkEthernetPortsGetParams {
	o.SetReachableBroadcastDomainsNameQueryParameter(reachableBroadcastDomainsName)
	return o
}

// SetReachableBroadcastDomainsNameQueryParameter adds the reachableBroadcastDomainsName to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetReachableBroadcastDomainsNameQueryParameter(reachableBroadcastDomainsName *string) {
	o.ReachableBroadcastDomainsNameQueryParameter = reachableBroadcastDomainsName
}

// WithReachableBroadcastDomainsUUIDQueryParameter adds the reachableBroadcastDomainsUUID to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithReachableBroadcastDomainsUUIDQueryParameter(reachableBroadcastDomainsUUID *string) *NetworkEthernetPortsGetParams {
	o.SetReachableBroadcastDomainsUUIDQueryParameter(reachableBroadcastDomainsUUID)
	return o
}

// SetReachableBroadcastDomainsUUIDQueryParameter adds the reachableBroadcastDomainsUuid to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetReachableBroadcastDomainsUUIDQueryParameter(reachableBroadcastDomainsUUID *string) {
	o.ReachableBroadcastDomainsUUIDQueryParameter = reachableBroadcastDomainsUUID
}

// WithReturnRecordsQueryParameter adds the returnRecords to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithReturnRecordsQueryParameter(returnRecords *bool) *NetworkEthernetPortsGetParams {
	o.SetReturnRecordsQueryParameter(returnRecords)
	return o
}

// SetReturnRecordsQueryParameter adds the returnRecords to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetReturnRecordsQueryParameter(returnRecords *bool) {
	o.ReturnRecordsQueryParameter = returnRecords
}

// WithReturnTimeoutQueryParameter adds the returnTimeout to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithReturnTimeoutQueryParameter(returnTimeout *int64) *NetworkEthernetPortsGetParams {
	o.SetReturnTimeoutQueryParameter(returnTimeout)
	return o
}

// SetReturnTimeoutQueryParameter adds the returnTimeout to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetReturnTimeoutQueryParameter(returnTimeout *int64) {
	o.ReturnTimeoutQueryParameter = returnTimeout
}

// WithSpeedQueryParameter adds the speed to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithSpeedQueryParameter(speed *int64) *NetworkEthernetPortsGetParams {
	o.SetSpeedQueryParameter(speed)
	return o
}

// SetSpeedQueryParameter adds the speed to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetSpeedQueryParameter(speed *int64) {
	o.SpeedQueryParameter = speed
}

// WithStateQueryParameter adds the state to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithStateQueryParameter(state *string) *NetworkEthernetPortsGetParams {
	o.SetStateQueryParameter(state)
	return o
}

// SetStateQueryParameter adds the state to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetStateQueryParameter(state *string) {
	o.StateQueryParameter = state
}

// WithStatisticsDeviceLinkDownCountRawQueryParameter adds the statisticsDeviceLinkDownCountRaw to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithStatisticsDeviceLinkDownCountRawQueryParameter(statisticsDeviceLinkDownCountRaw *int64) *NetworkEthernetPortsGetParams {
	o.SetStatisticsDeviceLinkDownCountRawQueryParameter(statisticsDeviceLinkDownCountRaw)
	return o
}

// SetStatisticsDeviceLinkDownCountRawQueryParameter adds the statisticsDeviceLinkDownCountRaw to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetStatisticsDeviceLinkDownCountRawQueryParameter(statisticsDeviceLinkDownCountRaw *int64) {
	o.StatisticsDeviceLinkDownCountRawQueryParameter = statisticsDeviceLinkDownCountRaw
}

// WithStatisticsDeviceReceiveRawDiscardsQueryParameter adds the statisticsDeviceReceiveRawDiscards to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithStatisticsDeviceReceiveRawDiscardsQueryParameter(statisticsDeviceReceiveRawDiscards *int64) *NetworkEthernetPortsGetParams {
	o.SetStatisticsDeviceReceiveRawDiscardsQueryParameter(statisticsDeviceReceiveRawDiscards)
	return o
}

// SetStatisticsDeviceReceiveRawDiscardsQueryParameter adds the statisticsDeviceReceiveRawDiscards to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetStatisticsDeviceReceiveRawDiscardsQueryParameter(statisticsDeviceReceiveRawDiscards *int64) {
	o.StatisticsDeviceReceiveRawDiscardsQueryParameter = statisticsDeviceReceiveRawDiscards
}

// WithStatisticsDeviceReceiveRawErrorsQueryParameter adds the statisticsDeviceReceiveRawErrors to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithStatisticsDeviceReceiveRawErrorsQueryParameter(statisticsDeviceReceiveRawErrors *int64) *NetworkEthernetPortsGetParams {
	o.SetStatisticsDeviceReceiveRawErrorsQueryParameter(statisticsDeviceReceiveRawErrors)
	return o
}

// SetStatisticsDeviceReceiveRawErrorsQueryParameter adds the statisticsDeviceReceiveRawErrors to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetStatisticsDeviceReceiveRawErrorsQueryParameter(statisticsDeviceReceiveRawErrors *int64) {
	o.StatisticsDeviceReceiveRawErrorsQueryParameter = statisticsDeviceReceiveRawErrors
}

// WithStatisticsDeviceReceiveRawPacketsQueryParameter adds the statisticsDeviceReceiveRawPackets to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithStatisticsDeviceReceiveRawPacketsQueryParameter(statisticsDeviceReceiveRawPackets *int64) *NetworkEthernetPortsGetParams {
	o.SetStatisticsDeviceReceiveRawPacketsQueryParameter(statisticsDeviceReceiveRawPackets)
	return o
}

// SetStatisticsDeviceReceiveRawPacketsQueryParameter adds the statisticsDeviceReceiveRawPackets to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetStatisticsDeviceReceiveRawPacketsQueryParameter(statisticsDeviceReceiveRawPackets *int64) {
	o.StatisticsDeviceReceiveRawPacketsQueryParameter = statisticsDeviceReceiveRawPackets
}

// WithStatisticsDeviceTimestampQueryParameter adds the statisticsDeviceTimestamp to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithStatisticsDeviceTimestampQueryParameter(statisticsDeviceTimestamp *string) *NetworkEthernetPortsGetParams {
	o.SetStatisticsDeviceTimestampQueryParameter(statisticsDeviceTimestamp)
	return o
}

// SetStatisticsDeviceTimestampQueryParameter adds the statisticsDeviceTimestamp to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetStatisticsDeviceTimestampQueryParameter(statisticsDeviceTimestamp *string) {
	o.StatisticsDeviceTimestampQueryParameter = statisticsDeviceTimestamp
}

// WithStatisticsDeviceTransmitRawDiscardsQueryParameter adds the statisticsDeviceTransmitRawDiscards to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithStatisticsDeviceTransmitRawDiscardsQueryParameter(statisticsDeviceTransmitRawDiscards *int64) *NetworkEthernetPortsGetParams {
	o.SetStatisticsDeviceTransmitRawDiscardsQueryParameter(statisticsDeviceTransmitRawDiscards)
	return o
}

// SetStatisticsDeviceTransmitRawDiscardsQueryParameter adds the statisticsDeviceTransmitRawDiscards to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetStatisticsDeviceTransmitRawDiscardsQueryParameter(statisticsDeviceTransmitRawDiscards *int64) {
	o.StatisticsDeviceTransmitRawDiscardsQueryParameter = statisticsDeviceTransmitRawDiscards
}

// WithStatisticsDeviceTransmitRawErrorsQueryParameter adds the statisticsDeviceTransmitRawErrors to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithStatisticsDeviceTransmitRawErrorsQueryParameter(statisticsDeviceTransmitRawErrors *int64) *NetworkEthernetPortsGetParams {
	o.SetStatisticsDeviceTransmitRawErrorsQueryParameter(statisticsDeviceTransmitRawErrors)
	return o
}

// SetStatisticsDeviceTransmitRawErrorsQueryParameter adds the statisticsDeviceTransmitRawErrors to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetStatisticsDeviceTransmitRawErrorsQueryParameter(statisticsDeviceTransmitRawErrors *int64) {
	o.StatisticsDeviceTransmitRawErrorsQueryParameter = statisticsDeviceTransmitRawErrors
}

// WithStatisticsDeviceTransmitRawPacketsQueryParameter adds the statisticsDeviceTransmitRawPackets to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithStatisticsDeviceTransmitRawPacketsQueryParameter(statisticsDeviceTransmitRawPackets *int64) *NetworkEthernetPortsGetParams {
	o.SetStatisticsDeviceTransmitRawPacketsQueryParameter(statisticsDeviceTransmitRawPackets)
	return o
}

// SetStatisticsDeviceTransmitRawPacketsQueryParameter adds the statisticsDeviceTransmitRawPackets to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetStatisticsDeviceTransmitRawPacketsQueryParameter(statisticsDeviceTransmitRawPackets *int64) {
	o.StatisticsDeviceTransmitRawPacketsQueryParameter = statisticsDeviceTransmitRawPackets
}

// WithStatisticsStatusQueryParameter adds the statisticsStatus to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithStatisticsStatusQueryParameter(statisticsStatus *string) *NetworkEthernetPortsGetParams {
	o.SetStatisticsStatusQueryParameter(statisticsStatus)
	return o
}

// SetStatisticsStatusQueryParameter adds the statisticsStatus to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetStatisticsStatusQueryParameter(statisticsStatus *string) {
	o.StatisticsStatusQueryParameter = statisticsStatus
}

// WithStatisticsThroughputRawReadQueryParameter adds the statisticsThroughputRawRead to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithStatisticsThroughputRawReadQueryParameter(statisticsThroughputRawRead *int64) *NetworkEthernetPortsGetParams {
	o.SetStatisticsThroughputRawReadQueryParameter(statisticsThroughputRawRead)
	return o
}

// SetStatisticsThroughputRawReadQueryParameter adds the statisticsThroughputRawRead to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetStatisticsThroughputRawReadQueryParameter(statisticsThroughputRawRead *int64) {
	o.StatisticsThroughputRawReadQueryParameter = statisticsThroughputRawRead
}

// WithStatisticsThroughputRawTotalQueryParameter adds the statisticsThroughputRawTotal to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithStatisticsThroughputRawTotalQueryParameter(statisticsThroughputRawTotal *int64) *NetworkEthernetPortsGetParams {
	o.SetStatisticsThroughputRawTotalQueryParameter(statisticsThroughputRawTotal)
	return o
}

// SetStatisticsThroughputRawTotalQueryParameter adds the statisticsThroughputRawTotal to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetStatisticsThroughputRawTotalQueryParameter(statisticsThroughputRawTotal *int64) {
	o.StatisticsThroughputRawTotalQueryParameter = statisticsThroughputRawTotal
}

// WithStatisticsThroughputRawWriteQueryParameter adds the statisticsThroughputRawWrite to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithStatisticsThroughputRawWriteQueryParameter(statisticsThroughputRawWrite *int64) *NetworkEthernetPortsGetParams {
	o.SetStatisticsThroughputRawWriteQueryParameter(statisticsThroughputRawWrite)
	return o
}

// SetStatisticsThroughputRawWriteQueryParameter adds the statisticsThroughputRawWrite to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetStatisticsThroughputRawWriteQueryParameter(statisticsThroughputRawWrite *int64) {
	o.StatisticsThroughputRawWriteQueryParameter = statisticsThroughputRawWrite
}

// WithStatisticsTimestampQueryParameter adds the statisticsTimestamp to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithStatisticsTimestampQueryParameter(statisticsTimestamp *string) *NetworkEthernetPortsGetParams {
	o.SetStatisticsTimestampQueryParameter(statisticsTimestamp)
	return o
}

// SetStatisticsTimestampQueryParameter adds the statisticsTimestamp to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetStatisticsTimestampQueryParameter(statisticsTimestamp *string) {
	o.StatisticsTimestampQueryParameter = statisticsTimestamp
}

// WithTypeQueryParameter adds the typeVar to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithTypeQueryParameter(typeVar *string) *NetworkEthernetPortsGetParams {
	o.SetTypeQueryParameter(typeVar)
	return o
}

// SetTypeQueryParameter adds the type to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetTypeQueryParameter(typeVar *string) {
	o.TypeQueryParameter = typeVar
}

// WithUUIDQueryParameter adds the uuid to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithUUIDQueryParameter(uuid *string) *NetworkEthernetPortsGetParams {
	o.SetUUIDQueryParameter(uuid)
	return o
}

// SetUUIDQueryParameter adds the uuid to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetUUIDQueryParameter(uuid *string) {
	o.UUIDQueryParameter = uuid
}

// WithVlanBasePortNameQueryParameter adds the vlanBasePortName to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithVlanBasePortNameQueryParameter(vlanBasePortName *string) *NetworkEthernetPortsGetParams {
	o.SetVlanBasePortNameQueryParameter(vlanBasePortName)
	return o
}

// SetVlanBasePortNameQueryParameter adds the vlanBasePortName to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetVlanBasePortNameQueryParameter(vlanBasePortName *string) {
	o.VlanBasePortNameQueryParameter = vlanBasePortName
}

// WithVlanBasePortNodeNameQueryParameter adds the vlanBasePortNodeName to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithVlanBasePortNodeNameQueryParameter(vlanBasePortNodeName *string) *NetworkEthernetPortsGetParams {
	o.SetVlanBasePortNodeNameQueryParameter(vlanBasePortNodeName)
	return o
}

// SetVlanBasePortNodeNameQueryParameter adds the vlanBasePortNodeName to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetVlanBasePortNodeNameQueryParameter(vlanBasePortNodeName *string) {
	o.VlanBasePortNodeNameQueryParameter = vlanBasePortNodeName
}

// WithVlanBasePortUUIDQueryParameter adds the vlanBasePortUUID to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithVlanBasePortUUIDQueryParameter(vlanBasePortUUID *string) *NetworkEthernetPortsGetParams {
	o.SetVlanBasePortUUIDQueryParameter(vlanBasePortUUID)
	return o
}

// SetVlanBasePortUUIDQueryParameter adds the vlanBasePortUuid to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetVlanBasePortUUIDQueryParameter(vlanBasePortUUID *string) {
	o.VlanBasePortUUIDQueryParameter = vlanBasePortUUID
}

// WithVlanTagQueryParameter adds the vlanTag to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithVlanTagQueryParameter(vlanTag *int64) *NetworkEthernetPortsGetParams {
	o.SetVlanTagQueryParameter(vlanTag)
	return o
}

// SetVlanTagQueryParameter adds the vlanTag to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetVlanTagQueryParameter(vlanTag *int64) {
	o.VlanTagQueryParameter = vlanTag
}

// WriteToRequest writes these params to a swagger request
func (o *NetworkEthernetPortsGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.BroadcastDomainIPspaceNameQueryParameter != nil {

		// query param broadcast_domain.ipspace.name
		var qrBroadcastDomainIpspaceName string

		if o.BroadcastDomainIPspaceNameQueryParameter != nil {
			qrBroadcastDomainIpspaceName = *o.BroadcastDomainIPspaceNameQueryParameter
		}
		qBroadcastDomainIpspaceName := qrBroadcastDomainIpspaceName
		if qBroadcastDomainIpspaceName != "" {

			if err := r.SetQueryParam("broadcast_domain.ipspace.name", qBroadcastDomainIpspaceName); err != nil {
				return err
			}
		}
	}

	if o.BroadcastDomainNameQueryParameter != nil {

		// query param broadcast_domain.name
		var qrBroadcastDomainName string

		if o.BroadcastDomainNameQueryParameter != nil {
			qrBroadcastDomainName = *o.BroadcastDomainNameQueryParameter
		}
		qBroadcastDomainName := qrBroadcastDomainName
		if qBroadcastDomainName != "" {

			if err := r.SetQueryParam("broadcast_domain.name", qBroadcastDomainName); err != nil {
				return err
			}
		}
	}

	if o.BroadcastDomainUUIDQueryParameter != nil {

		// query param broadcast_domain.uuid
		var qrBroadcastDomainUUID string

		if o.BroadcastDomainUUIDQueryParameter != nil {
			qrBroadcastDomainUUID = *o.BroadcastDomainUUIDQueryParameter
		}
		qBroadcastDomainUUID := qrBroadcastDomainUUID
		if qBroadcastDomainUUID != "" {

			if err := r.SetQueryParam("broadcast_domain.uuid", qBroadcastDomainUUID); err != nil {
				return err
			}
		}
	}

	if o.EnabledQueryParameter != nil {

		// query param enabled
		var qrEnabled bool

		if o.EnabledQueryParameter != nil {
			qrEnabled = *o.EnabledQueryParameter
		}
		qEnabled := swag.FormatBool(qrEnabled)
		if qEnabled != "" {

			if err := r.SetQueryParam("enabled", qEnabled); err != nil {
				return err
			}
		}
	}

	if o.FieldsQueryParameter != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.LagActivePortsNameQueryParameter != nil {

		// query param lag.active_ports.name
		var qrLagActivePortsName string

		if o.LagActivePortsNameQueryParameter != nil {
			qrLagActivePortsName = *o.LagActivePortsNameQueryParameter
		}
		qLagActivePortsName := qrLagActivePortsName
		if qLagActivePortsName != "" {

			if err := r.SetQueryParam("lag.active_ports.name", qLagActivePortsName); err != nil {
				return err
			}
		}
	}

	if o.LagActivePortsNodeNameQueryParameter != nil {

		// query param lag.active_ports.node.name
		var qrLagActivePortsNodeName string

		if o.LagActivePortsNodeNameQueryParameter != nil {
			qrLagActivePortsNodeName = *o.LagActivePortsNodeNameQueryParameter
		}
		qLagActivePortsNodeName := qrLagActivePortsNodeName
		if qLagActivePortsNodeName != "" {

			if err := r.SetQueryParam("lag.active_ports.node.name", qLagActivePortsNodeName); err != nil {
				return err
			}
		}
	}

	if o.LagActivePortsUUIDQueryParameter != nil {

		// query param lag.active_ports.uuid
		var qrLagActivePortsUUID string

		if o.LagActivePortsUUIDQueryParameter != nil {
			qrLagActivePortsUUID = *o.LagActivePortsUUIDQueryParameter
		}
		qLagActivePortsUUID := qrLagActivePortsUUID
		if qLagActivePortsUUID != "" {

			if err := r.SetQueryParam("lag.active_ports.uuid", qLagActivePortsUUID); err != nil {
				return err
			}
		}
	}

	if o.LagDistributionPolicyQueryParameter != nil {

		// query param lag.distribution_policy
		var qrLagDistributionPolicy string

		if o.LagDistributionPolicyQueryParameter != nil {
			qrLagDistributionPolicy = *o.LagDistributionPolicyQueryParameter
		}
		qLagDistributionPolicy := qrLagDistributionPolicy
		if qLagDistributionPolicy != "" {

			if err := r.SetQueryParam("lag.distribution_policy", qLagDistributionPolicy); err != nil {
				return err
			}
		}
	}

	if o.LagMemberPortsNameQueryParameter != nil {

		// query param lag.member_ports.name
		var qrLagMemberPortsName string

		if o.LagMemberPortsNameQueryParameter != nil {
			qrLagMemberPortsName = *o.LagMemberPortsNameQueryParameter
		}
		qLagMemberPortsName := qrLagMemberPortsName
		if qLagMemberPortsName != "" {

			if err := r.SetQueryParam("lag.member_ports.name", qLagMemberPortsName); err != nil {
				return err
			}
		}
	}

	if o.LagMemberPortsNodeNameQueryParameter != nil {

		// query param lag.member_ports.node.name
		var qrLagMemberPortsNodeName string

		if o.LagMemberPortsNodeNameQueryParameter != nil {
			qrLagMemberPortsNodeName = *o.LagMemberPortsNodeNameQueryParameter
		}
		qLagMemberPortsNodeName := qrLagMemberPortsNodeName
		if qLagMemberPortsNodeName != "" {

			if err := r.SetQueryParam("lag.member_ports.node.name", qLagMemberPortsNodeName); err != nil {
				return err
			}
		}
	}

	if o.LagMemberPortsUUIDQueryParameter != nil {

		// query param lag.member_ports.uuid
		var qrLagMemberPortsUUID string

		if o.LagMemberPortsUUIDQueryParameter != nil {
			qrLagMemberPortsUUID = *o.LagMemberPortsUUIDQueryParameter
		}
		qLagMemberPortsUUID := qrLagMemberPortsUUID
		if qLagMemberPortsUUID != "" {

			if err := r.SetQueryParam("lag.member_ports.uuid", qLagMemberPortsUUID); err != nil {
				return err
			}
		}
	}

	if o.LagModeQueryParameter != nil {

		// query param lag.mode
		var qrLagMode string

		if o.LagModeQueryParameter != nil {
			qrLagMode = *o.LagModeQueryParameter
		}
		qLagMode := qrLagMode
		if qLagMode != "" {

			if err := r.SetQueryParam("lag.mode", qLagMode); err != nil {
				return err
			}
		}
	}

	if o.MacAddressQueryParameter != nil {

		// query param mac_address
		var qrMacAddress string

		if o.MacAddressQueryParameter != nil {
			qrMacAddress = *o.MacAddressQueryParameter
		}
		qMacAddress := qrMacAddress
		if qMacAddress != "" {

			if err := r.SetQueryParam("mac_address", qMacAddress); err != nil {
				return err
			}
		}
	}

	if o.MaxRecordsQueryParameter != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecordsQueryParameter != nil {
			qrMaxRecords = *o.MaxRecordsQueryParameter
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.MetricDurationQueryParameter != nil {

		// query param metric.duration
		var qrMetricDuration string

		if o.MetricDurationQueryParameter != nil {
			qrMetricDuration = *o.MetricDurationQueryParameter
		}
		qMetricDuration := qrMetricDuration
		if qMetricDuration != "" {

			if err := r.SetQueryParam("metric.duration", qMetricDuration); err != nil {
				return err
			}
		}
	}

	if o.MetricStatusQueryParameter != nil {

		// query param metric.status
		var qrMetricStatus string

		if o.MetricStatusQueryParameter != nil {
			qrMetricStatus = *o.MetricStatusQueryParameter
		}
		qMetricStatus := qrMetricStatus
		if qMetricStatus != "" {

			if err := r.SetQueryParam("metric.status", qMetricStatus); err != nil {
				return err
			}
		}
	}

	if o.MetricThroughputReadQueryParameter != nil {

		// query param metric.throughput.read
		var qrMetricThroughputRead int64

		if o.MetricThroughputReadQueryParameter != nil {
			qrMetricThroughputRead = *o.MetricThroughputReadQueryParameter
		}
		qMetricThroughputRead := swag.FormatInt64(qrMetricThroughputRead)
		if qMetricThroughputRead != "" {

			if err := r.SetQueryParam("metric.throughput.read", qMetricThroughputRead); err != nil {
				return err
			}
		}
	}

	if o.MetricThroughputTotalQueryParameter != nil {

		// query param metric.throughput.total
		var qrMetricThroughputTotal int64

		if o.MetricThroughputTotalQueryParameter != nil {
			qrMetricThroughputTotal = *o.MetricThroughputTotalQueryParameter
		}
		qMetricThroughputTotal := swag.FormatInt64(qrMetricThroughputTotal)
		if qMetricThroughputTotal != "" {

			if err := r.SetQueryParam("metric.throughput.total", qMetricThroughputTotal); err != nil {
				return err
			}
		}
	}

	if o.MetricThroughputWriteQueryParameter != nil {

		// query param metric.throughput.write
		var qrMetricThroughputWrite int64

		if o.MetricThroughputWriteQueryParameter != nil {
			qrMetricThroughputWrite = *o.MetricThroughputWriteQueryParameter
		}
		qMetricThroughputWrite := swag.FormatInt64(qrMetricThroughputWrite)
		if qMetricThroughputWrite != "" {

			if err := r.SetQueryParam("metric.throughput.write", qMetricThroughputWrite); err != nil {
				return err
			}
		}
	}

	if o.MetricTimestampQueryParameter != nil {

		// query param metric.timestamp
		var qrMetricTimestamp string

		if o.MetricTimestampQueryParameter != nil {
			qrMetricTimestamp = *o.MetricTimestampQueryParameter
		}
		qMetricTimestamp := qrMetricTimestamp
		if qMetricTimestamp != "" {

			if err := r.SetQueryParam("metric.timestamp", qMetricTimestamp); err != nil {
				return err
			}
		}
	}

	if o.MtuQueryParameter != nil {

		// query param mtu
		var qrMtu int64

		if o.MtuQueryParameter != nil {
			qrMtu = *o.MtuQueryParameter
		}
		qMtu := swag.FormatInt64(qrMtu)
		if qMtu != "" {

			if err := r.SetQueryParam("mtu", qMtu); err != nil {
				return err
			}
		}
	}

	if o.NameQueryParameter != nil {

		// query param name
		var qrName string

		if o.NameQueryParameter != nil {
			qrName = *o.NameQueryParameter
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.NodeNameQueryParameter != nil {

		// query param node.name
		var qrNodeName string

		if o.NodeNameQueryParameter != nil {
			qrNodeName = *o.NodeNameQueryParameter
		}
		qNodeName := qrNodeName
		if qNodeName != "" {

			if err := r.SetQueryParam("node.name", qNodeName); err != nil {
				return err
			}
		}
	}

	if o.NodeUUIDQueryParameter != nil {

		// query param node.uuid
		var qrNodeUUID string

		if o.NodeUUIDQueryParameter != nil {
			qrNodeUUID = *o.NodeUUIDQueryParameter
		}
		qNodeUUID := qrNodeUUID
		if qNodeUUID != "" {

			if err := r.SetQueryParam("node.uuid", qNodeUUID); err != nil {
				return err
			}
		}
	}

	if o.OrderByQueryParameter != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.ReachabilityQueryParameter != nil {

		// query param reachability
		var qrReachability string

		if o.ReachabilityQueryParameter != nil {
			qrReachability = *o.ReachabilityQueryParameter
		}
		qReachability := qrReachability
		if qReachability != "" {

			if err := r.SetQueryParam("reachability", qReachability); err != nil {
				return err
			}
		}
	}

	if o.ReachableBroadcastDomainsIPspaceNameQueryParameter != nil {

		// query param reachable_broadcast_domains.ipspace.name
		var qrReachableBroadcastDomainsIpspaceName string

		if o.ReachableBroadcastDomainsIPspaceNameQueryParameter != nil {
			qrReachableBroadcastDomainsIpspaceName = *o.ReachableBroadcastDomainsIPspaceNameQueryParameter
		}
		qReachableBroadcastDomainsIpspaceName := qrReachableBroadcastDomainsIpspaceName
		if qReachableBroadcastDomainsIpspaceName != "" {

			if err := r.SetQueryParam("reachable_broadcast_domains.ipspace.name", qReachableBroadcastDomainsIpspaceName); err != nil {
				return err
			}
		}
	}

	if o.ReachableBroadcastDomainsNameQueryParameter != nil {

		// query param reachable_broadcast_domains.name
		var qrReachableBroadcastDomainsName string

		if o.ReachableBroadcastDomainsNameQueryParameter != nil {
			qrReachableBroadcastDomainsName = *o.ReachableBroadcastDomainsNameQueryParameter
		}
		qReachableBroadcastDomainsName := qrReachableBroadcastDomainsName
		if qReachableBroadcastDomainsName != "" {

			if err := r.SetQueryParam("reachable_broadcast_domains.name", qReachableBroadcastDomainsName); err != nil {
				return err
			}
		}
	}

	if o.ReachableBroadcastDomainsUUIDQueryParameter != nil {

		// query param reachable_broadcast_domains.uuid
		var qrReachableBroadcastDomainsUUID string

		if o.ReachableBroadcastDomainsUUIDQueryParameter != nil {
			qrReachableBroadcastDomainsUUID = *o.ReachableBroadcastDomainsUUIDQueryParameter
		}
		qReachableBroadcastDomainsUUID := qrReachableBroadcastDomainsUUID
		if qReachableBroadcastDomainsUUID != "" {

			if err := r.SetQueryParam("reachable_broadcast_domains.uuid", qReachableBroadcastDomainsUUID); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecordsQueryParameter != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecordsQueryParameter != nil {
			qrReturnRecords = *o.ReturnRecordsQueryParameter
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeoutQueryParameter != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeoutQueryParameter != nil {
			qrReturnTimeout = *o.ReturnTimeoutQueryParameter
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.SpeedQueryParameter != nil {

		// query param speed
		var qrSpeed int64

		if o.SpeedQueryParameter != nil {
			qrSpeed = *o.SpeedQueryParameter
		}
		qSpeed := swag.FormatInt64(qrSpeed)
		if qSpeed != "" {

			if err := r.SetQueryParam("speed", qSpeed); err != nil {
				return err
			}
		}
	}

	if o.StateQueryParameter != nil {

		// query param state
		var qrState string

		if o.StateQueryParameter != nil {
			qrState = *o.StateQueryParameter
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if o.StatisticsDeviceLinkDownCountRawQueryParameter != nil {

		// query param statistics.device.link_down_count_raw
		var qrStatisticsDeviceLinkDownCountRaw int64

		if o.StatisticsDeviceLinkDownCountRawQueryParameter != nil {
			qrStatisticsDeviceLinkDownCountRaw = *o.StatisticsDeviceLinkDownCountRawQueryParameter
		}
		qStatisticsDeviceLinkDownCountRaw := swag.FormatInt64(qrStatisticsDeviceLinkDownCountRaw)
		if qStatisticsDeviceLinkDownCountRaw != "" {

			if err := r.SetQueryParam("statistics.device.link_down_count_raw", qStatisticsDeviceLinkDownCountRaw); err != nil {
				return err
			}
		}
	}

	if o.StatisticsDeviceReceiveRawDiscardsQueryParameter != nil {

		// query param statistics.device.receive_raw.discards
		var qrStatisticsDeviceReceiveRawDiscards int64

		if o.StatisticsDeviceReceiveRawDiscardsQueryParameter != nil {
			qrStatisticsDeviceReceiveRawDiscards = *o.StatisticsDeviceReceiveRawDiscardsQueryParameter
		}
		qStatisticsDeviceReceiveRawDiscards := swag.FormatInt64(qrStatisticsDeviceReceiveRawDiscards)
		if qStatisticsDeviceReceiveRawDiscards != "" {

			if err := r.SetQueryParam("statistics.device.receive_raw.discards", qStatisticsDeviceReceiveRawDiscards); err != nil {
				return err
			}
		}
	}

	if o.StatisticsDeviceReceiveRawErrorsQueryParameter != nil {

		// query param statistics.device.receive_raw.errors
		var qrStatisticsDeviceReceiveRawErrors int64

		if o.StatisticsDeviceReceiveRawErrorsQueryParameter != nil {
			qrStatisticsDeviceReceiveRawErrors = *o.StatisticsDeviceReceiveRawErrorsQueryParameter
		}
		qStatisticsDeviceReceiveRawErrors := swag.FormatInt64(qrStatisticsDeviceReceiveRawErrors)
		if qStatisticsDeviceReceiveRawErrors != "" {

			if err := r.SetQueryParam("statistics.device.receive_raw.errors", qStatisticsDeviceReceiveRawErrors); err != nil {
				return err
			}
		}
	}

	if o.StatisticsDeviceReceiveRawPacketsQueryParameter != nil {

		// query param statistics.device.receive_raw.packets
		var qrStatisticsDeviceReceiveRawPackets int64

		if o.StatisticsDeviceReceiveRawPacketsQueryParameter != nil {
			qrStatisticsDeviceReceiveRawPackets = *o.StatisticsDeviceReceiveRawPacketsQueryParameter
		}
		qStatisticsDeviceReceiveRawPackets := swag.FormatInt64(qrStatisticsDeviceReceiveRawPackets)
		if qStatisticsDeviceReceiveRawPackets != "" {

			if err := r.SetQueryParam("statistics.device.receive_raw.packets", qStatisticsDeviceReceiveRawPackets); err != nil {
				return err
			}
		}
	}

	if o.StatisticsDeviceTimestampQueryParameter != nil {

		// query param statistics.device.timestamp
		var qrStatisticsDeviceTimestamp string

		if o.StatisticsDeviceTimestampQueryParameter != nil {
			qrStatisticsDeviceTimestamp = *o.StatisticsDeviceTimestampQueryParameter
		}
		qStatisticsDeviceTimestamp := qrStatisticsDeviceTimestamp
		if qStatisticsDeviceTimestamp != "" {

			if err := r.SetQueryParam("statistics.device.timestamp", qStatisticsDeviceTimestamp); err != nil {
				return err
			}
		}
	}

	if o.StatisticsDeviceTransmitRawDiscardsQueryParameter != nil {

		// query param statistics.device.transmit_raw.discards
		var qrStatisticsDeviceTransmitRawDiscards int64

		if o.StatisticsDeviceTransmitRawDiscardsQueryParameter != nil {
			qrStatisticsDeviceTransmitRawDiscards = *o.StatisticsDeviceTransmitRawDiscardsQueryParameter
		}
		qStatisticsDeviceTransmitRawDiscards := swag.FormatInt64(qrStatisticsDeviceTransmitRawDiscards)
		if qStatisticsDeviceTransmitRawDiscards != "" {

			if err := r.SetQueryParam("statistics.device.transmit_raw.discards", qStatisticsDeviceTransmitRawDiscards); err != nil {
				return err
			}
		}
	}

	if o.StatisticsDeviceTransmitRawErrorsQueryParameter != nil {

		// query param statistics.device.transmit_raw.errors
		var qrStatisticsDeviceTransmitRawErrors int64

		if o.StatisticsDeviceTransmitRawErrorsQueryParameter != nil {
			qrStatisticsDeviceTransmitRawErrors = *o.StatisticsDeviceTransmitRawErrorsQueryParameter
		}
		qStatisticsDeviceTransmitRawErrors := swag.FormatInt64(qrStatisticsDeviceTransmitRawErrors)
		if qStatisticsDeviceTransmitRawErrors != "" {

			if err := r.SetQueryParam("statistics.device.transmit_raw.errors", qStatisticsDeviceTransmitRawErrors); err != nil {
				return err
			}
		}
	}

	if o.StatisticsDeviceTransmitRawPacketsQueryParameter != nil {

		// query param statistics.device.transmit_raw.packets
		var qrStatisticsDeviceTransmitRawPackets int64

		if o.StatisticsDeviceTransmitRawPacketsQueryParameter != nil {
			qrStatisticsDeviceTransmitRawPackets = *o.StatisticsDeviceTransmitRawPacketsQueryParameter
		}
		qStatisticsDeviceTransmitRawPackets := swag.FormatInt64(qrStatisticsDeviceTransmitRawPackets)
		if qStatisticsDeviceTransmitRawPackets != "" {

			if err := r.SetQueryParam("statistics.device.transmit_raw.packets", qStatisticsDeviceTransmitRawPackets); err != nil {
				return err
			}
		}
	}

	if o.StatisticsStatusQueryParameter != nil {

		// query param statistics.status
		var qrStatisticsStatus string

		if o.StatisticsStatusQueryParameter != nil {
			qrStatisticsStatus = *o.StatisticsStatusQueryParameter
		}
		qStatisticsStatus := qrStatisticsStatus
		if qStatisticsStatus != "" {

			if err := r.SetQueryParam("statistics.status", qStatisticsStatus); err != nil {
				return err
			}
		}
	}

	if o.StatisticsThroughputRawReadQueryParameter != nil {

		// query param statistics.throughput_raw.read
		var qrStatisticsThroughputRawRead int64

		if o.StatisticsThroughputRawReadQueryParameter != nil {
			qrStatisticsThroughputRawRead = *o.StatisticsThroughputRawReadQueryParameter
		}
		qStatisticsThroughputRawRead := swag.FormatInt64(qrStatisticsThroughputRawRead)
		if qStatisticsThroughputRawRead != "" {

			if err := r.SetQueryParam("statistics.throughput_raw.read", qStatisticsThroughputRawRead); err != nil {
				return err
			}
		}
	}

	if o.StatisticsThroughputRawTotalQueryParameter != nil {

		// query param statistics.throughput_raw.total
		var qrStatisticsThroughputRawTotal int64

		if o.StatisticsThroughputRawTotalQueryParameter != nil {
			qrStatisticsThroughputRawTotal = *o.StatisticsThroughputRawTotalQueryParameter
		}
		qStatisticsThroughputRawTotal := swag.FormatInt64(qrStatisticsThroughputRawTotal)
		if qStatisticsThroughputRawTotal != "" {

			if err := r.SetQueryParam("statistics.throughput_raw.total", qStatisticsThroughputRawTotal); err != nil {
				return err
			}
		}
	}

	if o.StatisticsThroughputRawWriteQueryParameter != nil {

		// query param statistics.throughput_raw.write
		var qrStatisticsThroughputRawWrite int64

		if o.StatisticsThroughputRawWriteQueryParameter != nil {
			qrStatisticsThroughputRawWrite = *o.StatisticsThroughputRawWriteQueryParameter
		}
		qStatisticsThroughputRawWrite := swag.FormatInt64(qrStatisticsThroughputRawWrite)
		if qStatisticsThroughputRawWrite != "" {

			if err := r.SetQueryParam("statistics.throughput_raw.write", qStatisticsThroughputRawWrite); err != nil {
				return err
			}
		}
	}

	if o.StatisticsTimestampQueryParameter != nil {

		// query param statistics.timestamp
		var qrStatisticsTimestamp string

		if o.StatisticsTimestampQueryParameter != nil {
			qrStatisticsTimestamp = *o.StatisticsTimestampQueryParameter
		}
		qStatisticsTimestamp := qrStatisticsTimestamp
		if qStatisticsTimestamp != "" {

			if err := r.SetQueryParam("statistics.timestamp", qStatisticsTimestamp); err != nil {
				return err
			}
		}
	}

	if o.TypeQueryParameter != nil {

		// query param type
		var qrType string

		if o.TypeQueryParameter != nil {
			qrType = *o.TypeQueryParameter
		}
		qType := qrType
		if qType != "" {

			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}
	}

	if o.UUIDQueryParameter != nil {

		// query param uuid
		var qrUUID string

		if o.UUIDQueryParameter != nil {
			qrUUID = *o.UUIDQueryParameter
		}
		qUUID := qrUUID
		if qUUID != "" {

			if err := r.SetQueryParam("uuid", qUUID); err != nil {
				return err
			}
		}
	}

	if o.VlanBasePortNameQueryParameter != nil {

		// query param vlan.base_port.name
		var qrVlanBasePortName string

		if o.VlanBasePortNameQueryParameter != nil {
			qrVlanBasePortName = *o.VlanBasePortNameQueryParameter
		}
		qVlanBasePortName := qrVlanBasePortName
		if qVlanBasePortName != "" {

			if err := r.SetQueryParam("vlan.base_port.name", qVlanBasePortName); err != nil {
				return err
			}
		}
	}

	if o.VlanBasePortNodeNameQueryParameter != nil {

		// query param vlan.base_port.node.name
		var qrVlanBasePortNodeName string

		if o.VlanBasePortNodeNameQueryParameter != nil {
			qrVlanBasePortNodeName = *o.VlanBasePortNodeNameQueryParameter
		}
		qVlanBasePortNodeName := qrVlanBasePortNodeName
		if qVlanBasePortNodeName != "" {

			if err := r.SetQueryParam("vlan.base_port.node.name", qVlanBasePortNodeName); err != nil {
				return err
			}
		}
	}

	if o.VlanBasePortUUIDQueryParameter != nil {

		// query param vlan.base_port.uuid
		var qrVlanBasePortUUID string

		if o.VlanBasePortUUIDQueryParameter != nil {
			qrVlanBasePortUUID = *o.VlanBasePortUUIDQueryParameter
		}
		qVlanBasePortUUID := qrVlanBasePortUUID
		if qVlanBasePortUUID != "" {

			if err := r.SetQueryParam("vlan.base_port.uuid", qVlanBasePortUUID); err != nil {
				return err
			}
		}
	}

	if o.VlanTagQueryParameter != nil {

		// query param vlan.tag
		var qrVlanTag int64

		if o.VlanTagQueryParameter != nil {
			qrVlanTag = *o.VlanTagQueryParameter
		}
		qVlanTag := swag.FormatInt64(qrVlanTag)
		if qVlanTag != "" {

			if err := r.SetQueryParam("vlan.tag", qVlanTag); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamNetworkEthernetPortsGet binds the parameter fields
func (o *NetworkEthernetPortsGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.FieldsQueryParameter

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamNetworkEthernetPortsGet binds the parameter order_by
func (o *NetworkEthernetPortsGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderByQueryParameter

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
