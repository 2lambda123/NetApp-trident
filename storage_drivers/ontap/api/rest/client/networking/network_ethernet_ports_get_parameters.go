// Code generated by go-swagger; DO NOT EDIT.

package networking

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewNetworkEthernetPortsGetParams creates a new NetworkEthernetPortsGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewNetworkEthernetPortsGetParams() *NetworkEthernetPortsGetParams {
	return &NetworkEthernetPortsGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewNetworkEthernetPortsGetParamsWithTimeout creates a new NetworkEthernetPortsGetParams object
// with the ability to set a timeout on a request.
func NewNetworkEthernetPortsGetParamsWithTimeout(timeout time.Duration) *NetworkEthernetPortsGetParams {
	return &NetworkEthernetPortsGetParams{
		timeout: timeout,
	}
}

// NewNetworkEthernetPortsGetParamsWithContext creates a new NetworkEthernetPortsGetParams object
// with the ability to set a context for a request.
func NewNetworkEthernetPortsGetParamsWithContext(ctx context.Context) *NetworkEthernetPortsGetParams {
	return &NetworkEthernetPortsGetParams{
		Context: ctx,
	}
}

// NewNetworkEthernetPortsGetParamsWithHTTPClient creates a new NetworkEthernetPortsGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewNetworkEthernetPortsGetParamsWithHTTPClient(client *http.Client) *NetworkEthernetPortsGetParams {
	return &NetworkEthernetPortsGetParams{
		HTTPClient: client,
	}
}

/* NetworkEthernetPortsGetParams contains all the parameters to send to the API endpoint
   for the network ethernet ports get operation.

   Typically these are written to a http.Request.
*/
type NetworkEthernetPortsGetParams struct {

	/* BroadcastDomainIpspaceName.

	   Filter by broadcast_domain.ipspace.name
	*/
	BroadcastDomainIPspaceNameQueryParameter *string

	/* BroadcastDomainName.

	   Filter by broadcast_domain.name
	*/
	BroadcastDomainNameQueryParameter *string

	/* BroadcastDomainUUID.

	   Filter by broadcast_domain.uuid
	*/
	BroadcastDomainUUIDQueryParameter *string

	/* Enabled.

	   Filter by enabled
	*/
	EnabledQueryParameter *bool

	/* Fields.

	   Specify the fields to return.
	*/
	Fields []string

	/* LagActivePortsName.

	   Filter by lag.active_ports.name
	*/
	LagActivePortsNameQueryParameter *string

	/* LagActivePortsNodeName.

	   Filter by lag.active_ports.node.name
	*/
	LagActivePortsNodeNameQueryParameter *string

	/* LagActivePortsUUID.

	   Filter by lag.active_ports.uuid
	*/
	LagActivePortsUUIDQueryParameter *string

	/* LagDistributionPolicy.

	   Filter by lag.distribution_policy
	*/
	LagDistributionPolicyQueryParameter *string

	/* LagMemberPortsName.

	   Filter by lag.member_ports.name
	*/
	LagMemberPortsNameQueryParameter *string

	/* LagMemberPortsNodeName.

	   Filter by lag.member_ports.node.name
	*/
	LagMemberPortsNodeNameQueryParameter *string

	/* LagMemberPortsUUID.

	   Filter by lag.member_ports.uuid
	*/
	LagMemberPortsUUIDQueryParameter *string

	/* LagMode.

	   Filter by lag.mode
	*/
	LagModeQueryParameter *string

	/* MacAddress.

	   Filter by mac_address
	*/
	MacAddressQueryParameter *string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecords *int64

	/* Mtu.

	   Filter by mtu
	*/
	MtuQueryParameter *int64

	/* Name.

	   Filter by name
	*/
	NameQueryParameter *string

	/* NodeName.

	   Filter by node.name
	*/
	NodeNameQueryParameter *string

	/* NodeUUID.

	   Filter by node.uuid
	*/
	NodeUUIDQueryParameter *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderBy []string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecords *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeout *int64

	/* Speed.

	   Filter by speed
	*/
	SpeedQueryParameter *int64

	/* State.

	   Filter by state
	*/
	StateQueryParameter *string

	/* Type.

	   Filter by type
	*/
	TypeQueryParameter *string

	/* UUID.

	   Filter by uuid
	*/
	UUIDQueryParameter *string

	/* VlanBasePortName.

	   Filter by vlan.base_port.name
	*/
	VlanBasePortNameQueryParameter *string

	/* VlanBasePortNodeName.

	   Filter by vlan.base_port.node.name
	*/
	VlanBasePortNodeNameQueryParameter *string

	/* VlanBasePortUUID.

	   Filter by vlan.base_port.uuid
	*/
	VlanBasePortUUIDQueryParameter *string

	/* VlanTag.

	   Filter by vlan.tag
	*/
	VlanTagQueryParameter *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the network ethernet ports get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NetworkEthernetPortsGetParams) WithDefaults() *NetworkEthernetPortsGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the network ethernet ports get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NetworkEthernetPortsGetParams) SetDefaults() {
	var (
		returnRecordsDefault = bool(true)

		returnTimeoutDefault = int64(15)
	)

	val := NetworkEthernetPortsGetParams{
		ReturnRecords: &returnRecordsDefault,
		ReturnTimeout: &returnTimeoutDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithTimeout(timeout time.Duration) *NetworkEthernetPortsGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithContext(ctx context.Context) *NetworkEthernetPortsGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithHTTPClient(client *http.Client) *NetworkEthernetPortsGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBroadcastDomainIPspaceNameQueryParameter adds the broadcastDomainIpspaceName to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithBroadcastDomainIPspaceNameQueryParameter(broadcastDomainIpspaceName *string) *NetworkEthernetPortsGetParams {
	o.SetBroadcastDomainIPspaceNameQueryParameter(broadcastDomainIpspaceName)
	return o
}

// SetBroadcastDomainIPspaceNameQueryParameter adds the broadcastDomainIpspaceName to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetBroadcastDomainIPspaceNameQueryParameter(broadcastDomainIpspaceName *string) {
	o.BroadcastDomainIPspaceNameQueryParameter = broadcastDomainIpspaceName
}

// WithBroadcastDomainNameQueryParameter adds the broadcastDomainName to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithBroadcastDomainNameQueryParameter(broadcastDomainName *string) *NetworkEthernetPortsGetParams {
	o.SetBroadcastDomainNameQueryParameter(broadcastDomainName)
	return o
}

// SetBroadcastDomainNameQueryParameter adds the broadcastDomainName to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetBroadcastDomainNameQueryParameter(broadcastDomainName *string) {
	o.BroadcastDomainNameQueryParameter = broadcastDomainName
}

// WithBroadcastDomainUUIDQueryParameter adds the broadcastDomainUUID to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithBroadcastDomainUUIDQueryParameter(broadcastDomainUUID *string) *NetworkEthernetPortsGetParams {
	o.SetBroadcastDomainUUIDQueryParameter(broadcastDomainUUID)
	return o
}

// SetBroadcastDomainUUIDQueryParameter adds the broadcastDomainUuid to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetBroadcastDomainUUIDQueryParameter(broadcastDomainUUID *string) {
	o.BroadcastDomainUUIDQueryParameter = broadcastDomainUUID
}

// WithEnabledQueryParameter adds the enabled to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithEnabledQueryParameter(enabled *bool) *NetworkEthernetPortsGetParams {
	o.SetEnabledQueryParameter(enabled)
	return o
}

// SetEnabledQueryParameter adds the enabled to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetEnabledQueryParameter(enabled *bool) {
	o.EnabledQueryParameter = enabled
}

// WithFields adds the fields to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithFields(fields []string) *NetworkEthernetPortsGetParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithLagActivePortsNameQueryParameter adds the lagActivePortsName to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithLagActivePortsNameQueryParameter(lagActivePortsName *string) *NetworkEthernetPortsGetParams {
	o.SetLagActivePortsNameQueryParameter(lagActivePortsName)
	return o
}

// SetLagActivePortsNameQueryParameter adds the lagActivePortsName to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetLagActivePortsNameQueryParameter(lagActivePortsName *string) {
	o.LagActivePortsNameQueryParameter = lagActivePortsName
}

// WithLagActivePortsNodeNameQueryParameter adds the lagActivePortsNodeName to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithLagActivePortsNodeNameQueryParameter(lagActivePortsNodeName *string) *NetworkEthernetPortsGetParams {
	o.SetLagActivePortsNodeNameQueryParameter(lagActivePortsNodeName)
	return o
}

// SetLagActivePortsNodeNameQueryParameter adds the lagActivePortsNodeName to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetLagActivePortsNodeNameQueryParameter(lagActivePortsNodeName *string) {
	o.LagActivePortsNodeNameQueryParameter = lagActivePortsNodeName
}

// WithLagActivePortsUUIDQueryParameter adds the lagActivePortsUUID to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithLagActivePortsUUIDQueryParameter(lagActivePortsUUID *string) *NetworkEthernetPortsGetParams {
	o.SetLagActivePortsUUIDQueryParameter(lagActivePortsUUID)
	return o
}

// SetLagActivePortsUUIDQueryParameter adds the lagActivePortsUuid to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetLagActivePortsUUIDQueryParameter(lagActivePortsUUID *string) {
	o.LagActivePortsUUIDQueryParameter = lagActivePortsUUID
}

// WithLagDistributionPolicyQueryParameter adds the lagDistributionPolicy to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithLagDistributionPolicyQueryParameter(lagDistributionPolicy *string) *NetworkEthernetPortsGetParams {
	o.SetLagDistributionPolicyQueryParameter(lagDistributionPolicy)
	return o
}

// SetLagDistributionPolicyQueryParameter adds the lagDistributionPolicy to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetLagDistributionPolicyQueryParameter(lagDistributionPolicy *string) {
	o.LagDistributionPolicyQueryParameter = lagDistributionPolicy
}

// WithLagMemberPortsNameQueryParameter adds the lagMemberPortsName to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithLagMemberPortsNameQueryParameter(lagMemberPortsName *string) *NetworkEthernetPortsGetParams {
	o.SetLagMemberPortsNameQueryParameter(lagMemberPortsName)
	return o
}

// SetLagMemberPortsNameQueryParameter adds the lagMemberPortsName to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetLagMemberPortsNameQueryParameter(lagMemberPortsName *string) {
	o.LagMemberPortsNameQueryParameter = lagMemberPortsName
}

// WithLagMemberPortsNodeNameQueryParameter adds the lagMemberPortsNodeName to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithLagMemberPortsNodeNameQueryParameter(lagMemberPortsNodeName *string) *NetworkEthernetPortsGetParams {
	o.SetLagMemberPortsNodeNameQueryParameter(lagMemberPortsNodeName)
	return o
}

// SetLagMemberPortsNodeNameQueryParameter adds the lagMemberPortsNodeName to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetLagMemberPortsNodeNameQueryParameter(lagMemberPortsNodeName *string) {
	o.LagMemberPortsNodeNameQueryParameter = lagMemberPortsNodeName
}

// WithLagMemberPortsUUIDQueryParameter adds the lagMemberPortsUUID to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithLagMemberPortsUUIDQueryParameter(lagMemberPortsUUID *string) *NetworkEthernetPortsGetParams {
	o.SetLagMemberPortsUUIDQueryParameter(lagMemberPortsUUID)
	return o
}

// SetLagMemberPortsUUIDQueryParameter adds the lagMemberPortsUuid to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetLagMemberPortsUUIDQueryParameter(lagMemberPortsUUID *string) {
	o.LagMemberPortsUUIDQueryParameter = lagMemberPortsUUID
}

// WithLagModeQueryParameter adds the lagMode to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithLagModeQueryParameter(lagMode *string) *NetworkEthernetPortsGetParams {
	o.SetLagModeQueryParameter(lagMode)
	return o
}

// SetLagModeQueryParameter adds the lagMode to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetLagModeQueryParameter(lagMode *string) {
	o.LagModeQueryParameter = lagMode
}

// WithMacAddressQueryParameter adds the macAddress to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithMacAddressQueryParameter(macAddress *string) *NetworkEthernetPortsGetParams {
	o.SetMacAddressQueryParameter(macAddress)
	return o
}

// SetMacAddressQueryParameter adds the macAddress to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetMacAddressQueryParameter(macAddress *string) {
	o.MacAddressQueryParameter = macAddress
}

// WithMaxRecords adds the maxRecords to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithMaxRecords(maxRecords *int64) *NetworkEthernetPortsGetParams {
	o.SetMaxRecords(maxRecords)
	return o
}

// SetMaxRecords adds the maxRecords to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetMaxRecords(maxRecords *int64) {
	o.MaxRecords = maxRecords
}

// WithMtuQueryParameter adds the mtu to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithMtuQueryParameter(mtu *int64) *NetworkEthernetPortsGetParams {
	o.SetMtuQueryParameter(mtu)
	return o
}

// SetMtuQueryParameter adds the mtu to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetMtuQueryParameter(mtu *int64) {
	o.MtuQueryParameter = mtu
}

// WithNameQueryParameter adds the name to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithNameQueryParameter(name *string) *NetworkEthernetPortsGetParams {
	o.SetNameQueryParameter(name)
	return o
}

// SetNameQueryParameter adds the name to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetNameQueryParameter(name *string) {
	o.NameQueryParameter = name
}

// WithNodeNameQueryParameter adds the nodeName to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithNodeNameQueryParameter(nodeName *string) *NetworkEthernetPortsGetParams {
	o.SetNodeNameQueryParameter(nodeName)
	return o
}

// SetNodeNameQueryParameter adds the nodeName to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetNodeNameQueryParameter(nodeName *string) {
	o.NodeNameQueryParameter = nodeName
}

// WithNodeUUIDQueryParameter adds the nodeUUID to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithNodeUUIDQueryParameter(nodeUUID *string) *NetworkEthernetPortsGetParams {
	o.SetNodeUUIDQueryParameter(nodeUUID)
	return o
}

// SetNodeUUIDQueryParameter adds the nodeUuid to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetNodeUUIDQueryParameter(nodeUUID *string) {
	o.NodeUUIDQueryParameter = nodeUUID
}

// WithOrderBy adds the orderBy to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithOrderBy(orderBy []string) *NetworkEthernetPortsGetParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetOrderBy(orderBy []string) {
	o.OrderBy = orderBy
}

// WithReturnRecords adds the returnRecords to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithReturnRecords(returnRecords *bool) *NetworkEthernetPortsGetParams {
	o.SetReturnRecords(returnRecords)
	return o
}

// SetReturnRecords adds the returnRecords to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetReturnRecords(returnRecords *bool) {
	o.ReturnRecords = returnRecords
}

// WithReturnTimeout adds the returnTimeout to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithReturnTimeout(returnTimeout *int64) *NetworkEthernetPortsGetParams {
	o.SetReturnTimeout(returnTimeout)
	return o
}

// SetReturnTimeout adds the returnTimeout to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetReturnTimeout(returnTimeout *int64) {
	o.ReturnTimeout = returnTimeout
}

// WithSpeedQueryParameter adds the speed to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithSpeedQueryParameter(speed *int64) *NetworkEthernetPortsGetParams {
	o.SetSpeedQueryParameter(speed)
	return o
}

// SetSpeedQueryParameter adds the speed to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetSpeedQueryParameter(speed *int64) {
	o.SpeedQueryParameter = speed
}

// WithStateQueryParameter adds the state to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithStateQueryParameter(state *string) *NetworkEthernetPortsGetParams {
	o.SetStateQueryParameter(state)
	return o
}

// SetStateQueryParameter adds the state to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetStateQueryParameter(state *string) {
	o.StateQueryParameter = state
}

// WithTypeQueryParameter adds the typeVar to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithTypeQueryParameter(typeVar *string) *NetworkEthernetPortsGetParams {
	o.SetTypeQueryParameter(typeVar)
	return o
}

// SetTypeQueryParameter adds the type to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetTypeQueryParameter(typeVar *string) {
	o.TypeQueryParameter = typeVar
}

// WithUUIDQueryParameter adds the uuid to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithUUIDQueryParameter(uuid *string) *NetworkEthernetPortsGetParams {
	o.SetUUIDQueryParameter(uuid)
	return o
}

// SetUUIDQueryParameter adds the uuid to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetUUIDQueryParameter(uuid *string) {
	o.UUIDQueryParameter = uuid
}

// WithVlanBasePortNameQueryParameter adds the vlanBasePortName to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithVlanBasePortNameQueryParameter(vlanBasePortName *string) *NetworkEthernetPortsGetParams {
	o.SetVlanBasePortNameQueryParameter(vlanBasePortName)
	return o
}

// SetVlanBasePortNameQueryParameter adds the vlanBasePortName to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetVlanBasePortNameQueryParameter(vlanBasePortName *string) {
	o.VlanBasePortNameQueryParameter = vlanBasePortName
}

// WithVlanBasePortNodeNameQueryParameter adds the vlanBasePortNodeName to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithVlanBasePortNodeNameQueryParameter(vlanBasePortNodeName *string) *NetworkEthernetPortsGetParams {
	o.SetVlanBasePortNodeNameQueryParameter(vlanBasePortNodeName)
	return o
}

// SetVlanBasePortNodeNameQueryParameter adds the vlanBasePortNodeName to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetVlanBasePortNodeNameQueryParameter(vlanBasePortNodeName *string) {
	o.VlanBasePortNodeNameQueryParameter = vlanBasePortNodeName
}

// WithVlanBasePortUUIDQueryParameter adds the vlanBasePortUUID to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithVlanBasePortUUIDQueryParameter(vlanBasePortUUID *string) *NetworkEthernetPortsGetParams {
	o.SetVlanBasePortUUIDQueryParameter(vlanBasePortUUID)
	return o
}

// SetVlanBasePortUUIDQueryParameter adds the vlanBasePortUuid to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetVlanBasePortUUIDQueryParameter(vlanBasePortUUID *string) {
	o.VlanBasePortUUIDQueryParameter = vlanBasePortUUID
}

// WithVlanTagQueryParameter adds the vlanTag to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) WithVlanTagQueryParameter(vlanTag *int64) *NetworkEthernetPortsGetParams {
	o.SetVlanTagQueryParameter(vlanTag)
	return o
}

// SetVlanTagQueryParameter adds the vlanTag to the network ethernet ports get params
func (o *NetworkEthernetPortsGetParams) SetVlanTagQueryParameter(vlanTag *int64) {
	o.VlanTagQueryParameter = vlanTag
}

// WriteToRequest writes these params to a swagger request
func (o *NetworkEthernetPortsGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.BroadcastDomainIPspaceNameQueryParameter != nil {

		// query param broadcast_domain.ipspace.name
		var qrBroadcastDomainIpspaceName string

		if o.BroadcastDomainIPspaceNameQueryParameter != nil {
			qrBroadcastDomainIpspaceName = *o.BroadcastDomainIPspaceNameQueryParameter
		}
		qBroadcastDomainIpspaceName := qrBroadcastDomainIpspaceName
		if qBroadcastDomainIpspaceName != "" {

			if err := r.SetQueryParam("broadcast_domain.ipspace.name", qBroadcastDomainIpspaceName); err != nil {
				return err
			}
		}
	}

	if o.BroadcastDomainNameQueryParameter != nil {

		// query param broadcast_domain.name
		var qrBroadcastDomainName string

		if o.BroadcastDomainNameQueryParameter != nil {
			qrBroadcastDomainName = *o.BroadcastDomainNameQueryParameter
		}
		qBroadcastDomainName := qrBroadcastDomainName
		if qBroadcastDomainName != "" {

			if err := r.SetQueryParam("broadcast_domain.name", qBroadcastDomainName); err != nil {
				return err
			}
		}
	}

	if o.BroadcastDomainUUIDQueryParameter != nil {

		// query param broadcast_domain.uuid
		var qrBroadcastDomainUUID string

		if o.BroadcastDomainUUIDQueryParameter != nil {
			qrBroadcastDomainUUID = *o.BroadcastDomainUUIDQueryParameter
		}
		qBroadcastDomainUUID := qrBroadcastDomainUUID
		if qBroadcastDomainUUID != "" {

			if err := r.SetQueryParam("broadcast_domain.uuid", qBroadcastDomainUUID); err != nil {
				return err
			}
		}
	}

	if o.EnabledQueryParameter != nil {

		// query param enabled
		var qrEnabled bool

		if o.EnabledQueryParameter != nil {
			qrEnabled = *o.EnabledQueryParameter
		}
		qEnabled := swag.FormatBool(qrEnabled)
		if qEnabled != "" {

			if err := r.SetQueryParam("enabled", qEnabled); err != nil {
				return err
			}
		}
	}

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.LagActivePortsNameQueryParameter != nil {

		// query param lag.active_ports.name
		var qrLagActivePortsName string

		if o.LagActivePortsNameQueryParameter != nil {
			qrLagActivePortsName = *o.LagActivePortsNameQueryParameter
		}
		qLagActivePortsName := qrLagActivePortsName
		if qLagActivePortsName != "" {

			if err := r.SetQueryParam("lag.active_ports.name", qLagActivePortsName); err != nil {
				return err
			}
		}
	}

	if o.LagActivePortsNodeNameQueryParameter != nil {

		// query param lag.active_ports.node.name
		var qrLagActivePortsNodeName string

		if o.LagActivePortsNodeNameQueryParameter != nil {
			qrLagActivePortsNodeName = *o.LagActivePortsNodeNameQueryParameter
		}
		qLagActivePortsNodeName := qrLagActivePortsNodeName
		if qLagActivePortsNodeName != "" {

			if err := r.SetQueryParam("lag.active_ports.node.name", qLagActivePortsNodeName); err != nil {
				return err
			}
		}
	}

	if o.LagActivePortsUUIDQueryParameter != nil {

		// query param lag.active_ports.uuid
		var qrLagActivePortsUUID string

		if o.LagActivePortsUUIDQueryParameter != nil {
			qrLagActivePortsUUID = *o.LagActivePortsUUIDQueryParameter
		}
		qLagActivePortsUUID := qrLagActivePortsUUID
		if qLagActivePortsUUID != "" {

			if err := r.SetQueryParam("lag.active_ports.uuid", qLagActivePortsUUID); err != nil {
				return err
			}
		}
	}

	if o.LagDistributionPolicyQueryParameter != nil {

		// query param lag.distribution_policy
		var qrLagDistributionPolicy string

		if o.LagDistributionPolicyQueryParameter != nil {
			qrLagDistributionPolicy = *o.LagDistributionPolicyQueryParameter
		}
		qLagDistributionPolicy := qrLagDistributionPolicy
		if qLagDistributionPolicy != "" {

			if err := r.SetQueryParam("lag.distribution_policy", qLagDistributionPolicy); err != nil {
				return err
			}
		}
	}

	if o.LagMemberPortsNameQueryParameter != nil {

		// query param lag.member_ports.name
		var qrLagMemberPortsName string

		if o.LagMemberPortsNameQueryParameter != nil {
			qrLagMemberPortsName = *o.LagMemberPortsNameQueryParameter
		}
		qLagMemberPortsName := qrLagMemberPortsName
		if qLagMemberPortsName != "" {

			if err := r.SetQueryParam("lag.member_ports.name", qLagMemberPortsName); err != nil {
				return err
			}
		}
	}

	if o.LagMemberPortsNodeNameQueryParameter != nil {

		// query param lag.member_ports.node.name
		var qrLagMemberPortsNodeName string

		if o.LagMemberPortsNodeNameQueryParameter != nil {
			qrLagMemberPortsNodeName = *o.LagMemberPortsNodeNameQueryParameter
		}
		qLagMemberPortsNodeName := qrLagMemberPortsNodeName
		if qLagMemberPortsNodeName != "" {

			if err := r.SetQueryParam("lag.member_ports.node.name", qLagMemberPortsNodeName); err != nil {
				return err
			}
		}
	}

	if o.LagMemberPortsUUIDQueryParameter != nil {

		// query param lag.member_ports.uuid
		var qrLagMemberPortsUUID string

		if o.LagMemberPortsUUIDQueryParameter != nil {
			qrLagMemberPortsUUID = *o.LagMemberPortsUUIDQueryParameter
		}
		qLagMemberPortsUUID := qrLagMemberPortsUUID
		if qLagMemberPortsUUID != "" {

			if err := r.SetQueryParam("lag.member_ports.uuid", qLagMemberPortsUUID); err != nil {
				return err
			}
		}
	}

	if o.LagModeQueryParameter != nil {

		// query param lag.mode
		var qrLagMode string

		if o.LagModeQueryParameter != nil {
			qrLagMode = *o.LagModeQueryParameter
		}
		qLagMode := qrLagMode
		if qLagMode != "" {

			if err := r.SetQueryParam("lag.mode", qLagMode); err != nil {
				return err
			}
		}
	}

	if o.MacAddressQueryParameter != nil {

		// query param mac_address
		var qrMacAddress string

		if o.MacAddressQueryParameter != nil {
			qrMacAddress = *o.MacAddressQueryParameter
		}
		qMacAddress := qrMacAddress
		if qMacAddress != "" {

			if err := r.SetQueryParam("mac_address", qMacAddress); err != nil {
				return err
			}
		}
	}

	if o.MaxRecords != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecords != nil {
			qrMaxRecords = *o.MaxRecords
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.MtuQueryParameter != nil {

		// query param mtu
		var qrMtu int64

		if o.MtuQueryParameter != nil {
			qrMtu = *o.MtuQueryParameter
		}
		qMtu := swag.FormatInt64(qrMtu)
		if qMtu != "" {

			if err := r.SetQueryParam("mtu", qMtu); err != nil {
				return err
			}
		}
	}

	if o.NameQueryParameter != nil {

		// query param name
		var qrName string

		if o.NameQueryParameter != nil {
			qrName = *o.NameQueryParameter
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.NodeNameQueryParameter != nil {

		// query param node.name
		var qrNodeName string

		if o.NodeNameQueryParameter != nil {
			qrNodeName = *o.NodeNameQueryParameter
		}
		qNodeName := qrNodeName
		if qNodeName != "" {

			if err := r.SetQueryParam("node.name", qNodeName); err != nil {
				return err
			}
		}
	}

	if o.NodeUUIDQueryParameter != nil {

		// query param node.uuid
		var qrNodeUUID string

		if o.NodeUUIDQueryParameter != nil {
			qrNodeUUID = *o.NodeUUIDQueryParameter
		}
		qNodeUUID := qrNodeUUID
		if qNodeUUID != "" {

			if err := r.SetQueryParam("node.uuid", qNodeUUID); err != nil {
				return err
			}
		}
	}

	if o.OrderBy != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.ReturnRecords != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecords != nil {
			qrReturnRecords = *o.ReturnRecords
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeout != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeout != nil {
			qrReturnTimeout = *o.ReturnTimeout
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.SpeedQueryParameter != nil {

		// query param speed
		var qrSpeed int64

		if o.SpeedQueryParameter != nil {
			qrSpeed = *o.SpeedQueryParameter
		}
		qSpeed := swag.FormatInt64(qrSpeed)
		if qSpeed != "" {

			if err := r.SetQueryParam("speed", qSpeed); err != nil {
				return err
			}
		}
	}

	if o.StateQueryParameter != nil {

		// query param state
		var qrState string

		if o.StateQueryParameter != nil {
			qrState = *o.StateQueryParameter
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if o.TypeQueryParameter != nil {

		// query param type
		var qrType string

		if o.TypeQueryParameter != nil {
			qrType = *o.TypeQueryParameter
		}
		qType := qrType
		if qType != "" {

			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}
	}

	if o.UUIDQueryParameter != nil {

		// query param uuid
		var qrUUID string

		if o.UUIDQueryParameter != nil {
			qrUUID = *o.UUIDQueryParameter
		}
		qUUID := qrUUID
		if qUUID != "" {

			if err := r.SetQueryParam("uuid", qUUID); err != nil {
				return err
			}
		}
	}

	if o.VlanBasePortNameQueryParameter != nil {

		// query param vlan.base_port.name
		var qrVlanBasePortName string

		if o.VlanBasePortNameQueryParameter != nil {
			qrVlanBasePortName = *o.VlanBasePortNameQueryParameter
		}
		qVlanBasePortName := qrVlanBasePortName
		if qVlanBasePortName != "" {

			if err := r.SetQueryParam("vlan.base_port.name", qVlanBasePortName); err != nil {
				return err
			}
		}
	}

	if o.VlanBasePortNodeNameQueryParameter != nil {

		// query param vlan.base_port.node.name
		var qrVlanBasePortNodeName string

		if o.VlanBasePortNodeNameQueryParameter != nil {
			qrVlanBasePortNodeName = *o.VlanBasePortNodeNameQueryParameter
		}
		qVlanBasePortNodeName := qrVlanBasePortNodeName
		if qVlanBasePortNodeName != "" {

			if err := r.SetQueryParam("vlan.base_port.node.name", qVlanBasePortNodeName); err != nil {
				return err
			}
		}
	}

	if o.VlanBasePortUUIDQueryParameter != nil {

		// query param vlan.base_port.uuid
		var qrVlanBasePortUUID string

		if o.VlanBasePortUUIDQueryParameter != nil {
			qrVlanBasePortUUID = *o.VlanBasePortUUIDQueryParameter
		}
		qVlanBasePortUUID := qrVlanBasePortUUID
		if qVlanBasePortUUID != "" {

			if err := r.SetQueryParam("vlan.base_port.uuid", qVlanBasePortUUID); err != nil {
				return err
			}
		}
	}

	if o.VlanTagQueryParameter != nil {

		// query param vlan.tag
		var qrVlanTag int64

		if o.VlanTagQueryParameter != nil {
			qrVlanTag = *o.VlanTagQueryParameter
		}
		qVlanTag := swag.FormatInt64(qrVlanTag)
		if qVlanTag != "" {

			if err := r.SetQueryParam("vlan.tag", qVlanTag); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamNetworkEthernetPortsGet binds the parameter fields
func (o *NetworkEthernetPortsGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamNetworkEthernetPortsGet binds the parameter order_by
func (o *NetworkEthernetPortsGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderBy

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
