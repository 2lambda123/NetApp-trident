// Code generated by go-swagger; DO NOT EDIT.

package networking

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewNetworkIPInterfacesGetParams creates a new NetworkIPInterfacesGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewNetworkIPInterfacesGetParams() *NetworkIPInterfacesGetParams {
	return &NetworkIPInterfacesGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewNetworkIPInterfacesGetParamsWithTimeout creates a new NetworkIPInterfacesGetParams object
// with the ability to set a timeout on a request.
func NewNetworkIPInterfacesGetParamsWithTimeout(timeout time.Duration) *NetworkIPInterfacesGetParams {
	return &NetworkIPInterfacesGetParams{
		timeout: timeout,
	}
}

// NewNetworkIPInterfacesGetParamsWithContext creates a new NetworkIPInterfacesGetParams object
// with the ability to set a context for a request.
func NewNetworkIPInterfacesGetParamsWithContext(ctx context.Context) *NetworkIPInterfacesGetParams {
	return &NetworkIPInterfacesGetParams{
		Context: ctx,
	}
}

// NewNetworkIPInterfacesGetParamsWithHTTPClient creates a new NetworkIPInterfacesGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewNetworkIPInterfacesGetParamsWithHTTPClient(client *http.Client) *NetworkIPInterfacesGetParams {
	return &NetworkIPInterfacesGetParams{
		HTTPClient: client,
	}
}

/* NetworkIPInterfacesGetParams contains all the parameters to send to the API endpoint
   for the network ip interfaces get operation.

   Typically these are written to a http.Request.
*/
type NetworkIPInterfacesGetParams struct {

	/* DdnsEnabled.

	   Filter by ddns_enabled
	*/
	DDNSEnabledQueryParameter *bool

	/* DNSZone.

	   Filter by dns_zone
	*/
	DNSZoneQueryParameter *string

	/* Enabled.

	   Filter by enabled
	*/
	EnabledQueryParameter *bool

	/* Fields.

	   Specify the fields to return.
	*/
	FieldsQueryParameter []string

	/* IPAddress.

	   Filter by ip.address
	*/
	IPAddressQueryParameter *string

	/* IPFamily.

	   Filter by ip.family
	*/
	IPFamilyQueryParameter *string

	/* IPNetmask.

	   Filter by ip.netmask
	*/
	IPNetmaskQueryParameter *string

	/* IpspaceName.

	   Filter by ipspace.name
	*/
	IpspaceNameQueryParameter *string

	/* IpspaceUUID.

	   Filter by ipspace.uuid
	*/
	IpspaceUUIDQueryParameter *string

	/* LocationAutoRevert.

	   Filter by location.auto_revert
	*/
	LocationAutoRevertQueryParameter *bool

	/* LocationFailover.

	   Filter by location.failover
	*/
	LocationFailoverQueryParameter *string

	/* LocationHomeNodeName.

	   Filter by location.home_node.name
	*/
	LocationHomeNodeNameQueryParameter *string

	/* LocationHomeNodeUUID.

	   Filter by location.home_node.uuid
	*/
	LocationHomeNodeUUIDQueryParameter *string

	/* LocationHomePortName.

	   Filter by location.home_port.name
	*/
	LocationHomePortNameQueryParameter *string

	/* LocationHomePortNodeName.

	   Filter by location.home_port.node.name
	*/
	LocationHomePortNodeNameQueryParameter *string

	/* LocationHomePortUUID.

	   Filter by location.home_port.uuid
	*/
	LocationHomePortUUIDQueryParameter *string

	/* LocationIsHome.

	   Filter by location.is_home
	*/
	LocationIsHomeQueryParameter *bool

	/* LocationNodeName.

	   Filter by location.node.name
	*/
	LocationNodeNameQueryParameter *string

	/* LocationNodeUUID.

	   Filter by location.node.uuid
	*/
	LocationNodeUUIDQueryParameter *string

	/* LocationPortName.

	   Filter by location.port.name
	*/
	LocationPortNameQueryParameter *string

	/* LocationPortNodeName.

	   Filter by location.port.node.name
	*/
	LocationPortNodeNameQueryParameter *string

	/* LocationPortUUID.

	   Filter by location.port.uuid
	*/
	LocationPortUUIDQueryParameter *string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecordsQueryParameter *int64

	/* MetricDuration.

	   Filter by metric.duration
	*/
	MetricDurationQueryParameter *string

	/* MetricStatus.

	   Filter by metric.status
	*/
	MetricStatusQueryParameter *string

	/* MetricThroughputRead.

	   Filter by metric.throughput.read
	*/
	MetricThroughputReadQueryParameter *int64

	/* MetricThroughputTotal.

	   Filter by metric.throughput.total
	*/
	MetricThroughputTotalQueryParameter *int64

	/* MetricThroughputWrite.

	   Filter by metric.throughput.write
	*/
	MetricThroughputWriteQueryParameter *int64

	/* MetricTimestamp.

	   Filter by metric.timestamp
	*/
	MetricTimestampQueryParameter *string

	/* Name.

	   Filter by name
	*/
	NameQueryParameter *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderByQueryParameter []string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecordsQueryParameter *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeoutQueryParameter *int64

	/* Scope.

	   Filter by scope
	*/
	ScopeQueryParameter *string

	/* ServicePolicyName.

	   Filter by service_policy.name
	*/
	ServicePolicyNameQueryParameter *string

	/* ServicePolicyUUID.

	   Filter by service_policy.uuid
	*/
	ServicePolicyUUIDQueryParameter *string

	/* Services.

	   Filter by services
	*/
	ServicesQueryParameter *string

	/* State.

	   Filter by state
	*/
	StateQueryParameter *string

	/* StatisticsStatus.

	   Filter by statistics.status
	*/
	StatisticsStatusQueryParameter *string

	/* StatisticsThroughputRawRead.

	   Filter by statistics.throughput_raw.read
	*/
	StatisticsThroughputRawReadQueryParameter *int64

	/* StatisticsThroughputRawTotal.

	   Filter by statistics.throughput_raw.total
	*/
	StatisticsThroughputRawTotalQueryParameter *int64

	/* StatisticsThroughputRawWrite.

	   Filter by statistics.throughput_raw.write
	*/
	StatisticsThroughputRawWriteQueryParameter *int64

	/* StatisticsTimestamp.

	   Filter by statistics.timestamp
	*/
	StatisticsTimestampQueryParameter *string

	/* SvmName.

	   Filter by svm.name
	*/
	SVMNameQueryParameter *string

	/* SvmUUID.

	   Filter by svm.uuid
	*/
	SVMUUIDQueryParameter *string

	/* UUID.

	   Filter by uuid
	*/
	UUIDQueryParameter *string

	/* Vip.

	   Filter by vip
	*/
	VIPQueryParameter *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the network ip interfaces get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NetworkIPInterfacesGetParams) WithDefaults() *NetworkIPInterfacesGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the network ip interfaces get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NetworkIPInterfacesGetParams) SetDefaults() {
	var (
		returnRecordsQueryParameterDefault = bool(true)

		returnTimeoutQueryParameterDefault = int64(15)
	)

	val := NetworkIPInterfacesGetParams{
		ReturnRecordsQueryParameter: &returnRecordsQueryParameterDefault,
		ReturnTimeoutQueryParameter: &returnTimeoutQueryParameterDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) WithTimeout(timeout time.Duration) *NetworkIPInterfacesGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) WithContext(ctx context.Context) *NetworkIPInterfacesGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) WithHTTPClient(client *http.Client) *NetworkIPInterfacesGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDDNSEnabledQueryParameter adds the ddnsEnabled to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) WithDDNSEnabledQueryParameter(ddnsEnabled *bool) *NetworkIPInterfacesGetParams {
	o.SetDDNSEnabledQueryParameter(ddnsEnabled)
	return o
}

// SetDDNSEnabledQueryParameter adds the ddnsEnabled to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) SetDDNSEnabledQueryParameter(ddnsEnabled *bool) {
	o.DDNSEnabledQueryParameter = ddnsEnabled
}

// WithDNSZoneQueryParameter adds the dNSZone to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) WithDNSZoneQueryParameter(dNSZone *string) *NetworkIPInterfacesGetParams {
	o.SetDNSZoneQueryParameter(dNSZone)
	return o
}

// SetDNSZoneQueryParameter adds the dnsZone to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) SetDNSZoneQueryParameter(dNSZone *string) {
	o.DNSZoneQueryParameter = dNSZone
}

// WithEnabledQueryParameter adds the enabled to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) WithEnabledQueryParameter(enabled *bool) *NetworkIPInterfacesGetParams {
	o.SetEnabledQueryParameter(enabled)
	return o
}

// SetEnabledQueryParameter adds the enabled to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) SetEnabledQueryParameter(enabled *bool) {
	o.EnabledQueryParameter = enabled
}

// WithFieldsQueryParameter adds the fields to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) WithFieldsQueryParameter(fields []string) *NetworkIPInterfacesGetParams {
	o.SetFieldsQueryParameter(fields)
	return o
}

// SetFieldsQueryParameter adds the fields to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) SetFieldsQueryParameter(fields []string) {
	o.FieldsQueryParameter = fields
}

// WithIPAddressQueryParameter adds the iPAddress to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) WithIPAddressQueryParameter(iPAddress *string) *NetworkIPInterfacesGetParams {
	o.SetIPAddressQueryParameter(iPAddress)
	return o
}

// SetIPAddressQueryParameter adds the ipAddress to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) SetIPAddressQueryParameter(iPAddress *string) {
	o.IPAddressQueryParameter = iPAddress
}

// WithIPFamilyQueryParameter adds the iPFamily to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) WithIPFamilyQueryParameter(iPFamily *string) *NetworkIPInterfacesGetParams {
	o.SetIPFamilyQueryParameter(iPFamily)
	return o
}

// SetIPFamilyQueryParameter adds the ipFamily to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) SetIPFamilyQueryParameter(iPFamily *string) {
	o.IPFamilyQueryParameter = iPFamily
}

// WithIPNetmaskQueryParameter adds the iPNetmask to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) WithIPNetmaskQueryParameter(iPNetmask *string) *NetworkIPInterfacesGetParams {
	o.SetIPNetmaskQueryParameter(iPNetmask)
	return o
}

// SetIPNetmaskQueryParameter adds the ipNetmask to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) SetIPNetmaskQueryParameter(iPNetmask *string) {
	o.IPNetmaskQueryParameter = iPNetmask
}

// WithIpspaceNameQueryParameter adds the ipspaceName to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) WithIpspaceNameQueryParameter(ipspaceName *string) *NetworkIPInterfacesGetParams {
	o.SetIpspaceNameQueryParameter(ipspaceName)
	return o
}

// SetIpspaceNameQueryParameter adds the ipspaceName to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) SetIpspaceNameQueryParameter(ipspaceName *string) {
	o.IpspaceNameQueryParameter = ipspaceName
}

// WithIpspaceUUIDQueryParameter adds the ipspaceUUID to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) WithIpspaceUUIDQueryParameter(ipspaceUUID *string) *NetworkIPInterfacesGetParams {
	o.SetIpspaceUUIDQueryParameter(ipspaceUUID)
	return o
}

// SetIpspaceUUIDQueryParameter adds the ipspaceUuid to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) SetIpspaceUUIDQueryParameter(ipspaceUUID *string) {
	o.IpspaceUUIDQueryParameter = ipspaceUUID
}

// WithLocationAutoRevertQueryParameter adds the locationAutoRevert to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) WithLocationAutoRevertQueryParameter(locationAutoRevert *bool) *NetworkIPInterfacesGetParams {
	o.SetLocationAutoRevertQueryParameter(locationAutoRevert)
	return o
}

// SetLocationAutoRevertQueryParameter adds the locationAutoRevert to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) SetLocationAutoRevertQueryParameter(locationAutoRevert *bool) {
	o.LocationAutoRevertQueryParameter = locationAutoRevert
}

// WithLocationFailoverQueryParameter adds the locationFailover to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) WithLocationFailoverQueryParameter(locationFailover *string) *NetworkIPInterfacesGetParams {
	o.SetLocationFailoverQueryParameter(locationFailover)
	return o
}

// SetLocationFailoverQueryParameter adds the locationFailover to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) SetLocationFailoverQueryParameter(locationFailover *string) {
	o.LocationFailoverQueryParameter = locationFailover
}

// WithLocationHomeNodeNameQueryParameter adds the locationHomeNodeName to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) WithLocationHomeNodeNameQueryParameter(locationHomeNodeName *string) *NetworkIPInterfacesGetParams {
	o.SetLocationHomeNodeNameQueryParameter(locationHomeNodeName)
	return o
}

// SetLocationHomeNodeNameQueryParameter adds the locationHomeNodeName to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) SetLocationHomeNodeNameQueryParameter(locationHomeNodeName *string) {
	o.LocationHomeNodeNameQueryParameter = locationHomeNodeName
}

// WithLocationHomeNodeUUIDQueryParameter adds the locationHomeNodeUUID to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) WithLocationHomeNodeUUIDQueryParameter(locationHomeNodeUUID *string) *NetworkIPInterfacesGetParams {
	o.SetLocationHomeNodeUUIDQueryParameter(locationHomeNodeUUID)
	return o
}

// SetLocationHomeNodeUUIDQueryParameter adds the locationHomeNodeUuid to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) SetLocationHomeNodeUUIDQueryParameter(locationHomeNodeUUID *string) {
	o.LocationHomeNodeUUIDQueryParameter = locationHomeNodeUUID
}

// WithLocationHomePortNameQueryParameter adds the locationHomePortName to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) WithLocationHomePortNameQueryParameter(locationHomePortName *string) *NetworkIPInterfacesGetParams {
	o.SetLocationHomePortNameQueryParameter(locationHomePortName)
	return o
}

// SetLocationHomePortNameQueryParameter adds the locationHomePortName to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) SetLocationHomePortNameQueryParameter(locationHomePortName *string) {
	o.LocationHomePortNameQueryParameter = locationHomePortName
}

// WithLocationHomePortNodeNameQueryParameter adds the locationHomePortNodeName to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) WithLocationHomePortNodeNameQueryParameter(locationHomePortNodeName *string) *NetworkIPInterfacesGetParams {
	o.SetLocationHomePortNodeNameQueryParameter(locationHomePortNodeName)
	return o
}

// SetLocationHomePortNodeNameQueryParameter adds the locationHomePortNodeName to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) SetLocationHomePortNodeNameQueryParameter(locationHomePortNodeName *string) {
	o.LocationHomePortNodeNameQueryParameter = locationHomePortNodeName
}

// WithLocationHomePortUUIDQueryParameter adds the locationHomePortUUID to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) WithLocationHomePortUUIDQueryParameter(locationHomePortUUID *string) *NetworkIPInterfacesGetParams {
	o.SetLocationHomePortUUIDQueryParameter(locationHomePortUUID)
	return o
}

// SetLocationHomePortUUIDQueryParameter adds the locationHomePortUuid to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) SetLocationHomePortUUIDQueryParameter(locationHomePortUUID *string) {
	o.LocationHomePortUUIDQueryParameter = locationHomePortUUID
}

// WithLocationIsHomeQueryParameter adds the locationIsHome to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) WithLocationIsHomeQueryParameter(locationIsHome *bool) *NetworkIPInterfacesGetParams {
	o.SetLocationIsHomeQueryParameter(locationIsHome)
	return o
}

// SetLocationIsHomeQueryParameter adds the locationIsHome to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) SetLocationIsHomeQueryParameter(locationIsHome *bool) {
	o.LocationIsHomeQueryParameter = locationIsHome
}

// WithLocationNodeNameQueryParameter adds the locationNodeName to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) WithLocationNodeNameQueryParameter(locationNodeName *string) *NetworkIPInterfacesGetParams {
	o.SetLocationNodeNameQueryParameter(locationNodeName)
	return o
}

// SetLocationNodeNameQueryParameter adds the locationNodeName to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) SetLocationNodeNameQueryParameter(locationNodeName *string) {
	o.LocationNodeNameQueryParameter = locationNodeName
}

// WithLocationNodeUUIDQueryParameter adds the locationNodeUUID to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) WithLocationNodeUUIDQueryParameter(locationNodeUUID *string) *NetworkIPInterfacesGetParams {
	o.SetLocationNodeUUIDQueryParameter(locationNodeUUID)
	return o
}

// SetLocationNodeUUIDQueryParameter adds the locationNodeUuid to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) SetLocationNodeUUIDQueryParameter(locationNodeUUID *string) {
	o.LocationNodeUUIDQueryParameter = locationNodeUUID
}

// WithLocationPortNameQueryParameter adds the locationPortName to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) WithLocationPortNameQueryParameter(locationPortName *string) *NetworkIPInterfacesGetParams {
	o.SetLocationPortNameQueryParameter(locationPortName)
	return o
}

// SetLocationPortNameQueryParameter adds the locationPortName to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) SetLocationPortNameQueryParameter(locationPortName *string) {
	o.LocationPortNameQueryParameter = locationPortName
}

// WithLocationPortNodeNameQueryParameter adds the locationPortNodeName to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) WithLocationPortNodeNameQueryParameter(locationPortNodeName *string) *NetworkIPInterfacesGetParams {
	o.SetLocationPortNodeNameQueryParameter(locationPortNodeName)
	return o
}

// SetLocationPortNodeNameQueryParameter adds the locationPortNodeName to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) SetLocationPortNodeNameQueryParameter(locationPortNodeName *string) {
	o.LocationPortNodeNameQueryParameter = locationPortNodeName
}

// WithLocationPortUUIDQueryParameter adds the locationPortUUID to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) WithLocationPortUUIDQueryParameter(locationPortUUID *string) *NetworkIPInterfacesGetParams {
	o.SetLocationPortUUIDQueryParameter(locationPortUUID)
	return o
}

// SetLocationPortUUIDQueryParameter adds the locationPortUuid to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) SetLocationPortUUIDQueryParameter(locationPortUUID *string) {
	o.LocationPortUUIDQueryParameter = locationPortUUID
}

// WithMaxRecordsQueryParameter adds the maxRecords to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) WithMaxRecordsQueryParameter(maxRecords *int64) *NetworkIPInterfacesGetParams {
	o.SetMaxRecordsQueryParameter(maxRecords)
	return o
}

// SetMaxRecordsQueryParameter adds the maxRecords to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) SetMaxRecordsQueryParameter(maxRecords *int64) {
	o.MaxRecordsQueryParameter = maxRecords
}

// WithMetricDurationQueryParameter adds the metricDuration to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) WithMetricDurationQueryParameter(metricDuration *string) *NetworkIPInterfacesGetParams {
	o.SetMetricDurationQueryParameter(metricDuration)
	return o
}

// SetMetricDurationQueryParameter adds the metricDuration to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) SetMetricDurationQueryParameter(metricDuration *string) {
	o.MetricDurationQueryParameter = metricDuration
}

// WithMetricStatusQueryParameter adds the metricStatus to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) WithMetricStatusQueryParameter(metricStatus *string) *NetworkIPInterfacesGetParams {
	o.SetMetricStatusQueryParameter(metricStatus)
	return o
}

// SetMetricStatusQueryParameter adds the metricStatus to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) SetMetricStatusQueryParameter(metricStatus *string) {
	o.MetricStatusQueryParameter = metricStatus
}

// WithMetricThroughputReadQueryParameter adds the metricThroughputRead to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) WithMetricThroughputReadQueryParameter(metricThroughputRead *int64) *NetworkIPInterfacesGetParams {
	o.SetMetricThroughputReadQueryParameter(metricThroughputRead)
	return o
}

// SetMetricThroughputReadQueryParameter adds the metricThroughputRead to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) SetMetricThroughputReadQueryParameter(metricThroughputRead *int64) {
	o.MetricThroughputReadQueryParameter = metricThroughputRead
}

// WithMetricThroughputTotalQueryParameter adds the metricThroughputTotal to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) WithMetricThroughputTotalQueryParameter(metricThroughputTotal *int64) *NetworkIPInterfacesGetParams {
	o.SetMetricThroughputTotalQueryParameter(metricThroughputTotal)
	return o
}

// SetMetricThroughputTotalQueryParameter adds the metricThroughputTotal to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) SetMetricThroughputTotalQueryParameter(metricThroughputTotal *int64) {
	o.MetricThroughputTotalQueryParameter = metricThroughputTotal
}

// WithMetricThroughputWriteQueryParameter adds the metricThroughputWrite to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) WithMetricThroughputWriteQueryParameter(metricThroughputWrite *int64) *NetworkIPInterfacesGetParams {
	o.SetMetricThroughputWriteQueryParameter(metricThroughputWrite)
	return o
}

// SetMetricThroughputWriteQueryParameter adds the metricThroughputWrite to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) SetMetricThroughputWriteQueryParameter(metricThroughputWrite *int64) {
	o.MetricThroughputWriteQueryParameter = metricThroughputWrite
}

// WithMetricTimestampQueryParameter adds the metricTimestamp to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) WithMetricTimestampQueryParameter(metricTimestamp *string) *NetworkIPInterfacesGetParams {
	o.SetMetricTimestampQueryParameter(metricTimestamp)
	return o
}

// SetMetricTimestampQueryParameter adds the metricTimestamp to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) SetMetricTimestampQueryParameter(metricTimestamp *string) {
	o.MetricTimestampQueryParameter = metricTimestamp
}

// WithNameQueryParameter adds the name to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) WithNameQueryParameter(name *string) *NetworkIPInterfacesGetParams {
	o.SetNameQueryParameter(name)
	return o
}

// SetNameQueryParameter adds the name to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) SetNameQueryParameter(name *string) {
	o.NameQueryParameter = name
}

// WithOrderByQueryParameter adds the orderBy to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) WithOrderByQueryParameter(orderBy []string) *NetworkIPInterfacesGetParams {
	o.SetOrderByQueryParameter(orderBy)
	return o
}

// SetOrderByQueryParameter adds the orderBy to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) SetOrderByQueryParameter(orderBy []string) {
	o.OrderByQueryParameter = orderBy
}

// WithReturnRecordsQueryParameter adds the returnRecords to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) WithReturnRecordsQueryParameter(returnRecords *bool) *NetworkIPInterfacesGetParams {
	o.SetReturnRecordsQueryParameter(returnRecords)
	return o
}

// SetReturnRecordsQueryParameter adds the returnRecords to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) SetReturnRecordsQueryParameter(returnRecords *bool) {
	o.ReturnRecordsQueryParameter = returnRecords
}

// WithReturnTimeoutQueryParameter adds the returnTimeout to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) WithReturnTimeoutQueryParameter(returnTimeout *int64) *NetworkIPInterfacesGetParams {
	o.SetReturnTimeoutQueryParameter(returnTimeout)
	return o
}

// SetReturnTimeoutQueryParameter adds the returnTimeout to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) SetReturnTimeoutQueryParameter(returnTimeout *int64) {
	o.ReturnTimeoutQueryParameter = returnTimeout
}

// WithScopeQueryParameter adds the scope to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) WithScopeQueryParameter(scope *string) *NetworkIPInterfacesGetParams {
	o.SetScopeQueryParameter(scope)
	return o
}

// SetScopeQueryParameter adds the scope to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) SetScopeQueryParameter(scope *string) {
	o.ScopeQueryParameter = scope
}

// WithServicePolicyNameQueryParameter adds the servicePolicyName to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) WithServicePolicyNameQueryParameter(servicePolicyName *string) *NetworkIPInterfacesGetParams {
	o.SetServicePolicyNameQueryParameter(servicePolicyName)
	return o
}

// SetServicePolicyNameQueryParameter adds the servicePolicyName to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) SetServicePolicyNameQueryParameter(servicePolicyName *string) {
	o.ServicePolicyNameQueryParameter = servicePolicyName
}

// WithServicePolicyUUIDQueryParameter adds the servicePolicyUUID to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) WithServicePolicyUUIDQueryParameter(servicePolicyUUID *string) *NetworkIPInterfacesGetParams {
	o.SetServicePolicyUUIDQueryParameter(servicePolicyUUID)
	return o
}

// SetServicePolicyUUIDQueryParameter adds the servicePolicyUuid to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) SetServicePolicyUUIDQueryParameter(servicePolicyUUID *string) {
	o.ServicePolicyUUIDQueryParameter = servicePolicyUUID
}

// WithServicesQueryParameter adds the services to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) WithServicesQueryParameter(services *string) *NetworkIPInterfacesGetParams {
	o.SetServicesQueryParameter(services)
	return o
}

// SetServicesQueryParameter adds the services to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) SetServicesQueryParameter(services *string) {
	o.ServicesQueryParameter = services
}

// WithStateQueryParameter adds the state to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) WithStateQueryParameter(state *string) *NetworkIPInterfacesGetParams {
	o.SetStateQueryParameter(state)
	return o
}

// SetStateQueryParameter adds the state to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) SetStateQueryParameter(state *string) {
	o.StateQueryParameter = state
}

// WithStatisticsStatusQueryParameter adds the statisticsStatus to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) WithStatisticsStatusQueryParameter(statisticsStatus *string) *NetworkIPInterfacesGetParams {
	o.SetStatisticsStatusQueryParameter(statisticsStatus)
	return o
}

// SetStatisticsStatusQueryParameter adds the statisticsStatus to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) SetStatisticsStatusQueryParameter(statisticsStatus *string) {
	o.StatisticsStatusQueryParameter = statisticsStatus
}

// WithStatisticsThroughputRawReadQueryParameter adds the statisticsThroughputRawRead to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) WithStatisticsThroughputRawReadQueryParameter(statisticsThroughputRawRead *int64) *NetworkIPInterfacesGetParams {
	o.SetStatisticsThroughputRawReadQueryParameter(statisticsThroughputRawRead)
	return o
}

// SetStatisticsThroughputRawReadQueryParameter adds the statisticsThroughputRawRead to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) SetStatisticsThroughputRawReadQueryParameter(statisticsThroughputRawRead *int64) {
	o.StatisticsThroughputRawReadQueryParameter = statisticsThroughputRawRead
}

// WithStatisticsThroughputRawTotalQueryParameter adds the statisticsThroughputRawTotal to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) WithStatisticsThroughputRawTotalQueryParameter(statisticsThroughputRawTotal *int64) *NetworkIPInterfacesGetParams {
	o.SetStatisticsThroughputRawTotalQueryParameter(statisticsThroughputRawTotal)
	return o
}

// SetStatisticsThroughputRawTotalQueryParameter adds the statisticsThroughputRawTotal to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) SetStatisticsThroughputRawTotalQueryParameter(statisticsThroughputRawTotal *int64) {
	o.StatisticsThroughputRawTotalQueryParameter = statisticsThroughputRawTotal
}

// WithStatisticsThroughputRawWriteQueryParameter adds the statisticsThroughputRawWrite to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) WithStatisticsThroughputRawWriteQueryParameter(statisticsThroughputRawWrite *int64) *NetworkIPInterfacesGetParams {
	o.SetStatisticsThroughputRawWriteQueryParameter(statisticsThroughputRawWrite)
	return o
}

// SetStatisticsThroughputRawWriteQueryParameter adds the statisticsThroughputRawWrite to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) SetStatisticsThroughputRawWriteQueryParameter(statisticsThroughputRawWrite *int64) {
	o.StatisticsThroughputRawWriteQueryParameter = statisticsThroughputRawWrite
}

// WithStatisticsTimestampQueryParameter adds the statisticsTimestamp to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) WithStatisticsTimestampQueryParameter(statisticsTimestamp *string) *NetworkIPInterfacesGetParams {
	o.SetStatisticsTimestampQueryParameter(statisticsTimestamp)
	return o
}

// SetStatisticsTimestampQueryParameter adds the statisticsTimestamp to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) SetStatisticsTimestampQueryParameter(statisticsTimestamp *string) {
	o.StatisticsTimestampQueryParameter = statisticsTimestamp
}

// WithSVMNameQueryParameter adds the svmName to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) WithSVMNameQueryParameter(svmName *string) *NetworkIPInterfacesGetParams {
	o.SetSVMNameQueryParameter(svmName)
	return o
}

// SetSVMNameQueryParameter adds the svmName to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) SetSVMNameQueryParameter(svmName *string) {
	o.SVMNameQueryParameter = svmName
}

// WithSVMUUIDQueryParameter adds the svmUUID to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) WithSVMUUIDQueryParameter(svmUUID *string) *NetworkIPInterfacesGetParams {
	o.SetSVMUUIDQueryParameter(svmUUID)
	return o
}

// SetSVMUUIDQueryParameter adds the svmUuid to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) SetSVMUUIDQueryParameter(svmUUID *string) {
	o.SVMUUIDQueryParameter = svmUUID
}

// WithUUIDQueryParameter adds the uuid to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) WithUUIDQueryParameter(uuid *string) *NetworkIPInterfacesGetParams {
	o.SetUUIDQueryParameter(uuid)
	return o
}

// SetUUIDQueryParameter adds the uuid to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) SetUUIDQueryParameter(uuid *string) {
	o.UUIDQueryParameter = uuid
}

// WithVIPQueryParameter adds the vip to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) WithVIPQueryParameter(vip *bool) *NetworkIPInterfacesGetParams {
	o.SetVIPQueryParameter(vip)
	return o
}

// SetVIPQueryParameter adds the vip to the network ip interfaces get params
func (o *NetworkIPInterfacesGetParams) SetVIPQueryParameter(vip *bool) {
	o.VIPQueryParameter = vip
}

// WriteToRequest writes these params to a swagger request
func (o *NetworkIPInterfacesGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DDNSEnabledQueryParameter != nil {

		// query param ddns_enabled
		var qrDdnsEnabled bool

		if o.DDNSEnabledQueryParameter != nil {
			qrDdnsEnabled = *o.DDNSEnabledQueryParameter
		}
		qDdnsEnabled := swag.FormatBool(qrDdnsEnabled)
		if qDdnsEnabled != "" {

			if err := r.SetQueryParam("ddns_enabled", qDdnsEnabled); err != nil {
				return err
			}
		}
	}

	if o.DNSZoneQueryParameter != nil {

		// query param dns_zone
		var qrDNSZone string

		if o.DNSZoneQueryParameter != nil {
			qrDNSZone = *o.DNSZoneQueryParameter
		}
		qDNSZone := qrDNSZone
		if qDNSZone != "" {

			if err := r.SetQueryParam("dns_zone", qDNSZone); err != nil {
				return err
			}
		}
	}

	if o.EnabledQueryParameter != nil {

		// query param enabled
		var qrEnabled bool

		if o.EnabledQueryParameter != nil {
			qrEnabled = *o.EnabledQueryParameter
		}
		qEnabled := swag.FormatBool(qrEnabled)
		if qEnabled != "" {

			if err := r.SetQueryParam("enabled", qEnabled); err != nil {
				return err
			}
		}
	}

	if o.FieldsQueryParameter != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.IPAddressQueryParameter != nil {

		// query param ip.address
		var qrIPAddress string

		if o.IPAddressQueryParameter != nil {
			qrIPAddress = *o.IPAddressQueryParameter
		}
		qIPAddress := qrIPAddress
		if qIPAddress != "" {

			if err := r.SetQueryParam("ip.address", qIPAddress); err != nil {
				return err
			}
		}
	}

	if o.IPFamilyQueryParameter != nil {

		// query param ip.family
		var qrIPFamily string

		if o.IPFamilyQueryParameter != nil {
			qrIPFamily = *o.IPFamilyQueryParameter
		}
		qIPFamily := qrIPFamily
		if qIPFamily != "" {

			if err := r.SetQueryParam("ip.family", qIPFamily); err != nil {
				return err
			}
		}
	}

	if o.IPNetmaskQueryParameter != nil {

		// query param ip.netmask
		var qrIPNetmask string

		if o.IPNetmaskQueryParameter != nil {
			qrIPNetmask = *o.IPNetmaskQueryParameter
		}
		qIPNetmask := qrIPNetmask
		if qIPNetmask != "" {

			if err := r.SetQueryParam("ip.netmask", qIPNetmask); err != nil {
				return err
			}
		}
	}

	if o.IpspaceNameQueryParameter != nil {

		// query param ipspace.name
		var qrIpspaceName string

		if o.IpspaceNameQueryParameter != nil {
			qrIpspaceName = *o.IpspaceNameQueryParameter
		}
		qIpspaceName := qrIpspaceName
		if qIpspaceName != "" {

			if err := r.SetQueryParam("ipspace.name", qIpspaceName); err != nil {
				return err
			}
		}
	}

	if o.IpspaceUUIDQueryParameter != nil {

		// query param ipspace.uuid
		var qrIpspaceUUID string

		if o.IpspaceUUIDQueryParameter != nil {
			qrIpspaceUUID = *o.IpspaceUUIDQueryParameter
		}
		qIpspaceUUID := qrIpspaceUUID
		if qIpspaceUUID != "" {

			if err := r.SetQueryParam("ipspace.uuid", qIpspaceUUID); err != nil {
				return err
			}
		}
	}

	if o.LocationAutoRevertQueryParameter != nil {

		// query param location.auto_revert
		var qrLocationAutoRevert bool

		if o.LocationAutoRevertQueryParameter != nil {
			qrLocationAutoRevert = *o.LocationAutoRevertQueryParameter
		}
		qLocationAutoRevert := swag.FormatBool(qrLocationAutoRevert)
		if qLocationAutoRevert != "" {

			if err := r.SetQueryParam("location.auto_revert", qLocationAutoRevert); err != nil {
				return err
			}
		}
	}

	if o.LocationFailoverQueryParameter != nil {

		// query param location.failover
		var qrLocationFailover string

		if o.LocationFailoverQueryParameter != nil {
			qrLocationFailover = *o.LocationFailoverQueryParameter
		}
		qLocationFailover := qrLocationFailover
		if qLocationFailover != "" {

			if err := r.SetQueryParam("location.failover", qLocationFailover); err != nil {
				return err
			}
		}
	}

	if o.LocationHomeNodeNameQueryParameter != nil {

		// query param location.home_node.name
		var qrLocationHomeNodeName string

		if o.LocationHomeNodeNameQueryParameter != nil {
			qrLocationHomeNodeName = *o.LocationHomeNodeNameQueryParameter
		}
		qLocationHomeNodeName := qrLocationHomeNodeName
		if qLocationHomeNodeName != "" {

			if err := r.SetQueryParam("location.home_node.name", qLocationHomeNodeName); err != nil {
				return err
			}
		}
	}

	if o.LocationHomeNodeUUIDQueryParameter != nil {

		// query param location.home_node.uuid
		var qrLocationHomeNodeUUID string

		if o.LocationHomeNodeUUIDQueryParameter != nil {
			qrLocationHomeNodeUUID = *o.LocationHomeNodeUUIDQueryParameter
		}
		qLocationHomeNodeUUID := qrLocationHomeNodeUUID
		if qLocationHomeNodeUUID != "" {

			if err := r.SetQueryParam("location.home_node.uuid", qLocationHomeNodeUUID); err != nil {
				return err
			}
		}
	}

	if o.LocationHomePortNameQueryParameter != nil {

		// query param location.home_port.name
		var qrLocationHomePortName string

		if o.LocationHomePortNameQueryParameter != nil {
			qrLocationHomePortName = *o.LocationHomePortNameQueryParameter
		}
		qLocationHomePortName := qrLocationHomePortName
		if qLocationHomePortName != "" {

			if err := r.SetQueryParam("location.home_port.name", qLocationHomePortName); err != nil {
				return err
			}
		}
	}

	if o.LocationHomePortNodeNameQueryParameter != nil {

		// query param location.home_port.node.name
		var qrLocationHomePortNodeName string

		if o.LocationHomePortNodeNameQueryParameter != nil {
			qrLocationHomePortNodeName = *o.LocationHomePortNodeNameQueryParameter
		}
		qLocationHomePortNodeName := qrLocationHomePortNodeName
		if qLocationHomePortNodeName != "" {

			if err := r.SetQueryParam("location.home_port.node.name", qLocationHomePortNodeName); err != nil {
				return err
			}
		}
	}

	if o.LocationHomePortUUIDQueryParameter != nil {

		// query param location.home_port.uuid
		var qrLocationHomePortUUID string

		if o.LocationHomePortUUIDQueryParameter != nil {
			qrLocationHomePortUUID = *o.LocationHomePortUUIDQueryParameter
		}
		qLocationHomePortUUID := qrLocationHomePortUUID
		if qLocationHomePortUUID != "" {

			if err := r.SetQueryParam("location.home_port.uuid", qLocationHomePortUUID); err != nil {
				return err
			}
		}
	}

	if o.LocationIsHomeQueryParameter != nil {

		// query param location.is_home
		var qrLocationIsHome bool

		if o.LocationIsHomeQueryParameter != nil {
			qrLocationIsHome = *o.LocationIsHomeQueryParameter
		}
		qLocationIsHome := swag.FormatBool(qrLocationIsHome)
		if qLocationIsHome != "" {

			if err := r.SetQueryParam("location.is_home", qLocationIsHome); err != nil {
				return err
			}
		}
	}

	if o.LocationNodeNameQueryParameter != nil {

		// query param location.node.name
		var qrLocationNodeName string

		if o.LocationNodeNameQueryParameter != nil {
			qrLocationNodeName = *o.LocationNodeNameQueryParameter
		}
		qLocationNodeName := qrLocationNodeName
		if qLocationNodeName != "" {

			if err := r.SetQueryParam("location.node.name", qLocationNodeName); err != nil {
				return err
			}
		}
	}

	if o.LocationNodeUUIDQueryParameter != nil {

		// query param location.node.uuid
		var qrLocationNodeUUID string

		if o.LocationNodeUUIDQueryParameter != nil {
			qrLocationNodeUUID = *o.LocationNodeUUIDQueryParameter
		}
		qLocationNodeUUID := qrLocationNodeUUID
		if qLocationNodeUUID != "" {

			if err := r.SetQueryParam("location.node.uuid", qLocationNodeUUID); err != nil {
				return err
			}
		}
	}

	if o.LocationPortNameQueryParameter != nil {

		// query param location.port.name
		var qrLocationPortName string

		if o.LocationPortNameQueryParameter != nil {
			qrLocationPortName = *o.LocationPortNameQueryParameter
		}
		qLocationPortName := qrLocationPortName
		if qLocationPortName != "" {

			if err := r.SetQueryParam("location.port.name", qLocationPortName); err != nil {
				return err
			}
		}
	}

	if o.LocationPortNodeNameQueryParameter != nil {

		// query param location.port.node.name
		var qrLocationPortNodeName string

		if o.LocationPortNodeNameQueryParameter != nil {
			qrLocationPortNodeName = *o.LocationPortNodeNameQueryParameter
		}
		qLocationPortNodeName := qrLocationPortNodeName
		if qLocationPortNodeName != "" {

			if err := r.SetQueryParam("location.port.node.name", qLocationPortNodeName); err != nil {
				return err
			}
		}
	}

	if o.LocationPortUUIDQueryParameter != nil {

		// query param location.port.uuid
		var qrLocationPortUUID string

		if o.LocationPortUUIDQueryParameter != nil {
			qrLocationPortUUID = *o.LocationPortUUIDQueryParameter
		}
		qLocationPortUUID := qrLocationPortUUID
		if qLocationPortUUID != "" {

			if err := r.SetQueryParam("location.port.uuid", qLocationPortUUID); err != nil {
				return err
			}
		}
	}

	if o.MaxRecordsQueryParameter != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecordsQueryParameter != nil {
			qrMaxRecords = *o.MaxRecordsQueryParameter
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.MetricDurationQueryParameter != nil {

		// query param metric.duration
		var qrMetricDuration string

		if o.MetricDurationQueryParameter != nil {
			qrMetricDuration = *o.MetricDurationQueryParameter
		}
		qMetricDuration := qrMetricDuration
		if qMetricDuration != "" {

			if err := r.SetQueryParam("metric.duration", qMetricDuration); err != nil {
				return err
			}
		}
	}

	if o.MetricStatusQueryParameter != nil {

		// query param metric.status
		var qrMetricStatus string

		if o.MetricStatusQueryParameter != nil {
			qrMetricStatus = *o.MetricStatusQueryParameter
		}
		qMetricStatus := qrMetricStatus
		if qMetricStatus != "" {

			if err := r.SetQueryParam("metric.status", qMetricStatus); err != nil {
				return err
			}
		}
	}

	if o.MetricThroughputReadQueryParameter != nil {

		// query param metric.throughput.read
		var qrMetricThroughputRead int64

		if o.MetricThroughputReadQueryParameter != nil {
			qrMetricThroughputRead = *o.MetricThroughputReadQueryParameter
		}
		qMetricThroughputRead := swag.FormatInt64(qrMetricThroughputRead)
		if qMetricThroughputRead != "" {

			if err := r.SetQueryParam("metric.throughput.read", qMetricThroughputRead); err != nil {
				return err
			}
		}
	}

	if o.MetricThroughputTotalQueryParameter != nil {

		// query param metric.throughput.total
		var qrMetricThroughputTotal int64

		if o.MetricThroughputTotalQueryParameter != nil {
			qrMetricThroughputTotal = *o.MetricThroughputTotalQueryParameter
		}
		qMetricThroughputTotal := swag.FormatInt64(qrMetricThroughputTotal)
		if qMetricThroughputTotal != "" {

			if err := r.SetQueryParam("metric.throughput.total", qMetricThroughputTotal); err != nil {
				return err
			}
		}
	}

	if o.MetricThroughputWriteQueryParameter != nil {

		// query param metric.throughput.write
		var qrMetricThroughputWrite int64

		if o.MetricThroughputWriteQueryParameter != nil {
			qrMetricThroughputWrite = *o.MetricThroughputWriteQueryParameter
		}
		qMetricThroughputWrite := swag.FormatInt64(qrMetricThroughputWrite)
		if qMetricThroughputWrite != "" {

			if err := r.SetQueryParam("metric.throughput.write", qMetricThroughputWrite); err != nil {
				return err
			}
		}
	}

	if o.MetricTimestampQueryParameter != nil {

		// query param metric.timestamp
		var qrMetricTimestamp string

		if o.MetricTimestampQueryParameter != nil {
			qrMetricTimestamp = *o.MetricTimestampQueryParameter
		}
		qMetricTimestamp := qrMetricTimestamp
		if qMetricTimestamp != "" {

			if err := r.SetQueryParam("metric.timestamp", qMetricTimestamp); err != nil {
				return err
			}
		}
	}

	if o.NameQueryParameter != nil {

		// query param name
		var qrName string

		if o.NameQueryParameter != nil {
			qrName = *o.NameQueryParameter
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.OrderByQueryParameter != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.ReturnRecordsQueryParameter != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecordsQueryParameter != nil {
			qrReturnRecords = *o.ReturnRecordsQueryParameter
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeoutQueryParameter != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeoutQueryParameter != nil {
			qrReturnTimeout = *o.ReturnTimeoutQueryParameter
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.ScopeQueryParameter != nil {

		// query param scope
		var qrScope string

		if o.ScopeQueryParameter != nil {
			qrScope = *o.ScopeQueryParameter
		}
		qScope := qrScope
		if qScope != "" {

			if err := r.SetQueryParam("scope", qScope); err != nil {
				return err
			}
		}
	}

	if o.ServicePolicyNameQueryParameter != nil {

		// query param service_policy.name
		var qrServicePolicyName string

		if o.ServicePolicyNameQueryParameter != nil {
			qrServicePolicyName = *o.ServicePolicyNameQueryParameter
		}
		qServicePolicyName := qrServicePolicyName
		if qServicePolicyName != "" {

			if err := r.SetQueryParam("service_policy.name", qServicePolicyName); err != nil {
				return err
			}
		}
	}

	if o.ServicePolicyUUIDQueryParameter != nil {

		// query param service_policy.uuid
		var qrServicePolicyUUID string

		if o.ServicePolicyUUIDQueryParameter != nil {
			qrServicePolicyUUID = *o.ServicePolicyUUIDQueryParameter
		}
		qServicePolicyUUID := qrServicePolicyUUID
		if qServicePolicyUUID != "" {

			if err := r.SetQueryParam("service_policy.uuid", qServicePolicyUUID); err != nil {
				return err
			}
		}
	}

	if o.ServicesQueryParameter != nil {

		// query param services
		var qrServices string

		if o.ServicesQueryParameter != nil {
			qrServices = *o.ServicesQueryParameter
		}
		qServices := qrServices
		if qServices != "" {

			if err := r.SetQueryParam("services", qServices); err != nil {
				return err
			}
		}
	}

	if o.StateQueryParameter != nil {

		// query param state
		var qrState string

		if o.StateQueryParameter != nil {
			qrState = *o.StateQueryParameter
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if o.StatisticsStatusQueryParameter != nil {

		// query param statistics.status
		var qrStatisticsStatus string

		if o.StatisticsStatusQueryParameter != nil {
			qrStatisticsStatus = *o.StatisticsStatusQueryParameter
		}
		qStatisticsStatus := qrStatisticsStatus
		if qStatisticsStatus != "" {

			if err := r.SetQueryParam("statistics.status", qStatisticsStatus); err != nil {
				return err
			}
		}
	}

	if o.StatisticsThroughputRawReadQueryParameter != nil {

		// query param statistics.throughput_raw.read
		var qrStatisticsThroughputRawRead int64

		if o.StatisticsThroughputRawReadQueryParameter != nil {
			qrStatisticsThroughputRawRead = *o.StatisticsThroughputRawReadQueryParameter
		}
		qStatisticsThroughputRawRead := swag.FormatInt64(qrStatisticsThroughputRawRead)
		if qStatisticsThroughputRawRead != "" {

			if err := r.SetQueryParam("statistics.throughput_raw.read", qStatisticsThroughputRawRead); err != nil {
				return err
			}
		}
	}

	if o.StatisticsThroughputRawTotalQueryParameter != nil {

		// query param statistics.throughput_raw.total
		var qrStatisticsThroughputRawTotal int64

		if o.StatisticsThroughputRawTotalQueryParameter != nil {
			qrStatisticsThroughputRawTotal = *o.StatisticsThroughputRawTotalQueryParameter
		}
		qStatisticsThroughputRawTotal := swag.FormatInt64(qrStatisticsThroughputRawTotal)
		if qStatisticsThroughputRawTotal != "" {

			if err := r.SetQueryParam("statistics.throughput_raw.total", qStatisticsThroughputRawTotal); err != nil {
				return err
			}
		}
	}

	if o.StatisticsThroughputRawWriteQueryParameter != nil {

		// query param statistics.throughput_raw.write
		var qrStatisticsThroughputRawWrite int64

		if o.StatisticsThroughputRawWriteQueryParameter != nil {
			qrStatisticsThroughputRawWrite = *o.StatisticsThroughputRawWriteQueryParameter
		}
		qStatisticsThroughputRawWrite := swag.FormatInt64(qrStatisticsThroughputRawWrite)
		if qStatisticsThroughputRawWrite != "" {

			if err := r.SetQueryParam("statistics.throughput_raw.write", qStatisticsThroughputRawWrite); err != nil {
				return err
			}
		}
	}

	if o.StatisticsTimestampQueryParameter != nil {

		// query param statistics.timestamp
		var qrStatisticsTimestamp string

		if o.StatisticsTimestampQueryParameter != nil {
			qrStatisticsTimestamp = *o.StatisticsTimestampQueryParameter
		}
		qStatisticsTimestamp := qrStatisticsTimestamp
		if qStatisticsTimestamp != "" {

			if err := r.SetQueryParam("statistics.timestamp", qStatisticsTimestamp); err != nil {
				return err
			}
		}
	}

	if o.SVMNameQueryParameter != nil {

		// query param svm.name
		var qrSvmName string

		if o.SVMNameQueryParameter != nil {
			qrSvmName = *o.SVMNameQueryParameter
		}
		qSvmName := qrSvmName
		if qSvmName != "" {

			if err := r.SetQueryParam("svm.name", qSvmName); err != nil {
				return err
			}
		}
	}

	if o.SVMUUIDQueryParameter != nil {

		// query param svm.uuid
		var qrSvmUUID string

		if o.SVMUUIDQueryParameter != nil {
			qrSvmUUID = *o.SVMUUIDQueryParameter
		}
		qSvmUUID := qrSvmUUID
		if qSvmUUID != "" {

			if err := r.SetQueryParam("svm.uuid", qSvmUUID); err != nil {
				return err
			}
		}
	}

	if o.UUIDQueryParameter != nil {

		// query param uuid
		var qrUUID string

		if o.UUIDQueryParameter != nil {
			qrUUID = *o.UUIDQueryParameter
		}
		qUUID := qrUUID
		if qUUID != "" {

			if err := r.SetQueryParam("uuid", qUUID); err != nil {
				return err
			}
		}
	}

	if o.VIPQueryParameter != nil {

		// query param vip
		var qrVip bool

		if o.VIPQueryParameter != nil {
			qrVip = *o.VIPQueryParameter
		}
		qVip := swag.FormatBool(qrVip)
		if qVip != "" {

			if err := r.SetQueryParam("vip", qVip); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamNetworkIPInterfacesGet binds the parameter fields
func (o *NetworkIPInterfacesGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.FieldsQueryParameter

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamNetworkIPInterfacesGet binds the parameter order_by
func (o *NetworkIPInterfacesGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderByQueryParameter

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
