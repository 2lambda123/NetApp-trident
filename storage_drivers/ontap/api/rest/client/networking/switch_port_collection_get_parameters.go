// Code generated by go-swagger; DO NOT EDIT.

package networking

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSwitchPortCollectionGetParams creates a new SwitchPortCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSwitchPortCollectionGetParams() *SwitchPortCollectionGetParams {
	return &SwitchPortCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSwitchPortCollectionGetParamsWithTimeout creates a new SwitchPortCollectionGetParams object
// with the ability to set a timeout on a request.
func NewSwitchPortCollectionGetParamsWithTimeout(timeout time.Duration) *SwitchPortCollectionGetParams {
	return &SwitchPortCollectionGetParams{
		timeout: timeout,
	}
}

// NewSwitchPortCollectionGetParamsWithContext creates a new SwitchPortCollectionGetParams object
// with the ability to set a context for a request.
func NewSwitchPortCollectionGetParamsWithContext(ctx context.Context) *SwitchPortCollectionGetParams {
	return &SwitchPortCollectionGetParams{
		Context: ctx,
	}
}

// NewSwitchPortCollectionGetParamsWithHTTPClient creates a new SwitchPortCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewSwitchPortCollectionGetParamsWithHTTPClient(client *http.Client) *SwitchPortCollectionGetParams {
	return &SwitchPortCollectionGetParams{
		HTTPClient: client,
	}
}

/* SwitchPortCollectionGetParams contains all the parameters to send to the API endpoint
   for the switch port collection get operation.

   Typically these are written to a http.Request.
*/
type SwitchPortCollectionGetParams struct {

	/* Configured.

	   Filter by configured
	*/
	ConfiguredQueryParameter *string

	/* DuplexType.

	   Filter by duplex_type
	*/
	DuplexTypeQueryParameter *string

	/* Fields.

	   Specify the fields to return.
	*/
	FieldsQueryParameter []string

	/* IdentityIndex.

	   Filter by identity.index
	*/
	IdentityIndexQueryParameter *int64

	/* IdentityName.

	   Filter by identity.name
	*/
	IdentityNameQueryParameter *string

	/* IdentityNumber.

	   Filter by identity.number
	*/
	IdentityNumberQueryParameter *int64

	/* Isl.

	   Filter by isl
	*/
	IslQueryParameter *bool

	/* MacAddress.

	   Filter by mac_address
	*/
	MacAddressQueryParameter *string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecordsQueryParameter *int64

	/* Mtu.

	   Filter by mtu
	*/
	MtuQueryParameter *int64

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderByQueryParameter []string

	/* RemotePortDeviceNodeName.

	   Filter by remote_port.device.node.name
	*/
	RemotePortDeviceNodeNameQueryParameter *string

	/* RemotePortDeviceNodeUUID.

	   Filter by remote_port.device.node.uuid
	*/
	RemotePortDeviceNodeUUIDQueryParameter *string

	/* RemotePortDeviceShelfUID.

	   Filter by remote_port.device.shelf.uid
	*/
	RemotePortDeviceShelfUIDQueryParameter *string

	/* RemotePortMtu.

	   Filter by remote_port.mtu
	*/
	RemotePortMtuQueryParameter *int64

	/* RemotePortName.

	   Filter by remote_port.name
	*/
	RemotePortNameQueryParameter *string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecordsQueryParameter *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeoutQueryParameter *int64

	/* Speed.

	   Filter by speed
	*/
	SpeedQueryParameter *int64

	/* State.

	   Filter by state
	*/
	StateQueryParameter *string

	/* StatisticsReceiveRawDiscards.

	   Filter by statistics.receive_raw.discards
	*/
	StatisticsReceiveRawDiscardsQueryParameter *int64

	/* StatisticsReceiveRawErrors.

	   Filter by statistics.receive_raw.errors
	*/
	StatisticsReceiveRawErrorsQueryParameter *int64

	/* StatisticsReceiveRawPackets.

	   Filter by statistics.receive_raw.packets
	*/
	StatisticsReceiveRawPacketsQueryParameter *int64

	/* StatisticsTransmitRawDiscards.

	   Filter by statistics.transmit_raw.discards
	*/
	StatisticsTransmitRawDiscardsQueryParameter *int64

	/* StatisticsTransmitRawErrors.

	   Filter by statistics.transmit_raw.errors
	*/
	StatisticsTransmitRawErrorsQueryParameter *int64

	/* StatisticsTransmitRawPackets.

	   Filter by statistics.transmit_raw.packets
	*/
	StatisticsTransmitRawPacketsQueryParameter *int64

	/* SwitchName.

	   Filter by switch.name
	*/
	SwitchNameQueryParameter *string

	/* Type.

	   Filter by type
	*/
	TypeQueryParameter *string

	/* VlanID.

	   Filter by vlan_id
	*/
	VlanIDQueryParameter *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the switch port collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SwitchPortCollectionGetParams) WithDefaults() *SwitchPortCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the switch port collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SwitchPortCollectionGetParams) SetDefaults() {
	var (
		returnRecordsQueryParameterDefault = bool(true)

		returnTimeoutQueryParameterDefault = int64(15)
	)

	val := SwitchPortCollectionGetParams{
		ReturnRecordsQueryParameter: &returnRecordsQueryParameterDefault,
		ReturnTimeoutQueryParameter: &returnTimeoutQueryParameterDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the switch port collection get params
func (o *SwitchPortCollectionGetParams) WithTimeout(timeout time.Duration) *SwitchPortCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the switch port collection get params
func (o *SwitchPortCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the switch port collection get params
func (o *SwitchPortCollectionGetParams) WithContext(ctx context.Context) *SwitchPortCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the switch port collection get params
func (o *SwitchPortCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the switch port collection get params
func (o *SwitchPortCollectionGetParams) WithHTTPClient(client *http.Client) *SwitchPortCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the switch port collection get params
func (o *SwitchPortCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConfiguredQueryParameter adds the configured to the switch port collection get params
func (o *SwitchPortCollectionGetParams) WithConfiguredQueryParameter(configured *string) *SwitchPortCollectionGetParams {
	o.SetConfiguredQueryParameter(configured)
	return o
}

// SetConfiguredQueryParameter adds the configured to the switch port collection get params
func (o *SwitchPortCollectionGetParams) SetConfiguredQueryParameter(configured *string) {
	o.ConfiguredQueryParameter = configured
}

// WithDuplexTypeQueryParameter adds the duplexType to the switch port collection get params
func (o *SwitchPortCollectionGetParams) WithDuplexTypeQueryParameter(duplexType *string) *SwitchPortCollectionGetParams {
	o.SetDuplexTypeQueryParameter(duplexType)
	return o
}

// SetDuplexTypeQueryParameter adds the duplexType to the switch port collection get params
func (o *SwitchPortCollectionGetParams) SetDuplexTypeQueryParameter(duplexType *string) {
	o.DuplexTypeQueryParameter = duplexType
}

// WithFieldsQueryParameter adds the fields to the switch port collection get params
func (o *SwitchPortCollectionGetParams) WithFieldsQueryParameter(fields []string) *SwitchPortCollectionGetParams {
	o.SetFieldsQueryParameter(fields)
	return o
}

// SetFieldsQueryParameter adds the fields to the switch port collection get params
func (o *SwitchPortCollectionGetParams) SetFieldsQueryParameter(fields []string) {
	o.FieldsQueryParameter = fields
}

// WithIdentityIndexQueryParameter adds the identityIndex to the switch port collection get params
func (o *SwitchPortCollectionGetParams) WithIdentityIndexQueryParameter(identityIndex *int64) *SwitchPortCollectionGetParams {
	o.SetIdentityIndexQueryParameter(identityIndex)
	return o
}

// SetIdentityIndexQueryParameter adds the identityIndex to the switch port collection get params
func (o *SwitchPortCollectionGetParams) SetIdentityIndexQueryParameter(identityIndex *int64) {
	o.IdentityIndexQueryParameter = identityIndex
}

// WithIdentityNameQueryParameter adds the identityName to the switch port collection get params
func (o *SwitchPortCollectionGetParams) WithIdentityNameQueryParameter(identityName *string) *SwitchPortCollectionGetParams {
	o.SetIdentityNameQueryParameter(identityName)
	return o
}

// SetIdentityNameQueryParameter adds the identityName to the switch port collection get params
func (o *SwitchPortCollectionGetParams) SetIdentityNameQueryParameter(identityName *string) {
	o.IdentityNameQueryParameter = identityName
}

// WithIdentityNumberQueryParameter adds the identityNumber to the switch port collection get params
func (o *SwitchPortCollectionGetParams) WithIdentityNumberQueryParameter(identityNumber *int64) *SwitchPortCollectionGetParams {
	o.SetIdentityNumberQueryParameter(identityNumber)
	return o
}

// SetIdentityNumberQueryParameter adds the identityNumber to the switch port collection get params
func (o *SwitchPortCollectionGetParams) SetIdentityNumberQueryParameter(identityNumber *int64) {
	o.IdentityNumberQueryParameter = identityNumber
}

// WithIslQueryParameter adds the isl to the switch port collection get params
func (o *SwitchPortCollectionGetParams) WithIslQueryParameter(isl *bool) *SwitchPortCollectionGetParams {
	o.SetIslQueryParameter(isl)
	return o
}

// SetIslQueryParameter adds the isl to the switch port collection get params
func (o *SwitchPortCollectionGetParams) SetIslQueryParameter(isl *bool) {
	o.IslQueryParameter = isl
}

// WithMacAddressQueryParameter adds the macAddress to the switch port collection get params
func (o *SwitchPortCollectionGetParams) WithMacAddressQueryParameter(macAddress *string) *SwitchPortCollectionGetParams {
	o.SetMacAddressQueryParameter(macAddress)
	return o
}

// SetMacAddressQueryParameter adds the macAddress to the switch port collection get params
func (o *SwitchPortCollectionGetParams) SetMacAddressQueryParameter(macAddress *string) {
	o.MacAddressQueryParameter = macAddress
}

// WithMaxRecordsQueryParameter adds the maxRecords to the switch port collection get params
func (o *SwitchPortCollectionGetParams) WithMaxRecordsQueryParameter(maxRecords *int64) *SwitchPortCollectionGetParams {
	o.SetMaxRecordsQueryParameter(maxRecords)
	return o
}

// SetMaxRecordsQueryParameter adds the maxRecords to the switch port collection get params
func (o *SwitchPortCollectionGetParams) SetMaxRecordsQueryParameter(maxRecords *int64) {
	o.MaxRecordsQueryParameter = maxRecords
}

// WithMtuQueryParameter adds the mtu to the switch port collection get params
func (o *SwitchPortCollectionGetParams) WithMtuQueryParameter(mtu *int64) *SwitchPortCollectionGetParams {
	o.SetMtuQueryParameter(mtu)
	return o
}

// SetMtuQueryParameter adds the mtu to the switch port collection get params
func (o *SwitchPortCollectionGetParams) SetMtuQueryParameter(mtu *int64) {
	o.MtuQueryParameter = mtu
}

// WithOrderByQueryParameter adds the orderBy to the switch port collection get params
func (o *SwitchPortCollectionGetParams) WithOrderByQueryParameter(orderBy []string) *SwitchPortCollectionGetParams {
	o.SetOrderByQueryParameter(orderBy)
	return o
}

// SetOrderByQueryParameter adds the orderBy to the switch port collection get params
func (o *SwitchPortCollectionGetParams) SetOrderByQueryParameter(orderBy []string) {
	o.OrderByQueryParameter = orderBy
}

// WithRemotePortDeviceNodeNameQueryParameter adds the remotePortDeviceNodeName to the switch port collection get params
func (o *SwitchPortCollectionGetParams) WithRemotePortDeviceNodeNameQueryParameter(remotePortDeviceNodeName *string) *SwitchPortCollectionGetParams {
	o.SetRemotePortDeviceNodeNameQueryParameter(remotePortDeviceNodeName)
	return o
}

// SetRemotePortDeviceNodeNameQueryParameter adds the remotePortDeviceNodeName to the switch port collection get params
func (o *SwitchPortCollectionGetParams) SetRemotePortDeviceNodeNameQueryParameter(remotePortDeviceNodeName *string) {
	o.RemotePortDeviceNodeNameQueryParameter = remotePortDeviceNodeName
}

// WithRemotePortDeviceNodeUUIDQueryParameter adds the remotePortDeviceNodeUUID to the switch port collection get params
func (o *SwitchPortCollectionGetParams) WithRemotePortDeviceNodeUUIDQueryParameter(remotePortDeviceNodeUUID *string) *SwitchPortCollectionGetParams {
	o.SetRemotePortDeviceNodeUUIDQueryParameter(remotePortDeviceNodeUUID)
	return o
}

// SetRemotePortDeviceNodeUUIDQueryParameter adds the remotePortDeviceNodeUuid to the switch port collection get params
func (o *SwitchPortCollectionGetParams) SetRemotePortDeviceNodeUUIDQueryParameter(remotePortDeviceNodeUUID *string) {
	o.RemotePortDeviceNodeUUIDQueryParameter = remotePortDeviceNodeUUID
}

// WithRemotePortDeviceShelfUIDQueryParameter adds the remotePortDeviceShelfUID to the switch port collection get params
func (o *SwitchPortCollectionGetParams) WithRemotePortDeviceShelfUIDQueryParameter(remotePortDeviceShelfUID *string) *SwitchPortCollectionGetParams {
	o.SetRemotePortDeviceShelfUIDQueryParameter(remotePortDeviceShelfUID)
	return o
}

// SetRemotePortDeviceShelfUIDQueryParameter adds the remotePortDeviceShelfUid to the switch port collection get params
func (o *SwitchPortCollectionGetParams) SetRemotePortDeviceShelfUIDQueryParameter(remotePortDeviceShelfUID *string) {
	o.RemotePortDeviceShelfUIDQueryParameter = remotePortDeviceShelfUID
}

// WithRemotePortMtuQueryParameter adds the remotePortMtu to the switch port collection get params
func (o *SwitchPortCollectionGetParams) WithRemotePortMtuQueryParameter(remotePortMtu *int64) *SwitchPortCollectionGetParams {
	o.SetRemotePortMtuQueryParameter(remotePortMtu)
	return o
}

// SetRemotePortMtuQueryParameter adds the remotePortMtu to the switch port collection get params
func (o *SwitchPortCollectionGetParams) SetRemotePortMtuQueryParameter(remotePortMtu *int64) {
	o.RemotePortMtuQueryParameter = remotePortMtu
}

// WithRemotePortNameQueryParameter adds the remotePortName to the switch port collection get params
func (o *SwitchPortCollectionGetParams) WithRemotePortNameQueryParameter(remotePortName *string) *SwitchPortCollectionGetParams {
	o.SetRemotePortNameQueryParameter(remotePortName)
	return o
}

// SetRemotePortNameQueryParameter adds the remotePortName to the switch port collection get params
func (o *SwitchPortCollectionGetParams) SetRemotePortNameQueryParameter(remotePortName *string) {
	o.RemotePortNameQueryParameter = remotePortName
}

// WithReturnRecordsQueryParameter adds the returnRecords to the switch port collection get params
func (o *SwitchPortCollectionGetParams) WithReturnRecordsQueryParameter(returnRecords *bool) *SwitchPortCollectionGetParams {
	o.SetReturnRecordsQueryParameter(returnRecords)
	return o
}

// SetReturnRecordsQueryParameter adds the returnRecords to the switch port collection get params
func (o *SwitchPortCollectionGetParams) SetReturnRecordsQueryParameter(returnRecords *bool) {
	o.ReturnRecordsQueryParameter = returnRecords
}

// WithReturnTimeoutQueryParameter adds the returnTimeout to the switch port collection get params
func (o *SwitchPortCollectionGetParams) WithReturnTimeoutQueryParameter(returnTimeout *int64) *SwitchPortCollectionGetParams {
	o.SetReturnTimeoutQueryParameter(returnTimeout)
	return o
}

// SetReturnTimeoutQueryParameter adds the returnTimeout to the switch port collection get params
func (o *SwitchPortCollectionGetParams) SetReturnTimeoutQueryParameter(returnTimeout *int64) {
	o.ReturnTimeoutQueryParameter = returnTimeout
}

// WithSpeedQueryParameter adds the speed to the switch port collection get params
func (o *SwitchPortCollectionGetParams) WithSpeedQueryParameter(speed *int64) *SwitchPortCollectionGetParams {
	o.SetSpeedQueryParameter(speed)
	return o
}

// SetSpeedQueryParameter adds the speed to the switch port collection get params
func (o *SwitchPortCollectionGetParams) SetSpeedQueryParameter(speed *int64) {
	o.SpeedQueryParameter = speed
}

// WithStateQueryParameter adds the state to the switch port collection get params
func (o *SwitchPortCollectionGetParams) WithStateQueryParameter(state *string) *SwitchPortCollectionGetParams {
	o.SetStateQueryParameter(state)
	return o
}

// SetStateQueryParameter adds the state to the switch port collection get params
func (o *SwitchPortCollectionGetParams) SetStateQueryParameter(state *string) {
	o.StateQueryParameter = state
}

// WithStatisticsReceiveRawDiscardsQueryParameter adds the statisticsReceiveRawDiscards to the switch port collection get params
func (o *SwitchPortCollectionGetParams) WithStatisticsReceiveRawDiscardsQueryParameter(statisticsReceiveRawDiscards *int64) *SwitchPortCollectionGetParams {
	o.SetStatisticsReceiveRawDiscardsQueryParameter(statisticsReceiveRawDiscards)
	return o
}

// SetStatisticsReceiveRawDiscardsQueryParameter adds the statisticsReceiveRawDiscards to the switch port collection get params
func (o *SwitchPortCollectionGetParams) SetStatisticsReceiveRawDiscardsQueryParameter(statisticsReceiveRawDiscards *int64) {
	o.StatisticsReceiveRawDiscardsQueryParameter = statisticsReceiveRawDiscards
}

// WithStatisticsReceiveRawErrorsQueryParameter adds the statisticsReceiveRawErrors to the switch port collection get params
func (o *SwitchPortCollectionGetParams) WithStatisticsReceiveRawErrorsQueryParameter(statisticsReceiveRawErrors *int64) *SwitchPortCollectionGetParams {
	o.SetStatisticsReceiveRawErrorsQueryParameter(statisticsReceiveRawErrors)
	return o
}

// SetStatisticsReceiveRawErrorsQueryParameter adds the statisticsReceiveRawErrors to the switch port collection get params
func (o *SwitchPortCollectionGetParams) SetStatisticsReceiveRawErrorsQueryParameter(statisticsReceiveRawErrors *int64) {
	o.StatisticsReceiveRawErrorsQueryParameter = statisticsReceiveRawErrors
}

// WithStatisticsReceiveRawPacketsQueryParameter adds the statisticsReceiveRawPackets to the switch port collection get params
func (o *SwitchPortCollectionGetParams) WithStatisticsReceiveRawPacketsQueryParameter(statisticsReceiveRawPackets *int64) *SwitchPortCollectionGetParams {
	o.SetStatisticsReceiveRawPacketsQueryParameter(statisticsReceiveRawPackets)
	return o
}

// SetStatisticsReceiveRawPacketsQueryParameter adds the statisticsReceiveRawPackets to the switch port collection get params
func (o *SwitchPortCollectionGetParams) SetStatisticsReceiveRawPacketsQueryParameter(statisticsReceiveRawPackets *int64) {
	o.StatisticsReceiveRawPacketsQueryParameter = statisticsReceiveRawPackets
}

// WithStatisticsTransmitRawDiscardsQueryParameter adds the statisticsTransmitRawDiscards to the switch port collection get params
func (o *SwitchPortCollectionGetParams) WithStatisticsTransmitRawDiscardsQueryParameter(statisticsTransmitRawDiscards *int64) *SwitchPortCollectionGetParams {
	o.SetStatisticsTransmitRawDiscardsQueryParameter(statisticsTransmitRawDiscards)
	return o
}

// SetStatisticsTransmitRawDiscardsQueryParameter adds the statisticsTransmitRawDiscards to the switch port collection get params
func (o *SwitchPortCollectionGetParams) SetStatisticsTransmitRawDiscardsQueryParameter(statisticsTransmitRawDiscards *int64) {
	o.StatisticsTransmitRawDiscardsQueryParameter = statisticsTransmitRawDiscards
}

// WithStatisticsTransmitRawErrorsQueryParameter adds the statisticsTransmitRawErrors to the switch port collection get params
func (o *SwitchPortCollectionGetParams) WithStatisticsTransmitRawErrorsQueryParameter(statisticsTransmitRawErrors *int64) *SwitchPortCollectionGetParams {
	o.SetStatisticsTransmitRawErrorsQueryParameter(statisticsTransmitRawErrors)
	return o
}

// SetStatisticsTransmitRawErrorsQueryParameter adds the statisticsTransmitRawErrors to the switch port collection get params
func (o *SwitchPortCollectionGetParams) SetStatisticsTransmitRawErrorsQueryParameter(statisticsTransmitRawErrors *int64) {
	o.StatisticsTransmitRawErrorsQueryParameter = statisticsTransmitRawErrors
}

// WithStatisticsTransmitRawPacketsQueryParameter adds the statisticsTransmitRawPackets to the switch port collection get params
func (o *SwitchPortCollectionGetParams) WithStatisticsTransmitRawPacketsQueryParameter(statisticsTransmitRawPackets *int64) *SwitchPortCollectionGetParams {
	o.SetStatisticsTransmitRawPacketsQueryParameter(statisticsTransmitRawPackets)
	return o
}

// SetStatisticsTransmitRawPacketsQueryParameter adds the statisticsTransmitRawPackets to the switch port collection get params
func (o *SwitchPortCollectionGetParams) SetStatisticsTransmitRawPacketsQueryParameter(statisticsTransmitRawPackets *int64) {
	o.StatisticsTransmitRawPacketsQueryParameter = statisticsTransmitRawPackets
}

// WithSwitchNameQueryParameter adds the switchName to the switch port collection get params
func (o *SwitchPortCollectionGetParams) WithSwitchNameQueryParameter(switchName *string) *SwitchPortCollectionGetParams {
	o.SetSwitchNameQueryParameter(switchName)
	return o
}

// SetSwitchNameQueryParameter adds the switchName to the switch port collection get params
func (o *SwitchPortCollectionGetParams) SetSwitchNameQueryParameter(switchName *string) {
	o.SwitchNameQueryParameter = switchName
}

// WithTypeQueryParameter adds the typeVar to the switch port collection get params
func (o *SwitchPortCollectionGetParams) WithTypeQueryParameter(typeVar *string) *SwitchPortCollectionGetParams {
	o.SetTypeQueryParameter(typeVar)
	return o
}

// SetTypeQueryParameter adds the type to the switch port collection get params
func (o *SwitchPortCollectionGetParams) SetTypeQueryParameter(typeVar *string) {
	o.TypeQueryParameter = typeVar
}

// WithVlanIDQueryParameter adds the vlanID to the switch port collection get params
func (o *SwitchPortCollectionGetParams) WithVlanIDQueryParameter(vlanID *int64) *SwitchPortCollectionGetParams {
	o.SetVlanIDQueryParameter(vlanID)
	return o
}

// SetVlanIDQueryParameter adds the vlanId to the switch port collection get params
func (o *SwitchPortCollectionGetParams) SetVlanIDQueryParameter(vlanID *int64) {
	o.VlanIDQueryParameter = vlanID
}

// WriteToRequest writes these params to a swagger request
func (o *SwitchPortCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ConfiguredQueryParameter != nil {

		// query param configured
		var qrConfigured string

		if o.ConfiguredQueryParameter != nil {
			qrConfigured = *o.ConfiguredQueryParameter
		}
		qConfigured := qrConfigured
		if qConfigured != "" {

			if err := r.SetQueryParam("configured", qConfigured); err != nil {
				return err
			}
		}
	}

	if o.DuplexTypeQueryParameter != nil {

		// query param duplex_type
		var qrDuplexType string

		if o.DuplexTypeQueryParameter != nil {
			qrDuplexType = *o.DuplexTypeQueryParameter
		}
		qDuplexType := qrDuplexType
		if qDuplexType != "" {

			if err := r.SetQueryParam("duplex_type", qDuplexType); err != nil {
				return err
			}
		}
	}

	if o.FieldsQueryParameter != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.IdentityIndexQueryParameter != nil {

		// query param identity.index
		var qrIdentityIndex int64

		if o.IdentityIndexQueryParameter != nil {
			qrIdentityIndex = *o.IdentityIndexQueryParameter
		}
		qIdentityIndex := swag.FormatInt64(qrIdentityIndex)
		if qIdentityIndex != "" {

			if err := r.SetQueryParam("identity.index", qIdentityIndex); err != nil {
				return err
			}
		}
	}

	if o.IdentityNameQueryParameter != nil {

		// query param identity.name
		var qrIdentityName string

		if o.IdentityNameQueryParameter != nil {
			qrIdentityName = *o.IdentityNameQueryParameter
		}
		qIdentityName := qrIdentityName
		if qIdentityName != "" {

			if err := r.SetQueryParam("identity.name", qIdentityName); err != nil {
				return err
			}
		}
	}

	if o.IdentityNumberQueryParameter != nil {

		// query param identity.number
		var qrIdentityNumber int64

		if o.IdentityNumberQueryParameter != nil {
			qrIdentityNumber = *o.IdentityNumberQueryParameter
		}
		qIdentityNumber := swag.FormatInt64(qrIdentityNumber)
		if qIdentityNumber != "" {

			if err := r.SetQueryParam("identity.number", qIdentityNumber); err != nil {
				return err
			}
		}
	}

	if o.IslQueryParameter != nil {

		// query param isl
		var qrIsl bool

		if o.IslQueryParameter != nil {
			qrIsl = *o.IslQueryParameter
		}
		qIsl := swag.FormatBool(qrIsl)
		if qIsl != "" {

			if err := r.SetQueryParam("isl", qIsl); err != nil {
				return err
			}
		}
	}

	if o.MacAddressQueryParameter != nil {

		// query param mac_address
		var qrMacAddress string

		if o.MacAddressQueryParameter != nil {
			qrMacAddress = *o.MacAddressQueryParameter
		}
		qMacAddress := qrMacAddress
		if qMacAddress != "" {

			if err := r.SetQueryParam("mac_address", qMacAddress); err != nil {
				return err
			}
		}
	}

	if o.MaxRecordsQueryParameter != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecordsQueryParameter != nil {
			qrMaxRecords = *o.MaxRecordsQueryParameter
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.MtuQueryParameter != nil {

		// query param mtu
		var qrMtu int64

		if o.MtuQueryParameter != nil {
			qrMtu = *o.MtuQueryParameter
		}
		qMtu := swag.FormatInt64(qrMtu)
		if qMtu != "" {

			if err := r.SetQueryParam("mtu", qMtu); err != nil {
				return err
			}
		}
	}

	if o.OrderByQueryParameter != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.RemotePortDeviceNodeNameQueryParameter != nil {

		// query param remote_port.device.node.name
		var qrRemotePortDeviceNodeName string

		if o.RemotePortDeviceNodeNameQueryParameter != nil {
			qrRemotePortDeviceNodeName = *o.RemotePortDeviceNodeNameQueryParameter
		}
		qRemotePortDeviceNodeName := qrRemotePortDeviceNodeName
		if qRemotePortDeviceNodeName != "" {

			if err := r.SetQueryParam("remote_port.device.node.name", qRemotePortDeviceNodeName); err != nil {
				return err
			}
		}
	}

	if o.RemotePortDeviceNodeUUIDQueryParameter != nil {

		// query param remote_port.device.node.uuid
		var qrRemotePortDeviceNodeUUID string

		if o.RemotePortDeviceNodeUUIDQueryParameter != nil {
			qrRemotePortDeviceNodeUUID = *o.RemotePortDeviceNodeUUIDQueryParameter
		}
		qRemotePortDeviceNodeUUID := qrRemotePortDeviceNodeUUID
		if qRemotePortDeviceNodeUUID != "" {

			if err := r.SetQueryParam("remote_port.device.node.uuid", qRemotePortDeviceNodeUUID); err != nil {
				return err
			}
		}
	}

	if o.RemotePortDeviceShelfUIDQueryParameter != nil {

		// query param remote_port.device.shelf.uid
		var qrRemotePortDeviceShelfUID string

		if o.RemotePortDeviceShelfUIDQueryParameter != nil {
			qrRemotePortDeviceShelfUID = *o.RemotePortDeviceShelfUIDQueryParameter
		}
		qRemotePortDeviceShelfUID := qrRemotePortDeviceShelfUID
		if qRemotePortDeviceShelfUID != "" {

			if err := r.SetQueryParam("remote_port.device.shelf.uid", qRemotePortDeviceShelfUID); err != nil {
				return err
			}
		}
	}

	if o.RemotePortMtuQueryParameter != nil {

		// query param remote_port.mtu
		var qrRemotePortMtu int64

		if o.RemotePortMtuQueryParameter != nil {
			qrRemotePortMtu = *o.RemotePortMtuQueryParameter
		}
		qRemotePortMtu := swag.FormatInt64(qrRemotePortMtu)
		if qRemotePortMtu != "" {

			if err := r.SetQueryParam("remote_port.mtu", qRemotePortMtu); err != nil {
				return err
			}
		}
	}

	if o.RemotePortNameQueryParameter != nil {

		// query param remote_port.name
		var qrRemotePortName string

		if o.RemotePortNameQueryParameter != nil {
			qrRemotePortName = *o.RemotePortNameQueryParameter
		}
		qRemotePortName := qrRemotePortName
		if qRemotePortName != "" {

			if err := r.SetQueryParam("remote_port.name", qRemotePortName); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecordsQueryParameter != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecordsQueryParameter != nil {
			qrReturnRecords = *o.ReturnRecordsQueryParameter
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeoutQueryParameter != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeoutQueryParameter != nil {
			qrReturnTimeout = *o.ReturnTimeoutQueryParameter
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.SpeedQueryParameter != nil {

		// query param speed
		var qrSpeed int64

		if o.SpeedQueryParameter != nil {
			qrSpeed = *o.SpeedQueryParameter
		}
		qSpeed := swag.FormatInt64(qrSpeed)
		if qSpeed != "" {

			if err := r.SetQueryParam("speed", qSpeed); err != nil {
				return err
			}
		}
	}

	if o.StateQueryParameter != nil {

		// query param state
		var qrState string

		if o.StateQueryParameter != nil {
			qrState = *o.StateQueryParameter
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if o.StatisticsReceiveRawDiscardsQueryParameter != nil {

		// query param statistics.receive_raw.discards
		var qrStatisticsReceiveRawDiscards int64

		if o.StatisticsReceiveRawDiscardsQueryParameter != nil {
			qrStatisticsReceiveRawDiscards = *o.StatisticsReceiveRawDiscardsQueryParameter
		}
		qStatisticsReceiveRawDiscards := swag.FormatInt64(qrStatisticsReceiveRawDiscards)
		if qStatisticsReceiveRawDiscards != "" {

			if err := r.SetQueryParam("statistics.receive_raw.discards", qStatisticsReceiveRawDiscards); err != nil {
				return err
			}
		}
	}

	if o.StatisticsReceiveRawErrorsQueryParameter != nil {

		// query param statistics.receive_raw.errors
		var qrStatisticsReceiveRawErrors int64

		if o.StatisticsReceiveRawErrorsQueryParameter != nil {
			qrStatisticsReceiveRawErrors = *o.StatisticsReceiveRawErrorsQueryParameter
		}
		qStatisticsReceiveRawErrors := swag.FormatInt64(qrStatisticsReceiveRawErrors)
		if qStatisticsReceiveRawErrors != "" {

			if err := r.SetQueryParam("statistics.receive_raw.errors", qStatisticsReceiveRawErrors); err != nil {
				return err
			}
		}
	}

	if o.StatisticsReceiveRawPacketsQueryParameter != nil {

		// query param statistics.receive_raw.packets
		var qrStatisticsReceiveRawPackets int64

		if o.StatisticsReceiveRawPacketsQueryParameter != nil {
			qrStatisticsReceiveRawPackets = *o.StatisticsReceiveRawPacketsQueryParameter
		}
		qStatisticsReceiveRawPackets := swag.FormatInt64(qrStatisticsReceiveRawPackets)
		if qStatisticsReceiveRawPackets != "" {

			if err := r.SetQueryParam("statistics.receive_raw.packets", qStatisticsReceiveRawPackets); err != nil {
				return err
			}
		}
	}

	if o.StatisticsTransmitRawDiscardsQueryParameter != nil {

		// query param statistics.transmit_raw.discards
		var qrStatisticsTransmitRawDiscards int64

		if o.StatisticsTransmitRawDiscardsQueryParameter != nil {
			qrStatisticsTransmitRawDiscards = *o.StatisticsTransmitRawDiscardsQueryParameter
		}
		qStatisticsTransmitRawDiscards := swag.FormatInt64(qrStatisticsTransmitRawDiscards)
		if qStatisticsTransmitRawDiscards != "" {

			if err := r.SetQueryParam("statistics.transmit_raw.discards", qStatisticsTransmitRawDiscards); err != nil {
				return err
			}
		}
	}

	if o.StatisticsTransmitRawErrorsQueryParameter != nil {

		// query param statistics.transmit_raw.errors
		var qrStatisticsTransmitRawErrors int64

		if o.StatisticsTransmitRawErrorsQueryParameter != nil {
			qrStatisticsTransmitRawErrors = *o.StatisticsTransmitRawErrorsQueryParameter
		}
		qStatisticsTransmitRawErrors := swag.FormatInt64(qrStatisticsTransmitRawErrors)
		if qStatisticsTransmitRawErrors != "" {

			if err := r.SetQueryParam("statistics.transmit_raw.errors", qStatisticsTransmitRawErrors); err != nil {
				return err
			}
		}
	}

	if o.StatisticsTransmitRawPacketsQueryParameter != nil {

		// query param statistics.transmit_raw.packets
		var qrStatisticsTransmitRawPackets int64

		if o.StatisticsTransmitRawPacketsQueryParameter != nil {
			qrStatisticsTransmitRawPackets = *o.StatisticsTransmitRawPacketsQueryParameter
		}
		qStatisticsTransmitRawPackets := swag.FormatInt64(qrStatisticsTransmitRawPackets)
		if qStatisticsTransmitRawPackets != "" {

			if err := r.SetQueryParam("statistics.transmit_raw.packets", qStatisticsTransmitRawPackets); err != nil {
				return err
			}
		}
	}

	if o.SwitchNameQueryParameter != nil {

		// query param switch.name
		var qrSwitchName string

		if o.SwitchNameQueryParameter != nil {
			qrSwitchName = *o.SwitchNameQueryParameter
		}
		qSwitchName := qrSwitchName
		if qSwitchName != "" {

			if err := r.SetQueryParam("switch.name", qSwitchName); err != nil {
				return err
			}
		}
	}

	if o.TypeQueryParameter != nil {

		// query param type
		var qrType string

		if o.TypeQueryParameter != nil {
			qrType = *o.TypeQueryParameter
		}
		qType := qrType
		if qType != "" {

			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}
	}

	if o.VlanIDQueryParameter != nil {

		// query param vlan_id
		var qrVlanID int64

		if o.VlanIDQueryParameter != nil {
			qrVlanID = *o.VlanIDQueryParameter
		}
		qVlanID := swag.FormatInt64(qrVlanID)
		if qVlanID != "" {

			if err := r.SetQueryParam("vlan_id", qVlanID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamSwitchPortCollectionGet binds the parameter fields
func (o *SwitchPortCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.FieldsQueryParameter

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamSwitchPortCollectionGet binds the parameter order_by
func (o *SwitchPortCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderByQueryParameter

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
