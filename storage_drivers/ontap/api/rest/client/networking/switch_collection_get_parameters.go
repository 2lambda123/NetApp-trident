// Code generated by go-swagger; DO NOT EDIT.

package networking

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSwitchCollectionGetParams creates a new SwitchCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSwitchCollectionGetParams() *SwitchCollectionGetParams {
	return &SwitchCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSwitchCollectionGetParamsWithTimeout creates a new SwitchCollectionGetParams object
// with the ability to set a timeout on a request.
func NewSwitchCollectionGetParamsWithTimeout(timeout time.Duration) *SwitchCollectionGetParams {
	return &SwitchCollectionGetParams{
		timeout: timeout,
	}
}

// NewSwitchCollectionGetParamsWithContext creates a new SwitchCollectionGetParams object
// with the ability to set a context for a request.
func NewSwitchCollectionGetParamsWithContext(ctx context.Context) *SwitchCollectionGetParams {
	return &SwitchCollectionGetParams{
		Context: ctx,
	}
}

// NewSwitchCollectionGetParamsWithHTTPClient creates a new SwitchCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewSwitchCollectionGetParamsWithHTTPClient(client *http.Client) *SwitchCollectionGetParams {
	return &SwitchCollectionGetParams{
		HTTPClient: client,
	}
}

/* SwitchCollectionGetParams contains all the parameters to send to the API endpoint
   for the switch collection get operation.

   Typically these are written to a http.Request.
*/
type SwitchCollectionGetParams struct {

	/* Address.

	   Filter by address
	*/
	AddressQueryParameter *string

	/* Discovered.

	   Filter by discovered
	*/
	DiscoveredQueryParameter *bool

	/* Fields.

	   Specify the fields to return.
	*/
	FieldsQueryParameter []string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecordsQueryParameter *int64

	/* Model.

	   Filter by model
	*/
	ModelQueryParameter *string

	/* MonitoringEnabled.

	   Filter by monitoring.enabled
	*/
	MonitoringEnabledQueryParameter *bool

	/* MonitoringMonitored.

	   Filter by monitoring.monitored
	*/
	MonitoringMonitoredQueryParameter *bool

	/* MonitoringReason.

	   Filter by monitoring.reason
	*/
	MonitoringReasonQueryParameter *string

	/* Name.

	   Filter by name
	*/
	NameQueryParameter *string

	/* Network.

	   Filter by network
	*/
	NetworkQueryParameter *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderByQueryParameter []string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecordsQueryParameter *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeoutQueryParameter *int64

	/* SerialNumber.

	   Filter by serial_number
	*/
	SerialNumberQueryParameter *string

	/* SnmpUser.

	   Filter by snmp.user
	*/
	SnmpUserQueryParameter *string

	/* SnmpVersion.

	   Filter by snmp.version
	*/
	SnmpVersionQueryParameter *string

	/* Version.

	   Filter by version
	*/
	VersionQueryParameter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the switch collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SwitchCollectionGetParams) WithDefaults() *SwitchCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the switch collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SwitchCollectionGetParams) SetDefaults() {
	var (
		returnRecordsQueryParameterDefault = bool(true)

		returnTimeoutQueryParameterDefault = int64(15)
	)

	val := SwitchCollectionGetParams{
		ReturnRecordsQueryParameter: &returnRecordsQueryParameterDefault,
		ReturnTimeoutQueryParameter: &returnTimeoutQueryParameterDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the switch collection get params
func (o *SwitchCollectionGetParams) WithTimeout(timeout time.Duration) *SwitchCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the switch collection get params
func (o *SwitchCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the switch collection get params
func (o *SwitchCollectionGetParams) WithContext(ctx context.Context) *SwitchCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the switch collection get params
func (o *SwitchCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the switch collection get params
func (o *SwitchCollectionGetParams) WithHTTPClient(client *http.Client) *SwitchCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the switch collection get params
func (o *SwitchCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAddressQueryParameter adds the address to the switch collection get params
func (o *SwitchCollectionGetParams) WithAddressQueryParameter(address *string) *SwitchCollectionGetParams {
	o.SetAddressQueryParameter(address)
	return o
}

// SetAddressQueryParameter adds the address to the switch collection get params
func (o *SwitchCollectionGetParams) SetAddressQueryParameter(address *string) {
	o.AddressQueryParameter = address
}

// WithDiscoveredQueryParameter adds the discovered to the switch collection get params
func (o *SwitchCollectionGetParams) WithDiscoveredQueryParameter(discovered *bool) *SwitchCollectionGetParams {
	o.SetDiscoveredQueryParameter(discovered)
	return o
}

// SetDiscoveredQueryParameter adds the discovered to the switch collection get params
func (o *SwitchCollectionGetParams) SetDiscoveredQueryParameter(discovered *bool) {
	o.DiscoveredQueryParameter = discovered
}

// WithFieldsQueryParameter adds the fields to the switch collection get params
func (o *SwitchCollectionGetParams) WithFieldsQueryParameter(fields []string) *SwitchCollectionGetParams {
	o.SetFieldsQueryParameter(fields)
	return o
}

// SetFieldsQueryParameter adds the fields to the switch collection get params
func (o *SwitchCollectionGetParams) SetFieldsQueryParameter(fields []string) {
	o.FieldsQueryParameter = fields
}

// WithMaxRecordsQueryParameter adds the maxRecords to the switch collection get params
func (o *SwitchCollectionGetParams) WithMaxRecordsQueryParameter(maxRecords *int64) *SwitchCollectionGetParams {
	o.SetMaxRecordsQueryParameter(maxRecords)
	return o
}

// SetMaxRecordsQueryParameter adds the maxRecords to the switch collection get params
func (o *SwitchCollectionGetParams) SetMaxRecordsQueryParameter(maxRecords *int64) {
	o.MaxRecordsQueryParameter = maxRecords
}

// WithModelQueryParameter adds the model to the switch collection get params
func (o *SwitchCollectionGetParams) WithModelQueryParameter(model *string) *SwitchCollectionGetParams {
	o.SetModelQueryParameter(model)
	return o
}

// SetModelQueryParameter adds the model to the switch collection get params
func (o *SwitchCollectionGetParams) SetModelQueryParameter(model *string) {
	o.ModelQueryParameter = model
}

// WithMonitoringEnabledQueryParameter adds the monitoringEnabled to the switch collection get params
func (o *SwitchCollectionGetParams) WithMonitoringEnabledQueryParameter(monitoringEnabled *bool) *SwitchCollectionGetParams {
	o.SetMonitoringEnabledQueryParameter(monitoringEnabled)
	return o
}

// SetMonitoringEnabledQueryParameter adds the monitoringEnabled to the switch collection get params
func (o *SwitchCollectionGetParams) SetMonitoringEnabledQueryParameter(monitoringEnabled *bool) {
	o.MonitoringEnabledQueryParameter = monitoringEnabled
}

// WithMonitoringMonitoredQueryParameter adds the monitoringMonitored to the switch collection get params
func (o *SwitchCollectionGetParams) WithMonitoringMonitoredQueryParameter(monitoringMonitored *bool) *SwitchCollectionGetParams {
	o.SetMonitoringMonitoredQueryParameter(monitoringMonitored)
	return o
}

// SetMonitoringMonitoredQueryParameter adds the monitoringMonitored to the switch collection get params
func (o *SwitchCollectionGetParams) SetMonitoringMonitoredQueryParameter(monitoringMonitored *bool) {
	o.MonitoringMonitoredQueryParameter = monitoringMonitored
}

// WithMonitoringReasonQueryParameter adds the monitoringReason to the switch collection get params
func (o *SwitchCollectionGetParams) WithMonitoringReasonQueryParameter(monitoringReason *string) *SwitchCollectionGetParams {
	o.SetMonitoringReasonQueryParameter(monitoringReason)
	return o
}

// SetMonitoringReasonQueryParameter adds the monitoringReason to the switch collection get params
func (o *SwitchCollectionGetParams) SetMonitoringReasonQueryParameter(monitoringReason *string) {
	o.MonitoringReasonQueryParameter = monitoringReason
}

// WithNameQueryParameter adds the name to the switch collection get params
func (o *SwitchCollectionGetParams) WithNameQueryParameter(name *string) *SwitchCollectionGetParams {
	o.SetNameQueryParameter(name)
	return o
}

// SetNameQueryParameter adds the name to the switch collection get params
func (o *SwitchCollectionGetParams) SetNameQueryParameter(name *string) {
	o.NameQueryParameter = name
}

// WithNetworkQueryParameter adds the network to the switch collection get params
func (o *SwitchCollectionGetParams) WithNetworkQueryParameter(network *string) *SwitchCollectionGetParams {
	o.SetNetworkQueryParameter(network)
	return o
}

// SetNetworkQueryParameter adds the network to the switch collection get params
func (o *SwitchCollectionGetParams) SetNetworkQueryParameter(network *string) {
	o.NetworkQueryParameter = network
}

// WithOrderByQueryParameter adds the orderBy to the switch collection get params
func (o *SwitchCollectionGetParams) WithOrderByQueryParameter(orderBy []string) *SwitchCollectionGetParams {
	o.SetOrderByQueryParameter(orderBy)
	return o
}

// SetOrderByQueryParameter adds the orderBy to the switch collection get params
func (o *SwitchCollectionGetParams) SetOrderByQueryParameter(orderBy []string) {
	o.OrderByQueryParameter = orderBy
}

// WithReturnRecordsQueryParameter adds the returnRecords to the switch collection get params
func (o *SwitchCollectionGetParams) WithReturnRecordsQueryParameter(returnRecords *bool) *SwitchCollectionGetParams {
	o.SetReturnRecordsQueryParameter(returnRecords)
	return o
}

// SetReturnRecordsQueryParameter adds the returnRecords to the switch collection get params
func (o *SwitchCollectionGetParams) SetReturnRecordsQueryParameter(returnRecords *bool) {
	o.ReturnRecordsQueryParameter = returnRecords
}

// WithReturnTimeoutQueryParameter adds the returnTimeout to the switch collection get params
func (o *SwitchCollectionGetParams) WithReturnTimeoutQueryParameter(returnTimeout *int64) *SwitchCollectionGetParams {
	o.SetReturnTimeoutQueryParameter(returnTimeout)
	return o
}

// SetReturnTimeoutQueryParameter adds the returnTimeout to the switch collection get params
func (o *SwitchCollectionGetParams) SetReturnTimeoutQueryParameter(returnTimeout *int64) {
	o.ReturnTimeoutQueryParameter = returnTimeout
}

// WithSerialNumberQueryParameter adds the serialNumber to the switch collection get params
func (o *SwitchCollectionGetParams) WithSerialNumberQueryParameter(serialNumber *string) *SwitchCollectionGetParams {
	o.SetSerialNumberQueryParameter(serialNumber)
	return o
}

// SetSerialNumberQueryParameter adds the serialNumber to the switch collection get params
func (o *SwitchCollectionGetParams) SetSerialNumberQueryParameter(serialNumber *string) {
	o.SerialNumberQueryParameter = serialNumber
}

// WithSnmpUserQueryParameter adds the snmpUser to the switch collection get params
func (o *SwitchCollectionGetParams) WithSnmpUserQueryParameter(snmpUser *string) *SwitchCollectionGetParams {
	o.SetSnmpUserQueryParameter(snmpUser)
	return o
}

// SetSnmpUserQueryParameter adds the snmpUser to the switch collection get params
func (o *SwitchCollectionGetParams) SetSnmpUserQueryParameter(snmpUser *string) {
	o.SnmpUserQueryParameter = snmpUser
}

// WithSnmpVersionQueryParameter adds the snmpVersion to the switch collection get params
func (o *SwitchCollectionGetParams) WithSnmpVersionQueryParameter(snmpVersion *string) *SwitchCollectionGetParams {
	o.SetSnmpVersionQueryParameter(snmpVersion)
	return o
}

// SetSnmpVersionQueryParameter adds the snmpVersion to the switch collection get params
func (o *SwitchCollectionGetParams) SetSnmpVersionQueryParameter(snmpVersion *string) {
	o.SnmpVersionQueryParameter = snmpVersion
}

// WithVersionQueryParameter adds the version to the switch collection get params
func (o *SwitchCollectionGetParams) WithVersionQueryParameter(version *string) *SwitchCollectionGetParams {
	o.SetVersionQueryParameter(version)
	return o
}

// SetVersionQueryParameter adds the version to the switch collection get params
func (o *SwitchCollectionGetParams) SetVersionQueryParameter(version *string) {
	o.VersionQueryParameter = version
}

// WriteToRequest writes these params to a swagger request
func (o *SwitchCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AddressQueryParameter != nil {

		// query param address
		var qrAddress string

		if o.AddressQueryParameter != nil {
			qrAddress = *o.AddressQueryParameter
		}
		qAddress := qrAddress
		if qAddress != "" {

			if err := r.SetQueryParam("address", qAddress); err != nil {
				return err
			}
		}
	}

	if o.DiscoveredQueryParameter != nil {

		// query param discovered
		var qrDiscovered bool

		if o.DiscoveredQueryParameter != nil {
			qrDiscovered = *o.DiscoveredQueryParameter
		}
		qDiscovered := swag.FormatBool(qrDiscovered)
		if qDiscovered != "" {

			if err := r.SetQueryParam("discovered", qDiscovered); err != nil {
				return err
			}
		}
	}

	if o.FieldsQueryParameter != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.MaxRecordsQueryParameter != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecordsQueryParameter != nil {
			qrMaxRecords = *o.MaxRecordsQueryParameter
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.ModelQueryParameter != nil {

		// query param model
		var qrModel string

		if o.ModelQueryParameter != nil {
			qrModel = *o.ModelQueryParameter
		}
		qModel := qrModel
		if qModel != "" {

			if err := r.SetQueryParam("model", qModel); err != nil {
				return err
			}
		}
	}

	if o.MonitoringEnabledQueryParameter != nil {

		// query param monitoring.enabled
		var qrMonitoringEnabled bool

		if o.MonitoringEnabledQueryParameter != nil {
			qrMonitoringEnabled = *o.MonitoringEnabledQueryParameter
		}
		qMonitoringEnabled := swag.FormatBool(qrMonitoringEnabled)
		if qMonitoringEnabled != "" {

			if err := r.SetQueryParam("monitoring.enabled", qMonitoringEnabled); err != nil {
				return err
			}
		}
	}

	if o.MonitoringMonitoredQueryParameter != nil {

		// query param monitoring.monitored
		var qrMonitoringMonitored bool

		if o.MonitoringMonitoredQueryParameter != nil {
			qrMonitoringMonitored = *o.MonitoringMonitoredQueryParameter
		}
		qMonitoringMonitored := swag.FormatBool(qrMonitoringMonitored)
		if qMonitoringMonitored != "" {

			if err := r.SetQueryParam("monitoring.monitored", qMonitoringMonitored); err != nil {
				return err
			}
		}
	}

	if o.MonitoringReasonQueryParameter != nil {

		// query param monitoring.reason
		var qrMonitoringReason string

		if o.MonitoringReasonQueryParameter != nil {
			qrMonitoringReason = *o.MonitoringReasonQueryParameter
		}
		qMonitoringReason := qrMonitoringReason
		if qMonitoringReason != "" {

			if err := r.SetQueryParam("monitoring.reason", qMonitoringReason); err != nil {
				return err
			}
		}
	}

	if o.NameQueryParameter != nil {

		// query param name
		var qrName string

		if o.NameQueryParameter != nil {
			qrName = *o.NameQueryParameter
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.NetworkQueryParameter != nil {

		// query param network
		var qrNetwork string

		if o.NetworkQueryParameter != nil {
			qrNetwork = *o.NetworkQueryParameter
		}
		qNetwork := qrNetwork
		if qNetwork != "" {

			if err := r.SetQueryParam("network", qNetwork); err != nil {
				return err
			}
		}
	}

	if o.OrderByQueryParameter != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.ReturnRecordsQueryParameter != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecordsQueryParameter != nil {
			qrReturnRecords = *o.ReturnRecordsQueryParameter
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeoutQueryParameter != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeoutQueryParameter != nil {
			qrReturnTimeout = *o.ReturnTimeoutQueryParameter
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.SerialNumberQueryParameter != nil {

		// query param serial_number
		var qrSerialNumber string

		if o.SerialNumberQueryParameter != nil {
			qrSerialNumber = *o.SerialNumberQueryParameter
		}
		qSerialNumber := qrSerialNumber
		if qSerialNumber != "" {

			if err := r.SetQueryParam("serial_number", qSerialNumber); err != nil {
				return err
			}
		}
	}

	if o.SnmpUserQueryParameter != nil {

		// query param snmp.user
		var qrSnmpUser string

		if o.SnmpUserQueryParameter != nil {
			qrSnmpUser = *o.SnmpUserQueryParameter
		}
		qSnmpUser := qrSnmpUser
		if qSnmpUser != "" {

			if err := r.SetQueryParam("snmp.user", qSnmpUser); err != nil {
				return err
			}
		}
	}

	if o.SnmpVersionQueryParameter != nil {

		// query param snmp.version
		var qrSnmpVersion string

		if o.SnmpVersionQueryParameter != nil {
			qrSnmpVersion = *o.SnmpVersionQueryParameter
		}
		qSnmpVersion := qrSnmpVersion
		if qSnmpVersion != "" {

			if err := r.SetQueryParam("snmp.version", qSnmpVersion); err != nil {
				return err
			}
		}
	}

	if o.VersionQueryParameter != nil {

		// query param version
		var qrVersion string

		if o.VersionQueryParameter != nil {
			qrVersion = *o.VersionQueryParameter
		}
		qVersion := qrVersion
		if qVersion != "" {

			if err := r.SetQueryParam("version", qVersion); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamSwitchCollectionGet binds the parameter fields
func (o *SwitchCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.FieldsQueryParameter

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamSwitchCollectionGet binds the parameter order_by
func (o *SwitchCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderByQueryParameter

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
