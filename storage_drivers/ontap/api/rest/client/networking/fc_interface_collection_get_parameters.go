// Code generated by go-swagger; DO NOT EDIT.

package networking

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewFcInterfaceCollectionGetParams creates a new FcInterfaceCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewFcInterfaceCollectionGetParams() *FcInterfaceCollectionGetParams {
	return &FcInterfaceCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewFcInterfaceCollectionGetParamsWithTimeout creates a new FcInterfaceCollectionGetParams object
// with the ability to set a timeout on a request.
func NewFcInterfaceCollectionGetParamsWithTimeout(timeout time.Duration) *FcInterfaceCollectionGetParams {
	return &FcInterfaceCollectionGetParams{
		timeout: timeout,
	}
}

// NewFcInterfaceCollectionGetParamsWithContext creates a new FcInterfaceCollectionGetParams object
// with the ability to set a context for a request.
func NewFcInterfaceCollectionGetParamsWithContext(ctx context.Context) *FcInterfaceCollectionGetParams {
	return &FcInterfaceCollectionGetParams{
		Context: ctx,
	}
}

// NewFcInterfaceCollectionGetParamsWithHTTPClient creates a new FcInterfaceCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewFcInterfaceCollectionGetParamsWithHTTPClient(client *http.Client) *FcInterfaceCollectionGetParams {
	return &FcInterfaceCollectionGetParams{
		HTTPClient: client,
	}
}

/* FcInterfaceCollectionGetParams contains all the parameters to send to the API endpoint
   for the fc interface collection get operation.

   Typically these are written to a http.Request.
*/
type FcInterfaceCollectionGetParams struct {

	/* Comment.

	   Filter by comment
	*/
	CommentQueryParameter *string

	/* DataProtocol.

	   Filter by data_protocol
	*/
	DataProtocolQueryParameter *string

	/* Enabled.

	   Filter by enabled
	*/
	EnabledQueryParameter *bool

	/* Fields.

	   Specify the fields to return.
	*/
	Fields []string

	/* LocationNodeName.

	   Filter by location.node.name
	*/
	LocationNodeNameQueryParameter *string

	/* LocationNodeUUID.

	   Filter by location.node.uuid
	*/
	LocationNodeUUIDQueryParameter *string

	/* LocationPortName.

	   Filter by location.port.name
	*/
	LocationPortNameQueryParameter *string

	/* LocationPortNodeName.

	   Filter by location.port.node.name
	*/
	LocationPortNodeNameQueryParameter *string

	/* LocationPortUUID.

	   Filter by location.port.uuid
	*/
	LocationPortUUIDQueryParameter *string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecords *int64

	/* Name.

	   Filter by name
	*/
	NameQueryParameter *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderBy []string

	/* PortAddress.

	   Filter by port_address
	*/
	PortAddressQueryParameter *string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecords *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeout *int64

	/* State.

	   Filter by state
	*/
	StateQueryParameter *string

	/* SvmName.

	   Filter by svm.name
	*/
	SVMNameQueryParameter *string

	/* SvmUUID.

	   Filter by svm.uuid
	*/
	SVMUUIDQueryParameter *string

	/* UUID.

	   Filter by uuid
	*/
	UUIDQueryParameter *string

	/* Wwnn.

	   Filter by wwnn
	*/
	WwnnQueryParameter *string

	/* Wwpn.

	   Filter by wwpn
	*/
	WwpnQueryParameter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the fc interface collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FcInterfaceCollectionGetParams) WithDefaults() *FcInterfaceCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the fc interface collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FcInterfaceCollectionGetParams) SetDefaults() {
	var (
		returnRecordsDefault = bool(true)

		returnTimeoutDefault = int64(15)
	)

	val := FcInterfaceCollectionGetParams{
		ReturnRecords: &returnRecordsDefault,
		ReturnTimeout: &returnTimeoutDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithTimeout(timeout time.Duration) *FcInterfaceCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithContext(ctx context.Context) *FcInterfaceCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithHTTPClient(client *http.Client) *FcInterfaceCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCommentQueryParameter adds the comment to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithCommentQueryParameter(comment *string) *FcInterfaceCollectionGetParams {
	o.SetCommentQueryParameter(comment)
	return o
}

// SetCommentQueryParameter adds the comment to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetCommentQueryParameter(comment *string) {
	o.CommentQueryParameter = comment
}

// WithDataProtocolQueryParameter adds the dataProtocol to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithDataProtocolQueryParameter(dataProtocol *string) *FcInterfaceCollectionGetParams {
	o.SetDataProtocolQueryParameter(dataProtocol)
	return o
}

// SetDataProtocolQueryParameter adds the dataProtocol to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetDataProtocolQueryParameter(dataProtocol *string) {
	o.DataProtocolQueryParameter = dataProtocol
}

// WithEnabledQueryParameter adds the enabled to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithEnabledQueryParameter(enabled *bool) *FcInterfaceCollectionGetParams {
	o.SetEnabledQueryParameter(enabled)
	return o
}

// SetEnabledQueryParameter adds the enabled to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetEnabledQueryParameter(enabled *bool) {
	o.EnabledQueryParameter = enabled
}

// WithFields adds the fields to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithFields(fields []string) *FcInterfaceCollectionGetParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithLocationNodeNameQueryParameter adds the locationNodeName to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithLocationNodeNameQueryParameter(locationNodeName *string) *FcInterfaceCollectionGetParams {
	o.SetLocationNodeNameQueryParameter(locationNodeName)
	return o
}

// SetLocationNodeNameQueryParameter adds the locationNodeName to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetLocationNodeNameQueryParameter(locationNodeName *string) {
	o.LocationNodeNameQueryParameter = locationNodeName
}

// WithLocationNodeUUIDQueryParameter adds the locationNodeUUID to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithLocationNodeUUIDQueryParameter(locationNodeUUID *string) *FcInterfaceCollectionGetParams {
	o.SetLocationNodeUUIDQueryParameter(locationNodeUUID)
	return o
}

// SetLocationNodeUUIDQueryParameter adds the locationNodeUuid to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetLocationNodeUUIDQueryParameter(locationNodeUUID *string) {
	o.LocationNodeUUIDQueryParameter = locationNodeUUID
}

// WithLocationPortNameQueryParameter adds the locationPortName to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithLocationPortNameQueryParameter(locationPortName *string) *FcInterfaceCollectionGetParams {
	o.SetLocationPortNameQueryParameter(locationPortName)
	return o
}

// SetLocationPortNameQueryParameter adds the locationPortName to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetLocationPortNameQueryParameter(locationPortName *string) {
	o.LocationPortNameQueryParameter = locationPortName
}

// WithLocationPortNodeNameQueryParameter adds the locationPortNodeName to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithLocationPortNodeNameQueryParameter(locationPortNodeName *string) *FcInterfaceCollectionGetParams {
	o.SetLocationPortNodeNameQueryParameter(locationPortNodeName)
	return o
}

// SetLocationPortNodeNameQueryParameter adds the locationPortNodeName to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetLocationPortNodeNameQueryParameter(locationPortNodeName *string) {
	o.LocationPortNodeNameQueryParameter = locationPortNodeName
}

// WithLocationPortUUIDQueryParameter adds the locationPortUUID to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithLocationPortUUIDQueryParameter(locationPortUUID *string) *FcInterfaceCollectionGetParams {
	o.SetLocationPortUUIDQueryParameter(locationPortUUID)
	return o
}

// SetLocationPortUUIDQueryParameter adds the locationPortUuid to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetLocationPortUUIDQueryParameter(locationPortUUID *string) {
	o.LocationPortUUIDQueryParameter = locationPortUUID
}

// WithMaxRecords adds the maxRecords to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithMaxRecords(maxRecords *int64) *FcInterfaceCollectionGetParams {
	o.SetMaxRecords(maxRecords)
	return o
}

// SetMaxRecords adds the maxRecords to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetMaxRecords(maxRecords *int64) {
	o.MaxRecords = maxRecords
}

// WithNameQueryParameter adds the name to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithNameQueryParameter(name *string) *FcInterfaceCollectionGetParams {
	o.SetNameQueryParameter(name)
	return o
}

// SetNameQueryParameter adds the name to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetNameQueryParameter(name *string) {
	o.NameQueryParameter = name
}

// WithOrderBy adds the orderBy to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithOrderBy(orderBy []string) *FcInterfaceCollectionGetParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetOrderBy(orderBy []string) {
	o.OrderBy = orderBy
}

// WithPortAddressQueryParameter adds the portAddress to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithPortAddressQueryParameter(portAddress *string) *FcInterfaceCollectionGetParams {
	o.SetPortAddressQueryParameter(portAddress)
	return o
}

// SetPortAddressQueryParameter adds the portAddress to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetPortAddressQueryParameter(portAddress *string) {
	o.PortAddressQueryParameter = portAddress
}

// WithReturnRecords adds the returnRecords to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithReturnRecords(returnRecords *bool) *FcInterfaceCollectionGetParams {
	o.SetReturnRecords(returnRecords)
	return o
}

// SetReturnRecords adds the returnRecords to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetReturnRecords(returnRecords *bool) {
	o.ReturnRecords = returnRecords
}

// WithReturnTimeout adds the returnTimeout to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithReturnTimeout(returnTimeout *int64) *FcInterfaceCollectionGetParams {
	o.SetReturnTimeout(returnTimeout)
	return o
}

// SetReturnTimeout adds the returnTimeout to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetReturnTimeout(returnTimeout *int64) {
	o.ReturnTimeout = returnTimeout
}

// WithStateQueryParameter adds the state to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithStateQueryParameter(state *string) *FcInterfaceCollectionGetParams {
	o.SetStateQueryParameter(state)
	return o
}

// SetStateQueryParameter adds the state to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetStateQueryParameter(state *string) {
	o.StateQueryParameter = state
}

// WithSVMNameQueryParameter adds the svmName to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithSVMNameQueryParameter(svmName *string) *FcInterfaceCollectionGetParams {
	o.SetSVMNameQueryParameter(svmName)
	return o
}

// SetSVMNameQueryParameter adds the svmName to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetSVMNameQueryParameter(svmName *string) {
	o.SVMNameQueryParameter = svmName
}

// WithSVMUUIDQueryParameter adds the svmUUID to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithSVMUUIDQueryParameter(svmUUID *string) *FcInterfaceCollectionGetParams {
	o.SetSVMUUIDQueryParameter(svmUUID)
	return o
}

// SetSVMUUIDQueryParameter adds the svmUuid to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetSVMUUIDQueryParameter(svmUUID *string) {
	o.SVMUUIDQueryParameter = svmUUID
}

// WithUUIDQueryParameter adds the uuid to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithUUIDQueryParameter(uuid *string) *FcInterfaceCollectionGetParams {
	o.SetUUIDQueryParameter(uuid)
	return o
}

// SetUUIDQueryParameter adds the uuid to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetUUIDQueryParameter(uuid *string) {
	o.UUIDQueryParameter = uuid
}

// WithWwnnQueryParameter adds the wwnn to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithWwnnQueryParameter(wwnn *string) *FcInterfaceCollectionGetParams {
	o.SetWwnnQueryParameter(wwnn)
	return o
}

// SetWwnnQueryParameter adds the wwnn to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetWwnnQueryParameter(wwnn *string) {
	o.WwnnQueryParameter = wwnn
}

// WithWwpnQueryParameter adds the wwpn to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithWwpnQueryParameter(wwpn *string) *FcInterfaceCollectionGetParams {
	o.SetWwpnQueryParameter(wwpn)
	return o
}

// SetWwpnQueryParameter adds the wwpn to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetWwpnQueryParameter(wwpn *string) {
	o.WwpnQueryParameter = wwpn
}

// WriteToRequest writes these params to a swagger request
func (o *FcInterfaceCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CommentQueryParameter != nil {

		// query param comment
		var qrComment string

		if o.CommentQueryParameter != nil {
			qrComment = *o.CommentQueryParameter
		}
		qComment := qrComment
		if qComment != "" {

			if err := r.SetQueryParam("comment", qComment); err != nil {
				return err
			}
		}
	}

	if o.DataProtocolQueryParameter != nil {

		// query param data_protocol
		var qrDataProtocol string

		if o.DataProtocolQueryParameter != nil {
			qrDataProtocol = *o.DataProtocolQueryParameter
		}
		qDataProtocol := qrDataProtocol
		if qDataProtocol != "" {

			if err := r.SetQueryParam("data_protocol", qDataProtocol); err != nil {
				return err
			}
		}
	}

	if o.EnabledQueryParameter != nil {

		// query param enabled
		var qrEnabled bool

		if o.EnabledQueryParameter != nil {
			qrEnabled = *o.EnabledQueryParameter
		}
		qEnabled := swag.FormatBool(qrEnabled)
		if qEnabled != "" {

			if err := r.SetQueryParam("enabled", qEnabled); err != nil {
				return err
			}
		}
	}

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.LocationNodeNameQueryParameter != nil {

		// query param location.node.name
		var qrLocationNodeName string

		if o.LocationNodeNameQueryParameter != nil {
			qrLocationNodeName = *o.LocationNodeNameQueryParameter
		}
		qLocationNodeName := qrLocationNodeName
		if qLocationNodeName != "" {

			if err := r.SetQueryParam("location.node.name", qLocationNodeName); err != nil {
				return err
			}
		}
	}

	if o.LocationNodeUUIDQueryParameter != nil {

		// query param location.node.uuid
		var qrLocationNodeUUID string

		if o.LocationNodeUUIDQueryParameter != nil {
			qrLocationNodeUUID = *o.LocationNodeUUIDQueryParameter
		}
		qLocationNodeUUID := qrLocationNodeUUID
		if qLocationNodeUUID != "" {

			if err := r.SetQueryParam("location.node.uuid", qLocationNodeUUID); err != nil {
				return err
			}
		}
	}

	if o.LocationPortNameQueryParameter != nil {

		// query param location.port.name
		var qrLocationPortName string

		if o.LocationPortNameQueryParameter != nil {
			qrLocationPortName = *o.LocationPortNameQueryParameter
		}
		qLocationPortName := qrLocationPortName
		if qLocationPortName != "" {

			if err := r.SetQueryParam("location.port.name", qLocationPortName); err != nil {
				return err
			}
		}
	}

	if o.LocationPortNodeNameQueryParameter != nil {

		// query param location.port.node.name
		var qrLocationPortNodeName string

		if o.LocationPortNodeNameQueryParameter != nil {
			qrLocationPortNodeName = *o.LocationPortNodeNameQueryParameter
		}
		qLocationPortNodeName := qrLocationPortNodeName
		if qLocationPortNodeName != "" {

			if err := r.SetQueryParam("location.port.node.name", qLocationPortNodeName); err != nil {
				return err
			}
		}
	}

	if o.LocationPortUUIDQueryParameter != nil {

		// query param location.port.uuid
		var qrLocationPortUUID string

		if o.LocationPortUUIDQueryParameter != nil {
			qrLocationPortUUID = *o.LocationPortUUIDQueryParameter
		}
		qLocationPortUUID := qrLocationPortUUID
		if qLocationPortUUID != "" {

			if err := r.SetQueryParam("location.port.uuid", qLocationPortUUID); err != nil {
				return err
			}
		}
	}

	if o.MaxRecords != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecords != nil {
			qrMaxRecords = *o.MaxRecords
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.NameQueryParameter != nil {

		// query param name
		var qrName string

		if o.NameQueryParameter != nil {
			qrName = *o.NameQueryParameter
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.OrderBy != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.PortAddressQueryParameter != nil {

		// query param port_address
		var qrPortAddress string

		if o.PortAddressQueryParameter != nil {
			qrPortAddress = *o.PortAddressQueryParameter
		}
		qPortAddress := qrPortAddress
		if qPortAddress != "" {

			if err := r.SetQueryParam("port_address", qPortAddress); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecords != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecords != nil {
			qrReturnRecords = *o.ReturnRecords
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeout != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeout != nil {
			qrReturnTimeout = *o.ReturnTimeout
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.StateQueryParameter != nil {

		// query param state
		var qrState string

		if o.StateQueryParameter != nil {
			qrState = *o.StateQueryParameter
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if o.SVMNameQueryParameter != nil {

		// query param svm.name
		var qrSvmName string

		if o.SVMNameQueryParameter != nil {
			qrSvmName = *o.SVMNameQueryParameter
		}
		qSvmName := qrSvmName
		if qSvmName != "" {

			if err := r.SetQueryParam("svm.name", qSvmName); err != nil {
				return err
			}
		}
	}

	if o.SVMUUIDQueryParameter != nil {

		// query param svm.uuid
		var qrSvmUUID string

		if o.SVMUUIDQueryParameter != nil {
			qrSvmUUID = *o.SVMUUIDQueryParameter
		}
		qSvmUUID := qrSvmUUID
		if qSvmUUID != "" {

			if err := r.SetQueryParam("svm.uuid", qSvmUUID); err != nil {
				return err
			}
		}
	}

	if o.UUIDQueryParameter != nil {

		// query param uuid
		var qrUUID string

		if o.UUIDQueryParameter != nil {
			qrUUID = *o.UUIDQueryParameter
		}
		qUUID := qrUUID
		if qUUID != "" {

			if err := r.SetQueryParam("uuid", qUUID); err != nil {
				return err
			}
		}
	}

	if o.WwnnQueryParameter != nil {

		// query param wwnn
		var qrWwnn string

		if o.WwnnQueryParameter != nil {
			qrWwnn = *o.WwnnQueryParameter
		}
		qWwnn := qrWwnn
		if qWwnn != "" {

			if err := r.SetQueryParam("wwnn", qWwnn); err != nil {
				return err
			}
		}
	}

	if o.WwpnQueryParameter != nil {

		// query param wwpn
		var qrWwpn string

		if o.WwpnQueryParameter != nil {
			qrWwpn = *o.WwpnQueryParameter
		}
		qWwpn := qrWwpn
		if qWwpn != "" {

			if err := r.SetQueryParam("wwpn", qWwpn); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamFcInterfaceCollectionGet binds the parameter fields
func (o *FcInterfaceCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamFcInterfaceCollectionGet binds the parameter order_by
func (o *FcInterfaceCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderBy

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
