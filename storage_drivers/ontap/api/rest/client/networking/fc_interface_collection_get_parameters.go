// Code generated by go-swagger; DO NOT EDIT.

package networking

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewFcInterfaceCollectionGetParams creates a new FcInterfaceCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewFcInterfaceCollectionGetParams() *FcInterfaceCollectionGetParams {
	return &FcInterfaceCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewFcInterfaceCollectionGetParamsWithTimeout creates a new FcInterfaceCollectionGetParams object
// with the ability to set a timeout on a request.
func NewFcInterfaceCollectionGetParamsWithTimeout(timeout time.Duration) *FcInterfaceCollectionGetParams {
	return &FcInterfaceCollectionGetParams{
		timeout: timeout,
	}
}

// NewFcInterfaceCollectionGetParamsWithContext creates a new FcInterfaceCollectionGetParams object
// with the ability to set a context for a request.
func NewFcInterfaceCollectionGetParamsWithContext(ctx context.Context) *FcInterfaceCollectionGetParams {
	return &FcInterfaceCollectionGetParams{
		Context: ctx,
	}
}

// NewFcInterfaceCollectionGetParamsWithHTTPClient creates a new FcInterfaceCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewFcInterfaceCollectionGetParamsWithHTTPClient(client *http.Client) *FcInterfaceCollectionGetParams {
	return &FcInterfaceCollectionGetParams{
		HTTPClient: client,
	}
}

/* FcInterfaceCollectionGetParams contains all the parameters to send to the API endpoint
   for the fc interface collection get operation.

   Typically these are written to a http.Request.
*/
type FcInterfaceCollectionGetParams struct {

	/* Comment.

	   Filter by comment
	*/
	CommentQueryParameter *string

	/* DataProtocol.

	   Filter by data_protocol
	*/
	DataProtocolQueryParameter *string

	/* Enabled.

	   Filter by enabled
	*/
	EnabledQueryParameter *bool

	/* Fields.

	   Specify the fields to return.
	*/
	FieldsQueryParameter []string

	/* LocationHomeNodeName.

	   Filter by location.home_node.name
	*/
	LocationHomeNodeNameQueryParameter *string

	/* LocationHomeNodeUUID.

	   Filter by location.home_node.uuid
	*/
	LocationHomeNodeUUIDQueryParameter *string

	/* LocationHomePortName.

	   Filter by location.home_port.name
	*/
	LocationHomePortNameQueryParameter *string

	/* LocationHomePortNodeName.

	   Filter by location.home_port.node.name
	*/
	LocationHomePortNodeNameQueryParameter *string

	/* LocationHomePortUUID.

	   Filter by location.home_port.uuid
	*/
	LocationHomePortUUIDQueryParameter *string

	/* LocationIsHome.

	   Filter by location.is_home
	*/
	LocationIsHomeQueryParameter *bool

	/* LocationNodeName.

	   Filter by location.node.name
	*/
	LocationNodeNameQueryParameter *string

	/* LocationNodeUUID.

	   Filter by location.node.uuid
	*/
	LocationNodeUUIDQueryParameter *string

	/* LocationPortName.

	   Filter by location.port.name
	*/
	LocationPortNameQueryParameter *string

	/* LocationPortNodeName.

	   Filter by location.port.node.name
	*/
	LocationPortNodeNameQueryParameter *string

	/* LocationPortUUID.

	   Filter by location.port.uuid
	*/
	LocationPortUUIDQueryParameter *string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecordsQueryParameter *int64

	/* MetricDuration.

	   Filter by metric.duration
	*/
	MetricDurationQueryParameter *string

	/* MetricIopsOther.

	   Filter by metric.iops.other
	*/
	MetricIopsOtherQueryParameter *int64

	/* MetricIopsRead.

	   Filter by metric.iops.read
	*/
	MetricIopsReadQueryParameter *int64

	/* MetricIopsTotal.

	   Filter by metric.iops.total
	*/
	MetricIopsTotalQueryParameter *int64

	/* MetricIopsWrite.

	   Filter by metric.iops.write
	*/
	MetricIopsWriteQueryParameter *int64

	/* MetricLatencyOther.

	   Filter by metric.latency.other
	*/
	MetricLatencyOtherQueryParameter *int64

	/* MetricLatencyRead.

	   Filter by metric.latency.read
	*/
	MetricLatencyReadQueryParameter *int64

	/* MetricLatencyTotal.

	   Filter by metric.latency.total
	*/
	MetricLatencyTotalQueryParameter *int64

	/* MetricLatencyWrite.

	   Filter by metric.latency.write
	*/
	MetricLatencyWriteQueryParameter *int64

	/* MetricStatus.

	   Filter by metric.status
	*/
	MetricStatusQueryParameter *string

	/* MetricThroughputRead.

	   Filter by metric.throughput.read
	*/
	MetricThroughputReadQueryParameter *int64

	/* MetricThroughputTotal.

	   Filter by metric.throughput.total
	*/
	MetricThroughputTotalQueryParameter *int64

	/* MetricThroughputWrite.

	   Filter by metric.throughput.write
	*/
	MetricThroughputWriteQueryParameter *int64

	/* MetricTimestamp.

	   Filter by metric.timestamp
	*/
	MetricTimestampQueryParameter *string

	/* Name.

	   Filter by name
	*/
	NameQueryParameter *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderByQueryParameter []string

	/* PortAddress.

	   Filter by port_address
	*/
	PortAddressQueryParameter *string

	/* RecommendDataProtocol.

	   The target data protocol for which to recommend FC interfaces. This query parameter is required when recommending FC interfaces.

	*/
	RecommendDataProtocolQueryParameter *string

	/* RecommendFabricsName.

	   The names of the FC fabrics to target when recommending FC interfaces. If this query parameter is not provided, FC interfaces will be recommended for each FC fabric discovered.

	*/
	RecommendFabricsNameQueryParameter []string

	/* RecommendInterfacesPerNode.

	   The target number of interfaces per FC fabric per cluster node when recommending FC interfaces. If this query parameter is not provided, the default value is one (1).


	   Default: 1
	*/
	RecommendInterfacesPerNodeQueryParameter *int64

	/* RecommendNodesName.

	   The names of the cluster nodes to target when recommending FC interfaces. If this query parameter is not provided, FC interfaces will be recommended for all nodes that have FC network ports supporting target data protocol. Query parameters `recommend.nodes.name` and `recommend.nodes.uuid` are mutually exclusive; use either names or UUIDs to identify cluster nodes.

	*/
	RecommendNodesNameQueryParameter []string

	/* RecommendNodesUUID.

	   The UUIDs of the cluster nodes to target when recommending FC interfaces. If this query parameter is not provided, FC interfaces will be recommended for all nodes that have FC network ports supporting target data protocol. Query parameters `recommend.nodes.name` and `recommend.nodes.uuid` are mutually exclusive; use either names or UUIDs to identify cluster nodes.

	*/
	RecommendNodesUUIDQueryParameter []string

	/* RecommendProposedLocationsPortUUID.

	   The UUIDs of the FC ports on which FC interfaces are proposed. A UUID may be supplied multiple times to proposed multiple FC interfaces. FC ports must be enabled, support the target data protocol and be reporting an FC fabric.

	*/
	RecommendProposedLocationsPortUUIDQueryParameter []string

	/* RecommendSvmName.

	   The name of an existing SVM for which to recommend FC interfaces. If neither query parameter `recommend.svm.name` nor `recommend.svm.uuid` are provided when recommending FC interfaces, recommendations are made for a new, non-existent SVM.

	*/
	RecommendSVMNameQueryParameter *string

	/* RecommendSvmUUID.

	   The UUID of an existing SVM for which to recommend FC interfaces. If neither query parameter `recommend.svm.name` nor `recommend.svm.uuid` are provided when recommending FC interfaces, recommendations are made for a new, non-existent SVM.

	*/
	RecommendSVMUUIDQueryParameter *string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecordsQueryParameter *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeoutQueryParameter *int64

	/* State.

	   Filter by state
	*/
	StateQueryParameter *string

	/* StatisticsIopsRawOther.

	   Filter by statistics.iops_raw.other
	*/
	StatisticsIopsRawOtherQueryParameter *int64

	/* StatisticsIopsRawRead.

	   Filter by statistics.iops_raw.read
	*/
	StatisticsIopsRawReadQueryParameter *int64

	/* StatisticsIopsRawTotal.

	   Filter by statistics.iops_raw.total
	*/
	StatisticsIopsRawTotalQueryParameter *int64

	/* StatisticsIopsRawWrite.

	   Filter by statistics.iops_raw.write
	*/
	StatisticsIopsRawWriteQueryParameter *int64

	/* StatisticsLatencyRawOther.

	   Filter by statistics.latency_raw.other
	*/
	StatisticsLatencyRawOtherQueryParameter *int64

	/* StatisticsLatencyRawRead.

	   Filter by statistics.latency_raw.read
	*/
	StatisticsLatencyRawReadQueryParameter *int64

	/* StatisticsLatencyRawTotal.

	   Filter by statistics.latency_raw.total
	*/
	StatisticsLatencyRawTotalQueryParameter *int64

	/* StatisticsLatencyRawWrite.

	   Filter by statistics.latency_raw.write
	*/
	StatisticsLatencyRawWriteQueryParameter *int64

	/* StatisticsStatus.

	   Filter by statistics.status
	*/
	StatisticsStatusQueryParameter *string

	/* StatisticsThroughputRawRead.

	   Filter by statistics.throughput_raw.read
	*/
	StatisticsThroughputRawReadQueryParameter *int64

	/* StatisticsThroughputRawTotal.

	   Filter by statistics.throughput_raw.total
	*/
	StatisticsThroughputRawTotalQueryParameter *int64

	/* StatisticsThroughputRawWrite.

	   Filter by statistics.throughput_raw.write
	*/
	StatisticsThroughputRawWriteQueryParameter *int64

	/* StatisticsTimestamp.

	   Filter by statistics.timestamp
	*/
	StatisticsTimestampQueryParameter *string

	/* SvmName.

	   Filter by svm.name
	*/
	SVMNameQueryParameter *string

	/* SvmUUID.

	   Filter by svm.uuid
	*/
	SVMUUIDQueryParameter *string

	/* UUID.

	   Filter by uuid
	*/
	UUIDQueryParameter *string

	/* Wwnn.

	   Filter by wwnn
	*/
	WwnnQueryParameter *string

	/* Wwpn.

	   Filter by wwpn
	*/
	WwpnQueryParameter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the fc interface collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FcInterfaceCollectionGetParams) WithDefaults() *FcInterfaceCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the fc interface collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FcInterfaceCollectionGetParams) SetDefaults() {
	var (
		recommendInterfacesPerNodeQueryParameterDefault = int64(1)

		returnRecordsQueryParameterDefault = bool(true)

		returnTimeoutQueryParameterDefault = int64(15)
	)

	val := FcInterfaceCollectionGetParams{
		RecommendInterfacesPerNodeQueryParameter: &recommendInterfacesPerNodeQueryParameterDefault,
		ReturnRecordsQueryParameter:              &returnRecordsQueryParameterDefault,
		ReturnTimeoutQueryParameter:              &returnTimeoutQueryParameterDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithTimeout(timeout time.Duration) *FcInterfaceCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithContext(ctx context.Context) *FcInterfaceCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithHTTPClient(client *http.Client) *FcInterfaceCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCommentQueryParameter adds the comment to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithCommentQueryParameter(comment *string) *FcInterfaceCollectionGetParams {
	o.SetCommentQueryParameter(comment)
	return o
}

// SetCommentQueryParameter adds the comment to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetCommentQueryParameter(comment *string) {
	o.CommentQueryParameter = comment
}

// WithDataProtocolQueryParameter adds the dataProtocol to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithDataProtocolQueryParameter(dataProtocol *string) *FcInterfaceCollectionGetParams {
	o.SetDataProtocolQueryParameter(dataProtocol)
	return o
}

// SetDataProtocolQueryParameter adds the dataProtocol to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetDataProtocolQueryParameter(dataProtocol *string) {
	o.DataProtocolQueryParameter = dataProtocol
}

// WithEnabledQueryParameter adds the enabled to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithEnabledQueryParameter(enabled *bool) *FcInterfaceCollectionGetParams {
	o.SetEnabledQueryParameter(enabled)
	return o
}

// SetEnabledQueryParameter adds the enabled to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetEnabledQueryParameter(enabled *bool) {
	o.EnabledQueryParameter = enabled
}

// WithFieldsQueryParameter adds the fields to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithFieldsQueryParameter(fields []string) *FcInterfaceCollectionGetParams {
	o.SetFieldsQueryParameter(fields)
	return o
}

// SetFieldsQueryParameter adds the fields to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetFieldsQueryParameter(fields []string) {
	o.FieldsQueryParameter = fields
}

// WithLocationHomeNodeNameQueryParameter adds the locationHomeNodeName to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithLocationHomeNodeNameQueryParameter(locationHomeNodeName *string) *FcInterfaceCollectionGetParams {
	o.SetLocationHomeNodeNameQueryParameter(locationHomeNodeName)
	return o
}

// SetLocationHomeNodeNameQueryParameter adds the locationHomeNodeName to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetLocationHomeNodeNameQueryParameter(locationHomeNodeName *string) {
	o.LocationHomeNodeNameQueryParameter = locationHomeNodeName
}

// WithLocationHomeNodeUUIDQueryParameter adds the locationHomeNodeUUID to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithLocationHomeNodeUUIDQueryParameter(locationHomeNodeUUID *string) *FcInterfaceCollectionGetParams {
	o.SetLocationHomeNodeUUIDQueryParameter(locationHomeNodeUUID)
	return o
}

// SetLocationHomeNodeUUIDQueryParameter adds the locationHomeNodeUuid to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetLocationHomeNodeUUIDQueryParameter(locationHomeNodeUUID *string) {
	o.LocationHomeNodeUUIDQueryParameter = locationHomeNodeUUID
}

// WithLocationHomePortNameQueryParameter adds the locationHomePortName to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithLocationHomePortNameQueryParameter(locationHomePortName *string) *FcInterfaceCollectionGetParams {
	o.SetLocationHomePortNameQueryParameter(locationHomePortName)
	return o
}

// SetLocationHomePortNameQueryParameter adds the locationHomePortName to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetLocationHomePortNameQueryParameter(locationHomePortName *string) {
	o.LocationHomePortNameQueryParameter = locationHomePortName
}

// WithLocationHomePortNodeNameQueryParameter adds the locationHomePortNodeName to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithLocationHomePortNodeNameQueryParameter(locationHomePortNodeName *string) *FcInterfaceCollectionGetParams {
	o.SetLocationHomePortNodeNameQueryParameter(locationHomePortNodeName)
	return o
}

// SetLocationHomePortNodeNameQueryParameter adds the locationHomePortNodeName to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetLocationHomePortNodeNameQueryParameter(locationHomePortNodeName *string) {
	o.LocationHomePortNodeNameQueryParameter = locationHomePortNodeName
}

// WithLocationHomePortUUIDQueryParameter adds the locationHomePortUUID to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithLocationHomePortUUIDQueryParameter(locationHomePortUUID *string) *FcInterfaceCollectionGetParams {
	o.SetLocationHomePortUUIDQueryParameter(locationHomePortUUID)
	return o
}

// SetLocationHomePortUUIDQueryParameter adds the locationHomePortUuid to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetLocationHomePortUUIDQueryParameter(locationHomePortUUID *string) {
	o.LocationHomePortUUIDQueryParameter = locationHomePortUUID
}

// WithLocationIsHomeQueryParameter adds the locationIsHome to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithLocationIsHomeQueryParameter(locationIsHome *bool) *FcInterfaceCollectionGetParams {
	o.SetLocationIsHomeQueryParameter(locationIsHome)
	return o
}

// SetLocationIsHomeQueryParameter adds the locationIsHome to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetLocationIsHomeQueryParameter(locationIsHome *bool) {
	o.LocationIsHomeQueryParameter = locationIsHome
}

// WithLocationNodeNameQueryParameter adds the locationNodeName to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithLocationNodeNameQueryParameter(locationNodeName *string) *FcInterfaceCollectionGetParams {
	o.SetLocationNodeNameQueryParameter(locationNodeName)
	return o
}

// SetLocationNodeNameQueryParameter adds the locationNodeName to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetLocationNodeNameQueryParameter(locationNodeName *string) {
	o.LocationNodeNameQueryParameter = locationNodeName
}

// WithLocationNodeUUIDQueryParameter adds the locationNodeUUID to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithLocationNodeUUIDQueryParameter(locationNodeUUID *string) *FcInterfaceCollectionGetParams {
	o.SetLocationNodeUUIDQueryParameter(locationNodeUUID)
	return o
}

// SetLocationNodeUUIDQueryParameter adds the locationNodeUuid to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetLocationNodeUUIDQueryParameter(locationNodeUUID *string) {
	o.LocationNodeUUIDQueryParameter = locationNodeUUID
}

// WithLocationPortNameQueryParameter adds the locationPortName to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithLocationPortNameQueryParameter(locationPortName *string) *FcInterfaceCollectionGetParams {
	o.SetLocationPortNameQueryParameter(locationPortName)
	return o
}

// SetLocationPortNameQueryParameter adds the locationPortName to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetLocationPortNameQueryParameter(locationPortName *string) {
	o.LocationPortNameQueryParameter = locationPortName
}

// WithLocationPortNodeNameQueryParameter adds the locationPortNodeName to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithLocationPortNodeNameQueryParameter(locationPortNodeName *string) *FcInterfaceCollectionGetParams {
	o.SetLocationPortNodeNameQueryParameter(locationPortNodeName)
	return o
}

// SetLocationPortNodeNameQueryParameter adds the locationPortNodeName to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetLocationPortNodeNameQueryParameter(locationPortNodeName *string) {
	o.LocationPortNodeNameQueryParameter = locationPortNodeName
}

// WithLocationPortUUIDQueryParameter adds the locationPortUUID to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithLocationPortUUIDQueryParameter(locationPortUUID *string) *FcInterfaceCollectionGetParams {
	o.SetLocationPortUUIDQueryParameter(locationPortUUID)
	return o
}

// SetLocationPortUUIDQueryParameter adds the locationPortUuid to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetLocationPortUUIDQueryParameter(locationPortUUID *string) {
	o.LocationPortUUIDQueryParameter = locationPortUUID
}

// WithMaxRecordsQueryParameter adds the maxRecords to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithMaxRecordsQueryParameter(maxRecords *int64) *FcInterfaceCollectionGetParams {
	o.SetMaxRecordsQueryParameter(maxRecords)
	return o
}

// SetMaxRecordsQueryParameter adds the maxRecords to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetMaxRecordsQueryParameter(maxRecords *int64) {
	o.MaxRecordsQueryParameter = maxRecords
}

// WithMetricDurationQueryParameter adds the metricDuration to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithMetricDurationQueryParameter(metricDuration *string) *FcInterfaceCollectionGetParams {
	o.SetMetricDurationQueryParameter(metricDuration)
	return o
}

// SetMetricDurationQueryParameter adds the metricDuration to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetMetricDurationQueryParameter(metricDuration *string) {
	o.MetricDurationQueryParameter = metricDuration
}

// WithMetricIopsOtherQueryParameter adds the metricIopsOther to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithMetricIopsOtherQueryParameter(metricIopsOther *int64) *FcInterfaceCollectionGetParams {
	o.SetMetricIopsOtherQueryParameter(metricIopsOther)
	return o
}

// SetMetricIopsOtherQueryParameter adds the metricIopsOther to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetMetricIopsOtherQueryParameter(metricIopsOther *int64) {
	o.MetricIopsOtherQueryParameter = metricIopsOther
}

// WithMetricIopsReadQueryParameter adds the metricIopsRead to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithMetricIopsReadQueryParameter(metricIopsRead *int64) *FcInterfaceCollectionGetParams {
	o.SetMetricIopsReadQueryParameter(metricIopsRead)
	return o
}

// SetMetricIopsReadQueryParameter adds the metricIopsRead to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetMetricIopsReadQueryParameter(metricIopsRead *int64) {
	o.MetricIopsReadQueryParameter = metricIopsRead
}

// WithMetricIopsTotalQueryParameter adds the metricIopsTotal to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithMetricIopsTotalQueryParameter(metricIopsTotal *int64) *FcInterfaceCollectionGetParams {
	o.SetMetricIopsTotalQueryParameter(metricIopsTotal)
	return o
}

// SetMetricIopsTotalQueryParameter adds the metricIopsTotal to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetMetricIopsTotalQueryParameter(metricIopsTotal *int64) {
	o.MetricIopsTotalQueryParameter = metricIopsTotal
}

// WithMetricIopsWriteQueryParameter adds the metricIopsWrite to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithMetricIopsWriteQueryParameter(metricIopsWrite *int64) *FcInterfaceCollectionGetParams {
	o.SetMetricIopsWriteQueryParameter(metricIopsWrite)
	return o
}

// SetMetricIopsWriteQueryParameter adds the metricIopsWrite to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetMetricIopsWriteQueryParameter(metricIopsWrite *int64) {
	o.MetricIopsWriteQueryParameter = metricIopsWrite
}

// WithMetricLatencyOtherQueryParameter adds the metricLatencyOther to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithMetricLatencyOtherQueryParameter(metricLatencyOther *int64) *FcInterfaceCollectionGetParams {
	o.SetMetricLatencyOtherQueryParameter(metricLatencyOther)
	return o
}

// SetMetricLatencyOtherQueryParameter adds the metricLatencyOther to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetMetricLatencyOtherQueryParameter(metricLatencyOther *int64) {
	o.MetricLatencyOtherQueryParameter = metricLatencyOther
}

// WithMetricLatencyReadQueryParameter adds the metricLatencyRead to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithMetricLatencyReadQueryParameter(metricLatencyRead *int64) *FcInterfaceCollectionGetParams {
	o.SetMetricLatencyReadQueryParameter(metricLatencyRead)
	return o
}

// SetMetricLatencyReadQueryParameter adds the metricLatencyRead to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetMetricLatencyReadQueryParameter(metricLatencyRead *int64) {
	o.MetricLatencyReadQueryParameter = metricLatencyRead
}

// WithMetricLatencyTotalQueryParameter adds the metricLatencyTotal to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithMetricLatencyTotalQueryParameter(metricLatencyTotal *int64) *FcInterfaceCollectionGetParams {
	o.SetMetricLatencyTotalQueryParameter(metricLatencyTotal)
	return o
}

// SetMetricLatencyTotalQueryParameter adds the metricLatencyTotal to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetMetricLatencyTotalQueryParameter(metricLatencyTotal *int64) {
	o.MetricLatencyTotalQueryParameter = metricLatencyTotal
}

// WithMetricLatencyWriteQueryParameter adds the metricLatencyWrite to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithMetricLatencyWriteQueryParameter(metricLatencyWrite *int64) *FcInterfaceCollectionGetParams {
	o.SetMetricLatencyWriteQueryParameter(metricLatencyWrite)
	return o
}

// SetMetricLatencyWriteQueryParameter adds the metricLatencyWrite to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetMetricLatencyWriteQueryParameter(metricLatencyWrite *int64) {
	o.MetricLatencyWriteQueryParameter = metricLatencyWrite
}

// WithMetricStatusQueryParameter adds the metricStatus to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithMetricStatusQueryParameter(metricStatus *string) *FcInterfaceCollectionGetParams {
	o.SetMetricStatusQueryParameter(metricStatus)
	return o
}

// SetMetricStatusQueryParameter adds the metricStatus to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetMetricStatusQueryParameter(metricStatus *string) {
	o.MetricStatusQueryParameter = metricStatus
}

// WithMetricThroughputReadQueryParameter adds the metricThroughputRead to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithMetricThroughputReadQueryParameter(metricThroughputRead *int64) *FcInterfaceCollectionGetParams {
	o.SetMetricThroughputReadQueryParameter(metricThroughputRead)
	return o
}

// SetMetricThroughputReadQueryParameter adds the metricThroughputRead to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetMetricThroughputReadQueryParameter(metricThroughputRead *int64) {
	o.MetricThroughputReadQueryParameter = metricThroughputRead
}

// WithMetricThroughputTotalQueryParameter adds the metricThroughputTotal to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithMetricThroughputTotalQueryParameter(metricThroughputTotal *int64) *FcInterfaceCollectionGetParams {
	o.SetMetricThroughputTotalQueryParameter(metricThroughputTotal)
	return o
}

// SetMetricThroughputTotalQueryParameter adds the metricThroughputTotal to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetMetricThroughputTotalQueryParameter(metricThroughputTotal *int64) {
	o.MetricThroughputTotalQueryParameter = metricThroughputTotal
}

// WithMetricThroughputWriteQueryParameter adds the metricThroughputWrite to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithMetricThroughputWriteQueryParameter(metricThroughputWrite *int64) *FcInterfaceCollectionGetParams {
	o.SetMetricThroughputWriteQueryParameter(metricThroughputWrite)
	return o
}

// SetMetricThroughputWriteQueryParameter adds the metricThroughputWrite to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetMetricThroughputWriteQueryParameter(metricThroughputWrite *int64) {
	o.MetricThroughputWriteQueryParameter = metricThroughputWrite
}

// WithMetricTimestampQueryParameter adds the metricTimestamp to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithMetricTimestampQueryParameter(metricTimestamp *string) *FcInterfaceCollectionGetParams {
	o.SetMetricTimestampQueryParameter(metricTimestamp)
	return o
}

// SetMetricTimestampQueryParameter adds the metricTimestamp to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetMetricTimestampQueryParameter(metricTimestamp *string) {
	o.MetricTimestampQueryParameter = metricTimestamp
}

// WithNameQueryParameter adds the name to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithNameQueryParameter(name *string) *FcInterfaceCollectionGetParams {
	o.SetNameQueryParameter(name)
	return o
}

// SetNameQueryParameter adds the name to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetNameQueryParameter(name *string) {
	o.NameQueryParameter = name
}

// WithOrderByQueryParameter adds the orderBy to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithOrderByQueryParameter(orderBy []string) *FcInterfaceCollectionGetParams {
	o.SetOrderByQueryParameter(orderBy)
	return o
}

// SetOrderByQueryParameter adds the orderBy to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetOrderByQueryParameter(orderBy []string) {
	o.OrderByQueryParameter = orderBy
}

// WithPortAddressQueryParameter adds the portAddress to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithPortAddressQueryParameter(portAddress *string) *FcInterfaceCollectionGetParams {
	o.SetPortAddressQueryParameter(portAddress)
	return o
}

// SetPortAddressQueryParameter adds the portAddress to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetPortAddressQueryParameter(portAddress *string) {
	o.PortAddressQueryParameter = portAddress
}

// WithRecommendDataProtocolQueryParameter adds the recommendDataProtocol to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithRecommendDataProtocolQueryParameter(recommendDataProtocol *string) *FcInterfaceCollectionGetParams {
	o.SetRecommendDataProtocolQueryParameter(recommendDataProtocol)
	return o
}

// SetRecommendDataProtocolQueryParameter adds the recommendDataProtocol to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetRecommendDataProtocolQueryParameter(recommendDataProtocol *string) {
	o.RecommendDataProtocolQueryParameter = recommendDataProtocol
}

// WithRecommendFabricsNameQueryParameter adds the recommendFabricsName to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithRecommendFabricsNameQueryParameter(recommendFabricsName []string) *FcInterfaceCollectionGetParams {
	o.SetRecommendFabricsNameQueryParameter(recommendFabricsName)
	return o
}

// SetRecommendFabricsNameQueryParameter adds the recommendFabricsName to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetRecommendFabricsNameQueryParameter(recommendFabricsName []string) {
	o.RecommendFabricsNameQueryParameter = recommendFabricsName
}

// WithRecommendInterfacesPerNodeQueryParameter adds the recommendInterfacesPerNode to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithRecommendInterfacesPerNodeQueryParameter(recommendInterfacesPerNode *int64) *FcInterfaceCollectionGetParams {
	o.SetRecommendInterfacesPerNodeQueryParameter(recommendInterfacesPerNode)
	return o
}

// SetRecommendInterfacesPerNodeQueryParameter adds the recommendInterfacesPerNode to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetRecommendInterfacesPerNodeQueryParameter(recommendInterfacesPerNode *int64) {
	o.RecommendInterfacesPerNodeQueryParameter = recommendInterfacesPerNode
}

// WithRecommendNodesNameQueryParameter adds the recommendNodesName to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithRecommendNodesNameQueryParameter(recommendNodesName []string) *FcInterfaceCollectionGetParams {
	o.SetRecommendNodesNameQueryParameter(recommendNodesName)
	return o
}

// SetRecommendNodesNameQueryParameter adds the recommendNodesName to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetRecommendNodesNameQueryParameter(recommendNodesName []string) {
	o.RecommendNodesNameQueryParameter = recommendNodesName
}

// WithRecommendNodesUUIDQueryParameter adds the recommendNodesUUID to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithRecommendNodesUUIDQueryParameter(recommendNodesUUID []string) *FcInterfaceCollectionGetParams {
	o.SetRecommendNodesUUIDQueryParameter(recommendNodesUUID)
	return o
}

// SetRecommendNodesUUIDQueryParameter adds the recommendNodesUuid to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetRecommendNodesUUIDQueryParameter(recommendNodesUUID []string) {
	o.RecommendNodesUUIDQueryParameter = recommendNodesUUID
}

// WithRecommendProposedLocationsPortUUIDQueryParameter adds the recommendProposedLocationsPortUUID to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithRecommendProposedLocationsPortUUIDQueryParameter(recommendProposedLocationsPortUUID []string) *FcInterfaceCollectionGetParams {
	o.SetRecommendProposedLocationsPortUUIDQueryParameter(recommendProposedLocationsPortUUID)
	return o
}

// SetRecommendProposedLocationsPortUUIDQueryParameter adds the recommendProposedLocationsPortUuid to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetRecommendProposedLocationsPortUUIDQueryParameter(recommendProposedLocationsPortUUID []string) {
	o.RecommendProposedLocationsPortUUIDQueryParameter = recommendProposedLocationsPortUUID
}

// WithRecommendSVMNameQueryParameter adds the recommendSvmName to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithRecommendSVMNameQueryParameter(recommendSvmName *string) *FcInterfaceCollectionGetParams {
	o.SetRecommendSVMNameQueryParameter(recommendSvmName)
	return o
}

// SetRecommendSVMNameQueryParameter adds the recommendSvmName to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetRecommendSVMNameQueryParameter(recommendSvmName *string) {
	o.RecommendSVMNameQueryParameter = recommendSvmName
}

// WithRecommendSVMUUIDQueryParameter adds the recommendSvmUUID to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithRecommendSVMUUIDQueryParameter(recommendSvmUUID *string) *FcInterfaceCollectionGetParams {
	o.SetRecommendSVMUUIDQueryParameter(recommendSvmUUID)
	return o
}

// SetRecommendSVMUUIDQueryParameter adds the recommendSvmUuid to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetRecommendSVMUUIDQueryParameter(recommendSvmUUID *string) {
	o.RecommendSVMUUIDQueryParameter = recommendSvmUUID
}

// WithReturnRecordsQueryParameter adds the returnRecords to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithReturnRecordsQueryParameter(returnRecords *bool) *FcInterfaceCollectionGetParams {
	o.SetReturnRecordsQueryParameter(returnRecords)
	return o
}

// SetReturnRecordsQueryParameter adds the returnRecords to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetReturnRecordsQueryParameter(returnRecords *bool) {
	o.ReturnRecordsQueryParameter = returnRecords
}

// WithReturnTimeoutQueryParameter adds the returnTimeout to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithReturnTimeoutQueryParameter(returnTimeout *int64) *FcInterfaceCollectionGetParams {
	o.SetReturnTimeoutQueryParameter(returnTimeout)
	return o
}

// SetReturnTimeoutQueryParameter adds the returnTimeout to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetReturnTimeoutQueryParameter(returnTimeout *int64) {
	o.ReturnTimeoutQueryParameter = returnTimeout
}

// WithStateQueryParameter adds the state to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithStateQueryParameter(state *string) *FcInterfaceCollectionGetParams {
	o.SetStateQueryParameter(state)
	return o
}

// SetStateQueryParameter adds the state to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetStateQueryParameter(state *string) {
	o.StateQueryParameter = state
}

// WithStatisticsIopsRawOtherQueryParameter adds the statisticsIopsRawOther to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithStatisticsIopsRawOtherQueryParameter(statisticsIopsRawOther *int64) *FcInterfaceCollectionGetParams {
	o.SetStatisticsIopsRawOtherQueryParameter(statisticsIopsRawOther)
	return o
}

// SetStatisticsIopsRawOtherQueryParameter adds the statisticsIopsRawOther to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetStatisticsIopsRawOtherQueryParameter(statisticsIopsRawOther *int64) {
	o.StatisticsIopsRawOtherQueryParameter = statisticsIopsRawOther
}

// WithStatisticsIopsRawReadQueryParameter adds the statisticsIopsRawRead to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithStatisticsIopsRawReadQueryParameter(statisticsIopsRawRead *int64) *FcInterfaceCollectionGetParams {
	o.SetStatisticsIopsRawReadQueryParameter(statisticsIopsRawRead)
	return o
}

// SetStatisticsIopsRawReadQueryParameter adds the statisticsIopsRawRead to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetStatisticsIopsRawReadQueryParameter(statisticsIopsRawRead *int64) {
	o.StatisticsIopsRawReadQueryParameter = statisticsIopsRawRead
}

// WithStatisticsIopsRawTotalQueryParameter adds the statisticsIopsRawTotal to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithStatisticsIopsRawTotalQueryParameter(statisticsIopsRawTotal *int64) *FcInterfaceCollectionGetParams {
	o.SetStatisticsIopsRawTotalQueryParameter(statisticsIopsRawTotal)
	return o
}

// SetStatisticsIopsRawTotalQueryParameter adds the statisticsIopsRawTotal to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetStatisticsIopsRawTotalQueryParameter(statisticsIopsRawTotal *int64) {
	o.StatisticsIopsRawTotalQueryParameter = statisticsIopsRawTotal
}

// WithStatisticsIopsRawWriteQueryParameter adds the statisticsIopsRawWrite to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithStatisticsIopsRawWriteQueryParameter(statisticsIopsRawWrite *int64) *FcInterfaceCollectionGetParams {
	o.SetStatisticsIopsRawWriteQueryParameter(statisticsIopsRawWrite)
	return o
}

// SetStatisticsIopsRawWriteQueryParameter adds the statisticsIopsRawWrite to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetStatisticsIopsRawWriteQueryParameter(statisticsIopsRawWrite *int64) {
	o.StatisticsIopsRawWriteQueryParameter = statisticsIopsRawWrite
}

// WithStatisticsLatencyRawOtherQueryParameter adds the statisticsLatencyRawOther to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithStatisticsLatencyRawOtherQueryParameter(statisticsLatencyRawOther *int64) *FcInterfaceCollectionGetParams {
	o.SetStatisticsLatencyRawOtherQueryParameter(statisticsLatencyRawOther)
	return o
}

// SetStatisticsLatencyRawOtherQueryParameter adds the statisticsLatencyRawOther to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetStatisticsLatencyRawOtherQueryParameter(statisticsLatencyRawOther *int64) {
	o.StatisticsLatencyRawOtherQueryParameter = statisticsLatencyRawOther
}

// WithStatisticsLatencyRawReadQueryParameter adds the statisticsLatencyRawRead to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithStatisticsLatencyRawReadQueryParameter(statisticsLatencyRawRead *int64) *FcInterfaceCollectionGetParams {
	o.SetStatisticsLatencyRawReadQueryParameter(statisticsLatencyRawRead)
	return o
}

// SetStatisticsLatencyRawReadQueryParameter adds the statisticsLatencyRawRead to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetStatisticsLatencyRawReadQueryParameter(statisticsLatencyRawRead *int64) {
	o.StatisticsLatencyRawReadQueryParameter = statisticsLatencyRawRead
}

// WithStatisticsLatencyRawTotalQueryParameter adds the statisticsLatencyRawTotal to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithStatisticsLatencyRawTotalQueryParameter(statisticsLatencyRawTotal *int64) *FcInterfaceCollectionGetParams {
	o.SetStatisticsLatencyRawTotalQueryParameter(statisticsLatencyRawTotal)
	return o
}

// SetStatisticsLatencyRawTotalQueryParameter adds the statisticsLatencyRawTotal to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetStatisticsLatencyRawTotalQueryParameter(statisticsLatencyRawTotal *int64) {
	o.StatisticsLatencyRawTotalQueryParameter = statisticsLatencyRawTotal
}

// WithStatisticsLatencyRawWriteQueryParameter adds the statisticsLatencyRawWrite to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithStatisticsLatencyRawWriteQueryParameter(statisticsLatencyRawWrite *int64) *FcInterfaceCollectionGetParams {
	o.SetStatisticsLatencyRawWriteQueryParameter(statisticsLatencyRawWrite)
	return o
}

// SetStatisticsLatencyRawWriteQueryParameter adds the statisticsLatencyRawWrite to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetStatisticsLatencyRawWriteQueryParameter(statisticsLatencyRawWrite *int64) {
	o.StatisticsLatencyRawWriteQueryParameter = statisticsLatencyRawWrite
}

// WithStatisticsStatusQueryParameter adds the statisticsStatus to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithStatisticsStatusQueryParameter(statisticsStatus *string) *FcInterfaceCollectionGetParams {
	o.SetStatisticsStatusQueryParameter(statisticsStatus)
	return o
}

// SetStatisticsStatusQueryParameter adds the statisticsStatus to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetStatisticsStatusQueryParameter(statisticsStatus *string) {
	o.StatisticsStatusQueryParameter = statisticsStatus
}

// WithStatisticsThroughputRawReadQueryParameter adds the statisticsThroughputRawRead to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithStatisticsThroughputRawReadQueryParameter(statisticsThroughputRawRead *int64) *FcInterfaceCollectionGetParams {
	o.SetStatisticsThroughputRawReadQueryParameter(statisticsThroughputRawRead)
	return o
}

// SetStatisticsThroughputRawReadQueryParameter adds the statisticsThroughputRawRead to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetStatisticsThroughputRawReadQueryParameter(statisticsThroughputRawRead *int64) {
	o.StatisticsThroughputRawReadQueryParameter = statisticsThroughputRawRead
}

// WithStatisticsThroughputRawTotalQueryParameter adds the statisticsThroughputRawTotal to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithStatisticsThroughputRawTotalQueryParameter(statisticsThroughputRawTotal *int64) *FcInterfaceCollectionGetParams {
	o.SetStatisticsThroughputRawTotalQueryParameter(statisticsThroughputRawTotal)
	return o
}

// SetStatisticsThroughputRawTotalQueryParameter adds the statisticsThroughputRawTotal to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetStatisticsThroughputRawTotalQueryParameter(statisticsThroughputRawTotal *int64) {
	o.StatisticsThroughputRawTotalQueryParameter = statisticsThroughputRawTotal
}

// WithStatisticsThroughputRawWriteQueryParameter adds the statisticsThroughputRawWrite to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithStatisticsThroughputRawWriteQueryParameter(statisticsThroughputRawWrite *int64) *FcInterfaceCollectionGetParams {
	o.SetStatisticsThroughputRawWriteQueryParameter(statisticsThroughputRawWrite)
	return o
}

// SetStatisticsThroughputRawWriteQueryParameter adds the statisticsThroughputRawWrite to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetStatisticsThroughputRawWriteQueryParameter(statisticsThroughputRawWrite *int64) {
	o.StatisticsThroughputRawWriteQueryParameter = statisticsThroughputRawWrite
}

// WithStatisticsTimestampQueryParameter adds the statisticsTimestamp to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithStatisticsTimestampQueryParameter(statisticsTimestamp *string) *FcInterfaceCollectionGetParams {
	o.SetStatisticsTimestampQueryParameter(statisticsTimestamp)
	return o
}

// SetStatisticsTimestampQueryParameter adds the statisticsTimestamp to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetStatisticsTimestampQueryParameter(statisticsTimestamp *string) {
	o.StatisticsTimestampQueryParameter = statisticsTimestamp
}

// WithSVMNameQueryParameter adds the svmName to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithSVMNameQueryParameter(svmName *string) *FcInterfaceCollectionGetParams {
	o.SetSVMNameQueryParameter(svmName)
	return o
}

// SetSVMNameQueryParameter adds the svmName to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetSVMNameQueryParameter(svmName *string) {
	o.SVMNameQueryParameter = svmName
}

// WithSVMUUIDQueryParameter adds the svmUUID to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithSVMUUIDQueryParameter(svmUUID *string) *FcInterfaceCollectionGetParams {
	o.SetSVMUUIDQueryParameter(svmUUID)
	return o
}

// SetSVMUUIDQueryParameter adds the svmUuid to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetSVMUUIDQueryParameter(svmUUID *string) {
	o.SVMUUIDQueryParameter = svmUUID
}

// WithUUIDQueryParameter adds the uuid to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithUUIDQueryParameter(uuid *string) *FcInterfaceCollectionGetParams {
	o.SetUUIDQueryParameter(uuid)
	return o
}

// SetUUIDQueryParameter adds the uuid to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetUUIDQueryParameter(uuid *string) {
	o.UUIDQueryParameter = uuid
}

// WithWwnnQueryParameter adds the wwnn to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithWwnnQueryParameter(wwnn *string) *FcInterfaceCollectionGetParams {
	o.SetWwnnQueryParameter(wwnn)
	return o
}

// SetWwnnQueryParameter adds the wwnn to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetWwnnQueryParameter(wwnn *string) {
	o.WwnnQueryParameter = wwnn
}

// WithWwpnQueryParameter adds the wwpn to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) WithWwpnQueryParameter(wwpn *string) *FcInterfaceCollectionGetParams {
	o.SetWwpnQueryParameter(wwpn)
	return o
}

// SetWwpnQueryParameter adds the wwpn to the fc interface collection get params
func (o *FcInterfaceCollectionGetParams) SetWwpnQueryParameter(wwpn *string) {
	o.WwpnQueryParameter = wwpn
}

// WriteToRequest writes these params to a swagger request
func (o *FcInterfaceCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CommentQueryParameter != nil {

		// query param comment
		var qrComment string

		if o.CommentQueryParameter != nil {
			qrComment = *o.CommentQueryParameter
		}
		qComment := qrComment
		if qComment != "" {

			if err := r.SetQueryParam("comment", qComment); err != nil {
				return err
			}
		}
	}

	if o.DataProtocolQueryParameter != nil {

		// query param data_protocol
		var qrDataProtocol string

		if o.DataProtocolQueryParameter != nil {
			qrDataProtocol = *o.DataProtocolQueryParameter
		}
		qDataProtocol := qrDataProtocol
		if qDataProtocol != "" {

			if err := r.SetQueryParam("data_protocol", qDataProtocol); err != nil {
				return err
			}
		}
	}

	if o.EnabledQueryParameter != nil {

		// query param enabled
		var qrEnabled bool

		if o.EnabledQueryParameter != nil {
			qrEnabled = *o.EnabledQueryParameter
		}
		qEnabled := swag.FormatBool(qrEnabled)
		if qEnabled != "" {

			if err := r.SetQueryParam("enabled", qEnabled); err != nil {
				return err
			}
		}
	}

	if o.FieldsQueryParameter != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.LocationHomeNodeNameQueryParameter != nil {

		// query param location.home_node.name
		var qrLocationHomeNodeName string

		if o.LocationHomeNodeNameQueryParameter != nil {
			qrLocationHomeNodeName = *o.LocationHomeNodeNameQueryParameter
		}
		qLocationHomeNodeName := qrLocationHomeNodeName
		if qLocationHomeNodeName != "" {

			if err := r.SetQueryParam("location.home_node.name", qLocationHomeNodeName); err != nil {
				return err
			}
		}
	}

	if o.LocationHomeNodeUUIDQueryParameter != nil {

		// query param location.home_node.uuid
		var qrLocationHomeNodeUUID string

		if o.LocationHomeNodeUUIDQueryParameter != nil {
			qrLocationHomeNodeUUID = *o.LocationHomeNodeUUIDQueryParameter
		}
		qLocationHomeNodeUUID := qrLocationHomeNodeUUID
		if qLocationHomeNodeUUID != "" {

			if err := r.SetQueryParam("location.home_node.uuid", qLocationHomeNodeUUID); err != nil {
				return err
			}
		}
	}

	if o.LocationHomePortNameQueryParameter != nil {

		// query param location.home_port.name
		var qrLocationHomePortName string

		if o.LocationHomePortNameQueryParameter != nil {
			qrLocationHomePortName = *o.LocationHomePortNameQueryParameter
		}
		qLocationHomePortName := qrLocationHomePortName
		if qLocationHomePortName != "" {

			if err := r.SetQueryParam("location.home_port.name", qLocationHomePortName); err != nil {
				return err
			}
		}
	}

	if o.LocationHomePortNodeNameQueryParameter != nil {

		// query param location.home_port.node.name
		var qrLocationHomePortNodeName string

		if o.LocationHomePortNodeNameQueryParameter != nil {
			qrLocationHomePortNodeName = *o.LocationHomePortNodeNameQueryParameter
		}
		qLocationHomePortNodeName := qrLocationHomePortNodeName
		if qLocationHomePortNodeName != "" {

			if err := r.SetQueryParam("location.home_port.node.name", qLocationHomePortNodeName); err != nil {
				return err
			}
		}
	}

	if o.LocationHomePortUUIDQueryParameter != nil {

		// query param location.home_port.uuid
		var qrLocationHomePortUUID string

		if o.LocationHomePortUUIDQueryParameter != nil {
			qrLocationHomePortUUID = *o.LocationHomePortUUIDQueryParameter
		}
		qLocationHomePortUUID := qrLocationHomePortUUID
		if qLocationHomePortUUID != "" {

			if err := r.SetQueryParam("location.home_port.uuid", qLocationHomePortUUID); err != nil {
				return err
			}
		}
	}

	if o.LocationIsHomeQueryParameter != nil {

		// query param location.is_home
		var qrLocationIsHome bool

		if o.LocationIsHomeQueryParameter != nil {
			qrLocationIsHome = *o.LocationIsHomeQueryParameter
		}
		qLocationIsHome := swag.FormatBool(qrLocationIsHome)
		if qLocationIsHome != "" {

			if err := r.SetQueryParam("location.is_home", qLocationIsHome); err != nil {
				return err
			}
		}
	}

	if o.LocationNodeNameQueryParameter != nil {

		// query param location.node.name
		var qrLocationNodeName string

		if o.LocationNodeNameQueryParameter != nil {
			qrLocationNodeName = *o.LocationNodeNameQueryParameter
		}
		qLocationNodeName := qrLocationNodeName
		if qLocationNodeName != "" {

			if err := r.SetQueryParam("location.node.name", qLocationNodeName); err != nil {
				return err
			}
		}
	}

	if o.LocationNodeUUIDQueryParameter != nil {

		// query param location.node.uuid
		var qrLocationNodeUUID string

		if o.LocationNodeUUIDQueryParameter != nil {
			qrLocationNodeUUID = *o.LocationNodeUUIDQueryParameter
		}
		qLocationNodeUUID := qrLocationNodeUUID
		if qLocationNodeUUID != "" {

			if err := r.SetQueryParam("location.node.uuid", qLocationNodeUUID); err != nil {
				return err
			}
		}
	}

	if o.LocationPortNameQueryParameter != nil {

		// query param location.port.name
		var qrLocationPortName string

		if o.LocationPortNameQueryParameter != nil {
			qrLocationPortName = *o.LocationPortNameQueryParameter
		}
		qLocationPortName := qrLocationPortName
		if qLocationPortName != "" {

			if err := r.SetQueryParam("location.port.name", qLocationPortName); err != nil {
				return err
			}
		}
	}

	if o.LocationPortNodeNameQueryParameter != nil {

		// query param location.port.node.name
		var qrLocationPortNodeName string

		if o.LocationPortNodeNameQueryParameter != nil {
			qrLocationPortNodeName = *o.LocationPortNodeNameQueryParameter
		}
		qLocationPortNodeName := qrLocationPortNodeName
		if qLocationPortNodeName != "" {

			if err := r.SetQueryParam("location.port.node.name", qLocationPortNodeName); err != nil {
				return err
			}
		}
	}

	if o.LocationPortUUIDQueryParameter != nil {

		// query param location.port.uuid
		var qrLocationPortUUID string

		if o.LocationPortUUIDQueryParameter != nil {
			qrLocationPortUUID = *o.LocationPortUUIDQueryParameter
		}
		qLocationPortUUID := qrLocationPortUUID
		if qLocationPortUUID != "" {

			if err := r.SetQueryParam("location.port.uuid", qLocationPortUUID); err != nil {
				return err
			}
		}
	}

	if o.MaxRecordsQueryParameter != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecordsQueryParameter != nil {
			qrMaxRecords = *o.MaxRecordsQueryParameter
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.MetricDurationQueryParameter != nil {

		// query param metric.duration
		var qrMetricDuration string

		if o.MetricDurationQueryParameter != nil {
			qrMetricDuration = *o.MetricDurationQueryParameter
		}
		qMetricDuration := qrMetricDuration
		if qMetricDuration != "" {

			if err := r.SetQueryParam("metric.duration", qMetricDuration); err != nil {
				return err
			}
		}
	}

	if o.MetricIopsOtherQueryParameter != nil {

		// query param metric.iops.other
		var qrMetricIopsOther int64

		if o.MetricIopsOtherQueryParameter != nil {
			qrMetricIopsOther = *o.MetricIopsOtherQueryParameter
		}
		qMetricIopsOther := swag.FormatInt64(qrMetricIopsOther)
		if qMetricIopsOther != "" {

			if err := r.SetQueryParam("metric.iops.other", qMetricIopsOther); err != nil {
				return err
			}
		}
	}

	if o.MetricIopsReadQueryParameter != nil {

		// query param metric.iops.read
		var qrMetricIopsRead int64

		if o.MetricIopsReadQueryParameter != nil {
			qrMetricIopsRead = *o.MetricIopsReadQueryParameter
		}
		qMetricIopsRead := swag.FormatInt64(qrMetricIopsRead)
		if qMetricIopsRead != "" {

			if err := r.SetQueryParam("metric.iops.read", qMetricIopsRead); err != nil {
				return err
			}
		}
	}

	if o.MetricIopsTotalQueryParameter != nil {

		// query param metric.iops.total
		var qrMetricIopsTotal int64

		if o.MetricIopsTotalQueryParameter != nil {
			qrMetricIopsTotal = *o.MetricIopsTotalQueryParameter
		}
		qMetricIopsTotal := swag.FormatInt64(qrMetricIopsTotal)
		if qMetricIopsTotal != "" {

			if err := r.SetQueryParam("metric.iops.total", qMetricIopsTotal); err != nil {
				return err
			}
		}
	}

	if o.MetricIopsWriteQueryParameter != nil {

		// query param metric.iops.write
		var qrMetricIopsWrite int64

		if o.MetricIopsWriteQueryParameter != nil {
			qrMetricIopsWrite = *o.MetricIopsWriteQueryParameter
		}
		qMetricIopsWrite := swag.FormatInt64(qrMetricIopsWrite)
		if qMetricIopsWrite != "" {

			if err := r.SetQueryParam("metric.iops.write", qMetricIopsWrite); err != nil {
				return err
			}
		}
	}

	if o.MetricLatencyOtherQueryParameter != nil {

		// query param metric.latency.other
		var qrMetricLatencyOther int64

		if o.MetricLatencyOtherQueryParameter != nil {
			qrMetricLatencyOther = *o.MetricLatencyOtherQueryParameter
		}
		qMetricLatencyOther := swag.FormatInt64(qrMetricLatencyOther)
		if qMetricLatencyOther != "" {

			if err := r.SetQueryParam("metric.latency.other", qMetricLatencyOther); err != nil {
				return err
			}
		}
	}

	if o.MetricLatencyReadQueryParameter != nil {

		// query param metric.latency.read
		var qrMetricLatencyRead int64

		if o.MetricLatencyReadQueryParameter != nil {
			qrMetricLatencyRead = *o.MetricLatencyReadQueryParameter
		}
		qMetricLatencyRead := swag.FormatInt64(qrMetricLatencyRead)
		if qMetricLatencyRead != "" {

			if err := r.SetQueryParam("metric.latency.read", qMetricLatencyRead); err != nil {
				return err
			}
		}
	}

	if o.MetricLatencyTotalQueryParameter != nil {

		// query param metric.latency.total
		var qrMetricLatencyTotal int64

		if o.MetricLatencyTotalQueryParameter != nil {
			qrMetricLatencyTotal = *o.MetricLatencyTotalQueryParameter
		}
		qMetricLatencyTotal := swag.FormatInt64(qrMetricLatencyTotal)
		if qMetricLatencyTotal != "" {

			if err := r.SetQueryParam("metric.latency.total", qMetricLatencyTotal); err != nil {
				return err
			}
		}
	}

	if o.MetricLatencyWriteQueryParameter != nil {

		// query param metric.latency.write
		var qrMetricLatencyWrite int64

		if o.MetricLatencyWriteQueryParameter != nil {
			qrMetricLatencyWrite = *o.MetricLatencyWriteQueryParameter
		}
		qMetricLatencyWrite := swag.FormatInt64(qrMetricLatencyWrite)
		if qMetricLatencyWrite != "" {

			if err := r.SetQueryParam("metric.latency.write", qMetricLatencyWrite); err != nil {
				return err
			}
		}
	}

	if o.MetricStatusQueryParameter != nil {

		// query param metric.status
		var qrMetricStatus string

		if o.MetricStatusQueryParameter != nil {
			qrMetricStatus = *o.MetricStatusQueryParameter
		}
		qMetricStatus := qrMetricStatus
		if qMetricStatus != "" {

			if err := r.SetQueryParam("metric.status", qMetricStatus); err != nil {
				return err
			}
		}
	}

	if o.MetricThroughputReadQueryParameter != nil {

		// query param metric.throughput.read
		var qrMetricThroughputRead int64

		if o.MetricThroughputReadQueryParameter != nil {
			qrMetricThroughputRead = *o.MetricThroughputReadQueryParameter
		}
		qMetricThroughputRead := swag.FormatInt64(qrMetricThroughputRead)
		if qMetricThroughputRead != "" {

			if err := r.SetQueryParam("metric.throughput.read", qMetricThroughputRead); err != nil {
				return err
			}
		}
	}

	if o.MetricThroughputTotalQueryParameter != nil {

		// query param metric.throughput.total
		var qrMetricThroughputTotal int64

		if o.MetricThroughputTotalQueryParameter != nil {
			qrMetricThroughputTotal = *o.MetricThroughputTotalQueryParameter
		}
		qMetricThroughputTotal := swag.FormatInt64(qrMetricThroughputTotal)
		if qMetricThroughputTotal != "" {

			if err := r.SetQueryParam("metric.throughput.total", qMetricThroughputTotal); err != nil {
				return err
			}
		}
	}

	if o.MetricThroughputWriteQueryParameter != nil {

		// query param metric.throughput.write
		var qrMetricThroughputWrite int64

		if o.MetricThroughputWriteQueryParameter != nil {
			qrMetricThroughputWrite = *o.MetricThroughputWriteQueryParameter
		}
		qMetricThroughputWrite := swag.FormatInt64(qrMetricThroughputWrite)
		if qMetricThroughputWrite != "" {

			if err := r.SetQueryParam("metric.throughput.write", qMetricThroughputWrite); err != nil {
				return err
			}
		}
	}

	if o.MetricTimestampQueryParameter != nil {

		// query param metric.timestamp
		var qrMetricTimestamp string

		if o.MetricTimestampQueryParameter != nil {
			qrMetricTimestamp = *o.MetricTimestampQueryParameter
		}
		qMetricTimestamp := qrMetricTimestamp
		if qMetricTimestamp != "" {

			if err := r.SetQueryParam("metric.timestamp", qMetricTimestamp); err != nil {
				return err
			}
		}
	}

	if o.NameQueryParameter != nil {

		// query param name
		var qrName string

		if o.NameQueryParameter != nil {
			qrName = *o.NameQueryParameter
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.OrderByQueryParameter != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.PortAddressQueryParameter != nil {

		// query param port_address
		var qrPortAddress string

		if o.PortAddressQueryParameter != nil {
			qrPortAddress = *o.PortAddressQueryParameter
		}
		qPortAddress := qrPortAddress
		if qPortAddress != "" {

			if err := r.SetQueryParam("port_address", qPortAddress); err != nil {
				return err
			}
		}
	}

	if o.RecommendDataProtocolQueryParameter != nil {

		// query param recommend.data_protocol
		var qrRecommendDataProtocol string

		if o.RecommendDataProtocolQueryParameter != nil {
			qrRecommendDataProtocol = *o.RecommendDataProtocolQueryParameter
		}
		qRecommendDataProtocol := qrRecommendDataProtocol
		if qRecommendDataProtocol != "" {

			if err := r.SetQueryParam("recommend.data_protocol", qRecommendDataProtocol); err != nil {
				return err
			}
		}
	}

	if o.RecommendFabricsNameQueryParameter != nil {

		// binding items for recommend.fabrics.name
		joinedRecommendFabricsName := o.bindParamRecommendFabricsName(reg)

		// query array param recommend.fabrics.name
		if err := r.SetQueryParam("recommend.fabrics.name", joinedRecommendFabricsName...); err != nil {
			return err
		}
	}

	if o.RecommendInterfacesPerNodeQueryParameter != nil {

		// query param recommend.interfaces_per_node
		var qrRecommendInterfacesPerNode int64

		if o.RecommendInterfacesPerNodeQueryParameter != nil {
			qrRecommendInterfacesPerNode = *o.RecommendInterfacesPerNodeQueryParameter
		}
		qRecommendInterfacesPerNode := swag.FormatInt64(qrRecommendInterfacesPerNode)
		if qRecommendInterfacesPerNode != "" {

			if err := r.SetQueryParam("recommend.interfaces_per_node", qRecommendInterfacesPerNode); err != nil {
				return err
			}
		}
	}

	if o.RecommendNodesNameQueryParameter != nil {

		// binding items for recommend.nodes.name
		joinedRecommendNodesName := o.bindParamRecommendNodesName(reg)

		// query array param recommend.nodes.name
		if err := r.SetQueryParam("recommend.nodes.name", joinedRecommendNodesName...); err != nil {
			return err
		}
	}

	if o.RecommendNodesUUIDQueryParameter != nil {

		// binding items for recommend.nodes.uuid
		joinedRecommendNodesUUID := o.bindParamRecommendNodesUUID(reg)

		// query array param recommend.nodes.uuid
		if err := r.SetQueryParam("recommend.nodes.uuid", joinedRecommendNodesUUID...); err != nil {
			return err
		}
	}

	if o.RecommendProposedLocationsPortUUIDQueryParameter != nil {

		// binding items for recommend.proposed.locations.port.uuid
		joinedRecommendProposedLocationsPortUUID := o.bindParamRecommendProposedLocationsPortUUID(reg)

		// query array param recommend.proposed.locations.port.uuid
		if err := r.SetQueryParam("recommend.proposed.locations.port.uuid", joinedRecommendProposedLocationsPortUUID...); err != nil {
			return err
		}
	}

	if o.RecommendSVMNameQueryParameter != nil {

		// query param recommend.svm.name
		var qrRecommendSvmName string

		if o.RecommendSVMNameQueryParameter != nil {
			qrRecommendSvmName = *o.RecommendSVMNameQueryParameter
		}
		qRecommendSvmName := qrRecommendSvmName
		if qRecommendSvmName != "" {

			if err := r.SetQueryParam("recommend.svm.name", qRecommendSvmName); err != nil {
				return err
			}
		}
	}

	if o.RecommendSVMUUIDQueryParameter != nil {

		// query param recommend.svm.uuid
		var qrRecommendSvmUUID string

		if o.RecommendSVMUUIDQueryParameter != nil {
			qrRecommendSvmUUID = *o.RecommendSVMUUIDQueryParameter
		}
		qRecommendSvmUUID := qrRecommendSvmUUID
		if qRecommendSvmUUID != "" {

			if err := r.SetQueryParam("recommend.svm.uuid", qRecommendSvmUUID); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecordsQueryParameter != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecordsQueryParameter != nil {
			qrReturnRecords = *o.ReturnRecordsQueryParameter
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeoutQueryParameter != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeoutQueryParameter != nil {
			qrReturnTimeout = *o.ReturnTimeoutQueryParameter
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.StateQueryParameter != nil {

		// query param state
		var qrState string

		if o.StateQueryParameter != nil {
			qrState = *o.StateQueryParameter
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if o.StatisticsIopsRawOtherQueryParameter != nil {

		// query param statistics.iops_raw.other
		var qrStatisticsIopsRawOther int64

		if o.StatisticsIopsRawOtherQueryParameter != nil {
			qrStatisticsIopsRawOther = *o.StatisticsIopsRawOtherQueryParameter
		}
		qStatisticsIopsRawOther := swag.FormatInt64(qrStatisticsIopsRawOther)
		if qStatisticsIopsRawOther != "" {

			if err := r.SetQueryParam("statistics.iops_raw.other", qStatisticsIopsRawOther); err != nil {
				return err
			}
		}
	}

	if o.StatisticsIopsRawReadQueryParameter != nil {

		// query param statistics.iops_raw.read
		var qrStatisticsIopsRawRead int64

		if o.StatisticsIopsRawReadQueryParameter != nil {
			qrStatisticsIopsRawRead = *o.StatisticsIopsRawReadQueryParameter
		}
		qStatisticsIopsRawRead := swag.FormatInt64(qrStatisticsIopsRawRead)
		if qStatisticsIopsRawRead != "" {

			if err := r.SetQueryParam("statistics.iops_raw.read", qStatisticsIopsRawRead); err != nil {
				return err
			}
		}
	}

	if o.StatisticsIopsRawTotalQueryParameter != nil {

		// query param statistics.iops_raw.total
		var qrStatisticsIopsRawTotal int64

		if o.StatisticsIopsRawTotalQueryParameter != nil {
			qrStatisticsIopsRawTotal = *o.StatisticsIopsRawTotalQueryParameter
		}
		qStatisticsIopsRawTotal := swag.FormatInt64(qrStatisticsIopsRawTotal)
		if qStatisticsIopsRawTotal != "" {

			if err := r.SetQueryParam("statistics.iops_raw.total", qStatisticsIopsRawTotal); err != nil {
				return err
			}
		}
	}

	if o.StatisticsIopsRawWriteQueryParameter != nil {

		// query param statistics.iops_raw.write
		var qrStatisticsIopsRawWrite int64

		if o.StatisticsIopsRawWriteQueryParameter != nil {
			qrStatisticsIopsRawWrite = *o.StatisticsIopsRawWriteQueryParameter
		}
		qStatisticsIopsRawWrite := swag.FormatInt64(qrStatisticsIopsRawWrite)
		if qStatisticsIopsRawWrite != "" {

			if err := r.SetQueryParam("statistics.iops_raw.write", qStatisticsIopsRawWrite); err != nil {
				return err
			}
		}
	}

	if o.StatisticsLatencyRawOtherQueryParameter != nil {

		// query param statistics.latency_raw.other
		var qrStatisticsLatencyRawOther int64

		if o.StatisticsLatencyRawOtherQueryParameter != nil {
			qrStatisticsLatencyRawOther = *o.StatisticsLatencyRawOtherQueryParameter
		}
		qStatisticsLatencyRawOther := swag.FormatInt64(qrStatisticsLatencyRawOther)
		if qStatisticsLatencyRawOther != "" {

			if err := r.SetQueryParam("statistics.latency_raw.other", qStatisticsLatencyRawOther); err != nil {
				return err
			}
		}
	}

	if o.StatisticsLatencyRawReadQueryParameter != nil {

		// query param statistics.latency_raw.read
		var qrStatisticsLatencyRawRead int64

		if o.StatisticsLatencyRawReadQueryParameter != nil {
			qrStatisticsLatencyRawRead = *o.StatisticsLatencyRawReadQueryParameter
		}
		qStatisticsLatencyRawRead := swag.FormatInt64(qrStatisticsLatencyRawRead)
		if qStatisticsLatencyRawRead != "" {

			if err := r.SetQueryParam("statistics.latency_raw.read", qStatisticsLatencyRawRead); err != nil {
				return err
			}
		}
	}

	if o.StatisticsLatencyRawTotalQueryParameter != nil {

		// query param statistics.latency_raw.total
		var qrStatisticsLatencyRawTotal int64

		if o.StatisticsLatencyRawTotalQueryParameter != nil {
			qrStatisticsLatencyRawTotal = *o.StatisticsLatencyRawTotalQueryParameter
		}
		qStatisticsLatencyRawTotal := swag.FormatInt64(qrStatisticsLatencyRawTotal)
		if qStatisticsLatencyRawTotal != "" {

			if err := r.SetQueryParam("statistics.latency_raw.total", qStatisticsLatencyRawTotal); err != nil {
				return err
			}
		}
	}

	if o.StatisticsLatencyRawWriteQueryParameter != nil {

		// query param statistics.latency_raw.write
		var qrStatisticsLatencyRawWrite int64

		if o.StatisticsLatencyRawWriteQueryParameter != nil {
			qrStatisticsLatencyRawWrite = *o.StatisticsLatencyRawWriteQueryParameter
		}
		qStatisticsLatencyRawWrite := swag.FormatInt64(qrStatisticsLatencyRawWrite)
		if qStatisticsLatencyRawWrite != "" {

			if err := r.SetQueryParam("statistics.latency_raw.write", qStatisticsLatencyRawWrite); err != nil {
				return err
			}
		}
	}

	if o.StatisticsStatusQueryParameter != nil {

		// query param statistics.status
		var qrStatisticsStatus string

		if o.StatisticsStatusQueryParameter != nil {
			qrStatisticsStatus = *o.StatisticsStatusQueryParameter
		}
		qStatisticsStatus := qrStatisticsStatus
		if qStatisticsStatus != "" {

			if err := r.SetQueryParam("statistics.status", qStatisticsStatus); err != nil {
				return err
			}
		}
	}

	if o.StatisticsThroughputRawReadQueryParameter != nil {

		// query param statistics.throughput_raw.read
		var qrStatisticsThroughputRawRead int64

		if o.StatisticsThroughputRawReadQueryParameter != nil {
			qrStatisticsThroughputRawRead = *o.StatisticsThroughputRawReadQueryParameter
		}
		qStatisticsThroughputRawRead := swag.FormatInt64(qrStatisticsThroughputRawRead)
		if qStatisticsThroughputRawRead != "" {

			if err := r.SetQueryParam("statistics.throughput_raw.read", qStatisticsThroughputRawRead); err != nil {
				return err
			}
		}
	}

	if o.StatisticsThroughputRawTotalQueryParameter != nil {

		// query param statistics.throughput_raw.total
		var qrStatisticsThroughputRawTotal int64

		if o.StatisticsThroughputRawTotalQueryParameter != nil {
			qrStatisticsThroughputRawTotal = *o.StatisticsThroughputRawTotalQueryParameter
		}
		qStatisticsThroughputRawTotal := swag.FormatInt64(qrStatisticsThroughputRawTotal)
		if qStatisticsThroughputRawTotal != "" {

			if err := r.SetQueryParam("statistics.throughput_raw.total", qStatisticsThroughputRawTotal); err != nil {
				return err
			}
		}
	}

	if o.StatisticsThroughputRawWriteQueryParameter != nil {

		// query param statistics.throughput_raw.write
		var qrStatisticsThroughputRawWrite int64

		if o.StatisticsThroughputRawWriteQueryParameter != nil {
			qrStatisticsThroughputRawWrite = *o.StatisticsThroughputRawWriteQueryParameter
		}
		qStatisticsThroughputRawWrite := swag.FormatInt64(qrStatisticsThroughputRawWrite)
		if qStatisticsThroughputRawWrite != "" {

			if err := r.SetQueryParam("statistics.throughput_raw.write", qStatisticsThroughputRawWrite); err != nil {
				return err
			}
		}
	}

	if o.StatisticsTimestampQueryParameter != nil {

		// query param statistics.timestamp
		var qrStatisticsTimestamp string

		if o.StatisticsTimestampQueryParameter != nil {
			qrStatisticsTimestamp = *o.StatisticsTimestampQueryParameter
		}
		qStatisticsTimestamp := qrStatisticsTimestamp
		if qStatisticsTimestamp != "" {

			if err := r.SetQueryParam("statistics.timestamp", qStatisticsTimestamp); err != nil {
				return err
			}
		}
	}

	if o.SVMNameQueryParameter != nil {

		// query param svm.name
		var qrSvmName string

		if o.SVMNameQueryParameter != nil {
			qrSvmName = *o.SVMNameQueryParameter
		}
		qSvmName := qrSvmName
		if qSvmName != "" {

			if err := r.SetQueryParam("svm.name", qSvmName); err != nil {
				return err
			}
		}
	}

	if o.SVMUUIDQueryParameter != nil {

		// query param svm.uuid
		var qrSvmUUID string

		if o.SVMUUIDQueryParameter != nil {
			qrSvmUUID = *o.SVMUUIDQueryParameter
		}
		qSvmUUID := qrSvmUUID
		if qSvmUUID != "" {

			if err := r.SetQueryParam("svm.uuid", qSvmUUID); err != nil {
				return err
			}
		}
	}

	if o.UUIDQueryParameter != nil {

		// query param uuid
		var qrUUID string

		if o.UUIDQueryParameter != nil {
			qrUUID = *o.UUIDQueryParameter
		}
		qUUID := qrUUID
		if qUUID != "" {

			if err := r.SetQueryParam("uuid", qUUID); err != nil {
				return err
			}
		}
	}

	if o.WwnnQueryParameter != nil {

		// query param wwnn
		var qrWwnn string

		if o.WwnnQueryParameter != nil {
			qrWwnn = *o.WwnnQueryParameter
		}
		qWwnn := qrWwnn
		if qWwnn != "" {

			if err := r.SetQueryParam("wwnn", qWwnn); err != nil {
				return err
			}
		}
	}

	if o.WwpnQueryParameter != nil {

		// query param wwpn
		var qrWwpn string

		if o.WwpnQueryParameter != nil {
			qrWwpn = *o.WwpnQueryParameter
		}
		qWwpn := qrWwpn
		if qWwpn != "" {

			if err := r.SetQueryParam("wwpn", qWwpn); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamFcInterfaceCollectionGet binds the parameter fields
func (o *FcInterfaceCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.FieldsQueryParameter

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamFcInterfaceCollectionGet binds the parameter order_by
func (o *FcInterfaceCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderByQueryParameter

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}

// bindParamFcInterfaceCollectionGet binds the parameter recommend.fabrics.name
func (o *FcInterfaceCollectionGetParams) bindParamRecommendFabricsName(formats strfmt.Registry) []string {
	recommendFabricsNameIR := o.RecommendFabricsNameQueryParameter

	var recommendFabricsNameIC []string
	for _, recommendFabricsNameIIR := range recommendFabricsNameIR { // explode []string

		recommendFabricsNameIIV := recommendFabricsNameIIR // string as string
		recommendFabricsNameIC = append(recommendFabricsNameIC, recommendFabricsNameIIV)
	}

	// items.CollectionFormat: ""
	recommendFabricsNameIS := swag.JoinByFormat(recommendFabricsNameIC, "")

	return recommendFabricsNameIS
}

// bindParamFcInterfaceCollectionGet binds the parameter recommend.nodes.name
func (o *FcInterfaceCollectionGetParams) bindParamRecommendNodesName(formats strfmt.Registry) []string {
	recommendNodesNameIR := o.RecommendNodesNameQueryParameter

	var recommendNodesNameIC []string
	for _, recommendNodesNameIIR := range recommendNodesNameIR { // explode []string

		recommendNodesNameIIV := recommendNodesNameIIR // string as string
		recommendNodesNameIC = append(recommendNodesNameIC, recommendNodesNameIIV)
	}

	// items.CollectionFormat: ""
	recommendNodesNameIS := swag.JoinByFormat(recommendNodesNameIC, "")

	return recommendNodesNameIS
}

// bindParamFcInterfaceCollectionGet binds the parameter recommend.nodes.uuid
func (o *FcInterfaceCollectionGetParams) bindParamRecommendNodesUUID(formats strfmt.Registry) []string {
	recommendNodesUUIDIR := o.RecommendNodesUUIDQueryParameter

	var recommendNodesUUIDIC []string
	for _, recommendNodesUUIDIIR := range recommendNodesUUIDIR { // explode []string

		recommendNodesUUIDIIV := recommendNodesUUIDIIR // string as string
		recommendNodesUUIDIC = append(recommendNodesUUIDIC, recommendNodesUUIDIIV)
	}

	// items.CollectionFormat: ""
	recommendNodesUUIDIS := swag.JoinByFormat(recommendNodesUUIDIC, "")

	return recommendNodesUUIDIS
}

// bindParamFcInterfaceCollectionGet binds the parameter recommend.proposed.locations.port.uuid
func (o *FcInterfaceCollectionGetParams) bindParamRecommendProposedLocationsPortUUID(formats strfmt.Registry) []string {
	recommendProposedLocationsPortUUIDIR := o.RecommendProposedLocationsPortUUIDQueryParameter

	var recommendProposedLocationsPortUUIDIC []string
	for _, recommendProposedLocationsPortUUIDIIR := range recommendProposedLocationsPortUUIDIR { // explode []string

		recommendProposedLocationsPortUUIDIIV := recommendProposedLocationsPortUUIDIIR // string as string
		recommendProposedLocationsPortUUIDIC = append(recommendProposedLocationsPortUUIDIC, recommendProposedLocationsPortUUIDIIV)
	}

	// items.CollectionFormat: ""
	recommendProposedLocationsPortUUIDIS := swag.JoinByFormat(recommendProposedLocationsPortUUIDIC, "")

	return recommendProposedLocationsPortUUIDIS
}
