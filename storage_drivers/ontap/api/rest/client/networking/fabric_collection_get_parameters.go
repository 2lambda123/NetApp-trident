// Code generated by go-swagger; DO NOT EDIT.

package networking

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewFabricCollectionGetParams creates a new FabricCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewFabricCollectionGetParams() *FabricCollectionGetParams {
	return &FabricCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewFabricCollectionGetParamsWithTimeout creates a new FabricCollectionGetParams object
// with the ability to set a timeout on a request.
func NewFabricCollectionGetParamsWithTimeout(timeout time.Duration) *FabricCollectionGetParams {
	return &FabricCollectionGetParams{
		timeout: timeout,
	}
}

// NewFabricCollectionGetParamsWithContext creates a new FabricCollectionGetParams object
// with the ability to set a context for a request.
func NewFabricCollectionGetParamsWithContext(ctx context.Context) *FabricCollectionGetParams {
	return &FabricCollectionGetParams{
		Context: ctx,
	}
}

// NewFabricCollectionGetParamsWithHTTPClient creates a new FabricCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewFabricCollectionGetParamsWithHTTPClient(client *http.Client) *FabricCollectionGetParams {
	return &FabricCollectionGetParams{
		HTTPClient: client,
	}
}

/* FabricCollectionGetParams contains all the parameters to send to the API endpoint
   for the fabric collection get operation.

   Typically these are written to a http.Request.
*/
type FabricCollectionGetParams struct {

	/* CacheAge.

	   Filter by cache.age
	*/
	CacheAgeQueryParameter *string

	/* CacheIsCurrent.

	   Filter by cache.is_current
	*/
	CacheIsCurrentQueryParameter *bool

	/* CacheMaximumAge.

	   The maximum age of data in the Fibre Channel fabric cache before it should be refreshed from the fabric. The default is 15 minutes.

	   Format: iso8601
	   Default: "15 minutes"
	*/
	CacheMaximumAgeQueryParameter *string

	/* CacheUpdateTime.

	   Filter by cache.update_time
	*/
	CacheUpdateTimeQueryParameter *string

	/* ConnectionsClusterPortName.

	   Filter by connections.cluster_port.name
	*/
	ConnectionsClusterPortNameQueryParameter *string

	/* ConnectionsClusterPortNodeName.

	   Filter by connections.cluster_port.node.name
	*/
	ConnectionsClusterPortNodeNameQueryParameter *string

	/* ConnectionsClusterPortUUID.

	   Filter by connections.cluster_port.uuid
	*/
	ConnectionsClusterPortUUIDQueryParameter *string

	/* ConnectionsClusterPortWwpn.

	   Filter by connections.cluster_port.wwpn
	*/
	ConnectionsClusterPortWwpnQueryParameter *string

	/* ConnectionsSwitchPortWwpn.

	   Filter by connections.switch.port.wwpn
	*/
	ConnectionsSwitchPortWwpnQueryParameter *string

	/* ConnectionsSwitchWwn.

	   Filter by connections.switch.wwn
	*/
	ConnectionsSwitchWwnQueryParameter *string

	/* Fields.

	   Specify the fields to return.
	*/
	FieldsQueryParameter []string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecordsQueryParameter *int64

	/* Name.

	   Filter by name
	*/
	NameQueryParameter *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderByQueryParameter []string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecordsQueryParameter *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeoutQueryParameter *int64

	/* ZonesetName.

	   Filter by zoneset.name
	*/
	ZonesetNameQueryParameter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the fabric collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FabricCollectionGetParams) WithDefaults() *FabricCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the fabric collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FabricCollectionGetParams) SetDefaults() {
	var (
		cacheMaximumAgeQueryParameterDefault = string("15 minutes")

		returnRecordsQueryParameterDefault = bool(true)

		returnTimeoutQueryParameterDefault = int64(15)
	)

	val := FabricCollectionGetParams{
		CacheMaximumAgeQueryParameter: &cacheMaximumAgeQueryParameterDefault,
		ReturnRecordsQueryParameter:   &returnRecordsQueryParameterDefault,
		ReturnTimeoutQueryParameter:   &returnTimeoutQueryParameterDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the fabric collection get params
func (o *FabricCollectionGetParams) WithTimeout(timeout time.Duration) *FabricCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the fabric collection get params
func (o *FabricCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the fabric collection get params
func (o *FabricCollectionGetParams) WithContext(ctx context.Context) *FabricCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the fabric collection get params
func (o *FabricCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the fabric collection get params
func (o *FabricCollectionGetParams) WithHTTPClient(client *http.Client) *FabricCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the fabric collection get params
func (o *FabricCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCacheAgeQueryParameter adds the cacheAge to the fabric collection get params
func (o *FabricCollectionGetParams) WithCacheAgeQueryParameter(cacheAge *string) *FabricCollectionGetParams {
	o.SetCacheAgeQueryParameter(cacheAge)
	return o
}

// SetCacheAgeQueryParameter adds the cacheAge to the fabric collection get params
func (o *FabricCollectionGetParams) SetCacheAgeQueryParameter(cacheAge *string) {
	o.CacheAgeQueryParameter = cacheAge
}

// WithCacheIsCurrentQueryParameter adds the cacheIsCurrent to the fabric collection get params
func (o *FabricCollectionGetParams) WithCacheIsCurrentQueryParameter(cacheIsCurrent *bool) *FabricCollectionGetParams {
	o.SetCacheIsCurrentQueryParameter(cacheIsCurrent)
	return o
}

// SetCacheIsCurrentQueryParameter adds the cacheIsCurrent to the fabric collection get params
func (o *FabricCollectionGetParams) SetCacheIsCurrentQueryParameter(cacheIsCurrent *bool) {
	o.CacheIsCurrentQueryParameter = cacheIsCurrent
}

// WithCacheMaximumAgeQueryParameter adds the cacheMaximumAge to the fabric collection get params
func (o *FabricCollectionGetParams) WithCacheMaximumAgeQueryParameter(cacheMaximumAge *string) *FabricCollectionGetParams {
	o.SetCacheMaximumAgeQueryParameter(cacheMaximumAge)
	return o
}

// SetCacheMaximumAgeQueryParameter adds the cacheMaximumAge to the fabric collection get params
func (o *FabricCollectionGetParams) SetCacheMaximumAgeQueryParameter(cacheMaximumAge *string) {
	o.CacheMaximumAgeQueryParameter = cacheMaximumAge
}

// WithCacheUpdateTimeQueryParameter adds the cacheUpdateTime to the fabric collection get params
func (o *FabricCollectionGetParams) WithCacheUpdateTimeQueryParameter(cacheUpdateTime *string) *FabricCollectionGetParams {
	o.SetCacheUpdateTimeQueryParameter(cacheUpdateTime)
	return o
}

// SetCacheUpdateTimeQueryParameter adds the cacheUpdateTime to the fabric collection get params
func (o *FabricCollectionGetParams) SetCacheUpdateTimeQueryParameter(cacheUpdateTime *string) {
	o.CacheUpdateTimeQueryParameter = cacheUpdateTime
}

// WithConnectionsClusterPortNameQueryParameter adds the connectionsClusterPortName to the fabric collection get params
func (o *FabricCollectionGetParams) WithConnectionsClusterPortNameQueryParameter(connectionsClusterPortName *string) *FabricCollectionGetParams {
	o.SetConnectionsClusterPortNameQueryParameter(connectionsClusterPortName)
	return o
}

// SetConnectionsClusterPortNameQueryParameter adds the connectionsClusterPortName to the fabric collection get params
func (o *FabricCollectionGetParams) SetConnectionsClusterPortNameQueryParameter(connectionsClusterPortName *string) {
	o.ConnectionsClusterPortNameQueryParameter = connectionsClusterPortName
}

// WithConnectionsClusterPortNodeNameQueryParameter adds the connectionsClusterPortNodeName to the fabric collection get params
func (o *FabricCollectionGetParams) WithConnectionsClusterPortNodeNameQueryParameter(connectionsClusterPortNodeName *string) *FabricCollectionGetParams {
	o.SetConnectionsClusterPortNodeNameQueryParameter(connectionsClusterPortNodeName)
	return o
}

// SetConnectionsClusterPortNodeNameQueryParameter adds the connectionsClusterPortNodeName to the fabric collection get params
func (o *FabricCollectionGetParams) SetConnectionsClusterPortNodeNameQueryParameter(connectionsClusterPortNodeName *string) {
	o.ConnectionsClusterPortNodeNameQueryParameter = connectionsClusterPortNodeName
}

// WithConnectionsClusterPortUUIDQueryParameter adds the connectionsClusterPortUUID to the fabric collection get params
func (o *FabricCollectionGetParams) WithConnectionsClusterPortUUIDQueryParameter(connectionsClusterPortUUID *string) *FabricCollectionGetParams {
	o.SetConnectionsClusterPortUUIDQueryParameter(connectionsClusterPortUUID)
	return o
}

// SetConnectionsClusterPortUUIDQueryParameter adds the connectionsClusterPortUuid to the fabric collection get params
func (o *FabricCollectionGetParams) SetConnectionsClusterPortUUIDQueryParameter(connectionsClusterPortUUID *string) {
	o.ConnectionsClusterPortUUIDQueryParameter = connectionsClusterPortUUID
}

// WithConnectionsClusterPortWwpnQueryParameter adds the connectionsClusterPortWwpn to the fabric collection get params
func (o *FabricCollectionGetParams) WithConnectionsClusterPortWwpnQueryParameter(connectionsClusterPortWwpn *string) *FabricCollectionGetParams {
	o.SetConnectionsClusterPortWwpnQueryParameter(connectionsClusterPortWwpn)
	return o
}

// SetConnectionsClusterPortWwpnQueryParameter adds the connectionsClusterPortWwpn to the fabric collection get params
func (o *FabricCollectionGetParams) SetConnectionsClusterPortWwpnQueryParameter(connectionsClusterPortWwpn *string) {
	o.ConnectionsClusterPortWwpnQueryParameter = connectionsClusterPortWwpn
}

// WithConnectionsSwitchPortWwpnQueryParameter adds the connectionsSwitchPortWwpn to the fabric collection get params
func (o *FabricCollectionGetParams) WithConnectionsSwitchPortWwpnQueryParameter(connectionsSwitchPortWwpn *string) *FabricCollectionGetParams {
	o.SetConnectionsSwitchPortWwpnQueryParameter(connectionsSwitchPortWwpn)
	return o
}

// SetConnectionsSwitchPortWwpnQueryParameter adds the connectionsSwitchPortWwpn to the fabric collection get params
func (o *FabricCollectionGetParams) SetConnectionsSwitchPortWwpnQueryParameter(connectionsSwitchPortWwpn *string) {
	o.ConnectionsSwitchPortWwpnQueryParameter = connectionsSwitchPortWwpn
}

// WithConnectionsSwitchWwnQueryParameter adds the connectionsSwitchWwn to the fabric collection get params
func (o *FabricCollectionGetParams) WithConnectionsSwitchWwnQueryParameter(connectionsSwitchWwn *string) *FabricCollectionGetParams {
	o.SetConnectionsSwitchWwnQueryParameter(connectionsSwitchWwn)
	return o
}

// SetConnectionsSwitchWwnQueryParameter adds the connectionsSwitchWwn to the fabric collection get params
func (o *FabricCollectionGetParams) SetConnectionsSwitchWwnQueryParameter(connectionsSwitchWwn *string) {
	o.ConnectionsSwitchWwnQueryParameter = connectionsSwitchWwn
}

// WithFieldsQueryParameter adds the fields to the fabric collection get params
func (o *FabricCollectionGetParams) WithFieldsQueryParameter(fields []string) *FabricCollectionGetParams {
	o.SetFieldsQueryParameter(fields)
	return o
}

// SetFieldsQueryParameter adds the fields to the fabric collection get params
func (o *FabricCollectionGetParams) SetFieldsQueryParameter(fields []string) {
	o.FieldsQueryParameter = fields
}

// WithMaxRecordsQueryParameter adds the maxRecords to the fabric collection get params
func (o *FabricCollectionGetParams) WithMaxRecordsQueryParameter(maxRecords *int64) *FabricCollectionGetParams {
	o.SetMaxRecordsQueryParameter(maxRecords)
	return o
}

// SetMaxRecordsQueryParameter adds the maxRecords to the fabric collection get params
func (o *FabricCollectionGetParams) SetMaxRecordsQueryParameter(maxRecords *int64) {
	o.MaxRecordsQueryParameter = maxRecords
}

// WithNameQueryParameter adds the name to the fabric collection get params
func (o *FabricCollectionGetParams) WithNameQueryParameter(name *string) *FabricCollectionGetParams {
	o.SetNameQueryParameter(name)
	return o
}

// SetNameQueryParameter adds the name to the fabric collection get params
func (o *FabricCollectionGetParams) SetNameQueryParameter(name *string) {
	o.NameQueryParameter = name
}

// WithOrderByQueryParameter adds the orderBy to the fabric collection get params
func (o *FabricCollectionGetParams) WithOrderByQueryParameter(orderBy []string) *FabricCollectionGetParams {
	o.SetOrderByQueryParameter(orderBy)
	return o
}

// SetOrderByQueryParameter adds the orderBy to the fabric collection get params
func (o *FabricCollectionGetParams) SetOrderByQueryParameter(orderBy []string) {
	o.OrderByQueryParameter = orderBy
}

// WithReturnRecordsQueryParameter adds the returnRecords to the fabric collection get params
func (o *FabricCollectionGetParams) WithReturnRecordsQueryParameter(returnRecords *bool) *FabricCollectionGetParams {
	o.SetReturnRecordsQueryParameter(returnRecords)
	return o
}

// SetReturnRecordsQueryParameter adds the returnRecords to the fabric collection get params
func (o *FabricCollectionGetParams) SetReturnRecordsQueryParameter(returnRecords *bool) {
	o.ReturnRecordsQueryParameter = returnRecords
}

// WithReturnTimeoutQueryParameter adds the returnTimeout to the fabric collection get params
func (o *FabricCollectionGetParams) WithReturnTimeoutQueryParameter(returnTimeout *int64) *FabricCollectionGetParams {
	o.SetReturnTimeoutQueryParameter(returnTimeout)
	return o
}

// SetReturnTimeoutQueryParameter adds the returnTimeout to the fabric collection get params
func (o *FabricCollectionGetParams) SetReturnTimeoutQueryParameter(returnTimeout *int64) {
	o.ReturnTimeoutQueryParameter = returnTimeout
}

// WithZonesetNameQueryParameter adds the zonesetName to the fabric collection get params
func (o *FabricCollectionGetParams) WithZonesetNameQueryParameter(zonesetName *string) *FabricCollectionGetParams {
	o.SetZonesetNameQueryParameter(zonesetName)
	return o
}

// SetZonesetNameQueryParameter adds the zonesetName to the fabric collection get params
func (o *FabricCollectionGetParams) SetZonesetNameQueryParameter(zonesetName *string) {
	o.ZonesetNameQueryParameter = zonesetName
}

// WriteToRequest writes these params to a swagger request
func (o *FabricCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CacheAgeQueryParameter != nil {

		// query param cache.age
		var qrCacheAge string

		if o.CacheAgeQueryParameter != nil {
			qrCacheAge = *o.CacheAgeQueryParameter
		}
		qCacheAge := qrCacheAge
		if qCacheAge != "" {

			if err := r.SetQueryParam("cache.age", qCacheAge); err != nil {
				return err
			}
		}
	}

	if o.CacheIsCurrentQueryParameter != nil {

		// query param cache.is_current
		var qrCacheIsCurrent bool

		if o.CacheIsCurrentQueryParameter != nil {
			qrCacheIsCurrent = *o.CacheIsCurrentQueryParameter
		}
		qCacheIsCurrent := swag.FormatBool(qrCacheIsCurrent)
		if qCacheIsCurrent != "" {

			if err := r.SetQueryParam("cache.is_current", qCacheIsCurrent); err != nil {
				return err
			}
		}
	}

	if o.CacheMaximumAgeQueryParameter != nil {

		// query param cache.maximum_age
		var qrCacheMaximumAge string

		if o.CacheMaximumAgeQueryParameter != nil {
			qrCacheMaximumAge = *o.CacheMaximumAgeQueryParameter
		}
		qCacheMaximumAge := qrCacheMaximumAge
		if qCacheMaximumAge != "" {

			if err := r.SetQueryParam("cache.maximum_age", qCacheMaximumAge); err != nil {
				return err
			}
		}
	}

	if o.CacheUpdateTimeQueryParameter != nil {

		// query param cache.update_time
		var qrCacheUpdateTime string

		if o.CacheUpdateTimeQueryParameter != nil {
			qrCacheUpdateTime = *o.CacheUpdateTimeQueryParameter
		}
		qCacheUpdateTime := qrCacheUpdateTime
		if qCacheUpdateTime != "" {

			if err := r.SetQueryParam("cache.update_time", qCacheUpdateTime); err != nil {
				return err
			}
		}
	}

	if o.ConnectionsClusterPortNameQueryParameter != nil {

		// query param connections.cluster_port.name
		var qrConnectionsClusterPortName string

		if o.ConnectionsClusterPortNameQueryParameter != nil {
			qrConnectionsClusterPortName = *o.ConnectionsClusterPortNameQueryParameter
		}
		qConnectionsClusterPortName := qrConnectionsClusterPortName
		if qConnectionsClusterPortName != "" {

			if err := r.SetQueryParam("connections.cluster_port.name", qConnectionsClusterPortName); err != nil {
				return err
			}
		}
	}

	if o.ConnectionsClusterPortNodeNameQueryParameter != nil {

		// query param connections.cluster_port.node.name
		var qrConnectionsClusterPortNodeName string

		if o.ConnectionsClusterPortNodeNameQueryParameter != nil {
			qrConnectionsClusterPortNodeName = *o.ConnectionsClusterPortNodeNameQueryParameter
		}
		qConnectionsClusterPortNodeName := qrConnectionsClusterPortNodeName
		if qConnectionsClusterPortNodeName != "" {

			if err := r.SetQueryParam("connections.cluster_port.node.name", qConnectionsClusterPortNodeName); err != nil {
				return err
			}
		}
	}

	if o.ConnectionsClusterPortUUIDQueryParameter != nil {

		// query param connections.cluster_port.uuid
		var qrConnectionsClusterPortUUID string

		if o.ConnectionsClusterPortUUIDQueryParameter != nil {
			qrConnectionsClusterPortUUID = *o.ConnectionsClusterPortUUIDQueryParameter
		}
		qConnectionsClusterPortUUID := qrConnectionsClusterPortUUID
		if qConnectionsClusterPortUUID != "" {

			if err := r.SetQueryParam("connections.cluster_port.uuid", qConnectionsClusterPortUUID); err != nil {
				return err
			}
		}
	}

	if o.ConnectionsClusterPortWwpnQueryParameter != nil {

		// query param connections.cluster_port.wwpn
		var qrConnectionsClusterPortWwpn string

		if o.ConnectionsClusterPortWwpnQueryParameter != nil {
			qrConnectionsClusterPortWwpn = *o.ConnectionsClusterPortWwpnQueryParameter
		}
		qConnectionsClusterPortWwpn := qrConnectionsClusterPortWwpn
		if qConnectionsClusterPortWwpn != "" {

			if err := r.SetQueryParam("connections.cluster_port.wwpn", qConnectionsClusterPortWwpn); err != nil {
				return err
			}
		}
	}

	if o.ConnectionsSwitchPortWwpnQueryParameter != nil {

		// query param connections.switch.port.wwpn
		var qrConnectionsSwitchPortWwpn string

		if o.ConnectionsSwitchPortWwpnQueryParameter != nil {
			qrConnectionsSwitchPortWwpn = *o.ConnectionsSwitchPortWwpnQueryParameter
		}
		qConnectionsSwitchPortWwpn := qrConnectionsSwitchPortWwpn
		if qConnectionsSwitchPortWwpn != "" {

			if err := r.SetQueryParam("connections.switch.port.wwpn", qConnectionsSwitchPortWwpn); err != nil {
				return err
			}
		}
	}

	if o.ConnectionsSwitchWwnQueryParameter != nil {

		// query param connections.switch.wwn
		var qrConnectionsSwitchWwn string

		if o.ConnectionsSwitchWwnQueryParameter != nil {
			qrConnectionsSwitchWwn = *o.ConnectionsSwitchWwnQueryParameter
		}
		qConnectionsSwitchWwn := qrConnectionsSwitchWwn
		if qConnectionsSwitchWwn != "" {

			if err := r.SetQueryParam("connections.switch.wwn", qConnectionsSwitchWwn); err != nil {
				return err
			}
		}
	}

	if o.FieldsQueryParameter != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.MaxRecordsQueryParameter != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecordsQueryParameter != nil {
			qrMaxRecords = *o.MaxRecordsQueryParameter
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.NameQueryParameter != nil {

		// query param name
		var qrName string

		if o.NameQueryParameter != nil {
			qrName = *o.NameQueryParameter
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.OrderByQueryParameter != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.ReturnRecordsQueryParameter != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecordsQueryParameter != nil {
			qrReturnRecords = *o.ReturnRecordsQueryParameter
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeoutQueryParameter != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeoutQueryParameter != nil {
			qrReturnTimeout = *o.ReturnTimeoutQueryParameter
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.ZonesetNameQueryParameter != nil {

		// query param zoneset.name
		var qrZonesetName string

		if o.ZonesetNameQueryParameter != nil {
			qrZonesetName = *o.ZonesetNameQueryParameter
		}
		qZonesetName := qrZonesetName
		if qZonesetName != "" {

			if err := r.SetQueryParam("zoneset.name", qZonesetName); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamFabricCollectionGet binds the parameter fields
func (o *FabricCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.FieldsQueryParameter

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamFabricCollectionGet binds the parameter order_by
func (o *FabricCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderByQueryParameter

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
