// Code generated by go-swagger; DO NOT EDIT.

package n_a_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewNfsCollectionPerformanceMetricsGetParams creates a new NfsCollectionPerformanceMetricsGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewNfsCollectionPerformanceMetricsGetParams() *NfsCollectionPerformanceMetricsGetParams {
	return &NfsCollectionPerformanceMetricsGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewNfsCollectionPerformanceMetricsGetParamsWithTimeout creates a new NfsCollectionPerformanceMetricsGetParams object
// with the ability to set a timeout on a request.
func NewNfsCollectionPerformanceMetricsGetParamsWithTimeout(timeout time.Duration) *NfsCollectionPerformanceMetricsGetParams {
	return &NfsCollectionPerformanceMetricsGetParams{
		timeout: timeout,
	}
}

// NewNfsCollectionPerformanceMetricsGetParamsWithContext creates a new NfsCollectionPerformanceMetricsGetParams object
// with the ability to set a context for a request.
func NewNfsCollectionPerformanceMetricsGetParamsWithContext(ctx context.Context) *NfsCollectionPerformanceMetricsGetParams {
	return &NfsCollectionPerformanceMetricsGetParams{
		Context: ctx,
	}
}

// NewNfsCollectionPerformanceMetricsGetParamsWithHTTPClient creates a new NfsCollectionPerformanceMetricsGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewNfsCollectionPerformanceMetricsGetParamsWithHTTPClient(client *http.Client) *NfsCollectionPerformanceMetricsGetParams {
	return &NfsCollectionPerformanceMetricsGetParams{
		HTTPClient: client,
	}
}

/*
NfsCollectionPerformanceMetricsGetParams contains all the parameters to send to the API endpoint

	for the nfs collection performance metrics get operation.

	Typically these are written to a http.Request.
*/
type NfsCollectionPerformanceMetricsGetParams struct {

	/* Fields.

	   Specify the fields to return.
	*/
	FieldsQueryParameter []string

	/* Interval.

	     The time range for the data. Examples can be 1h, 1d, 1m, 1w, 1y.
	The period for each time range is as follows:
	* 1h: Metrics over the most recent hour sampled over 15 seconds.
	* 1d: Metrics over the most recent day sampled over 5 minutes.
	* 1w: Metrics over the most recent week sampled over 30 minutes.
	* 1m: Metrics over the most recent month sampled over 2 hours.
	* 1y: Metrics over the most recent year sampled over a day.


	     Default: "1h"
	*/
	IntervalQueryParameter *string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecordsQueryParameter *int64

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderByQueryParameter []string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecordsQueryParameter *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeoutQueryParameter *int64

	/* SvmUUID.

	   Unique identifier of the SVM.
	*/
	SVMUUIDPathParameter string

	/* Timestamp.

	   Filter by timestamp
	*/
	TimestampQueryParameter *string

	/* V3Duration.

	   Filter by v3.duration
	*/
	V3DurationQueryParameter *string

	/* V3IopsOther.

	   Filter by v3.iops.other
	*/
	V3IopsOtherQueryParameter *int64

	/* V3IopsRead.

	   Filter by v3.iops.read
	*/
	V3IopsReadQueryParameter *int64

	/* V3IopsTotal.

	   Filter by v3.iops.total
	*/
	V3IopsTotalQueryParameter *int64

	/* V3IopsWrite.

	   Filter by v3.iops.write
	*/
	V3IopsWriteQueryParameter *int64

	/* V3LatencyOther.

	   Filter by v3.latency.other
	*/
	V3LatencyOtherQueryParameter *int64

	/* V3LatencyRead.

	   Filter by v3.latency.read
	*/
	V3LatencyReadQueryParameter *int64

	/* V3LatencyTotal.

	   Filter by v3.latency.total
	*/
	V3LatencyTotalQueryParameter *int64

	/* V3LatencyWrite.

	   Filter by v3.latency.write
	*/
	V3LatencyWriteQueryParameter *int64

	/* V3Status.

	   Filter by v3.status
	*/
	V3StatusQueryParameter *string

	/* V3ThroughputRead.

	   Filter by v3.throughput.read
	*/
	V3ThroughputReadQueryParameter *int64

	/* V3ThroughputTotal.

	   Filter by v3.throughput.total
	*/
	V3ThroughputTotalQueryParameter *int64

	/* V3ThroughputWrite.

	   Filter by v3.throughput.write
	*/
	V3ThroughputWriteQueryParameter *int64

	/* V4Duration.

	   Filter by v4.duration
	*/
	V4DurationQueryParameter *string

	/* V4IopsOther.

	   Filter by v4.iops.other
	*/
	V4IopsOtherQueryParameter *int64

	/* V4IopsRead.

	   Filter by v4.iops.read
	*/
	V4IopsReadQueryParameter *int64

	/* V4IopsTotal.

	   Filter by v4.iops.total
	*/
	V4IopsTotalQueryParameter *int64

	/* V4IopsWrite.

	   Filter by v4.iops.write
	*/
	V4IopsWriteQueryParameter *int64

	/* V4LatencyOther.

	   Filter by v4.latency.other
	*/
	V4LatencyOtherQueryParameter *int64

	/* V4LatencyRead.

	   Filter by v4.latency.read
	*/
	V4LatencyReadQueryParameter *int64

	/* V4LatencyTotal.

	   Filter by v4.latency.total
	*/
	V4LatencyTotalQueryParameter *int64

	/* V4LatencyWrite.

	   Filter by v4.latency.write
	*/
	V4LatencyWriteQueryParameter *int64

	/* V4Status.

	   Filter by v4.status
	*/
	V4StatusQueryParameter *string

	/* V4ThroughputRead.

	   Filter by v4.throughput.read
	*/
	V4ThroughputReadQueryParameter *int64

	/* V4ThroughputTotal.

	   Filter by v4.throughput.total
	*/
	V4ThroughputTotalQueryParameter *int64

	/* V4ThroughputWrite.

	   Filter by v4.throughput.write
	*/
	V4ThroughputWriteQueryParameter *int64

	/* V41Duration.

	   Filter by v41.duration
	*/
	V41DurationQueryParameter *string

	/* V41IopsOther.

	   Filter by v41.iops.other
	*/
	V41IopsOtherQueryParameter *int64

	/* V41IopsRead.

	   Filter by v41.iops.read
	*/
	V41IopsReadQueryParameter *int64

	/* V41IopsTotal.

	   Filter by v41.iops.total
	*/
	V41IopsTotalQueryParameter *int64

	/* V41IopsWrite.

	   Filter by v41.iops.write
	*/
	V41IopsWriteQueryParameter *int64

	/* V41LatencyOther.

	   Filter by v41.latency.other
	*/
	V41LatencyOtherQueryParameter *int64

	/* V41LatencyRead.

	   Filter by v41.latency.read
	*/
	V41LatencyReadQueryParameter *int64

	/* V41LatencyTotal.

	   Filter by v41.latency.total
	*/
	V41LatencyTotalQueryParameter *int64

	/* V41LatencyWrite.

	   Filter by v41.latency.write
	*/
	V41LatencyWriteQueryParameter *int64

	/* V41Status.

	   Filter by v41.status
	*/
	V41StatusQueryParameter *string

	/* V41ThroughputRead.

	   Filter by v41.throughput.read
	*/
	V41ThroughputReadQueryParameter *int64

	/* V41ThroughputTotal.

	   Filter by v41.throughput.total
	*/
	V41ThroughputTotalQueryParameter *int64

	/* V41ThroughputWrite.

	   Filter by v41.throughput.write
	*/
	V41ThroughputWriteQueryParameter *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the nfs collection performance metrics get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NfsCollectionPerformanceMetricsGetParams) WithDefaults() *NfsCollectionPerformanceMetricsGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the nfs collection performance metrics get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NfsCollectionPerformanceMetricsGetParams) SetDefaults() {
	var (
		intervalQueryParameterDefault = string("1h")

		returnRecordsQueryParameterDefault = bool(true)

		returnTimeoutQueryParameterDefault = int64(15)
	)

	val := NfsCollectionPerformanceMetricsGetParams{
		IntervalQueryParameter:      &intervalQueryParameterDefault,
		ReturnRecordsQueryParameter: &returnRecordsQueryParameterDefault,
		ReturnTimeoutQueryParameter: &returnTimeoutQueryParameterDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) WithTimeout(timeout time.Duration) *NfsCollectionPerformanceMetricsGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) WithContext(ctx context.Context) *NfsCollectionPerformanceMetricsGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) WithHTTPClient(client *http.Client) *NfsCollectionPerformanceMetricsGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFieldsQueryParameter adds the fields to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) WithFieldsQueryParameter(fields []string) *NfsCollectionPerformanceMetricsGetParams {
	o.SetFieldsQueryParameter(fields)
	return o
}

// SetFieldsQueryParameter adds the fields to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) SetFieldsQueryParameter(fields []string) {
	o.FieldsQueryParameter = fields
}

// WithIntervalQueryParameter adds the interval to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) WithIntervalQueryParameter(interval *string) *NfsCollectionPerformanceMetricsGetParams {
	o.SetIntervalQueryParameter(interval)
	return o
}

// SetIntervalQueryParameter adds the interval to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) SetIntervalQueryParameter(interval *string) {
	o.IntervalQueryParameter = interval
}

// WithMaxRecordsQueryParameter adds the maxRecords to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) WithMaxRecordsQueryParameter(maxRecords *int64) *NfsCollectionPerformanceMetricsGetParams {
	o.SetMaxRecordsQueryParameter(maxRecords)
	return o
}

// SetMaxRecordsQueryParameter adds the maxRecords to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) SetMaxRecordsQueryParameter(maxRecords *int64) {
	o.MaxRecordsQueryParameter = maxRecords
}

// WithOrderByQueryParameter adds the orderBy to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) WithOrderByQueryParameter(orderBy []string) *NfsCollectionPerformanceMetricsGetParams {
	o.SetOrderByQueryParameter(orderBy)
	return o
}

// SetOrderByQueryParameter adds the orderBy to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) SetOrderByQueryParameter(orderBy []string) {
	o.OrderByQueryParameter = orderBy
}

// WithReturnRecordsQueryParameter adds the returnRecords to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) WithReturnRecordsQueryParameter(returnRecords *bool) *NfsCollectionPerformanceMetricsGetParams {
	o.SetReturnRecordsQueryParameter(returnRecords)
	return o
}

// SetReturnRecordsQueryParameter adds the returnRecords to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) SetReturnRecordsQueryParameter(returnRecords *bool) {
	o.ReturnRecordsQueryParameter = returnRecords
}

// WithReturnTimeoutQueryParameter adds the returnTimeout to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) WithReturnTimeoutQueryParameter(returnTimeout *int64) *NfsCollectionPerformanceMetricsGetParams {
	o.SetReturnTimeoutQueryParameter(returnTimeout)
	return o
}

// SetReturnTimeoutQueryParameter adds the returnTimeout to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) SetReturnTimeoutQueryParameter(returnTimeout *int64) {
	o.ReturnTimeoutQueryParameter = returnTimeout
}

// WithSVMUUIDPathParameter adds the svmUUID to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) WithSVMUUIDPathParameter(svmUUID string) *NfsCollectionPerformanceMetricsGetParams {
	o.SetSVMUUIDPathParameter(svmUUID)
	return o
}

// SetSVMUUIDPathParameter adds the svmUuid to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) SetSVMUUIDPathParameter(svmUUID string) {
	o.SVMUUIDPathParameter = svmUUID
}

// WithTimestampQueryParameter adds the timestamp to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) WithTimestampQueryParameter(timestamp *string) *NfsCollectionPerformanceMetricsGetParams {
	o.SetTimestampQueryParameter(timestamp)
	return o
}

// SetTimestampQueryParameter adds the timestamp to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) SetTimestampQueryParameter(timestamp *string) {
	o.TimestampQueryParameter = timestamp
}

// WithV3DurationQueryParameter adds the v3Duration to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) WithV3DurationQueryParameter(v3Duration *string) *NfsCollectionPerformanceMetricsGetParams {
	o.SetV3DurationQueryParameter(v3Duration)
	return o
}

// SetV3DurationQueryParameter adds the v3Duration to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) SetV3DurationQueryParameter(v3Duration *string) {
	o.V3DurationQueryParameter = v3Duration
}

// WithV3IopsOtherQueryParameter adds the v3IopsOther to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) WithV3IopsOtherQueryParameter(v3IopsOther *int64) *NfsCollectionPerformanceMetricsGetParams {
	o.SetV3IopsOtherQueryParameter(v3IopsOther)
	return o
}

// SetV3IopsOtherQueryParameter adds the v3IopsOther to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) SetV3IopsOtherQueryParameter(v3IopsOther *int64) {
	o.V3IopsOtherQueryParameter = v3IopsOther
}

// WithV3IopsReadQueryParameter adds the v3IopsRead to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) WithV3IopsReadQueryParameter(v3IopsRead *int64) *NfsCollectionPerformanceMetricsGetParams {
	o.SetV3IopsReadQueryParameter(v3IopsRead)
	return o
}

// SetV3IopsReadQueryParameter adds the v3IopsRead to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) SetV3IopsReadQueryParameter(v3IopsRead *int64) {
	o.V3IopsReadQueryParameter = v3IopsRead
}

// WithV3IopsTotalQueryParameter adds the v3IopsTotal to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) WithV3IopsTotalQueryParameter(v3IopsTotal *int64) *NfsCollectionPerformanceMetricsGetParams {
	o.SetV3IopsTotalQueryParameter(v3IopsTotal)
	return o
}

// SetV3IopsTotalQueryParameter adds the v3IopsTotal to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) SetV3IopsTotalQueryParameter(v3IopsTotal *int64) {
	o.V3IopsTotalQueryParameter = v3IopsTotal
}

// WithV3IopsWriteQueryParameter adds the v3IopsWrite to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) WithV3IopsWriteQueryParameter(v3IopsWrite *int64) *NfsCollectionPerformanceMetricsGetParams {
	o.SetV3IopsWriteQueryParameter(v3IopsWrite)
	return o
}

// SetV3IopsWriteQueryParameter adds the v3IopsWrite to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) SetV3IopsWriteQueryParameter(v3IopsWrite *int64) {
	o.V3IopsWriteQueryParameter = v3IopsWrite
}

// WithV3LatencyOtherQueryParameter adds the v3LatencyOther to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) WithV3LatencyOtherQueryParameter(v3LatencyOther *int64) *NfsCollectionPerformanceMetricsGetParams {
	o.SetV3LatencyOtherQueryParameter(v3LatencyOther)
	return o
}

// SetV3LatencyOtherQueryParameter adds the v3LatencyOther to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) SetV3LatencyOtherQueryParameter(v3LatencyOther *int64) {
	o.V3LatencyOtherQueryParameter = v3LatencyOther
}

// WithV3LatencyReadQueryParameter adds the v3LatencyRead to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) WithV3LatencyReadQueryParameter(v3LatencyRead *int64) *NfsCollectionPerformanceMetricsGetParams {
	o.SetV3LatencyReadQueryParameter(v3LatencyRead)
	return o
}

// SetV3LatencyReadQueryParameter adds the v3LatencyRead to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) SetV3LatencyReadQueryParameter(v3LatencyRead *int64) {
	o.V3LatencyReadQueryParameter = v3LatencyRead
}

// WithV3LatencyTotalQueryParameter adds the v3LatencyTotal to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) WithV3LatencyTotalQueryParameter(v3LatencyTotal *int64) *NfsCollectionPerformanceMetricsGetParams {
	o.SetV3LatencyTotalQueryParameter(v3LatencyTotal)
	return o
}

// SetV3LatencyTotalQueryParameter adds the v3LatencyTotal to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) SetV3LatencyTotalQueryParameter(v3LatencyTotal *int64) {
	o.V3LatencyTotalQueryParameter = v3LatencyTotal
}

// WithV3LatencyWriteQueryParameter adds the v3LatencyWrite to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) WithV3LatencyWriteQueryParameter(v3LatencyWrite *int64) *NfsCollectionPerformanceMetricsGetParams {
	o.SetV3LatencyWriteQueryParameter(v3LatencyWrite)
	return o
}

// SetV3LatencyWriteQueryParameter adds the v3LatencyWrite to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) SetV3LatencyWriteQueryParameter(v3LatencyWrite *int64) {
	o.V3LatencyWriteQueryParameter = v3LatencyWrite
}

// WithV3StatusQueryParameter adds the v3Status to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) WithV3StatusQueryParameter(v3Status *string) *NfsCollectionPerformanceMetricsGetParams {
	o.SetV3StatusQueryParameter(v3Status)
	return o
}

// SetV3StatusQueryParameter adds the v3Status to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) SetV3StatusQueryParameter(v3Status *string) {
	o.V3StatusQueryParameter = v3Status
}

// WithV3ThroughputReadQueryParameter adds the v3ThroughputRead to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) WithV3ThroughputReadQueryParameter(v3ThroughputRead *int64) *NfsCollectionPerformanceMetricsGetParams {
	o.SetV3ThroughputReadQueryParameter(v3ThroughputRead)
	return o
}

// SetV3ThroughputReadQueryParameter adds the v3ThroughputRead to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) SetV3ThroughputReadQueryParameter(v3ThroughputRead *int64) {
	o.V3ThroughputReadQueryParameter = v3ThroughputRead
}

// WithV3ThroughputTotalQueryParameter adds the v3ThroughputTotal to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) WithV3ThroughputTotalQueryParameter(v3ThroughputTotal *int64) *NfsCollectionPerformanceMetricsGetParams {
	o.SetV3ThroughputTotalQueryParameter(v3ThroughputTotal)
	return o
}

// SetV3ThroughputTotalQueryParameter adds the v3ThroughputTotal to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) SetV3ThroughputTotalQueryParameter(v3ThroughputTotal *int64) {
	o.V3ThroughputTotalQueryParameter = v3ThroughputTotal
}

// WithV3ThroughputWriteQueryParameter adds the v3ThroughputWrite to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) WithV3ThroughputWriteQueryParameter(v3ThroughputWrite *int64) *NfsCollectionPerformanceMetricsGetParams {
	o.SetV3ThroughputWriteQueryParameter(v3ThroughputWrite)
	return o
}

// SetV3ThroughputWriteQueryParameter adds the v3ThroughputWrite to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) SetV3ThroughputWriteQueryParameter(v3ThroughputWrite *int64) {
	o.V3ThroughputWriteQueryParameter = v3ThroughputWrite
}

// WithV4DurationQueryParameter adds the v4Duration to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) WithV4DurationQueryParameter(v4Duration *string) *NfsCollectionPerformanceMetricsGetParams {
	o.SetV4DurationQueryParameter(v4Duration)
	return o
}

// SetV4DurationQueryParameter adds the v4Duration to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) SetV4DurationQueryParameter(v4Duration *string) {
	o.V4DurationQueryParameter = v4Duration
}

// WithV4IopsOtherQueryParameter adds the v4IopsOther to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) WithV4IopsOtherQueryParameter(v4IopsOther *int64) *NfsCollectionPerformanceMetricsGetParams {
	o.SetV4IopsOtherQueryParameter(v4IopsOther)
	return o
}

// SetV4IopsOtherQueryParameter adds the v4IopsOther to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) SetV4IopsOtherQueryParameter(v4IopsOther *int64) {
	o.V4IopsOtherQueryParameter = v4IopsOther
}

// WithV4IopsReadQueryParameter adds the v4IopsRead to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) WithV4IopsReadQueryParameter(v4IopsRead *int64) *NfsCollectionPerformanceMetricsGetParams {
	o.SetV4IopsReadQueryParameter(v4IopsRead)
	return o
}

// SetV4IopsReadQueryParameter adds the v4IopsRead to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) SetV4IopsReadQueryParameter(v4IopsRead *int64) {
	o.V4IopsReadQueryParameter = v4IopsRead
}

// WithV4IopsTotalQueryParameter adds the v4IopsTotal to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) WithV4IopsTotalQueryParameter(v4IopsTotal *int64) *NfsCollectionPerformanceMetricsGetParams {
	o.SetV4IopsTotalQueryParameter(v4IopsTotal)
	return o
}

// SetV4IopsTotalQueryParameter adds the v4IopsTotal to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) SetV4IopsTotalQueryParameter(v4IopsTotal *int64) {
	o.V4IopsTotalQueryParameter = v4IopsTotal
}

// WithV4IopsWriteQueryParameter adds the v4IopsWrite to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) WithV4IopsWriteQueryParameter(v4IopsWrite *int64) *NfsCollectionPerformanceMetricsGetParams {
	o.SetV4IopsWriteQueryParameter(v4IopsWrite)
	return o
}

// SetV4IopsWriteQueryParameter adds the v4IopsWrite to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) SetV4IopsWriteQueryParameter(v4IopsWrite *int64) {
	o.V4IopsWriteQueryParameter = v4IopsWrite
}

// WithV4LatencyOtherQueryParameter adds the v4LatencyOther to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) WithV4LatencyOtherQueryParameter(v4LatencyOther *int64) *NfsCollectionPerformanceMetricsGetParams {
	o.SetV4LatencyOtherQueryParameter(v4LatencyOther)
	return o
}

// SetV4LatencyOtherQueryParameter adds the v4LatencyOther to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) SetV4LatencyOtherQueryParameter(v4LatencyOther *int64) {
	o.V4LatencyOtherQueryParameter = v4LatencyOther
}

// WithV4LatencyReadQueryParameter adds the v4LatencyRead to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) WithV4LatencyReadQueryParameter(v4LatencyRead *int64) *NfsCollectionPerformanceMetricsGetParams {
	o.SetV4LatencyReadQueryParameter(v4LatencyRead)
	return o
}

// SetV4LatencyReadQueryParameter adds the v4LatencyRead to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) SetV4LatencyReadQueryParameter(v4LatencyRead *int64) {
	o.V4LatencyReadQueryParameter = v4LatencyRead
}

// WithV4LatencyTotalQueryParameter adds the v4LatencyTotal to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) WithV4LatencyTotalQueryParameter(v4LatencyTotal *int64) *NfsCollectionPerformanceMetricsGetParams {
	o.SetV4LatencyTotalQueryParameter(v4LatencyTotal)
	return o
}

// SetV4LatencyTotalQueryParameter adds the v4LatencyTotal to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) SetV4LatencyTotalQueryParameter(v4LatencyTotal *int64) {
	o.V4LatencyTotalQueryParameter = v4LatencyTotal
}

// WithV4LatencyWriteQueryParameter adds the v4LatencyWrite to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) WithV4LatencyWriteQueryParameter(v4LatencyWrite *int64) *NfsCollectionPerformanceMetricsGetParams {
	o.SetV4LatencyWriteQueryParameter(v4LatencyWrite)
	return o
}

// SetV4LatencyWriteQueryParameter adds the v4LatencyWrite to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) SetV4LatencyWriteQueryParameter(v4LatencyWrite *int64) {
	o.V4LatencyWriteQueryParameter = v4LatencyWrite
}

// WithV4StatusQueryParameter adds the v4Status to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) WithV4StatusQueryParameter(v4Status *string) *NfsCollectionPerformanceMetricsGetParams {
	o.SetV4StatusQueryParameter(v4Status)
	return o
}

// SetV4StatusQueryParameter adds the v4Status to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) SetV4StatusQueryParameter(v4Status *string) {
	o.V4StatusQueryParameter = v4Status
}

// WithV4ThroughputReadQueryParameter adds the v4ThroughputRead to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) WithV4ThroughputReadQueryParameter(v4ThroughputRead *int64) *NfsCollectionPerformanceMetricsGetParams {
	o.SetV4ThroughputReadQueryParameter(v4ThroughputRead)
	return o
}

// SetV4ThroughputReadQueryParameter adds the v4ThroughputRead to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) SetV4ThroughputReadQueryParameter(v4ThroughputRead *int64) {
	o.V4ThroughputReadQueryParameter = v4ThroughputRead
}

// WithV4ThroughputTotalQueryParameter adds the v4ThroughputTotal to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) WithV4ThroughputTotalQueryParameter(v4ThroughputTotal *int64) *NfsCollectionPerformanceMetricsGetParams {
	o.SetV4ThroughputTotalQueryParameter(v4ThroughputTotal)
	return o
}

// SetV4ThroughputTotalQueryParameter adds the v4ThroughputTotal to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) SetV4ThroughputTotalQueryParameter(v4ThroughputTotal *int64) {
	o.V4ThroughputTotalQueryParameter = v4ThroughputTotal
}

// WithV4ThroughputWriteQueryParameter adds the v4ThroughputWrite to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) WithV4ThroughputWriteQueryParameter(v4ThroughputWrite *int64) *NfsCollectionPerformanceMetricsGetParams {
	o.SetV4ThroughputWriteQueryParameter(v4ThroughputWrite)
	return o
}

// SetV4ThroughputWriteQueryParameter adds the v4ThroughputWrite to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) SetV4ThroughputWriteQueryParameter(v4ThroughputWrite *int64) {
	o.V4ThroughputWriteQueryParameter = v4ThroughputWrite
}

// WithV41DurationQueryParameter adds the v41Duration to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) WithV41DurationQueryParameter(v41Duration *string) *NfsCollectionPerformanceMetricsGetParams {
	o.SetV41DurationQueryParameter(v41Duration)
	return o
}

// SetV41DurationQueryParameter adds the v41Duration to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) SetV41DurationQueryParameter(v41Duration *string) {
	o.V41DurationQueryParameter = v41Duration
}

// WithV41IopsOtherQueryParameter adds the v41IopsOther to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) WithV41IopsOtherQueryParameter(v41IopsOther *int64) *NfsCollectionPerformanceMetricsGetParams {
	o.SetV41IopsOtherQueryParameter(v41IopsOther)
	return o
}

// SetV41IopsOtherQueryParameter adds the v41IopsOther to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) SetV41IopsOtherQueryParameter(v41IopsOther *int64) {
	o.V41IopsOtherQueryParameter = v41IopsOther
}

// WithV41IopsReadQueryParameter adds the v41IopsRead to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) WithV41IopsReadQueryParameter(v41IopsRead *int64) *NfsCollectionPerformanceMetricsGetParams {
	o.SetV41IopsReadQueryParameter(v41IopsRead)
	return o
}

// SetV41IopsReadQueryParameter adds the v41IopsRead to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) SetV41IopsReadQueryParameter(v41IopsRead *int64) {
	o.V41IopsReadQueryParameter = v41IopsRead
}

// WithV41IopsTotalQueryParameter adds the v41IopsTotal to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) WithV41IopsTotalQueryParameter(v41IopsTotal *int64) *NfsCollectionPerformanceMetricsGetParams {
	o.SetV41IopsTotalQueryParameter(v41IopsTotal)
	return o
}

// SetV41IopsTotalQueryParameter adds the v41IopsTotal to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) SetV41IopsTotalQueryParameter(v41IopsTotal *int64) {
	o.V41IopsTotalQueryParameter = v41IopsTotal
}

// WithV41IopsWriteQueryParameter adds the v41IopsWrite to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) WithV41IopsWriteQueryParameter(v41IopsWrite *int64) *NfsCollectionPerformanceMetricsGetParams {
	o.SetV41IopsWriteQueryParameter(v41IopsWrite)
	return o
}

// SetV41IopsWriteQueryParameter adds the v41IopsWrite to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) SetV41IopsWriteQueryParameter(v41IopsWrite *int64) {
	o.V41IopsWriteQueryParameter = v41IopsWrite
}

// WithV41LatencyOtherQueryParameter adds the v41LatencyOther to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) WithV41LatencyOtherQueryParameter(v41LatencyOther *int64) *NfsCollectionPerformanceMetricsGetParams {
	o.SetV41LatencyOtherQueryParameter(v41LatencyOther)
	return o
}

// SetV41LatencyOtherQueryParameter adds the v41LatencyOther to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) SetV41LatencyOtherQueryParameter(v41LatencyOther *int64) {
	o.V41LatencyOtherQueryParameter = v41LatencyOther
}

// WithV41LatencyReadQueryParameter adds the v41LatencyRead to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) WithV41LatencyReadQueryParameter(v41LatencyRead *int64) *NfsCollectionPerformanceMetricsGetParams {
	o.SetV41LatencyReadQueryParameter(v41LatencyRead)
	return o
}

// SetV41LatencyReadQueryParameter adds the v41LatencyRead to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) SetV41LatencyReadQueryParameter(v41LatencyRead *int64) {
	o.V41LatencyReadQueryParameter = v41LatencyRead
}

// WithV41LatencyTotalQueryParameter adds the v41LatencyTotal to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) WithV41LatencyTotalQueryParameter(v41LatencyTotal *int64) *NfsCollectionPerformanceMetricsGetParams {
	o.SetV41LatencyTotalQueryParameter(v41LatencyTotal)
	return o
}

// SetV41LatencyTotalQueryParameter adds the v41LatencyTotal to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) SetV41LatencyTotalQueryParameter(v41LatencyTotal *int64) {
	o.V41LatencyTotalQueryParameter = v41LatencyTotal
}

// WithV41LatencyWriteQueryParameter adds the v41LatencyWrite to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) WithV41LatencyWriteQueryParameter(v41LatencyWrite *int64) *NfsCollectionPerformanceMetricsGetParams {
	o.SetV41LatencyWriteQueryParameter(v41LatencyWrite)
	return o
}

// SetV41LatencyWriteQueryParameter adds the v41LatencyWrite to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) SetV41LatencyWriteQueryParameter(v41LatencyWrite *int64) {
	o.V41LatencyWriteQueryParameter = v41LatencyWrite
}

// WithV41StatusQueryParameter adds the v41Status to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) WithV41StatusQueryParameter(v41Status *string) *NfsCollectionPerformanceMetricsGetParams {
	o.SetV41StatusQueryParameter(v41Status)
	return o
}

// SetV41StatusQueryParameter adds the v41Status to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) SetV41StatusQueryParameter(v41Status *string) {
	o.V41StatusQueryParameter = v41Status
}

// WithV41ThroughputReadQueryParameter adds the v41ThroughputRead to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) WithV41ThroughputReadQueryParameter(v41ThroughputRead *int64) *NfsCollectionPerformanceMetricsGetParams {
	o.SetV41ThroughputReadQueryParameter(v41ThroughputRead)
	return o
}

// SetV41ThroughputReadQueryParameter adds the v41ThroughputRead to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) SetV41ThroughputReadQueryParameter(v41ThroughputRead *int64) {
	o.V41ThroughputReadQueryParameter = v41ThroughputRead
}

// WithV41ThroughputTotalQueryParameter adds the v41ThroughputTotal to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) WithV41ThroughputTotalQueryParameter(v41ThroughputTotal *int64) *NfsCollectionPerformanceMetricsGetParams {
	o.SetV41ThroughputTotalQueryParameter(v41ThroughputTotal)
	return o
}

// SetV41ThroughputTotalQueryParameter adds the v41ThroughputTotal to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) SetV41ThroughputTotalQueryParameter(v41ThroughputTotal *int64) {
	o.V41ThroughputTotalQueryParameter = v41ThroughputTotal
}

// WithV41ThroughputWriteQueryParameter adds the v41ThroughputWrite to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) WithV41ThroughputWriteQueryParameter(v41ThroughputWrite *int64) *NfsCollectionPerformanceMetricsGetParams {
	o.SetV41ThroughputWriteQueryParameter(v41ThroughputWrite)
	return o
}

// SetV41ThroughputWriteQueryParameter adds the v41ThroughputWrite to the nfs collection performance metrics get params
func (o *NfsCollectionPerformanceMetricsGetParams) SetV41ThroughputWriteQueryParameter(v41ThroughputWrite *int64) {
	o.V41ThroughputWriteQueryParameter = v41ThroughputWrite
}

// WriteToRequest writes these params to a swagger request
func (o *NfsCollectionPerformanceMetricsGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FieldsQueryParameter != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.IntervalQueryParameter != nil {

		// query param interval
		var qrInterval string

		if o.IntervalQueryParameter != nil {
			qrInterval = *o.IntervalQueryParameter
		}
		qInterval := qrInterval
		if qInterval != "" {

			if err := r.SetQueryParam("interval", qInterval); err != nil {
				return err
			}
		}
	}

	if o.MaxRecordsQueryParameter != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecordsQueryParameter != nil {
			qrMaxRecords = *o.MaxRecordsQueryParameter
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.OrderByQueryParameter != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.ReturnRecordsQueryParameter != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecordsQueryParameter != nil {
			qrReturnRecords = *o.ReturnRecordsQueryParameter
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeoutQueryParameter != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeoutQueryParameter != nil {
			qrReturnTimeout = *o.ReturnTimeoutQueryParameter
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	// path param svm.uuid
	if err := r.SetPathParam("svm.uuid", o.SVMUUIDPathParameter); err != nil {
		return err
	}

	if o.TimestampQueryParameter != nil {

		// query param timestamp
		var qrTimestamp string

		if o.TimestampQueryParameter != nil {
			qrTimestamp = *o.TimestampQueryParameter
		}
		qTimestamp := qrTimestamp
		if qTimestamp != "" {

			if err := r.SetQueryParam("timestamp", qTimestamp); err != nil {
				return err
			}
		}
	}

	if o.V3DurationQueryParameter != nil {

		// query param v3.duration
		var qrV3Duration string

		if o.V3DurationQueryParameter != nil {
			qrV3Duration = *o.V3DurationQueryParameter
		}
		qV3Duration := qrV3Duration
		if qV3Duration != "" {

			if err := r.SetQueryParam("v3.duration", qV3Duration); err != nil {
				return err
			}
		}
	}

	if o.V3IopsOtherQueryParameter != nil {

		// query param v3.iops.other
		var qrV3IopsOther int64

		if o.V3IopsOtherQueryParameter != nil {
			qrV3IopsOther = *o.V3IopsOtherQueryParameter
		}
		qV3IopsOther := swag.FormatInt64(qrV3IopsOther)
		if qV3IopsOther != "" {

			if err := r.SetQueryParam("v3.iops.other", qV3IopsOther); err != nil {
				return err
			}
		}
	}

	if o.V3IopsReadQueryParameter != nil {

		// query param v3.iops.read
		var qrV3IopsRead int64

		if o.V3IopsReadQueryParameter != nil {
			qrV3IopsRead = *o.V3IopsReadQueryParameter
		}
		qV3IopsRead := swag.FormatInt64(qrV3IopsRead)
		if qV3IopsRead != "" {

			if err := r.SetQueryParam("v3.iops.read", qV3IopsRead); err != nil {
				return err
			}
		}
	}

	if o.V3IopsTotalQueryParameter != nil {

		// query param v3.iops.total
		var qrV3IopsTotal int64

		if o.V3IopsTotalQueryParameter != nil {
			qrV3IopsTotal = *o.V3IopsTotalQueryParameter
		}
		qV3IopsTotal := swag.FormatInt64(qrV3IopsTotal)
		if qV3IopsTotal != "" {

			if err := r.SetQueryParam("v3.iops.total", qV3IopsTotal); err != nil {
				return err
			}
		}
	}

	if o.V3IopsWriteQueryParameter != nil {

		// query param v3.iops.write
		var qrV3IopsWrite int64

		if o.V3IopsWriteQueryParameter != nil {
			qrV3IopsWrite = *o.V3IopsWriteQueryParameter
		}
		qV3IopsWrite := swag.FormatInt64(qrV3IopsWrite)
		if qV3IopsWrite != "" {

			if err := r.SetQueryParam("v3.iops.write", qV3IopsWrite); err != nil {
				return err
			}
		}
	}

	if o.V3LatencyOtherQueryParameter != nil {

		// query param v3.latency.other
		var qrV3LatencyOther int64

		if o.V3LatencyOtherQueryParameter != nil {
			qrV3LatencyOther = *o.V3LatencyOtherQueryParameter
		}
		qV3LatencyOther := swag.FormatInt64(qrV3LatencyOther)
		if qV3LatencyOther != "" {

			if err := r.SetQueryParam("v3.latency.other", qV3LatencyOther); err != nil {
				return err
			}
		}
	}

	if o.V3LatencyReadQueryParameter != nil {

		// query param v3.latency.read
		var qrV3LatencyRead int64

		if o.V3LatencyReadQueryParameter != nil {
			qrV3LatencyRead = *o.V3LatencyReadQueryParameter
		}
		qV3LatencyRead := swag.FormatInt64(qrV3LatencyRead)
		if qV3LatencyRead != "" {

			if err := r.SetQueryParam("v3.latency.read", qV3LatencyRead); err != nil {
				return err
			}
		}
	}

	if o.V3LatencyTotalQueryParameter != nil {

		// query param v3.latency.total
		var qrV3LatencyTotal int64

		if o.V3LatencyTotalQueryParameter != nil {
			qrV3LatencyTotal = *o.V3LatencyTotalQueryParameter
		}
		qV3LatencyTotal := swag.FormatInt64(qrV3LatencyTotal)
		if qV3LatencyTotal != "" {

			if err := r.SetQueryParam("v3.latency.total", qV3LatencyTotal); err != nil {
				return err
			}
		}
	}

	if o.V3LatencyWriteQueryParameter != nil {

		// query param v3.latency.write
		var qrV3LatencyWrite int64

		if o.V3LatencyWriteQueryParameter != nil {
			qrV3LatencyWrite = *o.V3LatencyWriteQueryParameter
		}
		qV3LatencyWrite := swag.FormatInt64(qrV3LatencyWrite)
		if qV3LatencyWrite != "" {

			if err := r.SetQueryParam("v3.latency.write", qV3LatencyWrite); err != nil {
				return err
			}
		}
	}

	if o.V3StatusQueryParameter != nil {

		// query param v3.status
		var qrV3Status string

		if o.V3StatusQueryParameter != nil {
			qrV3Status = *o.V3StatusQueryParameter
		}
		qV3Status := qrV3Status
		if qV3Status != "" {

			if err := r.SetQueryParam("v3.status", qV3Status); err != nil {
				return err
			}
		}
	}

	if o.V3ThroughputReadQueryParameter != nil {

		// query param v3.throughput.read
		var qrV3ThroughputRead int64

		if o.V3ThroughputReadQueryParameter != nil {
			qrV3ThroughputRead = *o.V3ThroughputReadQueryParameter
		}
		qV3ThroughputRead := swag.FormatInt64(qrV3ThroughputRead)
		if qV3ThroughputRead != "" {

			if err := r.SetQueryParam("v3.throughput.read", qV3ThroughputRead); err != nil {
				return err
			}
		}
	}

	if o.V3ThroughputTotalQueryParameter != nil {

		// query param v3.throughput.total
		var qrV3ThroughputTotal int64

		if o.V3ThroughputTotalQueryParameter != nil {
			qrV3ThroughputTotal = *o.V3ThroughputTotalQueryParameter
		}
		qV3ThroughputTotal := swag.FormatInt64(qrV3ThroughputTotal)
		if qV3ThroughputTotal != "" {

			if err := r.SetQueryParam("v3.throughput.total", qV3ThroughputTotal); err != nil {
				return err
			}
		}
	}

	if o.V3ThroughputWriteQueryParameter != nil {

		// query param v3.throughput.write
		var qrV3ThroughputWrite int64

		if o.V3ThroughputWriteQueryParameter != nil {
			qrV3ThroughputWrite = *o.V3ThroughputWriteQueryParameter
		}
		qV3ThroughputWrite := swag.FormatInt64(qrV3ThroughputWrite)
		if qV3ThroughputWrite != "" {

			if err := r.SetQueryParam("v3.throughput.write", qV3ThroughputWrite); err != nil {
				return err
			}
		}
	}

	if o.V4DurationQueryParameter != nil {

		// query param v4.duration
		var qrV4Duration string

		if o.V4DurationQueryParameter != nil {
			qrV4Duration = *o.V4DurationQueryParameter
		}
		qV4Duration := qrV4Duration
		if qV4Duration != "" {

			if err := r.SetQueryParam("v4.duration", qV4Duration); err != nil {
				return err
			}
		}
	}

	if o.V4IopsOtherQueryParameter != nil {

		// query param v4.iops.other
		var qrV4IopsOther int64

		if o.V4IopsOtherQueryParameter != nil {
			qrV4IopsOther = *o.V4IopsOtherQueryParameter
		}
		qV4IopsOther := swag.FormatInt64(qrV4IopsOther)
		if qV4IopsOther != "" {

			if err := r.SetQueryParam("v4.iops.other", qV4IopsOther); err != nil {
				return err
			}
		}
	}

	if o.V4IopsReadQueryParameter != nil {

		// query param v4.iops.read
		var qrV4IopsRead int64

		if o.V4IopsReadQueryParameter != nil {
			qrV4IopsRead = *o.V4IopsReadQueryParameter
		}
		qV4IopsRead := swag.FormatInt64(qrV4IopsRead)
		if qV4IopsRead != "" {

			if err := r.SetQueryParam("v4.iops.read", qV4IopsRead); err != nil {
				return err
			}
		}
	}

	if o.V4IopsTotalQueryParameter != nil {

		// query param v4.iops.total
		var qrV4IopsTotal int64

		if o.V4IopsTotalQueryParameter != nil {
			qrV4IopsTotal = *o.V4IopsTotalQueryParameter
		}
		qV4IopsTotal := swag.FormatInt64(qrV4IopsTotal)
		if qV4IopsTotal != "" {

			if err := r.SetQueryParam("v4.iops.total", qV4IopsTotal); err != nil {
				return err
			}
		}
	}

	if o.V4IopsWriteQueryParameter != nil {

		// query param v4.iops.write
		var qrV4IopsWrite int64

		if o.V4IopsWriteQueryParameter != nil {
			qrV4IopsWrite = *o.V4IopsWriteQueryParameter
		}
		qV4IopsWrite := swag.FormatInt64(qrV4IopsWrite)
		if qV4IopsWrite != "" {

			if err := r.SetQueryParam("v4.iops.write", qV4IopsWrite); err != nil {
				return err
			}
		}
	}

	if o.V4LatencyOtherQueryParameter != nil {

		// query param v4.latency.other
		var qrV4LatencyOther int64

		if o.V4LatencyOtherQueryParameter != nil {
			qrV4LatencyOther = *o.V4LatencyOtherQueryParameter
		}
		qV4LatencyOther := swag.FormatInt64(qrV4LatencyOther)
		if qV4LatencyOther != "" {

			if err := r.SetQueryParam("v4.latency.other", qV4LatencyOther); err != nil {
				return err
			}
		}
	}

	if o.V4LatencyReadQueryParameter != nil {

		// query param v4.latency.read
		var qrV4LatencyRead int64

		if o.V4LatencyReadQueryParameter != nil {
			qrV4LatencyRead = *o.V4LatencyReadQueryParameter
		}
		qV4LatencyRead := swag.FormatInt64(qrV4LatencyRead)
		if qV4LatencyRead != "" {

			if err := r.SetQueryParam("v4.latency.read", qV4LatencyRead); err != nil {
				return err
			}
		}
	}

	if o.V4LatencyTotalQueryParameter != nil {

		// query param v4.latency.total
		var qrV4LatencyTotal int64

		if o.V4LatencyTotalQueryParameter != nil {
			qrV4LatencyTotal = *o.V4LatencyTotalQueryParameter
		}
		qV4LatencyTotal := swag.FormatInt64(qrV4LatencyTotal)
		if qV4LatencyTotal != "" {

			if err := r.SetQueryParam("v4.latency.total", qV4LatencyTotal); err != nil {
				return err
			}
		}
	}

	if o.V4LatencyWriteQueryParameter != nil {

		// query param v4.latency.write
		var qrV4LatencyWrite int64

		if o.V4LatencyWriteQueryParameter != nil {
			qrV4LatencyWrite = *o.V4LatencyWriteQueryParameter
		}
		qV4LatencyWrite := swag.FormatInt64(qrV4LatencyWrite)
		if qV4LatencyWrite != "" {

			if err := r.SetQueryParam("v4.latency.write", qV4LatencyWrite); err != nil {
				return err
			}
		}
	}

	if o.V4StatusQueryParameter != nil {

		// query param v4.status
		var qrV4Status string

		if o.V4StatusQueryParameter != nil {
			qrV4Status = *o.V4StatusQueryParameter
		}
		qV4Status := qrV4Status
		if qV4Status != "" {

			if err := r.SetQueryParam("v4.status", qV4Status); err != nil {
				return err
			}
		}
	}

	if o.V4ThroughputReadQueryParameter != nil {

		// query param v4.throughput.read
		var qrV4ThroughputRead int64

		if o.V4ThroughputReadQueryParameter != nil {
			qrV4ThroughputRead = *o.V4ThroughputReadQueryParameter
		}
		qV4ThroughputRead := swag.FormatInt64(qrV4ThroughputRead)
		if qV4ThroughputRead != "" {

			if err := r.SetQueryParam("v4.throughput.read", qV4ThroughputRead); err != nil {
				return err
			}
		}
	}

	if o.V4ThroughputTotalQueryParameter != nil {

		// query param v4.throughput.total
		var qrV4ThroughputTotal int64

		if o.V4ThroughputTotalQueryParameter != nil {
			qrV4ThroughputTotal = *o.V4ThroughputTotalQueryParameter
		}
		qV4ThroughputTotal := swag.FormatInt64(qrV4ThroughputTotal)
		if qV4ThroughputTotal != "" {

			if err := r.SetQueryParam("v4.throughput.total", qV4ThroughputTotal); err != nil {
				return err
			}
		}
	}

	if o.V4ThroughputWriteQueryParameter != nil {

		// query param v4.throughput.write
		var qrV4ThroughputWrite int64

		if o.V4ThroughputWriteQueryParameter != nil {
			qrV4ThroughputWrite = *o.V4ThroughputWriteQueryParameter
		}
		qV4ThroughputWrite := swag.FormatInt64(qrV4ThroughputWrite)
		if qV4ThroughputWrite != "" {

			if err := r.SetQueryParam("v4.throughput.write", qV4ThroughputWrite); err != nil {
				return err
			}
		}
	}

	if o.V41DurationQueryParameter != nil {

		// query param v41.duration
		var qrV41Duration string

		if o.V41DurationQueryParameter != nil {
			qrV41Duration = *o.V41DurationQueryParameter
		}
		qV41Duration := qrV41Duration
		if qV41Duration != "" {

			if err := r.SetQueryParam("v41.duration", qV41Duration); err != nil {
				return err
			}
		}
	}

	if o.V41IopsOtherQueryParameter != nil {

		// query param v41.iops.other
		var qrV41IopsOther int64

		if o.V41IopsOtherQueryParameter != nil {
			qrV41IopsOther = *o.V41IopsOtherQueryParameter
		}
		qV41IopsOther := swag.FormatInt64(qrV41IopsOther)
		if qV41IopsOther != "" {

			if err := r.SetQueryParam("v41.iops.other", qV41IopsOther); err != nil {
				return err
			}
		}
	}

	if o.V41IopsReadQueryParameter != nil {

		// query param v41.iops.read
		var qrV41IopsRead int64

		if o.V41IopsReadQueryParameter != nil {
			qrV41IopsRead = *o.V41IopsReadQueryParameter
		}
		qV41IopsRead := swag.FormatInt64(qrV41IopsRead)
		if qV41IopsRead != "" {

			if err := r.SetQueryParam("v41.iops.read", qV41IopsRead); err != nil {
				return err
			}
		}
	}

	if o.V41IopsTotalQueryParameter != nil {

		// query param v41.iops.total
		var qrV41IopsTotal int64

		if o.V41IopsTotalQueryParameter != nil {
			qrV41IopsTotal = *o.V41IopsTotalQueryParameter
		}
		qV41IopsTotal := swag.FormatInt64(qrV41IopsTotal)
		if qV41IopsTotal != "" {

			if err := r.SetQueryParam("v41.iops.total", qV41IopsTotal); err != nil {
				return err
			}
		}
	}

	if o.V41IopsWriteQueryParameter != nil {

		// query param v41.iops.write
		var qrV41IopsWrite int64

		if o.V41IopsWriteQueryParameter != nil {
			qrV41IopsWrite = *o.V41IopsWriteQueryParameter
		}
		qV41IopsWrite := swag.FormatInt64(qrV41IopsWrite)
		if qV41IopsWrite != "" {

			if err := r.SetQueryParam("v41.iops.write", qV41IopsWrite); err != nil {
				return err
			}
		}
	}

	if o.V41LatencyOtherQueryParameter != nil {

		// query param v41.latency.other
		var qrV41LatencyOther int64

		if o.V41LatencyOtherQueryParameter != nil {
			qrV41LatencyOther = *o.V41LatencyOtherQueryParameter
		}
		qV41LatencyOther := swag.FormatInt64(qrV41LatencyOther)
		if qV41LatencyOther != "" {

			if err := r.SetQueryParam("v41.latency.other", qV41LatencyOther); err != nil {
				return err
			}
		}
	}

	if o.V41LatencyReadQueryParameter != nil {

		// query param v41.latency.read
		var qrV41LatencyRead int64

		if o.V41LatencyReadQueryParameter != nil {
			qrV41LatencyRead = *o.V41LatencyReadQueryParameter
		}
		qV41LatencyRead := swag.FormatInt64(qrV41LatencyRead)
		if qV41LatencyRead != "" {

			if err := r.SetQueryParam("v41.latency.read", qV41LatencyRead); err != nil {
				return err
			}
		}
	}

	if o.V41LatencyTotalQueryParameter != nil {

		// query param v41.latency.total
		var qrV41LatencyTotal int64

		if o.V41LatencyTotalQueryParameter != nil {
			qrV41LatencyTotal = *o.V41LatencyTotalQueryParameter
		}
		qV41LatencyTotal := swag.FormatInt64(qrV41LatencyTotal)
		if qV41LatencyTotal != "" {

			if err := r.SetQueryParam("v41.latency.total", qV41LatencyTotal); err != nil {
				return err
			}
		}
	}

	if o.V41LatencyWriteQueryParameter != nil {

		// query param v41.latency.write
		var qrV41LatencyWrite int64

		if o.V41LatencyWriteQueryParameter != nil {
			qrV41LatencyWrite = *o.V41LatencyWriteQueryParameter
		}
		qV41LatencyWrite := swag.FormatInt64(qrV41LatencyWrite)
		if qV41LatencyWrite != "" {

			if err := r.SetQueryParam("v41.latency.write", qV41LatencyWrite); err != nil {
				return err
			}
		}
	}

	if o.V41StatusQueryParameter != nil {

		// query param v41.status
		var qrV41Status string

		if o.V41StatusQueryParameter != nil {
			qrV41Status = *o.V41StatusQueryParameter
		}
		qV41Status := qrV41Status
		if qV41Status != "" {

			if err := r.SetQueryParam("v41.status", qV41Status); err != nil {
				return err
			}
		}
	}

	if o.V41ThroughputReadQueryParameter != nil {

		// query param v41.throughput.read
		var qrV41ThroughputRead int64

		if o.V41ThroughputReadQueryParameter != nil {
			qrV41ThroughputRead = *o.V41ThroughputReadQueryParameter
		}
		qV41ThroughputRead := swag.FormatInt64(qrV41ThroughputRead)
		if qV41ThroughputRead != "" {

			if err := r.SetQueryParam("v41.throughput.read", qV41ThroughputRead); err != nil {
				return err
			}
		}
	}

	if o.V41ThroughputTotalQueryParameter != nil {

		// query param v41.throughput.total
		var qrV41ThroughputTotal int64

		if o.V41ThroughputTotalQueryParameter != nil {
			qrV41ThroughputTotal = *o.V41ThroughputTotalQueryParameter
		}
		qV41ThroughputTotal := swag.FormatInt64(qrV41ThroughputTotal)
		if qV41ThroughputTotal != "" {

			if err := r.SetQueryParam("v41.throughput.total", qV41ThroughputTotal); err != nil {
				return err
			}
		}
	}

	if o.V41ThroughputWriteQueryParameter != nil {

		// query param v41.throughput.write
		var qrV41ThroughputWrite int64

		if o.V41ThroughputWriteQueryParameter != nil {
			qrV41ThroughputWrite = *o.V41ThroughputWriteQueryParameter
		}
		qV41ThroughputWrite := swag.FormatInt64(qrV41ThroughputWrite)
		if qV41ThroughputWrite != "" {

			if err := r.SetQueryParam("v41.throughput.write", qV41ThroughputWrite); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamNfsCollectionPerformanceMetricsGet binds the parameter fields
func (o *NfsCollectionPerformanceMetricsGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.FieldsQueryParameter

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamNfsCollectionPerformanceMetricsGet binds the parameter order_by
func (o *NfsCollectionPerformanceMetricsGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderByQueryParameter

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
