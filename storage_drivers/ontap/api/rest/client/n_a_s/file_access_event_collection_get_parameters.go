// Code generated by go-swagger; DO NOT EDIT.

package n_a_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewFileAccessEventCollectionGetParams creates a new FileAccessEventCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewFileAccessEventCollectionGetParams() *FileAccessEventCollectionGetParams {
	return &FileAccessEventCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewFileAccessEventCollectionGetParamsWithTimeout creates a new FileAccessEventCollectionGetParams object
// with the ability to set a timeout on a request.
func NewFileAccessEventCollectionGetParamsWithTimeout(timeout time.Duration) *FileAccessEventCollectionGetParams {
	return &FileAccessEventCollectionGetParams{
		timeout: timeout,
	}
}

// NewFileAccessEventCollectionGetParamsWithContext creates a new FileAccessEventCollectionGetParams object
// with the ability to set a context for a request.
func NewFileAccessEventCollectionGetParamsWithContext(ctx context.Context) *FileAccessEventCollectionGetParams {
	return &FileAccessEventCollectionGetParams{
		Context: ctx,
	}
}

// NewFileAccessEventCollectionGetParamsWithHTTPClient creates a new FileAccessEventCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewFileAccessEventCollectionGetParamsWithHTTPClient(client *http.Client) *FileAccessEventCollectionGetParams {
	return &FileAccessEventCollectionGetParams{
		HTTPClient: client,
	}
}

/* FileAccessEventCollectionGetParams contains all the parameters to send to the API endpoint
   for the file access event collection get operation.

   Typically these are written to a http.Request.
*/
type FileAccessEventCollectionGetParams struct {

	/* CreateTime.

	   Filter by create_time
	*/
	CreateTimeQueryParameter *string

	/* Fields.

	   Specify the fields to return.
	*/
	FieldsQueryParameter []string

	/* FilterClientIP.

	   Filter by filter.client_ip
	*/
	FilterClientIPQueryParameter *string

	/* FilterEnabled.

	   Filter by filter.enabled
	*/
	FilterEnabledQueryParameter *bool

	/* FilterIndex.

	   Filter by filter.index
	*/
	FilterIndexQueryParameter *int64

	/* FilterPath.

	   Filter by filter.path
	*/
	FilterPathQueryParameter *string

	/* FilterProtocol.

	   Filter by filter.protocol
	*/
	FilterProtocolQueryParameter *string

	/* FilterSvmName.

	   Filter by filter.svm.name
	*/
	FilterSVMNameQueryParameter *string

	/* FilterSvmUUID.

	   Filter by filter.svm.uuid
	*/
	FilterSVMUUIDQueryParameter *string

	/* FilterTraceAllowedOps.

	   Filter by filter.trace_allowed_ops
	*/
	FilterTraceAllowedOpsQueryParameter *bool

	/* FilterUnixUser.

	   Filter by filter.unix_user
	*/
	FilterUnixUserQueryParameter *string

	/* FilterWindowsUser.

	   Filter by filter.windows_user
	*/
	FilterWindowsUserQueryParameter *string

	/* Index.

	   Filter by index
	*/
	IndexQueryParameter *int64

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecordsQueryParameter *int64

	/* NodeName.

	   Filter by node.name
	*/
	NodeNameQueryParameter *string

	/* NodeUUID.

	   Filter by node.uuid
	*/
	NodeUUIDQueryParameter *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderByQueryParameter []string

	/* ReasonMessage.

	   Filter by reason.message
	*/
	ReasonMessageQueryParameter *string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecordsQueryParameter *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeoutQueryParameter *int64

	/* SessionID.

	   Filter by session_id
	*/
	SessionIDQueryParameter *int64

	/* ShareName.

	   Filter by share.name
	*/
	ShareNameQueryParameter *string

	/* SvmName.

	   Filter by svm.name
	*/
	SVMNameQueryParameter *string

	/* SvmUUID.

	   Filter by svm.uuid
	*/
	SVMUUIDQueryParameter *string

	/* VolumeName.

	   Filter by volume.name
	*/
	VolumeNameQueryParameter *string

	/* VolumeUUID.

	   Filter by volume.uuid
	*/
	VolumeUUIDQueryParameter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the file access event collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FileAccessEventCollectionGetParams) WithDefaults() *FileAccessEventCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the file access event collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FileAccessEventCollectionGetParams) SetDefaults() {
	var (
		returnRecordsQueryParameterDefault = bool(true)

		returnTimeoutQueryParameterDefault = int64(15)
	)

	val := FileAccessEventCollectionGetParams{
		ReturnRecordsQueryParameter: &returnRecordsQueryParameterDefault,
		ReturnTimeoutQueryParameter: &returnTimeoutQueryParameterDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) WithTimeout(timeout time.Duration) *FileAccessEventCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) WithContext(ctx context.Context) *FileAccessEventCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) WithHTTPClient(client *http.Client) *FileAccessEventCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCreateTimeQueryParameter adds the createTime to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) WithCreateTimeQueryParameter(createTime *string) *FileAccessEventCollectionGetParams {
	o.SetCreateTimeQueryParameter(createTime)
	return o
}

// SetCreateTimeQueryParameter adds the createTime to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) SetCreateTimeQueryParameter(createTime *string) {
	o.CreateTimeQueryParameter = createTime
}

// WithFieldsQueryParameter adds the fields to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) WithFieldsQueryParameter(fields []string) *FileAccessEventCollectionGetParams {
	o.SetFieldsQueryParameter(fields)
	return o
}

// SetFieldsQueryParameter adds the fields to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) SetFieldsQueryParameter(fields []string) {
	o.FieldsQueryParameter = fields
}

// WithFilterClientIPQueryParameter adds the filterClientIP to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) WithFilterClientIPQueryParameter(filterClientIP *string) *FileAccessEventCollectionGetParams {
	o.SetFilterClientIPQueryParameter(filterClientIP)
	return o
}

// SetFilterClientIPQueryParameter adds the filterClientIp to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) SetFilterClientIPQueryParameter(filterClientIP *string) {
	o.FilterClientIPQueryParameter = filterClientIP
}

// WithFilterEnabledQueryParameter adds the filterEnabled to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) WithFilterEnabledQueryParameter(filterEnabled *bool) *FileAccessEventCollectionGetParams {
	o.SetFilterEnabledQueryParameter(filterEnabled)
	return o
}

// SetFilterEnabledQueryParameter adds the filterEnabled to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) SetFilterEnabledQueryParameter(filterEnabled *bool) {
	o.FilterEnabledQueryParameter = filterEnabled
}

// WithFilterIndexQueryParameter adds the filterIndex to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) WithFilterIndexQueryParameter(filterIndex *int64) *FileAccessEventCollectionGetParams {
	o.SetFilterIndexQueryParameter(filterIndex)
	return o
}

// SetFilterIndexQueryParameter adds the filterIndex to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) SetFilterIndexQueryParameter(filterIndex *int64) {
	o.FilterIndexQueryParameter = filterIndex
}

// WithFilterPathQueryParameter adds the filterPath to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) WithFilterPathQueryParameter(filterPath *string) *FileAccessEventCollectionGetParams {
	o.SetFilterPathQueryParameter(filterPath)
	return o
}

// SetFilterPathQueryParameter adds the filterPath to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) SetFilterPathQueryParameter(filterPath *string) {
	o.FilterPathQueryParameter = filterPath
}

// WithFilterProtocolQueryParameter adds the filterProtocol to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) WithFilterProtocolQueryParameter(filterProtocol *string) *FileAccessEventCollectionGetParams {
	o.SetFilterProtocolQueryParameter(filterProtocol)
	return o
}

// SetFilterProtocolQueryParameter adds the filterProtocol to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) SetFilterProtocolQueryParameter(filterProtocol *string) {
	o.FilterProtocolQueryParameter = filterProtocol
}

// WithFilterSVMNameQueryParameter adds the filterSvmName to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) WithFilterSVMNameQueryParameter(filterSvmName *string) *FileAccessEventCollectionGetParams {
	o.SetFilterSVMNameQueryParameter(filterSvmName)
	return o
}

// SetFilterSVMNameQueryParameter adds the filterSvmName to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) SetFilterSVMNameQueryParameter(filterSvmName *string) {
	o.FilterSVMNameQueryParameter = filterSvmName
}

// WithFilterSVMUUIDQueryParameter adds the filterSvmUUID to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) WithFilterSVMUUIDQueryParameter(filterSvmUUID *string) *FileAccessEventCollectionGetParams {
	o.SetFilterSVMUUIDQueryParameter(filterSvmUUID)
	return o
}

// SetFilterSVMUUIDQueryParameter adds the filterSvmUuid to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) SetFilterSVMUUIDQueryParameter(filterSvmUUID *string) {
	o.FilterSVMUUIDQueryParameter = filterSvmUUID
}

// WithFilterTraceAllowedOpsQueryParameter adds the filterTraceAllowedOps to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) WithFilterTraceAllowedOpsQueryParameter(filterTraceAllowedOps *bool) *FileAccessEventCollectionGetParams {
	o.SetFilterTraceAllowedOpsQueryParameter(filterTraceAllowedOps)
	return o
}

// SetFilterTraceAllowedOpsQueryParameter adds the filterTraceAllowedOps to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) SetFilterTraceAllowedOpsQueryParameter(filterTraceAllowedOps *bool) {
	o.FilterTraceAllowedOpsQueryParameter = filterTraceAllowedOps
}

// WithFilterUnixUserQueryParameter adds the filterUnixUser to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) WithFilterUnixUserQueryParameter(filterUnixUser *string) *FileAccessEventCollectionGetParams {
	o.SetFilterUnixUserQueryParameter(filterUnixUser)
	return o
}

// SetFilterUnixUserQueryParameter adds the filterUnixUser to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) SetFilterUnixUserQueryParameter(filterUnixUser *string) {
	o.FilterUnixUserQueryParameter = filterUnixUser
}

// WithFilterWindowsUserQueryParameter adds the filterWindowsUser to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) WithFilterWindowsUserQueryParameter(filterWindowsUser *string) *FileAccessEventCollectionGetParams {
	o.SetFilterWindowsUserQueryParameter(filterWindowsUser)
	return o
}

// SetFilterWindowsUserQueryParameter adds the filterWindowsUser to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) SetFilterWindowsUserQueryParameter(filterWindowsUser *string) {
	o.FilterWindowsUserQueryParameter = filterWindowsUser
}

// WithIndexQueryParameter adds the index to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) WithIndexQueryParameter(index *int64) *FileAccessEventCollectionGetParams {
	o.SetIndexQueryParameter(index)
	return o
}

// SetIndexQueryParameter adds the index to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) SetIndexQueryParameter(index *int64) {
	o.IndexQueryParameter = index
}

// WithMaxRecordsQueryParameter adds the maxRecords to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) WithMaxRecordsQueryParameter(maxRecords *int64) *FileAccessEventCollectionGetParams {
	o.SetMaxRecordsQueryParameter(maxRecords)
	return o
}

// SetMaxRecordsQueryParameter adds the maxRecords to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) SetMaxRecordsQueryParameter(maxRecords *int64) {
	o.MaxRecordsQueryParameter = maxRecords
}

// WithNodeNameQueryParameter adds the nodeName to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) WithNodeNameQueryParameter(nodeName *string) *FileAccessEventCollectionGetParams {
	o.SetNodeNameQueryParameter(nodeName)
	return o
}

// SetNodeNameQueryParameter adds the nodeName to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) SetNodeNameQueryParameter(nodeName *string) {
	o.NodeNameQueryParameter = nodeName
}

// WithNodeUUIDQueryParameter adds the nodeUUID to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) WithNodeUUIDQueryParameter(nodeUUID *string) *FileAccessEventCollectionGetParams {
	o.SetNodeUUIDQueryParameter(nodeUUID)
	return o
}

// SetNodeUUIDQueryParameter adds the nodeUuid to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) SetNodeUUIDQueryParameter(nodeUUID *string) {
	o.NodeUUIDQueryParameter = nodeUUID
}

// WithOrderByQueryParameter adds the orderBy to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) WithOrderByQueryParameter(orderBy []string) *FileAccessEventCollectionGetParams {
	o.SetOrderByQueryParameter(orderBy)
	return o
}

// SetOrderByQueryParameter adds the orderBy to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) SetOrderByQueryParameter(orderBy []string) {
	o.OrderByQueryParameter = orderBy
}

// WithReasonMessageQueryParameter adds the reasonMessage to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) WithReasonMessageQueryParameter(reasonMessage *string) *FileAccessEventCollectionGetParams {
	o.SetReasonMessageQueryParameter(reasonMessage)
	return o
}

// SetReasonMessageQueryParameter adds the reasonMessage to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) SetReasonMessageQueryParameter(reasonMessage *string) {
	o.ReasonMessageQueryParameter = reasonMessage
}

// WithReturnRecordsQueryParameter adds the returnRecords to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) WithReturnRecordsQueryParameter(returnRecords *bool) *FileAccessEventCollectionGetParams {
	o.SetReturnRecordsQueryParameter(returnRecords)
	return o
}

// SetReturnRecordsQueryParameter adds the returnRecords to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) SetReturnRecordsQueryParameter(returnRecords *bool) {
	o.ReturnRecordsQueryParameter = returnRecords
}

// WithReturnTimeoutQueryParameter adds the returnTimeout to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) WithReturnTimeoutQueryParameter(returnTimeout *int64) *FileAccessEventCollectionGetParams {
	o.SetReturnTimeoutQueryParameter(returnTimeout)
	return o
}

// SetReturnTimeoutQueryParameter adds the returnTimeout to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) SetReturnTimeoutQueryParameter(returnTimeout *int64) {
	o.ReturnTimeoutQueryParameter = returnTimeout
}

// WithSessionIDQueryParameter adds the sessionID to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) WithSessionIDQueryParameter(sessionID *int64) *FileAccessEventCollectionGetParams {
	o.SetSessionIDQueryParameter(sessionID)
	return o
}

// SetSessionIDQueryParameter adds the sessionId to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) SetSessionIDQueryParameter(sessionID *int64) {
	o.SessionIDQueryParameter = sessionID
}

// WithShareNameQueryParameter adds the shareName to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) WithShareNameQueryParameter(shareName *string) *FileAccessEventCollectionGetParams {
	o.SetShareNameQueryParameter(shareName)
	return o
}

// SetShareNameQueryParameter adds the shareName to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) SetShareNameQueryParameter(shareName *string) {
	o.ShareNameQueryParameter = shareName
}

// WithSVMNameQueryParameter adds the svmName to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) WithSVMNameQueryParameter(svmName *string) *FileAccessEventCollectionGetParams {
	o.SetSVMNameQueryParameter(svmName)
	return o
}

// SetSVMNameQueryParameter adds the svmName to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) SetSVMNameQueryParameter(svmName *string) {
	o.SVMNameQueryParameter = svmName
}

// WithSVMUUIDQueryParameter adds the svmUUID to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) WithSVMUUIDQueryParameter(svmUUID *string) *FileAccessEventCollectionGetParams {
	o.SetSVMUUIDQueryParameter(svmUUID)
	return o
}

// SetSVMUUIDQueryParameter adds the svmUuid to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) SetSVMUUIDQueryParameter(svmUUID *string) {
	o.SVMUUIDQueryParameter = svmUUID
}

// WithVolumeNameQueryParameter adds the volumeName to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) WithVolumeNameQueryParameter(volumeName *string) *FileAccessEventCollectionGetParams {
	o.SetVolumeNameQueryParameter(volumeName)
	return o
}

// SetVolumeNameQueryParameter adds the volumeName to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) SetVolumeNameQueryParameter(volumeName *string) {
	o.VolumeNameQueryParameter = volumeName
}

// WithVolumeUUIDQueryParameter adds the volumeUUID to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) WithVolumeUUIDQueryParameter(volumeUUID *string) *FileAccessEventCollectionGetParams {
	o.SetVolumeUUIDQueryParameter(volumeUUID)
	return o
}

// SetVolumeUUIDQueryParameter adds the volumeUuid to the file access event collection get params
func (o *FileAccessEventCollectionGetParams) SetVolumeUUIDQueryParameter(volumeUUID *string) {
	o.VolumeUUIDQueryParameter = volumeUUID
}

// WriteToRequest writes these params to a swagger request
func (o *FileAccessEventCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CreateTimeQueryParameter != nil {

		// query param create_time
		var qrCreateTime string

		if o.CreateTimeQueryParameter != nil {
			qrCreateTime = *o.CreateTimeQueryParameter
		}
		qCreateTime := qrCreateTime
		if qCreateTime != "" {

			if err := r.SetQueryParam("create_time", qCreateTime); err != nil {
				return err
			}
		}
	}

	if o.FieldsQueryParameter != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.FilterClientIPQueryParameter != nil {

		// query param filter.client_ip
		var qrFilterClientIP string

		if o.FilterClientIPQueryParameter != nil {
			qrFilterClientIP = *o.FilterClientIPQueryParameter
		}
		qFilterClientIP := qrFilterClientIP
		if qFilterClientIP != "" {

			if err := r.SetQueryParam("filter.client_ip", qFilterClientIP); err != nil {
				return err
			}
		}
	}

	if o.FilterEnabledQueryParameter != nil {

		// query param filter.enabled
		var qrFilterEnabled bool

		if o.FilterEnabledQueryParameter != nil {
			qrFilterEnabled = *o.FilterEnabledQueryParameter
		}
		qFilterEnabled := swag.FormatBool(qrFilterEnabled)
		if qFilterEnabled != "" {

			if err := r.SetQueryParam("filter.enabled", qFilterEnabled); err != nil {
				return err
			}
		}
	}

	if o.FilterIndexQueryParameter != nil {

		// query param filter.index
		var qrFilterIndex int64

		if o.FilterIndexQueryParameter != nil {
			qrFilterIndex = *o.FilterIndexQueryParameter
		}
		qFilterIndex := swag.FormatInt64(qrFilterIndex)
		if qFilterIndex != "" {

			if err := r.SetQueryParam("filter.index", qFilterIndex); err != nil {
				return err
			}
		}
	}

	if o.FilterPathQueryParameter != nil {

		// query param filter.path
		var qrFilterPath string

		if o.FilterPathQueryParameter != nil {
			qrFilterPath = *o.FilterPathQueryParameter
		}
		qFilterPath := qrFilterPath
		if qFilterPath != "" {

			if err := r.SetQueryParam("filter.path", qFilterPath); err != nil {
				return err
			}
		}
	}

	if o.FilterProtocolQueryParameter != nil {

		// query param filter.protocol
		var qrFilterProtocol string

		if o.FilterProtocolQueryParameter != nil {
			qrFilterProtocol = *o.FilterProtocolQueryParameter
		}
		qFilterProtocol := qrFilterProtocol
		if qFilterProtocol != "" {

			if err := r.SetQueryParam("filter.protocol", qFilterProtocol); err != nil {
				return err
			}
		}
	}

	if o.FilterSVMNameQueryParameter != nil {

		// query param filter.svm.name
		var qrFilterSvmName string

		if o.FilterSVMNameQueryParameter != nil {
			qrFilterSvmName = *o.FilterSVMNameQueryParameter
		}
		qFilterSvmName := qrFilterSvmName
		if qFilterSvmName != "" {

			if err := r.SetQueryParam("filter.svm.name", qFilterSvmName); err != nil {
				return err
			}
		}
	}

	if o.FilterSVMUUIDQueryParameter != nil {

		// query param filter.svm.uuid
		var qrFilterSvmUUID string

		if o.FilterSVMUUIDQueryParameter != nil {
			qrFilterSvmUUID = *o.FilterSVMUUIDQueryParameter
		}
		qFilterSvmUUID := qrFilterSvmUUID
		if qFilterSvmUUID != "" {

			if err := r.SetQueryParam("filter.svm.uuid", qFilterSvmUUID); err != nil {
				return err
			}
		}
	}

	if o.FilterTraceAllowedOpsQueryParameter != nil {

		// query param filter.trace_allowed_ops
		var qrFilterTraceAllowedOps bool

		if o.FilterTraceAllowedOpsQueryParameter != nil {
			qrFilterTraceAllowedOps = *o.FilterTraceAllowedOpsQueryParameter
		}
		qFilterTraceAllowedOps := swag.FormatBool(qrFilterTraceAllowedOps)
		if qFilterTraceAllowedOps != "" {

			if err := r.SetQueryParam("filter.trace_allowed_ops", qFilterTraceAllowedOps); err != nil {
				return err
			}
		}
	}

	if o.FilterUnixUserQueryParameter != nil {

		// query param filter.unix_user
		var qrFilterUnixUser string

		if o.FilterUnixUserQueryParameter != nil {
			qrFilterUnixUser = *o.FilterUnixUserQueryParameter
		}
		qFilterUnixUser := qrFilterUnixUser
		if qFilterUnixUser != "" {

			if err := r.SetQueryParam("filter.unix_user", qFilterUnixUser); err != nil {
				return err
			}
		}
	}

	if o.FilterWindowsUserQueryParameter != nil {

		// query param filter.windows_user
		var qrFilterWindowsUser string

		if o.FilterWindowsUserQueryParameter != nil {
			qrFilterWindowsUser = *o.FilterWindowsUserQueryParameter
		}
		qFilterWindowsUser := qrFilterWindowsUser
		if qFilterWindowsUser != "" {

			if err := r.SetQueryParam("filter.windows_user", qFilterWindowsUser); err != nil {
				return err
			}
		}
	}

	if o.IndexQueryParameter != nil {

		// query param index
		var qrIndex int64

		if o.IndexQueryParameter != nil {
			qrIndex = *o.IndexQueryParameter
		}
		qIndex := swag.FormatInt64(qrIndex)
		if qIndex != "" {

			if err := r.SetQueryParam("index", qIndex); err != nil {
				return err
			}
		}
	}

	if o.MaxRecordsQueryParameter != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecordsQueryParameter != nil {
			qrMaxRecords = *o.MaxRecordsQueryParameter
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.NodeNameQueryParameter != nil {

		// query param node.name
		var qrNodeName string

		if o.NodeNameQueryParameter != nil {
			qrNodeName = *o.NodeNameQueryParameter
		}
		qNodeName := qrNodeName
		if qNodeName != "" {

			if err := r.SetQueryParam("node.name", qNodeName); err != nil {
				return err
			}
		}
	}

	if o.NodeUUIDQueryParameter != nil {

		// query param node.uuid
		var qrNodeUUID string

		if o.NodeUUIDQueryParameter != nil {
			qrNodeUUID = *o.NodeUUIDQueryParameter
		}
		qNodeUUID := qrNodeUUID
		if qNodeUUID != "" {

			if err := r.SetQueryParam("node.uuid", qNodeUUID); err != nil {
				return err
			}
		}
	}

	if o.OrderByQueryParameter != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.ReasonMessageQueryParameter != nil {

		// query param reason.message
		var qrReasonMessage string

		if o.ReasonMessageQueryParameter != nil {
			qrReasonMessage = *o.ReasonMessageQueryParameter
		}
		qReasonMessage := qrReasonMessage
		if qReasonMessage != "" {

			if err := r.SetQueryParam("reason.message", qReasonMessage); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecordsQueryParameter != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecordsQueryParameter != nil {
			qrReturnRecords = *o.ReturnRecordsQueryParameter
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeoutQueryParameter != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeoutQueryParameter != nil {
			qrReturnTimeout = *o.ReturnTimeoutQueryParameter
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.SessionIDQueryParameter != nil {

		// query param session_id
		var qrSessionID int64

		if o.SessionIDQueryParameter != nil {
			qrSessionID = *o.SessionIDQueryParameter
		}
		qSessionID := swag.FormatInt64(qrSessionID)
		if qSessionID != "" {

			if err := r.SetQueryParam("session_id", qSessionID); err != nil {
				return err
			}
		}
	}

	if o.ShareNameQueryParameter != nil {

		// query param share.name
		var qrShareName string

		if o.ShareNameQueryParameter != nil {
			qrShareName = *o.ShareNameQueryParameter
		}
		qShareName := qrShareName
		if qShareName != "" {

			if err := r.SetQueryParam("share.name", qShareName); err != nil {
				return err
			}
		}
	}

	if o.SVMNameQueryParameter != nil {

		// query param svm.name
		var qrSvmName string

		if o.SVMNameQueryParameter != nil {
			qrSvmName = *o.SVMNameQueryParameter
		}
		qSvmName := qrSvmName
		if qSvmName != "" {

			if err := r.SetQueryParam("svm.name", qSvmName); err != nil {
				return err
			}
		}
	}

	if o.SVMUUIDQueryParameter != nil {

		// query param svm.uuid
		var qrSvmUUID string

		if o.SVMUUIDQueryParameter != nil {
			qrSvmUUID = *o.SVMUUIDQueryParameter
		}
		qSvmUUID := qrSvmUUID
		if qSvmUUID != "" {

			if err := r.SetQueryParam("svm.uuid", qSvmUUID); err != nil {
				return err
			}
		}
	}

	if o.VolumeNameQueryParameter != nil {

		// query param volume.name
		var qrVolumeName string

		if o.VolumeNameQueryParameter != nil {
			qrVolumeName = *o.VolumeNameQueryParameter
		}
		qVolumeName := qrVolumeName
		if qVolumeName != "" {

			if err := r.SetQueryParam("volume.name", qVolumeName); err != nil {
				return err
			}
		}
	}

	if o.VolumeUUIDQueryParameter != nil {

		// query param volume.uuid
		var qrVolumeUUID string

		if o.VolumeUUIDQueryParameter != nil {
			qrVolumeUUID = *o.VolumeUUIDQueryParameter
		}
		qVolumeUUID := qrVolumeUUID
		if qVolumeUUID != "" {

			if err := r.SetQueryParam("volume.uuid", qVolumeUUID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamFileAccessEventCollectionGet binds the parameter fields
func (o *FileAccessEventCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.FieldsQueryParameter

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamFileAccessEventCollectionGet binds the parameter order_by
func (o *FileAccessEventCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderByQueryParameter

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
