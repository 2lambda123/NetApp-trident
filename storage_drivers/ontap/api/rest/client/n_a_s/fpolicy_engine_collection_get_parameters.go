// Code generated by go-swagger; DO NOT EDIT.

package n_a_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewFpolicyEngineCollectionGetParams creates a new FpolicyEngineCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewFpolicyEngineCollectionGetParams() *FpolicyEngineCollectionGetParams {
	return &FpolicyEngineCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewFpolicyEngineCollectionGetParamsWithTimeout creates a new FpolicyEngineCollectionGetParams object
// with the ability to set a timeout on a request.
func NewFpolicyEngineCollectionGetParamsWithTimeout(timeout time.Duration) *FpolicyEngineCollectionGetParams {
	return &FpolicyEngineCollectionGetParams{
		timeout: timeout,
	}
}

// NewFpolicyEngineCollectionGetParamsWithContext creates a new FpolicyEngineCollectionGetParams object
// with the ability to set a context for a request.
func NewFpolicyEngineCollectionGetParamsWithContext(ctx context.Context) *FpolicyEngineCollectionGetParams {
	return &FpolicyEngineCollectionGetParams{
		Context: ctx,
	}
}

// NewFpolicyEngineCollectionGetParamsWithHTTPClient creates a new FpolicyEngineCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewFpolicyEngineCollectionGetParamsWithHTTPClient(client *http.Client) *FpolicyEngineCollectionGetParams {
	return &FpolicyEngineCollectionGetParams{
		HTTPClient: client,
	}
}

/* FpolicyEngineCollectionGetParams contains all the parameters to send to the API endpoint
   for the fpolicy engine collection get operation.

   Typically these are written to a http.Request.
*/
type FpolicyEngineCollectionGetParams struct {

	/* BufferSizeRecvBuffer.

	   Filter by buffer_size.recv_buffer
	*/
	BufferSizeRecvBufferQueryParameter *int64

	/* BufferSizeSendBuffer.

	   Filter by buffer_size.send_buffer
	*/
	BufferSizeSendBufferQueryParameter *int64

	/* CertificateCa.

	   Filter by certificate.ca
	*/
	CertificateCaQueryParameter *string

	/* CertificateName.

	   Filter by certificate.name
	*/
	CertificateNameQueryParameter *string

	/* CertificateSerialNumber.

	   Filter by certificate.serial_number
	*/
	CertificateSerialNumberQueryParameter *string

	/* Fields.

	   Specify the fields to return.
	*/
	FieldsQueryParameter []string

	/* Format.

	   Filter by format
	*/
	FormatQueryParameter *string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecordsQueryParameter *int64

	/* MaxServerRequests.

	   Filter by max_server_requests
	*/
	MaxServerRequestsQueryParameter *int64

	/* Name.

	   Filter by name
	*/
	NameQueryParameter *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderByQueryParameter []string

	/* Port.

	   Filter by port
	*/
	PortQueryParameter *int64

	/* PrimaryServers.

	   Filter by primary_servers
	*/
	PrimaryServersQueryParameter *string

	/* RequestAbortTimeout.

	   Filter by request_abort_timeout
	*/
	RequestAbortTimeoutQueryParameter *string

	/* RequestCancelTimeout.

	   Filter by request_cancel_timeout
	*/
	RequestCancelTimeoutQueryParameter *string

	/* ResiliencyDirectoryPath.

	   Filter by resiliency.directory_path
	*/
	ResiliencyDirectoryPathQueryParameter *string

	/* ResiliencyEnabled.

	   Filter by resiliency.enabled
	*/
	ResiliencyEnabledQueryParameter *bool

	/* ResiliencyRetentionDuration.

	   Filter by resiliency.retention_duration
	*/
	ResiliencyRetentionDurationQueryParameter *string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecordsQueryParameter *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeoutQueryParameter *int64

	/* SecondaryServers.

	   Filter by secondary_servers
	*/
	SecondaryServersQueryParameter *string

	/* ServerProgressTimeout.

	   Filter by server_progress_timeout
	*/
	ServerProgressTimeoutQueryParameter *string

	/* SslOption.

	   Filter by ssl_option
	*/
	SslOptionQueryParameter *string

	/* StatusRequestInterval.

	   Filter by status_request_interval
	*/
	StatusRequestIntervalQueryParameter *string

	/* SvmUUID.

	   UUID of the SVM to which this object belongs.
	*/
	SVMUUIDPathParameter string

	/* Type.

	   Filter by type
	*/
	TypeQueryParameter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the fpolicy engine collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FpolicyEngineCollectionGetParams) WithDefaults() *FpolicyEngineCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the fpolicy engine collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FpolicyEngineCollectionGetParams) SetDefaults() {
	var (
		returnRecordsQueryParameterDefault = bool(true)

		returnTimeoutQueryParameterDefault = int64(15)
	)

	val := FpolicyEngineCollectionGetParams{
		ReturnRecordsQueryParameter: &returnRecordsQueryParameterDefault,
		ReturnTimeoutQueryParameter: &returnTimeoutQueryParameterDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) WithTimeout(timeout time.Duration) *FpolicyEngineCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) WithContext(ctx context.Context) *FpolicyEngineCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) WithHTTPClient(client *http.Client) *FpolicyEngineCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBufferSizeRecvBufferQueryParameter adds the bufferSizeRecvBuffer to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) WithBufferSizeRecvBufferQueryParameter(bufferSizeRecvBuffer *int64) *FpolicyEngineCollectionGetParams {
	o.SetBufferSizeRecvBufferQueryParameter(bufferSizeRecvBuffer)
	return o
}

// SetBufferSizeRecvBufferQueryParameter adds the bufferSizeRecvBuffer to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) SetBufferSizeRecvBufferQueryParameter(bufferSizeRecvBuffer *int64) {
	o.BufferSizeRecvBufferQueryParameter = bufferSizeRecvBuffer
}

// WithBufferSizeSendBufferQueryParameter adds the bufferSizeSendBuffer to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) WithBufferSizeSendBufferQueryParameter(bufferSizeSendBuffer *int64) *FpolicyEngineCollectionGetParams {
	o.SetBufferSizeSendBufferQueryParameter(bufferSizeSendBuffer)
	return o
}

// SetBufferSizeSendBufferQueryParameter adds the bufferSizeSendBuffer to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) SetBufferSizeSendBufferQueryParameter(bufferSizeSendBuffer *int64) {
	o.BufferSizeSendBufferQueryParameter = bufferSizeSendBuffer
}

// WithCertificateCaQueryParameter adds the certificateCa to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) WithCertificateCaQueryParameter(certificateCa *string) *FpolicyEngineCollectionGetParams {
	o.SetCertificateCaQueryParameter(certificateCa)
	return o
}

// SetCertificateCaQueryParameter adds the certificateCa to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) SetCertificateCaQueryParameter(certificateCa *string) {
	o.CertificateCaQueryParameter = certificateCa
}

// WithCertificateNameQueryParameter adds the certificateName to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) WithCertificateNameQueryParameter(certificateName *string) *FpolicyEngineCollectionGetParams {
	o.SetCertificateNameQueryParameter(certificateName)
	return o
}

// SetCertificateNameQueryParameter adds the certificateName to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) SetCertificateNameQueryParameter(certificateName *string) {
	o.CertificateNameQueryParameter = certificateName
}

// WithCertificateSerialNumberQueryParameter adds the certificateSerialNumber to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) WithCertificateSerialNumberQueryParameter(certificateSerialNumber *string) *FpolicyEngineCollectionGetParams {
	o.SetCertificateSerialNumberQueryParameter(certificateSerialNumber)
	return o
}

// SetCertificateSerialNumberQueryParameter adds the certificateSerialNumber to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) SetCertificateSerialNumberQueryParameter(certificateSerialNumber *string) {
	o.CertificateSerialNumberQueryParameter = certificateSerialNumber
}

// WithFieldsQueryParameter adds the fields to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) WithFieldsQueryParameter(fields []string) *FpolicyEngineCollectionGetParams {
	o.SetFieldsQueryParameter(fields)
	return o
}

// SetFieldsQueryParameter adds the fields to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) SetFieldsQueryParameter(fields []string) {
	o.FieldsQueryParameter = fields
}

// WithFormatQueryParameter adds the format to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) WithFormatQueryParameter(format *string) *FpolicyEngineCollectionGetParams {
	o.SetFormatQueryParameter(format)
	return o
}

// SetFormatQueryParameter adds the format to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) SetFormatQueryParameter(format *string) {
	o.FormatQueryParameter = format
}

// WithMaxRecordsQueryParameter adds the maxRecords to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) WithMaxRecordsQueryParameter(maxRecords *int64) *FpolicyEngineCollectionGetParams {
	o.SetMaxRecordsQueryParameter(maxRecords)
	return o
}

// SetMaxRecordsQueryParameter adds the maxRecords to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) SetMaxRecordsQueryParameter(maxRecords *int64) {
	o.MaxRecordsQueryParameter = maxRecords
}

// WithMaxServerRequestsQueryParameter adds the maxServerRequests to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) WithMaxServerRequestsQueryParameter(maxServerRequests *int64) *FpolicyEngineCollectionGetParams {
	o.SetMaxServerRequestsQueryParameter(maxServerRequests)
	return o
}

// SetMaxServerRequestsQueryParameter adds the maxServerRequests to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) SetMaxServerRequestsQueryParameter(maxServerRequests *int64) {
	o.MaxServerRequestsQueryParameter = maxServerRequests
}

// WithNameQueryParameter adds the name to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) WithNameQueryParameter(name *string) *FpolicyEngineCollectionGetParams {
	o.SetNameQueryParameter(name)
	return o
}

// SetNameQueryParameter adds the name to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) SetNameQueryParameter(name *string) {
	o.NameQueryParameter = name
}

// WithOrderByQueryParameter adds the orderBy to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) WithOrderByQueryParameter(orderBy []string) *FpolicyEngineCollectionGetParams {
	o.SetOrderByQueryParameter(orderBy)
	return o
}

// SetOrderByQueryParameter adds the orderBy to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) SetOrderByQueryParameter(orderBy []string) {
	o.OrderByQueryParameter = orderBy
}

// WithPortQueryParameter adds the port to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) WithPortQueryParameter(port *int64) *FpolicyEngineCollectionGetParams {
	o.SetPortQueryParameter(port)
	return o
}

// SetPortQueryParameter adds the port to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) SetPortQueryParameter(port *int64) {
	o.PortQueryParameter = port
}

// WithPrimaryServersQueryParameter adds the primaryServers to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) WithPrimaryServersQueryParameter(primaryServers *string) *FpolicyEngineCollectionGetParams {
	o.SetPrimaryServersQueryParameter(primaryServers)
	return o
}

// SetPrimaryServersQueryParameter adds the primaryServers to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) SetPrimaryServersQueryParameter(primaryServers *string) {
	o.PrimaryServersQueryParameter = primaryServers
}

// WithRequestAbortTimeoutQueryParameter adds the requestAbortTimeout to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) WithRequestAbortTimeoutQueryParameter(requestAbortTimeout *string) *FpolicyEngineCollectionGetParams {
	o.SetRequestAbortTimeoutQueryParameter(requestAbortTimeout)
	return o
}

// SetRequestAbortTimeoutQueryParameter adds the requestAbortTimeout to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) SetRequestAbortTimeoutQueryParameter(requestAbortTimeout *string) {
	o.RequestAbortTimeoutQueryParameter = requestAbortTimeout
}

// WithRequestCancelTimeoutQueryParameter adds the requestCancelTimeout to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) WithRequestCancelTimeoutQueryParameter(requestCancelTimeout *string) *FpolicyEngineCollectionGetParams {
	o.SetRequestCancelTimeoutQueryParameter(requestCancelTimeout)
	return o
}

// SetRequestCancelTimeoutQueryParameter adds the requestCancelTimeout to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) SetRequestCancelTimeoutQueryParameter(requestCancelTimeout *string) {
	o.RequestCancelTimeoutQueryParameter = requestCancelTimeout
}

// WithResiliencyDirectoryPathQueryParameter adds the resiliencyDirectoryPath to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) WithResiliencyDirectoryPathQueryParameter(resiliencyDirectoryPath *string) *FpolicyEngineCollectionGetParams {
	o.SetResiliencyDirectoryPathQueryParameter(resiliencyDirectoryPath)
	return o
}

// SetResiliencyDirectoryPathQueryParameter adds the resiliencyDirectoryPath to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) SetResiliencyDirectoryPathQueryParameter(resiliencyDirectoryPath *string) {
	o.ResiliencyDirectoryPathQueryParameter = resiliencyDirectoryPath
}

// WithResiliencyEnabledQueryParameter adds the resiliencyEnabled to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) WithResiliencyEnabledQueryParameter(resiliencyEnabled *bool) *FpolicyEngineCollectionGetParams {
	o.SetResiliencyEnabledQueryParameter(resiliencyEnabled)
	return o
}

// SetResiliencyEnabledQueryParameter adds the resiliencyEnabled to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) SetResiliencyEnabledQueryParameter(resiliencyEnabled *bool) {
	o.ResiliencyEnabledQueryParameter = resiliencyEnabled
}

// WithResiliencyRetentionDurationQueryParameter adds the resiliencyRetentionDuration to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) WithResiliencyRetentionDurationQueryParameter(resiliencyRetentionDuration *string) *FpolicyEngineCollectionGetParams {
	o.SetResiliencyRetentionDurationQueryParameter(resiliencyRetentionDuration)
	return o
}

// SetResiliencyRetentionDurationQueryParameter adds the resiliencyRetentionDuration to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) SetResiliencyRetentionDurationQueryParameter(resiliencyRetentionDuration *string) {
	o.ResiliencyRetentionDurationQueryParameter = resiliencyRetentionDuration
}

// WithReturnRecordsQueryParameter adds the returnRecords to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) WithReturnRecordsQueryParameter(returnRecords *bool) *FpolicyEngineCollectionGetParams {
	o.SetReturnRecordsQueryParameter(returnRecords)
	return o
}

// SetReturnRecordsQueryParameter adds the returnRecords to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) SetReturnRecordsQueryParameter(returnRecords *bool) {
	o.ReturnRecordsQueryParameter = returnRecords
}

// WithReturnTimeoutQueryParameter adds the returnTimeout to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) WithReturnTimeoutQueryParameter(returnTimeout *int64) *FpolicyEngineCollectionGetParams {
	o.SetReturnTimeoutQueryParameter(returnTimeout)
	return o
}

// SetReturnTimeoutQueryParameter adds the returnTimeout to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) SetReturnTimeoutQueryParameter(returnTimeout *int64) {
	o.ReturnTimeoutQueryParameter = returnTimeout
}

// WithSecondaryServersQueryParameter adds the secondaryServers to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) WithSecondaryServersQueryParameter(secondaryServers *string) *FpolicyEngineCollectionGetParams {
	o.SetSecondaryServersQueryParameter(secondaryServers)
	return o
}

// SetSecondaryServersQueryParameter adds the secondaryServers to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) SetSecondaryServersQueryParameter(secondaryServers *string) {
	o.SecondaryServersQueryParameter = secondaryServers
}

// WithServerProgressTimeoutQueryParameter adds the serverProgressTimeout to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) WithServerProgressTimeoutQueryParameter(serverProgressTimeout *string) *FpolicyEngineCollectionGetParams {
	o.SetServerProgressTimeoutQueryParameter(serverProgressTimeout)
	return o
}

// SetServerProgressTimeoutQueryParameter adds the serverProgressTimeout to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) SetServerProgressTimeoutQueryParameter(serverProgressTimeout *string) {
	o.ServerProgressTimeoutQueryParameter = serverProgressTimeout
}

// WithSslOptionQueryParameter adds the sslOption to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) WithSslOptionQueryParameter(sslOption *string) *FpolicyEngineCollectionGetParams {
	o.SetSslOptionQueryParameter(sslOption)
	return o
}

// SetSslOptionQueryParameter adds the sslOption to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) SetSslOptionQueryParameter(sslOption *string) {
	o.SslOptionQueryParameter = sslOption
}

// WithStatusRequestIntervalQueryParameter adds the statusRequestInterval to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) WithStatusRequestIntervalQueryParameter(statusRequestInterval *string) *FpolicyEngineCollectionGetParams {
	o.SetStatusRequestIntervalQueryParameter(statusRequestInterval)
	return o
}

// SetStatusRequestIntervalQueryParameter adds the statusRequestInterval to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) SetStatusRequestIntervalQueryParameter(statusRequestInterval *string) {
	o.StatusRequestIntervalQueryParameter = statusRequestInterval
}

// WithSVMUUIDPathParameter adds the svmUUID to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) WithSVMUUIDPathParameter(svmUUID string) *FpolicyEngineCollectionGetParams {
	o.SetSVMUUIDPathParameter(svmUUID)
	return o
}

// SetSVMUUIDPathParameter adds the svmUuid to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) SetSVMUUIDPathParameter(svmUUID string) {
	o.SVMUUIDPathParameter = svmUUID
}

// WithTypeQueryParameter adds the typeVar to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) WithTypeQueryParameter(typeVar *string) *FpolicyEngineCollectionGetParams {
	o.SetTypeQueryParameter(typeVar)
	return o
}

// SetTypeQueryParameter adds the type to the fpolicy engine collection get params
func (o *FpolicyEngineCollectionGetParams) SetTypeQueryParameter(typeVar *string) {
	o.TypeQueryParameter = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *FpolicyEngineCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.BufferSizeRecvBufferQueryParameter != nil {

		// query param buffer_size.recv_buffer
		var qrBufferSizeRecvBuffer int64

		if o.BufferSizeRecvBufferQueryParameter != nil {
			qrBufferSizeRecvBuffer = *o.BufferSizeRecvBufferQueryParameter
		}
		qBufferSizeRecvBuffer := swag.FormatInt64(qrBufferSizeRecvBuffer)
		if qBufferSizeRecvBuffer != "" {

			if err := r.SetQueryParam("buffer_size.recv_buffer", qBufferSizeRecvBuffer); err != nil {
				return err
			}
		}
	}

	if o.BufferSizeSendBufferQueryParameter != nil {

		// query param buffer_size.send_buffer
		var qrBufferSizeSendBuffer int64

		if o.BufferSizeSendBufferQueryParameter != nil {
			qrBufferSizeSendBuffer = *o.BufferSizeSendBufferQueryParameter
		}
		qBufferSizeSendBuffer := swag.FormatInt64(qrBufferSizeSendBuffer)
		if qBufferSizeSendBuffer != "" {

			if err := r.SetQueryParam("buffer_size.send_buffer", qBufferSizeSendBuffer); err != nil {
				return err
			}
		}
	}

	if o.CertificateCaQueryParameter != nil {

		// query param certificate.ca
		var qrCertificateCa string

		if o.CertificateCaQueryParameter != nil {
			qrCertificateCa = *o.CertificateCaQueryParameter
		}
		qCertificateCa := qrCertificateCa
		if qCertificateCa != "" {

			if err := r.SetQueryParam("certificate.ca", qCertificateCa); err != nil {
				return err
			}
		}
	}

	if o.CertificateNameQueryParameter != nil {

		// query param certificate.name
		var qrCertificateName string

		if o.CertificateNameQueryParameter != nil {
			qrCertificateName = *o.CertificateNameQueryParameter
		}
		qCertificateName := qrCertificateName
		if qCertificateName != "" {

			if err := r.SetQueryParam("certificate.name", qCertificateName); err != nil {
				return err
			}
		}
	}

	if o.CertificateSerialNumberQueryParameter != nil {

		// query param certificate.serial_number
		var qrCertificateSerialNumber string

		if o.CertificateSerialNumberQueryParameter != nil {
			qrCertificateSerialNumber = *o.CertificateSerialNumberQueryParameter
		}
		qCertificateSerialNumber := qrCertificateSerialNumber
		if qCertificateSerialNumber != "" {

			if err := r.SetQueryParam("certificate.serial_number", qCertificateSerialNumber); err != nil {
				return err
			}
		}
	}

	if o.FieldsQueryParameter != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.FormatQueryParameter != nil {

		// query param format
		var qrFormat string

		if o.FormatQueryParameter != nil {
			qrFormat = *o.FormatQueryParameter
		}
		qFormat := qrFormat
		if qFormat != "" {

			if err := r.SetQueryParam("format", qFormat); err != nil {
				return err
			}
		}
	}

	if o.MaxRecordsQueryParameter != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecordsQueryParameter != nil {
			qrMaxRecords = *o.MaxRecordsQueryParameter
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.MaxServerRequestsQueryParameter != nil {

		// query param max_server_requests
		var qrMaxServerRequests int64

		if o.MaxServerRequestsQueryParameter != nil {
			qrMaxServerRequests = *o.MaxServerRequestsQueryParameter
		}
		qMaxServerRequests := swag.FormatInt64(qrMaxServerRequests)
		if qMaxServerRequests != "" {

			if err := r.SetQueryParam("max_server_requests", qMaxServerRequests); err != nil {
				return err
			}
		}
	}

	if o.NameQueryParameter != nil {

		// query param name
		var qrName string

		if o.NameQueryParameter != nil {
			qrName = *o.NameQueryParameter
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.OrderByQueryParameter != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.PortQueryParameter != nil {

		// query param port
		var qrPort int64

		if o.PortQueryParameter != nil {
			qrPort = *o.PortQueryParameter
		}
		qPort := swag.FormatInt64(qrPort)
		if qPort != "" {

			if err := r.SetQueryParam("port", qPort); err != nil {
				return err
			}
		}
	}

	if o.PrimaryServersQueryParameter != nil {

		// query param primary_servers
		var qrPrimaryServers string

		if o.PrimaryServersQueryParameter != nil {
			qrPrimaryServers = *o.PrimaryServersQueryParameter
		}
		qPrimaryServers := qrPrimaryServers
		if qPrimaryServers != "" {

			if err := r.SetQueryParam("primary_servers", qPrimaryServers); err != nil {
				return err
			}
		}
	}

	if o.RequestAbortTimeoutQueryParameter != nil {

		// query param request_abort_timeout
		var qrRequestAbortTimeout string

		if o.RequestAbortTimeoutQueryParameter != nil {
			qrRequestAbortTimeout = *o.RequestAbortTimeoutQueryParameter
		}
		qRequestAbortTimeout := qrRequestAbortTimeout
		if qRequestAbortTimeout != "" {

			if err := r.SetQueryParam("request_abort_timeout", qRequestAbortTimeout); err != nil {
				return err
			}
		}
	}

	if o.RequestCancelTimeoutQueryParameter != nil {

		// query param request_cancel_timeout
		var qrRequestCancelTimeout string

		if o.RequestCancelTimeoutQueryParameter != nil {
			qrRequestCancelTimeout = *o.RequestCancelTimeoutQueryParameter
		}
		qRequestCancelTimeout := qrRequestCancelTimeout
		if qRequestCancelTimeout != "" {

			if err := r.SetQueryParam("request_cancel_timeout", qRequestCancelTimeout); err != nil {
				return err
			}
		}
	}

	if o.ResiliencyDirectoryPathQueryParameter != nil {

		// query param resiliency.directory_path
		var qrResiliencyDirectoryPath string

		if o.ResiliencyDirectoryPathQueryParameter != nil {
			qrResiliencyDirectoryPath = *o.ResiliencyDirectoryPathQueryParameter
		}
		qResiliencyDirectoryPath := qrResiliencyDirectoryPath
		if qResiliencyDirectoryPath != "" {

			if err := r.SetQueryParam("resiliency.directory_path", qResiliencyDirectoryPath); err != nil {
				return err
			}
		}
	}

	if o.ResiliencyEnabledQueryParameter != nil {

		// query param resiliency.enabled
		var qrResiliencyEnabled bool

		if o.ResiliencyEnabledQueryParameter != nil {
			qrResiliencyEnabled = *o.ResiliencyEnabledQueryParameter
		}
		qResiliencyEnabled := swag.FormatBool(qrResiliencyEnabled)
		if qResiliencyEnabled != "" {

			if err := r.SetQueryParam("resiliency.enabled", qResiliencyEnabled); err != nil {
				return err
			}
		}
	}

	if o.ResiliencyRetentionDurationQueryParameter != nil {

		// query param resiliency.retention_duration
		var qrResiliencyRetentionDuration string

		if o.ResiliencyRetentionDurationQueryParameter != nil {
			qrResiliencyRetentionDuration = *o.ResiliencyRetentionDurationQueryParameter
		}
		qResiliencyRetentionDuration := qrResiliencyRetentionDuration
		if qResiliencyRetentionDuration != "" {

			if err := r.SetQueryParam("resiliency.retention_duration", qResiliencyRetentionDuration); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecordsQueryParameter != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecordsQueryParameter != nil {
			qrReturnRecords = *o.ReturnRecordsQueryParameter
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeoutQueryParameter != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeoutQueryParameter != nil {
			qrReturnTimeout = *o.ReturnTimeoutQueryParameter
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.SecondaryServersQueryParameter != nil {

		// query param secondary_servers
		var qrSecondaryServers string

		if o.SecondaryServersQueryParameter != nil {
			qrSecondaryServers = *o.SecondaryServersQueryParameter
		}
		qSecondaryServers := qrSecondaryServers
		if qSecondaryServers != "" {

			if err := r.SetQueryParam("secondary_servers", qSecondaryServers); err != nil {
				return err
			}
		}
	}

	if o.ServerProgressTimeoutQueryParameter != nil {

		// query param server_progress_timeout
		var qrServerProgressTimeout string

		if o.ServerProgressTimeoutQueryParameter != nil {
			qrServerProgressTimeout = *o.ServerProgressTimeoutQueryParameter
		}
		qServerProgressTimeout := qrServerProgressTimeout
		if qServerProgressTimeout != "" {

			if err := r.SetQueryParam("server_progress_timeout", qServerProgressTimeout); err != nil {
				return err
			}
		}
	}

	if o.SslOptionQueryParameter != nil {

		// query param ssl_option
		var qrSslOption string

		if o.SslOptionQueryParameter != nil {
			qrSslOption = *o.SslOptionQueryParameter
		}
		qSslOption := qrSslOption
		if qSslOption != "" {

			if err := r.SetQueryParam("ssl_option", qSslOption); err != nil {
				return err
			}
		}
	}

	if o.StatusRequestIntervalQueryParameter != nil {

		// query param status_request_interval
		var qrStatusRequestInterval string

		if o.StatusRequestIntervalQueryParameter != nil {
			qrStatusRequestInterval = *o.StatusRequestIntervalQueryParameter
		}
		qStatusRequestInterval := qrStatusRequestInterval
		if qStatusRequestInterval != "" {

			if err := r.SetQueryParam("status_request_interval", qStatusRequestInterval); err != nil {
				return err
			}
		}
	}

	// path param svm.uuid
	if err := r.SetPathParam("svm.uuid", o.SVMUUIDPathParameter); err != nil {
		return err
	}

	if o.TypeQueryParameter != nil {

		// query param type
		var qrType string

		if o.TypeQueryParameter != nil {
			qrType = *o.TypeQueryParameter
		}
		qType := qrType
		if qType != "" {

			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamFpolicyEngineCollectionGet binds the parameter fields
func (o *FpolicyEngineCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.FieldsQueryParameter

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamFpolicyEngineCollectionGet binds the parameter order_by
func (o *FpolicyEngineCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderByQueryParameter

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
