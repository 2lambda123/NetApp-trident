// Code generated by go-swagger; DO NOT EDIT.

package n_a_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewFpolicyCollectionGetParams creates a new FpolicyCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewFpolicyCollectionGetParams() *FpolicyCollectionGetParams {
	return &FpolicyCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewFpolicyCollectionGetParamsWithTimeout creates a new FpolicyCollectionGetParams object
// with the ability to set a timeout on a request.
func NewFpolicyCollectionGetParamsWithTimeout(timeout time.Duration) *FpolicyCollectionGetParams {
	return &FpolicyCollectionGetParams{
		timeout: timeout,
	}
}

// NewFpolicyCollectionGetParamsWithContext creates a new FpolicyCollectionGetParams object
// with the ability to set a context for a request.
func NewFpolicyCollectionGetParamsWithContext(ctx context.Context) *FpolicyCollectionGetParams {
	return &FpolicyCollectionGetParams{
		Context: ctx,
	}
}

// NewFpolicyCollectionGetParamsWithHTTPClient creates a new FpolicyCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewFpolicyCollectionGetParamsWithHTTPClient(client *http.Client) *FpolicyCollectionGetParams {
	return &FpolicyCollectionGetParams{
		HTTPClient: client,
	}
}

/* FpolicyCollectionGetParams contains all the parameters to send to the API endpoint
   for the fpolicy collection get operation.

   Typically these are written to a http.Request.
*/
type FpolicyCollectionGetParams struct {

	/* EnginesBufferSizeRecvBuffer.

	   Filter by engines.buffer_size.recv_buffer
	*/
	EnginesBufferSizeRecvBufferQueryParameter *int64

	/* EnginesBufferSizeSendBuffer.

	   Filter by engines.buffer_size.send_buffer
	*/
	EnginesBufferSizeSendBufferQueryParameter *int64

	/* EnginesCertificateCa.

	   Filter by engines.certificate.ca
	*/
	EnginesCertificateCaQueryParameter *string

	/* EnginesCertificateName.

	   Filter by engines.certificate.name
	*/
	EnginesCertificateNameQueryParameter *string

	/* EnginesCertificateSerialNumber.

	   Filter by engines.certificate.serial_number
	*/
	EnginesCertificateSerialNumberQueryParameter *string

	/* EnginesFormat.

	   Filter by engines.format
	*/
	EnginesFormatQueryParameter *string

	/* EnginesMaxServerRequests.

	   Filter by engines.max_server_requests
	*/
	EnginesMaxServerRequestsQueryParameter *int64

	/* EnginesName.

	   Filter by engines.name
	*/
	EnginesNameQueryParameter *string

	/* EnginesPort.

	   Filter by engines.port
	*/
	EnginesPortQueryParameter *int64

	/* EnginesPrimaryServers.

	   Filter by engines.primary_servers
	*/
	EnginesPrimaryServersQueryParameter *string

	/* EnginesRequestAbortTimeout.

	   Filter by engines.request_abort_timeout
	*/
	EnginesRequestAbortTimeoutQueryParameter *string

	/* EnginesRequestCancelTimeout.

	   Filter by engines.request_cancel_timeout
	*/
	EnginesRequestCancelTimeoutQueryParameter *string

	/* EnginesResiliencyDirectoryPath.

	   Filter by engines.resiliency.directory_path
	*/
	EnginesResiliencyDirectoryPathQueryParameter *string

	/* EnginesResiliencyEnabled.

	   Filter by engines.resiliency.enabled
	*/
	EnginesResiliencyEnabledQueryParameter *bool

	/* EnginesResiliencyRetentionDuration.

	   Filter by engines.resiliency.retention_duration
	*/
	EnginesResiliencyRetentionDurationQueryParameter *string

	/* EnginesSecondaryServers.

	   Filter by engines.secondary_servers
	*/
	EnginesSecondaryServersQueryParameter *string

	/* EnginesServerProgressTimeout.

	   Filter by engines.server_progress_timeout
	*/
	EnginesServerProgressTimeoutQueryParameter *string

	/* EnginesSslOption.

	   Filter by engines.ssl_option
	*/
	EnginesSslOptionQueryParameter *string

	/* EnginesStatusRequestInterval.

	   Filter by engines.status_request_interval
	*/
	EnginesStatusRequestIntervalQueryParameter *string

	/* EnginesType.

	   Filter by engines.type
	*/
	EnginesTypeQueryParameter *string

	/* EventsFileOperationsClose.

	   Filter by events.file_operations.close
	*/
	EventsFileOperationsCloseQueryParameter *bool

	/* EventsFileOperationsCreate.

	   Filter by events.file_operations.create
	*/
	EventsFileOperationsCreateQueryParameter *bool

	/* EventsFileOperationsCreateDir.

	   Filter by events.file_operations.create_dir
	*/
	EventsFileOperationsCreateDirQueryParameter *bool

	/* EventsFileOperationsDelete.

	   Filter by events.file_operations.delete
	*/
	EventsFileOperationsDeleteQueryParameter *bool

	/* EventsFileOperationsDeleteDir.

	   Filter by events.file_operations.delete_dir
	*/
	EventsFileOperationsDeleteDirQueryParameter *bool

	/* EventsFileOperationsGetattr.

	   Filter by events.file_operations.getattr
	*/
	EventsFileOperationsGetattrQueryParameter *bool

	/* EventsFileOperationsLink.

	   Filter by events.file_operations.link
	*/
	EventsFileOperationsLinkQueryParameter *bool

	/* EventsFileOperationsLookup.

	   Filter by events.file_operations.lookup
	*/
	EventsFileOperationsLookupQueryParameter *bool

	/* EventsFileOperationsOpen.

	   Filter by events.file_operations.open
	*/
	EventsFileOperationsOpenQueryParameter *bool

	/* EventsFileOperationsRead.

	   Filter by events.file_operations.read
	*/
	EventsFileOperationsReadQueryParameter *bool

	/* EventsFileOperationsRename.

	   Filter by events.file_operations.rename
	*/
	EventsFileOperationsRenameQueryParameter *bool

	/* EventsFileOperationsRenameDir.

	   Filter by events.file_operations.rename_dir
	*/
	EventsFileOperationsRenameDirQueryParameter *bool

	/* EventsFileOperationsSetattr.

	   Filter by events.file_operations.setattr
	*/
	EventsFileOperationsSetattrQueryParameter *bool

	/* EventsFileOperationsSymlink.

	   Filter by events.file_operations.symlink
	*/
	EventsFileOperationsSymlinkQueryParameter *bool

	/* EventsFileOperationsWrite.

	   Filter by events.file_operations.write
	*/
	EventsFileOperationsWriteQueryParameter *bool

	/* EventsFiltersCloseWithModification.

	   Filter by events.filters.close_with_modification
	*/
	EventsFiltersCloseWithModificationQueryParameter *bool

	/* EventsFiltersCloseWithRead.

	   Filter by events.filters.close_with_read
	*/
	EventsFiltersCloseWithReadQueryParameter *bool

	/* EventsFiltersCloseWithoutModification.

	   Filter by events.filters.close_without_modification
	*/
	EventsFiltersCloseWithoutModificationQueryParameter *bool

	/* EventsFiltersExcludeDirectory.

	   Filter by events.filters.exclude_directory
	*/
	EventsFiltersExcludeDirectoryQueryParameter *bool

	/* EventsFiltersFirstRead.

	   Filter by events.filters.first_read
	*/
	EventsFiltersFirstReadQueryParameter *bool

	/* EventsFiltersFirstWrite.

	   Filter by events.filters.first_write
	*/
	EventsFiltersFirstWriteQueryParameter *bool

	/* EventsFiltersMonitorAds.

	   Filter by events.filters.monitor_ads
	*/
	EventsFiltersMonitorAdsQueryParameter *bool

	/* EventsFiltersOfflineBit.

	   Filter by events.filters.offline_bit
	*/
	EventsFiltersOfflineBitQueryParameter *bool

	/* EventsFiltersOpenWithDeleteIntent.

	   Filter by events.filters.open_with_delete_intent
	*/
	EventsFiltersOpenWithDeleteIntentQueryParameter *bool

	/* EventsFiltersOpenWithWriteIntent.

	   Filter by events.filters.open_with_write_intent
	*/
	EventsFiltersOpenWithWriteIntentQueryParameter *bool

	/* EventsFiltersSetattrWithAccessTimeChange.

	   Filter by events.filters.setattr_with_access_time_change
	*/
	EventsFiltersSetattrWithAccessTimeChangeQueryParameter *bool

	/* EventsFiltersSetattrWithAllocationSizeChange.

	   Filter by events.filters.setattr_with_allocation_size_change
	*/
	EventsFiltersSetattrWithAllocationSizeChangeQueryParameter *bool

	/* EventsFiltersSetattrWithCreationTimeChange.

	   Filter by events.filters.setattr_with_creation_time_change
	*/
	EventsFiltersSetattrWithCreationTimeChangeQueryParameter *bool

	/* EventsFiltersSetattrWithDaclChange.

	   Filter by events.filters.setattr_with_dacl_change
	*/
	EventsFiltersSetattrWithDACLChangeQueryParameter *bool

	/* EventsFiltersSetattrWithGroupChange.

	   Filter by events.filters.setattr_with_group_change
	*/
	EventsFiltersSetattrWithGroupChangeQueryParameter *bool

	/* EventsFiltersSetattrWithModeChange.

	   Filter by events.filters.setattr_with_mode_change
	*/
	EventsFiltersSetattrWithModeChangeQueryParameter *bool

	/* EventsFiltersSetattrWithModifyTimeChange.

	   Filter by events.filters.setattr_with_modify_time_change
	*/
	EventsFiltersSetattrWithModifyTimeChangeQueryParameter *bool

	/* EventsFiltersSetattrWithOwnerChange.

	   Filter by events.filters.setattr_with_owner_change
	*/
	EventsFiltersSetattrWithOwnerChangeQueryParameter *bool

	/* EventsFiltersSetattrWithSaclChange.

	   Filter by events.filters.setattr_with_sacl_change
	*/
	EventsFiltersSetattrWithSACLChangeQueryParameter *bool

	/* EventsFiltersSetattrWithSizeChange.

	   Filter by events.filters.setattr_with_size_change
	*/
	EventsFiltersSetattrWithSizeChangeQueryParameter *bool

	/* EventsFiltersWriteWithSizeChange.

	   Filter by events.filters.write_with_size_change
	*/
	EventsFiltersWriteWithSizeChangeQueryParameter *bool

	/* EventsName.

	   Filter by events.name
	*/
	EventsNameQueryParameter *string

	/* EventsProtocol.

	   Filter by events.protocol
	*/
	EventsProtocolQueryParameter *string

	/* EventsVolumeMonitoring.

	   Filter by events.volume_monitoring
	*/
	EventsVolumeMonitoringQueryParameter *bool

	/* Fields.

	   Specify the fields to return.
	*/
	FieldsQueryParameter []string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecordsQueryParameter *int64

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderByQueryParameter []string

	/* PoliciesEnabled.

	   Filter by policies.enabled
	*/
	PoliciesEnabledQueryParameter *bool

	/* PoliciesEngineName.

	   Filter by policies.engine.name
	*/
	PoliciesEngineNameQueryParameter *string

	/* PoliciesEventsName.

	   Filter by policies.events.name
	*/
	PoliciesEventsNameQueryParameter *string

	/* PoliciesMandatory.

	   Filter by policies.mandatory
	*/
	PoliciesMandatoryQueryParameter *bool

	/* PoliciesName.

	   Filter by policies.name
	*/
	PoliciesNameQueryParameter *string

	/* PoliciesPassthroughRead.

	   Filter by policies.passthrough_read
	*/
	PoliciesPassthroughReadQueryParameter *bool

	/* PoliciesPriority.

	   Filter by policies.priority
	*/
	PoliciesPriorityQueryParameter *int64

	/* PoliciesPrivilegedUser.

	   Filter by policies.privileged_user
	*/
	PoliciesPrivilegedUserQueryParameter *string

	/* PoliciesScopeCheckExtensionsOnDirectories.

	   Filter by policies.scope.check_extensions_on_directories
	*/
	PoliciesScopeCheckExtensionsOnDirectoriesQueryParameter *bool

	/* PoliciesScopeExcludeExportPolicies.

	   Filter by policies.scope.exclude_export_policies
	*/
	PoliciesScopeExcludeExportPoliciesQueryParameter *string

	/* PoliciesScopeExcludeExtension.

	   Filter by policies.scope.exclude_extension
	*/
	PoliciesScopeExcludeExtensionQueryParameter *string

	/* PoliciesScopeExcludeShares.

	   Filter by policies.scope.exclude_shares
	*/
	PoliciesScopeExcludeSharesQueryParameter *string

	/* PoliciesScopeExcludeVolumes.

	   Filter by policies.scope.exclude_volumes
	*/
	PoliciesScopeExcludeVolumesQueryParameter *string

	/* PoliciesScopeIncludeExportPolicies.

	   Filter by policies.scope.include_export_policies
	*/
	PoliciesScopeIncludeExportPoliciesQueryParameter *string

	/* PoliciesScopeIncludeExtension.

	   Filter by policies.scope.include_extension
	*/
	PoliciesScopeIncludeExtensionQueryParameter *string

	/* PoliciesScopeIncludeShares.

	   Filter by policies.scope.include_shares
	*/
	PoliciesScopeIncludeSharesQueryParameter *string

	/* PoliciesScopeIncludeVolumes.

	   Filter by policies.scope.include_volumes
	*/
	PoliciesScopeIncludeVolumesQueryParameter *string

	/* PoliciesScopeObjectMonitoringWithNoExtension.

	   Filter by policies.scope.object_monitoring_with_no_extension
	*/
	PoliciesScopeObjectMonitoringWithNoExtensionQueryParameter *bool

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecordsQueryParameter *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeoutQueryParameter *int64

	/* SvmName.

	   Filter by svm.name
	*/
	SVMNameQueryParameter *string

	/* SvmUUID.

	   Filter by svm.uuid
	*/
	SVMUUIDQueryParameter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the fpolicy collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FpolicyCollectionGetParams) WithDefaults() *FpolicyCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the fpolicy collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FpolicyCollectionGetParams) SetDefaults() {
	var (
		returnRecordsQueryParameterDefault = bool(true)

		returnTimeoutQueryParameterDefault = int64(15)
	)

	val := FpolicyCollectionGetParams{
		ReturnRecordsQueryParameter: &returnRecordsQueryParameterDefault,
		ReturnTimeoutQueryParameter: &returnTimeoutQueryParameterDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithTimeout(timeout time.Duration) *FpolicyCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithContext(ctx context.Context) *FpolicyCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithHTTPClient(client *http.Client) *FpolicyCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEnginesBufferSizeRecvBufferQueryParameter adds the enginesBufferSizeRecvBuffer to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEnginesBufferSizeRecvBufferQueryParameter(enginesBufferSizeRecvBuffer *int64) *FpolicyCollectionGetParams {
	o.SetEnginesBufferSizeRecvBufferQueryParameter(enginesBufferSizeRecvBuffer)
	return o
}

// SetEnginesBufferSizeRecvBufferQueryParameter adds the enginesBufferSizeRecvBuffer to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEnginesBufferSizeRecvBufferQueryParameter(enginesBufferSizeRecvBuffer *int64) {
	o.EnginesBufferSizeRecvBufferQueryParameter = enginesBufferSizeRecvBuffer
}

// WithEnginesBufferSizeSendBufferQueryParameter adds the enginesBufferSizeSendBuffer to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEnginesBufferSizeSendBufferQueryParameter(enginesBufferSizeSendBuffer *int64) *FpolicyCollectionGetParams {
	o.SetEnginesBufferSizeSendBufferQueryParameter(enginesBufferSizeSendBuffer)
	return o
}

// SetEnginesBufferSizeSendBufferQueryParameter adds the enginesBufferSizeSendBuffer to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEnginesBufferSizeSendBufferQueryParameter(enginesBufferSizeSendBuffer *int64) {
	o.EnginesBufferSizeSendBufferQueryParameter = enginesBufferSizeSendBuffer
}

// WithEnginesCertificateCaQueryParameter adds the enginesCertificateCa to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEnginesCertificateCaQueryParameter(enginesCertificateCa *string) *FpolicyCollectionGetParams {
	o.SetEnginesCertificateCaQueryParameter(enginesCertificateCa)
	return o
}

// SetEnginesCertificateCaQueryParameter adds the enginesCertificateCa to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEnginesCertificateCaQueryParameter(enginesCertificateCa *string) {
	o.EnginesCertificateCaQueryParameter = enginesCertificateCa
}

// WithEnginesCertificateNameQueryParameter adds the enginesCertificateName to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEnginesCertificateNameQueryParameter(enginesCertificateName *string) *FpolicyCollectionGetParams {
	o.SetEnginesCertificateNameQueryParameter(enginesCertificateName)
	return o
}

// SetEnginesCertificateNameQueryParameter adds the enginesCertificateName to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEnginesCertificateNameQueryParameter(enginesCertificateName *string) {
	o.EnginesCertificateNameQueryParameter = enginesCertificateName
}

// WithEnginesCertificateSerialNumberQueryParameter adds the enginesCertificateSerialNumber to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEnginesCertificateSerialNumberQueryParameter(enginesCertificateSerialNumber *string) *FpolicyCollectionGetParams {
	o.SetEnginesCertificateSerialNumberQueryParameter(enginesCertificateSerialNumber)
	return o
}

// SetEnginesCertificateSerialNumberQueryParameter adds the enginesCertificateSerialNumber to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEnginesCertificateSerialNumberQueryParameter(enginesCertificateSerialNumber *string) {
	o.EnginesCertificateSerialNumberQueryParameter = enginesCertificateSerialNumber
}

// WithEnginesFormatQueryParameter adds the enginesFormat to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEnginesFormatQueryParameter(enginesFormat *string) *FpolicyCollectionGetParams {
	o.SetEnginesFormatQueryParameter(enginesFormat)
	return o
}

// SetEnginesFormatQueryParameter adds the enginesFormat to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEnginesFormatQueryParameter(enginesFormat *string) {
	o.EnginesFormatQueryParameter = enginesFormat
}

// WithEnginesMaxServerRequestsQueryParameter adds the enginesMaxServerRequests to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEnginesMaxServerRequestsQueryParameter(enginesMaxServerRequests *int64) *FpolicyCollectionGetParams {
	o.SetEnginesMaxServerRequestsQueryParameter(enginesMaxServerRequests)
	return o
}

// SetEnginesMaxServerRequestsQueryParameter adds the enginesMaxServerRequests to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEnginesMaxServerRequestsQueryParameter(enginesMaxServerRequests *int64) {
	o.EnginesMaxServerRequestsQueryParameter = enginesMaxServerRequests
}

// WithEnginesNameQueryParameter adds the enginesName to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEnginesNameQueryParameter(enginesName *string) *FpolicyCollectionGetParams {
	o.SetEnginesNameQueryParameter(enginesName)
	return o
}

// SetEnginesNameQueryParameter adds the enginesName to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEnginesNameQueryParameter(enginesName *string) {
	o.EnginesNameQueryParameter = enginesName
}

// WithEnginesPortQueryParameter adds the enginesPort to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEnginesPortQueryParameter(enginesPort *int64) *FpolicyCollectionGetParams {
	o.SetEnginesPortQueryParameter(enginesPort)
	return o
}

// SetEnginesPortQueryParameter adds the enginesPort to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEnginesPortQueryParameter(enginesPort *int64) {
	o.EnginesPortQueryParameter = enginesPort
}

// WithEnginesPrimaryServersQueryParameter adds the enginesPrimaryServers to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEnginesPrimaryServersQueryParameter(enginesPrimaryServers *string) *FpolicyCollectionGetParams {
	o.SetEnginesPrimaryServersQueryParameter(enginesPrimaryServers)
	return o
}

// SetEnginesPrimaryServersQueryParameter adds the enginesPrimaryServers to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEnginesPrimaryServersQueryParameter(enginesPrimaryServers *string) {
	o.EnginesPrimaryServersQueryParameter = enginesPrimaryServers
}

// WithEnginesRequestAbortTimeoutQueryParameter adds the enginesRequestAbortTimeout to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEnginesRequestAbortTimeoutQueryParameter(enginesRequestAbortTimeout *string) *FpolicyCollectionGetParams {
	o.SetEnginesRequestAbortTimeoutQueryParameter(enginesRequestAbortTimeout)
	return o
}

// SetEnginesRequestAbortTimeoutQueryParameter adds the enginesRequestAbortTimeout to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEnginesRequestAbortTimeoutQueryParameter(enginesRequestAbortTimeout *string) {
	o.EnginesRequestAbortTimeoutQueryParameter = enginesRequestAbortTimeout
}

// WithEnginesRequestCancelTimeoutQueryParameter adds the enginesRequestCancelTimeout to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEnginesRequestCancelTimeoutQueryParameter(enginesRequestCancelTimeout *string) *FpolicyCollectionGetParams {
	o.SetEnginesRequestCancelTimeoutQueryParameter(enginesRequestCancelTimeout)
	return o
}

// SetEnginesRequestCancelTimeoutQueryParameter adds the enginesRequestCancelTimeout to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEnginesRequestCancelTimeoutQueryParameter(enginesRequestCancelTimeout *string) {
	o.EnginesRequestCancelTimeoutQueryParameter = enginesRequestCancelTimeout
}

// WithEnginesResiliencyDirectoryPathQueryParameter adds the enginesResiliencyDirectoryPath to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEnginesResiliencyDirectoryPathQueryParameter(enginesResiliencyDirectoryPath *string) *FpolicyCollectionGetParams {
	o.SetEnginesResiliencyDirectoryPathQueryParameter(enginesResiliencyDirectoryPath)
	return o
}

// SetEnginesResiliencyDirectoryPathQueryParameter adds the enginesResiliencyDirectoryPath to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEnginesResiliencyDirectoryPathQueryParameter(enginesResiliencyDirectoryPath *string) {
	o.EnginesResiliencyDirectoryPathQueryParameter = enginesResiliencyDirectoryPath
}

// WithEnginesResiliencyEnabledQueryParameter adds the enginesResiliencyEnabled to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEnginesResiliencyEnabledQueryParameter(enginesResiliencyEnabled *bool) *FpolicyCollectionGetParams {
	o.SetEnginesResiliencyEnabledQueryParameter(enginesResiliencyEnabled)
	return o
}

// SetEnginesResiliencyEnabledQueryParameter adds the enginesResiliencyEnabled to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEnginesResiliencyEnabledQueryParameter(enginesResiliencyEnabled *bool) {
	o.EnginesResiliencyEnabledQueryParameter = enginesResiliencyEnabled
}

// WithEnginesResiliencyRetentionDurationQueryParameter adds the enginesResiliencyRetentionDuration to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEnginesResiliencyRetentionDurationQueryParameter(enginesResiliencyRetentionDuration *string) *FpolicyCollectionGetParams {
	o.SetEnginesResiliencyRetentionDurationQueryParameter(enginesResiliencyRetentionDuration)
	return o
}

// SetEnginesResiliencyRetentionDurationQueryParameter adds the enginesResiliencyRetentionDuration to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEnginesResiliencyRetentionDurationQueryParameter(enginesResiliencyRetentionDuration *string) {
	o.EnginesResiliencyRetentionDurationQueryParameter = enginesResiliencyRetentionDuration
}

// WithEnginesSecondaryServersQueryParameter adds the enginesSecondaryServers to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEnginesSecondaryServersQueryParameter(enginesSecondaryServers *string) *FpolicyCollectionGetParams {
	o.SetEnginesSecondaryServersQueryParameter(enginesSecondaryServers)
	return o
}

// SetEnginesSecondaryServersQueryParameter adds the enginesSecondaryServers to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEnginesSecondaryServersQueryParameter(enginesSecondaryServers *string) {
	o.EnginesSecondaryServersQueryParameter = enginesSecondaryServers
}

// WithEnginesServerProgressTimeoutQueryParameter adds the enginesServerProgressTimeout to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEnginesServerProgressTimeoutQueryParameter(enginesServerProgressTimeout *string) *FpolicyCollectionGetParams {
	o.SetEnginesServerProgressTimeoutQueryParameter(enginesServerProgressTimeout)
	return o
}

// SetEnginesServerProgressTimeoutQueryParameter adds the enginesServerProgressTimeout to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEnginesServerProgressTimeoutQueryParameter(enginesServerProgressTimeout *string) {
	o.EnginesServerProgressTimeoutQueryParameter = enginesServerProgressTimeout
}

// WithEnginesSslOptionQueryParameter adds the enginesSslOption to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEnginesSslOptionQueryParameter(enginesSslOption *string) *FpolicyCollectionGetParams {
	o.SetEnginesSslOptionQueryParameter(enginesSslOption)
	return o
}

// SetEnginesSslOptionQueryParameter adds the enginesSslOption to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEnginesSslOptionQueryParameter(enginesSslOption *string) {
	o.EnginesSslOptionQueryParameter = enginesSslOption
}

// WithEnginesStatusRequestIntervalQueryParameter adds the enginesStatusRequestInterval to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEnginesStatusRequestIntervalQueryParameter(enginesStatusRequestInterval *string) *FpolicyCollectionGetParams {
	o.SetEnginesStatusRequestIntervalQueryParameter(enginesStatusRequestInterval)
	return o
}

// SetEnginesStatusRequestIntervalQueryParameter adds the enginesStatusRequestInterval to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEnginesStatusRequestIntervalQueryParameter(enginesStatusRequestInterval *string) {
	o.EnginesStatusRequestIntervalQueryParameter = enginesStatusRequestInterval
}

// WithEnginesTypeQueryParameter adds the enginesType to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEnginesTypeQueryParameter(enginesType *string) *FpolicyCollectionGetParams {
	o.SetEnginesTypeQueryParameter(enginesType)
	return o
}

// SetEnginesTypeQueryParameter adds the enginesType to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEnginesTypeQueryParameter(enginesType *string) {
	o.EnginesTypeQueryParameter = enginesType
}

// WithEventsFileOperationsCloseQueryParameter adds the eventsFileOperationsClose to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFileOperationsCloseQueryParameter(eventsFileOperationsClose *bool) *FpolicyCollectionGetParams {
	o.SetEventsFileOperationsCloseQueryParameter(eventsFileOperationsClose)
	return o
}

// SetEventsFileOperationsCloseQueryParameter adds the eventsFileOperationsClose to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFileOperationsCloseQueryParameter(eventsFileOperationsClose *bool) {
	o.EventsFileOperationsCloseQueryParameter = eventsFileOperationsClose
}

// WithEventsFileOperationsCreateQueryParameter adds the eventsFileOperationsCreate to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFileOperationsCreateQueryParameter(eventsFileOperationsCreate *bool) *FpolicyCollectionGetParams {
	o.SetEventsFileOperationsCreateQueryParameter(eventsFileOperationsCreate)
	return o
}

// SetEventsFileOperationsCreateQueryParameter adds the eventsFileOperationsCreate to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFileOperationsCreateQueryParameter(eventsFileOperationsCreate *bool) {
	o.EventsFileOperationsCreateQueryParameter = eventsFileOperationsCreate
}

// WithEventsFileOperationsCreateDirQueryParameter adds the eventsFileOperationsCreateDir to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFileOperationsCreateDirQueryParameter(eventsFileOperationsCreateDir *bool) *FpolicyCollectionGetParams {
	o.SetEventsFileOperationsCreateDirQueryParameter(eventsFileOperationsCreateDir)
	return o
}

// SetEventsFileOperationsCreateDirQueryParameter adds the eventsFileOperationsCreateDir to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFileOperationsCreateDirQueryParameter(eventsFileOperationsCreateDir *bool) {
	o.EventsFileOperationsCreateDirQueryParameter = eventsFileOperationsCreateDir
}

// WithEventsFileOperationsDeleteQueryParameter adds the eventsFileOperationsDelete to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFileOperationsDeleteQueryParameter(eventsFileOperationsDelete *bool) *FpolicyCollectionGetParams {
	o.SetEventsFileOperationsDeleteQueryParameter(eventsFileOperationsDelete)
	return o
}

// SetEventsFileOperationsDeleteQueryParameter adds the eventsFileOperationsDelete to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFileOperationsDeleteQueryParameter(eventsFileOperationsDelete *bool) {
	o.EventsFileOperationsDeleteQueryParameter = eventsFileOperationsDelete
}

// WithEventsFileOperationsDeleteDirQueryParameter adds the eventsFileOperationsDeleteDir to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFileOperationsDeleteDirQueryParameter(eventsFileOperationsDeleteDir *bool) *FpolicyCollectionGetParams {
	o.SetEventsFileOperationsDeleteDirQueryParameter(eventsFileOperationsDeleteDir)
	return o
}

// SetEventsFileOperationsDeleteDirQueryParameter adds the eventsFileOperationsDeleteDir to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFileOperationsDeleteDirQueryParameter(eventsFileOperationsDeleteDir *bool) {
	o.EventsFileOperationsDeleteDirQueryParameter = eventsFileOperationsDeleteDir
}

// WithEventsFileOperationsGetattrQueryParameter adds the eventsFileOperationsGetattr to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFileOperationsGetattrQueryParameter(eventsFileOperationsGetattr *bool) *FpolicyCollectionGetParams {
	o.SetEventsFileOperationsGetattrQueryParameter(eventsFileOperationsGetattr)
	return o
}

// SetEventsFileOperationsGetattrQueryParameter adds the eventsFileOperationsGetattr to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFileOperationsGetattrQueryParameter(eventsFileOperationsGetattr *bool) {
	o.EventsFileOperationsGetattrQueryParameter = eventsFileOperationsGetattr
}

// WithEventsFileOperationsLinkQueryParameter adds the eventsFileOperationsLink to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFileOperationsLinkQueryParameter(eventsFileOperationsLink *bool) *FpolicyCollectionGetParams {
	o.SetEventsFileOperationsLinkQueryParameter(eventsFileOperationsLink)
	return o
}

// SetEventsFileOperationsLinkQueryParameter adds the eventsFileOperationsLink to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFileOperationsLinkQueryParameter(eventsFileOperationsLink *bool) {
	o.EventsFileOperationsLinkQueryParameter = eventsFileOperationsLink
}

// WithEventsFileOperationsLookupQueryParameter adds the eventsFileOperationsLookup to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFileOperationsLookupQueryParameter(eventsFileOperationsLookup *bool) *FpolicyCollectionGetParams {
	o.SetEventsFileOperationsLookupQueryParameter(eventsFileOperationsLookup)
	return o
}

// SetEventsFileOperationsLookupQueryParameter adds the eventsFileOperationsLookup to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFileOperationsLookupQueryParameter(eventsFileOperationsLookup *bool) {
	o.EventsFileOperationsLookupQueryParameter = eventsFileOperationsLookup
}

// WithEventsFileOperationsOpenQueryParameter adds the eventsFileOperationsOpen to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFileOperationsOpenQueryParameter(eventsFileOperationsOpen *bool) *FpolicyCollectionGetParams {
	o.SetEventsFileOperationsOpenQueryParameter(eventsFileOperationsOpen)
	return o
}

// SetEventsFileOperationsOpenQueryParameter adds the eventsFileOperationsOpen to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFileOperationsOpenQueryParameter(eventsFileOperationsOpen *bool) {
	o.EventsFileOperationsOpenQueryParameter = eventsFileOperationsOpen
}

// WithEventsFileOperationsReadQueryParameter adds the eventsFileOperationsRead to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFileOperationsReadQueryParameter(eventsFileOperationsRead *bool) *FpolicyCollectionGetParams {
	o.SetEventsFileOperationsReadQueryParameter(eventsFileOperationsRead)
	return o
}

// SetEventsFileOperationsReadQueryParameter adds the eventsFileOperationsRead to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFileOperationsReadQueryParameter(eventsFileOperationsRead *bool) {
	o.EventsFileOperationsReadQueryParameter = eventsFileOperationsRead
}

// WithEventsFileOperationsRenameQueryParameter adds the eventsFileOperationsRename to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFileOperationsRenameQueryParameter(eventsFileOperationsRename *bool) *FpolicyCollectionGetParams {
	o.SetEventsFileOperationsRenameQueryParameter(eventsFileOperationsRename)
	return o
}

// SetEventsFileOperationsRenameQueryParameter adds the eventsFileOperationsRename to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFileOperationsRenameQueryParameter(eventsFileOperationsRename *bool) {
	o.EventsFileOperationsRenameQueryParameter = eventsFileOperationsRename
}

// WithEventsFileOperationsRenameDirQueryParameter adds the eventsFileOperationsRenameDir to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFileOperationsRenameDirQueryParameter(eventsFileOperationsRenameDir *bool) *FpolicyCollectionGetParams {
	o.SetEventsFileOperationsRenameDirQueryParameter(eventsFileOperationsRenameDir)
	return o
}

// SetEventsFileOperationsRenameDirQueryParameter adds the eventsFileOperationsRenameDir to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFileOperationsRenameDirQueryParameter(eventsFileOperationsRenameDir *bool) {
	o.EventsFileOperationsRenameDirQueryParameter = eventsFileOperationsRenameDir
}

// WithEventsFileOperationsSetattrQueryParameter adds the eventsFileOperationsSetattr to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFileOperationsSetattrQueryParameter(eventsFileOperationsSetattr *bool) *FpolicyCollectionGetParams {
	o.SetEventsFileOperationsSetattrQueryParameter(eventsFileOperationsSetattr)
	return o
}

// SetEventsFileOperationsSetattrQueryParameter adds the eventsFileOperationsSetattr to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFileOperationsSetattrQueryParameter(eventsFileOperationsSetattr *bool) {
	o.EventsFileOperationsSetattrQueryParameter = eventsFileOperationsSetattr
}

// WithEventsFileOperationsSymlinkQueryParameter adds the eventsFileOperationsSymlink to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFileOperationsSymlinkQueryParameter(eventsFileOperationsSymlink *bool) *FpolicyCollectionGetParams {
	o.SetEventsFileOperationsSymlinkQueryParameter(eventsFileOperationsSymlink)
	return o
}

// SetEventsFileOperationsSymlinkQueryParameter adds the eventsFileOperationsSymlink to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFileOperationsSymlinkQueryParameter(eventsFileOperationsSymlink *bool) {
	o.EventsFileOperationsSymlinkQueryParameter = eventsFileOperationsSymlink
}

// WithEventsFileOperationsWriteQueryParameter adds the eventsFileOperationsWrite to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFileOperationsWriteQueryParameter(eventsFileOperationsWrite *bool) *FpolicyCollectionGetParams {
	o.SetEventsFileOperationsWriteQueryParameter(eventsFileOperationsWrite)
	return o
}

// SetEventsFileOperationsWriteQueryParameter adds the eventsFileOperationsWrite to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFileOperationsWriteQueryParameter(eventsFileOperationsWrite *bool) {
	o.EventsFileOperationsWriteQueryParameter = eventsFileOperationsWrite
}

// WithEventsFiltersCloseWithModificationQueryParameter adds the eventsFiltersCloseWithModification to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFiltersCloseWithModificationQueryParameter(eventsFiltersCloseWithModification *bool) *FpolicyCollectionGetParams {
	o.SetEventsFiltersCloseWithModificationQueryParameter(eventsFiltersCloseWithModification)
	return o
}

// SetEventsFiltersCloseWithModificationQueryParameter adds the eventsFiltersCloseWithModification to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFiltersCloseWithModificationQueryParameter(eventsFiltersCloseWithModification *bool) {
	o.EventsFiltersCloseWithModificationQueryParameter = eventsFiltersCloseWithModification
}

// WithEventsFiltersCloseWithReadQueryParameter adds the eventsFiltersCloseWithRead to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFiltersCloseWithReadQueryParameter(eventsFiltersCloseWithRead *bool) *FpolicyCollectionGetParams {
	o.SetEventsFiltersCloseWithReadQueryParameter(eventsFiltersCloseWithRead)
	return o
}

// SetEventsFiltersCloseWithReadQueryParameter adds the eventsFiltersCloseWithRead to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFiltersCloseWithReadQueryParameter(eventsFiltersCloseWithRead *bool) {
	o.EventsFiltersCloseWithReadQueryParameter = eventsFiltersCloseWithRead
}

// WithEventsFiltersCloseWithoutModificationQueryParameter adds the eventsFiltersCloseWithoutModification to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFiltersCloseWithoutModificationQueryParameter(eventsFiltersCloseWithoutModification *bool) *FpolicyCollectionGetParams {
	o.SetEventsFiltersCloseWithoutModificationQueryParameter(eventsFiltersCloseWithoutModification)
	return o
}

// SetEventsFiltersCloseWithoutModificationQueryParameter adds the eventsFiltersCloseWithoutModification to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFiltersCloseWithoutModificationQueryParameter(eventsFiltersCloseWithoutModification *bool) {
	o.EventsFiltersCloseWithoutModificationQueryParameter = eventsFiltersCloseWithoutModification
}

// WithEventsFiltersExcludeDirectoryQueryParameter adds the eventsFiltersExcludeDirectory to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFiltersExcludeDirectoryQueryParameter(eventsFiltersExcludeDirectory *bool) *FpolicyCollectionGetParams {
	o.SetEventsFiltersExcludeDirectoryQueryParameter(eventsFiltersExcludeDirectory)
	return o
}

// SetEventsFiltersExcludeDirectoryQueryParameter adds the eventsFiltersExcludeDirectory to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFiltersExcludeDirectoryQueryParameter(eventsFiltersExcludeDirectory *bool) {
	o.EventsFiltersExcludeDirectoryQueryParameter = eventsFiltersExcludeDirectory
}

// WithEventsFiltersFirstReadQueryParameter adds the eventsFiltersFirstRead to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFiltersFirstReadQueryParameter(eventsFiltersFirstRead *bool) *FpolicyCollectionGetParams {
	o.SetEventsFiltersFirstReadQueryParameter(eventsFiltersFirstRead)
	return o
}

// SetEventsFiltersFirstReadQueryParameter adds the eventsFiltersFirstRead to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFiltersFirstReadQueryParameter(eventsFiltersFirstRead *bool) {
	o.EventsFiltersFirstReadQueryParameter = eventsFiltersFirstRead
}

// WithEventsFiltersFirstWriteQueryParameter adds the eventsFiltersFirstWrite to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFiltersFirstWriteQueryParameter(eventsFiltersFirstWrite *bool) *FpolicyCollectionGetParams {
	o.SetEventsFiltersFirstWriteQueryParameter(eventsFiltersFirstWrite)
	return o
}

// SetEventsFiltersFirstWriteQueryParameter adds the eventsFiltersFirstWrite to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFiltersFirstWriteQueryParameter(eventsFiltersFirstWrite *bool) {
	o.EventsFiltersFirstWriteQueryParameter = eventsFiltersFirstWrite
}

// WithEventsFiltersMonitorAdsQueryParameter adds the eventsFiltersMonitorAds to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFiltersMonitorAdsQueryParameter(eventsFiltersMonitorAds *bool) *FpolicyCollectionGetParams {
	o.SetEventsFiltersMonitorAdsQueryParameter(eventsFiltersMonitorAds)
	return o
}

// SetEventsFiltersMonitorAdsQueryParameter adds the eventsFiltersMonitorAds to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFiltersMonitorAdsQueryParameter(eventsFiltersMonitorAds *bool) {
	o.EventsFiltersMonitorAdsQueryParameter = eventsFiltersMonitorAds
}

// WithEventsFiltersOfflineBitQueryParameter adds the eventsFiltersOfflineBit to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFiltersOfflineBitQueryParameter(eventsFiltersOfflineBit *bool) *FpolicyCollectionGetParams {
	o.SetEventsFiltersOfflineBitQueryParameter(eventsFiltersOfflineBit)
	return o
}

// SetEventsFiltersOfflineBitQueryParameter adds the eventsFiltersOfflineBit to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFiltersOfflineBitQueryParameter(eventsFiltersOfflineBit *bool) {
	o.EventsFiltersOfflineBitQueryParameter = eventsFiltersOfflineBit
}

// WithEventsFiltersOpenWithDeleteIntentQueryParameter adds the eventsFiltersOpenWithDeleteIntent to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFiltersOpenWithDeleteIntentQueryParameter(eventsFiltersOpenWithDeleteIntent *bool) *FpolicyCollectionGetParams {
	o.SetEventsFiltersOpenWithDeleteIntentQueryParameter(eventsFiltersOpenWithDeleteIntent)
	return o
}

// SetEventsFiltersOpenWithDeleteIntentQueryParameter adds the eventsFiltersOpenWithDeleteIntent to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFiltersOpenWithDeleteIntentQueryParameter(eventsFiltersOpenWithDeleteIntent *bool) {
	o.EventsFiltersOpenWithDeleteIntentQueryParameter = eventsFiltersOpenWithDeleteIntent
}

// WithEventsFiltersOpenWithWriteIntentQueryParameter adds the eventsFiltersOpenWithWriteIntent to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFiltersOpenWithWriteIntentQueryParameter(eventsFiltersOpenWithWriteIntent *bool) *FpolicyCollectionGetParams {
	o.SetEventsFiltersOpenWithWriteIntentQueryParameter(eventsFiltersOpenWithWriteIntent)
	return o
}

// SetEventsFiltersOpenWithWriteIntentQueryParameter adds the eventsFiltersOpenWithWriteIntent to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFiltersOpenWithWriteIntentQueryParameter(eventsFiltersOpenWithWriteIntent *bool) {
	o.EventsFiltersOpenWithWriteIntentQueryParameter = eventsFiltersOpenWithWriteIntent
}

// WithEventsFiltersSetattrWithAccessTimeChangeQueryParameter adds the eventsFiltersSetattrWithAccessTimeChange to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFiltersSetattrWithAccessTimeChangeQueryParameter(eventsFiltersSetattrWithAccessTimeChange *bool) *FpolicyCollectionGetParams {
	o.SetEventsFiltersSetattrWithAccessTimeChangeQueryParameter(eventsFiltersSetattrWithAccessTimeChange)
	return o
}

// SetEventsFiltersSetattrWithAccessTimeChangeQueryParameter adds the eventsFiltersSetattrWithAccessTimeChange to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFiltersSetattrWithAccessTimeChangeQueryParameter(eventsFiltersSetattrWithAccessTimeChange *bool) {
	o.EventsFiltersSetattrWithAccessTimeChangeQueryParameter = eventsFiltersSetattrWithAccessTimeChange
}

// WithEventsFiltersSetattrWithAllocationSizeChangeQueryParameter adds the eventsFiltersSetattrWithAllocationSizeChange to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFiltersSetattrWithAllocationSizeChangeQueryParameter(eventsFiltersSetattrWithAllocationSizeChange *bool) *FpolicyCollectionGetParams {
	o.SetEventsFiltersSetattrWithAllocationSizeChangeQueryParameter(eventsFiltersSetattrWithAllocationSizeChange)
	return o
}

// SetEventsFiltersSetattrWithAllocationSizeChangeQueryParameter adds the eventsFiltersSetattrWithAllocationSizeChange to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFiltersSetattrWithAllocationSizeChangeQueryParameter(eventsFiltersSetattrWithAllocationSizeChange *bool) {
	o.EventsFiltersSetattrWithAllocationSizeChangeQueryParameter = eventsFiltersSetattrWithAllocationSizeChange
}

// WithEventsFiltersSetattrWithCreationTimeChangeQueryParameter adds the eventsFiltersSetattrWithCreationTimeChange to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFiltersSetattrWithCreationTimeChangeQueryParameter(eventsFiltersSetattrWithCreationTimeChange *bool) *FpolicyCollectionGetParams {
	o.SetEventsFiltersSetattrWithCreationTimeChangeQueryParameter(eventsFiltersSetattrWithCreationTimeChange)
	return o
}

// SetEventsFiltersSetattrWithCreationTimeChangeQueryParameter adds the eventsFiltersSetattrWithCreationTimeChange to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFiltersSetattrWithCreationTimeChangeQueryParameter(eventsFiltersSetattrWithCreationTimeChange *bool) {
	o.EventsFiltersSetattrWithCreationTimeChangeQueryParameter = eventsFiltersSetattrWithCreationTimeChange
}

// WithEventsFiltersSetattrWithDACLChangeQueryParameter adds the eventsFiltersSetattrWithDaclChange to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFiltersSetattrWithDACLChangeQueryParameter(eventsFiltersSetattrWithDaclChange *bool) *FpolicyCollectionGetParams {
	o.SetEventsFiltersSetattrWithDACLChangeQueryParameter(eventsFiltersSetattrWithDaclChange)
	return o
}

// SetEventsFiltersSetattrWithDACLChangeQueryParameter adds the eventsFiltersSetattrWithDaclChange to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFiltersSetattrWithDACLChangeQueryParameter(eventsFiltersSetattrWithDaclChange *bool) {
	o.EventsFiltersSetattrWithDACLChangeQueryParameter = eventsFiltersSetattrWithDaclChange
}

// WithEventsFiltersSetattrWithGroupChangeQueryParameter adds the eventsFiltersSetattrWithGroupChange to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFiltersSetattrWithGroupChangeQueryParameter(eventsFiltersSetattrWithGroupChange *bool) *FpolicyCollectionGetParams {
	o.SetEventsFiltersSetattrWithGroupChangeQueryParameter(eventsFiltersSetattrWithGroupChange)
	return o
}

// SetEventsFiltersSetattrWithGroupChangeQueryParameter adds the eventsFiltersSetattrWithGroupChange to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFiltersSetattrWithGroupChangeQueryParameter(eventsFiltersSetattrWithGroupChange *bool) {
	o.EventsFiltersSetattrWithGroupChangeQueryParameter = eventsFiltersSetattrWithGroupChange
}

// WithEventsFiltersSetattrWithModeChangeQueryParameter adds the eventsFiltersSetattrWithModeChange to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFiltersSetattrWithModeChangeQueryParameter(eventsFiltersSetattrWithModeChange *bool) *FpolicyCollectionGetParams {
	o.SetEventsFiltersSetattrWithModeChangeQueryParameter(eventsFiltersSetattrWithModeChange)
	return o
}

// SetEventsFiltersSetattrWithModeChangeQueryParameter adds the eventsFiltersSetattrWithModeChange to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFiltersSetattrWithModeChangeQueryParameter(eventsFiltersSetattrWithModeChange *bool) {
	o.EventsFiltersSetattrWithModeChangeQueryParameter = eventsFiltersSetattrWithModeChange
}

// WithEventsFiltersSetattrWithModifyTimeChangeQueryParameter adds the eventsFiltersSetattrWithModifyTimeChange to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFiltersSetattrWithModifyTimeChangeQueryParameter(eventsFiltersSetattrWithModifyTimeChange *bool) *FpolicyCollectionGetParams {
	o.SetEventsFiltersSetattrWithModifyTimeChangeQueryParameter(eventsFiltersSetattrWithModifyTimeChange)
	return o
}

// SetEventsFiltersSetattrWithModifyTimeChangeQueryParameter adds the eventsFiltersSetattrWithModifyTimeChange to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFiltersSetattrWithModifyTimeChangeQueryParameter(eventsFiltersSetattrWithModifyTimeChange *bool) {
	o.EventsFiltersSetattrWithModifyTimeChangeQueryParameter = eventsFiltersSetattrWithModifyTimeChange
}

// WithEventsFiltersSetattrWithOwnerChangeQueryParameter adds the eventsFiltersSetattrWithOwnerChange to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFiltersSetattrWithOwnerChangeQueryParameter(eventsFiltersSetattrWithOwnerChange *bool) *FpolicyCollectionGetParams {
	o.SetEventsFiltersSetattrWithOwnerChangeQueryParameter(eventsFiltersSetattrWithOwnerChange)
	return o
}

// SetEventsFiltersSetattrWithOwnerChangeQueryParameter adds the eventsFiltersSetattrWithOwnerChange to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFiltersSetattrWithOwnerChangeQueryParameter(eventsFiltersSetattrWithOwnerChange *bool) {
	o.EventsFiltersSetattrWithOwnerChangeQueryParameter = eventsFiltersSetattrWithOwnerChange
}

// WithEventsFiltersSetattrWithSACLChangeQueryParameter adds the eventsFiltersSetattrWithSaclChange to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFiltersSetattrWithSACLChangeQueryParameter(eventsFiltersSetattrWithSaclChange *bool) *FpolicyCollectionGetParams {
	o.SetEventsFiltersSetattrWithSACLChangeQueryParameter(eventsFiltersSetattrWithSaclChange)
	return o
}

// SetEventsFiltersSetattrWithSACLChangeQueryParameter adds the eventsFiltersSetattrWithSaclChange to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFiltersSetattrWithSACLChangeQueryParameter(eventsFiltersSetattrWithSaclChange *bool) {
	o.EventsFiltersSetattrWithSACLChangeQueryParameter = eventsFiltersSetattrWithSaclChange
}

// WithEventsFiltersSetattrWithSizeChangeQueryParameter adds the eventsFiltersSetattrWithSizeChange to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFiltersSetattrWithSizeChangeQueryParameter(eventsFiltersSetattrWithSizeChange *bool) *FpolicyCollectionGetParams {
	o.SetEventsFiltersSetattrWithSizeChangeQueryParameter(eventsFiltersSetattrWithSizeChange)
	return o
}

// SetEventsFiltersSetattrWithSizeChangeQueryParameter adds the eventsFiltersSetattrWithSizeChange to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFiltersSetattrWithSizeChangeQueryParameter(eventsFiltersSetattrWithSizeChange *bool) {
	o.EventsFiltersSetattrWithSizeChangeQueryParameter = eventsFiltersSetattrWithSizeChange
}

// WithEventsFiltersWriteWithSizeChangeQueryParameter adds the eventsFiltersWriteWithSizeChange to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsFiltersWriteWithSizeChangeQueryParameter(eventsFiltersWriteWithSizeChange *bool) *FpolicyCollectionGetParams {
	o.SetEventsFiltersWriteWithSizeChangeQueryParameter(eventsFiltersWriteWithSizeChange)
	return o
}

// SetEventsFiltersWriteWithSizeChangeQueryParameter adds the eventsFiltersWriteWithSizeChange to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsFiltersWriteWithSizeChangeQueryParameter(eventsFiltersWriteWithSizeChange *bool) {
	o.EventsFiltersWriteWithSizeChangeQueryParameter = eventsFiltersWriteWithSizeChange
}

// WithEventsNameQueryParameter adds the eventsName to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsNameQueryParameter(eventsName *string) *FpolicyCollectionGetParams {
	o.SetEventsNameQueryParameter(eventsName)
	return o
}

// SetEventsNameQueryParameter adds the eventsName to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsNameQueryParameter(eventsName *string) {
	o.EventsNameQueryParameter = eventsName
}

// WithEventsProtocolQueryParameter adds the eventsProtocol to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsProtocolQueryParameter(eventsProtocol *string) *FpolicyCollectionGetParams {
	o.SetEventsProtocolQueryParameter(eventsProtocol)
	return o
}

// SetEventsProtocolQueryParameter adds the eventsProtocol to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsProtocolQueryParameter(eventsProtocol *string) {
	o.EventsProtocolQueryParameter = eventsProtocol
}

// WithEventsVolumeMonitoringQueryParameter adds the eventsVolumeMonitoring to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithEventsVolumeMonitoringQueryParameter(eventsVolumeMonitoring *bool) *FpolicyCollectionGetParams {
	o.SetEventsVolumeMonitoringQueryParameter(eventsVolumeMonitoring)
	return o
}

// SetEventsVolumeMonitoringQueryParameter adds the eventsVolumeMonitoring to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetEventsVolumeMonitoringQueryParameter(eventsVolumeMonitoring *bool) {
	o.EventsVolumeMonitoringQueryParameter = eventsVolumeMonitoring
}

// WithFieldsQueryParameter adds the fields to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithFieldsQueryParameter(fields []string) *FpolicyCollectionGetParams {
	o.SetFieldsQueryParameter(fields)
	return o
}

// SetFieldsQueryParameter adds the fields to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetFieldsQueryParameter(fields []string) {
	o.FieldsQueryParameter = fields
}

// WithMaxRecordsQueryParameter adds the maxRecords to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithMaxRecordsQueryParameter(maxRecords *int64) *FpolicyCollectionGetParams {
	o.SetMaxRecordsQueryParameter(maxRecords)
	return o
}

// SetMaxRecordsQueryParameter adds the maxRecords to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetMaxRecordsQueryParameter(maxRecords *int64) {
	o.MaxRecordsQueryParameter = maxRecords
}

// WithOrderByQueryParameter adds the orderBy to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithOrderByQueryParameter(orderBy []string) *FpolicyCollectionGetParams {
	o.SetOrderByQueryParameter(orderBy)
	return o
}

// SetOrderByQueryParameter adds the orderBy to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetOrderByQueryParameter(orderBy []string) {
	o.OrderByQueryParameter = orderBy
}

// WithPoliciesEnabledQueryParameter adds the policiesEnabled to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithPoliciesEnabledQueryParameter(policiesEnabled *bool) *FpolicyCollectionGetParams {
	o.SetPoliciesEnabledQueryParameter(policiesEnabled)
	return o
}

// SetPoliciesEnabledQueryParameter adds the policiesEnabled to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetPoliciesEnabledQueryParameter(policiesEnabled *bool) {
	o.PoliciesEnabledQueryParameter = policiesEnabled
}

// WithPoliciesEngineNameQueryParameter adds the policiesEngineName to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithPoliciesEngineNameQueryParameter(policiesEngineName *string) *FpolicyCollectionGetParams {
	o.SetPoliciesEngineNameQueryParameter(policiesEngineName)
	return o
}

// SetPoliciesEngineNameQueryParameter adds the policiesEngineName to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetPoliciesEngineNameQueryParameter(policiesEngineName *string) {
	o.PoliciesEngineNameQueryParameter = policiesEngineName
}

// WithPoliciesEventsNameQueryParameter adds the policiesEventsName to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithPoliciesEventsNameQueryParameter(policiesEventsName *string) *FpolicyCollectionGetParams {
	o.SetPoliciesEventsNameQueryParameter(policiesEventsName)
	return o
}

// SetPoliciesEventsNameQueryParameter adds the policiesEventsName to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetPoliciesEventsNameQueryParameter(policiesEventsName *string) {
	o.PoliciesEventsNameQueryParameter = policiesEventsName
}

// WithPoliciesMandatoryQueryParameter adds the policiesMandatory to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithPoliciesMandatoryQueryParameter(policiesMandatory *bool) *FpolicyCollectionGetParams {
	o.SetPoliciesMandatoryQueryParameter(policiesMandatory)
	return o
}

// SetPoliciesMandatoryQueryParameter adds the policiesMandatory to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetPoliciesMandatoryQueryParameter(policiesMandatory *bool) {
	o.PoliciesMandatoryQueryParameter = policiesMandatory
}

// WithPoliciesNameQueryParameter adds the policiesName to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithPoliciesNameQueryParameter(policiesName *string) *FpolicyCollectionGetParams {
	o.SetPoliciesNameQueryParameter(policiesName)
	return o
}

// SetPoliciesNameQueryParameter adds the policiesName to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetPoliciesNameQueryParameter(policiesName *string) {
	o.PoliciesNameQueryParameter = policiesName
}

// WithPoliciesPassthroughReadQueryParameter adds the policiesPassthroughRead to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithPoliciesPassthroughReadQueryParameter(policiesPassthroughRead *bool) *FpolicyCollectionGetParams {
	o.SetPoliciesPassthroughReadQueryParameter(policiesPassthroughRead)
	return o
}

// SetPoliciesPassthroughReadQueryParameter adds the policiesPassthroughRead to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetPoliciesPassthroughReadQueryParameter(policiesPassthroughRead *bool) {
	o.PoliciesPassthroughReadQueryParameter = policiesPassthroughRead
}

// WithPoliciesPriorityQueryParameter adds the policiesPriority to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithPoliciesPriorityQueryParameter(policiesPriority *int64) *FpolicyCollectionGetParams {
	o.SetPoliciesPriorityQueryParameter(policiesPriority)
	return o
}

// SetPoliciesPriorityQueryParameter adds the policiesPriority to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetPoliciesPriorityQueryParameter(policiesPriority *int64) {
	o.PoliciesPriorityQueryParameter = policiesPriority
}

// WithPoliciesPrivilegedUserQueryParameter adds the policiesPrivilegedUser to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithPoliciesPrivilegedUserQueryParameter(policiesPrivilegedUser *string) *FpolicyCollectionGetParams {
	o.SetPoliciesPrivilegedUserQueryParameter(policiesPrivilegedUser)
	return o
}

// SetPoliciesPrivilegedUserQueryParameter adds the policiesPrivilegedUser to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetPoliciesPrivilegedUserQueryParameter(policiesPrivilegedUser *string) {
	o.PoliciesPrivilegedUserQueryParameter = policiesPrivilegedUser
}

// WithPoliciesScopeCheckExtensionsOnDirectoriesQueryParameter adds the policiesScopeCheckExtensionsOnDirectories to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithPoliciesScopeCheckExtensionsOnDirectoriesQueryParameter(policiesScopeCheckExtensionsOnDirectories *bool) *FpolicyCollectionGetParams {
	o.SetPoliciesScopeCheckExtensionsOnDirectoriesQueryParameter(policiesScopeCheckExtensionsOnDirectories)
	return o
}

// SetPoliciesScopeCheckExtensionsOnDirectoriesQueryParameter adds the policiesScopeCheckExtensionsOnDirectories to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetPoliciesScopeCheckExtensionsOnDirectoriesQueryParameter(policiesScopeCheckExtensionsOnDirectories *bool) {
	o.PoliciesScopeCheckExtensionsOnDirectoriesQueryParameter = policiesScopeCheckExtensionsOnDirectories
}

// WithPoliciesScopeExcludeExportPoliciesQueryParameter adds the policiesScopeExcludeExportPolicies to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithPoliciesScopeExcludeExportPoliciesQueryParameter(policiesScopeExcludeExportPolicies *string) *FpolicyCollectionGetParams {
	o.SetPoliciesScopeExcludeExportPoliciesQueryParameter(policiesScopeExcludeExportPolicies)
	return o
}

// SetPoliciesScopeExcludeExportPoliciesQueryParameter adds the policiesScopeExcludeExportPolicies to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetPoliciesScopeExcludeExportPoliciesQueryParameter(policiesScopeExcludeExportPolicies *string) {
	o.PoliciesScopeExcludeExportPoliciesQueryParameter = policiesScopeExcludeExportPolicies
}

// WithPoliciesScopeExcludeExtensionQueryParameter adds the policiesScopeExcludeExtension to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithPoliciesScopeExcludeExtensionQueryParameter(policiesScopeExcludeExtension *string) *FpolicyCollectionGetParams {
	o.SetPoliciesScopeExcludeExtensionQueryParameter(policiesScopeExcludeExtension)
	return o
}

// SetPoliciesScopeExcludeExtensionQueryParameter adds the policiesScopeExcludeExtension to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetPoliciesScopeExcludeExtensionQueryParameter(policiesScopeExcludeExtension *string) {
	o.PoliciesScopeExcludeExtensionQueryParameter = policiesScopeExcludeExtension
}

// WithPoliciesScopeExcludeSharesQueryParameter adds the policiesScopeExcludeShares to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithPoliciesScopeExcludeSharesQueryParameter(policiesScopeExcludeShares *string) *FpolicyCollectionGetParams {
	o.SetPoliciesScopeExcludeSharesQueryParameter(policiesScopeExcludeShares)
	return o
}

// SetPoliciesScopeExcludeSharesQueryParameter adds the policiesScopeExcludeShares to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetPoliciesScopeExcludeSharesQueryParameter(policiesScopeExcludeShares *string) {
	o.PoliciesScopeExcludeSharesQueryParameter = policiesScopeExcludeShares
}

// WithPoliciesScopeExcludeVolumesQueryParameter adds the policiesScopeExcludeVolumes to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithPoliciesScopeExcludeVolumesQueryParameter(policiesScopeExcludeVolumes *string) *FpolicyCollectionGetParams {
	o.SetPoliciesScopeExcludeVolumesQueryParameter(policiesScopeExcludeVolumes)
	return o
}

// SetPoliciesScopeExcludeVolumesQueryParameter adds the policiesScopeExcludeVolumes to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetPoliciesScopeExcludeVolumesQueryParameter(policiesScopeExcludeVolumes *string) {
	o.PoliciesScopeExcludeVolumesQueryParameter = policiesScopeExcludeVolumes
}

// WithPoliciesScopeIncludeExportPoliciesQueryParameter adds the policiesScopeIncludeExportPolicies to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithPoliciesScopeIncludeExportPoliciesQueryParameter(policiesScopeIncludeExportPolicies *string) *FpolicyCollectionGetParams {
	o.SetPoliciesScopeIncludeExportPoliciesQueryParameter(policiesScopeIncludeExportPolicies)
	return o
}

// SetPoliciesScopeIncludeExportPoliciesQueryParameter adds the policiesScopeIncludeExportPolicies to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetPoliciesScopeIncludeExportPoliciesQueryParameter(policiesScopeIncludeExportPolicies *string) {
	o.PoliciesScopeIncludeExportPoliciesQueryParameter = policiesScopeIncludeExportPolicies
}

// WithPoliciesScopeIncludeExtensionQueryParameter adds the policiesScopeIncludeExtension to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithPoliciesScopeIncludeExtensionQueryParameter(policiesScopeIncludeExtension *string) *FpolicyCollectionGetParams {
	o.SetPoliciesScopeIncludeExtensionQueryParameter(policiesScopeIncludeExtension)
	return o
}

// SetPoliciesScopeIncludeExtensionQueryParameter adds the policiesScopeIncludeExtension to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetPoliciesScopeIncludeExtensionQueryParameter(policiesScopeIncludeExtension *string) {
	o.PoliciesScopeIncludeExtensionQueryParameter = policiesScopeIncludeExtension
}

// WithPoliciesScopeIncludeSharesQueryParameter adds the policiesScopeIncludeShares to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithPoliciesScopeIncludeSharesQueryParameter(policiesScopeIncludeShares *string) *FpolicyCollectionGetParams {
	o.SetPoliciesScopeIncludeSharesQueryParameter(policiesScopeIncludeShares)
	return o
}

// SetPoliciesScopeIncludeSharesQueryParameter adds the policiesScopeIncludeShares to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetPoliciesScopeIncludeSharesQueryParameter(policiesScopeIncludeShares *string) {
	o.PoliciesScopeIncludeSharesQueryParameter = policiesScopeIncludeShares
}

// WithPoliciesScopeIncludeVolumesQueryParameter adds the policiesScopeIncludeVolumes to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithPoliciesScopeIncludeVolumesQueryParameter(policiesScopeIncludeVolumes *string) *FpolicyCollectionGetParams {
	o.SetPoliciesScopeIncludeVolumesQueryParameter(policiesScopeIncludeVolumes)
	return o
}

// SetPoliciesScopeIncludeVolumesQueryParameter adds the policiesScopeIncludeVolumes to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetPoliciesScopeIncludeVolumesQueryParameter(policiesScopeIncludeVolumes *string) {
	o.PoliciesScopeIncludeVolumesQueryParameter = policiesScopeIncludeVolumes
}

// WithPoliciesScopeObjectMonitoringWithNoExtensionQueryParameter adds the policiesScopeObjectMonitoringWithNoExtension to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithPoliciesScopeObjectMonitoringWithNoExtensionQueryParameter(policiesScopeObjectMonitoringWithNoExtension *bool) *FpolicyCollectionGetParams {
	o.SetPoliciesScopeObjectMonitoringWithNoExtensionQueryParameter(policiesScopeObjectMonitoringWithNoExtension)
	return o
}

// SetPoliciesScopeObjectMonitoringWithNoExtensionQueryParameter adds the policiesScopeObjectMonitoringWithNoExtension to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetPoliciesScopeObjectMonitoringWithNoExtensionQueryParameter(policiesScopeObjectMonitoringWithNoExtension *bool) {
	o.PoliciesScopeObjectMonitoringWithNoExtensionQueryParameter = policiesScopeObjectMonitoringWithNoExtension
}

// WithReturnRecordsQueryParameter adds the returnRecords to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithReturnRecordsQueryParameter(returnRecords *bool) *FpolicyCollectionGetParams {
	o.SetReturnRecordsQueryParameter(returnRecords)
	return o
}

// SetReturnRecordsQueryParameter adds the returnRecords to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetReturnRecordsQueryParameter(returnRecords *bool) {
	o.ReturnRecordsQueryParameter = returnRecords
}

// WithReturnTimeoutQueryParameter adds the returnTimeout to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithReturnTimeoutQueryParameter(returnTimeout *int64) *FpolicyCollectionGetParams {
	o.SetReturnTimeoutQueryParameter(returnTimeout)
	return o
}

// SetReturnTimeoutQueryParameter adds the returnTimeout to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetReturnTimeoutQueryParameter(returnTimeout *int64) {
	o.ReturnTimeoutQueryParameter = returnTimeout
}

// WithSVMNameQueryParameter adds the svmName to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithSVMNameQueryParameter(svmName *string) *FpolicyCollectionGetParams {
	o.SetSVMNameQueryParameter(svmName)
	return o
}

// SetSVMNameQueryParameter adds the svmName to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetSVMNameQueryParameter(svmName *string) {
	o.SVMNameQueryParameter = svmName
}

// WithSVMUUIDQueryParameter adds the svmUUID to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) WithSVMUUIDQueryParameter(svmUUID *string) *FpolicyCollectionGetParams {
	o.SetSVMUUIDQueryParameter(svmUUID)
	return o
}

// SetSVMUUIDQueryParameter adds the svmUuid to the fpolicy collection get params
func (o *FpolicyCollectionGetParams) SetSVMUUIDQueryParameter(svmUUID *string) {
	o.SVMUUIDQueryParameter = svmUUID
}

// WriteToRequest writes these params to a swagger request
func (o *FpolicyCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EnginesBufferSizeRecvBufferQueryParameter != nil {

		// query param engines.buffer_size.recv_buffer
		var qrEnginesBufferSizeRecvBuffer int64

		if o.EnginesBufferSizeRecvBufferQueryParameter != nil {
			qrEnginesBufferSizeRecvBuffer = *o.EnginesBufferSizeRecvBufferQueryParameter
		}
		qEnginesBufferSizeRecvBuffer := swag.FormatInt64(qrEnginesBufferSizeRecvBuffer)
		if qEnginesBufferSizeRecvBuffer != "" {

			if err := r.SetQueryParam("engines.buffer_size.recv_buffer", qEnginesBufferSizeRecvBuffer); err != nil {
				return err
			}
		}
	}

	if o.EnginesBufferSizeSendBufferQueryParameter != nil {

		// query param engines.buffer_size.send_buffer
		var qrEnginesBufferSizeSendBuffer int64

		if o.EnginesBufferSizeSendBufferQueryParameter != nil {
			qrEnginesBufferSizeSendBuffer = *o.EnginesBufferSizeSendBufferQueryParameter
		}
		qEnginesBufferSizeSendBuffer := swag.FormatInt64(qrEnginesBufferSizeSendBuffer)
		if qEnginesBufferSizeSendBuffer != "" {

			if err := r.SetQueryParam("engines.buffer_size.send_buffer", qEnginesBufferSizeSendBuffer); err != nil {
				return err
			}
		}
	}

	if o.EnginesCertificateCaQueryParameter != nil {

		// query param engines.certificate.ca
		var qrEnginesCertificateCa string

		if o.EnginesCertificateCaQueryParameter != nil {
			qrEnginesCertificateCa = *o.EnginesCertificateCaQueryParameter
		}
		qEnginesCertificateCa := qrEnginesCertificateCa
		if qEnginesCertificateCa != "" {

			if err := r.SetQueryParam("engines.certificate.ca", qEnginesCertificateCa); err != nil {
				return err
			}
		}
	}

	if o.EnginesCertificateNameQueryParameter != nil {

		// query param engines.certificate.name
		var qrEnginesCertificateName string

		if o.EnginesCertificateNameQueryParameter != nil {
			qrEnginesCertificateName = *o.EnginesCertificateNameQueryParameter
		}
		qEnginesCertificateName := qrEnginesCertificateName
		if qEnginesCertificateName != "" {

			if err := r.SetQueryParam("engines.certificate.name", qEnginesCertificateName); err != nil {
				return err
			}
		}
	}

	if o.EnginesCertificateSerialNumberQueryParameter != nil {

		// query param engines.certificate.serial_number
		var qrEnginesCertificateSerialNumber string

		if o.EnginesCertificateSerialNumberQueryParameter != nil {
			qrEnginesCertificateSerialNumber = *o.EnginesCertificateSerialNumberQueryParameter
		}
		qEnginesCertificateSerialNumber := qrEnginesCertificateSerialNumber
		if qEnginesCertificateSerialNumber != "" {

			if err := r.SetQueryParam("engines.certificate.serial_number", qEnginesCertificateSerialNumber); err != nil {
				return err
			}
		}
	}

	if o.EnginesFormatQueryParameter != nil {

		// query param engines.format
		var qrEnginesFormat string

		if o.EnginesFormatQueryParameter != nil {
			qrEnginesFormat = *o.EnginesFormatQueryParameter
		}
		qEnginesFormat := qrEnginesFormat
		if qEnginesFormat != "" {

			if err := r.SetQueryParam("engines.format", qEnginesFormat); err != nil {
				return err
			}
		}
	}

	if o.EnginesMaxServerRequestsQueryParameter != nil {

		// query param engines.max_server_requests
		var qrEnginesMaxServerRequests int64

		if o.EnginesMaxServerRequestsQueryParameter != nil {
			qrEnginesMaxServerRequests = *o.EnginesMaxServerRequestsQueryParameter
		}
		qEnginesMaxServerRequests := swag.FormatInt64(qrEnginesMaxServerRequests)
		if qEnginesMaxServerRequests != "" {

			if err := r.SetQueryParam("engines.max_server_requests", qEnginesMaxServerRequests); err != nil {
				return err
			}
		}
	}

	if o.EnginesNameQueryParameter != nil {

		// query param engines.name
		var qrEnginesName string

		if o.EnginesNameQueryParameter != nil {
			qrEnginesName = *o.EnginesNameQueryParameter
		}
		qEnginesName := qrEnginesName
		if qEnginesName != "" {

			if err := r.SetQueryParam("engines.name", qEnginesName); err != nil {
				return err
			}
		}
	}

	if o.EnginesPortQueryParameter != nil {

		// query param engines.port
		var qrEnginesPort int64

		if o.EnginesPortQueryParameter != nil {
			qrEnginesPort = *o.EnginesPortQueryParameter
		}
		qEnginesPort := swag.FormatInt64(qrEnginesPort)
		if qEnginesPort != "" {

			if err := r.SetQueryParam("engines.port", qEnginesPort); err != nil {
				return err
			}
		}
	}

	if o.EnginesPrimaryServersQueryParameter != nil {

		// query param engines.primary_servers
		var qrEnginesPrimaryServers string

		if o.EnginesPrimaryServersQueryParameter != nil {
			qrEnginesPrimaryServers = *o.EnginesPrimaryServersQueryParameter
		}
		qEnginesPrimaryServers := qrEnginesPrimaryServers
		if qEnginesPrimaryServers != "" {

			if err := r.SetQueryParam("engines.primary_servers", qEnginesPrimaryServers); err != nil {
				return err
			}
		}
	}

	if o.EnginesRequestAbortTimeoutQueryParameter != nil {

		// query param engines.request_abort_timeout
		var qrEnginesRequestAbortTimeout string

		if o.EnginesRequestAbortTimeoutQueryParameter != nil {
			qrEnginesRequestAbortTimeout = *o.EnginesRequestAbortTimeoutQueryParameter
		}
		qEnginesRequestAbortTimeout := qrEnginesRequestAbortTimeout
		if qEnginesRequestAbortTimeout != "" {

			if err := r.SetQueryParam("engines.request_abort_timeout", qEnginesRequestAbortTimeout); err != nil {
				return err
			}
		}
	}

	if o.EnginesRequestCancelTimeoutQueryParameter != nil {

		// query param engines.request_cancel_timeout
		var qrEnginesRequestCancelTimeout string

		if o.EnginesRequestCancelTimeoutQueryParameter != nil {
			qrEnginesRequestCancelTimeout = *o.EnginesRequestCancelTimeoutQueryParameter
		}
		qEnginesRequestCancelTimeout := qrEnginesRequestCancelTimeout
		if qEnginesRequestCancelTimeout != "" {

			if err := r.SetQueryParam("engines.request_cancel_timeout", qEnginesRequestCancelTimeout); err != nil {
				return err
			}
		}
	}

	if o.EnginesResiliencyDirectoryPathQueryParameter != nil {

		// query param engines.resiliency.directory_path
		var qrEnginesResiliencyDirectoryPath string

		if o.EnginesResiliencyDirectoryPathQueryParameter != nil {
			qrEnginesResiliencyDirectoryPath = *o.EnginesResiliencyDirectoryPathQueryParameter
		}
		qEnginesResiliencyDirectoryPath := qrEnginesResiliencyDirectoryPath
		if qEnginesResiliencyDirectoryPath != "" {

			if err := r.SetQueryParam("engines.resiliency.directory_path", qEnginesResiliencyDirectoryPath); err != nil {
				return err
			}
		}
	}

	if o.EnginesResiliencyEnabledQueryParameter != nil {

		// query param engines.resiliency.enabled
		var qrEnginesResiliencyEnabled bool

		if o.EnginesResiliencyEnabledQueryParameter != nil {
			qrEnginesResiliencyEnabled = *o.EnginesResiliencyEnabledQueryParameter
		}
		qEnginesResiliencyEnabled := swag.FormatBool(qrEnginesResiliencyEnabled)
		if qEnginesResiliencyEnabled != "" {

			if err := r.SetQueryParam("engines.resiliency.enabled", qEnginesResiliencyEnabled); err != nil {
				return err
			}
		}
	}

	if o.EnginesResiliencyRetentionDurationQueryParameter != nil {

		// query param engines.resiliency.retention_duration
		var qrEnginesResiliencyRetentionDuration string

		if o.EnginesResiliencyRetentionDurationQueryParameter != nil {
			qrEnginesResiliencyRetentionDuration = *o.EnginesResiliencyRetentionDurationQueryParameter
		}
		qEnginesResiliencyRetentionDuration := qrEnginesResiliencyRetentionDuration
		if qEnginesResiliencyRetentionDuration != "" {

			if err := r.SetQueryParam("engines.resiliency.retention_duration", qEnginesResiliencyRetentionDuration); err != nil {
				return err
			}
		}
	}

	if o.EnginesSecondaryServersQueryParameter != nil {

		// query param engines.secondary_servers
		var qrEnginesSecondaryServers string

		if o.EnginesSecondaryServersQueryParameter != nil {
			qrEnginesSecondaryServers = *o.EnginesSecondaryServersQueryParameter
		}
		qEnginesSecondaryServers := qrEnginesSecondaryServers
		if qEnginesSecondaryServers != "" {

			if err := r.SetQueryParam("engines.secondary_servers", qEnginesSecondaryServers); err != nil {
				return err
			}
		}
	}

	if o.EnginesServerProgressTimeoutQueryParameter != nil {

		// query param engines.server_progress_timeout
		var qrEnginesServerProgressTimeout string

		if o.EnginesServerProgressTimeoutQueryParameter != nil {
			qrEnginesServerProgressTimeout = *o.EnginesServerProgressTimeoutQueryParameter
		}
		qEnginesServerProgressTimeout := qrEnginesServerProgressTimeout
		if qEnginesServerProgressTimeout != "" {

			if err := r.SetQueryParam("engines.server_progress_timeout", qEnginesServerProgressTimeout); err != nil {
				return err
			}
		}
	}

	if o.EnginesSslOptionQueryParameter != nil {

		// query param engines.ssl_option
		var qrEnginesSslOption string

		if o.EnginesSslOptionQueryParameter != nil {
			qrEnginesSslOption = *o.EnginesSslOptionQueryParameter
		}
		qEnginesSslOption := qrEnginesSslOption
		if qEnginesSslOption != "" {

			if err := r.SetQueryParam("engines.ssl_option", qEnginesSslOption); err != nil {
				return err
			}
		}
	}

	if o.EnginesStatusRequestIntervalQueryParameter != nil {

		// query param engines.status_request_interval
		var qrEnginesStatusRequestInterval string

		if o.EnginesStatusRequestIntervalQueryParameter != nil {
			qrEnginesStatusRequestInterval = *o.EnginesStatusRequestIntervalQueryParameter
		}
		qEnginesStatusRequestInterval := qrEnginesStatusRequestInterval
		if qEnginesStatusRequestInterval != "" {

			if err := r.SetQueryParam("engines.status_request_interval", qEnginesStatusRequestInterval); err != nil {
				return err
			}
		}
	}

	if o.EnginesTypeQueryParameter != nil {

		// query param engines.type
		var qrEnginesType string

		if o.EnginesTypeQueryParameter != nil {
			qrEnginesType = *o.EnginesTypeQueryParameter
		}
		qEnginesType := qrEnginesType
		if qEnginesType != "" {

			if err := r.SetQueryParam("engines.type", qEnginesType); err != nil {
				return err
			}
		}
	}

	if o.EventsFileOperationsCloseQueryParameter != nil {

		// query param events.file_operations.close
		var qrEventsFileOperationsClose bool

		if o.EventsFileOperationsCloseQueryParameter != nil {
			qrEventsFileOperationsClose = *o.EventsFileOperationsCloseQueryParameter
		}
		qEventsFileOperationsClose := swag.FormatBool(qrEventsFileOperationsClose)
		if qEventsFileOperationsClose != "" {

			if err := r.SetQueryParam("events.file_operations.close", qEventsFileOperationsClose); err != nil {
				return err
			}
		}
	}

	if o.EventsFileOperationsCreateQueryParameter != nil {

		// query param events.file_operations.create
		var qrEventsFileOperationsCreate bool

		if o.EventsFileOperationsCreateQueryParameter != nil {
			qrEventsFileOperationsCreate = *o.EventsFileOperationsCreateQueryParameter
		}
		qEventsFileOperationsCreate := swag.FormatBool(qrEventsFileOperationsCreate)
		if qEventsFileOperationsCreate != "" {

			if err := r.SetQueryParam("events.file_operations.create", qEventsFileOperationsCreate); err != nil {
				return err
			}
		}
	}

	if o.EventsFileOperationsCreateDirQueryParameter != nil {

		// query param events.file_operations.create_dir
		var qrEventsFileOperationsCreateDir bool

		if o.EventsFileOperationsCreateDirQueryParameter != nil {
			qrEventsFileOperationsCreateDir = *o.EventsFileOperationsCreateDirQueryParameter
		}
		qEventsFileOperationsCreateDir := swag.FormatBool(qrEventsFileOperationsCreateDir)
		if qEventsFileOperationsCreateDir != "" {

			if err := r.SetQueryParam("events.file_operations.create_dir", qEventsFileOperationsCreateDir); err != nil {
				return err
			}
		}
	}

	if o.EventsFileOperationsDeleteQueryParameter != nil {

		// query param events.file_operations.delete
		var qrEventsFileOperationsDelete bool

		if o.EventsFileOperationsDeleteQueryParameter != nil {
			qrEventsFileOperationsDelete = *o.EventsFileOperationsDeleteQueryParameter
		}
		qEventsFileOperationsDelete := swag.FormatBool(qrEventsFileOperationsDelete)
		if qEventsFileOperationsDelete != "" {

			if err := r.SetQueryParam("events.file_operations.delete", qEventsFileOperationsDelete); err != nil {
				return err
			}
		}
	}

	if o.EventsFileOperationsDeleteDirQueryParameter != nil {

		// query param events.file_operations.delete_dir
		var qrEventsFileOperationsDeleteDir bool

		if o.EventsFileOperationsDeleteDirQueryParameter != nil {
			qrEventsFileOperationsDeleteDir = *o.EventsFileOperationsDeleteDirQueryParameter
		}
		qEventsFileOperationsDeleteDir := swag.FormatBool(qrEventsFileOperationsDeleteDir)
		if qEventsFileOperationsDeleteDir != "" {

			if err := r.SetQueryParam("events.file_operations.delete_dir", qEventsFileOperationsDeleteDir); err != nil {
				return err
			}
		}
	}

	if o.EventsFileOperationsGetattrQueryParameter != nil {

		// query param events.file_operations.getattr
		var qrEventsFileOperationsGetattr bool

		if o.EventsFileOperationsGetattrQueryParameter != nil {
			qrEventsFileOperationsGetattr = *o.EventsFileOperationsGetattrQueryParameter
		}
		qEventsFileOperationsGetattr := swag.FormatBool(qrEventsFileOperationsGetattr)
		if qEventsFileOperationsGetattr != "" {

			if err := r.SetQueryParam("events.file_operations.getattr", qEventsFileOperationsGetattr); err != nil {
				return err
			}
		}
	}

	if o.EventsFileOperationsLinkQueryParameter != nil {

		// query param events.file_operations.link
		var qrEventsFileOperationsLink bool

		if o.EventsFileOperationsLinkQueryParameter != nil {
			qrEventsFileOperationsLink = *o.EventsFileOperationsLinkQueryParameter
		}
		qEventsFileOperationsLink := swag.FormatBool(qrEventsFileOperationsLink)
		if qEventsFileOperationsLink != "" {

			if err := r.SetQueryParam("events.file_operations.link", qEventsFileOperationsLink); err != nil {
				return err
			}
		}
	}

	if o.EventsFileOperationsLookupQueryParameter != nil {

		// query param events.file_operations.lookup
		var qrEventsFileOperationsLookup bool

		if o.EventsFileOperationsLookupQueryParameter != nil {
			qrEventsFileOperationsLookup = *o.EventsFileOperationsLookupQueryParameter
		}
		qEventsFileOperationsLookup := swag.FormatBool(qrEventsFileOperationsLookup)
		if qEventsFileOperationsLookup != "" {

			if err := r.SetQueryParam("events.file_operations.lookup", qEventsFileOperationsLookup); err != nil {
				return err
			}
		}
	}

	if o.EventsFileOperationsOpenQueryParameter != nil {

		// query param events.file_operations.open
		var qrEventsFileOperationsOpen bool

		if o.EventsFileOperationsOpenQueryParameter != nil {
			qrEventsFileOperationsOpen = *o.EventsFileOperationsOpenQueryParameter
		}
		qEventsFileOperationsOpen := swag.FormatBool(qrEventsFileOperationsOpen)
		if qEventsFileOperationsOpen != "" {

			if err := r.SetQueryParam("events.file_operations.open", qEventsFileOperationsOpen); err != nil {
				return err
			}
		}
	}

	if o.EventsFileOperationsReadQueryParameter != nil {

		// query param events.file_operations.read
		var qrEventsFileOperationsRead bool

		if o.EventsFileOperationsReadQueryParameter != nil {
			qrEventsFileOperationsRead = *o.EventsFileOperationsReadQueryParameter
		}
		qEventsFileOperationsRead := swag.FormatBool(qrEventsFileOperationsRead)
		if qEventsFileOperationsRead != "" {

			if err := r.SetQueryParam("events.file_operations.read", qEventsFileOperationsRead); err != nil {
				return err
			}
		}
	}

	if o.EventsFileOperationsRenameQueryParameter != nil {

		// query param events.file_operations.rename
		var qrEventsFileOperationsRename bool

		if o.EventsFileOperationsRenameQueryParameter != nil {
			qrEventsFileOperationsRename = *o.EventsFileOperationsRenameQueryParameter
		}
		qEventsFileOperationsRename := swag.FormatBool(qrEventsFileOperationsRename)
		if qEventsFileOperationsRename != "" {

			if err := r.SetQueryParam("events.file_operations.rename", qEventsFileOperationsRename); err != nil {
				return err
			}
		}
	}

	if o.EventsFileOperationsRenameDirQueryParameter != nil {

		// query param events.file_operations.rename_dir
		var qrEventsFileOperationsRenameDir bool

		if o.EventsFileOperationsRenameDirQueryParameter != nil {
			qrEventsFileOperationsRenameDir = *o.EventsFileOperationsRenameDirQueryParameter
		}
		qEventsFileOperationsRenameDir := swag.FormatBool(qrEventsFileOperationsRenameDir)
		if qEventsFileOperationsRenameDir != "" {

			if err := r.SetQueryParam("events.file_operations.rename_dir", qEventsFileOperationsRenameDir); err != nil {
				return err
			}
		}
	}

	if o.EventsFileOperationsSetattrQueryParameter != nil {

		// query param events.file_operations.setattr
		var qrEventsFileOperationsSetattr bool

		if o.EventsFileOperationsSetattrQueryParameter != nil {
			qrEventsFileOperationsSetattr = *o.EventsFileOperationsSetattrQueryParameter
		}
		qEventsFileOperationsSetattr := swag.FormatBool(qrEventsFileOperationsSetattr)
		if qEventsFileOperationsSetattr != "" {

			if err := r.SetQueryParam("events.file_operations.setattr", qEventsFileOperationsSetattr); err != nil {
				return err
			}
		}
	}

	if o.EventsFileOperationsSymlinkQueryParameter != nil {

		// query param events.file_operations.symlink
		var qrEventsFileOperationsSymlink bool

		if o.EventsFileOperationsSymlinkQueryParameter != nil {
			qrEventsFileOperationsSymlink = *o.EventsFileOperationsSymlinkQueryParameter
		}
		qEventsFileOperationsSymlink := swag.FormatBool(qrEventsFileOperationsSymlink)
		if qEventsFileOperationsSymlink != "" {

			if err := r.SetQueryParam("events.file_operations.symlink", qEventsFileOperationsSymlink); err != nil {
				return err
			}
		}
	}

	if o.EventsFileOperationsWriteQueryParameter != nil {

		// query param events.file_operations.write
		var qrEventsFileOperationsWrite bool

		if o.EventsFileOperationsWriteQueryParameter != nil {
			qrEventsFileOperationsWrite = *o.EventsFileOperationsWriteQueryParameter
		}
		qEventsFileOperationsWrite := swag.FormatBool(qrEventsFileOperationsWrite)
		if qEventsFileOperationsWrite != "" {

			if err := r.SetQueryParam("events.file_operations.write", qEventsFileOperationsWrite); err != nil {
				return err
			}
		}
	}

	if o.EventsFiltersCloseWithModificationQueryParameter != nil {

		// query param events.filters.close_with_modification
		var qrEventsFiltersCloseWithModification bool

		if o.EventsFiltersCloseWithModificationQueryParameter != nil {
			qrEventsFiltersCloseWithModification = *o.EventsFiltersCloseWithModificationQueryParameter
		}
		qEventsFiltersCloseWithModification := swag.FormatBool(qrEventsFiltersCloseWithModification)
		if qEventsFiltersCloseWithModification != "" {

			if err := r.SetQueryParam("events.filters.close_with_modification", qEventsFiltersCloseWithModification); err != nil {
				return err
			}
		}
	}

	if o.EventsFiltersCloseWithReadQueryParameter != nil {

		// query param events.filters.close_with_read
		var qrEventsFiltersCloseWithRead bool

		if o.EventsFiltersCloseWithReadQueryParameter != nil {
			qrEventsFiltersCloseWithRead = *o.EventsFiltersCloseWithReadQueryParameter
		}
		qEventsFiltersCloseWithRead := swag.FormatBool(qrEventsFiltersCloseWithRead)
		if qEventsFiltersCloseWithRead != "" {

			if err := r.SetQueryParam("events.filters.close_with_read", qEventsFiltersCloseWithRead); err != nil {
				return err
			}
		}
	}

	if o.EventsFiltersCloseWithoutModificationQueryParameter != nil {

		// query param events.filters.close_without_modification
		var qrEventsFiltersCloseWithoutModification bool

		if o.EventsFiltersCloseWithoutModificationQueryParameter != nil {
			qrEventsFiltersCloseWithoutModification = *o.EventsFiltersCloseWithoutModificationQueryParameter
		}
		qEventsFiltersCloseWithoutModification := swag.FormatBool(qrEventsFiltersCloseWithoutModification)
		if qEventsFiltersCloseWithoutModification != "" {

			if err := r.SetQueryParam("events.filters.close_without_modification", qEventsFiltersCloseWithoutModification); err != nil {
				return err
			}
		}
	}

	if o.EventsFiltersExcludeDirectoryQueryParameter != nil {

		// query param events.filters.exclude_directory
		var qrEventsFiltersExcludeDirectory bool

		if o.EventsFiltersExcludeDirectoryQueryParameter != nil {
			qrEventsFiltersExcludeDirectory = *o.EventsFiltersExcludeDirectoryQueryParameter
		}
		qEventsFiltersExcludeDirectory := swag.FormatBool(qrEventsFiltersExcludeDirectory)
		if qEventsFiltersExcludeDirectory != "" {

			if err := r.SetQueryParam("events.filters.exclude_directory", qEventsFiltersExcludeDirectory); err != nil {
				return err
			}
		}
	}

	if o.EventsFiltersFirstReadQueryParameter != nil {

		// query param events.filters.first_read
		var qrEventsFiltersFirstRead bool

		if o.EventsFiltersFirstReadQueryParameter != nil {
			qrEventsFiltersFirstRead = *o.EventsFiltersFirstReadQueryParameter
		}
		qEventsFiltersFirstRead := swag.FormatBool(qrEventsFiltersFirstRead)
		if qEventsFiltersFirstRead != "" {

			if err := r.SetQueryParam("events.filters.first_read", qEventsFiltersFirstRead); err != nil {
				return err
			}
		}
	}

	if o.EventsFiltersFirstWriteQueryParameter != nil {

		// query param events.filters.first_write
		var qrEventsFiltersFirstWrite bool

		if o.EventsFiltersFirstWriteQueryParameter != nil {
			qrEventsFiltersFirstWrite = *o.EventsFiltersFirstWriteQueryParameter
		}
		qEventsFiltersFirstWrite := swag.FormatBool(qrEventsFiltersFirstWrite)
		if qEventsFiltersFirstWrite != "" {

			if err := r.SetQueryParam("events.filters.first_write", qEventsFiltersFirstWrite); err != nil {
				return err
			}
		}
	}

	if o.EventsFiltersMonitorAdsQueryParameter != nil {

		// query param events.filters.monitor_ads
		var qrEventsFiltersMonitorAds bool

		if o.EventsFiltersMonitorAdsQueryParameter != nil {
			qrEventsFiltersMonitorAds = *o.EventsFiltersMonitorAdsQueryParameter
		}
		qEventsFiltersMonitorAds := swag.FormatBool(qrEventsFiltersMonitorAds)
		if qEventsFiltersMonitorAds != "" {

			if err := r.SetQueryParam("events.filters.monitor_ads", qEventsFiltersMonitorAds); err != nil {
				return err
			}
		}
	}

	if o.EventsFiltersOfflineBitQueryParameter != nil {

		// query param events.filters.offline_bit
		var qrEventsFiltersOfflineBit bool

		if o.EventsFiltersOfflineBitQueryParameter != nil {
			qrEventsFiltersOfflineBit = *o.EventsFiltersOfflineBitQueryParameter
		}
		qEventsFiltersOfflineBit := swag.FormatBool(qrEventsFiltersOfflineBit)
		if qEventsFiltersOfflineBit != "" {

			if err := r.SetQueryParam("events.filters.offline_bit", qEventsFiltersOfflineBit); err != nil {
				return err
			}
		}
	}

	if o.EventsFiltersOpenWithDeleteIntentQueryParameter != nil {

		// query param events.filters.open_with_delete_intent
		var qrEventsFiltersOpenWithDeleteIntent bool

		if o.EventsFiltersOpenWithDeleteIntentQueryParameter != nil {
			qrEventsFiltersOpenWithDeleteIntent = *o.EventsFiltersOpenWithDeleteIntentQueryParameter
		}
		qEventsFiltersOpenWithDeleteIntent := swag.FormatBool(qrEventsFiltersOpenWithDeleteIntent)
		if qEventsFiltersOpenWithDeleteIntent != "" {

			if err := r.SetQueryParam("events.filters.open_with_delete_intent", qEventsFiltersOpenWithDeleteIntent); err != nil {
				return err
			}
		}
	}

	if o.EventsFiltersOpenWithWriteIntentQueryParameter != nil {

		// query param events.filters.open_with_write_intent
		var qrEventsFiltersOpenWithWriteIntent bool

		if o.EventsFiltersOpenWithWriteIntentQueryParameter != nil {
			qrEventsFiltersOpenWithWriteIntent = *o.EventsFiltersOpenWithWriteIntentQueryParameter
		}
		qEventsFiltersOpenWithWriteIntent := swag.FormatBool(qrEventsFiltersOpenWithWriteIntent)
		if qEventsFiltersOpenWithWriteIntent != "" {

			if err := r.SetQueryParam("events.filters.open_with_write_intent", qEventsFiltersOpenWithWriteIntent); err != nil {
				return err
			}
		}
	}

	if o.EventsFiltersSetattrWithAccessTimeChangeQueryParameter != nil {

		// query param events.filters.setattr_with_access_time_change
		var qrEventsFiltersSetattrWithAccessTimeChange bool

		if o.EventsFiltersSetattrWithAccessTimeChangeQueryParameter != nil {
			qrEventsFiltersSetattrWithAccessTimeChange = *o.EventsFiltersSetattrWithAccessTimeChangeQueryParameter
		}
		qEventsFiltersSetattrWithAccessTimeChange := swag.FormatBool(qrEventsFiltersSetattrWithAccessTimeChange)
		if qEventsFiltersSetattrWithAccessTimeChange != "" {

			if err := r.SetQueryParam("events.filters.setattr_with_access_time_change", qEventsFiltersSetattrWithAccessTimeChange); err != nil {
				return err
			}
		}
	}

	if o.EventsFiltersSetattrWithAllocationSizeChangeQueryParameter != nil {

		// query param events.filters.setattr_with_allocation_size_change
		var qrEventsFiltersSetattrWithAllocationSizeChange bool

		if o.EventsFiltersSetattrWithAllocationSizeChangeQueryParameter != nil {
			qrEventsFiltersSetattrWithAllocationSizeChange = *o.EventsFiltersSetattrWithAllocationSizeChangeQueryParameter
		}
		qEventsFiltersSetattrWithAllocationSizeChange := swag.FormatBool(qrEventsFiltersSetattrWithAllocationSizeChange)
		if qEventsFiltersSetattrWithAllocationSizeChange != "" {

			if err := r.SetQueryParam("events.filters.setattr_with_allocation_size_change", qEventsFiltersSetattrWithAllocationSizeChange); err != nil {
				return err
			}
		}
	}

	if o.EventsFiltersSetattrWithCreationTimeChangeQueryParameter != nil {

		// query param events.filters.setattr_with_creation_time_change
		var qrEventsFiltersSetattrWithCreationTimeChange bool

		if o.EventsFiltersSetattrWithCreationTimeChangeQueryParameter != nil {
			qrEventsFiltersSetattrWithCreationTimeChange = *o.EventsFiltersSetattrWithCreationTimeChangeQueryParameter
		}
		qEventsFiltersSetattrWithCreationTimeChange := swag.FormatBool(qrEventsFiltersSetattrWithCreationTimeChange)
		if qEventsFiltersSetattrWithCreationTimeChange != "" {

			if err := r.SetQueryParam("events.filters.setattr_with_creation_time_change", qEventsFiltersSetattrWithCreationTimeChange); err != nil {
				return err
			}
		}
	}

	if o.EventsFiltersSetattrWithDACLChangeQueryParameter != nil {

		// query param events.filters.setattr_with_dacl_change
		var qrEventsFiltersSetattrWithDaclChange bool

		if o.EventsFiltersSetattrWithDACLChangeQueryParameter != nil {
			qrEventsFiltersSetattrWithDaclChange = *o.EventsFiltersSetattrWithDACLChangeQueryParameter
		}
		qEventsFiltersSetattrWithDaclChange := swag.FormatBool(qrEventsFiltersSetattrWithDaclChange)
		if qEventsFiltersSetattrWithDaclChange != "" {

			if err := r.SetQueryParam("events.filters.setattr_with_dacl_change", qEventsFiltersSetattrWithDaclChange); err != nil {
				return err
			}
		}
	}

	if o.EventsFiltersSetattrWithGroupChangeQueryParameter != nil {

		// query param events.filters.setattr_with_group_change
		var qrEventsFiltersSetattrWithGroupChange bool

		if o.EventsFiltersSetattrWithGroupChangeQueryParameter != nil {
			qrEventsFiltersSetattrWithGroupChange = *o.EventsFiltersSetattrWithGroupChangeQueryParameter
		}
		qEventsFiltersSetattrWithGroupChange := swag.FormatBool(qrEventsFiltersSetattrWithGroupChange)
		if qEventsFiltersSetattrWithGroupChange != "" {

			if err := r.SetQueryParam("events.filters.setattr_with_group_change", qEventsFiltersSetattrWithGroupChange); err != nil {
				return err
			}
		}
	}

	if o.EventsFiltersSetattrWithModeChangeQueryParameter != nil {

		// query param events.filters.setattr_with_mode_change
		var qrEventsFiltersSetattrWithModeChange bool

		if o.EventsFiltersSetattrWithModeChangeQueryParameter != nil {
			qrEventsFiltersSetattrWithModeChange = *o.EventsFiltersSetattrWithModeChangeQueryParameter
		}
		qEventsFiltersSetattrWithModeChange := swag.FormatBool(qrEventsFiltersSetattrWithModeChange)
		if qEventsFiltersSetattrWithModeChange != "" {

			if err := r.SetQueryParam("events.filters.setattr_with_mode_change", qEventsFiltersSetattrWithModeChange); err != nil {
				return err
			}
		}
	}

	if o.EventsFiltersSetattrWithModifyTimeChangeQueryParameter != nil {

		// query param events.filters.setattr_with_modify_time_change
		var qrEventsFiltersSetattrWithModifyTimeChange bool

		if o.EventsFiltersSetattrWithModifyTimeChangeQueryParameter != nil {
			qrEventsFiltersSetattrWithModifyTimeChange = *o.EventsFiltersSetattrWithModifyTimeChangeQueryParameter
		}
		qEventsFiltersSetattrWithModifyTimeChange := swag.FormatBool(qrEventsFiltersSetattrWithModifyTimeChange)
		if qEventsFiltersSetattrWithModifyTimeChange != "" {

			if err := r.SetQueryParam("events.filters.setattr_with_modify_time_change", qEventsFiltersSetattrWithModifyTimeChange); err != nil {
				return err
			}
		}
	}

	if o.EventsFiltersSetattrWithOwnerChangeQueryParameter != nil {

		// query param events.filters.setattr_with_owner_change
		var qrEventsFiltersSetattrWithOwnerChange bool

		if o.EventsFiltersSetattrWithOwnerChangeQueryParameter != nil {
			qrEventsFiltersSetattrWithOwnerChange = *o.EventsFiltersSetattrWithOwnerChangeQueryParameter
		}
		qEventsFiltersSetattrWithOwnerChange := swag.FormatBool(qrEventsFiltersSetattrWithOwnerChange)
		if qEventsFiltersSetattrWithOwnerChange != "" {

			if err := r.SetQueryParam("events.filters.setattr_with_owner_change", qEventsFiltersSetattrWithOwnerChange); err != nil {
				return err
			}
		}
	}

	if o.EventsFiltersSetattrWithSACLChangeQueryParameter != nil {

		// query param events.filters.setattr_with_sacl_change
		var qrEventsFiltersSetattrWithSaclChange bool

		if o.EventsFiltersSetattrWithSACLChangeQueryParameter != nil {
			qrEventsFiltersSetattrWithSaclChange = *o.EventsFiltersSetattrWithSACLChangeQueryParameter
		}
		qEventsFiltersSetattrWithSaclChange := swag.FormatBool(qrEventsFiltersSetattrWithSaclChange)
		if qEventsFiltersSetattrWithSaclChange != "" {

			if err := r.SetQueryParam("events.filters.setattr_with_sacl_change", qEventsFiltersSetattrWithSaclChange); err != nil {
				return err
			}
		}
	}

	if o.EventsFiltersSetattrWithSizeChangeQueryParameter != nil {

		// query param events.filters.setattr_with_size_change
		var qrEventsFiltersSetattrWithSizeChange bool

		if o.EventsFiltersSetattrWithSizeChangeQueryParameter != nil {
			qrEventsFiltersSetattrWithSizeChange = *o.EventsFiltersSetattrWithSizeChangeQueryParameter
		}
		qEventsFiltersSetattrWithSizeChange := swag.FormatBool(qrEventsFiltersSetattrWithSizeChange)
		if qEventsFiltersSetattrWithSizeChange != "" {

			if err := r.SetQueryParam("events.filters.setattr_with_size_change", qEventsFiltersSetattrWithSizeChange); err != nil {
				return err
			}
		}
	}

	if o.EventsFiltersWriteWithSizeChangeQueryParameter != nil {

		// query param events.filters.write_with_size_change
		var qrEventsFiltersWriteWithSizeChange bool

		if o.EventsFiltersWriteWithSizeChangeQueryParameter != nil {
			qrEventsFiltersWriteWithSizeChange = *o.EventsFiltersWriteWithSizeChangeQueryParameter
		}
		qEventsFiltersWriteWithSizeChange := swag.FormatBool(qrEventsFiltersWriteWithSizeChange)
		if qEventsFiltersWriteWithSizeChange != "" {

			if err := r.SetQueryParam("events.filters.write_with_size_change", qEventsFiltersWriteWithSizeChange); err != nil {
				return err
			}
		}
	}

	if o.EventsNameQueryParameter != nil {

		// query param events.name
		var qrEventsName string

		if o.EventsNameQueryParameter != nil {
			qrEventsName = *o.EventsNameQueryParameter
		}
		qEventsName := qrEventsName
		if qEventsName != "" {

			if err := r.SetQueryParam("events.name", qEventsName); err != nil {
				return err
			}
		}
	}

	if o.EventsProtocolQueryParameter != nil {

		// query param events.protocol
		var qrEventsProtocol string

		if o.EventsProtocolQueryParameter != nil {
			qrEventsProtocol = *o.EventsProtocolQueryParameter
		}
		qEventsProtocol := qrEventsProtocol
		if qEventsProtocol != "" {

			if err := r.SetQueryParam("events.protocol", qEventsProtocol); err != nil {
				return err
			}
		}
	}

	if o.EventsVolumeMonitoringQueryParameter != nil {

		// query param events.volume_monitoring
		var qrEventsVolumeMonitoring bool

		if o.EventsVolumeMonitoringQueryParameter != nil {
			qrEventsVolumeMonitoring = *o.EventsVolumeMonitoringQueryParameter
		}
		qEventsVolumeMonitoring := swag.FormatBool(qrEventsVolumeMonitoring)
		if qEventsVolumeMonitoring != "" {

			if err := r.SetQueryParam("events.volume_monitoring", qEventsVolumeMonitoring); err != nil {
				return err
			}
		}
	}

	if o.FieldsQueryParameter != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.MaxRecordsQueryParameter != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecordsQueryParameter != nil {
			qrMaxRecords = *o.MaxRecordsQueryParameter
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.OrderByQueryParameter != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.PoliciesEnabledQueryParameter != nil {

		// query param policies.enabled
		var qrPoliciesEnabled bool

		if o.PoliciesEnabledQueryParameter != nil {
			qrPoliciesEnabled = *o.PoliciesEnabledQueryParameter
		}
		qPoliciesEnabled := swag.FormatBool(qrPoliciesEnabled)
		if qPoliciesEnabled != "" {

			if err := r.SetQueryParam("policies.enabled", qPoliciesEnabled); err != nil {
				return err
			}
		}
	}

	if o.PoliciesEngineNameQueryParameter != nil {

		// query param policies.engine.name
		var qrPoliciesEngineName string

		if o.PoliciesEngineNameQueryParameter != nil {
			qrPoliciesEngineName = *o.PoliciesEngineNameQueryParameter
		}
		qPoliciesEngineName := qrPoliciesEngineName
		if qPoliciesEngineName != "" {

			if err := r.SetQueryParam("policies.engine.name", qPoliciesEngineName); err != nil {
				return err
			}
		}
	}

	if o.PoliciesEventsNameQueryParameter != nil {

		// query param policies.events.name
		var qrPoliciesEventsName string

		if o.PoliciesEventsNameQueryParameter != nil {
			qrPoliciesEventsName = *o.PoliciesEventsNameQueryParameter
		}
		qPoliciesEventsName := qrPoliciesEventsName
		if qPoliciesEventsName != "" {

			if err := r.SetQueryParam("policies.events.name", qPoliciesEventsName); err != nil {
				return err
			}
		}
	}

	if o.PoliciesMandatoryQueryParameter != nil {

		// query param policies.mandatory
		var qrPoliciesMandatory bool

		if o.PoliciesMandatoryQueryParameter != nil {
			qrPoliciesMandatory = *o.PoliciesMandatoryQueryParameter
		}
		qPoliciesMandatory := swag.FormatBool(qrPoliciesMandatory)
		if qPoliciesMandatory != "" {

			if err := r.SetQueryParam("policies.mandatory", qPoliciesMandatory); err != nil {
				return err
			}
		}
	}

	if o.PoliciesNameQueryParameter != nil {

		// query param policies.name
		var qrPoliciesName string

		if o.PoliciesNameQueryParameter != nil {
			qrPoliciesName = *o.PoliciesNameQueryParameter
		}
		qPoliciesName := qrPoliciesName
		if qPoliciesName != "" {

			if err := r.SetQueryParam("policies.name", qPoliciesName); err != nil {
				return err
			}
		}
	}

	if o.PoliciesPassthroughReadQueryParameter != nil {

		// query param policies.passthrough_read
		var qrPoliciesPassthroughRead bool

		if o.PoliciesPassthroughReadQueryParameter != nil {
			qrPoliciesPassthroughRead = *o.PoliciesPassthroughReadQueryParameter
		}
		qPoliciesPassthroughRead := swag.FormatBool(qrPoliciesPassthroughRead)
		if qPoliciesPassthroughRead != "" {

			if err := r.SetQueryParam("policies.passthrough_read", qPoliciesPassthroughRead); err != nil {
				return err
			}
		}
	}

	if o.PoliciesPriorityQueryParameter != nil {

		// query param policies.priority
		var qrPoliciesPriority int64

		if o.PoliciesPriorityQueryParameter != nil {
			qrPoliciesPriority = *o.PoliciesPriorityQueryParameter
		}
		qPoliciesPriority := swag.FormatInt64(qrPoliciesPriority)
		if qPoliciesPriority != "" {

			if err := r.SetQueryParam("policies.priority", qPoliciesPriority); err != nil {
				return err
			}
		}
	}

	if o.PoliciesPrivilegedUserQueryParameter != nil {

		// query param policies.privileged_user
		var qrPoliciesPrivilegedUser string

		if o.PoliciesPrivilegedUserQueryParameter != nil {
			qrPoliciesPrivilegedUser = *o.PoliciesPrivilegedUserQueryParameter
		}
		qPoliciesPrivilegedUser := qrPoliciesPrivilegedUser
		if qPoliciesPrivilegedUser != "" {

			if err := r.SetQueryParam("policies.privileged_user", qPoliciesPrivilegedUser); err != nil {
				return err
			}
		}
	}

	if o.PoliciesScopeCheckExtensionsOnDirectoriesQueryParameter != nil {

		// query param policies.scope.check_extensions_on_directories
		var qrPoliciesScopeCheckExtensionsOnDirectories bool

		if o.PoliciesScopeCheckExtensionsOnDirectoriesQueryParameter != nil {
			qrPoliciesScopeCheckExtensionsOnDirectories = *o.PoliciesScopeCheckExtensionsOnDirectoriesQueryParameter
		}
		qPoliciesScopeCheckExtensionsOnDirectories := swag.FormatBool(qrPoliciesScopeCheckExtensionsOnDirectories)
		if qPoliciesScopeCheckExtensionsOnDirectories != "" {

			if err := r.SetQueryParam("policies.scope.check_extensions_on_directories", qPoliciesScopeCheckExtensionsOnDirectories); err != nil {
				return err
			}
		}
	}

	if o.PoliciesScopeExcludeExportPoliciesQueryParameter != nil {

		// query param policies.scope.exclude_export_policies
		var qrPoliciesScopeExcludeExportPolicies string

		if o.PoliciesScopeExcludeExportPoliciesQueryParameter != nil {
			qrPoliciesScopeExcludeExportPolicies = *o.PoliciesScopeExcludeExportPoliciesQueryParameter
		}
		qPoliciesScopeExcludeExportPolicies := qrPoliciesScopeExcludeExportPolicies
		if qPoliciesScopeExcludeExportPolicies != "" {

			if err := r.SetQueryParam("policies.scope.exclude_export_policies", qPoliciesScopeExcludeExportPolicies); err != nil {
				return err
			}
		}
	}

	if o.PoliciesScopeExcludeExtensionQueryParameter != nil {

		// query param policies.scope.exclude_extension
		var qrPoliciesScopeExcludeExtension string

		if o.PoliciesScopeExcludeExtensionQueryParameter != nil {
			qrPoliciesScopeExcludeExtension = *o.PoliciesScopeExcludeExtensionQueryParameter
		}
		qPoliciesScopeExcludeExtension := qrPoliciesScopeExcludeExtension
		if qPoliciesScopeExcludeExtension != "" {

			if err := r.SetQueryParam("policies.scope.exclude_extension", qPoliciesScopeExcludeExtension); err != nil {
				return err
			}
		}
	}

	if o.PoliciesScopeExcludeSharesQueryParameter != nil {

		// query param policies.scope.exclude_shares
		var qrPoliciesScopeExcludeShares string

		if o.PoliciesScopeExcludeSharesQueryParameter != nil {
			qrPoliciesScopeExcludeShares = *o.PoliciesScopeExcludeSharesQueryParameter
		}
		qPoliciesScopeExcludeShares := qrPoliciesScopeExcludeShares
		if qPoliciesScopeExcludeShares != "" {

			if err := r.SetQueryParam("policies.scope.exclude_shares", qPoliciesScopeExcludeShares); err != nil {
				return err
			}
		}
	}

	if o.PoliciesScopeExcludeVolumesQueryParameter != nil {

		// query param policies.scope.exclude_volumes
		var qrPoliciesScopeExcludeVolumes string

		if o.PoliciesScopeExcludeVolumesQueryParameter != nil {
			qrPoliciesScopeExcludeVolumes = *o.PoliciesScopeExcludeVolumesQueryParameter
		}
		qPoliciesScopeExcludeVolumes := qrPoliciesScopeExcludeVolumes
		if qPoliciesScopeExcludeVolumes != "" {

			if err := r.SetQueryParam("policies.scope.exclude_volumes", qPoliciesScopeExcludeVolumes); err != nil {
				return err
			}
		}
	}

	if o.PoliciesScopeIncludeExportPoliciesQueryParameter != nil {

		// query param policies.scope.include_export_policies
		var qrPoliciesScopeIncludeExportPolicies string

		if o.PoliciesScopeIncludeExportPoliciesQueryParameter != nil {
			qrPoliciesScopeIncludeExportPolicies = *o.PoliciesScopeIncludeExportPoliciesQueryParameter
		}
		qPoliciesScopeIncludeExportPolicies := qrPoliciesScopeIncludeExportPolicies
		if qPoliciesScopeIncludeExportPolicies != "" {

			if err := r.SetQueryParam("policies.scope.include_export_policies", qPoliciesScopeIncludeExportPolicies); err != nil {
				return err
			}
		}
	}

	if o.PoliciesScopeIncludeExtensionQueryParameter != nil {

		// query param policies.scope.include_extension
		var qrPoliciesScopeIncludeExtension string

		if o.PoliciesScopeIncludeExtensionQueryParameter != nil {
			qrPoliciesScopeIncludeExtension = *o.PoliciesScopeIncludeExtensionQueryParameter
		}
		qPoliciesScopeIncludeExtension := qrPoliciesScopeIncludeExtension
		if qPoliciesScopeIncludeExtension != "" {

			if err := r.SetQueryParam("policies.scope.include_extension", qPoliciesScopeIncludeExtension); err != nil {
				return err
			}
		}
	}

	if o.PoliciesScopeIncludeSharesQueryParameter != nil {

		// query param policies.scope.include_shares
		var qrPoliciesScopeIncludeShares string

		if o.PoliciesScopeIncludeSharesQueryParameter != nil {
			qrPoliciesScopeIncludeShares = *o.PoliciesScopeIncludeSharesQueryParameter
		}
		qPoliciesScopeIncludeShares := qrPoliciesScopeIncludeShares
		if qPoliciesScopeIncludeShares != "" {

			if err := r.SetQueryParam("policies.scope.include_shares", qPoliciesScopeIncludeShares); err != nil {
				return err
			}
		}
	}

	if o.PoliciesScopeIncludeVolumesQueryParameter != nil {

		// query param policies.scope.include_volumes
		var qrPoliciesScopeIncludeVolumes string

		if o.PoliciesScopeIncludeVolumesQueryParameter != nil {
			qrPoliciesScopeIncludeVolumes = *o.PoliciesScopeIncludeVolumesQueryParameter
		}
		qPoliciesScopeIncludeVolumes := qrPoliciesScopeIncludeVolumes
		if qPoliciesScopeIncludeVolumes != "" {

			if err := r.SetQueryParam("policies.scope.include_volumes", qPoliciesScopeIncludeVolumes); err != nil {
				return err
			}
		}
	}

	if o.PoliciesScopeObjectMonitoringWithNoExtensionQueryParameter != nil {

		// query param policies.scope.object_monitoring_with_no_extension
		var qrPoliciesScopeObjectMonitoringWithNoExtension bool

		if o.PoliciesScopeObjectMonitoringWithNoExtensionQueryParameter != nil {
			qrPoliciesScopeObjectMonitoringWithNoExtension = *o.PoliciesScopeObjectMonitoringWithNoExtensionQueryParameter
		}
		qPoliciesScopeObjectMonitoringWithNoExtension := swag.FormatBool(qrPoliciesScopeObjectMonitoringWithNoExtension)
		if qPoliciesScopeObjectMonitoringWithNoExtension != "" {

			if err := r.SetQueryParam("policies.scope.object_monitoring_with_no_extension", qPoliciesScopeObjectMonitoringWithNoExtension); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecordsQueryParameter != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecordsQueryParameter != nil {
			qrReturnRecords = *o.ReturnRecordsQueryParameter
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeoutQueryParameter != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeoutQueryParameter != nil {
			qrReturnTimeout = *o.ReturnTimeoutQueryParameter
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.SVMNameQueryParameter != nil {

		// query param svm.name
		var qrSvmName string

		if o.SVMNameQueryParameter != nil {
			qrSvmName = *o.SVMNameQueryParameter
		}
		qSvmName := qrSvmName
		if qSvmName != "" {

			if err := r.SetQueryParam("svm.name", qSvmName); err != nil {
				return err
			}
		}
	}

	if o.SVMUUIDQueryParameter != nil {

		// query param svm.uuid
		var qrSvmUUID string

		if o.SVMUUIDQueryParameter != nil {
			qrSvmUUID = *o.SVMUUIDQueryParameter
		}
		qSvmUUID := qrSvmUUID
		if qSvmUUID != "" {

			if err := r.SetQueryParam("svm.uuid", qSvmUUID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamFpolicyCollectionGet binds the parameter fields
func (o *FpolicyCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.FieldsQueryParameter

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamFpolicyCollectionGet binds the parameter order_by
func (o *FpolicyCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderByQueryParameter

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
