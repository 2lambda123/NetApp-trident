// Code generated by go-swagger; DO NOT EDIT.

package n_a_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewClientLockCollectionGetParams creates a new ClientLockCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewClientLockCollectionGetParams() *ClientLockCollectionGetParams {
	return &ClientLockCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewClientLockCollectionGetParamsWithTimeout creates a new ClientLockCollectionGetParams object
// with the ability to set a timeout on a request.
func NewClientLockCollectionGetParamsWithTimeout(timeout time.Duration) *ClientLockCollectionGetParams {
	return &ClientLockCollectionGetParams{
		timeout: timeout,
	}
}

// NewClientLockCollectionGetParamsWithContext creates a new ClientLockCollectionGetParams object
// with the ability to set a context for a request.
func NewClientLockCollectionGetParamsWithContext(ctx context.Context) *ClientLockCollectionGetParams {
	return &ClientLockCollectionGetParams{
		Context: ctx,
	}
}

// NewClientLockCollectionGetParamsWithHTTPClient creates a new ClientLockCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewClientLockCollectionGetParamsWithHTTPClient(client *http.Client) *ClientLockCollectionGetParams {
	return &ClientLockCollectionGetParams{
		HTTPClient: client,
	}
}

/* ClientLockCollectionGetParams contains all the parameters to send to the API endpoint
   for the client lock collection get operation.

   Typically these are written to a http.Request.
*/
type ClientLockCollectionGetParams struct {

	/* ByteLockExclusive.

	   Filter by byte_lock.exclusive
	*/
	ByteLockExclusiveQueryParameter *bool

	/* ByteLockLength.

	   Filter by byte_lock.length
	*/
	ByteLockLengthQueryParameter *int64

	/* ByteLockMandatory.

	   Filter by byte_lock.mandatory
	*/
	ByteLockMandatoryQueryParameter *bool

	/* ByteLockOffset.

	   Filter by byte_lock.offset
	*/
	ByteLockOffsetQueryParameter *int64

	/* ByteLockSoft.

	   Filter by byte_lock.soft
	*/
	ByteLockSoftQueryParameter *bool

	/* ByteLockSuper.

	   Filter by byte_lock.super
	*/
	ByteLockSuperQueryParameter *bool

	/* ClientAddress.

	   Filter by client_address
	*/
	ClientAddressQueryParameter *string

	/* Constituent.

	   Filter by constituent
	*/
	ConstituentQueryParameter *bool

	/* Delegation.

	   Filter by delegation
	*/
	DelegationQueryParameter *string

	/* Fields.

	   Specify the fields to return.
	*/
	FieldsQueryParameter []string

	/* InterfaceIPAddress.

	   Filter by interface.ip.address
	*/
	InterfaceIPAddressQueryParameter *string

	/* InterfaceName.

	   Filter by interface.name
	*/
	InterfaceNameQueryParameter *string

	/* InterfaceUUID.

	   Filter by interface.uuid
	*/
	InterfaceUUIDQueryParameter *string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecordsQueryParameter *int64

	/* NodeName.

	   Filter by node.name
	*/
	NodeNameQueryParameter *string

	/* NodeUUID.

	   Filter by node.uuid
	*/
	NodeUUIDQueryParameter *string

	/* OplockLevel.

	   Filter by oplock_level
	*/
	OplockLevelQueryParameter *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderByQueryParameter []string

	/* OwnerID.

	   Filter by owner_id
	*/
	OwnerIDQueryParameter *string

	/* Path.

	   Filter by path
	*/
	PathQueryParameter *string

	/* Protocol.

	   Filter by protocol
	*/
	ProtocolQueryParameter *string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecordsQueryParameter *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeoutQueryParameter *int64

	/* ShareLockMode.

	   Filter by share_lock.mode
	*/
	ShareLockModeQueryParameter *string

	/* ShareLockSoft.

	   Filter by share_lock.soft
	*/
	ShareLockSoftQueryParameter *bool

	/* SmbConnectState.

	   Filter by smb.connect_state
	*/
	SmbConnectStateQueryParameter *string

	/* SmbOpenGroupID.

	   Filter by smb.open_group_id
	*/
	SmbOpenGroupIDQueryParameter *string

	/* SmbOpenType.

	   Filter by smb.open_type
	*/
	SmbOpenTypeQueryParameter *string

	/* State.

	   Filter by state
	*/
	StateQueryParameter *string

	/* SvmName.

	   Filter by svm.name
	*/
	SVMNameQueryParameter *string

	/* SvmUUID.

	   Filter by svm.uuid
	*/
	SVMUUIDQueryParameter *string

	/* Type.

	   Filter by type
	*/
	TypeQueryParameter *string

	/* UUID.

	   Filter by uuid
	*/
	UUIDQueryParameter *string

	/* VolumeName.

	   Filter by volume.name
	*/
	VolumeNameQueryParameter *string

	/* VolumeUUID.

	   Filter by volume.uuid
	*/
	VolumeUUIDQueryParameter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the client lock collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ClientLockCollectionGetParams) WithDefaults() *ClientLockCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the client lock collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ClientLockCollectionGetParams) SetDefaults() {
	var (
		returnRecordsQueryParameterDefault = bool(true)

		returnTimeoutQueryParameterDefault = int64(15)
	)

	val := ClientLockCollectionGetParams{
		ReturnRecordsQueryParameter: &returnRecordsQueryParameterDefault,
		ReturnTimeoutQueryParameter: &returnTimeoutQueryParameterDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the client lock collection get params
func (o *ClientLockCollectionGetParams) WithTimeout(timeout time.Duration) *ClientLockCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the client lock collection get params
func (o *ClientLockCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the client lock collection get params
func (o *ClientLockCollectionGetParams) WithContext(ctx context.Context) *ClientLockCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the client lock collection get params
func (o *ClientLockCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the client lock collection get params
func (o *ClientLockCollectionGetParams) WithHTTPClient(client *http.Client) *ClientLockCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the client lock collection get params
func (o *ClientLockCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithByteLockExclusiveQueryParameter adds the byteLockExclusive to the client lock collection get params
func (o *ClientLockCollectionGetParams) WithByteLockExclusiveQueryParameter(byteLockExclusive *bool) *ClientLockCollectionGetParams {
	o.SetByteLockExclusiveQueryParameter(byteLockExclusive)
	return o
}

// SetByteLockExclusiveQueryParameter adds the byteLockExclusive to the client lock collection get params
func (o *ClientLockCollectionGetParams) SetByteLockExclusiveQueryParameter(byteLockExclusive *bool) {
	o.ByteLockExclusiveQueryParameter = byteLockExclusive
}

// WithByteLockLengthQueryParameter adds the byteLockLength to the client lock collection get params
func (o *ClientLockCollectionGetParams) WithByteLockLengthQueryParameter(byteLockLength *int64) *ClientLockCollectionGetParams {
	o.SetByteLockLengthQueryParameter(byteLockLength)
	return o
}

// SetByteLockLengthQueryParameter adds the byteLockLength to the client lock collection get params
func (o *ClientLockCollectionGetParams) SetByteLockLengthQueryParameter(byteLockLength *int64) {
	o.ByteLockLengthQueryParameter = byteLockLength
}

// WithByteLockMandatoryQueryParameter adds the byteLockMandatory to the client lock collection get params
func (o *ClientLockCollectionGetParams) WithByteLockMandatoryQueryParameter(byteLockMandatory *bool) *ClientLockCollectionGetParams {
	o.SetByteLockMandatoryQueryParameter(byteLockMandatory)
	return o
}

// SetByteLockMandatoryQueryParameter adds the byteLockMandatory to the client lock collection get params
func (o *ClientLockCollectionGetParams) SetByteLockMandatoryQueryParameter(byteLockMandatory *bool) {
	o.ByteLockMandatoryQueryParameter = byteLockMandatory
}

// WithByteLockOffsetQueryParameter adds the byteLockOffset to the client lock collection get params
func (o *ClientLockCollectionGetParams) WithByteLockOffsetQueryParameter(byteLockOffset *int64) *ClientLockCollectionGetParams {
	o.SetByteLockOffsetQueryParameter(byteLockOffset)
	return o
}

// SetByteLockOffsetQueryParameter adds the byteLockOffset to the client lock collection get params
func (o *ClientLockCollectionGetParams) SetByteLockOffsetQueryParameter(byteLockOffset *int64) {
	o.ByteLockOffsetQueryParameter = byteLockOffset
}

// WithByteLockSoftQueryParameter adds the byteLockSoft to the client lock collection get params
func (o *ClientLockCollectionGetParams) WithByteLockSoftQueryParameter(byteLockSoft *bool) *ClientLockCollectionGetParams {
	o.SetByteLockSoftQueryParameter(byteLockSoft)
	return o
}

// SetByteLockSoftQueryParameter adds the byteLockSoft to the client lock collection get params
func (o *ClientLockCollectionGetParams) SetByteLockSoftQueryParameter(byteLockSoft *bool) {
	o.ByteLockSoftQueryParameter = byteLockSoft
}

// WithByteLockSuperQueryParameter adds the byteLockSuper to the client lock collection get params
func (o *ClientLockCollectionGetParams) WithByteLockSuperQueryParameter(byteLockSuper *bool) *ClientLockCollectionGetParams {
	o.SetByteLockSuperQueryParameter(byteLockSuper)
	return o
}

// SetByteLockSuperQueryParameter adds the byteLockSuper to the client lock collection get params
func (o *ClientLockCollectionGetParams) SetByteLockSuperQueryParameter(byteLockSuper *bool) {
	o.ByteLockSuperQueryParameter = byteLockSuper
}

// WithClientAddressQueryParameter adds the clientAddress to the client lock collection get params
func (o *ClientLockCollectionGetParams) WithClientAddressQueryParameter(clientAddress *string) *ClientLockCollectionGetParams {
	o.SetClientAddressQueryParameter(clientAddress)
	return o
}

// SetClientAddressQueryParameter adds the clientAddress to the client lock collection get params
func (o *ClientLockCollectionGetParams) SetClientAddressQueryParameter(clientAddress *string) {
	o.ClientAddressQueryParameter = clientAddress
}

// WithConstituentQueryParameter adds the constituent to the client lock collection get params
func (o *ClientLockCollectionGetParams) WithConstituentQueryParameter(constituent *bool) *ClientLockCollectionGetParams {
	o.SetConstituentQueryParameter(constituent)
	return o
}

// SetConstituentQueryParameter adds the constituent to the client lock collection get params
func (o *ClientLockCollectionGetParams) SetConstituentQueryParameter(constituent *bool) {
	o.ConstituentQueryParameter = constituent
}

// WithDelegationQueryParameter adds the delegation to the client lock collection get params
func (o *ClientLockCollectionGetParams) WithDelegationQueryParameter(delegation *string) *ClientLockCollectionGetParams {
	o.SetDelegationQueryParameter(delegation)
	return o
}

// SetDelegationQueryParameter adds the delegation to the client lock collection get params
func (o *ClientLockCollectionGetParams) SetDelegationQueryParameter(delegation *string) {
	o.DelegationQueryParameter = delegation
}

// WithFieldsQueryParameter adds the fields to the client lock collection get params
func (o *ClientLockCollectionGetParams) WithFieldsQueryParameter(fields []string) *ClientLockCollectionGetParams {
	o.SetFieldsQueryParameter(fields)
	return o
}

// SetFieldsQueryParameter adds the fields to the client lock collection get params
func (o *ClientLockCollectionGetParams) SetFieldsQueryParameter(fields []string) {
	o.FieldsQueryParameter = fields
}

// WithInterfaceIPAddressQueryParameter adds the interfaceIPAddress to the client lock collection get params
func (o *ClientLockCollectionGetParams) WithInterfaceIPAddressQueryParameter(interfaceIPAddress *string) *ClientLockCollectionGetParams {
	o.SetInterfaceIPAddressQueryParameter(interfaceIPAddress)
	return o
}

// SetInterfaceIPAddressQueryParameter adds the interfaceIpAddress to the client lock collection get params
func (o *ClientLockCollectionGetParams) SetInterfaceIPAddressQueryParameter(interfaceIPAddress *string) {
	o.InterfaceIPAddressQueryParameter = interfaceIPAddress
}

// WithInterfaceNameQueryParameter adds the interfaceName to the client lock collection get params
func (o *ClientLockCollectionGetParams) WithInterfaceNameQueryParameter(interfaceName *string) *ClientLockCollectionGetParams {
	o.SetInterfaceNameQueryParameter(interfaceName)
	return o
}

// SetInterfaceNameQueryParameter adds the interfaceName to the client lock collection get params
func (o *ClientLockCollectionGetParams) SetInterfaceNameQueryParameter(interfaceName *string) {
	o.InterfaceNameQueryParameter = interfaceName
}

// WithInterfaceUUIDQueryParameter adds the interfaceUUID to the client lock collection get params
func (o *ClientLockCollectionGetParams) WithInterfaceUUIDQueryParameter(interfaceUUID *string) *ClientLockCollectionGetParams {
	o.SetInterfaceUUIDQueryParameter(interfaceUUID)
	return o
}

// SetInterfaceUUIDQueryParameter adds the interfaceUuid to the client lock collection get params
func (o *ClientLockCollectionGetParams) SetInterfaceUUIDQueryParameter(interfaceUUID *string) {
	o.InterfaceUUIDQueryParameter = interfaceUUID
}

// WithMaxRecordsQueryParameter adds the maxRecords to the client lock collection get params
func (o *ClientLockCollectionGetParams) WithMaxRecordsQueryParameter(maxRecords *int64) *ClientLockCollectionGetParams {
	o.SetMaxRecordsQueryParameter(maxRecords)
	return o
}

// SetMaxRecordsQueryParameter adds the maxRecords to the client lock collection get params
func (o *ClientLockCollectionGetParams) SetMaxRecordsQueryParameter(maxRecords *int64) {
	o.MaxRecordsQueryParameter = maxRecords
}

// WithNodeNameQueryParameter adds the nodeName to the client lock collection get params
func (o *ClientLockCollectionGetParams) WithNodeNameQueryParameter(nodeName *string) *ClientLockCollectionGetParams {
	o.SetNodeNameQueryParameter(nodeName)
	return o
}

// SetNodeNameQueryParameter adds the nodeName to the client lock collection get params
func (o *ClientLockCollectionGetParams) SetNodeNameQueryParameter(nodeName *string) {
	o.NodeNameQueryParameter = nodeName
}

// WithNodeUUIDQueryParameter adds the nodeUUID to the client lock collection get params
func (o *ClientLockCollectionGetParams) WithNodeUUIDQueryParameter(nodeUUID *string) *ClientLockCollectionGetParams {
	o.SetNodeUUIDQueryParameter(nodeUUID)
	return o
}

// SetNodeUUIDQueryParameter adds the nodeUuid to the client lock collection get params
func (o *ClientLockCollectionGetParams) SetNodeUUIDQueryParameter(nodeUUID *string) {
	o.NodeUUIDQueryParameter = nodeUUID
}

// WithOplockLevelQueryParameter adds the oplockLevel to the client lock collection get params
func (o *ClientLockCollectionGetParams) WithOplockLevelQueryParameter(oplockLevel *string) *ClientLockCollectionGetParams {
	o.SetOplockLevelQueryParameter(oplockLevel)
	return o
}

// SetOplockLevelQueryParameter adds the oplockLevel to the client lock collection get params
func (o *ClientLockCollectionGetParams) SetOplockLevelQueryParameter(oplockLevel *string) {
	o.OplockLevelQueryParameter = oplockLevel
}

// WithOrderByQueryParameter adds the orderBy to the client lock collection get params
func (o *ClientLockCollectionGetParams) WithOrderByQueryParameter(orderBy []string) *ClientLockCollectionGetParams {
	o.SetOrderByQueryParameter(orderBy)
	return o
}

// SetOrderByQueryParameter adds the orderBy to the client lock collection get params
func (o *ClientLockCollectionGetParams) SetOrderByQueryParameter(orderBy []string) {
	o.OrderByQueryParameter = orderBy
}

// WithOwnerIDQueryParameter adds the ownerID to the client lock collection get params
func (o *ClientLockCollectionGetParams) WithOwnerIDQueryParameter(ownerID *string) *ClientLockCollectionGetParams {
	o.SetOwnerIDQueryParameter(ownerID)
	return o
}

// SetOwnerIDQueryParameter adds the ownerId to the client lock collection get params
func (o *ClientLockCollectionGetParams) SetOwnerIDQueryParameter(ownerID *string) {
	o.OwnerIDQueryParameter = ownerID
}

// WithPathQueryParameter adds the path to the client lock collection get params
func (o *ClientLockCollectionGetParams) WithPathQueryParameter(path *string) *ClientLockCollectionGetParams {
	o.SetPathQueryParameter(path)
	return o
}

// SetPathQueryParameter adds the path to the client lock collection get params
func (o *ClientLockCollectionGetParams) SetPathQueryParameter(path *string) {
	o.PathQueryParameter = path
}

// WithProtocolQueryParameter adds the protocol to the client lock collection get params
func (o *ClientLockCollectionGetParams) WithProtocolQueryParameter(protocol *string) *ClientLockCollectionGetParams {
	o.SetProtocolQueryParameter(protocol)
	return o
}

// SetProtocolQueryParameter adds the protocol to the client lock collection get params
func (o *ClientLockCollectionGetParams) SetProtocolQueryParameter(protocol *string) {
	o.ProtocolQueryParameter = protocol
}

// WithReturnRecordsQueryParameter adds the returnRecords to the client lock collection get params
func (o *ClientLockCollectionGetParams) WithReturnRecordsQueryParameter(returnRecords *bool) *ClientLockCollectionGetParams {
	o.SetReturnRecordsQueryParameter(returnRecords)
	return o
}

// SetReturnRecordsQueryParameter adds the returnRecords to the client lock collection get params
func (o *ClientLockCollectionGetParams) SetReturnRecordsQueryParameter(returnRecords *bool) {
	o.ReturnRecordsQueryParameter = returnRecords
}

// WithReturnTimeoutQueryParameter adds the returnTimeout to the client lock collection get params
func (o *ClientLockCollectionGetParams) WithReturnTimeoutQueryParameter(returnTimeout *int64) *ClientLockCollectionGetParams {
	o.SetReturnTimeoutQueryParameter(returnTimeout)
	return o
}

// SetReturnTimeoutQueryParameter adds the returnTimeout to the client lock collection get params
func (o *ClientLockCollectionGetParams) SetReturnTimeoutQueryParameter(returnTimeout *int64) {
	o.ReturnTimeoutQueryParameter = returnTimeout
}

// WithShareLockModeQueryParameter adds the shareLockMode to the client lock collection get params
func (o *ClientLockCollectionGetParams) WithShareLockModeQueryParameter(shareLockMode *string) *ClientLockCollectionGetParams {
	o.SetShareLockModeQueryParameter(shareLockMode)
	return o
}

// SetShareLockModeQueryParameter adds the shareLockMode to the client lock collection get params
func (o *ClientLockCollectionGetParams) SetShareLockModeQueryParameter(shareLockMode *string) {
	o.ShareLockModeQueryParameter = shareLockMode
}

// WithShareLockSoftQueryParameter adds the shareLockSoft to the client lock collection get params
func (o *ClientLockCollectionGetParams) WithShareLockSoftQueryParameter(shareLockSoft *bool) *ClientLockCollectionGetParams {
	o.SetShareLockSoftQueryParameter(shareLockSoft)
	return o
}

// SetShareLockSoftQueryParameter adds the shareLockSoft to the client lock collection get params
func (o *ClientLockCollectionGetParams) SetShareLockSoftQueryParameter(shareLockSoft *bool) {
	o.ShareLockSoftQueryParameter = shareLockSoft
}

// WithSmbConnectStateQueryParameter adds the smbConnectState to the client lock collection get params
func (o *ClientLockCollectionGetParams) WithSmbConnectStateQueryParameter(smbConnectState *string) *ClientLockCollectionGetParams {
	o.SetSmbConnectStateQueryParameter(smbConnectState)
	return o
}

// SetSmbConnectStateQueryParameter adds the smbConnectState to the client lock collection get params
func (o *ClientLockCollectionGetParams) SetSmbConnectStateQueryParameter(smbConnectState *string) {
	o.SmbConnectStateQueryParameter = smbConnectState
}

// WithSmbOpenGroupIDQueryParameter adds the smbOpenGroupID to the client lock collection get params
func (o *ClientLockCollectionGetParams) WithSmbOpenGroupIDQueryParameter(smbOpenGroupID *string) *ClientLockCollectionGetParams {
	o.SetSmbOpenGroupIDQueryParameter(smbOpenGroupID)
	return o
}

// SetSmbOpenGroupIDQueryParameter adds the smbOpenGroupId to the client lock collection get params
func (o *ClientLockCollectionGetParams) SetSmbOpenGroupIDQueryParameter(smbOpenGroupID *string) {
	o.SmbOpenGroupIDQueryParameter = smbOpenGroupID
}

// WithSmbOpenTypeQueryParameter adds the smbOpenType to the client lock collection get params
func (o *ClientLockCollectionGetParams) WithSmbOpenTypeQueryParameter(smbOpenType *string) *ClientLockCollectionGetParams {
	o.SetSmbOpenTypeQueryParameter(smbOpenType)
	return o
}

// SetSmbOpenTypeQueryParameter adds the smbOpenType to the client lock collection get params
func (o *ClientLockCollectionGetParams) SetSmbOpenTypeQueryParameter(smbOpenType *string) {
	o.SmbOpenTypeQueryParameter = smbOpenType
}

// WithStateQueryParameter adds the state to the client lock collection get params
func (o *ClientLockCollectionGetParams) WithStateQueryParameter(state *string) *ClientLockCollectionGetParams {
	o.SetStateQueryParameter(state)
	return o
}

// SetStateQueryParameter adds the state to the client lock collection get params
func (o *ClientLockCollectionGetParams) SetStateQueryParameter(state *string) {
	o.StateQueryParameter = state
}

// WithSVMNameQueryParameter adds the svmName to the client lock collection get params
func (o *ClientLockCollectionGetParams) WithSVMNameQueryParameter(svmName *string) *ClientLockCollectionGetParams {
	o.SetSVMNameQueryParameter(svmName)
	return o
}

// SetSVMNameQueryParameter adds the svmName to the client lock collection get params
func (o *ClientLockCollectionGetParams) SetSVMNameQueryParameter(svmName *string) {
	o.SVMNameQueryParameter = svmName
}

// WithSVMUUIDQueryParameter adds the svmUUID to the client lock collection get params
func (o *ClientLockCollectionGetParams) WithSVMUUIDQueryParameter(svmUUID *string) *ClientLockCollectionGetParams {
	o.SetSVMUUIDQueryParameter(svmUUID)
	return o
}

// SetSVMUUIDQueryParameter adds the svmUuid to the client lock collection get params
func (o *ClientLockCollectionGetParams) SetSVMUUIDQueryParameter(svmUUID *string) {
	o.SVMUUIDQueryParameter = svmUUID
}

// WithTypeQueryParameter adds the typeVar to the client lock collection get params
func (o *ClientLockCollectionGetParams) WithTypeQueryParameter(typeVar *string) *ClientLockCollectionGetParams {
	o.SetTypeQueryParameter(typeVar)
	return o
}

// SetTypeQueryParameter adds the type to the client lock collection get params
func (o *ClientLockCollectionGetParams) SetTypeQueryParameter(typeVar *string) {
	o.TypeQueryParameter = typeVar
}

// WithUUIDQueryParameter adds the uuid to the client lock collection get params
func (o *ClientLockCollectionGetParams) WithUUIDQueryParameter(uuid *string) *ClientLockCollectionGetParams {
	o.SetUUIDQueryParameter(uuid)
	return o
}

// SetUUIDQueryParameter adds the uuid to the client lock collection get params
func (o *ClientLockCollectionGetParams) SetUUIDQueryParameter(uuid *string) {
	o.UUIDQueryParameter = uuid
}

// WithVolumeNameQueryParameter adds the volumeName to the client lock collection get params
func (o *ClientLockCollectionGetParams) WithVolumeNameQueryParameter(volumeName *string) *ClientLockCollectionGetParams {
	o.SetVolumeNameQueryParameter(volumeName)
	return o
}

// SetVolumeNameQueryParameter adds the volumeName to the client lock collection get params
func (o *ClientLockCollectionGetParams) SetVolumeNameQueryParameter(volumeName *string) {
	o.VolumeNameQueryParameter = volumeName
}

// WithVolumeUUIDQueryParameter adds the volumeUUID to the client lock collection get params
func (o *ClientLockCollectionGetParams) WithVolumeUUIDQueryParameter(volumeUUID *string) *ClientLockCollectionGetParams {
	o.SetVolumeUUIDQueryParameter(volumeUUID)
	return o
}

// SetVolumeUUIDQueryParameter adds the volumeUuid to the client lock collection get params
func (o *ClientLockCollectionGetParams) SetVolumeUUIDQueryParameter(volumeUUID *string) {
	o.VolumeUUIDQueryParameter = volumeUUID
}

// WriteToRequest writes these params to a swagger request
func (o *ClientLockCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ByteLockExclusiveQueryParameter != nil {

		// query param byte_lock.exclusive
		var qrByteLockExclusive bool

		if o.ByteLockExclusiveQueryParameter != nil {
			qrByteLockExclusive = *o.ByteLockExclusiveQueryParameter
		}
		qByteLockExclusive := swag.FormatBool(qrByteLockExclusive)
		if qByteLockExclusive != "" {

			if err := r.SetQueryParam("byte_lock.exclusive", qByteLockExclusive); err != nil {
				return err
			}
		}
	}

	if o.ByteLockLengthQueryParameter != nil {

		// query param byte_lock.length
		var qrByteLockLength int64

		if o.ByteLockLengthQueryParameter != nil {
			qrByteLockLength = *o.ByteLockLengthQueryParameter
		}
		qByteLockLength := swag.FormatInt64(qrByteLockLength)
		if qByteLockLength != "" {

			if err := r.SetQueryParam("byte_lock.length", qByteLockLength); err != nil {
				return err
			}
		}
	}

	if o.ByteLockMandatoryQueryParameter != nil {

		// query param byte_lock.mandatory
		var qrByteLockMandatory bool

		if o.ByteLockMandatoryQueryParameter != nil {
			qrByteLockMandatory = *o.ByteLockMandatoryQueryParameter
		}
		qByteLockMandatory := swag.FormatBool(qrByteLockMandatory)
		if qByteLockMandatory != "" {

			if err := r.SetQueryParam("byte_lock.mandatory", qByteLockMandatory); err != nil {
				return err
			}
		}
	}

	if o.ByteLockOffsetQueryParameter != nil {

		// query param byte_lock.offset
		var qrByteLockOffset int64

		if o.ByteLockOffsetQueryParameter != nil {
			qrByteLockOffset = *o.ByteLockOffsetQueryParameter
		}
		qByteLockOffset := swag.FormatInt64(qrByteLockOffset)
		if qByteLockOffset != "" {

			if err := r.SetQueryParam("byte_lock.offset", qByteLockOffset); err != nil {
				return err
			}
		}
	}

	if o.ByteLockSoftQueryParameter != nil {

		// query param byte_lock.soft
		var qrByteLockSoft bool

		if o.ByteLockSoftQueryParameter != nil {
			qrByteLockSoft = *o.ByteLockSoftQueryParameter
		}
		qByteLockSoft := swag.FormatBool(qrByteLockSoft)
		if qByteLockSoft != "" {

			if err := r.SetQueryParam("byte_lock.soft", qByteLockSoft); err != nil {
				return err
			}
		}
	}

	if o.ByteLockSuperQueryParameter != nil {

		// query param byte_lock.super
		var qrByteLockSuper bool

		if o.ByteLockSuperQueryParameter != nil {
			qrByteLockSuper = *o.ByteLockSuperQueryParameter
		}
		qByteLockSuper := swag.FormatBool(qrByteLockSuper)
		if qByteLockSuper != "" {

			if err := r.SetQueryParam("byte_lock.super", qByteLockSuper); err != nil {
				return err
			}
		}
	}

	if o.ClientAddressQueryParameter != nil {

		// query param client_address
		var qrClientAddress string

		if o.ClientAddressQueryParameter != nil {
			qrClientAddress = *o.ClientAddressQueryParameter
		}
		qClientAddress := qrClientAddress
		if qClientAddress != "" {

			if err := r.SetQueryParam("client_address", qClientAddress); err != nil {
				return err
			}
		}
	}

	if o.ConstituentQueryParameter != nil {

		// query param constituent
		var qrConstituent bool

		if o.ConstituentQueryParameter != nil {
			qrConstituent = *o.ConstituentQueryParameter
		}
		qConstituent := swag.FormatBool(qrConstituent)
		if qConstituent != "" {

			if err := r.SetQueryParam("constituent", qConstituent); err != nil {
				return err
			}
		}
	}

	if o.DelegationQueryParameter != nil {

		// query param delegation
		var qrDelegation string

		if o.DelegationQueryParameter != nil {
			qrDelegation = *o.DelegationQueryParameter
		}
		qDelegation := qrDelegation
		if qDelegation != "" {

			if err := r.SetQueryParam("delegation", qDelegation); err != nil {
				return err
			}
		}
	}

	if o.FieldsQueryParameter != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.InterfaceIPAddressQueryParameter != nil {

		// query param interface.ip.address
		var qrInterfaceIPAddress string

		if o.InterfaceIPAddressQueryParameter != nil {
			qrInterfaceIPAddress = *o.InterfaceIPAddressQueryParameter
		}
		qInterfaceIPAddress := qrInterfaceIPAddress
		if qInterfaceIPAddress != "" {

			if err := r.SetQueryParam("interface.ip.address", qInterfaceIPAddress); err != nil {
				return err
			}
		}
	}

	if o.InterfaceNameQueryParameter != nil {

		// query param interface.name
		var qrInterfaceName string

		if o.InterfaceNameQueryParameter != nil {
			qrInterfaceName = *o.InterfaceNameQueryParameter
		}
		qInterfaceName := qrInterfaceName
		if qInterfaceName != "" {

			if err := r.SetQueryParam("interface.name", qInterfaceName); err != nil {
				return err
			}
		}
	}

	if o.InterfaceUUIDQueryParameter != nil {

		// query param interface.uuid
		var qrInterfaceUUID string

		if o.InterfaceUUIDQueryParameter != nil {
			qrInterfaceUUID = *o.InterfaceUUIDQueryParameter
		}
		qInterfaceUUID := qrInterfaceUUID
		if qInterfaceUUID != "" {

			if err := r.SetQueryParam("interface.uuid", qInterfaceUUID); err != nil {
				return err
			}
		}
	}

	if o.MaxRecordsQueryParameter != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecordsQueryParameter != nil {
			qrMaxRecords = *o.MaxRecordsQueryParameter
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.NodeNameQueryParameter != nil {

		// query param node.name
		var qrNodeName string

		if o.NodeNameQueryParameter != nil {
			qrNodeName = *o.NodeNameQueryParameter
		}
		qNodeName := qrNodeName
		if qNodeName != "" {

			if err := r.SetQueryParam("node.name", qNodeName); err != nil {
				return err
			}
		}
	}

	if o.NodeUUIDQueryParameter != nil {

		// query param node.uuid
		var qrNodeUUID string

		if o.NodeUUIDQueryParameter != nil {
			qrNodeUUID = *o.NodeUUIDQueryParameter
		}
		qNodeUUID := qrNodeUUID
		if qNodeUUID != "" {

			if err := r.SetQueryParam("node.uuid", qNodeUUID); err != nil {
				return err
			}
		}
	}

	if o.OplockLevelQueryParameter != nil {

		// query param oplock_level
		var qrOplockLevel string

		if o.OplockLevelQueryParameter != nil {
			qrOplockLevel = *o.OplockLevelQueryParameter
		}
		qOplockLevel := qrOplockLevel
		if qOplockLevel != "" {

			if err := r.SetQueryParam("oplock_level", qOplockLevel); err != nil {
				return err
			}
		}
	}

	if o.OrderByQueryParameter != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.OwnerIDQueryParameter != nil {

		// query param owner_id
		var qrOwnerID string

		if o.OwnerIDQueryParameter != nil {
			qrOwnerID = *o.OwnerIDQueryParameter
		}
		qOwnerID := qrOwnerID
		if qOwnerID != "" {

			if err := r.SetQueryParam("owner_id", qOwnerID); err != nil {
				return err
			}
		}
	}

	if o.PathQueryParameter != nil {

		// query param path
		var qrPath string

		if o.PathQueryParameter != nil {
			qrPath = *o.PathQueryParameter
		}
		qPath := qrPath
		if qPath != "" {

			if err := r.SetQueryParam("path", qPath); err != nil {
				return err
			}
		}
	}

	if o.ProtocolQueryParameter != nil {

		// query param protocol
		var qrProtocol string

		if o.ProtocolQueryParameter != nil {
			qrProtocol = *o.ProtocolQueryParameter
		}
		qProtocol := qrProtocol
		if qProtocol != "" {

			if err := r.SetQueryParam("protocol", qProtocol); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecordsQueryParameter != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecordsQueryParameter != nil {
			qrReturnRecords = *o.ReturnRecordsQueryParameter
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeoutQueryParameter != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeoutQueryParameter != nil {
			qrReturnTimeout = *o.ReturnTimeoutQueryParameter
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.ShareLockModeQueryParameter != nil {

		// query param share_lock.mode
		var qrShareLockMode string

		if o.ShareLockModeQueryParameter != nil {
			qrShareLockMode = *o.ShareLockModeQueryParameter
		}
		qShareLockMode := qrShareLockMode
		if qShareLockMode != "" {

			if err := r.SetQueryParam("share_lock.mode", qShareLockMode); err != nil {
				return err
			}
		}
	}

	if o.ShareLockSoftQueryParameter != nil {

		// query param share_lock.soft
		var qrShareLockSoft bool

		if o.ShareLockSoftQueryParameter != nil {
			qrShareLockSoft = *o.ShareLockSoftQueryParameter
		}
		qShareLockSoft := swag.FormatBool(qrShareLockSoft)
		if qShareLockSoft != "" {

			if err := r.SetQueryParam("share_lock.soft", qShareLockSoft); err != nil {
				return err
			}
		}
	}

	if o.SmbConnectStateQueryParameter != nil {

		// query param smb.connect_state
		var qrSmbConnectState string

		if o.SmbConnectStateQueryParameter != nil {
			qrSmbConnectState = *o.SmbConnectStateQueryParameter
		}
		qSmbConnectState := qrSmbConnectState
		if qSmbConnectState != "" {

			if err := r.SetQueryParam("smb.connect_state", qSmbConnectState); err != nil {
				return err
			}
		}
	}

	if o.SmbOpenGroupIDQueryParameter != nil {

		// query param smb.open_group_id
		var qrSmbOpenGroupID string

		if o.SmbOpenGroupIDQueryParameter != nil {
			qrSmbOpenGroupID = *o.SmbOpenGroupIDQueryParameter
		}
		qSmbOpenGroupID := qrSmbOpenGroupID
		if qSmbOpenGroupID != "" {

			if err := r.SetQueryParam("smb.open_group_id", qSmbOpenGroupID); err != nil {
				return err
			}
		}
	}

	if o.SmbOpenTypeQueryParameter != nil {

		// query param smb.open_type
		var qrSmbOpenType string

		if o.SmbOpenTypeQueryParameter != nil {
			qrSmbOpenType = *o.SmbOpenTypeQueryParameter
		}
		qSmbOpenType := qrSmbOpenType
		if qSmbOpenType != "" {

			if err := r.SetQueryParam("smb.open_type", qSmbOpenType); err != nil {
				return err
			}
		}
	}

	if o.StateQueryParameter != nil {

		// query param state
		var qrState string

		if o.StateQueryParameter != nil {
			qrState = *o.StateQueryParameter
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if o.SVMNameQueryParameter != nil {

		// query param svm.name
		var qrSvmName string

		if o.SVMNameQueryParameter != nil {
			qrSvmName = *o.SVMNameQueryParameter
		}
		qSvmName := qrSvmName
		if qSvmName != "" {

			if err := r.SetQueryParam("svm.name", qSvmName); err != nil {
				return err
			}
		}
	}

	if o.SVMUUIDQueryParameter != nil {

		// query param svm.uuid
		var qrSvmUUID string

		if o.SVMUUIDQueryParameter != nil {
			qrSvmUUID = *o.SVMUUIDQueryParameter
		}
		qSvmUUID := qrSvmUUID
		if qSvmUUID != "" {

			if err := r.SetQueryParam("svm.uuid", qSvmUUID); err != nil {
				return err
			}
		}
	}

	if o.TypeQueryParameter != nil {

		// query param type
		var qrType string

		if o.TypeQueryParameter != nil {
			qrType = *o.TypeQueryParameter
		}
		qType := qrType
		if qType != "" {

			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}
	}

	if o.UUIDQueryParameter != nil {

		// query param uuid
		var qrUUID string

		if o.UUIDQueryParameter != nil {
			qrUUID = *o.UUIDQueryParameter
		}
		qUUID := qrUUID
		if qUUID != "" {

			if err := r.SetQueryParam("uuid", qUUID); err != nil {
				return err
			}
		}
	}

	if o.VolumeNameQueryParameter != nil {

		// query param volume.name
		var qrVolumeName string

		if o.VolumeNameQueryParameter != nil {
			qrVolumeName = *o.VolumeNameQueryParameter
		}
		qVolumeName := qrVolumeName
		if qVolumeName != "" {

			if err := r.SetQueryParam("volume.name", qVolumeName); err != nil {
				return err
			}
		}
	}

	if o.VolumeUUIDQueryParameter != nil {

		// query param volume.uuid
		var qrVolumeUUID string

		if o.VolumeUUIDQueryParameter != nil {
			qrVolumeUUID = *o.VolumeUUIDQueryParameter
		}
		qVolumeUUID := qrVolumeUUID
		if qVolumeUUID != "" {

			if err := r.SetQueryParam("volume.uuid", qVolumeUUID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamClientLockCollectionGet binds the parameter fields
func (o *ClientLockCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.FieldsQueryParameter

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamClientLockCollectionGet binds the parameter order_by
func (o *ClientLockCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderByQueryParameter

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
