// Code generated by go-swagger; DO NOT EDIT.

package n_a_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewVscanCollectionGetParams creates a new VscanCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewVscanCollectionGetParams() *VscanCollectionGetParams {
	return &VscanCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewVscanCollectionGetParamsWithTimeout creates a new VscanCollectionGetParams object
// with the ability to set a timeout on a request.
func NewVscanCollectionGetParamsWithTimeout(timeout time.Duration) *VscanCollectionGetParams {
	return &VscanCollectionGetParams{
		timeout: timeout,
	}
}

// NewVscanCollectionGetParamsWithContext creates a new VscanCollectionGetParams object
// with the ability to set a context for a request.
func NewVscanCollectionGetParamsWithContext(ctx context.Context) *VscanCollectionGetParams {
	return &VscanCollectionGetParams{
		Context: ctx,
	}
}

// NewVscanCollectionGetParamsWithHTTPClient creates a new VscanCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewVscanCollectionGetParamsWithHTTPClient(client *http.Client) *VscanCollectionGetParams {
	return &VscanCollectionGetParams{
		HTTPClient: client,
	}
}

/* VscanCollectionGetParams contains all the parameters to send to the API endpoint
   for the vscan collection get operation.

   Typically these are written to a http.Request.
*/
type VscanCollectionGetParams struct {

	/* Enabled.

	   Filter by enabled
	*/
	EnabledQueryParameter *bool

	/* Fields.

	   Specify the fields to return.
	*/
	Fields []string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecords *int64

	/* OnAccessPoliciesEnabled.

	   Filter by on_access_policies.enabled
	*/
	OnAccessPoliciesEnabledQueryParameter *bool

	/* OnAccessPoliciesMandatory.

	   Filter by on_access_policies.mandatory
	*/
	OnAccessPoliciesMandatoryQueryParameter *bool

	/* OnAccessPoliciesName.

	   Filter by on_access_policies.name
	*/
	OnAccessPoliciesNameQueryParameter *string

	/* OnAccessPoliciesScopeExcludeExtensions.

	   Filter by on_access_policies.scope.exclude_extensions
	*/
	OnAccessPoliciesScopeExcludeExtensionsQueryParameter *string

	/* OnAccessPoliciesScopeExcludePaths.

	   Filter by on_access_policies.scope.exclude_paths
	*/
	OnAccessPoliciesScopeExcludePathsQueryParameter *string

	/* OnAccessPoliciesScopeIncludeExtensions.

	   Filter by on_access_policies.scope.include_extensions
	*/
	OnAccessPoliciesScopeIncludeExtensionsQueryParameter *string

	/* OnAccessPoliciesScopeMaxFileSize.

	   Filter by on_access_policies.scope.max_file_size
	*/
	OnAccessPoliciesScopeMaxFileSizeQueryParameter *int64

	/* OnAccessPoliciesScopeOnlyExecuteAccess.

	   Filter by on_access_policies.scope.only_execute_access
	*/
	OnAccessPoliciesScopeOnlyExecuteAccessQueryParameter *bool

	/* OnAccessPoliciesScopeScanReadonlyVolumes.

	   Filter by on_access_policies.scope.scan_readonly_volumes
	*/
	OnAccessPoliciesScopeScanReadonlyVolumesQueryParameter *bool

	/* OnAccessPoliciesScopeScanWithoutExtension.

	   Filter by on_access_policies.scope.scan_without_extension
	*/
	OnAccessPoliciesScopeScanWithoutExtensionQueryParameter *bool

	/* OnDemandPoliciesLogPath.

	   Filter by on_demand_policies.log_path
	*/
	OnDemandPoliciesLogPathQueryParameter *string

	/* OnDemandPoliciesName.

	   Filter by on_demand_policies.name
	*/
	OnDemandPoliciesNameQueryParameter *string

	/* OnDemandPoliciesScanPaths.

	   Filter by on_demand_policies.scan_paths
	*/
	OnDemandPoliciesScanPathsQueryParameter *string

	/* OnDemandPoliciesScheduleName.

	   Filter by on_demand_policies.schedule.name
	*/
	OnDemandPoliciesScheduleNameQueryParameter *string

	/* OnDemandPoliciesScheduleUUID.

	   Filter by on_demand_policies.schedule.uuid
	*/
	OnDemandPoliciesScheduleUUIDQueryParameter *string

	/* OnDemandPoliciesScopeExcludeExtensions.

	   Filter by on_demand_policies.scope.exclude_extensions
	*/
	OnDemandPoliciesScopeExcludeExtensionsQueryParameter *string

	/* OnDemandPoliciesScopeExcludePaths.

	   Filter by on_demand_policies.scope.exclude_paths
	*/
	OnDemandPoliciesScopeExcludePathsQueryParameter *string

	/* OnDemandPoliciesScopeIncludeExtensions.

	   Filter by on_demand_policies.scope.include_extensions
	*/
	OnDemandPoliciesScopeIncludeExtensionsQueryParameter *string

	/* OnDemandPoliciesScopeMaxFileSize.

	   Filter by on_demand_policies.scope.max_file_size
	*/
	OnDemandPoliciesScopeMaxFileSizeQueryParameter *int64

	/* OnDemandPoliciesScopeScanWithoutExtension.

	   Filter by on_demand_policies.scope.scan_without_extension
	*/
	OnDemandPoliciesScopeScanWithoutExtensionQueryParameter *bool

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderBy []string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecords *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeout *int64

	/* ScannerPoolsClusterName.

	   Filter by scanner_pools.cluster.name
	*/
	ScannerPoolsClusterNameQueryParameter *string

	/* ScannerPoolsClusterUUID.

	   Filter by scanner_pools.cluster.uuid
	*/
	ScannerPoolsClusterUUIDQueryParameter *string

	/* ScannerPoolsName.

	   Filter by scanner_pools.name
	*/
	ScannerPoolsNameQueryParameter *string

	/* ScannerPoolsPrivilegedUsers.

	   Filter by scanner_pools.privileged_users
	*/
	ScannerPoolsPrivilegedUsersQueryParameter *string

	/* ScannerPoolsRole.

	   Filter by scanner_pools.role
	*/
	ScannerPoolsRoleQueryParameter *string

	/* ScannerPoolsServers.

	   Filter by scanner_pools.servers
	*/
	ScannerPoolsServersQueryParameter *string

	/* SvmName.

	   Filter by svm.name
	*/
	SVMNameQueryParameter *string

	/* SvmUUID.

	   Filter by svm.uuid
	*/
	SVMUUIDQueryParameter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the vscan collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *VscanCollectionGetParams) WithDefaults() *VscanCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the vscan collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *VscanCollectionGetParams) SetDefaults() {
	var (
		returnRecordsDefault = bool(true)

		returnTimeoutDefault = int64(15)
	)

	val := VscanCollectionGetParams{
		ReturnRecords: &returnRecordsDefault,
		ReturnTimeout: &returnTimeoutDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the vscan collection get params
func (o *VscanCollectionGetParams) WithTimeout(timeout time.Duration) *VscanCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the vscan collection get params
func (o *VscanCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the vscan collection get params
func (o *VscanCollectionGetParams) WithContext(ctx context.Context) *VscanCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the vscan collection get params
func (o *VscanCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the vscan collection get params
func (o *VscanCollectionGetParams) WithHTTPClient(client *http.Client) *VscanCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the vscan collection get params
func (o *VscanCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEnabledQueryParameter adds the enabled to the vscan collection get params
func (o *VscanCollectionGetParams) WithEnabledQueryParameter(enabled *bool) *VscanCollectionGetParams {
	o.SetEnabledQueryParameter(enabled)
	return o
}

// SetEnabledQueryParameter adds the enabled to the vscan collection get params
func (o *VscanCollectionGetParams) SetEnabledQueryParameter(enabled *bool) {
	o.EnabledQueryParameter = enabled
}

// WithFields adds the fields to the vscan collection get params
func (o *VscanCollectionGetParams) WithFields(fields []string) *VscanCollectionGetParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the vscan collection get params
func (o *VscanCollectionGetParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithMaxRecords adds the maxRecords to the vscan collection get params
func (o *VscanCollectionGetParams) WithMaxRecords(maxRecords *int64) *VscanCollectionGetParams {
	o.SetMaxRecords(maxRecords)
	return o
}

// SetMaxRecords adds the maxRecords to the vscan collection get params
func (o *VscanCollectionGetParams) SetMaxRecords(maxRecords *int64) {
	o.MaxRecords = maxRecords
}

// WithOnAccessPoliciesEnabledQueryParameter adds the onAccessPoliciesEnabled to the vscan collection get params
func (o *VscanCollectionGetParams) WithOnAccessPoliciesEnabledQueryParameter(onAccessPoliciesEnabled *bool) *VscanCollectionGetParams {
	o.SetOnAccessPoliciesEnabledQueryParameter(onAccessPoliciesEnabled)
	return o
}

// SetOnAccessPoliciesEnabledQueryParameter adds the onAccessPoliciesEnabled to the vscan collection get params
func (o *VscanCollectionGetParams) SetOnAccessPoliciesEnabledQueryParameter(onAccessPoliciesEnabled *bool) {
	o.OnAccessPoliciesEnabledQueryParameter = onAccessPoliciesEnabled
}

// WithOnAccessPoliciesMandatoryQueryParameter adds the onAccessPoliciesMandatory to the vscan collection get params
func (o *VscanCollectionGetParams) WithOnAccessPoliciesMandatoryQueryParameter(onAccessPoliciesMandatory *bool) *VscanCollectionGetParams {
	o.SetOnAccessPoliciesMandatoryQueryParameter(onAccessPoliciesMandatory)
	return o
}

// SetOnAccessPoliciesMandatoryQueryParameter adds the onAccessPoliciesMandatory to the vscan collection get params
func (o *VscanCollectionGetParams) SetOnAccessPoliciesMandatoryQueryParameter(onAccessPoliciesMandatory *bool) {
	o.OnAccessPoliciesMandatoryQueryParameter = onAccessPoliciesMandatory
}

// WithOnAccessPoliciesNameQueryParameter adds the onAccessPoliciesName to the vscan collection get params
func (o *VscanCollectionGetParams) WithOnAccessPoliciesNameQueryParameter(onAccessPoliciesName *string) *VscanCollectionGetParams {
	o.SetOnAccessPoliciesNameQueryParameter(onAccessPoliciesName)
	return o
}

// SetOnAccessPoliciesNameQueryParameter adds the onAccessPoliciesName to the vscan collection get params
func (o *VscanCollectionGetParams) SetOnAccessPoliciesNameQueryParameter(onAccessPoliciesName *string) {
	o.OnAccessPoliciesNameQueryParameter = onAccessPoliciesName
}

// WithOnAccessPoliciesScopeExcludeExtensionsQueryParameter adds the onAccessPoliciesScopeExcludeExtensions to the vscan collection get params
func (o *VscanCollectionGetParams) WithOnAccessPoliciesScopeExcludeExtensionsQueryParameter(onAccessPoliciesScopeExcludeExtensions *string) *VscanCollectionGetParams {
	o.SetOnAccessPoliciesScopeExcludeExtensionsQueryParameter(onAccessPoliciesScopeExcludeExtensions)
	return o
}

// SetOnAccessPoliciesScopeExcludeExtensionsQueryParameter adds the onAccessPoliciesScopeExcludeExtensions to the vscan collection get params
func (o *VscanCollectionGetParams) SetOnAccessPoliciesScopeExcludeExtensionsQueryParameter(onAccessPoliciesScopeExcludeExtensions *string) {
	o.OnAccessPoliciesScopeExcludeExtensionsQueryParameter = onAccessPoliciesScopeExcludeExtensions
}

// WithOnAccessPoliciesScopeExcludePathsQueryParameter adds the onAccessPoliciesScopeExcludePaths to the vscan collection get params
func (o *VscanCollectionGetParams) WithOnAccessPoliciesScopeExcludePathsQueryParameter(onAccessPoliciesScopeExcludePaths *string) *VscanCollectionGetParams {
	o.SetOnAccessPoliciesScopeExcludePathsQueryParameter(onAccessPoliciesScopeExcludePaths)
	return o
}

// SetOnAccessPoliciesScopeExcludePathsQueryParameter adds the onAccessPoliciesScopeExcludePaths to the vscan collection get params
func (o *VscanCollectionGetParams) SetOnAccessPoliciesScopeExcludePathsQueryParameter(onAccessPoliciesScopeExcludePaths *string) {
	o.OnAccessPoliciesScopeExcludePathsQueryParameter = onAccessPoliciesScopeExcludePaths
}

// WithOnAccessPoliciesScopeIncludeExtensionsQueryParameter adds the onAccessPoliciesScopeIncludeExtensions to the vscan collection get params
func (o *VscanCollectionGetParams) WithOnAccessPoliciesScopeIncludeExtensionsQueryParameter(onAccessPoliciesScopeIncludeExtensions *string) *VscanCollectionGetParams {
	o.SetOnAccessPoliciesScopeIncludeExtensionsQueryParameter(onAccessPoliciesScopeIncludeExtensions)
	return o
}

// SetOnAccessPoliciesScopeIncludeExtensionsQueryParameter adds the onAccessPoliciesScopeIncludeExtensions to the vscan collection get params
func (o *VscanCollectionGetParams) SetOnAccessPoliciesScopeIncludeExtensionsQueryParameter(onAccessPoliciesScopeIncludeExtensions *string) {
	o.OnAccessPoliciesScopeIncludeExtensionsQueryParameter = onAccessPoliciesScopeIncludeExtensions
}

// WithOnAccessPoliciesScopeMaxFileSizeQueryParameter adds the onAccessPoliciesScopeMaxFileSize to the vscan collection get params
func (o *VscanCollectionGetParams) WithOnAccessPoliciesScopeMaxFileSizeQueryParameter(onAccessPoliciesScopeMaxFileSize *int64) *VscanCollectionGetParams {
	o.SetOnAccessPoliciesScopeMaxFileSizeQueryParameter(onAccessPoliciesScopeMaxFileSize)
	return o
}

// SetOnAccessPoliciesScopeMaxFileSizeQueryParameter adds the onAccessPoliciesScopeMaxFileSize to the vscan collection get params
func (o *VscanCollectionGetParams) SetOnAccessPoliciesScopeMaxFileSizeQueryParameter(onAccessPoliciesScopeMaxFileSize *int64) {
	o.OnAccessPoliciesScopeMaxFileSizeQueryParameter = onAccessPoliciesScopeMaxFileSize
}

// WithOnAccessPoliciesScopeOnlyExecuteAccessQueryParameter adds the onAccessPoliciesScopeOnlyExecuteAccess to the vscan collection get params
func (o *VscanCollectionGetParams) WithOnAccessPoliciesScopeOnlyExecuteAccessQueryParameter(onAccessPoliciesScopeOnlyExecuteAccess *bool) *VscanCollectionGetParams {
	o.SetOnAccessPoliciesScopeOnlyExecuteAccessQueryParameter(onAccessPoliciesScopeOnlyExecuteAccess)
	return o
}

// SetOnAccessPoliciesScopeOnlyExecuteAccessQueryParameter adds the onAccessPoliciesScopeOnlyExecuteAccess to the vscan collection get params
func (o *VscanCollectionGetParams) SetOnAccessPoliciesScopeOnlyExecuteAccessQueryParameter(onAccessPoliciesScopeOnlyExecuteAccess *bool) {
	o.OnAccessPoliciesScopeOnlyExecuteAccessQueryParameter = onAccessPoliciesScopeOnlyExecuteAccess
}

// WithOnAccessPoliciesScopeScanReadonlyVolumesQueryParameter adds the onAccessPoliciesScopeScanReadonlyVolumes to the vscan collection get params
func (o *VscanCollectionGetParams) WithOnAccessPoliciesScopeScanReadonlyVolumesQueryParameter(onAccessPoliciesScopeScanReadonlyVolumes *bool) *VscanCollectionGetParams {
	o.SetOnAccessPoliciesScopeScanReadonlyVolumesQueryParameter(onAccessPoliciesScopeScanReadonlyVolumes)
	return o
}

// SetOnAccessPoliciesScopeScanReadonlyVolumesQueryParameter adds the onAccessPoliciesScopeScanReadonlyVolumes to the vscan collection get params
func (o *VscanCollectionGetParams) SetOnAccessPoliciesScopeScanReadonlyVolumesQueryParameter(onAccessPoliciesScopeScanReadonlyVolumes *bool) {
	o.OnAccessPoliciesScopeScanReadonlyVolumesQueryParameter = onAccessPoliciesScopeScanReadonlyVolumes
}

// WithOnAccessPoliciesScopeScanWithoutExtensionQueryParameter adds the onAccessPoliciesScopeScanWithoutExtension to the vscan collection get params
func (o *VscanCollectionGetParams) WithOnAccessPoliciesScopeScanWithoutExtensionQueryParameter(onAccessPoliciesScopeScanWithoutExtension *bool) *VscanCollectionGetParams {
	o.SetOnAccessPoliciesScopeScanWithoutExtensionQueryParameter(onAccessPoliciesScopeScanWithoutExtension)
	return o
}

// SetOnAccessPoliciesScopeScanWithoutExtensionQueryParameter adds the onAccessPoliciesScopeScanWithoutExtension to the vscan collection get params
func (o *VscanCollectionGetParams) SetOnAccessPoliciesScopeScanWithoutExtensionQueryParameter(onAccessPoliciesScopeScanWithoutExtension *bool) {
	o.OnAccessPoliciesScopeScanWithoutExtensionQueryParameter = onAccessPoliciesScopeScanWithoutExtension
}

// WithOnDemandPoliciesLogPathQueryParameter adds the onDemandPoliciesLogPath to the vscan collection get params
func (o *VscanCollectionGetParams) WithOnDemandPoliciesLogPathQueryParameter(onDemandPoliciesLogPath *string) *VscanCollectionGetParams {
	o.SetOnDemandPoliciesLogPathQueryParameter(onDemandPoliciesLogPath)
	return o
}

// SetOnDemandPoliciesLogPathQueryParameter adds the onDemandPoliciesLogPath to the vscan collection get params
func (o *VscanCollectionGetParams) SetOnDemandPoliciesLogPathQueryParameter(onDemandPoliciesLogPath *string) {
	o.OnDemandPoliciesLogPathQueryParameter = onDemandPoliciesLogPath
}

// WithOnDemandPoliciesNameQueryParameter adds the onDemandPoliciesName to the vscan collection get params
func (o *VscanCollectionGetParams) WithOnDemandPoliciesNameQueryParameter(onDemandPoliciesName *string) *VscanCollectionGetParams {
	o.SetOnDemandPoliciesNameQueryParameter(onDemandPoliciesName)
	return o
}

// SetOnDemandPoliciesNameQueryParameter adds the onDemandPoliciesName to the vscan collection get params
func (o *VscanCollectionGetParams) SetOnDemandPoliciesNameQueryParameter(onDemandPoliciesName *string) {
	o.OnDemandPoliciesNameQueryParameter = onDemandPoliciesName
}

// WithOnDemandPoliciesScanPathsQueryParameter adds the onDemandPoliciesScanPaths to the vscan collection get params
func (o *VscanCollectionGetParams) WithOnDemandPoliciesScanPathsQueryParameter(onDemandPoliciesScanPaths *string) *VscanCollectionGetParams {
	o.SetOnDemandPoliciesScanPathsQueryParameter(onDemandPoliciesScanPaths)
	return o
}

// SetOnDemandPoliciesScanPathsQueryParameter adds the onDemandPoliciesScanPaths to the vscan collection get params
func (o *VscanCollectionGetParams) SetOnDemandPoliciesScanPathsQueryParameter(onDemandPoliciesScanPaths *string) {
	o.OnDemandPoliciesScanPathsQueryParameter = onDemandPoliciesScanPaths
}

// WithOnDemandPoliciesScheduleNameQueryParameter adds the onDemandPoliciesScheduleName to the vscan collection get params
func (o *VscanCollectionGetParams) WithOnDemandPoliciesScheduleNameQueryParameter(onDemandPoliciesScheduleName *string) *VscanCollectionGetParams {
	o.SetOnDemandPoliciesScheduleNameQueryParameter(onDemandPoliciesScheduleName)
	return o
}

// SetOnDemandPoliciesScheduleNameQueryParameter adds the onDemandPoliciesScheduleName to the vscan collection get params
func (o *VscanCollectionGetParams) SetOnDemandPoliciesScheduleNameQueryParameter(onDemandPoliciesScheduleName *string) {
	o.OnDemandPoliciesScheduleNameQueryParameter = onDemandPoliciesScheduleName
}

// WithOnDemandPoliciesScheduleUUIDQueryParameter adds the onDemandPoliciesScheduleUUID to the vscan collection get params
func (o *VscanCollectionGetParams) WithOnDemandPoliciesScheduleUUIDQueryParameter(onDemandPoliciesScheduleUUID *string) *VscanCollectionGetParams {
	o.SetOnDemandPoliciesScheduleUUIDQueryParameter(onDemandPoliciesScheduleUUID)
	return o
}

// SetOnDemandPoliciesScheduleUUIDQueryParameter adds the onDemandPoliciesScheduleUuid to the vscan collection get params
func (o *VscanCollectionGetParams) SetOnDemandPoliciesScheduleUUIDQueryParameter(onDemandPoliciesScheduleUUID *string) {
	o.OnDemandPoliciesScheduleUUIDQueryParameter = onDemandPoliciesScheduleUUID
}

// WithOnDemandPoliciesScopeExcludeExtensionsQueryParameter adds the onDemandPoliciesScopeExcludeExtensions to the vscan collection get params
func (o *VscanCollectionGetParams) WithOnDemandPoliciesScopeExcludeExtensionsQueryParameter(onDemandPoliciesScopeExcludeExtensions *string) *VscanCollectionGetParams {
	o.SetOnDemandPoliciesScopeExcludeExtensionsQueryParameter(onDemandPoliciesScopeExcludeExtensions)
	return o
}

// SetOnDemandPoliciesScopeExcludeExtensionsQueryParameter adds the onDemandPoliciesScopeExcludeExtensions to the vscan collection get params
func (o *VscanCollectionGetParams) SetOnDemandPoliciesScopeExcludeExtensionsQueryParameter(onDemandPoliciesScopeExcludeExtensions *string) {
	o.OnDemandPoliciesScopeExcludeExtensionsQueryParameter = onDemandPoliciesScopeExcludeExtensions
}

// WithOnDemandPoliciesScopeExcludePathsQueryParameter adds the onDemandPoliciesScopeExcludePaths to the vscan collection get params
func (o *VscanCollectionGetParams) WithOnDemandPoliciesScopeExcludePathsQueryParameter(onDemandPoliciesScopeExcludePaths *string) *VscanCollectionGetParams {
	o.SetOnDemandPoliciesScopeExcludePathsQueryParameter(onDemandPoliciesScopeExcludePaths)
	return o
}

// SetOnDemandPoliciesScopeExcludePathsQueryParameter adds the onDemandPoliciesScopeExcludePaths to the vscan collection get params
func (o *VscanCollectionGetParams) SetOnDemandPoliciesScopeExcludePathsQueryParameter(onDemandPoliciesScopeExcludePaths *string) {
	o.OnDemandPoliciesScopeExcludePathsQueryParameter = onDemandPoliciesScopeExcludePaths
}

// WithOnDemandPoliciesScopeIncludeExtensionsQueryParameter adds the onDemandPoliciesScopeIncludeExtensions to the vscan collection get params
func (o *VscanCollectionGetParams) WithOnDemandPoliciesScopeIncludeExtensionsQueryParameter(onDemandPoliciesScopeIncludeExtensions *string) *VscanCollectionGetParams {
	o.SetOnDemandPoliciesScopeIncludeExtensionsQueryParameter(onDemandPoliciesScopeIncludeExtensions)
	return o
}

// SetOnDemandPoliciesScopeIncludeExtensionsQueryParameter adds the onDemandPoliciesScopeIncludeExtensions to the vscan collection get params
func (o *VscanCollectionGetParams) SetOnDemandPoliciesScopeIncludeExtensionsQueryParameter(onDemandPoliciesScopeIncludeExtensions *string) {
	o.OnDemandPoliciesScopeIncludeExtensionsQueryParameter = onDemandPoliciesScopeIncludeExtensions
}

// WithOnDemandPoliciesScopeMaxFileSizeQueryParameter adds the onDemandPoliciesScopeMaxFileSize to the vscan collection get params
func (o *VscanCollectionGetParams) WithOnDemandPoliciesScopeMaxFileSizeQueryParameter(onDemandPoliciesScopeMaxFileSize *int64) *VscanCollectionGetParams {
	o.SetOnDemandPoliciesScopeMaxFileSizeQueryParameter(onDemandPoliciesScopeMaxFileSize)
	return o
}

// SetOnDemandPoliciesScopeMaxFileSizeQueryParameter adds the onDemandPoliciesScopeMaxFileSize to the vscan collection get params
func (o *VscanCollectionGetParams) SetOnDemandPoliciesScopeMaxFileSizeQueryParameter(onDemandPoliciesScopeMaxFileSize *int64) {
	o.OnDemandPoliciesScopeMaxFileSizeQueryParameter = onDemandPoliciesScopeMaxFileSize
}

// WithOnDemandPoliciesScopeScanWithoutExtensionQueryParameter adds the onDemandPoliciesScopeScanWithoutExtension to the vscan collection get params
func (o *VscanCollectionGetParams) WithOnDemandPoliciesScopeScanWithoutExtensionQueryParameter(onDemandPoliciesScopeScanWithoutExtension *bool) *VscanCollectionGetParams {
	o.SetOnDemandPoliciesScopeScanWithoutExtensionQueryParameter(onDemandPoliciesScopeScanWithoutExtension)
	return o
}

// SetOnDemandPoliciesScopeScanWithoutExtensionQueryParameter adds the onDemandPoliciesScopeScanWithoutExtension to the vscan collection get params
func (o *VscanCollectionGetParams) SetOnDemandPoliciesScopeScanWithoutExtensionQueryParameter(onDemandPoliciesScopeScanWithoutExtension *bool) {
	o.OnDemandPoliciesScopeScanWithoutExtensionQueryParameter = onDemandPoliciesScopeScanWithoutExtension
}

// WithOrderBy adds the orderBy to the vscan collection get params
func (o *VscanCollectionGetParams) WithOrderBy(orderBy []string) *VscanCollectionGetParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the vscan collection get params
func (o *VscanCollectionGetParams) SetOrderBy(orderBy []string) {
	o.OrderBy = orderBy
}

// WithReturnRecords adds the returnRecords to the vscan collection get params
func (o *VscanCollectionGetParams) WithReturnRecords(returnRecords *bool) *VscanCollectionGetParams {
	o.SetReturnRecords(returnRecords)
	return o
}

// SetReturnRecords adds the returnRecords to the vscan collection get params
func (o *VscanCollectionGetParams) SetReturnRecords(returnRecords *bool) {
	o.ReturnRecords = returnRecords
}

// WithReturnTimeout adds the returnTimeout to the vscan collection get params
func (o *VscanCollectionGetParams) WithReturnTimeout(returnTimeout *int64) *VscanCollectionGetParams {
	o.SetReturnTimeout(returnTimeout)
	return o
}

// SetReturnTimeout adds the returnTimeout to the vscan collection get params
func (o *VscanCollectionGetParams) SetReturnTimeout(returnTimeout *int64) {
	o.ReturnTimeout = returnTimeout
}

// WithScannerPoolsClusterNameQueryParameter adds the scannerPoolsClusterName to the vscan collection get params
func (o *VscanCollectionGetParams) WithScannerPoolsClusterNameQueryParameter(scannerPoolsClusterName *string) *VscanCollectionGetParams {
	o.SetScannerPoolsClusterNameQueryParameter(scannerPoolsClusterName)
	return o
}

// SetScannerPoolsClusterNameQueryParameter adds the scannerPoolsClusterName to the vscan collection get params
func (o *VscanCollectionGetParams) SetScannerPoolsClusterNameQueryParameter(scannerPoolsClusterName *string) {
	o.ScannerPoolsClusterNameQueryParameter = scannerPoolsClusterName
}

// WithScannerPoolsClusterUUIDQueryParameter adds the scannerPoolsClusterUUID to the vscan collection get params
func (o *VscanCollectionGetParams) WithScannerPoolsClusterUUIDQueryParameter(scannerPoolsClusterUUID *string) *VscanCollectionGetParams {
	o.SetScannerPoolsClusterUUIDQueryParameter(scannerPoolsClusterUUID)
	return o
}

// SetScannerPoolsClusterUUIDQueryParameter adds the scannerPoolsClusterUuid to the vscan collection get params
func (o *VscanCollectionGetParams) SetScannerPoolsClusterUUIDQueryParameter(scannerPoolsClusterUUID *string) {
	o.ScannerPoolsClusterUUIDQueryParameter = scannerPoolsClusterUUID
}

// WithScannerPoolsNameQueryParameter adds the scannerPoolsName to the vscan collection get params
func (o *VscanCollectionGetParams) WithScannerPoolsNameQueryParameter(scannerPoolsName *string) *VscanCollectionGetParams {
	o.SetScannerPoolsNameQueryParameter(scannerPoolsName)
	return o
}

// SetScannerPoolsNameQueryParameter adds the scannerPoolsName to the vscan collection get params
func (o *VscanCollectionGetParams) SetScannerPoolsNameQueryParameter(scannerPoolsName *string) {
	o.ScannerPoolsNameQueryParameter = scannerPoolsName
}

// WithScannerPoolsPrivilegedUsersQueryParameter adds the scannerPoolsPrivilegedUsers to the vscan collection get params
func (o *VscanCollectionGetParams) WithScannerPoolsPrivilegedUsersQueryParameter(scannerPoolsPrivilegedUsers *string) *VscanCollectionGetParams {
	o.SetScannerPoolsPrivilegedUsersQueryParameter(scannerPoolsPrivilegedUsers)
	return o
}

// SetScannerPoolsPrivilegedUsersQueryParameter adds the scannerPoolsPrivilegedUsers to the vscan collection get params
func (o *VscanCollectionGetParams) SetScannerPoolsPrivilegedUsersQueryParameter(scannerPoolsPrivilegedUsers *string) {
	o.ScannerPoolsPrivilegedUsersQueryParameter = scannerPoolsPrivilegedUsers
}

// WithScannerPoolsRoleQueryParameter adds the scannerPoolsRole to the vscan collection get params
func (o *VscanCollectionGetParams) WithScannerPoolsRoleQueryParameter(scannerPoolsRole *string) *VscanCollectionGetParams {
	o.SetScannerPoolsRoleQueryParameter(scannerPoolsRole)
	return o
}

// SetScannerPoolsRoleQueryParameter adds the scannerPoolsRole to the vscan collection get params
func (o *VscanCollectionGetParams) SetScannerPoolsRoleQueryParameter(scannerPoolsRole *string) {
	o.ScannerPoolsRoleQueryParameter = scannerPoolsRole
}

// WithScannerPoolsServersQueryParameter adds the scannerPoolsServers to the vscan collection get params
func (o *VscanCollectionGetParams) WithScannerPoolsServersQueryParameter(scannerPoolsServers *string) *VscanCollectionGetParams {
	o.SetScannerPoolsServersQueryParameter(scannerPoolsServers)
	return o
}

// SetScannerPoolsServersQueryParameter adds the scannerPoolsServers to the vscan collection get params
func (o *VscanCollectionGetParams) SetScannerPoolsServersQueryParameter(scannerPoolsServers *string) {
	o.ScannerPoolsServersQueryParameter = scannerPoolsServers
}

// WithSVMNameQueryParameter adds the svmName to the vscan collection get params
func (o *VscanCollectionGetParams) WithSVMNameQueryParameter(svmName *string) *VscanCollectionGetParams {
	o.SetSVMNameQueryParameter(svmName)
	return o
}

// SetSVMNameQueryParameter adds the svmName to the vscan collection get params
func (o *VscanCollectionGetParams) SetSVMNameQueryParameter(svmName *string) {
	o.SVMNameQueryParameter = svmName
}

// WithSVMUUIDQueryParameter adds the svmUUID to the vscan collection get params
func (o *VscanCollectionGetParams) WithSVMUUIDQueryParameter(svmUUID *string) *VscanCollectionGetParams {
	o.SetSVMUUIDQueryParameter(svmUUID)
	return o
}

// SetSVMUUIDQueryParameter adds the svmUuid to the vscan collection get params
func (o *VscanCollectionGetParams) SetSVMUUIDQueryParameter(svmUUID *string) {
	o.SVMUUIDQueryParameter = svmUUID
}

// WriteToRequest writes these params to a swagger request
func (o *VscanCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EnabledQueryParameter != nil {

		// query param enabled
		var qrEnabled bool

		if o.EnabledQueryParameter != nil {
			qrEnabled = *o.EnabledQueryParameter
		}
		qEnabled := swag.FormatBool(qrEnabled)
		if qEnabled != "" {

			if err := r.SetQueryParam("enabled", qEnabled); err != nil {
				return err
			}
		}
	}

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.MaxRecords != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecords != nil {
			qrMaxRecords = *o.MaxRecords
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.OnAccessPoliciesEnabledQueryParameter != nil {

		// query param on_access_policies.enabled
		var qrOnAccessPoliciesEnabled bool

		if o.OnAccessPoliciesEnabledQueryParameter != nil {
			qrOnAccessPoliciesEnabled = *o.OnAccessPoliciesEnabledQueryParameter
		}
		qOnAccessPoliciesEnabled := swag.FormatBool(qrOnAccessPoliciesEnabled)
		if qOnAccessPoliciesEnabled != "" {

			if err := r.SetQueryParam("on_access_policies.enabled", qOnAccessPoliciesEnabled); err != nil {
				return err
			}
		}
	}

	if o.OnAccessPoliciesMandatoryQueryParameter != nil {

		// query param on_access_policies.mandatory
		var qrOnAccessPoliciesMandatory bool

		if o.OnAccessPoliciesMandatoryQueryParameter != nil {
			qrOnAccessPoliciesMandatory = *o.OnAccessPoliciesMandatoryQueryParameter
		}
		qOnAccessPoliciesMandatory := swag.FormatBool(qrOnAccessPoliciesMandatory)
		if qOnAccessPoliciesMandatory != "" {

			if err := r.SetQueryParam("on_access_policies.mandatory", qOnAccessPoliciesMandatory); err != nil {
				return err
			}
		}
	}

	if o.OnAccessPoliciesNameQueryParameter != nil {

		// query param on_access_policies.name
		var qrOnAccessPoliciesName string

		if o.OnAccessPoliciesNameQueryParameter != nil {
			qrOnAccessPoliciesName = *o.OnAccessPoliciesNameQueryParameter
		}
		qOnAccessPoliciesName := qrOnAccessPoliciesName
		if qOnAccessPoliciesName != "" {

			if err := r.SetQueryParam("on_access_policies.name", qOnAccessPoliciesName); err != nil {
				return err
			}
		}
	}

	if o.OnAccessPoliciesScopeExcludeExtensionsQueryParameter != nil {

		// query param on_access_policies.scope.exclude_extensions
		var qrOnAccessPoliciesScopeExcludeExtensions string

		if o.OnAccessPoliciesScopeExcludeExtensionsQueryParameter != nil {
			qrOnAccessPoliciesScopeExcludeExtensions = *o.OnAccessPoliciesScopeExcludeExtensionsQueryParameter
		}
		qOnAccessPoliciesScopeExcludeExtensions := qrOnAccessPoliciesScopeExcludeExtensions
		if qOnAccessPoliciesScopeExcludeExtensions != "" {

			if err := r.SetQueryParam("on_access_policies.scope.exclude_extensions", qOnAccessPoliciesScopeExcludeExtensions); err != nil {
				return err
			}
		}
	}

	if o.OnAccessPoliciesScopeExcludePathsQueryParameter != nil {

		// query param on_access_policies.scope.exclude_paths
		var qrOnAccessPoliciesScopeExcludePaths string

		if o.OnAccessPoliciesScopeExcludePathsQueryParameter != nil {
			qrOnAccessPoliciesScopeExcludePaths = *o.OnAccessPoliciesScopeExcludePathsQueryParameter
		}
		qOnAccessPoliciesScopeExcludePaths := qrOnAccessPoliciesScopeExcludePaths
		if qOnAccessPoliciesScopeExcludePaths != "" {

			if err := r.SetQueryParam("on_access_policies.scope.exclude_paths", qOnAccessPoliciesScopeExcludePaths); err != nil {
				return err
			}
		}
	}

	if o.OnAccessPoliciesScopeIncludeExtensionsQueryParameter != nil {

		// query param on_access_policies.scope.include_extensions
		var qrOnAccessPoliciesScopeIncludeExtensions string

		if o.OnAccessPoliciesScopeIncludeExtensionsQueryParameter != nil {
			qrOnAccessPoliciesScopeIncludeExtensions = *o.OnAccessPoliciesScopeIncludeExtensionsQueryParameter
		}
		qOnAccessPoliciesScopeIncludeExtensions := qrOnAccessPoliciesScopeIncludeExtensions
		if qOnAccessPoliciesScopeIncludeExtensions != "" {

			if err := r.SetQueryParam("on_access_policies.scope.include_extensions", qOnAccessPoliciesScopeIncludeExtensions); err != nil {
				return err
			}
		}
	}

	if o.OnAccessPoliciesScopeMaxFileSizeQueryParameter != nil {

		// query param on_access_policies.scope.max_file_size
		var qrOnAccessPoliciesScopeMaxFileSize int64

		if o.OnAccessPoliciesScopeMaxFileSizeQueryParameter != nil {
			qrOnAccessPoliciesScopeMaxFileSize = *o.OnAccessPoliciesScopeMaxFileSizeQueryParameter
		}
		qOnAccessPoliciesScopeMaxFileSize := swag.FormatInt64(qrOnAccessPoliciesScopeMaxFileSize)
		if qOnAccessPoliciesScopeMaxFileSize != "" {

			if err := r.SetQueryParam("on_access_policies.scope.max_file_size", qOnAccessPoliciesScopeMaxFileSize); err != nil {
				return err
			}
		}
	}

	if o.OnAccessPoliciesScopeOnlyExecuteAccessQueryParameter != nil {

		// query param on_access_policies.scope.only_execute_access
		var qrOnAccessPoliciesScopeOnlyExecuteAccess bool

		if o.OnAccessPoliciesScopeOnlyExecuteAccessQueryParameter != nil {
			qrOnAccessPoliciesScopeOnlyExecuteAccess = *o.OnAccessPoliciesScopeOnlyExecuteAccessQueryParameter
		}
		qOnAccessPoliciesScopeOnlyExecuteAccess := swag.FormatBool(qrOnAccessPoliciesScopeOnlyExecuteAccess)
		if qOnAccessPoliciesScopeOnlyExecuteAccess != "" {

			if err := r.SetQueryParam("on_access_policies.scope.only_execute_access", qOnAccessPoliciesScopeOnlyExecuteAccess); err != nil {
				return err
			}
		}
	}

	if o.OnAccessPoliciesScopeScanReadonlyVolumesQueryParameter != nil {

		// query param on_access_policies.scope.scan_readonly_volumes
		var qrOnAccessPoliciesScopeScanReadonlyVolumes bool

		if o.OnAccessPoliciesScopeScanReadonlyVolumesQueryParameter != nil {
			qrOnAccessPoliciesScopeScanReadonlyVolumes = *o.OnAccessPoliciesScopeScanReadonlyVolumesQueryParameter
		}
		qOnAccessPoliciesScopeScanReadonlyVolumes := swag.FormatBool(qrOnAccessPoliciesScopeScanReadonlyVolumes)
		if qOnAccessPoliciesScopeScanReadonlyVolumes != "" {

			if err := r.SetQueryParam("on_access_policies.scope.scan_readonly_volumes", qOnAccessPoliciesScopeScanReadonlyVolumes); err != nil {
				return err
			}
		}
	}

	if o.OnAccessPoliciesScopeScanWithoutExtensionQueryParameter != nil {

		// query param on_access_policies.scope.scan_without_extension
		var qrOnAccessPoliciesScopeScanWithoutExtension bool

		if o.OnAccessPoliciesScopeScanWithoutExtensionQueryParameter != nil {
			qrOnAccessPoliciesScopeScanWithoutExtension = *o.OnAccessPoliciesScopeScanWithoutExtensionQueryParameter
		}
		qOnAccessPoliciesScopeScanWithoutExtension := swag.FormatBool(qrOnAccessPoliciesScopeScanWithoutExtension)
		if qOnAccessPoliciesScopeScanWithoutExtension != "" {

			if err := r.SetQueryParam("on_access_policies.scope.scan_without_extension", qOnAccessPoliciesScopeScanWithoutExtension); err != nil {
				return err
			}
		}
	}

	if o.OnDemandPoliciesLogPathQueryParameter != nil {

		// query param on_demand_policies.log_path
		var qrOnDemandPoliciesLogPath string

		if o.OnDemandPoliciesLogPathQueryParameter != nil {
			qrOnDemandPoliciesLogPath = *o.OnDemandPoliciesLogPathQueryParameter
		}
		qOnDemandPoliciesLogPath := qrOnDemandPoliciesLogPath
		if qOnDemandPoliciesLogPath != "" {

			if err := r.SetQueryParam("on_demand_policies.log_path", qOnDemandPoliciesLogPath); err != nil {
				return err
			}
		}
	}

	if o.OnDemandPoliciesNameQueryParameter != nil {

		// query param on_demand_policies.name
		var qrOnDemandPoliciesName string

		if o.OnDemandPoliciesNameQueryParameter != nil {
			qrOnDemandPoliciesName = *o.OnDemandPoliciesNameQueryParameter
		}
		qOnDemandPoliciesName := qrOnDemandPoliciesName
		if qOnDemandPoliciesName != "" {

			if err := r.SetQueryParam("on_demand_policies.name", qOnDemandPoliciesName); err != nil {
				return err
			}
		}
	}

	if o.OnDemandPoliciesScanPathsQueryParameter != nil {

		// query param on_demand_policies.scan_paths
		var qrOnDemandPoliciesScanPaths string

		if o.OnDemandPoliciesScanPathsQueryParameter != nil {
			qrOnDemandPoliciesScanPaths = *o.OnDemandPoliciesScanPathsQueryParameter
		}
		qOnDemandPoliciesScanPaths := qrOnDemandPoliciesScanPaths
		if qOnDemandPoliciesScanPaths != "" {

			if err := r.SetQueryParam("on_demand_policies.scan_paths", qOnDemandPoliciesScanPaths); err != nil {
				return err
			}
		}
	}

	if o.OnDemandPoliciesScheduleNameQueryParameter != nil {

		// query param on_demand_policies.schedule.name
		var qrOnDemandPoliciesScheduleName string

		if o.OnDemandPoliciesScheduleNameQueryParameter != nil {
			qrOnDemandPoliciesScheduleName = *o.OnDemandPoliciesScheduleNameQueryParameter
		}
		qOnDemandPoliciesScheduleName := qrOnDemandPoliciesScheduleName
		if qOnDemandPoliciesScheduleName != "" {

			if err := r.SetQueryParam("on_demand_policies.schedule.name", qOnDemandPoliciesScheduleName); err != nil {
				return err
			}
		}
	}

	if o.OnDemandPoliciesScheduleUUIDQueryParameter != nil {

		// query param on_demand_policies.schedule.uuid
		var qrOnDemandPoliciesScheduleUUID string

		if o.OnDemandPoliciesScheduleUUIDQueryParameter != nil {
			qrOnDemandPoliciesScheduleUUID = *o.OnDemandPoliciesScheduleUUIDQueryParameter
		}
		qOnDemandPoliciesScheduleUUID := qrOnDemandPoliciesScheduleUUID
		if qOnDemandPoliciesScheduleUUID != "" {

			if err := r.SetQueryParam("on_demand_policies.schedule.uuid", qOnDemandPoliciesScheduleUUID); err != nil {
				return err
			}
		}
	}

	if o.OnDemandPoliciesScopeExcludeExtensionsQueryParameter != nil {

		// query param on_demand_policies.scope.exclude_extensions
		var qrOnDemandPoliciesScopeExcludeExtensions string

		if o.OnDemandPoliciesScopeExcludeExtensionsQueryParameter != nil {
			qrOnDemandPoliciesScopeExcludeExtensions = *o.OnDemandPoliciesScopeExcludeExtensionsQueryParameter
		}
		qOnDemandPoliciesScopeExcludeExtensions := qrOnDemandPoliciesScopeExcludeExtensions
		if qOnDemandPoliciesScopeExcludeExtensions != "" {

			if err := r.SetQueryParam("on_demand_policies.scope.exclude_extensions", qOnDemandPoliciesScopeExcludeExtensions); err != nil {
				return err
			}
		}
	}

	if o.OnDemandPoliciesScopeExcludePathsQueryParameter != nil {

		// query param on_demand_policies.scope.exclude_paths
		var qrOnDemandPoliciesScopeExcludePaths string

		if o.OnDemandPoliciesScopeExcludePathsQueryParameter != nil {
			qrOnDemandPoliciesScopeExcludePaths = *o.OnDemandPoliciesScopeExcludePathsQueryParameter
		}
		qOnDemandPoliciesScopeExcludePaths := qrOnDemandPoliciesScopeExcludePaths
		if qOnDemandPoliciesScopeExcludePaths != "" {

			if err := r.SetQueryParam("on_demand_policies.scope.exclude_paths", qOnDemandPoliciesScopeExcludePaths); err != nil {
				return err
			}
		}
	}

	if o.OnDemandPoliciesScopeIncludeExtensionsQueryParameter != nil {

		// query param on_demand_policies.scope.include_extensions
		var qrOnDemandPoliciesScopeIncludeExtensions string

		if o.OnDemandPoliciesScopeIncludeExtensionsQueryParameter != nil {
			qrOnDemandPoliciesScopeIncludeExtensions = *o.OnDemandPoliciesScopeIncludeExtensionsQueryParameter
		}
		qOnDemandPoliciesScopeIncludeExtensions := qrOnDemandPoliciesScopeIncludeExtensions
		if qOnDemandPoliciesScopeIncludeExtensions != "" {

			if err := r.SetQueryParam("on_demand_policies.scope.include_extensions", qOnDemandPoliciesScopeIncludeExtensions); err != nil {
				return err
			}
		}
	}

	if o.OnDemandPoliciesScopeMaxFileSizeQueryParameter != nil {

		// query param on_demand_policies.scope.max_file_size
		var qrOnDemandPoliciesScopeMaxFileSize int64

		if o.OnDemandPoliciesScopeMaxFileSizeQueryParameter != nil {
			qrOnDemandPoliciesScopeMaxFileSize = *o.OnDemandPoliciesScopeMaxFileSizeQueryParameter
		}
		qOnDemandPoliciesScopeMaxFileSize := swag.FormatInt64(qrOnDemandPoliciesScopeMaxFileSize)
		if qOnDemandPoliciesScopeMaxFileSize != "" {

			if err := r.SetQueryParam("on_demand_policies.scope.max_file_size", qOnDemandPoliciesScopeMaxFileSize); err != nil {
				return err
			}
		}
	}

	if o.OnDemandPoliciesScopeScanWithoutExtensionQueryParameter != nil {

		// query param on_demand_policies.scope.scan_without_extension
		var qrOnDemandPoliciesScopeScanWithoutExtension bool

		if o.OnDemandPoliciesScopeScanWithoutExtensionQueryParameter != nil {
			qrOnDemandPoliciesScopeScanWithoutExtension = *o.OnDemandPoliciesScopeScanWithoutExtensionQueryParameter
		}
		qOnDemandPoliciesScopeScanWithoutExtension := swag.FormatBool(qrOnDemandPoliciesScopeScanWithoutExtension)
		if qOnDemandPoliciesScopeScanWithoutExtension != "" {

			if err := r.SetQueryParam("on_demand_policies.scope.scan_without_extension", qOnDemandPoliciesScopeScanWithoutExtension); err != nil {
				return err
			}
		}
	}

	if o.OrderBy != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.ReturnRecords != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecords != nil {
			qrReturnRecords = *o.ReturnRecords
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeout != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeout != nil {
			qrReturnTimeout = *o.ReturnTimeout
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.ScannerPoolsClusterNameQueryParameter != nil {

		// query param scanner_pools.cluster.name
		var qrScannerPoolsClusterName string

		if o.ScannerPoolsClusterNameQueryParameter != nil {
			qrScannerPoolsClusterName = *o.ScannerPoolsClusterNameQueryParameter
		}
		qScannerPoolsClusterName := qrScannerPoolsClusterName
		if qScannerPoolsClusterName != "" {

			if err := r.SetQueryParam("scanner_pools.cluster.name", qScannerPoolsClusterName); err != nil {
				return err
			}
		}
	}

	if o.ScannerPoolsClusterUUIDQueryParameter != nil {

		// query param scanner_pools.cluster.uuid
		var qrScannerPoolsClusterUUID string

		if o.ScannerPoolsClusterUUIDQueryParameter != nil {
			qrScannerPoolsClusterUUID = *o.ScannerPoolsClusterUUIDQueryParameter
		}
		qScannerPoolsClusterUUID := qrScannerPoolsClusterUUID
		if qScannerPoolsClusterUUID != "" {

			if err := r.SetQueryParam("scanner_pools.cluster.uuid", qScannerPoolsClusterUUID); err != nil {
				return err
			}
		}
	}

	if o.ScannerPoolsNameQueryParameter != nil {

		// query param scanner_pools.name
		var qrScannerPoolsName string

		if o.ScannerPoolsNameQueryParameter != nil {
			qrScannerPoolsName = *o.ScannerPoolsNameQueryParameter
		}
		qScannerPoolsName := qrScannerPoolsName
		if qScannerPoolsName != "" {

			if err := r.SetQueryParam("scanner_pools.name", qScannerPoolsName); err != nil {
				return err
			}
		}
	}

	if o.ScannerPoolsPrivilegedUsersQueryParameter != nil {

		// query param scanner_pools.privileged_users
		var qrScannerPoolsPrivilegedUsers string

		if o.ScannerPoolsPrivilegedUsersQueryParameter != nil {
			qrScannerPoolsPrivilegedUsers = *o.ScannerPoolsPrivilegedUsersQueryParameter
		}
		qScannerPoolsPrivilegedUsers := qrScannerPoolsPrivilegedUsers
		if qScannerPoolsPrivilegedUsers != "" {

			if err := r.SetQueryParam("scanner_pools.privileged_users", qScannerPoolsPrivilegedUsers); err != nil {
				return err
			}
		}
	}

	if o.ScannerPoolsRoleQueryParameter != nil {

		// query param scanner_pools.role
		var qrScannerPoolsRole string

		if o.ScannerPoolsRoleQueryParameter != nil {
			qrScannerPoolsRole = *o.ScannerPoolsRoleQueryParameter
		}
		qScannerPoolsRole := qrScannerPoolsRole
		if qScannerPoolsRole != "" {

			if err := r.SetQueryParam("scanner_pools.role", qScannerPoolsRole); err != nil {
				return err
			}
		}
	}

	if o.ScannerPoolsServersQueryParameter != nil {

		// query param scanner_pools.servers
		var qrScannerPoolsServers string

		if o.ScannerPoolsServersQueryParameter != nil {
			qrScannerPoolsServers = *o.ScannerPoolsServersQueryParameter
		}
		qScannerPoolsServers := qrScannerPoolsServers
		if qScannerPoolsServers != "" {

			if err := r.SetQueryParam("scanner_pools.servers", qScannerPoolsServers); err != nil {
				return err
			}
		}
	}

	if o.SVMNameQueryParameter != nil {

		// query param svm.name
		var qrSvmName string

		if o.SVMNameQueryParameter != nil {
			qrSvmName = *o.SVMNameQueryParameter
		}
		qSvmName := qrSvmName
		if qSvmName != "" {

			if err := r.SetQueryParam("svm.name", qSvmName); err != nil {
				return err
			}
		}
	}

	if o.SVMUUIDQueryParameter != nil {

		// query param svm.uuid
		var qrSvmUUID string

		if o.SVMUUIDQueryParameter != nil {
			qrSvmUUID = *o.SVMUUIDQueryParameter
		}
		qSvmUUID := qrSvmUUID
		if qSvmUUID != "" {

			if err := r.SetQueryParam("svm.uuid", qSvmUUID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamVscanCollectionGet binds the parameter fields
func (o *VscanCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamVscanCollectionGet binds the parameter order_by
func (o *VscanCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderBy

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
