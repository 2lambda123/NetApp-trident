// Code generated by go-swagger; DO NOT EDIT.

package n_a_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewVscanOnAccessPolicyCollectionGetParams creates a new VscanOnAccessPolicyCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewVscanOnAccessPolicyCollectionGetParams() *VscanOnAccessPolicyCollectionGetParams {
	return &VscanOnAccessPolicyCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewVscanOnAccessPolicyCollectionGetParamsWithTimeout creates a new VscanOnAccessPolicyCollectionGetParams object
// with the ability to set a timeout on a request.
func NewVscanOnAccessPolicyCollectionGetParamsWithTimeout(timeout time.Duration) *VscanOnAccessPolicyCollectionGetParams {
	return &VscanOnAccessPolicyCollectionGetParams{
		timeout: timeout,
	}
}

// NewVscanOnAccessPolicyCollectionGetParamsWithContext creates a new VscanOnAccessPolicyCollectionGetParams object
// with the ability to set a context for a request.
func NewVscanOnAccessPolicyCollectionGetParamsWithContext(ctx context.Context) *VscanOnAccessPolicyCollectionGetParams {
	return &VscanOnAccessPolicyCollectionGetParams{
		Context: ctx,
	}
}

// NewVscanOnAccessPolicyCollectionGetParamsWithHTTPClient creates a new VscanOnAccessPolicyCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewVscanOnAccessPolicyCollectionGetParamsWithHTTPClient(client *http.Client) *VscanOnAccessPolicyCollectionGetParams {
	return &VscanOnAccessPolicyCollectionGetParams{
		HTTPClient: client,
	}
}

/* VscanOnAccessPolicyCollectionGetParams contains all the parameters to send to the API endpoint
   for the vscan on access policy collection get operation.

   Typically these are written to a http.Request.
*/
type VscanOnAccessPolicyCollectionGetParams struct {

	/* Enabled.

	   Filter by enabled
	*/
	EnabledQueryParameter *bool

	/* Fields.

	   Specify the fields to return.
	*/
	FieldsQueryParameter []string

	/* Mandatory.

	   Filter by mandatory
	*/
	MandatoryQueryParameter *bool

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecordsQueryParameter *int64

	/* Name.

	   Filter by name
	*/
	NameQueryParameter *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderByQueryParameter []string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecordsQueryParameter *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeoutQueryParameter *int64

	/* ScopeExcludeExtensions.

	   Filter by scope.exclude_extensions
	*/
	ScopeExcludeExtensionsQueryParameter *string

	/* ScopeExcludePaths.

	   Filter by scope.exclude_paths
	*/
	ScopeExcludePathsQueryParameter *string

	/* ScopeIncludeExtensions.

	   Filter by scope.include_extensions
	*/
	ScopeIncludeExtensionsQueryParameter *string

	/* ScopeMaxFileSize.

	   Filter by scope.max_file_size
	*/
	ScopeMaxFileSizeQueryParameter *int64

	/* ScopeOnlyExecuteAccess.

	   Filter by scope.only_execute_access
	*/
	ScopeOnlyExecuteAccessQueryParameter *bool

	/* ScopeScanReadonlyVolumes.

	   Filter by scope.scan_readonly_volumes
	*/
	ScopeScanReadonlyVolumesQueryParameter *bool

	/* ScopeScanWithoutExtension.

	   Filter by scope.scan_without_extension
	*/
	ScopeScanWithoutExtensionQueryParameter *bool

	/* SvmUUID.

	   UUID of the SVM to which this object belongs.
	*/
	SVMUUIDPathParameter string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the vscan on access policy collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *VscanOnAccessPolicyCollectionGetParams) WithDefaults() *VscanOnAccessPolicyCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the vscan on access policy collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *VscanOnAccessPolicyCollectionGetParams) SetDefaults() {
	var (
		returnRecordsQueryParameterDefault = bool(true)

		returnTimeoutQueryParameterDefault = int64(15)
	)

	val := VscanOnAccessPolicyCollectionGetParams{
		ReturnRecordsQueryParameter: &returnRecordsQueryParameterDefault,
		ReturnTimeoutQueryParameter: &returnTimeoutQueryParameterDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the vscan on access policy collection get params
func (o *VscanOnAccessPolicyCollectionGetParams) WithTimeout(timeout time.Duration) *VscanOnAccessPolicyCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the vscan on access policy collection get params
func (o *VscanOnAccessPolicyCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the vscan on access policy collection get params
func (o *VscanOnAccessPolicyCollectionGetParams) WithContext(ctx context.Context) *VscanOnAccessPolicyCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the vscan on access policy collection get params
func (o *VscanOnAccessPolicyCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the vscan on access policy collection get params
func (o *VscanOnAccessPolicyCollectionGetParams) WithHTTPClient(client *http.Client) *VscanOnAccessPolicyCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the vscan on access policy collection get params
func (o *VscanOnAccessPolicyCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEnabledQueryParameter adds the enabled to the vscan on access policy collection get params
func (o *VscanOnAccessPolicyCollectionGetParams) WithEnabledQueryParameter(enabled *bool) *VscanOnAccessPolicyCollectionGetParams {
	o.SetEnabledQueryParameter(enabled)
	return o
}

// SetEnabledQueryParameter adds the enabled to the vscan on access policy collection get params
func (o *VscanOnAccessPolicyCollectionGetParams) SetEnabledQueryParameter(enabled *bool) {
	o.EnabledQueryParameter = enabled
}

// WithFieldsQueryParameter adds the fields to the vscan on access policy collection get params
func (o *VscanOnAccessPolicyCollectionGetParams) WithFieldsQueryParameter(fields []string) *VscanOnAccessPolicyCollectionGetParams {
	o.SetFieldsQueryParameter(fields)
	return o
}

// SetFieldsQueryParameter adds the fields to the vscan on access policy collection get params
func (o *VscanOnAccessPolicyCollectionGetParams) SetFieldsQueryParameter(fields []string) {
	o.FieldsQueryParameter = fields
}

// WithMandatoryQueryParameter adds the mandatory to the vscan on access policy collection get params
func (o *VscanOnAccessPolicyCollectionGetParams) WithMandatoryQueryParameter(mandatory *bool) *VscanOnAccessPolicyCollectionGetParams {
	o.SetMandatoryQueryParameter(mandatory)
	return o
}

// SetMandatoryQueryParameter adds the mandatory to the vscan on access policy collection get params
func (o *VscanOnAccessPolicyCollectionGetParams) SetMandatoryQueryParameter(mandatory *bool) {
	o.MandatoryQueryParameter = mandatory
}

// WithMaxRecordsQueryParameter adds the maxRecords to the vscan on access policy collection get params
func (o *VscanOnAccessPolicyCollectionGetParams) WithMaxRecordsQueryParameter(maxRecords *int64) *VscanOnAccessPolicyCollectionGetParams {
	o.SetMaxRecordsQueryParameter(maxRecords)
	return o
}

// SetMaxRecordsQueryParameter adds the maxRecords to the vscan on access policy collection get params
func (o *VscanOnAccessPolicyCollectionGetParams) SetMaxRecordsQueryParameter(maxRecords *int64) {
	o.MaxRecordsQueryParameter = maxRecords
}

// WithNameQueryParameter adds the name to the vscan on access policy collection get params
func (o *VscanOnAccessPolicyCollectionGetParams) WithNameQueryParameter(name *string) *VscanOnAccessPolicyCollectionGetParams {
	o.SetNameQueryParameter(name)
	return o
}

// SetNameQueryParameter adds the name to the vscan on access policy collection get params
func (o *VscanOnAccessPolicyCollectionGetParams) SetNameQueryParameter(name *string) {
	o.NameQueryParameter = name
}

// WithOrderByQueryParameter adds the orderBy to the vscan on access policy collection get params
func (o *VscanOnAccessPolicyCollectionGetParams) WithOrderByQueryParameter(orderBy []string) *VscanOnAccessPolicyCollectionGetParams {
	o.SetOrderByQueryParameter(orderBy)
	return o
}

// SetOrderByQueryParameter adds the orderBy to the vscan on access policy collection get params
func (o *VscanOnAccessPolicyCollectionGetParams) SetOrderByQueryParameter(orderBy []string) {
	o.OrderByQueryParameter = orderBy
}

// WithReturnRecordsQueryParameter adds the returnRecords to the vscan on access policy collection get params
func (o *VscanOnAccessPolicyCollectionGetParams) WithReturnRecordsQueryParameter(returnRecords *bool) *VscanOnAccessPolicyCollectionGetParams {
	o.SetReturnRecordsQueryParameter(returnRecords)
	return o
}

// SetReturnRecordsQueryParameter adds the returnRecords to the vscan on access policy collection get params
func (o *VscanOnAccessPolicyCollectionGetParams) SetReturnRecordsQueryParameter(returnRecords *bool) {
	o.ReturnRecordsQueryParameter = returnRecords
}

// WithReturnTimeoutQueryParameter adds the returnTimeout to the vscan on access policy collection get params
func (o *VscanOnAccessPolicyCollectionGetParams) WithReturnTimeoutQueryParameter(returnTimeout *int64) *VscanOnAccessPolicyCollectionGetParams {
	o.SetReturnTimeoutQueryParameter(returnTimeout)
	return o
}

// SetReturnTimeoutQueryParameter adds the returnTimeout to the vscan on access policy collection get params
func (o *VscanOnAccessPolicyCollectionGetParams) SetReturnTimeoutQueryParameter(returnTimeout *int64) {
	o.ReturnTimeoutQueryParameter = returnTimeout
}

// WithScopeExcludeExtensionsQueryParameter adds the scopeExcludeExtensions to the vscan on access policy collection get params
func (o *VscanOnAccessPolicyCollectionGetParams) WithScopeExcludeExtensionsQueryParameter(scopeExcludeExtensions *string) *VscanOnAccessPolicyCollectionGetParams {
	o.SetScopeExcludeExtensionsQueryParameter(scopeExcludeExtensions)
	return o
}

// SetScopeExcludeExtensionsQueryParameter adds the scopeExcludeExtensions to the vscan on access policy collection get params
func (o *VscanOnAccessPolicyCollectionGetParams) SetScopeExcludeExtensionsQueryParameter(scopeExcludeExtensions *string) {
	o.ScopeExcludeExtensionsQueryParameter = scopeExcludeExtensions
}

// WithScopeExcludePathsQueryParameter adds the scopeExcludePaths to the vscan on access policy collection get params
func (o *VscanOnAccessPolicyCollectionGetParams) WithScopeExcludePathsQueryParameter(scopeExcludePaths *string) *VscanOnAccessPolicyCollectionGetParams {
	o.SetScopeExcludePathsQueryParameter(scopeExcludePaths)
	return o
}

// SetScopeExcludePathsQueryParameter adds the scopeExcludePaths to the vscan on access policy collection get params
func (o *VscanOnAccessPolicyCollectionGetParams) SetScopeExcludePathsQueryParameter(scopeExcludePaths *string) {
	o.ScopeExcludePathsQueryParameter = scopeExcludePaths
}

// WithScopeIncludeExtensionsQueryParameter adds the scopeIncludeExtensions to the vscan on access policy collection get params
func (o *VscanOnAccessPolicyCollectionGetParams) WithScopeIncludeExtensionsQueryParameter(scopeIncludeExtensions *string) *VscanOnAccessPolicyCollectionGetParams {
	o.SetScopeIncludeExtensionsQueryParameter(scopeIncludeExtensions)
	return o
}

// SetScopeIncludeExtensionsQueryParameter adds the scopeIncludeExtensions to the vscan on access policy collection get params
func (o *VscanOnAccessPolicyCollectionGetParams) SetScopeIncludeExtensionsQueryParameter(scopeIncludeExtensions *string) {
	o.ScopeIncludeExtensionsQueryParameter = scopeIncludeExtensions
}

// WithScopeMaxFileSizeQueryParameter adds the scopeMaxFileSize to the vscan on access policy collection get params
func (o *VscanOnAccessPolicyCollectionGetParams) WithScopeMaxFileSizeQueryParameter(scopeMaxFileSize *int64) *VscanOnAccessPolicyCollectionGetParams {
	o.SetScopeMaxFileSizeQueryParameter(scopeMaxFileSize)
	return o
}

// SetScopeMaxFileSizeQueryParameter adds the scopeMaxFileSize to the vscan on access policy collection get params
func (o *VscanOnAccessPolicyCollectionGetParams) SetScopeMaxFileSizeQueryParameter(scopeMaxFileSize *int64) {
	o.ScopeMaxFileSizeQueryParameter = scopeMaxFileSize
}

// WithScopeOnlyExecuteAccessQueryParameter adds the scopeOnlyExecuteAccess to the vscan on access policy collection get params
func (o *VscanOnAccessPolicyCollectionGetParams) WithScopeOnlyExecuteAccessQueryParameter(scopeOnlyExecuteAccess *bool) *VscanOnAccessPolicyCollectionGetParams {
	o.SetScopeOnlyExecuteAccessQueryParameter(scopeOnlyExecuteAccess)
	return o
}

// SetScopeOnlyExecuteAccessQueryParameter adds the scopeOnlyExecuteAccess to the vscan on access policy collection get params
func (o *VscanOnAccessPolicyCollectionGetParams) SetScopeOnlyExecuteAccessQueryParameter(scopeOnlyExecuteAccess *bool) {
	o.ScopeOnlyExecuteAccessQueryParameter = scopeOnlyExecuteAccess
}

// WithScopeScanReadonlyVolumesQueryParameter adds the scopeScanReadonlyVolumes to the vscan on access policy collection get params
func (o *VscanOnAccessPolicyCollectionGetParams) WithScopeScanReadonlyVolumesQueryParameter(scopeScanReadonlyVolumes *bool) *VscanOnAccessPolicyCollectionGetParams {
	o.SetScopeScanReadonlyVolumesQueryParameter(scopeScanReadonlyVolumes)
	return o
}

// SetScopeScanReadonlyVolumesQueryParameter adds the scopeScanReadonlyVolumes to the vscan on access policy collection get params
func (o *VscanOnAccessPolicyCollectionGetParams) SetScopeScanReadonlyVolumesQueryParameter(scopeScanReadonlyVolumes *bool) {
	o.ScopeScanReadonlyVolumesQueryParameter = scopeScanReadonlyVolumes
}

// WithScopeScanWithoutExtensionQueryParameter adds the scopeScanWithoutExtension to the vscan on access policy collection get params
func (o *VscanOnAccessPolicyCollectionGetParams) WithScopeScanWithoutExtensionQueryParameter(scopeScanWithoutExtension *bool) *VscanOnAccessPolicyCollectionGetParams {
	o.SetScopeScanWithoutExtensionQueryParameter(scopeScanWithoutExtension)
	return o
}

// SetScopeScanWithoutExtensionQueryParameter adds the scopeScanWithoutExtension to the vscan on access policy collection get params
func (o *VscanOnAccessPolicyCollectionGetParams) SetScopeScanWithoutExtensionQueryParameter(scopeScanWithoutExtension *bool) {
	o.ScopeScanWithoutExtensionQueryParameter = scopeScanWithoutExtension
}

// WithSVMUUIDPathParameter adds the svmUUID to the vscan on access policy collection get params
func (o *VscanOnAccessPolicyCollectionGetParams) WithSVMUUIDPathParameter(svmUUID string) *VscanOnAccessPolicyCollectionGetParams {
	o.SetSVMUUIDPathParameter(svmUUID)
	return o
}

// SetSVMUUIDPathParameter adds the svmUuid to the vscan on access policy collection get params
func (o *VscanOnAccessPolicyCollectionGetParams) SetSVMUUIDPathParameter(svmUUID string) {
	o.SVMUUIDPathParameter = svmUUID
}

// WriteToRequest writes these params to a swagger request
func (o *VscanOnAccessPolicyCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EnabledQueryParameter != nil {

		// query param enabled
		var qrEnabled bool

		if o.EnabledQueryParameter != nil {
			qrEnabled = *o.EnabledQueryParameter
		}
		qEnabled := swag.FormatBool(qrEnabled)
		if qEnabled != "" {

			if err := r.SetQueryParam("enabled", qEnabled); err != nil {
				return err
			}
		}
	}

	if o.FieldsQueryParameter != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.MandatoryQueryParameter != nil {

		// query param mandatory
		var qrMandatory bool

		if o.MandatoryQueryParameter != nil {
			qrMandatory = *o.MandatoryQueryParameter
		}
		qMandatory := swag.FormatBool(qrMandatory)
		if qMandatory != "" {

			if err := r.SetQueryParam("mandatory", qMandatory); err != nil {
				return err
			}
		}
	}

	if o.MaxRecordsQueryParameter != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecordsQueryParameter != nil {
			qrMaxRecords = *o.MaxRecordsQueryParameter
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.NameQueryParameter != nil {

		// query param name
		var qrName string

		if o.NameQueryParameter != nil {
			qrName = *o.NameQueryParameter
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.OrderByQueryParameter != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.ReturnRecordsQueryParameter != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecordsQueryParameter != nil {
			qrReturnRecords = *o.ReturnRecordsQueryParameter
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeoutQueryParameter != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeoutQueryParameter != nil {
			qrReturnTimeout = *o.ReturnTimeoutQueryParameter
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.ScopeExcludeExtensionsQueryParameter != nil {

		// query param scope.exclude_extensions
		var qrScopeExcludeExtensions string

		if o.ScopeExcludeExtensionsQueryParameter != nil {
			qrScopeExcludeExtensions = *o.ScopeExcludeExtensionsQueryParameter
		}
		qScopeExcludeExtensions := qrScopeExcludeExtensions
		if qScopeExcludeExtensions != "" {

			if err := r.SetQueryParam("scope.exclude_extensions", qScopeExcludeExtensions); err != nil {
				return err
			}
		}
	}

	if o.ScopeExcludePathsQueryParameter != nil {

		// query param scope.exclude_paths
		var qrScopeExcludePaths string

		if o.ScopeExcludePathsQueryParameter != nil {
			qrScopeExcludePaths = *o.ScopeExcludePathsQueryParameter
		}
		qScopeExcludePaths := qrScopeExcludePaths
		if qScopeExcludePaths != "" {

			if err := r.SetQueryParam("scope.exclude_paths", qScopeExcludePaths); err != nil {
				return err
			}
		}
	}

	if o.ScopeIncludeExtensionsQueryParameter != nil {

		// query param scope.include_extensions
		var qrScopeIncludeExtensions string

		if o.ScopeIncludeExtensionsQueryParameter != nil {
			qrScopeIncludeExtensions = *o.ScopeIncludeExtensionsQueryParameter
		}
		qScopeIncludeExtensions := qrScopeIncludeExtensions
		if qScopeIncludeExtensions != "" {

			if err := r.SetQueryParam("scope.include_extensions", qScopeIncludeExtensions); err != nil {
				return err
			}
		}
	}

	if o.ScopeMaxFileSizeQueryParameter != nil {

		// query param scope.max_file_size
		var qrScopeMaxFileSize int64

		if o.ScopeMaxFileSizeQueryParameter != nil {
			qrScopeMaxFileSize = *o.ScopeMaxFileSizeQueryParameter
		}
		qScopeMaxFileSize := swag.FormatInt64(qrScopeMaxFileSize)
		if qScopeMaxFileSize != "" {

			if err := r.SetQueryParam("scope.max_file_size", qScopeMaxFileSize); err != nil {
				return err
			}
		}
	}

	if o.ScopeOnlyExecuteAccessQueryParameter != nil {

		// query param scope.only_execute_access
		var qrScopeOnlyExecuteAccess bool

		if o.ScopeOnlyExecuteAccessQueryParameter != nil {
			qrScopeOnlyExecuteAccess = *o.ScopeOnlyExecuteAccessQueryParameter
		}
		qScopeOnlyExecuteAccess := swag.FormatBool(qrScopeOnlyExecuteAccess)
		if qScopeOnlyExecuteAccess != "" {

			if err := r.SetQueryParam("scope.only_execute_access", qScopeOnlyExecuteAccess); err != nil {
				return err
			}
		}
	}

	if o.ScopeScanReadonlyVolumesQueryParameter != nil {

		// query param scope.scan_readonly_volumes
		var qrScopeScanReadonlyVolumes bool

		if o.ScopeScanReadonlyVolumesQueryParameter != nil {
			qrScopeScanReadonlyVolumes = *o.ScopeScanReadonlyVolumesQueryParameter
		}
		qScopeScanReadonlyVolumes := swag.FormatBool(qrScopeScanReadonlyVolumes)
		if qScopeScanReadonlyVolumes != "" {

			if err := r.SetQueryParam("scope.scan_readonly_volumes", qScopeScanReadonlyVolumes); err != nil {
				return err
			}
		}
	}

	if o.ScopeScanWithoutExtensionQueryParameter != nil {

		// query param scope.scan_without_extension
		var qrScopeScanWithoutExtension bool

		if o.ScopeScanWithoutExtensionQueryParameter != nil {
			qrScopeScanWithoutExtension = *o.ScopeScanWithoutExtensionQueryParameter
		}
		qScopeScanWithoutExtension := swag.FormatBool(qrScopeScanWithoutExtension)
		if qScopeScanWithoutExtension != "" {

			if err := r.SetQueryParam("scope.scan_without_extension", qScopeScanWithoutExtension); err != nil {
				return err
			}
		}
	}

	// path param svm.uuid
	if err := r.SetPathParam("svm.uuid", o.SVMUUIDPathParameter); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamVscanOnAccessPolicyCollectionGet binds the parameter fields
func (o *VscanOnAccessPolicyCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.FieldsQueryParameter

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamVscanOnAccessPolicyCollectionGet binds the parameter order_by
func (o *VscanOnAccessPolicyCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderByQueryParameter

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
