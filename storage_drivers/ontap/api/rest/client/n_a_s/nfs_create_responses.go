// Code generated by go-swagger; DO NOT EDIT.

package n_a_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/netapp/trident/storage_drivers/ontap/api/rest/models"
)

// NfsCreateReader is a Reader for the NfsCreate structure.
type NfsCreateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *NfsCreateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewNfsCreateCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewNfsCreateDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewNfsCreateCreated creates a NfsCreateCreated with default headers values
func NewNfsCreateCreated() *NfsCreateCreated {
	return &NfsCreateCreated{}
}

/* NfsCreateCreated describes a response with status code 201, with default header values.

Created
*/
type NfsCreateCreated struct {
	Payload *models.NfsServiceResponse
}

func (o *NfsCreateCreated) Error() string {
	return fmt.Sprintf("[POST /protocols/nfs/services][%d] nfsCreateCreated  %+v", 201, o.Payload)
}
func (o *NfsCreateCreated) GetPayload() *models.NfsServiceResponse {
	return o.Payload
}

func (o *NfsCreateCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NfsServiceResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNfsCreateDefault creates a NfsCreateDefault with default headers values
func NewNfsCreateDefault(code int) *NfsCreateDefault {
	return &NfsCreateDefault{
		_statusCode: code,
	}
}

/* NfsCreateDefault describes a response with status code -1, with default header values.

 ONTAP Error Response Codes
| Error Code | Description |
| ---------- | ----------- |
| 3276916    | Vserver is not running |
| 3276994    | Kerberos must be disabled on all LIFs on Vserver before adding or removing AES encryption. Disable Kerberos on the LIF and try again |
| 3277038    | Cannot enable \\\"showmount\\\" feature because it requires an effective cluster version of Data ONTAP 8.3.0 or later |
| 3277049    | Cannot enable \\\"showmount\\\" feature on ID-Discard Vserver. Ensure that the Vserver is initialized and retry the command |
| 3277052    | NFSv4.x access to transitioned volumes in this Vserver could trigger conversion of non-Unicode directories to Unicode, which might impact data-serving performance. Before enabling NFSv4.x for this Vserver, refer to the Data and Configuration Transition Guide |
| 3277069    | Cannot disable TCP because the SnapDiff RPC server is in the \\\"on\\\" state |
| 3277089    | Attempting to create an NFS server using 64-bits for NFSv3 FSIDs and File IDs on Vserver. Older client software might not work with 64-bit identifiers|
| 3277099    | Domain name contains invalid characters or it is too short. Allowed characters are: alphabetical characters (A-Za-z), numeric characters (0-9), minus sign (-), and the period (.). The first character must be alphabetical or numeric, last character must not be a minus sign or a period. Minimum supported length: 2 characters, maximum of 256 characters |

*/
type NfsCreateDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the nfs create default response
func (o *NfsCreateDefault) Code() int {
	return o._statusCode
}

func (o *NfsCreateDefault) Error() string {
	return fmt.Sprintf("[POST /protocols/nfs/services][%d] nfs_create default  %+v", o._statusCode, o.Payload)
}
func (o *NfsCreateDefault) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *NfsCreateDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
