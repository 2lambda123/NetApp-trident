// Code generated by go-swagger; DO NOT EDIT.

package n_a_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCifsCollectionPerformanceMetricsGetParams creates a new CifsCollectionPerformanceMetricsGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCifsCollectionPerformanceMetricsGetParams() *CifsCollectionPerformanceMetricsGetParams {
	return &CifsCollectionPerformanceMetricsGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCifsCollectionPerformanceMetricsGetParamsWithTimeout creates a new CifsCollectionPerformanceMetricsGetParams object
// with the ability to set a timeout on a request.
func NewCifsCollectionPerformanceMetricsGetParamsWithTimeout(timeout time.Duration) *CifsCollectionPerformanceMetricsGetParams {
	return &CifsCollectionPerformanceMetricsGetParams{
		timeout: timeout,
	}
}

// NewCifsCollectionPerformanceMetricsGetParamsWithContext creates a new CifsCollectionPerformanceMetricsGetParams object
// with the ability to set a context for a request.
func NewCifsCollectionPerformanceMetricsGetParamsWithContext(ctx context.Context) *CifsCollectionPerformanceMetricsGetParams {
	return &CifsCollectionPerformanceMetricsGetParams{
		Context: ctx,
	}
}

// NewCifsCollectionPerformanceMetricsGetParamsWithHTTPClient creates a new CifsCollectionPerformanceMetricsGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewCifsCollectionPerformanceMetricsGetParamsWithHTTPClient(client *http.Client) *CifsCollectionPerformanceMetricsGetParams {
	return &CifsCollectionPerformanceMetricsGetParams{
		HTTPClient: client,
	}
}

/* CifsCollectionPerformanceMetricsGetParams contains all the parameters to send to the API endpoint
   for the cifs collection performance metrics get operation.

   Typically these are written to a http.Request.
*/
type CifsCollectionPerformanceMetricsGetParams struct {

	/* Duration.

	   Filter by duration
	*/
	DurationQueryParameter *string

	/* Fields.

	   Specify the fields to return.
	*/
	Fields []string

	/* Interval.

	     The time range for the data. Examples can be 1h, 1d, 1m, 1w, 1y.
	The period for each time range is as follows:
	* 1h: Metrics over the most recent hour sampled over 15 seconds.
	* 1d: Metrics over the most recent day sampled over 5 minutes.
	* 1w: Metrics over the most recent week sampled over 30 minutes.
	* 1m: Metrics over the most recent month sampled over 2 hours.
	* 1y: Metrics over the most recent year sampled over a day.


	     Default: "1h"
	*/
	IntervalQueryParameter *string

	/* IopsOther.

	   Filter by iops.other
	*/
	IopsOtherQueryParameter *int64

	/* IopsRead.

	   Filter by iops.read
	*/
	IopsReadQueryParameter *int64

	/* IopsTotal.

	   Filter by iops.total
	*/
	IopsTotalQueryParameter *int64

	/* IopsWrite.

	   Filter by iops.write
	*/
	IopsWriteQueryParameter *int64

	/* LatencyOther.

	   Filter by latency.other
	*/
	LatencyOtherQueryParameter *int64

	/* LatencyRead.

	   Filter by latency.read
	*/
	LatencyReadQueryParameter *int64

	/* LatencyTotal.

	   Filter by latency.total
	*/
	LatencyTotalQueryParameter *int64

	/* LatencyWrite.

	   Filter by latency.write
	*/
	LatencyWriteQueryParameter *int64

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecords *int64

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderBy []string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecords *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeout *int64

	/* Status.

	   Filter by status
	*/
	StatusQueryParameter *string

	/* SvmUUID.

	   Unique identifier of the SVM.
	*/
	SVMUUIDPathParameter string

	/* ThroughputOther.

	   Filter by throughput.other
	*/
	ThroughputOtherQueryParameter *int64

	/* ThroughputRead.

	   Filter by throughput.read
	*/
	ThroughputReadQueryParameter *int64

	/* ThroughputTotal.

	   Filter by throughput.total
	*/
	ThroughputTotalQueryParameter *int64

	/* ThroughputWrite.

	   Filter by throughput.write
	*/
	ThroughputWriteQueryParameter *int64

	/* Timestamp.

	   Filter by timestamp
	*/
	TimestampQueryParameter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the cifs collection performance metrics get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CifsCollectionPerformanceMetricsGetParams) WithDefaults() *CifsCollectionPerformanceMetricsGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the cifs collection performance metrics get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CifsCollectionPerformanceMetricsGetParams) SetDefaults() {
	var (
		intervalQueryParameterDefault = string("1h")

		returnRecordsDefault = bool(true)

		returnTimeoutDefault = int64(15)
	)

	val := CifsCollectionPerformanceMetricsGetParams{
		IntervalQueryParameter: &intervalQueryParameterDefault,
		ReturnRecords:          &returnRecordsDefault,
		ReturnTimeout:          &returnTimeoutDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the cifs collection performance metrics get params
func (o *CifsCollectionPerformanceMetricsGetParams) WithTimeout(timeout time.Duration) *CifsCollectionPerformanceMetricsGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the cifs collection performance metrics get params
func (o *CifsCollectionPerformanceMetricsGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the cifs collection performance metrics get params
func (o *CifsCollectionPerformanceMetricsGetParams) WithContext(ctx context.Context) *CifsCollectionPerformanceMetricsGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the cifs collection performance metrics get params
func (o *CifsCollectionPerformanceMetricsGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the cifs collection performance metrics get params
func (o *CifsCollectionPerformanceMetricsGetParams) WithHTTPClient(client *http.Client) *CifsCollectionPerformanceMetricsGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the cifs collection performance metrics get params
func (o *CifsCollectionPerformanceMetricsGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDurationQueryParameter adds the duration to the cifs collection performance metrics get params
func (o *CifsCollectionPerformanceMetricsGetParams) WithDurationQueryParameter(duration *string) *CifsCollectionPerformanceMetricsGetParams {
	o.SetDurationQueryParameter(duration)
	return o
}

// SetDurationQueryParameter adds the duration to the cifs collection performance metrics get params
func (o *CifsCollectionPerformanceMetricsGetParams) SetDurationQueryParameter(duration *string) {
	o.DurationQueryParameter = duration
}

// WithFields adds the fields to the cifs collection performance metrics get params
func (o *CifsCollectionPerformanceMetricsGetParams) WithFields(fields []string) *CifsCollectionPerformanceMetricsGetParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the cifs collection performance metrics get params
func (o *CifsCollectionPerformanceMetricsGetParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithIntervalQueryParameter adds the interval to the cifs collection performance metrics get params
func (o *CifsCollectionPerformanceMetricsGetParams) WithIntervalQueryParameter(interval *string) *CifsCollectionPerformanceMetricsGetParams {
	o.SetIntervalQueryParameter(interval)
	return o
}

// SetIntervalQueryParameter adds the interval to the cifs collection performance metrics get params
func (o *CifsCollectionPerformanceMetricsGetParams) SetIntervalQueryParameter(interval *string) {
	o.IntervalQueryParameter = interval
}

// WithIopsOtherQueryParameter adds the iopsOther to the cifs collection performance metrics get params
func (o *CifsCollectionPerformanceMetricsGetParams) WithIopsOtherQueryParameter(iopsOther *int64) *CifsCollectionPerformanceMetricsGetParams {
	o.SetIopsOtherQueryParameter(iopsOther)
	return o
}

// SetIopsOtherQueryParameter adds the iopsOther to the cifs collection performance metrics get params
func (o *CifsCollectionPerformanceMetricsGetParams) SetIopsOtherQueryParameter(iopsOther *int64) {
	o.IopsOtherQueryParameter = iopsOther
}

// WithIopsReadQueryParameter adds the iopsRead to the cifs collection performance metrics get params
func (o *CifsCollectionPerformanceMetricsGetParams) WithIopsReadQueryParameter(iopsRead *int64) *CifsCollectionPerformanceMetricsGetParams {
	o.SetIopsReadQueryParameter(iopsRead)
	return o
}

// SetIopsReadQueryParameter adds the iopsRead to the cifs collection performance metrics get params
func (o *CifsCollectionPerformanceMetricsGetParams) SetIopsReadQueryParameter(iopsRead *int64) {
	o.IopsReadQueryParameter = iopsRead
}

// WithIopsTotalQueryParameter adds the iopsTotal to the cifs collection performance metrics get params
func (o *CifsCollectionPerformanceMetricsGetParams) WithIopsTotalQueryParameter(iopsTotal *int64) *CifsCollectionPerformanceMetricsGetParams {
	o.SetIopsTotalQueryParameter(iopsTotal)
	return o
}

// SetIopsTotalQueryParameter adds the iopsTotal to the cifs collection performance metrics get params
func (o *CifsCollectionPerformanceMetricsGetParams) SetIopsTotalQueryParameter(iopsTotal *int64) {
	o.IopsTotalQueryParameter = iopsTotal
}

// WithIopsWriteQueryParameter adds the iopsWrite to the cifs collection performance metrics get params
func (o *CifsCollectionPerformanceMetricsGetParams) WithIopsWriteQueryParameter(iopsWrite *int64) *CifsCollectionPerformanceMetricsGetParams {
	o.SetIopsWriteQueryParameter(iopsWrite)
	return o
}

// SetIopsWriteQueryParameter adds the iopsWrite to the cifs collection performance metrics get params
func (o *CifsCollectionPerformanceMetricsGetParams) SetIopsWriteQueryParameter(iopsWrite *int64) {
	o.IopsWriteQueryParameter = iopsWrite
}

// WithLatencyOtherQueryParameter adds the latencyOther to the cifs collection performance metrics get params
func (o *CifsCollectionPerformanceMetricsGetParams) WithLatencyOtherQueryParameter(latencyOther *int64) *CifsCollectionPerformanceMetricsGetParams {
	o.SetLatencyOtherQueryParameter(latencyOther)
	return o
}

// SetLatencyOtherQueryParameter adds the latencyOther to the cifs collection performance metrics get params
func (o *CifsCollectionPerformanceMetricsGetParams) SetLatencyOtherQueryParameter(latencyOther *int64) {
	o.LatencyOtherQueryParameter = latencyOther
}

// WithLatencyReadQueryParameter adds the latencyRead to the cifs collection performance metrics get params
func (o *CifsCollectionPerformanceMetricsGetParams) WithLatencyReadQueryParameter(latencyRead *int64) *CifsCollectionPerformanceMetricsGetParams {
	o.SetLatencyReadQueryParameter(latencyRead)
	return o
}

// SetLatencyReadQueryParameter adds the latencyRead to the cifs collection performance metrics get params
func (o *CifsCollectionPerformanceMetricsGetParams) SetLatencyReadQueryParameter(latencyRead *int64) {
	o.LatencyReadQueryParameter = latencyRead
}

// WithLatencyTotalQueryParameter adds the latencyTotal to the cifs collection performance metrics get params
func (o *CifsCollectionPerformanceMetricsGetParams) WithLatencyTotalQueryParameter(latencyTotal *int64) *CifsCollectionPerformanceMetricsGetParams {
	o.SetLatencyTotalQueryParameter(latencyTotal)
	return o
}

// SetLatencyTotalQueryParameter adds the latencyTotal to the cifs collection performance metrics get params
func (o *CifsCollectionPerformanceMetricsGetParams) SetLatencyTotalQueryParameter(latencyTotal *int64) {
	o.LatencyTotalQueryParameter = latencyTotal
}

// WithLatencyWriteQueryParameter adds the latencyWrite to the cifs collection performance metrics get params
func (o *CifsCollectionPerformanceMetricsGetParams) WithLatencyWriteQueryParameter(latencyWrite *int64) *CifsCollectionPerformanceMetricsGetParams {
	o.SetLatencyWriteQueryParameter(latencyWrite)
	return o
}

// SetLatencyWriteQueryParameter adds the latencyWrite to the cifs collection performance metrics get params
func (o *CifsCollectionPerformanceMetricsGetParams) SetLatencyWriteQueryParameter(latencyWrite *int64) {
	o.LatencyWriteQueryParameter = latencyWrite
}

// WithMaxRecords adds the maxRecords to the cifs collection performance metrics get params
func (o *CifsCollectionPerformanceMetricsGetParams) WithMaxRecords(maxRecords *int64) *CifsCollectionPerformanceMetricsGetParams {
	o.SetMaxRecords(maxRecords)
	return o
}

// SetMaxRecords adds the maxRecords to the cifs collection performance metrics get params
func (o *CifsCollectionPerformanceMetricsGetParams) SetMaxRecords(maxRecords *int64) {
	o.MaxRecords = maxRecords
}

// WithOrderBy adds the orderBy to the cifs collection performance metrics get params
func (o *CifsCollectionPerformanceMetricsGetParams) WithOrderBy(orderBy []string) *CifsCollectionPerformanceMetricsGetParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the cifs collection performance metrics get params
func (o *CifsCollectionPerformanceMetricsGetParams) SetOrderBy(orderBy []string) {
	o.OrderBy = orderBy
}

// WithReturnRecords adds the returnRecords to the cifs collection performance metrics get params
func (o *CifsCollectionPerformanceMetricsGetParams) WithReturnRecords(returnRecords *bool) *CifsCollectionPerformanceMetricsGetParams {
	o.SetReturnRecords(returnRecords)
	return o
}

// SetReturnRecords adds the returnRecords to the cifs collection performance metrics get params
func (o *CifsCollectionPerformanceMetricsGetParams) SetReturnRecords(returnRecords *bool) {
	o.ReturnRecords = returnRecords
}

// WithReturnTimeout adds the returnTimeout to the cifs collection performance metrics get params
func (o *CifsCollectionPerformanceMetricsGetParams) WithReturnTimeout(returnTimeout *int64) *CifsCollectionPerformanceMetricsGetParams {
	o.SetReturnTimeout(returnTimeout)
	return o
}

// SetReturnTimeout adds the returnTimeout to the cifs collection performance metrics get params
func (o *CifsCollectionPerformanceMetricsGetParams) SetReturnTimeout(returnTimeout *int64) {
	o.ReturnTimeout = returnTimeout
}

// WithStatusQueryParameter adds the status to the cifs collection performance metrics get params
func (o *CifsCollectionPerformanceMetricsGetParams) WithStatusQueryParameter(status *string) *CifsCollectionPerformanceMetricsGetParams {
	o.SetStatusQueryParameter(status)
	return o
}

// SetStatusQueryParameter adds the status to the cifs collection performance metrics get params
func (o *CifsCollectionPerformanceMetricsGetParams) SetStatusQueryParameter(status *string) {
	o.StatusQueryParameter = status
}

// WithSVMUUIDPathParameter adds the svmUUID to the cifs collection performance metrics get params
func (o *CifsCollectionPerformanceMetricsGetParams) WithSVMUUIDPathParameter(svmUUID string) *CifsCollectionPerformanceMetricsGetParams {
	o.SetSVMUUIDPathParameter(svmUUID)
	return o
}

// SetSVMUUIDPathParameter adds the svmUuid to the cifs collection performance metrics get params
func (o *CifsCollectionPerformanceMetricsGetParams) SetSVMUUIDPathParameter(svmUUID string) {
	o.SVMUUIDPathParameter = svmUUID
}

// WithThroughputOtherQueryParameter adds the throughputOther to the cifs collection performance metrics get params
func (o *CifsCollectionPerformanceMetricsGetParams) WithThroughputOtherQueryParameter(throughputOther *int64) *CifsCollectionPerformanceMetricsGetParams {
	o.SetThroughputOtherQueryParameter(throughputOther)
	return o
}

// SetThroughputOtherQueryParameter adds the throughputOther to the cifs collection performance metrics get params
func (o *CifsCollectionPerformanceMetricsGetParams) SetThroughputOtherQueryParameter(throughputOther *int64) {
	o.ThroughputOtherQueryParameter = throughputOther
}

// WithThroughputReadQueryParameter adds the throughputRead to the cifs collection performance metrics get params
func (o *CifsCollectionPerformanceMetricsGetParams) WithThroughputReadQueryParameter(throughputRead *int64) *CifsCollectionPerformanceMetricsGetParams {
	o.SetThroughputReadQueryParameter(throughputRead)
	return o
}

// SetThroughputReadQueryParameter adds the throughputRead to the cifs collection performance metrics get params
func (o *CifsCollectionPerformanceMetricsGetParams) SetThroughputReadQueryParameter(throughputRead *int64) {
	o.ThroughputReadQueryParameter = throughputRead
}

// WithThroughputTotalQueryParameter adds the throughputTotal to the cifs collection performance metrics get params
func (o *CifsCollectionPerformanceMetricsGetParams) WithThroughputTotalQueryParameter(throughputTotal *int64) *CifsCollectionPerformanceMetricsGetParams {
	o.SetThroughputTotalQueryParameter(throughputTotal)
	return o
}

// SetThroughputTotalQueryParameter adds the throughputTotal to the cifs collection performance metrics get params
func (o *CifsCollectionPerformanceMetricsGetParams) SetThroughputTotalQueryParameter(throughputTotal *int64) {
	o.ThroughputTotalQueryParameter = throughputTotal
}

// WithThroughputWriteQueryParameter adds the throughputWrite to the cifs collection performance metrics get params
func (o *CifsCollectionPerformanceMetricsGetParams) WithThroughputWriteQueryParameter(throughputWrite *int64) *CifsCollectionPerformanceMetricsGetParams {
	o.SetThroughputWriteQueryParameter(throughputWrite)
	return o
}

// SetThroughputWriteQueryParameter adds the throughputWrite to the cifs collection performance metrics get params
func (o *CifsCollectionPerformanceMetricsGetParams) SetThroughputWriteQueryParameter(throughputWrite *int64) {
	o.ThroughputWriteQueryParameter = throughputWrite
}

// WithTimestampQueryParameter adds the timestamp to the cifs collection performance metrics get params
func (o *CifsCollectionPerformanceMetricsGetParams) WithTimestampQueryParameter(timestamp *string) *CifsCollectionPerformanceMetricsGetParams {
	o.SetTimestampQueryParameter(timestamp)
	return o
}

// SetTimestampQueryParameter adds the timestamp to the cifs collection performance metrics get params
func (o *CifsCollectionPerformanceMetricsGetParams) SetTimestampQueryParameter(timestamp *string) {
	o.TimestampQueryParameter = timestamp
}

// WriteToRequest writes these params to a swagger request
func (o *CifsCollectionPerformanceMetricsGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DurationQueryParameter != nil {

		// query param duration
		var qrDuration string

		if o.DurationQueryParameter != nil {
			qrDuration = *o.DurationQueryParameter
		}
		qDuration := qrDuration
		if qDuration != "" {

			if err := r.SetQueryParam("duration", qDuration); err != nil {
				return err
			}
		}
	}

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.IntervalQueryParameter != nil {

		// query param interval
		var qrInterval string

		if o.IntervalQueryParameter != nil {
			qrInterval = *o.IntervalQueryParameter
		}
		qInterval := qrInterval
		if qInterval != "" {

			if err := r.SetQueryParam("interval", qInterval); err != nil {
				return err
			}
		}
	}

	if o.IopsOtherQueryParameter != nil {

		// query param iops.other
		var qrIopsOther int64

		if o.IopsOtherQueryParameter != nil {
			qrIopsOther = *o.IopsOtherQueryParameter
		}
		qIopsOther := swag.FormatInt64(qrIopsOther)
		if qIopsOther != "" {

			if err := r.SetQueryParam("iops.other", qIopsOther); err != nil {
				return err
			}
		}
	}

	if o.IopsReadQueryParameter != nil {

		// query param iops.read
		var qrIopsRead int64

		if o.IopsReadQueryParameter != nil {
			qrIopsRead = *o.IopsReadQueryParameter
		}
		qIopsRead := swag.FormatInt64(qrIopsRead)
		if qIopsRead != "" {

			if err := r.SetQueryParam("iops.read", qIopsRead); err != nil {
				return err
			}
		}
	}

	if o.IopsTotalQueryParameter != nil {

		// query param iops.total
		var qrIopsTotal int64

		if o.IopsTotalQueryParameter != nil {
			qrIopsTotal = *o.IopsTotalQueryParameter
		}
		qIopsTotal := swag.FormatInt64(qrIopsTotal)
		if qIopsTotal != "" {

			if err := r.SetQueryParam("iops.total", qIopsTotal); err != nil {
				return err
			}
		}
	}

	if o.IopsWriteQueryParameter != nil {

		// query param iops.write
		var qrIopsWrite int64

		if o.IopsWriteQueryParameter != nil {
			qrIopsWrite = *o.IopsWriteQueryParameter
		}
		qIopsWrite := swag.FormatInt64(qrIopsWrite)
		if qIopsWrite != "" {

			if err := r.SetQueryParam("iops.write", qIopsWrite); err != nil {
				return err
			}
		}
	}

	if o.LatencyOtherQueryParameter != nil {

		// query param latency.other
		var qrLatencyOther int64

		if o.LatencyOtherQueryParameter != nil {
			qrLatencyOther = *o.LatencyOtherQueryParameter
		}
		qLatencyOther := swag.FormatInt64(qrLatencyOther)
		if qLatencyOther != "" {

			if err := r.SetQueryParam("latency.other", qLatencyOther); err != nil {
				return err
			}
		}
	}

	if o.LatencyReadQueryParameter != nil {

		// query param latency.read
		var qrLatencyRead int64

		if o.LatencyReadQueryParameter != nil {
			qrLatencyRead = *o.LatencyReadQueryParameter
		}
		qLatencyRead := swag.FormatInt64(qrLatencyRead)
		if qLatencyRead != "" {

			if err := r.SetQueryParam("latency.read", qLatencyRead); err != nil {
				return err
			}
		}
	}

	if o.LatencyTotalQueryParameter != nil {

		// query param latency.total
		var qrLatencyTotal int64

		if o.LatencyTotalQueryParameter != nil {
			qrLatencyTotal = *o.LatencyTotalQueryParameter
		}
		qLatencyTotal := swag.FormatInt64(qrLatencyTotal)
		if qLatencyTotal != "" {

			if err := r.SetQueryParam("latency.total", qLatencyTotal); err != nil {
				return err
			}
		}
	}

	if o.LatencyWriteQueryParameter != nil {

		// query param latency.write
		var qrLatencyWrite int64

		if o.LatencyWriteQueryParameter != nil {
			qrLatencyWrite = *o.LatencyWriteQueryParameter
		}
		qLatencyWrite := swag.FormatInt64(qrLatencyWrite)
		if qLatencyWrite != "" {

			if err := r.SetQueryParam("latency.write", qLatencyWrite); err != nil {
				return err
			}
		}
	}

	if o.MaxRecords != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecords != nil {
			qrMaxRecords = *o.MaxRecords
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.OrderBy != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.ReturnRecords != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecords != nil {
			qrReturnRecords = *o.ReturnRecords
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeout != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeout != nil {
			qrReturnTimeout = *o.ReturnTimeout
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.StatusQueryParameter != nil {

		// query param status
		var qrStatus string

		if o.StatusQueryParameter != nil {
			qrStatus = *o.StatusQueryParameter
		}
		qStatus := qrStatus
		if qStatus != "" {

			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}
	}

	// path param svm.uuid
	if err := r.SetPathParam("svm.uuid", o.SVMUUIDPathParameter); err != nil {
		return err
	}

	if o.ThroughputOtherQueryParameter != nil {

		// query param throughput.other
		var qrThroughputOther int64

		if o.ThroughputOtherQueryParameter != nil {
			qrThroughputOther = *o.ThroughputOtherQueryParameter
		}
		qThroughputOther := swag.FormatInt64(qrThroughputOther)
		if qThroughputOther != "" {

			if err := r.SetQueryParam("throughput.other", qThroughputOther); err != nil {
				return err
			}
		}
	}

	if o.ThroughputReadQueryParameter != nil {

		// query param throughput.read
		var qrThroughputRead int64

		if o.ThroughputReadQueryParameter != nil {
			qrThroughputRead = *o.ThroughputReadQueryParameter
		}
		qThroughputRead := swag.FormatInt64(qrThroughputRead)
		if qThroughputRead != "" {

			if err := r.SetQueryParam("throughput.read", qThroughputRead); err != nil {
				return err
			}
		}
	}

	if o.ThroughputTotalQueryParameter != nil {

		// query param throughput.total
		var qrThroughputTotal int64

		if o.ThroughputTotalQueryParameter != nil {
			qrThroughputTotal = *o.ThroughputTotalQueryParameter
		}
		qThroughputTotal := swag.FormatInt64(qrThroughputTotal)
		if qThroughputTotal != "" {

			if err := r.SetQueryParam("throughput.total", qThroughputTotal); err != nil {
				return err
			}
		}
	}

	if o.ThroughputWriteQueryParameter != nil {

		// query param throughput.write
		var qrThroughputWrite int64

		if o.ThroughputWriteQueryParameter != nil {
			qrThroughputWrite = *o.ThroughputWriteQueryParameter
		}
		qThroughputWrite := swag.FormatInt64(qrThroughputWrite)
		if qThroughputWrite != "" {

			if err := r.SetQueryParam("throughput.write", qThroughputWrite); err != nil {
				return err
			}
		}
	}

	if o.TimestampQueryParameter != nil {

		// query param timestamp
		var qrTimestamp string

		if o.TimestampQueryParameter != nil {
			qrTimestamp = *o.TimestampQueryParameter
		}
		qTimestamp := qrTimestamp
		if qTimestamp != "" {

			if err := r.SetQueryParam("timestamp", qTimestamp); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamCifsCollectionPerformanceMetricsGet binds the parameter fields
func (o *CifsCollectionPerformanceMetricsGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamCifsCollectionPerformanceMetricsGet binds the parameter order_by
func (o *CifsCollectionPerformanceMetricsGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderBy

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
