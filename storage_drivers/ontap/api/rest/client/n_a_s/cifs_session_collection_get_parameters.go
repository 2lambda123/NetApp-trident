// Code generated by go-swagger; DO NOT EDIT.

package n_a_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCifsSessionCollectionGetParams creates a new CifsSessionCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCifsSessionCollectionGetParams() *CifsSessionCollectionGetParams {
	return &CifsSessionCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCifsSessionCollectionGetParamsWithTimeout creates a new CifsSessionCollectionGetParams object
// with the ability to set a timeout on a request.
func NewCifsSessionCollectionGetParamsWithTimeout(timeout time.Duration) *CifsSessionCollectionGetParams {
	return &CifsSessionCollectionGetParams{
		timeout: timeout,
	}
}

// NewCifsSessionCollectionGetParamsWithContext creates a new CifsSessionCollectionGetParams object
// with the ability to set a context for a request.
func NewCifsSessionCollectionGetParamsWithContext(ctx context.Context) *CifsSessionCollectionGetParams {
	return &CifsSessionCollectionGetParams{
		Context: ctx,
	}
}

// NewCifsSessionCollectionGetParamsWithHTTPClient creates a new CifsSessionCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewCifsSessionCollectionGetParamsWithHTTPClient(client *http.Client) *CifsSessionCollectionGetParams {
	return &CifsSessionCollectionGetParams{
		HTTPClient: client,
	}
}

/*
CifsSessionCollectionGetParams contains all the parameters to send to the API endpoint

	for the cifs session collection get operation.

	Typically these are written to a http.Request.
*/
type CifsSessionCollectionGetParams struct {

	/* Authentication.

	   Filter by authentication
	*/
	AuthenticationQueryParameter *string

	/* ClientIP.

	   Filter by client_ip
	*/
	ClientIPQueryParameter *string

	/* ConnectedDuration.

	   Filter by connected_duration
	*/
	ConnectedDurationQueryParameter *string

	/* ConnectionCount.

	   Filter by connection_count
	*/
	ConnectionCountQueryParameter *int64

	/* ConnectionID.

	   Filter by connection_id
	*/
	ConnectionIDQueryParameter *int64

	/* ContinuousAvailability.

	   Filter by continuous_availability
	*/
	ContinuousAvailabilityQueryParameter *string

	/* Fields.

	   Specify the fields to return.
	*/
	FieldsQueryParameter []string

	/* Identifier.

	   Filter by identifier
	*/
	IdentifierQueryParameter *int64

	/* IdleDuration.

	   Filter by idle_duration
	*/
	IdleDurationQueryParameter *string

	/* LargeMtu.

	   Filter by large_mtu
	*/
	LargeMtuQueryParameter *bool

	/* MappedUnixUser.

	   Filter by mapped_unix_user
	*/
	MappedUnixUserQueryParameter *string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecordsQueryParameter *int64

	/* NodeName.

	   Filter by node.name
	*/
	NodeNameQueryParameter *string

	/* NodeUUID.

	   Filter by node.uuid
	*/
	NodeUUIDQueryParameter *string

	/* OpenFiles.

	   Filter by open_files
	*/
	OpenFilesQueryParameter *int64

	/* OpenOther.

	   Filter by open_other
	*/
	OpenOtherQueryParameter *int64

	/* OpenShares.

	   Filter by open_shares
	*/
	OpenSharesQueryParameter *int64

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderByQueryParameter []string

	/* Protocol.

	   Filter by protocol
	*/
	ProtocolQueryParameter *string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecordsQueryParameter *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeoutQueryParameter *int64

	/* ServerIP.

	   Filter by server_ip
	*/
	ServerIPQueryParameter *string

	/* SmbEncryption.

	   Filter by smb_encryption
	*/
	SmbEncryptionQueryParameter *string

	/* SmbSigning.

	   Filter by smb_signing
	*/
	SmbSigningQueryParameter *bool

	/* SvmName.

	   Filter by svm.name
	*/
	SVMNameQueryParameter *string

	/* SvmUUID.

	   Filter by svm.uuid
	*/
	SVMUUIDQueryParameter *string

	/* User.

	   Filter by user
	*/
	UserQueryParameter *string

	/* VolumesName.

	   Filter by volumes.name
	*/
	VolumesNameQueryParameter *string

	/* VolumesUUID.

	   Filter by volumes.uuid
	*/
	VolumesUUIDQueryParameter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the cifs session collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CifsSessionCollectionGetParams) WithDefaults() *CifsSessionCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the cifs session collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CifsSessionCollectionGetParams) SetDefaults() {
	var (
		returnRecordsQueryParameterDefault = bool(true)

		returnTimeoutQueryParameterDefault = int64(15)
	)

	val := CifsSessionCollectionGetParams{
		ReturnRecordsQueryParameter: &returnRecordsQueryParameterDefault,
		ReturnTimeoutQueryParameter: &returnTimeoutQueryParameterDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) WithTimeout(timeout time.Duration) *CifsSessionCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) WithContext(ctx context.Context) *CifsSessionCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) WithHTTPClient(client *http.Client) *CifsSessionCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthenticationQueryParameter adds the authentication to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) WithAuthenticationQueryParameter(authentication *string) *CifsSessionCollectionGetParams {
	o.SetAuthenticationQueryParameter(authentication)
	return o
}

// SetAuthenticationQueryParameter adds the authentication to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) SetAuthenticationQueryParameter(authentication *string) {
	o.AuthenticationQueryParameter = authentication
}

// WithClientIPQueryParameter adds the clientIP to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) WithClientIPQueryParameter(clientIP *string) *CifsSessionCollectionGetParams {
	o.SetClientIPQueryParameter(clientIP)
	return o
}

// SetClientIPQueryParameter adds the clientIp to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) SetClientIPQueryParameter(clientIP *string) {
	o.ClientIPQueryParameter = clientIP
}

// WithConnectedDurationQueryParameter adds the connectedDuration to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) WithConnectedDurationQueryParameter(connectedDuration *string) *CifsSessionCollectionGetParams {
	o.SetConnectedDurationQueryParameter(connectedDuration)
	return o
}

// SetConnectedDurationQueryParameter adds the connectedDuration to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) SetConnectedDurationQueryParameter(connectedDuration *string) {
	o.ConnectedDurationQueryParameter = connectedDuration
}

// WithConnectionCountQueryParameter adds the connectionCount to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) WithConnectionCountQueryParameter(connectionCount *int64) *CifsSessionCollectionGetParams {
	o.SetConnectionCountQueryParameter(connectionCount)
	return o
}

// SetConnectionCountQueryParameter adds the connectionCount to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) SetConnectionCountQueryParameter(connectionCount *int64) {
	o.ConnectionCountQueryParameter = connectionCount
}

// WithConnectionIDQueryParameter adds the connectionID to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) WithConnectionIDQueryParameter(connectionID *int64) *CifsSessionCollectionGetParams {
	o.SetConnectionIDQueryParameter(connectionID)
	return o
}

// SetConnectionIDQueryParameter adds the connectionId to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) SetConnectionIDQueryParameter(connectionID *int64) {
	o.ConnectionIDQueryParameter = connectionID
}

// WithContinuousAvailabilityQueryParameter adds the continuousAvailability to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) WithContinuousAvailabilityQueryParameter(continuousAvailability *string) *CifsSessionCollectionGetParams {
	o.SetContinuousAvailabilityQueryParameter(continuousAvailability)
	return o
}

// SetContinuousAvailabilityQueryParameter adds the continuousAvailability to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) SetContinuousAvailabilityQueryParameter(continuousAvailability *string) {
	o.ContinuousAvailabilityQueryParameter = continuousAvailability
}

// WithFieldsQueryParameter adds the fields to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) WithFieldsQueryParameter(fields []string) *CifsSessionCollectionGetParams {
	o.SetFieldsQueryParameter(fields)
	return o
}

// SetFieldsQueryParameter adds the fields to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) SetFieldsQueryParameter(fields []string) {
	o.FieldsQueryParameter = fields
}

// WithIdentifierQueryParameter adds the identifier to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) WithIdentifierQueryParameter(identifier *int64) *CifsSessionCollectionGetParams {
	o.SetIdentifierQueryParameter(identifier)
	return o
}

// SetIdentifierQueryParameter adds the identifier to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) SetIdentifierQueryParameter(identifier *int64) {
	o.IdentifierQueryParameter = identifier
}

// WithIdleDurationQueryParameter adds the idleDuration to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) WithIdleDurationQueryParameter(idleDuration *string) *CifsSessionCollectionGetParams {
	o.SetIdleDurationQueryParameter(idleDuration)
	return o
}

// SetIdleDurationQueryParameter adds the idleDuration to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) SetIdleDurationQueryParameter(idleDuration *string) {
	o.IdleDurationQueryParameter = idleDuration
}

// WithLargeMtuQueryParameter adds the largeMtu to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) WithLargeMtuQueryParameter(largeMtu *bool) *CifsSessionCollectionGetParams {
	o.SetLargeMtuQueryParameter(largeMtu)
	return o
}

// SetLargeMtuQueryParameter adds the largeMtu to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) SetLargeMtuQueryParameter(largeMtu *bool) {
	o.LargeMtuQueryParameter = largeMtu
}

// WithMappedUnixUserQueryParameter adds the mappedUnixUser to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) WithMappedUnixUserQueryParameter(mappedUnixUser *string) *CifsSessionCollectionGetParams {
	o.SetMappedUnixUserQueryParameter(mappedUnixUser)
	return o
}

// SetMappedUnixUserQueryParameter adds the mappedUnixUser to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) SetMappedUnixUserQueryParameter(mappedUnixUser *string) {
	o.MappedUnixUserQueryParameter = mappedUnixUser
}

// WithMaxRecordsQueryParameter adds the maxRecords to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) WithMaxRecordsQueryParameter(maxRecords *int64) *CifsSessionCollectionGetParams {
	o.SetMaxRecordsQueryParameter(maxRecords)
	return o
}

// SetMaxRecordsQueryParameter adds the maxRecords to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) SetMaxRecordsQueryParameter(maxRecords *int64) {
	o.MaxRecordsQueryParameter = maxRecords
}

// WithNodeNameQueryParameter adds the nodeName to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) WithNodeNameQueryParameter(nodeName *string) *CifsSessionCollectionGetParams {
	o.SetNodeNameQueryParameter(nodeName)
	return o
}

// SetNodeNameQueryParameter adds the nodeName to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) SetNodeNameQueryParameter(nodeName *string) {
	o.NodeNameQueryParameter = nodeName
}

// WithNodeUUIDQueryParameter adds the nodeUUID to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) WithNodeUUIDQueryParameter(nodeUUID *string) *CifsSessionCollectionGetParams {
	o.SetNodeUUIDQueryParameter(nodeUUID)
	return o
}

// SetNodeUUIDQueryParameter adds the nodeUuid to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) SetNodeUUIDQueryParameter(nodeUUID *string) {
	o.NodeUUIDQueryParameter = nodeUUID
}

// WithOpenFilesQueryParameter adds the openFiles to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) WithOpenFilesQueryParameter(openFiles *int64) *CifsSessionCollectionGetParams {
	o.SetOpenFilesQueryParameter(openFiles)
	return o
}

// SetOpenFilesQueryParameter adds the openFiles to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) SetOpenFilesQueryParameter(openFiles *int64) {
	o.OpenFilesQueryParameter = openFiles
}

// WithOpenOtherQueryParameter adds the openOther to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) WithOpenOtherQueryParameter(openOther *int64) *CifsSessionCollectionGetParams {
	o.SetOpenOtherQueryParameter(openOther)
	return o
}

// SetOpenOtherQueryParameter adds the openOther to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) SetOpenOtherQueryParameter(openOther *int64) {
	o.OpenOtherQueryParameter = openOther
}

// WithOpenSharesQueryParameter adds the openShares to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) WithOpenSharesQueryParameter(openShares *int64) *CifsSessionCollectionGetParams {
	o.SetOpenSharesQueryParameter(openShares)
	return o
}

// SetOpenSharesQueryParameter adds the openShares to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) SetOpenSharesQueryParameter(openShares *int64) {
	o.OpenSharesQueryParameter = openShares
}

// WithOrderByQueryParameter adds the orderBy to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) WithOrderByQueryParameter(orderBy []string) *CifsSessionCollectionGetParams {
	o.SetOrderByQueryParameter(orderBy)
	return o
}

// SetOrderByQueryParameter adds the orderBy to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) SetOrderByQueryParameter(orderBy []string) {
	o.OrderByQueryParameter = orderBy
}

// WithProtocolQueryParameter adds the protocol to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) WithProtocolQueryParameter(protocol *string) *CifsSessionCollectionGetParams {
	o.SetProtocolQueryParameter(protocol)
	return o
}

// SetProtocolQueryParameter adds the protocol to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) SetProtocolQueryParameter(protocol *string) {
	o.ProtocolQueryParameter = protocol
}

// WithReturnRecordsQueryParameter adds the returnRecords to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) WithReturnRecordsQueryParameter(returnRecords *bool) *CifsSessionCollectionGetParams {
	o.SetReturnRecordsQueryParameter(returnRecords)
	return o
}

// SetReturnRecordsQueryParameter adds the returnRecords to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) SetReturnRecordsQueryParameter(returnRecords *bool) {
	o.ReturnRecordsQueryParameter = returnRecords
}

// WithReturnTimeoutQueryParameter adds the returnTimeout to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) WithReturnTimeoutQueryParameter(returnTimeout *int64) *CifsSessionCollectionGetParams {
	o.SetReturnTimeoutQueryParameter(returnTimeout)
	return o
}

// SetReturnTimeoutQueryParameter adds the returnTimeout to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) SetReturnTimeoutQueryParameter(returnTimeout *int64) {
	o.ReturnTimeoutQueryParameter = returnTimeout
}

// WithServerIPQueryParameter adds the serverIP to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) WithServerIPQueryParameter(serverIP *string) *CifsSessionCollectionGetParams {
	o.SetServerIPQueryParameter(serverIP)
	return o
}

// SetServerIPQueryParameter adds the serverIp to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) SetServerIPQueryParameter(serverIP *string) {
	o.ServerIPQueryParameter = serverIP
}

// WithSmbEncryptionQueryParameter adds the smbEncryption to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) WithSmbEncryptionQueryParameter(smbEncryption *string) *CifsSessionCollectionGetParams {
	o.SetSmbEncryptionQueryParameter(smbEncryption)
	return o
}

// SetSmbEncryptionQueryParameter adds the smbEncryption to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) SetSmbEncryptionQueryParameter(smbEncryption *string) {
	o.SmbEncryptionQueryParameter = smbEncryption
}

// WithSmbSigningQueryParameter adds the smbSigning to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) WithSmbSigningQueryParameter(smbSigning *bool) *CifsSessionCollectionGetParams {
	o.SetSmbSigningQueryParameter(smbSigning)
	return o
}

// SetSmbSigningQueryParameter adds the smbSigning to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) SetSmbSigningQueryParameter(smbSigning *bool) {
	o.SmbSigningQueryParameter = smbSigning
}

// WithSVMNameQueryParameter adds the svmName to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) WithSVMNameQueryParameter(svmName *string) *CifsSessionCollectionGetParams {
	o.SetSVMNameQueryParameter(svmName)
	return o
}

// SetSVMNameQueryParameter adds the svmName to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) SetSVMNameQueryParameter(svmName *string) {
	o.SVMNameQueryParameter = svmName
}

// WithSVMUUIDQueryParameter adds the svmUUID to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) WithSVMUUIDQueryParameter(svmUUID *string) *CifsSessionCollectionGetParams {
	o.SetSVMUUIDQueryParameter(svmUUID)
	return o
}

// SetSVMUUIDQueryParameter adds the svmUuid to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) SetSVMUUIDQueryParameter(svmUUID *string) {
	o.SVMUUIDQueryParameter = svmUUID
}

// WithUserQueryParameter adds the user to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) WithUserQueryParameter(user *string) *CifsSessionCollectionGetParams {
	o.SetUserQueryParameter(user)
	return o
}

// SetUserQueryParameter adds the user to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) SetUserQueryParameter(user *string) {
	o.UserQueryParameter = user
}

// WithVolumesNameQueryParameter adds the volumesName to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) WithVolumesNameQueryParameter(volumesName *string) *CifsSessionCollectionGetParams {
	o.SetVolumesNameQueryParameter(volumesName)
	return o
}

// SetVolumesNameQueryParameter adds the volumesName to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) SetVolumesNameQueryParameter(volumesName *string) {
	o.VolumesNameQueryParameter = volumesName
}

// WithVolumesUUIDQueryParameter adds the volumesUUID to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) WithVolumesUUIDQueryParameter(volumesUUID *string) *CifsSessionCollectionGetParams {
	o.SetVolumesUUIDQueryParameter(volumesUUID)
	return o
}

// SetVolumesUUIDQueryParameter adds the volumesUuid to the cifs session collection get params
func (o *CifsSessionCollectionGetParams) SetVolumesUUIDQueryParameter(volumesUUID *string) {
	o.VolumesUUIDQueryParameter = volumesUUID
}

// WriteToRequest writes these params to a swagger request
func (o *CifsSessionCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AuthenticationQueryParameter != nil {

		// query param authentication
		var qrAuthentication string

		if o.AuthenticationQueryParameter != nil {
			qrAuthentication = *o.AuthenticationQueryParameter
		}
		qAuthentication := qrAuthentication
		if qAuthentication != "" {

			if err := r.SetQueryParam("authentication", qAuthentication); err != nil {
				return err
			}
		}
	}

	if o.ClientIPQueryParameter != nil {

		// query param client_ip
		var qrClientIP string

		if o.ClientIPQueryParameter != nil {
			qrClientIP = *o.ClientIPQueryParameter
		}
		qClientIP := qrClientIP
		if qClientIP != "" {

			if err := r.SetQueryParam("client_ip", qClientIP); err != nil {
				return err
			}
		}
	}

	if o.ConnectedDurationQueryParameter != nil {

		// query param connected_duration
		var qrConnectedDuration string

		if o.ConnectedDurationQueryParameter != nil {
			qrConnectedDuration = *o.ConnectedDurationQueryParameter
		}
		qConnectedDuration := qrConnectedDuration
		if qConnectedDuration != "" {

			if err := r.SetQueryParam("connected_duration", qConnectedDuration); err != nil {
				return err
			}
		}
	}

	if o.ConnectionCountQueryParameter != nil {

		// query param connection_count
		var qrConnectionCount int64

		if o.ConnectionCountQueryParameter != nil {
			qrConnectionCount = *o.ConnectionCountQueryParameter
		}
		qConnectionCount := swag.FormatInt64(qrConnectionCount)
		if qConnectionCount != "" {

			if err := r.SetQueryParam("connection_count", qConnectionCount); err != nil {
				return err
			}
		}
	}

	if o.ConnectionIDQueryParameter != nil {

		// query param connection_id
		var qrConnectionID int64

		if o.ConnectionIDQueryParameter != nil {
			qrConnectionID = *o.ConnectionIDQueryParameter
		}
		qConnectionID := swag.FormatInt64(qrConnectionID)
		if qConnectionID != "" {

			if err := r.SetQueryParam("connection_id", qConnectionID); err != nil {
				return err
			}
		}
	}

	if o.ContinuousAvailabilityQueryParameter != nil {

		// query param continuous_availability
		var qrContinuousAvailability string

		if o.ContinuousAvailabilityQueryParameter != nil {
			qrContinuousAvailability = *o.ContinuousAvailabilityQueryParameter
		}
		qContinuousAvailability := qrContinuousAvailability
		if qContinuousAvailability != "" {

			if err := r.SetQueryParam("continuous_availability", qContinuousAvailability); err != nil {
				return err
			}
		}
	}

	if o.FieldsQueryParameter != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.IdentifierQueryParameter != nil {

		// query param identifier
		var qrIdentifier int64

		if o.IdentifierQueryParameter != nil {
			qrIdentifier = *o.IdentifierQueryParameter
		}
		qIdentifier := swag.FormatInt64(qrIdentifier)
		if qIdentifier != "" {

			if err := r.SetQueryParam("identifier", qIdentifier); err != nil {
				return err
			}
		}
	}

	if o.IdleDurationQueryParameter != nil {

		// query param idle_duration
		var qrIdleDuration string

		if o.IdleDurationQueryParameter != nil {
			qrIdleDuration = *o.IdleDurationQueryParameter
		}
		qIdleDuration := qrIdleDuration
		if qIdleDuration != "" {

			if err := r.SetQueryParam("idle_duration", qIdleDuration); err != nil {
				return err
			}
		}
	}

	if o.LargeMtuQueryParameter != nil {

		// query param large_mtu
		var qrLargeMtu bool

		if o.LargeMtuQueryParameter != nil {
			qrLargeMtu = *o.LargeMtuQueryParameter
		}
		qLargeMtu := swag.FormatBool(qrLargeMtu)
		if qLargeMtu != "" {

			if err := r.SetQueryParam("large_mtu", qLargeMtu); err != nil {
				return err
			}
		}
	}

	if o.MappedUnixUserQueryParameter != nil {

		// query param mapped_unix_user
		var qrMappedUnixUser string

		if o.MappedUnixUserQueryParameter != nil {
			qrMappedUnixUser = *o.MappedUnixUserQueryParameter
		}
		qMappedUnixUser := qrMappedUnixUser
		if qMappedUnixUser != "" {

			if err := r.SetQueryParam("mapped_unix_user", qMappedUnixUser); err != nil {
				return err
			}
		}
	}

	if o.MaxRecordsQueryParameter != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecordsQueryParameter != nil {
			qrMaxRecords = *o.MaxRecordsQueryParameter
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.NodeNameQueryParameter != nil {

		// query param node.name
		var qrNodeName string

		if o.NodeNameQueryParameter != nil {
			qrNodeName = *o.NodeNameQueryParameter
		}
		qNodeName := qrNodeName
		if qNodeName != "" {

			if err := r.SetQueryParam("node.name", qNodeName); err != nil {
				return err
			}
		}
	}

	if o.NodeUUIDQueryParameter != nil {

		// query param node.uuid
		var qrNodeUUID string

		if o.NodeUUIDQueryParameter != nil {
			qrNodeUUID = *o.NodeUUIDQueryParameter
		}
		qNodeUUID := qrNodeUUID
		if qNodeUUID != "" {

			if err := r.SetQueryParam("node.uuid", qNodeUUID); err != nil {
				return err
			}
		}
	}

	if o.OpenFilesQueryParameter != nil {

		// query param open_files
		var qrOpenFiles int64

		if o.OpenFilesQueryParameter != nil {
			qrOpenFiles = *o.OpenFilesQueryParameter
		}
		qOpenFiles := swag.FormatInt64(qrOpenFiles)
		if qOpenFiles != "" {

			if err := r.SetQueryParam("open_files", qOpenFiles); err != nil {
				return err
			}
		}
	}

	if o.OpenOtherQueryParameter != nil {

		// query param open_other
		var qrOpenOther int64

		if o.OpenOtherQueryParameter != nil {
			qrOpenOther = *o.OpenOtherQueryParameter
		}
		qOpenOther := swag.FormatInt64(qrOpenOther)
		if qOpenOther != "" {

			if err := r.SetQueryParam("open_other", qOpenOther); err != nil {
				return err
			}
		}
	}

	if o.OpenSharesQueryParameter != nil {

		// query param open_shares
		var qrOpenShares int64

		if o.OpenSharesQueryParameter != nil {
			qrOpenShares = *o.OpenSharesQueryParameter
		}
		qOpenShares := swag.FormatInt64(qrOpenShares)
		if qOpenShares != "" {

			if err := r.SetQueryParam("open_shares", qOpenShares); err != nil {
				return err
			}
		}
	}

	if o.OrderByQueryParameter != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.ProtocolQueryParameter != nil {

		// query param protocol
		var qrProtocol string

		if o.ProtocolQueryParameter != nil {
			qrProtocol = *o.ProtocolQueryParameter
		}
		qProtocol := qrProtocol
		if qProtocol != "" {

			if err := r.SetQueryParam("protocol", qProtocol); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecordsQueryParameter != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecordsQueryParameter != nil {
			qrReturnRecords = *o.ReturnRecordsQueryParameter
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeoutQueryParameter != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeoutQueryParameter != nil {
			qrReturnTimeout = *o.ReturnTimeoutQueryParameter
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.ServerIPQueryParameter != nil {

		// query param server_ip
		var qrServerIP string

		if o.ServerIPQueryParameter != nil {
			qrServerIP = *o.ServerIPQueryParameter
		}
		qServerIP := qrServerIP
		if qServerIP != "" {

			if err := r.SetQueryParam("server_ip", qServerIP); err != nil {
				return err
			}
		}
	}

	if o.SmbEncryptionQueryParameter != nil {

		// query param smb_encryption
		var qrSmbEncryption string

		if o.SmbEncryptionQueryParameter != nil {
			qrSmbEncryption = *o.SmbEncryptionQueryParameter
		}
		qSmbEncryption := qrSmbEncryption
		if qSmbEncryption != "" {

			if err := r.SetQueryParam("smb_encryption", qSmbEncryption); err != nil {
				return err
			}
		}
	}

	if o.SmbSigningQueryParameter != nil {

		// query param smb_signing
		var qrSmbSigning bool

		if o.SmbSigningQueryParameter != nil {
			qrSmbSigning = *o.SmbSigningQueryParameter
		}
		qSmbSigning := swag.FormatBool(qrSmbSigning)
		if qSmbSigning != "" {

			if err := r.SetQueryParam("smb_signing", qSmbSigning); err != nil {
				return err
			}
		}
	}

	if o.SVMNameQueryParameter != nil {

		// query param svm.name
		var qrSvmName string

		if o.SVMNameQueryParameter != nil {
			qrSvmName = *o.SVMNameQueryParameter
		}
		qSvmName := qrSvmName
		if qSvmName != "" {

			if err := r.SetQueryParam("svm.name", qSvmName); err != nil {
				return err
			}
		}
	}

	if o.SVMUUIDQueryParameter != nil {

		// query param svm.uuid
		var qrSvmUUID string

		if o.SVMUUIDQueryParameter != nil {
			qrSvmUUID = *o.SVMUUIDQueryParameter
		}
		qSvmUUID := qrSvmUUID
		if qSvmUUID != "" {

			if err := r.SetQueryParam("svm.uuid", qSvmUUID); err != nil {
				return err
			}
		}
	}

	if o.UserQueryParameter != nil {

		// query param user
		var qrUser string

		if o.UserQueryParameter != nil {
			qrUser = *o.UserQueryParameter
		}
		qUser := qrUser
		if qUser != "" {

			if err := r.SetQueryParam("user", qUser); err != nil {
				return err
			}
		}
	}

	if o.VolumesNameQueryParameter != nil {

		// query param volumes.name
		var qrVolumesName string

		if o.VolumesNameQueryParameter != nil {
			qrVolumesName = *o.VolumesNameQueryParameter
		}
		qVolumesName := qrVolumesName
		if qVolumesName != "" {

			if err := r.SetQueryParam("volumes.name", qVolumesName); err != nil {
				return err
			}
		}
	}

	if o.VolumesUUIDQueryParameter != nil {

		// query param volumes.uuid
		var qrVolumesUUID string

		if o.VolumesUUIDQueryParameter != nil {
			qrVolumesUUID = *o.VolumesUUIDQueryParameter
		}
		qVolumesUUID := qrVolumesUUID
		if qVolumesUUID != "" {

			if err := r.SetQueryParam("volumes.uuid", qVolumesUUID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamCifsSessionCollectionGet binds the parameter fields
func (o *CifsSessionCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.FieldsQueryParameter

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamCifsSessionCollectionGet binds the parameter order_by
func (o *CifsSessionCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderByQueryParameter

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
