// Code generated by go-swagger; DO NOT EDIT.

package n_a_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewNfsClientsGetParams creates a new NfsClientsGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewNfsClientsGetParams() *NfsClientsGetParams {
	return &NfsClientsGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewNfsClientsGetParamsWithTimeout creates a new NfsClientsGetParams object
// with the ability to set a timeout on a request.
func NewNfsClientsGetParamsWithTimeout(timeout time.Duration) *NfsClientsGetParams {
	return &NfsClientsGetParams{
		timeout: timeout,
	}
}

// NewNfsClientsGetParamsWithContext creates a new NfsClientsGetParams object
// with the ability to set a context for a request.
func NewNfsClientsGetParamsWithContext(ctx context.Context) *NfsClientsGetParams {
	return &NfsClientsGetParams{
		Context: ctx,
	}
}

// NewNfsClientsGetParamsWithHTTPClient creates a new NfsClientsGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewNfsClientsGetParamsWithHTTPClient(client *http.Client) *NfsClientsGetParams {
	return &NfsClientsGetParams{
		HTTPClient: client,
	}
}

/* NfsClientsGetParams contains all the parameters to send to the API endpoint
   for the nfs clients get operation.

   Typically these are written to a http.Request.
*/
type NfsClientsGetParams struct {

	/* ClientIP.

	   Filter by client_ip
	*/
	ClientIPQueryParameter *string

	/* ExportPolicyID.

	   Filter by export_policy.id
	*/
	ExportPolicyIDQueryParameter *int64

	/* ExportPolicyName.

	   Filter by export_policy.name
	*/
	ExportPolicyNameQueryParameter *string

	/* Fields.

	   Specify the fields to return.
	*/
	FieldsQueryParameter []string

	/* IdleDuration.

	   Filter by idle_duration
	*/
	IdleDurationQueryParameter *string

	/* LocalRequestCount.

	   Filter by local_request_count
	*/
	LocalRequestCountQueryParameter *int64

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecordsQueryParameter *int64

	/* NodeName.

	   Filter by node.name
	*/
	NodeNameQueryParameter *string

	/* NodeUUID.

	   Filter by node.uuid
	*/
	NodeUUIDQueryParameter *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderByQueryParameter []string

	/* Protocol.

	   Filter by protocol
	*/
	ProtocolQueryParameter *string

	/* RemoteRequestCount.

	   Filter by remote_request_count
	*/
	RemoteRequestCountQueryParameter *int64

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecordsQueryParameter *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeoutQueryParameter *int64

	/* ServerIP.

	   Filter by server_ip
	*/
	ServerIPQueryParameter *string

	/* SvmName.

	   Filter by svm.name
	*/
	SVMNameQueryParameter *string

	/* SvmUUID.

	   Filter by svm.uuid
	*/
	SVMUUIDQueryParameter *string

	/* VolumeName.

	   Filter by volume.name
	*/
	VolumeNameQueryParameter *string

	/* VolumeUUID.

	   Filter by volume.uuid
	*/
	VolumeUUIDQueryParameter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the nfs clients get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NfsClientsGetParams) WithDefaults() *NfsClientsGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the nfs clients get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NfsClientsGetParams) SetDefaults() {
	var (
		returnRecordsQueryParameterDefault = bool(true)

		returnTimeoutQueryParameterDefault = int64(15)
	)

	val := NfsClientsGetParams{
		ReturnRecordsQueryParameter: &returnRecordsQueryParameterDefault,
		ReturnTimeoutQueryParameter: &returnTimeoutQueryParameterDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the nfs clients get params
func (o *NfsClientsGetParams) WithTimeout(timeout time.Duration) *NfsClientsGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the nfs clients get params
func (o *NfsClientsGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the nfs clients get params
func (o *NfsClientsGetParams) WithContext(ctx context.Context) *NfsClientsGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the nfs clients get params
func (o *NfsClientsGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the nfs clients get params
func (o *NfsClientsGetParams) WithHTTPClient(client *http.Client) *NfsClientsGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the nfs clients get params
func (o *NfsClientsGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClientIPQueryParameter adds the clientIP to the nfs clients get params
func (o *NfsClientsGetParams) WithClientIPQueryParameter(clientIP *string) *NfsClientsGetParams {
	o.SetClientIPQueryParameter(clientIP)
	return o
}

// SetClientIPQueryParameter adds the clientIp to the nfs clients get params
func (o *NfsClientsGetParams) SetClientIPQueryParameter(clientIP *string) {
	o.ClientIPQueryParameter = clientIP
}

// WithExportPolicyIDQueryParameter adds the exportPolicyID to the nfs clients get params
func (o *NfsClientsGetParams) WithExportPolicyIDQueryParameter(exportPolicyID *int64) *NfsClientsGetParams {
	o.SetExportPolicyIDQueryParameter(exportPolicyID)
	return o
}

// SetExportPolicyIDQueryParameter adds the exportPolicyId to the nfs clients get params
func (o *NfsClientsGetParams) SetExportPolicyIDQueryParameter(exportPolicyID *int64) {
	o.ExportPolicyIDQueryParameter = exportPolicyID
}

// WithExportPolicyNameQueryParameter adds the exportPolicyName to the nfs clients get params
func (o *NfsClientsGetParams) WithExportPolicyNameQueryParameter(exportPolicyName *string) *NfsClientsGetParams {
	o.SetExportPolicyNameQueryParameter(exportPolicyName)
	return o
}

// SetExportPolicyNameQueryParameter adds the exportPolicyName to the nfs clients get params
func (o *NfsClientsGetParams) SetExportPolicyNameQueryParameter(exportPolicyName *string) {
	o.ExportPolicyNameQueryParameter = exportPolicyName
}

// WithFieldsQueryParameter adds the fields to the nfs clients get params
func (o *NfsClientsGetParams) WithFieldsQueryParameter(fields []string) *NfsClientsGetParams {
	o.SetFieldsQueryParameter(fields)
	return o
}

// SetFieldsQueryParameter adds the fields to the nfs clients get params
func (o *NfsClientsGetParams) SetFieldsQueryParameter(fields []string) {
	o.FieldsQueryParameter = fields
}

// WithIdleDurationQueryParameter adds the idleDuration to the nfs clients get params
func (o *NfsClientsGetParams) WithIdleDurationQueryParameter(idleDuration *string) *NfsClientsGetParams {
	o.SetIdleDurationQueryParameter(idleDuration)
	return o
}

// SetIdleDurationQueryParameter adds the idleDuration to the nfs clients get params
func (o *NfsClientsGetParams) SetIdleDurationQueryParameter(idleDuration *string) {
	o.IdleDurationQueryParameter = idleDuration
}

// WithLocalRequestCountQueryParameter adds the localRequestCount to the nfs clients get params
func (o *NfsClientsGetParams) WithLocalRequestCountQueryParameter(localRequestCount *int64) *NfsClientsGetParams {
	o.SetLocalRequestCountQueryParameter(localRequestCount)
	return o
}

// SetLocalRequestCountQueryParameter adds the localRequestCount to the nfs clients get params
func (o *NfsClientsGetParams) SetLocalRequestCountQueryParameter(localRequestCount *int64) {
	o.LocalRequestCountQueryParameter = localRequestCount
}

// WithMaxRecordsQueryParameter adds the maxRecords to the nfs clients get params
func (o *NfsClientsGetParams) WithMaxRecordsQueryParameter(maxRecords *int64) *NfsClientsGetParams {
	o.SetMaxRecordsQueryParameter(maxRecords)
	return o
}

// SetMaxRecordsQueryParameter adds the maxRecords to the nfs clients get params
func (o *NfsClientsGetParams) SetMaxRecordsQueryParameter(maxRecords *int64) {
	o.MaxRecordsQueryParameter = maxRecords
}

// WithNodeNameQueryParameter adds the nodeName to the nfs clients get params
func (o *NfsClientsGetParams) WithNodeNameQueryParameter(nodeName *string) *NfsClientsGetParams {
	o.SetNodeNameQueryParameter(nodeName)
	return o
}

// SetNodeNameQueryParameter adds the nodeName to the nfs clients get params
func (o *NfsClientsGetParams) SetNodeNameQueryParameter(nodeName *string) {
	o.NodeNameQueryParameter = nodeName
}

// WithNodeUUIDQueryParameter adds the nodeUUID to the nfs clients get params
func (o *NfsClientsGetParams) WithNodeUUIDQueryParameter(nodeUUID *string) *NfsClientsGetParams {
	o.SetNodeUUIDQueryParameter(nodeUUID)
	return o
}

// SetNodeUUIDQueryParameter adds the nodeUuid to the nfs clients get params
func (o *NfsClientsGetParams) SetNodeUUIDQueryParameter(nodeUUID *string) {
	o.NodeUUIDQueryParameter = nodeUUID
}

// WithOrderByQueryParameter adds the orderBy to the nfs clients get params
func (o *NfsClientsGetParams) WithOrderByQueryParameter(orderBy []string) *NfsClientsGetParams {
	o.SetOrderByQueryParameter(orderBy)
	return o
}

// SetOrderByQueryParameter adds the orderBy to the nfs clients get params
func (o *NfsClientsGetParams) SetOrderByQueryParameter(orderBy []string) {
	o.OrderByQueryParameter = orderBy
}

// WithProtocolQueryParameter adds the protocol to the nfs clients get params
func (o *NfsClientsGetParams) WithProtocolQueryParameter(protocol *string) *NfsClientsGetParams {
	o.SetProtocolQueryParameter(protocol)
	return o
}

// SetProtocolQueryParameter adds the protocol to the nfs clients get params
func (o *NfsClientsGetParams) SetProtocolQueryParameter(protocol *string) {
	o.ProtocolQueryParameter = protocol
}

// WithRemoteRequestCountQueryParameter adds the remoteRequestCount to the nfs clients get params
func (o *NfsClientsGetParams) WithRemoteRequestCountQueryParameter(remoteRequestCount *int64) *NfsClientsGetParams {
	o.SetRemoteRequestCountQueryParameter(remoteRequestCount)
	return o
}

// SetRemoteRequestCountQueryParameter adds the remoteRequestCount to the nfs clients get params
func (o *NfsClientsGetParams) SetRemoteRequestCountQueryParameter(remoteRequestCount *int64) {
	o.RemoteRequestCountQueryParameter = remoteRequestCount
}

// WithReturnRecordsQueryParameter adds the returnRecords to the nfs clients get params
func (o *NfsClientsGetParams) WithReturnRecordsQueryParameter(returnRecords *bool) *NfsClientsGetParams {
	o.SetReturnRecordsQueryParameter(returnRecords)
	return o
}

// SetReturnRecordsQueryParameter adds the returnRecords to the nfs clients get params
func (o *NfsClientsGetParams) SetReturnRecordsQueryParameter(returnRecords *bool) {
	o.ReturnRecordsQueryParameter = returnRecords
}

// WithReturnTimeoutQueryParameter adds the returnTimeout to the nfs clients get params
func (o *NfsClientsGetParams) WithReturnTimeoutQueryParameter(returnTimeout *int64) *NfsClientsGetParams {
	o.SetReturnTimeoutQueryParameter(returnTimeout)
	return o
}

// SetReturnTimeoutQueryParameter adds the returnTimeout to the nfs clients get params
func (o *NfsClientsGetParams) SetReturnTimeoutQueryParameter(returnTimeout *int64) {
	o.ReturnTimeoutQueryParameter = returnTimeout
}

// WithServerIPQueryParameter adds the serverIP to the nfs clients get params
func (o *NfsClientsGetParams) WithServerIPQueryParameter(serverIP *string) *NfsClientsGetParams {
	o.SetServerIPQueryParameter(serverIP)
	return o
}

// SetServerIPQueryParameter adds the serverIp to the nfs clients get params
func (o *NfsClientsGetParams) SetServerIPQueryParameter(serverIP *string) {
	o.ServerIPQueryParameter = serverIP
}

// WithSVMNameQueryParameter adds the svmName to the nfs clients get params
func (o *NfsClientsGetParams) WithSVMNameQueryParameter(svmName *string) *NfsClientsGetParams {
	o.SetSVMNameQueryParameter(svmName)
	return o
}

// SetSVMNameQueryParameter adds the svmName to the nfs clients get params
func (o *NfsClientsGetParams) SetSVMNameQueryParameter(svmName *string) {
	o.SVMNameQueryParameter = svmName
}

// WithSVMUUIDQueryParameter adds the svmUUID to the nfs clients get params
func (o *NfsClientsGetParams) WithSVMUUIDQueryParameter(svmUUID *string) *NfsClientsGetParams {
	o.SetSVMUUIDQueryParameter(svmUUID)
	return o
}

// SetSVMUUIDQueryParameter adds the svmUuid to the nfs clients get params
func (o *NfsClientsGetParams) SetSVMUUIDQueryParameter(svmUUID *string) {
	o.SVMUUIDQueryParameter = svmUUID
}

// WithVolumeNameQueryParameter adds the volumeName to the nfs clients get params
func (o *NfsClientsGetParams) WithVolumeNameQueryParameter(volumeName *string) *NfsClientsGetParams {
	o.SetVolumeNameQueryParameter(volumeName)
	return o
}

// SetVolumeNameQueryParameter adds the volumeName to the nfs clients get params
func (o *NfsClientsGetParams) SetVolumeNameQueryParameter(volumeName *string) {
	o.VolumeNameQueryParameter = volumeName
}

// WithVolumeUUIDQueryParameter adds the volumeUUID to the nfs clients get params
func (o *NfsClientsGetParams) WithVolumeUUIDQueryParameter(volumeUUID *string) *NfsClientsGetParams {
	o.SetVolumeUUIDQueryParameter(volumeUUID)
	return o
}

// SetVolumeUUIDQueryParameter adds the volumeUuid to the nfs clients get params
func (o *NfsClientsGetParams) SetVolumeUUIDQueryParameter(volumeUUID *string) {
	o.VolumeUUIDQueryParameter = volumeUUID
}

// WriteToRequest writes these params to a swagger request
func (o *NfsClientsGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ClientIPQueryParameter != nil {

		// query param client_ip
		var qrClientIP string

		if o.ClientIPQueryParameter != nil {
			qrClientIP = *o.ClientIPQueryParameter
		}
		qClientIP := qrClientIP
		if qClientIP != "" {

			if err := r.SetQueryParam("client_ip", qClientIP); err != nil {
				return err
			}
		}
	}

	if o.ExportPolicyIDQueryParameter != nil {

		// query param export_policy.id
		var qrExportPolicyID int64

		if o.ExportPolicyIDQueryParameter != nil {
			qrExportPolicyID = *o.ExportPolicyIDQueryParameter
		}
		qExportPolicyID := swag.FormatInt64(qrExportPolicyID)
		if qExportPolicyID != "" {

			if err := r.SetQueryParam("export_policy.id", qExportPolicyID); err != nil {
				return err
			}
		}
	}

	if o.ExportPolicyNameQueryParameter != nil {

		// query param export_policy.name
		var qrExportPolicyName string

		if o.ExportPolicyNameQueryParameter != nil {
			qrExportPolicyName = *o.ExportPolicyNameQueryParameter
		}
		qExportPolicyName := qrExportPolicyName
		if qExportPolicyName != "" {

			if err := r.SetQueryParam("export_policy.name", qExportPolicyName); err != nil {
				return err
			}
		}
	}

	if o.FieldsQueryParameter != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.IdleDurationQueryParameter != nil {

		// query param idle_duration
		var qrIdleDuration string

		if o.IdleDurationQueryParameter != nil {
			qrIdleDuration = *o.IdleDurationQueryParameter
		}
		qIdleDuration := qrIdleDuration
		if qIdleDuration != "" {

			if err := r.SetQueryParam("idle_duration", qIdleDuration); err != nil {
				return err
			}
		}
	}

	if o.LocalRequestCountQueryParameter != nil {

		// query param local_request_count
		var qrLocalRequestCount int64

		if o.LocalRequestCountQueryParameter != nil {
			qrLocalRequestCount = *o.LocalRequestCountQueryParameter
		}
		qLocalRequestCount := swag.FormatInt64(qrLocalRequestCount)
		if qLocalRequestCount != "" {

			if err := r.SetQueryParam("local_request_count", qLocalRequestCount); err != nil {
				return err
			}
		}
	}

	if o.MaxRecordsQueryParameter != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecordsQueryParameter != nil {
			qrMaxRecords = *o.MaxRecordsQueryParameter
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.NodeNameQueryParameter != nil {

		// query param node.name
		var qrNodeName string

		if o.NodeNameQueryParameter != nil {
			qrNodeName = *o.NodeNameQueryParameter
		}
		qNodeName := qrNodeName
		if qNodeName != "" {

			if err := r.SetQueryParam("node.name", qNodeName); err != nil {
				return err
			}
		}
	}

	if o.NodeUUIDQueryParameter != nil {

		// query param node.uuid
		var qrNodeUUID string

		if o.NodeUUIDQueryParameter != nil {
			qrNodeUUID = *o.NodeUUIDQueryParameter
		}
		qNodeUUID := qrNodeUUID
		if qNodeUUID != "" {

			if err := r.SetQueryParam("node.uuid", qNodeUUID); err != nil {
				return err
			}
		}
	}

	if o.OrderByQueryParameter != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.ProtocolQueryParameter != nil {

		// query param protocol
		var qrProtocol string

		if o.ProtocolQueryParameter != nil {
			qrProtocol = *o.ProtocolQueryParameter
		}
		qProtocol := qrProtocol
		if qProtocol != "" {

			if err := r.SetQueryParam("protocol", qProtocol); err != nil {
				return err
			}
		}
	}

	if o.RemoteRequestCountQueryParameter != nil {

		// query param remote_request_count
		var qrRemoteRequestCount int64

		if o.RemoteRequestCountQueryParameter != nil {
			qrRemoteRequestCount = *o.RemoteRequestCountQueryParameter
		}
		qRemoteRequestCount := swag.FormatInt64(qrRemoteRequestCount)
		if qRemoteRequestCount != "" {

			if err := r.SetQueryParam("remote_request_count", qRemoteRequestCount); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecordsQueryParameter != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecordsQueryParameter != nil {
			qrReturnRecords = *o.ReturnRecordsQueryParameter
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeoutQueryParameter != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeoutQueryParameter != nil {
			qrReturnTimeout = *o.ReturnTimeoutQueryParameter
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.ServerIPQueryParameter != nil {

		// query param server_ip
		var qrServerIP string

		if o.ServerIPQueryParameter != nil {
			qrServerIP = *o.ServerIPQueryParameter
		}
		qServerIP := qrServerIP
		if qServerIP != "" {

			if err := r.SetQueryParam("server_ip", qServerIP); err != nil {
				return err
			}
		}
	}

	if o.SVMNameQueryParameter != nil {

		// query param svm.name
		var qrSvmName string

		if o.SVMNameQueryParameter != nil {
			qrSvmName = *o.SVMNameQueryParameter
		}
		qSvmName := qrSvmName
		if qSvmName != "" {

			if err := r.SetQueryParam("svm.name", qSvmName); err != nil {
				return err
			}
		}
	}

	if o.SVMUUIDQueryParameter != nil {

		// query param svm.uuid
		var qrSvmUUID string

		if o.SVMUUIDQueryParameter != nil {
			qrSvmUUID = *o.SVMUUIDQueryParameter
		}
		qSvmUUID := qrSvmUUID
		if qSvmUUID != "" {

			if err := r.SetQueryParam("svm.uuid", qSvmUUID); err != nil {
				return err
			}
		}
	}

	if o.VolumeNameQueryParameter != nil {

		// query param volume.name
		var qrVolumeName string

		if o.VolumeNameQueryParameter != nil {
			qrVolumeName = *o.VolumeNameQueryParameter
		}
		qVolumeName := qrVolumeName
		if qVolumeName != "" {

			if err := r.SetQueryParam("volume.name", qVolumeName); err != nil {
				return err
			}
		}
	}

	if o.VolumeUUIDQueryParameter != nil {

		// query param volume.uuid
		var qrVolumeUUID string

		if o.VolumeUUIDQueryParameter != nil {
			qrVolumeUUID = *o.VolumeUUIDQueryParameter
		}
		qVolumeUUID := qrVolumeUUID
		if qVolumeUUID != "" {

			if err := r.SetQueryParam("volume.uuid", qVolumeUUID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamNfsClientsGet binds the parameter fields
func (o *NfsClientsGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.FieldsQueryParameter

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamNfsClientsGet binds the parameter order_by
func (o *NfsClientsGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderByQueryParameter

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
