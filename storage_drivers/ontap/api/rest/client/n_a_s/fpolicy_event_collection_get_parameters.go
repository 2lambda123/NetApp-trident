// Code generated by go-swagger; DO NOT EDIT.

package n_a_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewFpolicyEventCollectionGetParams creates a new FpolicyEventCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewFpolicyEventCollectionGetParams() *FpolicyEventCollectionGetParams {
	return &FpolicyEventCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewFpolicyEventCollectionGetParamsWithTimeout creates a new FpolicyEventCollectionGetParams object
// with the ability to set a timeout on a request.
func NewFpolicyEventCollectionGetParamsWithTimeout(timeout time.Duration) *FpolicyEventCollectionGetParams {
	return &FpolicyEventCollectionGetParams{
		timeout: timeout,
	}
}

// NewFpolicyEventCollectionGetParamsWithContext creates a new FpolicyEventCollectionGetParams object
// with the ability to set a context for a request.
func NewFpolicyEventCollectionGetParamsWithContext(ctx context.Context) *FpolicyEventCollectionGetParams {
	return &FpolicyEventCollectionGetParams{
		Context: ctx,
	}
}

// NewFpolicyEventCollectionGetParamsWithHTTPClient creates a new FpolicyEventCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewFpolicyEventCollectionGetParamsWithHTTPClient(client *http.Client) *FpolicyEventCollectionGetParams {
	return &FpolicyEventCollectionGetParams{
		HTTPClient: client,
	}
}

/* FpolicyEventCollectionGetParams contains all the parameters to send to the API endpoint
   for the fpolicy event collection get operation.

   Typically these are written to a http.Request.
*/
type FpolicyEventCollectionGetParams struct {

	/* Fields.

	   Specify the fields to return.
	*/
	Fields []string

	/* FileOperationsClose.

	   Filter by file_operations.close
	*/
	FileOperationsCloseQueryParameter *bool

	/* FileOperationsCreate.

	   Filter by file_operations.create
	*/
	FileOperationsCreateQueryParameter *bool

	/* FileOperationsCreateDir.

	   Filter by file_operations.create_dir
	*/
	FileOperationsCreateDirQueryParameter *bool

	/* FileOperationsDelete.

	   Filter by file_operations.delete
	*/
	FileOperationsDeleteQueryParameter *bool

	/* FileOperationsDeleteDir.

	   Filter by file_operations.delete_dir
	*/
	FileOperationsDeleteDirQueryParameter *bool

	/* FileOperationsGetattr.

	   Filter by file_operations.getattr
	*/
	FileOperationsGetattrQueryParameter *bool

	/* FileOperationsLink.

	   Filter by file_operations.link
	*/
	FileOperationsLinkQueryParameter *bool

	/* FileOperationsLookup.

	   Filter by file_operations.lookup
	*/
	FileOperationsLookupQueryParameter *bool

	/* FileOperationsOpen.

	   Filter by file_operations.open
	*/
	FileOperationsOpenQueryParameter *bool

	/* FileOperationsRead.

	   Filter by file_operations.read
	*/
	FileOperationsReadQueryParameter *bool

	/* FileOperationsRename.

	   Filter by file_operations.rename
	*/
	FileOperationsRenameQueryParameter *bool

	/* FileOperationsRenameDir.

	   Filter by file_operations.rename_dir
	*/
	FileOperationsRenameDirQueryParameter *bool

	/* FileOperationsSetattr.

	   Filter by file_operations.setattr
	*/
	FileOperationsSetattrQueryParameter *bool

	/* FileOperationsSymlink.

	   Filter by file_operations.symlink
	*/
	FileOperationsSymlinkQueryParameter *bool

	/* FileOperationsWrite.

	   Filter by file_operations.write
	*/
	FileOperationsWriteQueryParameter *bool

	/* FiltersCloseWithModification.

	   Filter by filters.close_with_modification
	*/
	FiltersCloseWithModificationQueryParameter *bool

	/* FiltersCloseWithRead.

	   Filter by filters.close_with_read
	*/
	FiltersCloseWithReadQueryParameter *bool

	/* FiltersCloseWithoutModification.

	   Filter by filters.close_without_modification
	*/
	FiltersCloseWithoutModificationQueryParameter *bool

	/* FiltersExcludeDirectory.

	   Filter by filters.exclude_directory
	*/
	FiltersExcludeDirectoryQueryParameter *bool

	/* FiltersFirstRead.

	   Filter by filters.first_read
	*/
	FiltersFirstReadQueryParameter *bool

	/* FiltersFirstWrite.

	   Filter by filters.first_write
	*/
	FiltersFirstWriteQueryParameter *bool

	/* FiltersMonitorAds.

	   Filter by filters.monitor_ads
	*/
	FiltersMonitorAdsQueryParameter *bool

	/* FiltersOfflineBit.

	   Filter by filters.offline_bit
	*/
	FiltersOfflineBitQueryParameter *bool

	/* FiltersOpenWithDeleteIntent.

	   Filter by filters.open_with_delete_intent
	*/
	FiltersOpenWithDeleteIntentQueryParameter *bool

	/* FiltersOpenWithWriteIntent.

	   Filter by filters.open_with_write_intent
	*/
	FiltersOpenWithWriteIntentQueryParameter *bool

	/* FiltersSetattrWithAccessTimeChange.

	   Filter by filters.setattr_with_access_time_change
	*/
	FiltersSetattrWithAccessTimeChangeQueryParameter *bool

	/* FiltersSetattrWithAllocationSizeChange.

	   Filter by filters.setattr_with_allocation_size_change
	*/
	FiltersSetattrWithAllocationSizeChangeQueryParameter *bool

	/* FiltersSetattrWithCreationTimeChange.

	   Filter by filters.setattr_with_creation_time_change
	*/
	FiltersSetattrWithCreationTimeChangeQueryParameter *bool

	/* FiltersSetattrWithDaclChange.

	   Filter by filters.setattr_with_dacl_change
	*/
	FiltersSetattrWithDACLChangeQueryParameter *bool

	/* FiltersSetattrWithGroupChange.

	   Filter by filters.setattr_with_group_change
	*/
	FiltersSetattrWithGroupChangeQueryParameter *bool

	/* FiltersSetattrWithModeChange.

	   Filter by filters.setattr_with_mode_change
	*/
	FiltersSetattrWithModeChangeQueryParameter *bool

	/* FiltersSetattrWithModifyTimeChange.

	   Filter by filters.setattr_with_modify_time_change
	*/
	FiltersSetattrWithModifyTimeChangeQueryParameter *bool

	/* FiltersSetattrWithOwnerChange.

	   Filter by filters.setattr_with_owner_change
	*/
	FiltersSetattrWithOwnerChangeQueryParameter *bool

	/* FiltersSetattrWithSaclChange.

	   Filter by filters.setattr_with_sacl_change
	*/
	FiltersSetattrWithSACLChangeQueryParameter *bool

	/* FiltersSetattrWithSizeChange.

	   Filter by filters.setattr_with_size_change
	*/
	FiltersSetattrWithSizeChangeQueryParameter *bool

	/* FiltersWriteWithSizeChange.

	   Filter by filters.write_with_size_change
	*/
	FiltersWriteWithSizeChangeQueryParameter *bool

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecords *int64

	/* Name.

	   Filter by name
	*/
	NameQueryParameter *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderBy []string

	/* Protocol.

	   Filter by protocol
	*/
	ProtocolQueryParameter *string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecords *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeout *int64

	/* SvmUUID.

	   UUID of the SVM to which this object belongs.
	*/
	SvmUUID string

	/* VolumeMonitoring.

	   Filter by volume_monitoring
	*/
	VolumeMonitoringQueryParameter *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the fpolicy event collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FpolicyEventCollectionGetParams) WithDefaults() *FpolicyEventCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the fpolicy event collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FpolicyEventCollectionGetParams) SetDefaults() {
	var (
		returnRecordsDefault = bool(true)

		returnTimeoutDefault = int64(15)
	)

	val := FpolicyEventCollectionGetParams{
		ReturnRecords: &returnRecordsDefault,
		ReturnTimeout: &returnTimeoutDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithTimeout(timeout time.Duration) *FpolicyEventCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithContext(ctx context.Context) *FpolicyEventCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithHTTPClient(client *http.Client) *FpolicyEventCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFields adds the fields to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFields(fields []string) *FpolicyEventCollectionGetParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithFileOperationsCloseQueryParameter adds the fileOperationsClose to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFileOperationsCloseQueryParameter(fileOperationsClose *bool) *FpolicyEventCollectionGetParams {
	o.SetFileOperationsCloseQueryParameter(fileOperationsClose)
	return o
}

// SetFileOperationsCloseQueryParameter adds the fileOperationsClose to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFileOperationsCloseQueryParameter(fileOperationsClose *bool) {
	o.FileOperationsCloseQueryParameter = fileOperationsClose
}

// WithFileOperationsCreateQueryParameter adds the fileOperationsCreate to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFileOperationsCreateQueryParameter(fileOperationsCreate *bool) *FpolicyEventCollectionGetParams {
	o.SetFileOperationsCreateQueryParameter(fileOperationsCreate)
	return o
}

// SetFileOperationsCreateQueryParameter adds the fileOperationsCreate to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFileOperationsCreateQueryParameter(fileOperationsCreate *bool) {
	o.FileOperationsCreateQueryParameter = fileOperationsCreate
}

// WithFileOperationsCreateDirQueryParameter adds the fileOperationsCreateDir to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFileOperationsCreateDirQueryParameter(fileOperationsCreateDir *bool) *FpolicyEventCollectionGetParams {
	o.SetFileOperationsCreateDirQueryParameter(fileOperationsCreateDir)
	return o
}

// SetFileOperationsCreateDirQueryParameter adds the fileOperationsCreateDir to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFileOperationsCreateDirQueryParameter(fileOperationsCreateDir *bool) {
	o.FileOperationsCreateDirQueryParameter = fileOperationsCreateDir
}

// WithFileOperationsDeleteQueryParameter adds the fileOperationsDelete to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFileOperationsDeleteQueryParameter(fileOperationsDelete *bool) *FpolicyEventCollectionGetParams {
	o.SetFileOperationsDeleteQueryParameter(fileOperationsDelete)
	return o
}

// SetFileOperationsDeleteQueryParameter adds the fileOperationsDelete to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFileOperationsDeleteQueryParameter(fileOperationsDelete *bool) {
	o.FileOperationsDeleteQueryParameter = fileOperationsDelete
}

// WithFileOperationsDeleteDirQueryParameter adds the fileOperationsDeleteDir to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFileOperationsDeleteDirQueryParameter(fileOperationsDeleteDir *bool) *FpolicyEventCollectionGetParams {
	o.SetFileOperationsDeleteDirQueryParameter(fileOperationsDeleteDir)
	return o
}

// SetFileOperationsDeleteDirQueryParameter adds the fileOperationsDeleteDir to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFileOperationsDeleteDirQueryParameter(fileOperationsDeleteDir *bool) {
	o.FileOperationsDeleteDirQueryParameter = fileOperationsDeleteDir
}

// WithFileOperationsGetattrQueryParameter adds the fileOperationsGetattr to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFileOperationsGetattrQueryParameter(fileOperationsGetattr *bool) *FpolicyEventCollectionGetParams {
	o.SetFileOperationsGetattrQueryParameter(fileOperationsGetattr)
	return o
}

// SetFileOperationsGetattrQueryParameter adds the fileOperationsGetattr to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFileOperationsGetattrQueryParameter(fileOperationsGetattr *bool) {
	o.FileOperationsGetattrQueryParameter = fileOperationsGetattr
}

// WithFileOperationsLinkQueryParameter adds the fileOperationsLink to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFileOperationsLinkQueryParameter(fileOperationsLink *bool) *FpolicyEventCollectionGetParams {
	o.SetFileOperationsLinkQueryParameter(fileOperationsLink)
	return o
}

// SetFileOperationsLinkQueryParameter adds the fileOperationsLink to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFileOperationsLinkQueryParameter(fileOperationsLink *bool) {
	o.FileOperationsLinkQueryParameter = fileOperationsLink
}

// WithFileOperationsLookupQueryParameter adds the fileOperationsLookup to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFileOperationsLookupQueryParameter(fileOperationsLookup *bool) *FpolicyEventCollectionGetParams {
	o.SetFileOperationsLookupQueryParameter(fileOperationsLookup)
	return o
}

// SetFileOperationsLookupQueryParameter adds the fileOperationsLookup to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFileOperationsLookupQueryParameter(fileOperationsLookup *bool) {
	o.FileOperationsLookupQueryParameter = fileOperationsLookup
}

// WithFileOperationsOpenQueryParameter adds the fileOperationsOpen to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFileOperationsOpenQueryParameter(fileOperationsOpen *bool) *FpolicyEventCollectionGetParams {
	o.SetFileOperationsOpenQueryParameter(fileOperationsOpen)
	return o
}

// SetFileOperationsOpenQueryParameter adds the fileOperationsOpen to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFileOperationsOpenQueryParameter(fileOperationsOpen *bool) {
	o.FileOperationsOpenQueryParameter = fileOperationsOpen
}

// WithFileOperationsReadQueryParameter adds the fileOperationsRead to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFileOperationsReadQueryParameter(fileOperationsRead *bool) *FpolicyEventCollectionGetParams {
	o.SetFileOperationsReadQueryParameter(fileOperationsRead)
	return o
}

// SetFileOperationsReadQueryParameter adds the fileOperationsRead to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFileOperationsReadQueryParameter(fileOperationsRead *bool) {
	o.FileOperationsReadQueryParameter = fileOperationsRead
}

// WithFileOperationsRenameQueryParameter adds the fileOperationsRename to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFileOperationsRenameQueryParameter(fileOperationsRename *bool) *FpolicyEventCollectionGetParams {
	o.SetFileOperationsRenameQueryParameter(fileOperationsRename)
	return o
}

// SetFileOperationsRenameQueryParameter adds the fileOperationsRename to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFileOperationsRenameQueryParameter(fileOperationsRename *bool) {
	o.FileOperationsRenameQueryParameter = fileOperationsRename
}

// WithFileOperationsRenameDirQueryParameter adds the fileOperationsRenameDir to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFileOperationsRenameDirQueryParameter(fileOperationsRenameDir *bool) *FpolicyEventCollectionGetParams {
	o.SetFileOperationsRenameDirQueryParameter(fileOperationsRenameDir)
	return o
}

// SetFileOperationsRenameDirQueryParameter adds the fileOperationsRenameDir to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFileOperationsRenameDirQueryParameter(fileOperationsRenameDir *bool) {
	o.FileOperationsRenameDirQueryParameter = fileOperationsRenameDir
}

// WithFileOperationsSetattrQueryParameter adds the fileOperationsSetattr to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFileOperationsSetattrQueryParameter(fileOperationsSetattr *bool) *FpolicyEventCollectionGetParams {
	o.SetFileOperationsSetattrQueryParameter(fileOperationsSetattr)
	return o
}

// SetFileOperationsSetattrQueryParameter adds the fileOperationsSetattr to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFileOperationsSetattrQueryParameter(fileOperationsSetattr *bool) {
	o.FileOperationsSetattrQueryParameter = fileOperationsSetattr
}

// WithFileOperationsSymlinkQueryParameter adds the fileOperationsSymlink to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFileOperationsSymlinkQueryParameter(fileOperationsSymlink *bool) *FpolicyEventCollectionGetParams {
	o.SetFileOperationsSymlinkQueryParameter(fileOperationsSymlink)
	return o
}

// SetFileOperationsSymlinkQueryParameter adds the fileOperationsSymlink to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFileOperationsSymlinkQueryParameter(fileOperationsSymlink *bool) {
	o.FileOperationsSymlinkQueryParameter = fileOperationsSymlink
}

// WithFileOperationsWriteQueryParameter adds the fileOperationsWrite to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFileOperationsWriteQueryParameter(fileOperationsWrite *bool) *FpolicyEventCollectionGetParams {
	o.SetFileOperationsWriteQueryParameter(fileOperationsWrite)
	return o
}

// SetFileOperationsWriteQueryParameter adds the fileOperationsWrite to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFileOperationsWriteQueryParameter(fileOperationsWrite *bool) {
	o.FileOperationsWriteQueryParameter = fileOperationsWrite
}

// WithFiltersCloseWithModificationQueryParameter adds the filtersCloseWithModification to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFiltersCloseWithModificationQueryParameter(filtersCloseWithModification *bool) *FpolicyEventCollectionGetParams {
	o.SetFiltersCloseWithModificationQueryParameter(filtersCloseWithModification)
	return o
}

// SetFiltersCloseWithModificationQueryParameter adds the filtersCloseWithModification to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFiltersCloseWithModificationQueryParameter(filtersCloseWithModification *bool) {
	o.FiltersCloseWithModificationQueryParameter = filtersCloseWithModification
}

// WithFiltersCloseWithReadQueryParameter adds the filtersCloseWithRead to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFiltersCloseWithReadQueryParameter(filtersCloseWithRead *bool) *FpolicyEventCollectionGetParams {
	o.SetFiltersCloseWithReadQueryParameter(filtersCloseWithRead)
	return o
}

// SetFiltersCloseWithReadQueryParameter adds the filtersCloseWithRead to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFiltersCloseWithReadQueryParameter(filtersCloseWithRead *bool) {
	o.FiltersCloseWithReadQueryParameter = filtersCloseWithRead
}

// WithFiltersCloseWithoutModificationQueryParameter adds the filtersCloseWithoutModification to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFiltersCloseWithoutModificationQueryParameter(filtersCloseWithoutModification *bool) *FpolicyEventCollectionGetParams {
	o.SetFiltersCloseWithoutModificationQueryParameter(filtersCloseWithoutModification)
	return o
}

// SetFiltersCloseWithoutModificationQueryParameter adds the filtersCloseWithoutModification to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFiltersCloseWithoutModificationQueryParameter(filtersCloseWithoutModification *bool) {
	o.FiltersCloseWithoutModificationQueryParameter = filtersCloseWithoutModification
}

// WithFiltersExcludeDirectoryQueryParameter adds the filtersExcludeDirectory to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFiltersExcludeDirectoryQueryParameter(filtersExcludeDirectory *bool) *FpolicyEventCollectionGetParams {
	o.SetFiltersExcludeDirectoryQueryParameter(filtersExcludeDirectory)
	return o
}

// SetFiltersExcludeDirectoryQueryParameter adds the filtersExcludeDirectory to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFiltersExcludeDirectoryQueryParameter(filtersExcludeDirectory *bool) {
	o.FiltersExcludeDirectoryQueryParameter = filtersExcludeDirectory
}

// WithFiltersFirstReadQueryParameter adds the filtersFirstRead to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFiltersFirstReadQueryParameter(filtersFirstRead *bool) *FpolicyEventCollectionGetParams {
	o.SetFiltersFirstReadQueryParameter(filtersFirstRead)
	return o
}

// SetFiltersFirstReadQueryParameter adds the filtersFirstRead to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFiltersFirstReadQueryParameter(filtersFirstRead *bool) {
	o.FiltersFirstReadQueryParameter = filtersFirstRead
}

// WithFiltersFirstWriteQueryParameter adds the filtersFirstWrite to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFiltersFirstWriteQueryParameter(filtersFirstWrite *bool) *FpolicyEventCollectionGetParams {
	o.SetFiltersFirstWriteQueryParameter(filtersFirstWrite)
	return o
}

// SetFiltersFirstWriteQueryParameter adds the filtersFirstWrite to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFiltersFirstWriteQueryParameter(filtersFirstWrite *bool) {
	o.FiltersFirstWriteQueryParameter = filtersFirstWrite
}

// WithFiltersMonitorAdsQueryParameter adds the filtersMonitorAds to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFiltersMonitorAdsQueryParameter(filtersMonitorAds *bool) *FpolicyEventCollectionGetParams {
	o.SetFiltersMonitorAdsQueryParameter(filtersMonitorAds)
	return o
}

// SetFiltersMonitorAdsQueryParameter adds the filtersMonitorAds to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFiltersMonitorAdsQueryParameter(filtersMonitorAds *bool) {
	o.FiltersMonitorAdsQueryParameter = filtersMonitorAds
}

// WithFiltersOfflineBitQueryParameter adds the filtersOfflineBit to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFiltersOfflineBitQueryParameter(filtersOfflineBit *bool) *FpolicyEventCollectionGetParams {
	o.SetFiltersOfflineBitQueryParameter(filtersOfflineBit)
	return o
}

// SetFiltersOfflineBitQueryParameter adds the filtersOfflineBit to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFiltersOfflineBitQueryParameter(filtersOfflineBit *bool) {
	o.FiltersOfflineBitQueryParameter = filtersOfflineBit
}

// WithFiltersOpenWithDeleteIntentQueryParameter adds the filtersOpenWithDeleteIntent to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFiltersOpenWithDeleteIntentQueryParameter(filtersOpenWithDeleteIntent *bool) *FpolicyEventCollectionGetParams {
	o.SetFiltersOpenWithDeleteIntentQueryParameter(filtersOpenWithDeleteIntent)
	return o
}

// SetFiltersOpenWithDeleteIntentQueryParameter adds the filtersOpenWithDeleteIntent to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFiltersOpenWithDeleteIntentQueryParameter(filtersOpenWithDeleteIntent *bool) {
	o.FiltersOpenWithDeleteIntentQueryParameter = filtersOpenWithDeleteIntent
}

// WithFiltersOpenWithWriteIntentQueryParameter adds the filtersOpenWithWriteIntent to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFiltersOpenWithWriteIntentQueryParameter(filtersOpenWithWriteIntent *bool) *FpolicyEventCollectionGetParams {
	o.SetFiltersOpenWithWriteIntentQueryParameter(filtersOpenWithWriteIntent)
	return o
}

// SetFiltersOpenWithWriteIntentQueryParameter adds the filtersOpenWithWriteIntent to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFiltersOpenWithWriteIntentQueryParameter(filtersOpenWithWriteIntent *bool) {
	o.FiltersOpenWithWriteIntentQueryParameter = filtersOpenWithWriteIntent
}

// WithFiltersSetattrWithAccessTimeChangeQueryParameter adds the filtersSetattrWithAccessTimeChange to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFiltersSetattrWithAccessTimeChangeQueryParameter(filtersSetattrWithAccessTimeChange *bool) *FpolicyEventCollectionGetParams {
	o.SetFiltersSetattrWithAccessTimeChangeQueryParameter(filtersSetattrWithAccessTimeChange)
	return o
}

// SetFiltersSetattrWithAccessTimeChangeQueryParameter adds the filtersSetattrWithAccessTimeChange to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFiltersSetattrWithAccessTimeChangeQueryParameter(filtersSetattrWithAccessTimeChange *bool) {
	o.FiltersSetattrWithAccessTimeChangeQueryParameter = filtersSetattrWithAccessTimeChange
}

// WithFiltersSetattrWithAllocationSizeChangeQueryParameter adds the filtersSetattrWithAllocationSizeChange to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFiltersSetattrWithAllocationSizeChangeQueryParameter(filtersSetattrWithAllocationSizeChange *bool) *FpolicyEventCollectionGetParams {
	o.SetFiltersSetattrWithAllocationSizeChangeQueryParameter(filtersSetattrWithAllocationSizeChange)
	return o
}

// SetFiltersSetattrWithAllocationSizeChangeQueryParameter adds the filtersSetattrWithAllocationSizeChange to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFiltersSetattrWithAllocationSizeChangeQueryParameter(filtersSetattrWithAllocationSizeChange *bool) {
	o.FiltersSetattrWithAllocationSizeChangeQueryParameter = filtersSetattrWithAllocationSizeChange
}

// WithFiltersSetattrWithCreationTimeChangeQueryParameter adds the filtersSetattrWithCreationTimeChange to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFiltersSetattrWithCreationTimeChangeQueryParameter(filtersSetattrWithCreationTimeChange *bool) *FpolicyEventCollectionGetParams {
	o.SetFiltersSetattrWithCreationTimeChangeQueryParameter(filtersSetattrWithCreationTimeChange)
	return o
}

// SetFiltersSetattrWithCreationTimeChangeQueryParameter adds the filtersSetattrWithCreationTimeChange to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFiltersSetattrWithCreationTimeChangeQueryParameter(filtersSetattrWithCreationTimeChange *bool) {
	o.FiltersSetattrWithCreationTimeChangeQueryParameter = filtersSetattrWithCreationTimeChange
}

// WithFiltersSetattrWithDACLChangeQueryParameter adds the filtersSetattrWithDaclChange to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFiltersSetattrWithDACLChangeQueryParameter(filtersSetattrWithDaclChange *bool) *FpolicyEventCollectionGetParams {
	o.SetFiltersSetattrWithDACLChangeQueryParameter(filtersSetattrWithDaclChange)
	return o
}

// SetFiltersSetattrWithDACLChangeQueryParameter adds the filtersSetattrWithDaclChange to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFiltersSetattrWithDACLChangeQueryParameter(filtersSetattrWithDaclChange *bool) {
	o.FiltersSetattrWithDACLChangeQueryParameter = filtersSetattrWithDaclChange
}

// WithFiltersSetattrWithGroupChangeQueryParameter adds the filtersSetattrWithGroupChange to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFiltersSetattrWithGroupChangeQueryParameter(filtersSetattrWithGroupChange *bool) *FpolicyEventCollectionGetParams {
	o.SetFiltersSetattrWithGroupChangeQueryParameter(filtersSetattrWithGroupChange)
	return o
}

// SetFiltersSetattrWithGroupChangeQueryParameter adds the filtersSetattrWithGroupChange to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFiltersSetattrWithGroupChangeQueryParameter(filtersSetattrWithGroupChange *bool) {
	o.FiltersSetattrWithGroupChangeQueryParameter = filtersSetattrWithGroupChange
}

// WithFiltersSetattrWithModeChangeQueryParameter adds the filtersSetattrWithModeChange to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFiltersSetattrWithModeChangeQueryParameter(filtersSetattrWithModeChange *bool) *FpolicyEventCollectionGetParams {
	o.SetFiltersSetattrWithModeChangeQueryParameter(filtersSetattrWithModeChange)
	return o
}

// SetFiltersSetattrWithModeChangeQueryParameter adds the filtersSetattrWithModeChange to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFiltersSetattrWithModeChangeQueryParameter(filtersSetattrWithModeChange *bool) {
	o.FiltersSetattrWithModeChangeQueryParameter = filtersSetattrWithModeChange
}

// WithFiltersSetattrWithModifyTimeChangeQueryParameter adds the filtersSetattrWithModifyTimeChange to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFiltersSetattrWithModifyTimeChangeQueryParameter(filtersSetattrWithModifyTimeChange *bool) *FpolicyEventCollectionGetParams {
	o.SetFiltersSetattrWithModifyTimeChangeQueryParameter(filtersSetattrWithModifyTimeChange)
	return o
}

// SetFiltersSetattrWithModifyTimeChangeQueryParameter adds the filtersSetattrWithModifyTimeChange to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFiltersSetattrWithModifyTimeChangeQueryParameter(filtersSetattrWithModifyTimeChange *bool) {
	o.FiltersSetattrWithModifyTimeChangeQueryParameter = filtersSetattrWithModifyTimeChange
}

// WithFiltersSetattrWithOwnerChangeQueryParameter adds the filtersSetattrWithOwnerChange to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFiltersSetattrWithOwnerChangeQueryParameter(filtersSetattrWithOwnerChange *bool) *FpolicyEventCollectionGetParams {
	o.SetFiltersSetattrWithOwnerChangeQueryParameter(filtersSetattrWithOwnerChange)
	return o
}

// SetFiltersSetattrWithOwnerChangeQueryParameter adds the filtersSetattrWithOwnerChange to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFiltersSetattrWithOwnerChangeQueryParameter(filtersSetattrWithOwnerChange *bool) {
	o.FiltersSetattrWithOwnerChangeQueryParameter = filtersSetattrWithOwnerChange
}

// WithFiltersSetattrWithSACLChangeQueryParameter adds the filtersSetattrWithSaclChange to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFiltersSetattrWithSACLChangeQueryParameter(filtersSetattrWithSaclChange *bool) *FpolicyEventCollectionGetParams {
	o.SetFiltersSetattrWithSACLChangeQueryParameter(filtersSetattrWithSaclChange)
	return o
}

// SetFiltersSetattrWithSACLChangeQueryParameter adds the filtersSetattrWithSaclChange to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFiltersSetattrWithSACLChangeQueryParameter(filtersSetattrWithSaclChange *bool) {
	o.FiltersSetattrWithSACLChangeQueryParameter = filtersSetattrWithSaclChange
}

// WithFiltersSetattrWithSizeChangeQueryParameter adds the filtersSetattrWithSizeChange to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFiltersSetattrWithSizeChangeQueryParameter(filtersSetattrWithSizeChange *bool) *FpolicyEventCollectionGetParams {
	o.SetFiltersSetattrWithSizeChangeQueryParameter(filtersSetattrWithSizeChange)
	return o
}

// SetFiltersSetattrWithSizeChangeQueryParameter adds the filtersSetattrWithSizeChange to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFiltersSetattrWithSizeChangeQueryParameter(filtersSetattrWithSizeChange *bool) {
	o.FiltersSetattrWithSizeChangeQueryParameter = filtersSetattrWithSizeChange
}

// WithFiltersWriteWithSizeChangeQueryParameter adds the filtersWriteWithSizeChange to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithFiltersWriteWithSizeChangeQueryParameter(filtersWriteWithSizeChange *bool) *FpolicyEventCollectionGetParams {
	o.SetFiltersWriteWithSizeChangeQueryParameter(filtersWriteWithSizeChange)
	return o
}

// SetFiltersWriteWithSizeChangeQueryParameter adds the filtersWriteWithSizeChange to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetFiltersWriteWithSizeChangeQueryParameter(filtersWriteWithSizeChange *bool) {
	o.FiltersWriteWithSizeChangeQueryParameter = filtersWriteWithSizeChange
}

// WithMaxRecords adds the maxRecords to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithMaxRecords(maxRecords *int64) *FpolicyEventCollectionGetParams {
	o.SetMaxRecords(maxRecords)
	return o
}

// SetMaxRecords adds the maxRecords to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetMaxRecords(maxRecords *int64) {
	o.MaxRecords = maxRecords
}

// WithNameQueryParameter adds the name to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithNameQueryParameter(name *string) *FpolicyEventCollectionGetParams {
	o.SetNameQueryParameter(name)
	return o
}

// SetNameQueryParameter adds the name to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetNameQueryParameter(name *string) {
	o.NameQueryParameter = name
}

// WithOrderBy adds the orderBy to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithOrderBy(orderBy []string) *FpolicyEventCollectionGetParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetOrderBy(orderBy []string) {
	o.OrderBy = orderBy
}

// WithProtocolQueryParameter adds the protocol to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithProtocolQueryParameter(protocol *string) *FpolicyEventCollectionGetParams {
	o.SetProtocolQueryParameter(protocol)
	return o
}

// SetProtocolQueryParameter adds the protocol to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetProtocolQueryParameter(protocol *string) {
	o.ProtocolQueryParameter = protocol
}

// WithReturnRecords adds the returnRecords to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithReturnRecords(returnRecords *bool) *FpolicyEventCollectionGetParams {
	o.SetReturnRecords(returnRecords)
	return o
}

// SetReturnRecords adds the returnRecords to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetReturnRecords(returnRecords *bool) {
	o.ReturnRecords = returnRecords
}

// WithReturnTimeout adds the returnTimeout to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithReturnTimeout(returnTimeout *int64) *FpolicyEventCollectionGetParams {
	o.SetReturnTimeout(returnTimeout)
	return o
}

// SetReturnTimeout adds the returnTimeout to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetReturnTimeout(returnTimeout *int64) {
	o.ReturnTimeout = returnTimeout
}

// WithSvmUUID adds the svmUUID to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithSvmUUID(svmUUID string) *FpolicyEventCollectionGetParams {
	o.SetSvmUUID(svmUUID)
	return o
}

// SetSvmUUID adds the svmUuid to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetSvmUUID(svmUUID string) {
	o.SvmUUID = svmUUID
}

// WithVolumeMonitoringQueryParameter adds the volumeMonitoring to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) WithVolumeMonitoringQueryParameter(volumeMonitoring *bool) *FpolicyEventCollectionGetParams {
	o.SetVolumeMonitoringQueryParameter(volumeMonitoring)
	return o
}

// SetVolumeMonitoringQueryParameter adds the volumeMonitoring to the fpolicy event collection get params
func (o *FpolicyEventCollectionGetParams) SetVolumeMonitoringQueryParameter(volumeMonitoring *bool) {
	o.VolumeMonitoringQueryParameter = volumeMonitoring
}

// WriteToRequest writes these params to a swagger request
func (o *FpolicyEventCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.FileOperationsCloseQueryParameter != nil {

		// query param file_operations.close
		var qrFileOperationsClose bool

		if o.FileOperationsCloseQueryParameter != nil {
			qrFileOperationsClose = *o.FileOperationsCloseQueryParameter
		}
		qFileOperationsClose := swag.FormatBool(qrFileOperationsClose)
		if qFileOperationsClose != "" {

			if err := r.SetQueryParam("file_operations.close", qFileOperationsClose); err != nil {
				return err
			}
		}
	}

	if o.FileOperationsCreateQueryParameter != nil {

		// query param file_operations.create
		var qrFileOperationsCreate bool

		if o.FileOperationsCreateQueryParameter != nil {
			qrFileOperationsCreate = *o.FileOperationsCreateQueryParameter
		}
		qFileOperationsCreate := swag.FormatBool(qrFileOperationsCreate)
		if qFileOperationsCreate != "" {

			if err := r.SetQueryParam("file_operations.create", qFileOperationsCreate); err != nil {
				return err
			}
		}
	}

	if o.FileOperationsCreateDirQueryParameter != nil {

		// query param file_operations.create_dir
		var qrFileOperationsCreateDir bool

		if o.FileOperationsCreateDirQueryParameter != nil {
			qrFileOperationsCreateDir = *o.FileOperationsCreateDirQueryParameter
		}
		qFileOperationsCreateDir := swag.FormatBool(qrFileOperationsCreateDir)
		if qFileOperationsCreateDir != "" {

			if err := r.SetQueryParam("file_operations.create_dir", qFileOperationsCreateDir); err != nil {
				return err
			}
		}
	}

	if o.FileOperationsDeleteQueryParameter != nil {

		// query param file_operations.delete
		var qrFileOperationsDelete bool

		if o.FileOperationsDeleteQueryParameter != nil {
			qrFileOperationsDelete = *o.FileOperationsDeleteQueryParameter
		}
		qFileOperationsDelete := swag.FormatBool(qrFileOperationsDelete)
		if qFileOperationsDelete != "" {

			if err := r.SetQueryParam("file_operations.delete", qFileOperationsDelete); err != nil {
				return err
			}
		}
	}

	if o.FileOperationsDeleteDirQueryParameter != nil {

		// query param file_operations.delete_dir
		var qrFileOperationsDeleteDir bool

		if o.FileOperationsDeleteDirQueryParameter != nil {
			qrFileOperationsDeleteDir = *o.FileOperationsDeleteDirQueryParameter
		}
		qFileOperationsDeleteDir := swag.FormatBool(qrFileOperationsDeleteDir)
		if qFileOperationsDeleteDir != "" {

			if err := r.SetQueryParam("file_operations.delete_dir", qFileOperationsDeleteDir); err != nil {
				return err
			}
		}
	}

	if o.FileOperationsGetattrQueryParameter != nil {

		// query param file_operations.getattr
		var qrFileOperationsGetattr bool

		if o.FileOperationsGetattrQueryParameter != nil {
			qrFileOperationsGetattr = *o.FileOperationsGetattrQueryParameter
		}
		qFileOperationsGetattr := swag.FormatBool(qrFileOperationsGetattr)
		if qFileOperationsGetattr != "" {

			if err := r.SetQueryParam("file_operations.getattr", qFileOperationsGetattr); err != nil {
				return err
			}
		}
	}

	if o.FileOperationsLinkQueryParameter != nil {

		// query param file_operations.link
		var qrFileOperationsLink bool

		if o.FileOperationsLinkQueryParameter != nil {
			qrFileOperationsLink = *o.FileOperationsLinkQueryParameter
		}
		qFileOperationsLink := swag.FormatBool(qrFileOperationsLink)
		if qFileOperationsLink != "" {

			if err := r.SetQueryParam("file_operations.link", qFileOperationsLink); err != nil {
				return err
			}
		}
	}

	if o.FileOperationsLookupQueryParameter != nil {

		// query param file_operations.lookup
		var qrFileOperationsLookup bool

		if o.FileOperationsLookupQueryParameter != nil {
			qrFileOperationsLookup = *o.FileOperationsLookupQueryParameter
		}
		qFileOperationsLookup := swag.FormatBool(qrFileOperationsLookup)
		if qFileOperationsLookup != "" {

			if err := r.SetQueryParam("file_operations.lookup", qFileOperationsLookup); err != nil {
				return err
			}
		}
	}

	if o.FileOperationsOpenQueryParameter != nil {

		// query param file_operations.open
		var qrFileOperationsOpen bool

		if o.FileOperationsOpenQueryParameter != nil {
			qrFileOperationsOpen = *o.FileOperationsOpenQueryParameter
		}
		qFileOperationsOpen := swag.FormatBool(qrFileOperationsOpen)
		if qFileOperationsOpen != "" {

			if err := r.SetQueryParam("file_operations.open", qFileOperationsOpen); err != nil {
				return err
			}
		}
	}

	if o.FileOperationsReadQueryParameter != nil {

		// query param file_operations.read
		var qrFileOperationsRead bool

		if o.FileOperationsReadQueryParameter != nil {
			qrFileOperationsRead = *o.FileOperationsReadQueryParameter
		}
		qFileOperationsRead := swag.FormatBool(qrFileOperationsRead)
		if qFileOperationsRead != "" {

			if err := r.SetQueryParam("file_operations.read", qFileOperationsRead); err != nil {
				return err
			}
		}
	}

	if o.FileOperationsRenameQueryParameter != nil {

		// query param file_operations.rename
		var qrFileOperationsRename bool

		if o.FileOperationsRenameQueryParameter != nil {
			qrFileOperationsRename = *o.FileOperationsRenameQueryParameter
		}
		qFileOperationsRename := swag.FormatBool(qrFileOperationsRename)
		if qFileOperationsRename != "" {

			if err := r.SetQueryParam("file_operations.rename", qFileOperationsRename); err != nil {
				return err
			}
		}
	}

	if o.FileOperationsRenameDirQueryParameter != nil {

		// query param file_operations.rename_dir
		var qrFileOperationsRenameDir bool

		if o.FileOperationsRenameDirQueryParameter != nil {
			qrFileOperationsRenameDir = *o.FileOperationsRenameDirQueryParameter
		}
		qFileOperationsRenameDir := swag.FormatBool(qrFileOperationsRenameDir)
		if qFileOperationsRenameDir != "" {

			if err := r.SetQueryParam("file_operations.rename_dir", qFileOperationsRenameDir); err != nil {
				return err
			}
		}
	}

	if o.FileOperationsSetattrQueryParameter != nil {

		// query param file_operations.setattr
		var qrFileOperationsSetattr bool

		if o.FileOperationsSetattrQueryParameter != nil {
			qrFileOperationsSetattr = *o.FileOperationsSetattrQueryParameter
		}
		qFileOperationsSetattr := swag.FormatBool(qrFileOperationsSetattr)
		if qFileOperationsSetattr != "" {

			if err := r.SetQueryParam("file_operations.setattr", qFileOperationsSetattr); err != nil {
				return err
			}
		}
	}

	if o.FileOperationsSymlinkQueryParameter != nil {

		// query param file_operations.symlink
		var qrFileOperationsSymlink bool

		if o.FileOperationsSymlinkQueryParameter != nil {
			qrFileOperationsSymlink = *o.FileOperationsSymlinkQueryParameter
		}
		qFileOperationsSymlink := swag.FormatBool(qrFileOperationsSymlink)
		if qFileOperationsSymlink != "" {

			if err := r.SetQueryParam("file_operations.symlink", qFileOperationsSymlink); err != nil {
				return err
			}
		}
	}

	if o.FileOperationsWriteQueryParameter != nil {

		// query param file_operations.write
		var qrFileOperationsWrite bool

		if o.FileOperationsWriteQueryParameter != nil {
			qrFileOperationsWrite = *o.FileOperationsWriteQueryParameter
		}
		qFileOperationsWrite := swag.FormatBool(qrFileOperationsWrite)
		if qFileOperationsWrite != "" {

			if err := r.SetQueryParam("file_operations.write", qFileOperationsWrite); err != nil {
				return err
			}
		}
	}

	if o.FiltersCloseWithModificationQueryParameter != nil {

		// query param filters.close_with_modification
		var qrFiltersCloseWithModification bool

		if o.FiltersCloseWithModificationQueryParameter != nil {
			qrFiltersCloseWithModification = *o.FiltersCloseWithModificationQueryParameter
		}
		qFiltersCloseWithModification := swag.FormatBool(qrFiltersCloseWithModification)
		if qFiltersCloseWithModification != "" {

			if err := r.SetQueryParam("filters.close_with_modification", qFiltersCloseWithModification); err != nil {
				return err
			}
		}
	}

	if o.FiltersCloseWithReadQueryParameter != nil {

		// query param filters.close_with_read
		var qrFiltersCloseWithRead bool

		if o.FiltersCloseWithReadQueryParameter != nil {
			qrFiltersCloseWithRead = *o.FiltersCloseWithReadQueryParameter
		}
		qFiltersCloseWithRead := swag.FormatBool(qrFiltersCloseWithRead)
		if qFiltersCloseWithRead != "" {

			if err := r.SetQueryParam("filters.close_with_read", qFiltersCloseWithRead); err != nil {
				return err
			}
		}
	}

	if o.FiltersCloseWithoutModificationQueryParameter != nil {

		// query param filters.close_without_modification
		var qrFiltersCloseWithoutModification bool

		if o.FiltersCloseWithoutModificationQueryParameter != nil {
			qrFiltersCloseWithoutModification = *o.FiltersCloseWithoutModificationQueryParameter
		}
		qFiltersCloseWithoutModification := swag.FormatBool(qrFiltersCloseWithoutModification)
		if qFiltersCloseWithoutModification != "" {

			if err := r.SetQueryParam("filters.close_without_modification", qFiltersCloseWithoutModification); err != nil {
				return err
			}
		}
	}

	if o.FiltersExcludeDirectoryQueryParameter != nil {

		// query param filters.exclude_directory
		var qrFiltersExcludeDirectory bool

		if o.FiltersExcludeDirectoryQueryParameter != nil {
			qrFiltersExcludeDirectory = *o.FiltersExcludeDirectoryQueryParameter
		}
		qFiltersExcludeDirectory := swag.FormatBool(qrFiltersExcludeDirectory)
		if qFiltersExcludeDirectory != "" {

			if err := r.SetQueryParam("filters.exclude_directory", qFiltersExcludeDirectory); err != nil {
				return err
			}
		}
	}

	if o.FiltersFirstReadQueryParameter != nil {

		// query param filters.first_read
		var qrFiltersFirstRead bool

		if o.FiltersFirstReadQueryParameter != nil {
			qrFiltersFirstRead = *o.FiltersFirstReadQueryParameter
		}
		qFiltersFirstRead := swag.FormatBool(qrFiltersFirstRead)
		if qFiltersFirstRead != "" {

			if err := r.SetQueryParam("filters.first_read", qFiltersFirstRead); err != nil {
				return err
			}
		}
	}

	if o.FiltersFirstWriteQueryParameter != nil {

		// query param filters.first_write
		var qrFiltersFirstWrite bool

		if o.FiltersFirstWriteQueryParameter != nil {
			qrFiltersFirstWrite = *o.FiltersFirstWriteQueryParameter
		}
		qFiltersFirstWrite := swag.FormatBool(qrFiltersFirstWrite)
		if qFiltersFirstWrite != "" {

			if err := r.SetQueryParam("filters.first_write", qFiltersFirstWrite); err != nil {
				return err
			}
		}
	}

	if o.FiltersMonitorAdsQueryParameter != nil {

		// query param filters.monitor_ads
		var qrFiltersMonitorAds bool

		if o.FiltersMonitorAdsQueryParameter != nil {
			qrFiltersMonitorAds = *o.FiltersMonitorAdsQueryParameter
		}
		qFiltersMonitorAds := swag.FormatBool(qrFiltersMonitorAds)
		if qFiltersMonitorAds != "" {

			if err := r.SetQueryParam("filters.monitor_ads", qFiltersMonitorAds); err != nil {
				return err
			}
		}
	}

	if o.FiltersOfflineBitQueryParameter != nil {

		// query param filters.offline_bit
		var qrFiltersOfflineBit bool

		if o.FiltersOfflineBitQueryParameter != nil {
			qrFiltersOfflineBit = *o.FiltersOfflineBitQueryParameter
		}
		qFiltersOfflineBit := swag.FormatBool(qrFiltersOfflineBit)
		if qFiltersOfflineBit != "" {

			if err := r.SetQueryParam("filters.offline_bit", qFiltersOfflineBit); err != nil {
				return err
			}
		}
	}

	if o.FiltersOpenWithDeleteIntentQueryParameter != nil {

		// query param filters.open_with_delete_intent
		var qrFiltersOpenWithDeleteIntent bool

		if o.FiltersOpenWithDeleteIntentQueryParameter != nil {
			qrFiltersOpenWithDeleteIntent = *o.FiltersOpenWithDeleteIntentQueryParameter
		}
		qFiltersOpenWithDeleteIntent := swag.FormatBool(qrFiltersOpenWithDeleteIntent)
		if qFiltersOpenWithDeleteIntent != "" {

			if err := r.SetQueryParam("filters.open_with_delete_intent", qFiltersOpenWithDeleteIntent); err != nil {
				return err
			}
		}
	}

	if o.FiltersOpenWithWriteIntentQueryParameter != nil {

		// query param filters.open_with_write_intent
		var qrFiltersOpenWithWriteIntent bool

		if o.FiltersOpenWithWriteIntentQueryParameter != nil {
			qrFiltersOpenWithWriteIntent = *o.FiltersOpenWithWriteIntentQueryParameter
		}
		qFiltersOpenWithWriteIntent := swag.FormatBool(qrFiltersOpenWithWriteIntent)
		if qFiltersOpenWithWriteIntent != "" {

			if err := r.SetQueryParam("filters.open_with_write_intent", qFiltersOpenWithWriteIntent); err != nil {
				return err
			}
		}
	}

	if o.FiltersSetattrWithAccessTimeChangeQueryParameter != nil {

		// query param filters.setattr_with_access_time_change
		var qrFiltersSetattrWithAccessTimeChange bool

		if o.FiltersSetattrWithAccessTimeChangeQueryParameter != nil {
			qrFiltersSetattrWithAccessTimeChange = *o.FiltersSetattrWithAccessTimeChangeQueryParameter
		}
		qFiltersSetattrWithAccessTimeChange := swag.FormatBool(qrFiltersSetattrWithAccessTimeChange)
		if qFiltersSetattrWithAccessTimeChange != "" {

			if err := r.SetQueryParam("filters.setattr_with_access_time_change", qFiltersSetattrWithAccessTimeChange); err != nil {
				return err
			}
		}
	}

	if o.FiltersSetattrWithAllocationSizeChangeQueryParameter != nil {

		// query param filters.setattr_with_allocation_size_change
		var qrFiltersSetattrWithAllocationSizeChange bool

		if o.FiltersSetattrWithAllocationSizeChangeQueryParameter != nil {
			qrFiltersSetattrWithAllocationSizeChange = *o.FiltersSetattrWithAllocationSizeChangeQueryParameter
		}
		qFiltersSetattrWithAllocationSizeChange := swag.FormatBool(qrFiltersSetattrWithAllocationSizeChange)
		if qFiltersSetattrWithAllocationSizeChange != "" {

			if err := r.SetQueryParam("filters.setattr_with_allocation_size_change", qFiltersSetattrWithAllocationSizeChange); err != nil {
				return err
			}
		}
	}

	if o.FiltersSetattrWithCreationTimeChangeQueryParameter != nil {

		// query param filters.setattr_with_creation_time_change
		var qrFiltersSetattrWithCreationTimeChange bool

		if o.FiltersSetattrWithCreationTimeChangeQueryParameter != nil {
			qrFiltersSetattrWithCreationTimeChange = *o.FiltersSetattrWithCreationTimeChangeQueryParameter
		}
		qFiltersSetattrWithCreationTimeChange := swag.FormatBool(qrFiltersSetattrWithCreationTimeChange)
		if qFiltersSetattrWithCreationTimeChange != "" {

			if err := r.SetQueryParam("filters.setattr_with_creation_time_change", qFiltersSetattrWithCreationTimeChange); err != nil {
				return err
			}
		}
	}

	if o.FiltersSetattrWithDACLChangeQueryParameter != nil {

		// query param filters.setattr_with_dacl_change
		var qrFiltersSetattrWithDaclChange bool

		if o.FiltersSetattrWithDACLChangeQueryParameter != nil {
			qrFiltersSetattrWithDaclChange = *o.FiltersSetattrWithDACLChangeQueryParameter
		}
		qFiltersSetattrWithDaclChange := swag.FormatBool(qrFiltersSetattrWithDaclChange)
		if qFiltersSetattrWithDaclChange != "" {

			if err := r.SetQueryParam("filters.setattr_with_dacl_change", qFiltersSetattrWithDaclChange); err != nil {
				return err
			}
		}
	}

	if o.FiltersSetattrWithGroupChangeQueryParameter != nil {

		// query param filters.setattr_with_group_change
		var qrFiltersSetattrWithGroupChange bool

		if o.FiltersSetattrWithGroupChangeQueryParameter != nil {
			qrFiltersSetattrWithGroupChange = *o.FiltersSetattrWithGroupChangeQueryParameter
		}
		qFiltersSetattrWithGroupChange := swag.FormatBool(qrFiltersSetattrWithGroupChange)
		if qFiltersSetattrWithGroupChange != "" {

			if err := r.SetQueryParam("filters.setattr_with_group_change", qFiltersSetattrWithGroupChange); err != nil {
				return err
			}
		}
	}

	if o.FiltersSetattrWithModeChangeQueryParameter != nil {

		// query param filters.setattr_with_mode_change
		var qrFiltersSetattrWithModeChange bool

		if o.FiltersSetattrWithModeChangeQueryParameter != nil {
			qrFiltersSetattrWithModeChange = *o.FiltersSetattrWithModeChangeQueryParameter
		}
		qFiltersSetattrWithModeChange := swag.FormatBool(qrFiltersSetattrWithModeChange)
		if qFiltersSetattrWithModeChange != "" {

			if err := r.SetQueryParam("filters.setattr_with_mode_change", qFiltersSetattrWithModeChange); err != nil {
				return err
			}
		}
	}

	if o.FiltersSetattrWithModifyTimeChangeQueryParameter != nil {

		// query param filters.setattr_with_modify_time_change
		var qrFiltersSetattrWithModifyTimeChange bool

		if o.FiltersSetattrWithModifyTimeChangeQueryParameter != nil {
			qrFiltersSetattrWithModifyTimeChange = *o.FiltersSetattrWithModifyTimeChangeQueryParameter
		}
		qFiltersSetattrWithModifyTimeChange := swag.FormatBool(qrFiltersSetattrWithModifyTimeChange)
		if qFiltersSetattrWithModifyTimeChange != "" {

			if err := r.SetQueryParam("filters.setattr_with_modify_time_change", qFiltersSetattrWithModifyTimeChange); err != nil {
				return err
			}
		}
	}

	if o.FiltersSetattrWithOwnerChangeQueryParameter != nil {

		// query param filters.setattr_with_owner_change
		var qrFiltersSetattrWithOwnerChange bool

		if o.FiltersSetattrWithOwnerChangeQueryParameter != nil {
			qrFiltersSetattrWithOwnerChange = *o.FiltersSetattrWithOwnerChangeQueryParameter
		}
		qFiltersSetattrWithOwnerChange := swag.FormatBool(qrFiltersSetattrWithOwnerChange)
		if qFiltersSetattrWithOwnerChange != "" {

			if err := r.SetQueryParam("filters.setattr_with_owner_change", qFiltersSetattrWithOwnerChange); err != nil {
				return err
			}
		}
	}

	if o.FiltersSetattrWithSACLChangeQueryParameter != nil {

		// query param filters.setattr_with_sacl_change
		var qrFiltersSetattrWithSaclChange bool

		if o.FiltersSetattrWithSACLChangeQueryParameter != nil {
			qrFiltersSetattrWithSaclChange = *o.FiltersSetattrWithSACLChangeQueryParameter
		}
		qFiltersSetattrWithSaclChange := swag.FormatBool(qrFiltersSetattrWithSaclChange)
		if qFiltersSetattrWithSaclChange != "" {

			if err := r.SetQueryParam("filters.setattr_with_sacl_change", qFiltersSetattrWithSaclChange); err != nil {
				return err
			}
		}
	}

	if o.FiltersSetattrWithSizeChangeQueryParameter != nil {

		// query param filters.setattr_with_size_change
		var qrFiltersSetattrWithSizeChange bool

		if o.FiltersSetattrWithSizeChangeQueryParameter != nil {
			qrFiltersSetattrWithSizeChange = *o.FiltersSetattrWithSizeChangeQueryParameter
		}
		qFiltersSetattrWithSizeChange := swag.FormatBool(qrFiltersSetattrWithSizeChange)
		if qFiltersSetattrWithSizeChange != "" {

			if err := r.SetQueryParam("filters.setattr_with_size_change", qFiltersSetattrWithSizeChange); err != nil {
				return err
			}
		}
	}

	if o.FiltersWriteWithSizeChangeQueryParameter != nil {

		// query param filters.write_with_size_change
		var qrFiltersWriteWithSizeChange bool

		if o.FiltersWriteWithSizeChangeQueryParameter != nil {
			qrFiltersWriteWithSizeChange = *o.FiltersWriteWithSizeChangeQueryParameter
		}
		qFiltersWriteWithSizeChange := swag.FormatBool(qrFiltersWriteWithSizeChange)
		if qFiltersWriteWithSizeChange != "" {

			if err := r.SetQueryParam("filters.write_with_size_change", qFiltersWriteWithSizeChange); err != nil {
				return err
			}
		}
	}

	if o.MaxRecords != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecords != nil {
			qrMaxRecords = *o.MaxRecords
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.NameQueryParameter != nil {

		// query param name
		var qrName string

		if o.NameQueryParameter != nil {
			qrName = *o.NameQueryParameter
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.OrderBy != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.ProtocolQueryParameter != nil {

		// query param protocol
		var qrProtocol string

		if o.ProtocolQueryParameter != nil {
			qrProtocol = *o.ProtocolQueryParameter
		}
		qProtocol := qrProtocol
		if qProtocol != "" {

			if err := r.SetQueryParam("protocol", qProtocol); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecords != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecords != nil {
			qrReturnRecords = *o.ReturnRecords
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeout != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeout != nil {
			qrReturnTimeout = *o.ReturnTimeout
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	// path param svm.uuid
	if err := r.SetPathParam("svm.uuid", o.SvmUUID); err != nil {
		return err
	}

	if o.VolumeMonitoringQueryParameter != nil {

		// query param volume_monitoring
		var qrVolumeMonitoring bool

		if o.VolumeMonitoringQueryParameter != nil {
			qrVolumeMonitoring = *o.VolumeMonitoringQueryParameter
		}
		qVolumeMonitoring := swag.FormatBool(qrVolumeMonitoring)
		if qVolumeMonitoring != "" {

			if err := r.SetQueryParam("volume_monitoring", qVolumeMonitoring); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamFpolicyEventCollectionGet binds the parameter fields
func (o *FpolicyEventCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamFpolicyEventCollectionGet binds the parameter order_by
func (o *FpolicyEventCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderBy

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
