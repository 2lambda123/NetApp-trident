// Code generated by go-swagger; DO NOT EDIT.

package n_a_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewEffectivePermissionGetParams creates a new EffectivePermissionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewEffectivePermissionGetParams() *EffectivePermissionGetParams {
	return &EffectivePermissionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewEffectivePermissionGetParamsWithTimeout creates a new EffectivePermissionGetParams object
// with the ability to set a timeout on a request.
func NewEffectivePermissionGetParamsWithTimeout(timeout time.Duration) *EffectivePermissionGetParams {
	return &EffectivePermissionGetParams{
		timeout: timeout,
	}
}

// NewEffectivePermissionGetParamsWithContext creates a new EffectivePermissionGetParams object
// with the ability to set a context for a request.
func NewEffectivePermissionGetParamsWithContext(ctx context.Context) *EffectivePermissionGetParams {
	return &EffectivePermissionGetParams{
		Context: ctx,
	}
}

// NewEffectivePermissionGetParamsWithHTTPClient creates a new EffectivePermissionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewEffectivePermissionGetParamsWithHTTPClient(client *http.Client) *EffectivePermissionGetParams {
	return &EffectivePermissionGetParams{
		HTTPClient: client,
	}
}

/* EffectivePermissionGetParams contains all the parameters to send to the API endpoint
   for the effective permission get operation.

   Typically these are written to a http.Request.
*/
type EffectivePermissionGetParams struct {

	/* Fields.

	   Specify the fields to return.
	*/
	FieldsQueryParameter []string

	/* Path.

	   File Path
	*/
	PathPathParameter string

	/* ShareName.

	   Share Name
	*/
	ShareNameQueryParameter *string

	/* SvmUUID.

	   UUID of the SVM to which this object belongs.
	*/
	SVMUUIDPathParameter string

	/* Type.

	   User Type
	*/
	TypeQueryParameter *string

	/* User.

	   User_Name
	*/
	UserQueryParameter string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the effective permission get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *EffectivePermissionGetParams) WithDefaults() *EffectivePermissionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the effective permission get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *EffectivePermissionGetParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the effective permission get params
func (o *EffectivePermissionGetParams) WithTimeout(timeout time.Duration) *EffectivePermissionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the effective permission get params
func (o *EffectivePermissionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the effective permission get params
func (o *EffectivePermissionGetParams) WithContext(ctx context.Context) *EffectivePermissionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the effective permission get params
func (o *EffectivePermissionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the effective permission get params
func (o *EffectivePermissionGetParams) WithHTTPClient(client *http.Client) *EffectivePermissionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the effective permission get params
func (o *EffectivePermissionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFieldsQueryParameter adds the fields to the effective permission get params
func (o *EffectivePermissionGetParams) WithFieldsQueryParameter(fields []string) *EffectivePermissionGetParams {
	o.SetFieldsQueryParameter(fields)
	return o
}

// SetFieldsQueryParameter adds the fields to the effective permission get params
func (o *EffectivePermissionGetParams) SetFieldsQueryParameter(fields []string) {
	o.FieldsQueryParameter = fields
}

// WithPathPathParameter adds the path to the effective permission get params
func (o *EffectivePermissionGetParams) WithPathPathParameter(path string) *EffectivePermissionGetParams {
	o.SetPathPathParameter(path)
	return o
}

// SetPathPathParameter adds the path to the effective permission get params
func (o *EffectivePermissionGetParams) SetPathPathParameter(path string) {
	o.PathPathParameter = path
}

// WithShareNameQueryParameter adds the shareName to the effective permission get params
func (o *EffectivePermissionGetParams) WithShareNameQueryParameter(shareName *string) *EffectivePermissionGetParams {
	o.SetShareNameQueryParameter(shareName)
	return o
}

// SetShareNameQueryParameter adds the shareName to the effective permission get params
func (o *EffectivePermissionGetParams) SetShareNameQueryParameter(shareName *string) {
	o.ShareNameQueryParameter = shareName
}

// WithSVMUUIDPathParameter adds the svmUUID to the effective permission get params
func (o *EffectivePermissionGetParams) WithSVMUUIDPathParameter(svmUUID string) *EffectivePermissionGetParams {
	o.SetSVMUUIDPathParameter(svmUUID)
	return o
}

// SetSVMUUIDPathParameter adds the svmUuid to the effective permission get params
func (o *EffectivePermissionGetParams) SetSVMUUIDPathParameter(svmUUID string) {
	o.SVMUUIDPathParameter = svmUUID
}

// WithTypeQueryParameter adds the typeVar to the effective permission get params
func (o *EffectivePermissionGetParams) WithTypeQueryParameter(typeVar *string) *EffectivePermissionGetParams {
	o.SetTypeQueryParameter(typeVar)
	return o
}

// SetTypeQueryParameter adds the type to the effective permission get params
func (o *EffectivePermissionGetParams) SetTypeQueryParameter(typeVar *string) {
	o.TypeQueryParameter = typeVar
}

// WithUserQueryParameter adds the user to the effective permission get params
func (o *EffectivePermissionGetParams) WithUserQueryParameter(user string) *EffectivePermissionGetParams {
	o.SetUserQueryParameter(user)
	return o
}

// SetUserQueryParameter adds the user to the effective permission get params
func (o *EffectivePermissionGetParams) SetUserQueryParameter(user string) {
	o.UserQueryParameter = user
}

// WriteToRequest writes these params to a swagger request
func (o *EffectivePermissionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FieldsQueryParameter != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	// path param path
	if err := r.SetPathParam("path", o.PathPathParameter); err != nil {
		return err
	}

	if o.ShareNameQueryParameter != nil {

		// query param share.name
		var qrShareName string

		if o.ShareNameQueryParameter != nil {
			qrShareName = *o.ShareNameQueryParameter
		}
		qShareName := qrShareName
		if qShareName != "" {

			if err := r.SetQueryParam("share.name", qShareName); err != nil {
				return err
			}
		}
	}

	// path param svm.uuid
	if err := r.SetPathParam("svm.uuid", o.SVMUUIDPathParameter); err != nil {
		return err
	}

	if o.TypeQueryParameter != nil {

		// query param type
		var qrType string

		if o.TypeQueryParameter != nil {
			qrType = *o.TypeQueryParameter
		}
		qType := qrType
		if qType != "" {

			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}
	}

	// query param user
	qrUser := o.UserQueryParameter
	qUser := qrUser
	if qUser != "" {

		if err := r.SetQueryParam("user", qUser); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamEffectivePermissionGet binds the parameter fields
func (o *EffectivePermissionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.FieldsQueryParameter

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}
