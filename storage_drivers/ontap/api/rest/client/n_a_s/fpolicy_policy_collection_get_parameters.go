// Code generated by go-swagger; DO NOT EDIT.

package n_a_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewFpolicyPolicyCollectionGetParams creates a new FpolicyPolicyCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewFpolicyPolicyCollectionGetParams() *FpolicyPolicyCollectionGetParams {
	return &FpolicyPolicyCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewFpolicyPolicyCollectionGetParamsWithTimeout creates a new FpolicyPolicyCollectionGetParams object
// with the ability to set a timeout on a request.
func NewFpolicyPolicyCollectionGetParamsWithTimeout(timeout time.Duration) *FpolicyPolicyCollectionGetParams {
	return &FpolicyPolicyCollectionGetParams{
		timeout: timeout,
	}
}

// NewFpolicyPolicyCollectionGetParamsWithContext creates a new FpolicyPolicyCollectionGetParams object
// with the ability to set a context for a request.
func NewFpolicyPolicyCollectionGetParamsWithContext(ctx context.Context) *FpolicyPolicyCollectionGetParams {
	return &FpolicyPolicyCollectionGetParams{
		Context: ctx,
	}
}

// NewFpolicyPolicyCollectionGetParamsWithHTTPClient creates a new FpolicyPolicyCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewFpolicyPolicyCollectionGetParamsWithHTTPClient(client *http.Client) *FpolicyPolicyCollectionGetParams {
	return &FpolicyPolicyCollectionGetParams{
		HTTPClient: client,
	}
}

/* FpolicyPolicyCollectionGetParams contains all the parameters to send to the API endpoint
   for the fpolicy policy collection get operation.

   Typically these are written to a http.Request.
*/
type FpolicyPolicyCollectionGetParams struct {

	/* Enabled.

	   Filter by enabled
	*/
	EnabledQueryParameter *bool

	/* EngineName.

	   Filter by engine.name
	*/
	EngineNameQueryParameter *string

	/* EventsName.

	   Filter by events.name
	*/
	EventsNameQueryParameter *string

	/* Fields.

	   Specify the fields to return.
	*/
	Fields []string

	/* Mandatory.

	   Filter by mandatory
	*/
	MandatoryQueryParameter *bool

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecords *int64

	/* Name.

	   Filter by name
	*/
	NameQueryParameter *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderBy []string

	/* Priority.

	   Filter by priority
	*/
	PriorityQueryParameter *int64

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecords *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeout *int64

	/* ScopeExcludeExportPolicies.

	   Filter by scope.exclude_export_policies
	*/
	ScopeExcludeExportPoliciesQueryParameter *string

	/* ScopeExcludeExtension.

	   Filter by scope.exclude_extension
	*/
	ScopeExcludeExtensionQueryParameter *string

	/* ScopeExcludeShares.

	   Filter by scope.exclude_shares
	*/
	ScopeExcludeSharesQueryParameter *string

	/* ScopeExcludeVolumes.

	   Filter by scope.exclude_volumes
	*/
	ScopeExcludeVolumesQueryParameter *string

	/* ScopeIncludeExportPolicies.

	   Filter by scope.include_export_policies
	*/
	ScopeIncludeExportPoliciesQueryParameter *string

	/* ScopeIncludeExtension.

	   Filter by scope.include_extension
	*/
	ScopeIncludeExtensionQueryParameter *string

	/* ScopeIncludeShares.

	   Filter by scope.include_shares
	*/
	ScopeIncludeSharesQueryParameter *string

	/* ScopeIncludeVolumes.

	   Filter by scope.include_volumes
	*/
	ScopeIncludeVolumesQueryParameter *string

	/* SvmUUID.

	   UUID of the SVM to which this object belongs.
	*/
	SvmUUID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the fpolicy policy collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FpolicyPolicyCollectionGetParams) WithDefaults() *FpolicyPolicyCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the fpolicy policy collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FpolicyPolicyCollectionGetParams) SetDefaults() {
	var (
		returnRecordsDefault = bool(true)

		returnTimeoutDefault = int64(15)
	)

	val := FpolicyPolicyCollectionGetParams{
		ReturnRecords: &returnRecordsDefault,
		ReturnTimeout: &returnTimeoutDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the fpolicy policy collection get params
func (o *FpolicyPolicyCollectionGetParams) WithTimeout(timeout time.Duration) *FpolicyPolicyCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the fpolicy policy collection get params
func (o *FpolicyPolicyCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the fpolicy policy collection get params
func (o *FpolicyPolicyCollectionGetParams) WithContext(ctx context.Context) *FpolicyPolicyCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the fpolicy policy collection get params
func (o *FpolicyPolicyCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the fpolicy policy collection get params
func (o *FpolicyPolicyCollectionGetParams) WithHTTPClient(client *http.Client) *FpolicyPolicyCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the fpolicy policy collection get params
func (o *FpolicyPolicyCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEnabledQueryParameter adds the enabled to the fpolicy policy collection get params
func (o *FpolicyPolicyCollectionGetParams) WithEnabledQueryParameter(enabled *bool) *FpolicyPolicyCollectionGetParams {
	o.SetEnabledQueryParameter(enabled)
	return o
}

// SetEnabledQueryParameter adds the enabled to the fpolicy policy collection get params
func (o *FpolicyPolicyCollectionGetParams) SetEnabledQueryParameter(enabled *bool) {
	o.EnabledQueryParameter = enabled
}

// WithEngineNameQueryParameter adds the engineName to the fpolicy policy collection get params
func (o *FpolicyPolicyCollectionGetParams) WithEngineNameQueryParameter(engineName *string) *FpolicyPolicyCollectionGetParams {
	o.SetEngineNameQueryParameter(engineName)
	return o
}

// SetEngineNameQueryParameter adds the engineName to the fpolicy policy collection get params
func (o *FpolicyPolicyCollectionGetParams) SetEngineNameQueryParameter(engineName *string) {
	o.EngineNameQueryParameter = engineName
}

// WithEventsNameQueryParameter adds the eventsName to the fpolicy policy collection get params
func (o *FpolicyPolicyCollectionGetParams) WithEventsNameQueryParameter(eventsName *string) *FpolicyPolicyCollectionGetParams {
	o.SetEventsNameQueryParameter(eventsName)
	return o
}

// SetEventsNameQueryParameter adds the eventsName to the fpolicy policy collection get params
func (o *FpolicyPolicyCollectionGetParams) SetEventsNameQueryParameter(eventsName *string) {
	o.EventsNameQueryParameter = eventsName
}

// WithFields adds the fields to the fpolicy policy collection get params
func (o *FpolicyPolicyCollectionGetParams) WithFields(fields []string) *FpolicyPolicyCollectionGetParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the fpolicy policy collection get params
func (o *FpolicyPolicyCollectionGetParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithMandatoryQueryParameter adds the mandatory to the fpolicy policy collection get params
func (o *FpolicyPolicyCollectionGetParams) WithMandatoryQueryParameter(mandatory *bool) *FpolicyPolicyCollectionGetParams {
	o.SetMandatoryQueryParameter(mandatory)
	return o
}

// SetMandatoryQueryParameter adds the mandatory to the fpolicy policy collection get params
func (o *FpolicyPolicyCollectionGetParams) SetMandatoryQueryParameter(mandatory *bool) {
	o.MandatoryQueryParameter = mandatory
}

// WithMaxRecords adds the maxRecords to the fpolicy policy collection get params
func (o *FpolicyPolicyCollectionGetParams) WithMaxRecords(maxRecords *int64) *FpolicyPolicyCollectionGetParams {
	o.SetMaxRecords(maxRecords)
	return o
}

// SetMaxRecords adds the maxRecords to the fpolicy policy collection get params
func (o *FpolicyPolicyCollectionGetParams) SetMaxRecords(maxRecords *int64) {
	o.MaxRecords = maxRecords
}

// WithNameQueryParameter adds the name to the fpolicy policy collection get params
func (o *FpolicyPolicyCollectionGetParams) WithNameQueryParameter(name *string) *FpolicyPolicyCollectionGetParams {
	o.SetNameQueryParameter(name)
	return o
}

// SetNameQueryParameter adds the name to the fpolicy policy collection get params
func (o *FpolicyPolicyCollectionGetParams) SetNameQueryParameter(name *string) {
	o.NameQueryParameter = name
}

// WithOrderBy adds the orderBy to the fpolicy policy collection get params
func (o *FpolicyPolicyCollectionGetParams) WithOrderBy(orderBy []string) *FpolicyPolicyCollectionGetParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the fpolicy policy collection get params
func (o *FpolicyPolicyCollectionGetParams) SetOrderBy(orderBy []string) {
	o.OrderBy = orderBy
}

// WithPriorityQueryParameter adds the priority to the fpolicy policy collection get params
func (o *FpolicyPolicyCollectionGetParams) WithPriorityQueryParameter(priority *int64) *FpolicyPolicyCollectionGetParams {
	o.SetPriorityQueryParameter(priority)
	return o
}

// SetPriorityQueryParameter adds the priority to the fpolicy policy collection get params
func (o *FpolicyPolicyCollectionGetParams) SetPriorityQueryParameter(priority *int64) {
	o.PriorityQueryParameter = priority
}

// WithReturnRecords adds the returnRecords to the fpolicy policy collection get params
func (o *FpolicyPolicyCollectionGetParams) WithReturnRecords(returnRecords *bool) *FpolicyPolicyCollectionGetParams {
	o.SetReturnRecords(returnRecords)
	return o
}

// SetReturnRecords adds the returnRecords to the fpolicy policy collection get params
func (o *FpolicyPolicyCollectionGetParams) SetReturnRecords(returnRecords *bool) {
	o.ReturnRecords = returnRecords
}

// WithReturnTimeout adds the returnTimeout to the fpolicy policy collection get params
func (o *FpolicyPolicyCollectionGetParams) WithReturnTimeout(returnTimeout *int64) *FpolicyPolicyCollectionGetParams {
	o.SetReturnTimeout(returnTimeout)
	return o
}

// SetReturnTimeout adds the returnTimeout to the fpolicy policy collection get params
func (o *FpolicyPolicyCollectionGetParams) SetReturnTimeout(returnTimeout *int64) {
	o.ReturnTimeout = returnTimeout
}

// WithScopeExcludeExportPoliciesQueryParameter adds the scopeExcludeExportPolicies to the fpolicy policy collection get params
func (o *FpolicyPolicyCollectionGetParams) WithScopeExcludeExportPoliciesQueryParameter(scopeExcludeExportPolicies *string) *FpolicyPolicyCollectionGetParams {
	o.SetScopeExcludeExportPoliciesQueryParameter(scopeExcludeExportPolicies)
	return o
}

// SetScopeExcludeExportPoliciesQueryParameter adds the scopeExcludeExportPolicies to the fpolicy policy collection get params
func (o *FpolicyPolicyCollectionGetParams) SetScopeExcludeExportPoliciesQueryParameter(scopeExcludeExportPolicies *string) {
	o.ScopeExcludeExportPoliciesQueryParameter = scopeExcludeExportPolicies
}

// WithScopeExcludeExtensionQueryParameter adds the scopeExcludeExtension to the fpolicy policy collection get params
func (o *FpolicyPolicyCollectionGetParams) WithScopeExcludeExtensionQueryParameter(scopeExcludeExtension *string) *FpolicyPolicyCollectionGetParams {
	o.SetScopeExcludeExtensionQueryParameter(scopeExcludeExtension)
	return o
}

// SetScopeExcludeExtensionQueryParameter adds the scopeExcludeExtension to the fpolicy policy collection get params
func (o *FpolicyPolicyCollectionGetParams) SetScopeExcludeExtensionQueryParameter(scopeExcludeExtension *string) {
	o.ScopeExcludeExtensionQueryParameter = scopeExcludeExtension
}

// WithScopeExcludeSharesQueryParameter adds the scopeExcludeShares to the fpolicy policy collection get params
func (o *FpolicyPolicyCollectionGetParams) WithScopeExcludeSharesQueryParameter(scopeExcludeShares *string) *FpolicyPolicyCollectionGetParams {
	o.SetScopeExcludeSharesQueryParameter(scopeExcludeShares)
	return o
}

// SetScopeExcludeSharesQueryParameter adds the scopeExcludeShares to the fpolicy policy collection get params
func (o *FpolicyPolicyCollectionGetParams) SetScopeExcludeSharesQueryParameter(scopeExcludeShares *string) {
	o.ScopeExcludeSharesQueryParameter = scopeExcludeShares
}

// WithScopeExcludeVolumesQueryParameter adds the scopeExcludeVolumes to the fpolicy policy collection get params
func (o *FpolicyPolicyCollectionGetParams) WithScopeExcludeVolumesQueryParameter(scopeExcludeVolumes *string) *FpolicyPolicyCollectionGetParams {
	o.SetScopeExcludeVolumesQueryParameter(scopeExcludeVolumes)
	return o
}

// SetScopeExcludeVolumesQueryParameter adds the scopeExcludeVolumes to the fpolicy policy collection get params
func (o *FpolicyPolicyCollectionGetParams) SetScopeExcludeVolumesQueryParameter(scopeExcludeVolumes *string) {
	o.ScopeExcludeVolumesQueryParameter = scopeExcludeVolumes
}

// WithScopeIncludeExportPoliciesQueryParameter adds the scopeIncludeExportPolicies to the fpolicy policy collection get params
func (o *FpolicyPolicyCollectionGetParams) WithScopeIncludeExportPoliciesQueryParameter(scopeIncludeExportPolicies *string) *FpolicyPolicyCollectionGetParams {
	o.SetScopeIncludeExportPoliciesQueryParameter(scopeIncludeExportPolicies)
	return o
}

// SetScopeIncludeExportPoliciesQueryParameter adds the scopeIncludeExportPolicies to the fpolicy policy collection get params
func (o *FpolicyPolicyCollectionGetParams) SetScopeIncludeExportPoliciesQueryParameter(scopeIncludeExportPolicies *string) {
	o.ScopeIncludeExportPoliciesQueryParameter = scopeIncludeExportPolicies
}

// WithScopeIncludeExtensionQueryParameter adds the scopeIncludeExtension to the fpolicy policy collection get params
func (o *FpolicyPolicyCollectionGetParams) WithScopeIncludeExtensionQueryParameter(scopeIncludeExtension *string) *FpolicyPolicyCollectionGetParams {
	o.SetScopeIncludeExtensionQueryParameter(scopeIncludeExtension)
	return o
}

// SetScopeIncludeExtensionQueryParameter adds the scopeIncludeExtension to the fpolicy policy collection get params
func (o *FpolicyPolicyCollectionGetParams) SetScopeIncludeExtensionQueryParameter(scopeIncludeExtension *string) {
	o.ScopeIncludeExtensionQueryParameter = scopeIncludeExtension
}

// WithScopeIncludeSharesQueryParameter adds the scopeIncludeShares to the fpolicy policy collection get params
func (o *FpolicyPolicyCollectionGetParams) WithScopeIncludeSharesQueryParameter(scopeIncludeShares *string) *FpolicyPolicyCollectionGetParams {
	o.SetScopeIncludeSharesQueryParameter(scopeIncludeShares)
	return o
}

// SetScopeIncludeSharesQueryParameter adds the scopeIncludeShares to the fpolicy policy collection get params
func (o *FpolicyPolicyCollectionGetParams) SetScopeIncludeSharesQueryParameter(scopeIncludeShares *string) {
	o.ScopeIncludeSharesQueryParameter = scopeIncludeShares
}

// WithScopeIncludeVolumesQueryParameter adds the scopeIncludeVolumes to the fpolicy policy collection get params
func (o *FpolicyPolicyCollectionGetParams) WithScopeIncludeVolumesQueryParameter(scopeIncludeVolumes *string) *FpolicyPolicyCollectionGetParams {
	o.SetScopeIncludeVolumesQueryParameter(scopeIncludeVolumes)
	return o
}

// SetScopeIncludeVolumesQueryParameter adds the scopeIncludeVolumes to the fpolicy policy collection get params
func (o *FpolicyPolicyCollectionGetParams) SetScopeIncludeVolumesQueryParameter(scopeIncludeVolumes *string) {
	o.ScopeIncludeVolumesQueryParameter = scopeIncludeVolumes
}

// WithSvmUUID adds the svmUUID to the fpolicy policy collection get params
func (o *FpolicyPolicyCollectionGetParams) WithSvmUUID(svmUUID string) *FpolicyPolicyCollectionGetParams {
	o.SetSvmUUID(svmUUID)
	return o
}

// SetSvmUUID adds the svmUuid to the fpolicy policy collection get params
func (o *FpolicyPolicyCollectionGetParams) SetSvmUUID(svmUUID string) {
	o.SvmUUID = svmUUID
}

// WriteToRequest writes these params to a swagger request
func (o *FpolicyPolicyCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EnabledQueryParameter != nil {

		// query param enabled
		var qrEnabled bool

		if o.EnabledQueryParameter != nil {
			qrEnabled = *o.EnabledQueryParameter
		}
		qEnabled := swag.FormatBool(qrEnabled)
		if qEnabled != "" {

			if err := r.SetQueryParam("enabled", qEnabled); err != nil {
				return err
			}
		}
	}

	if o.EngineNameQueryParameter != nil {

		// query param engine.name
		var qrEngineName string

		if o.EngineNameQueryParameter != nil {
			qrEngineName = *o.EngineNameQueryParameter
		}
		qEngineName := qrEngineName
		if qEngineName != "" {

			if err := r.SetQueryParam("engine.name", qEngineName); err != nil {
				return err
			}
		}
	}

	if o.EventsNameQueryParameter != nil {

		// query param events.name
		var qrEventsName string

		if o.EventsNameQueryParameter != nil {
			qrEventsName = *o.EventsNameQueryParameter
		}
		qEventsName := qrEventsName
		if qEventsName != "" {

			if err := r.SetQueryParam("events.name", qEventsName); err != nil {
				return err
			}
		}
	}

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.MandatoryQueryParameter != nil {

		// query param mandatory
		var qrMandatory bool

		if o.MandatoryQueryParameter != nil {
			qrMandatory = *o.MandatoryQueryParameter
		}
		qMandatory := swag.FormatBool(qrMandatory)
		if qMandatory != "" {

			if err := r.SetQueryParam("mandatory", qMandatory); err != nil {
				return err
			}
		}
	}

	if o.MaxRecords != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecords != nil {
			qrMaxRecords = *o.MaxRecords
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.NameQueryParameter != nil {

		// query param name
		var qrName string

		if o.NameQueryParameter != nil {
			qrName = *o.NameQueryParameter
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.OrderBy != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.PriorityQueryParameter != nil {

		// query param priority
		var qrPriority int64

		if o.PriorityQueryParameter != nil {
			qrPriority = *o.PriorityQueryParameter
		}
		qPriority := swag.FormatInt64(qrPriority)
		if qPriority != "" {

			if err := r.SetQueryParam("priority", qPriority); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecords != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecords != nil {
			qrReturnRecords = *o.ReturnRecords
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeout != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeout != nil {
			qrReturnTimeout = *o.ReturnTimeout
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.ScopeExcludeExportPoliciesQueryParameter != nil {

		// query param scope.exclude_export_policies
		var qrScopeExcludeExportPolicies string

		if o.ScopeExcludeExportPoliciesQueryParameter != nil {
			qrScopeExcludeExportPolicies = *o.ScopeExcludeExportPoliciesQueryParameter
		}
		qScopeExcludeExportPolicies := qrScopeExcludeExportPolicies
		if qScopeExcludeExportPolicies != "" {

			if err := r.SetQueryParam("scope.exclude_export_policies", qScopeExcludeExportPolicies); err != nil {
				return err
			}
		}
	}

	if o.ScopeExcludeExtensionQueryParameter != nil {

		// query param scope.exclude_extension
		var qrScopeExcludeExtension string

		if o.ScopeExcludeExtensionQueryParameter != nil {
			qrScopeExcludeExtension = *o.ScopeExcludeExtensionQueryParameter
		}
		qScopeExcludeExtension := qrScopeExcludeExtension
		if qScopeExcludeExtension != "" {

			if err := r.SetQueryParam("scope.exclude_extension", qScopeExcludeExtension); err != nil {
				return err
			}
		}
	}

	if o.ScopeExcludeSharesQueryParameter != nil {

		// query param scope.exclude_shares
		var qrScopeExcludeShares string

		if o.ScopeExcludeSharesQueryParameter != nil {
			qrScopeExcludeShares = *o.ScopeExcludeSharesQueryParameter
		}
		qScopeExcludeShares := qrScopeExcludeShares
		if qScopeExcludeShares != "" {

			if err := r.SetQueryParam("scope.exclude_shares", qScopeExcludeShares); err != nil {
				return err
			}
		}
	}

	if o.ScopeExcludeVolumesQueryParameter != nil {

		// query param scope.exclude_volumes
		var qrScopeExcludeVolumes string

		if o.ScopeExcludeVolumesQueryParameter != nil {
			qrScopeExcludeVolumes = *o.ScopeExcludeVolumesQueryParameter
		}
		qScopeExcludeVolumes := qrScopeExcludeVolumes
		if qScopeExcludeVolumes != "" {

			if err := r.SetQueryParam("scope.exclude_volumes", qScopeExcludeVolumes); err != nil {
				return err
			}
		}
	}

	if o.ScopeIncludeExportPoliciesQueryParameter != nil {

		// query param scope.include_export_policies
		var qrScopeIncludeExportPolicies string

		if o.ScopeIncludeExportPoliciesQueryParameter != nil {
			qrScopeIncludeExportPolicies = *o.ScopeIncludeExportPoliciesQueryParameter
		}
		qScopeIncludeExportPolicies := qrScopeIncludeExportPolicies
		if qScopeIncludeExportPolicies != "" {

			if err := r.SetQueryParam("scope.include_export_policies", qScopeIncludeExportPolicies); err != nil {
				return err
			}
		}
	}

	if o.ScopeIncludeExtensionQueryParameter != nil {

		// query param scope.include_extension
		var qrScopeIncludeExtension string

		if o.ScopeIncludeExtensionQueryParameter != nil {
			qrScopeIncludeExtension = *o.ScopeIncludeExtensionQueryParameter
		}
		qScopeIncludeExtension := qrScopeIncludeExtension
		if qScopeIncludeExtension != "" {

			if err := r.SetQueryParam("scope.include_extension", qScopeIncludeExtension); err != nil {
				return err
			}
		}
	}

	if o.ScopeIncludeSharesQueryParameter != nil {

		// query param scope.include_shares
		var qrScopeIncludeShares string

		if o.ScopeIncludeSharesQueryParameter != nil {
			qrScopeIncludeShares = *o.ScopeIncludeSharesQueryParameter
		}
		qScopeIncludeShares := qrScopeIncludeShares
		if qScopeIncludeShares != "" {

			if err := r.SetQueryParam("scope.include_shares", qScopeIncludeShares); err != nil {
				return err
			}
		}
	}

	if o.ScopeIncludeVolumesQueryParameter != nil {

		// query param scope.include_volumes
		var qrScopeIncludeVolumes string

		if o.ScopeIncludeVolumesQueryParameter != nil {
			qrScopeIncludeVolumes = *o.ScopeIncludeVolumesQueryParameter
		}
		qScopeIncludeVolumes := qrScopeIncludeVolumes
		if qScopeIncludeVolumes != "" {

			if err := r.SetQueryParam("scope.include_volumes", qScopeIncludeVolumes); err != nil {
				return err
			}
		}
	}

	// path param svm.uuid
	if err := r.SetPathParam("svm.uuid", o.SvmUUID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamFpolicyPolicyCollectionGet binds the parameter fields
func (o *FpolicyPolicyCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamFpolicyPolicyCollectionGet binds the parameter order_by
func (o *FpolicyPolicyCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderBy

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
