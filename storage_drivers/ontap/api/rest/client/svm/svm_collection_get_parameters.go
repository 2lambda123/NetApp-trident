// Code generated by go-swagger; DO NOT EDIT.

package svm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSvmCollectionGetParams creates a new SvmCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSvmCollectionGetParams() *SvmCollectionGetParams {
	return &SvmCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSvmCollectionGetParamsWithTimeout creates a new SvmCollectionGetParams object
// with the ability to set a timeout on a request.
func NewSvmCollectionGetParamsWithTimeout(timeout time.Duration) *SvmCollectionGetParams {
	return &SvmCollectionGetParams{
		timeout: timeout,
	}
}

// NewSvmCollectionGetParamsWithContext creates a new SvmCollectionGetParams object
// with the ability to set a context for a request.
func NewSvmCollectionGetParamsWithContext(ctx context.Context) *SvmCollectionGetParams {
	return &SvmCollectionGetParams{
		Context: ctx,
	}
}

// NewSvmCollectionGetParamsWithHTTPClient creates a new SvmCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewSvmCollectionGetParamsWithHTTPClient(client *http.Client) *SvmCollectionGetParams {
	return &SvmCollectionGetParams{
		HTTPClient: client,
	}
}

/* SvmCollectionGetParams contains all the parameters to send to the API endpoint
   for the svm collection get operation.

   Typically these are written to a http.Request.
*/
type SvmCollectionGetParams struct {

	/* AggregatesName.

	   Filter by aggregates.name
	*/
	AggregatesNameQueryParameter *string

	/* AggregatesUUID.

	   Filter by aggregates.uuid
	*/
	AggregatesUUIDQueryParameter *string

	/* AntiRansomwareDefaultVolumeState.

	   Filter by anti_ransomware_default_volume_state
	*/
	AntiRansomwareDefaultVolumeStateQueryParameter *string

	/* CertificateUUID.

	   Filter by certificate.uuid
	*/
	CertificateUUIDQueryParameter *string

	/* CifsAdDomainFqdn.

	   Filter by cifs.ad_domain.fqdn
	*/
	CifsAdDomainFqdnQueryParameter *string

	/* CifsAdDomainOrganizationalUnit.

	   Filter by cifs.ad_domain.organizational_unit
	*/
	CifsAdDomainOrganizationalUnitQueryParameter *string

	/* CifsAllowed.

	   Filter by cifs.allowed
	*/
	CifsAllowedQueryParameter *bool

	/* CifsEnabled.

	   Filter by cifs.enabled
	*/
	CifsEnabledQueryParameter *bool

	/* CifsName.

	   Filter by cifs.name
	*/
	CifsNameQueryParameter *string

	/* Comment.

	   Filter by comment
	*/
	CommentQueryParameter *string

	/* DNSDomains.

	   Filter by dns.domains
	*/
	DNSDomainsQueryParameter *string

	/* DNSServers.

	   Filter by dns.servers
	*/
	DNSServersQueryParameter *string

	/* FcInterfacesDataProtocol.

	   Filter by fc_interfaces.data_protocol
	*/
	FcInterfacesDataProtocolQueryParameter *string

	/* FcInterfacesName.

	   Filter by fc_interfaces.name
	*/
	FcInterfacesNameQueryParameter *string

	/* FcpAllowed.

	   Filter by fcp.allowed
	*/
	FcpAllowedQueryParameter *bool

	/* FcpEnabled.

	   Filter by fcp.enabled
	*/
	FcpEnabledQueryParameter *bool

	/* Fields.

	   Specify the fields to return.
	*/
	FieldsQueryParameter []string

	/* IpspaceName.

	   Filter by ipspace.name
	*/
	IpspaceNameQueryParameter *string

	/* IpspaceUUID.

	   Filter by ipspace.uuid
	*/
	IpspaceUUIDQueryParameter *string

	/* IscsiAllowed.

	   Filter by iscsi.allowed
	*/
	IscsiAllowedQueryParameter *bool

	/* IscsiEnabled.

	   Filter by iscsi.enabled
	*/
	IscsiEnabledQueryParameter *bool

	/* Language.

	   Filter by language
	*/
	LanguageQueryParameter *string

	/* LdapAdDomain.

	   Filter by ldap.ad_domain
	*/
	LdapAdDomainQueryParameter *string

	/* LdapBaseDn.

	   Filter by ldap.base_dn
	*/
	LdapBaseDnQueryParameter *string

	/* LdapBindDn.

	   Filter by ldap.bind_dn
	*/
	LdapBindDnQueryParameter *string

	/* LdapEnabled.

	   Filter by ldap.enabled
	*/
	LdapEnabledQueryParameter *bool

	/* LdapServers.

	   Filter by ldap.servers
	*/
	LdapServersQueryParameter *string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecordsQueryParameter *int64

	/* MaxVolumes.

	   Filter max_volumes
	*/
	MaxVolumesQueryParameter *string

	/* Name.

	   Filter by name
	*/
	NameQueryParameter *string

	/* NdmpAllowed.

	   Filter by ndmp.allowed
	*/
	NdmpAllowedQueryParameter *bool

	/* NfsAllowed.

	   Filter by nfs.allowed
	*/
	NfsAllowedQueryParameter *bool

	/* NfsEnabled.

	   Filter by nfs.enabled
	*/
	NfsEnabledQueryParameter *bool

	/* NisDomain.

	   Filter by nis.domain
	*/
	NisDomainQueryParameter *string

	/* NisEnabled.

	   Filter by nis.enabled
	*/
	NisEnabledQueryParameter *bool

	/* NisServers.

	   Filter by nis.servers
	*/
	NisServersQueryParameter *string

	/* NsswitchGroup.

	   Filter by nsswitch.group
	*/
	NsswitchGroupQueryParameter *string

	/* NsswitchHosts.

	   Filter by nsswitch.hosts
	*/
	NsswitchHostsQueryParameter *string

	/* NsswitchNamemap.

	   Filter by nsswitch.namemap
	*/
	NsswitchNamemapQueryParameter *string

	/* NsswitchNetgroup.

	   Filter by nsswitch.netgroup
	*/
	NsswitchNetgroupQueryParameter *string

	/* NsswitchPasswd.

	   Filter by nsswitch.passwd
	*/
	NsswitchPasswdQueryParameter *string

	/* NvmeAllowed.

	   Filter by nvme.allowed
	*/
	NvmeAllowedQueryParameter *bool

	/* NvmeEnabled.

	   Filter by nvme.enabled
	*/
	NvmeEnabledQueryParameter *bool

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderByQueryParameter []string

	/* QosPolicyName.

	   Filter qos_policy.name
	*/
	QosPolicyNameQueryParameter *string

	/* QosPolicyUUID.

	   Filter qos_policy.uuid
	*/
	QosPolicyUUIDQueryParameter *string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecordsQueryParameter *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeoutQueryParameter *int64

	/* S3Enabled.

	   Filter by s3.enabled
	*/
	S3EnabledQueryParameter *bool

	/* S3Name.

	   Filter by s3.name
	*/
	S3NameQueryParameter *string

	/* SnapshotPolicyName.

	   Filter by snapshot_policy.name
	*/
	SnapshotPolicyNameQueryParameter *string

	/* SnapshotPolicyUUID.

	   Filter by snapshot_policy.uuid
	*/
	SnapshotPolicyUUIDQueryParameter *string

	/* State.

	   Filter by state
	*/
	StateQueryParameter *string

	/* Subtype.

	   Filter by subtype
	*/
	SubtypeQueryParameter *string

	/* UUID.

	   Filter by uuid
	*/
	UUIDQueryParameter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the svm collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SvmCollectionGetParams) WithDefaults() *SvmCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the svm collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SvmCollectionGetParams) SetDefaults() {
	var (
		returnRecordsQueryParameterDefault = bool(true)

		returnTimeoutQueryParameterDefault = int64(15)
	)

	val := SvmCollectionGetParams{
		ReturnRecordsQueryParameter: &returnRecordsQueryParameterDefault,
		ReturnTimeoutQueryParameter: &returnTimeoutQueryParameterDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the svm collection get params
func (o *SvmCollectionGetParams) WithTimeout(timeout time.Duration) *SvmCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the svm collection get params
func (o *SvmCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the svm collection get params
func (o *SvmCollectionGetParams) WithContext(ctx context.Context) *SvmCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the svm collection get params
func (o *SvmCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the svm collection get params
func (o *SvmCollectionGetParams) WithHTTPClient(client *http.Client) *SvmCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the svm collection get params
func (o *SvmCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAggregatesNameQueryParameter adds the aggregatesName to the svm collection get params
func (o *SvmCollectionGetParams) WithAggregatesNameQueryParameter(aggregatesName *string) *SvmCollectionGetParams {
	o.SetAggregatesNameQueryParameter(aggregatesName)
	return o
}

// SetAggregatesNameQueryParameter adds the aggregatesName to the svm collection get params
func (o *SvmCollectionGetParams) SetAggregatesNameQueryParameter(aggregatesName *string) {
	o.AggregatesNameQueryParameter = aggregatesName
}

// WithAggregatesUUIDQueryParameter adds the aggregatesUUID to the svm collection get params
func (o *SvmCollectionGetParams) WithAggregatesUUIDQueryParameter(aggregatesUUID *string) *SvmCollectionGetParams {
	o.SetAggregatesUUIDQueryParameter(aggregatesUUID)
	return o
}

// SetAggregatesUUIDQueryParameter adds the aggregatesUuid to the svm collection get params
func (o *SvmCollectionGetParams) SetAggregatesUUIDQueryParameter(aggregatesUUID *string) {
	o.AggregatesUUIDQueryParameter = aggregatesUUID
}

// WithAntiRansomwareDefaultVolumeStateQueryParameter adds the antiRansomwareDefaultVolumeState to the svm collection get params
func (o *SvmCollectionGetParams) WithAntiRansomwareDefaultVolumeStateQueryParameter(antiRansomwareDefaultVolumeState *string) *SvmCollectionGetParams {
	o.SetAntiRansomwareDefaultVolumeStateQueryParameter(antiRansomwareDefaultVolumeState)
	return o
}

// SetAntiRansomwareDefaultVolumeStateQueryParameter adds the antiRansomwareDefaultVolumeState to the svm collection get params
func (o *SvmCollectionGetParams) SetAntiRansomwareDefaultVolumeStateQueryParameter(antiRansomwareDefaultVolumeState *string) {
	o.AntiRansomwareDefaultVolumeStateQueryParameter = antiRansomwareDefaultVolumeState
}

// WithCertificateUUIDQueryParameter adds the certificateUUID to the svm collection get params
func (o *SvmCollectionGetParams) WithCertificateUUIDQueryParameter(certificateUUID *string) *SvmCollectionGetParams {
	o.SetCertificateUUIDQueryParameter(certificateUUID)
	return o
}

// SetCertificateUUIDQueryParameter adds the certificateUuid to the svm collection get params
func (o *SvmCollectionGetParams) SetCertificateUUIDQueryParameter(certificateUUID *string) {
	o.CertificateUUIDQueryParameter = certificateUUID
}

// WithCifsAdDomainFqdnQueryParameter adds the cifsAdDomainFqdn to the svm collection get params
func (o *SvmCollectionGetParams) WithCifsAdDomainFqdnQueryParameter(cifsAdDomainFqdn *string) *SvmCollectionGetParams {
	o.SetCifsAdDomainFqdnQueryParameter(cifsAdDomainFqdn)
	return o
}

// SetCifsAdDomainFqdnQueryParameter adds the cifsAdDomainFqdn to the svm collection get params
func (o *SvmCollectionGetParams) SetCifsAdDomainFqdnQueryParameter(cifsAdDomainFqdn *string) {
	o.CifsAdDomainFqdnQueryParameter = cifsAdDomainFqdn
}

// WithCifsAdDomainOrganizationalUnitQueryParameter adds the cifsAdDomainOrganizationalUnit to the svm collection get params
func (o *SvmCollectionGetParams) WithCifsAdDomainOrganizationalUnitQueryParameter(cifsAdDomainOrganizationalUnit *string) *SvmCollectionGetParams {
	o.SetCifsAdDomainOrganizationalUnitQueryParameter(cifsAdDomainOrganizationalUnit)
	return o
}

// SetCifsAdDomainOrganizationalUnitQueryParameter adds the cifsAdDomainOrganizationalUnit to the svm collection get params
func (o *SvmCollectionGetParams) SetCifsAdDomainOrganizationalUnitQueryParameter(cifsAdDomainOrganizationalUnit *string) {
	o.CifsAdDomainOrganizationalUnitQueryParameter = cifsAdDomainOrganizationalUnit
}

// WithCifsAllowedQueryParameter adds the cifsAllowed to the svm collection get params
func (o *SvmCollectionGetParams) WithCifsAllowedQueryParameter(cifsAllowed *bool) *SvmCollectionGetParams {
	o.SetCifsAllowedQueryParameter(cifsAllowed)
	return o
}

// SetCifsAllowedQueryParameter adds the cifsAllowed to the svm collection get params
func (o *SvmCollectionGetParams) SetCifsAllowedQueryParameter(cifsAllowed *bool) {
	o.CifsAllowedQueryParameter = cifsAllowed
}

// WithCifsEnabledQueryParameter adds the cifsEnabled to the svm collection get params
func (o *SvmCollectionGetParams) WithCifsEnabledQueryParameter(cifsEnabled *bool) *SvmCollectionGetParams {
	o.SetCifsEnabledQueryParameter(cifsEnabled)
	return o
}

// SetCifsEnabledQueryParameter adds the cifsEnabled to the svm collection get params
func (o *SvmCollectionGetParams) SetCifsEnabledQueryParameter(cifsEnabled *bool) {
	o.CifsEnabledQueryParameter = cifsEnabled
}

// WithCifsNameQueryParameter adds the cifsName to the svm collection get params
func (o *SvmCollectionGetParams) WithCifsNameQueryParameter(cifsName *string) *SvmCollectionGetParams {
	o.SetCifsNameQueryParameter(cifsName)
	return o
}

// SetCifsNameQueryParameter adds the cifsName to the svm collection get params
func (o *SvmCollectionGetParams) SetCifsNameQueryParameter(cifsName *string) {
	o.CifsNameQueryParameter = cifsName
}

// WithCommentQueryParameter adds the comment to the svm collection get params
func (o *SvmCollectionGetParams) WithCommentQueryParameter(comment *string) *SvmCollectionGetParams {
	o.SetCommentQueryParameter(comment)
	return o
}

// SetCommentQueryParameter adds the comment to the svm collection get params
func (o *SvmCollectionGetParams) SetCommentQueryParameter(comment *string) {
	o.CommentQueryParameter = comment
}

// WithDNSDomainsQueryParameter adds the dNSDomains to the svm collection get params
func (o *SvmCollectionGetParams) WithDNSDomainsQueryParameter(dNSDomains *string) *SvmCollectionGetParams {
	o.SetDNSDomainsQueryParameter(dNSDomains)
	return o
}

// SetDNSDomainsQueryParameter adds the dnsDomains to the svm collection get params
func (o *SvmCollectionGetParams) SetDNSDomainsQueryParameter(dNSDomains *string) {
	o.DNSDomainsQueryParameter = dNSDomains
}

// WithDNSServersQueryParameter adds the dNSServers to the svm collection get params
func (o *SvmCollectionGetParams) WithDNSServersQueryParameter(dNSServers *string) *SvmCollectionGetParams {
	o.SetDNSServersQueryParameter(dNSServers)
	return o
}

// SetDNSServersQueryParameter adds the dnsServers to the svm collection get params
func (o *SvmCollectionGetParams) SetDNSServersQueryParameter(dNSServers *string) {
	o.DNSServersQueryParameter = dNSServers
}

// WithFcInterfacesDataProtocolQueryParameter adds the fcInterfacesDataProtocol to the svm collection get params
func (o *SvmCollectionGetParams) WithFcInterfacesDataProtocolQueryParameter(fcInterfacesDataProtocol *string) *SvmCollectionGetParams {
	o.SetFcInterfacesDataProtocolQueryParameter(fcInterfacesDataProtocol)
	return o
}

// SetFcInterfacesDataProtocolQueryParameter adds the fcInterfacesDataProtocol to the svm collection get params
func (o *SvmCollectionGetParams) SetFcInterfacesDataProtocolQueryParameter(fcInterfacesDataProtocol *string) {
	o.FcInterfacesDataProtocolQueryParameter = fcInterfacesDataProtocol
}

// WithFcInterfacesNameQueryParameter adds the fcInterfacesName to the svm collection get params
func (o *SvmCollectionGetParams) WithFcInterfacesNameQueryParameter(fcInterfacesName *string) *SvmCollectionGetParams {
	o.SetFcInterfacesNameQueryParameter(fcInterfacesName)
	return o
}

// SetFcInterfacesNameQueryParameter adds the fcInterfacesName to the svm collection get params
func (o *SvmCollectionGetParams) SetFcInterfacesNameQueryParameter(fcInterfacesName *string) {
	o.FcInterfacesNameQueryParameter = fcInterfacesName
}

// WithFcpAllowedQueryParameter adds the fcpAllowed to the svm collection get params
func (o *SvmCollectionGetParams) WithFcpAllowedQueryParameter(fcpAllowed *bool) *SvmCollectionGetParams {
	o.SetFcpAllowedQueryParameter(fcpAllowed)
	return o
}

// SetFcpAllowedQueryParameter adds the fcpAllowed to the svm collection get params
func (o *SvmCollectionGetParams) SetFcpAllowedQueryParameter(fcpAllowed *bool) {
	o.FcpAllowedQueryParameter = fcpAllowed
}

// WithFcpEnabledQueryParameter adds the fcpEnabled to the svm collection get params
func (o *SvmCollectionGetParams) WithFcpEnabledQueryParameter(fcpEnabled *bool) *SvmCollectionGetParams {
	o.SetFcpEnabledQueryParameter(fcpEnabled)
	return o
}

// SetFcpEnabledQueryParameter adds the fcpEnabled to the svm collection get params
func (o *SvmCollectionGetParams) SetFcpEnabledQueryParameter(fcpEnabled *bool) {
	o.FcpEnabledQueryParameter = fcpEnabled
}

// WithFieldsQueryParameter adds the fields to the svm collection get params
func (o *SvmCollectionGetParams) WithFieldsQueryParameter(fields []string) *SvmCollectionGetParams {
	o.SetFieldsQueryParameter(fields)
	return o
}

// SetFieldsQueryParameter adds the fields to the svm collection get params
func (o *SvmCollectionGetParams) SetFieldsQueryParameter(fields []string) {
	o.FieldsQueryParameter = fields
}

// WithIpspaceNameQueryParameter adds the ipspaceName to the svm collection get params
func (o *SvmCollectionGetParams) WithIpspaceNameQueryParameter(ipspaceName *string) *SvmCollectionGetParams {
	o.SetIpspaceNameQueryParameter(ipspaceName)
	return o
}

// SetIpspaceNameQueryParameter adds the ipspaceName to the svm collection get params
func (o *SvmCollectionGetParams) SetIpspaceNameQueryParameter(ipspaceName *string) {
	o.IpspaceNameQueryParameter = ipspaceName
}

// WithIpspaceUUIDQueryParameter adds the ipspaceUUID to the svm collection get params
func (o *SvmCollectionGetParams) WithIpspaceUUIDQueryParameter(ipspaceUUID *string) *SvmCollectionGetParams {
	o.SetIpspaceUUIDQueryParameter(ipspaceUUID)
	return o
}

// SetIpspaceUUIDQueryParameter adds the ipspaceUuid to the svm collection get params
func (o *SvmCollectionGetParams) SetIpspaceUUIDQueryParameter(ipspaceUUID *string) {
	o.IpspaceUUIDQueryParameter = ipspaceUUID
}

// WithIscsiAllowedQueryParameter adds the iscsiAllowed to the svm collection get params
func (o *SvmCollectionGetParams) WithIscsiAllowedQueryParameter(iscsiAllowed *bool) *SvmCollectionGetParams {
	o.SetIscsiAllowedQueryParameter(iscsiAllowed)
	return o
}

// SetIscsiAllowedQueryParameter adds the iscsiAllowed to the svm collection get params
func (o *SvmCollectionGetParams) SetIscsiAllowedQueryParameter(iscsiAllowed *bool) {
	o.IscsiAllowedQueryParameter = iscsiAllowed
}

// WithIscsiEnabledQueryParameter adds the iscsiEnabled to the svm collection get params
func (o *SvmCollectionGetParams) WithIscsiEnabledQueryParameter(iscsiEnabled *bool) *SvmCollectionGetParams {
	o.SetIscsiEnabledQueryParameter(iscsiEnabled)
	return o
}

// SetIscsiEnabledQueryParameter adds the iscsiEnabled to the svm collection get params
func (o *SvmCollectionGetParams) SetIscsiEnabledQueryParameter(iscsiEnabled *bool) {
	o.IscsiEnabledQueryParameter = iscsiEnabled
}

// WithLanguageQueryParameter adds the language to the svm collection get params
func (o *SvmCollectionGetParams) WithLanguageQueryParameter(language *string) *SvmCollectionGetParams {
	o.SetLanguageQueryParameter(language)
	return o
}

// SetLanguageQueryParameter adds the language to the svm collection get params
func (o *SvmCollectionGetParams) SetLanguageQueryParameter(language *string) {
	o.LanguageQueryParameter = language
}

// WithLdapAdDomainQueryParameter adds the ldapAdDomain to the svm collection get params
func (o *SvmCollectionGetParams) WithLdapAdDomainQueryParameter(ldapAdDomain *string) *SvmCollectionGetParams {
	o.SetLdapAdDomainQueryParameter(ldapAdDomain)
	return o
}

// SetLdapAdDomainQueryParameter adds the ldapAdDomain to the svm collection get params
func (o *SvmCollectionGetParams) SetLdapAdDomainQueryParameter(ldapAdDomain *string) {
	o.LdapAdDomainQueryParameter = ldapAdDomain
}

// WithLdapBaseDnQueryParameter adds the ldapBaseDn to the svm collection get params
func (o *SvmCollectionGetParams) WithLdapBaseDnQueryParameter(ldapBaseDn *string) *SvmCollectionGetParams {
	o.SetLdapBaseDnQueryParameter(ldapBaseDn)
	return o
}

// SetLdapBaseDnQueryParameter adds the ldapBaseDn to the svm collection get params
func (o *SvmCollectionGetParams) SetLdapBaseDnQueryParameter(ldapBaseDn *string) {
	o.LdapBaseDnQueryParameter = ldapBaseDn
}

// WithLdapBindDnQueryParameter adds the ldapBindDn to the svm collection get params
func (o *SvmCollectionGetParams) WithLdapBindDnQueryParameter(ldapBindDn *string) *SvmCollectionGetParams {
	o.SetLdapBindDnQueryParameter(ldapBindDn)
	return o
}

// SetLdapBindDnQueryParameter adds the ldapBindDn to the svm collection get params
func (o *SvmCollectionGetParams) SetLdapBindDnQueryParameter(ldapBindDn *string) {
	o.LdapBindDnQueryParameter = ldapBindDn
}

// WithLdapEnabledQueryParameter adds the ldapEnabled to the svm collection get params
func (o *SvmCollectionGetParams) WithLdapEnabledQueryParameter(ldapEnabled *bool) *SvmCollectionGetParams {
	o.SetLdapEnabledQueryParameter(ldapEnabled)
	return o
}

// SetLdapEnabledQueryParameter adds the ldapEnabled to the svm collection get params
func (o *SvmCollectionGetParams) SetLdapEnabledQueryParameter(ldapEnabled *bool) {
	o.LdapEnabledQueryParameter = ldapEnabled
}

// WithLdapServersQueryParameter adds the ldapServers to the svm collection get params
func (o *SvmCollectionGetParams) WithLdapServersQueryParameter(ldapServers *string) *SvmCollectionGetParams {
	o.SetLdapServersQueryParameter(ldapServers)
	return o
}

// SetLdapServersQueryParameter adds the ldapServers to the svm collection get params
func (o *SvmCollectionGetParams) SetLdapServersQueryParameter(ldapServers *string) {
	o.LdapServersQueryParameter = ldapServers
}

// WithMaxRecordsQueryParameter adds the maxRecords to the svm collection get params
func (o *SvmCollectionGetParams) WithMaxRecordsQueryParameter(maxRecords *int64) *SvmCollectionGetParams {
	o.SetMaxRecordsQueryParameter(maxRecords)
	return o
}

// SetMaxRecordsQueryParameter adds the maxRecords to the svm collection get params
func (o *SvmCollectionGetParams) SetMaxRecordsQueryParameter(maxRecords *int64) {
	o.MaxRecordsQueryParameter = maxRecords
}

// WithMaxVolumesQueryParameter adds the maxVolumes to the svm collection get params
func (o *SvmCollectionGetParams) WithMaxVolumesQueryParameter(maxVolumes *string) *SvmCollectionGetParams {
	o.SetMaxVolumesQueryParameter(maxVolumes)
	return o
}

// SetMaxVolumesQueryParameter adds the maxVolumes to the svm collection get params
func (o *SvmCollectionGetParams) SetMaxVolumesQueryParameter(maxVolumes *string) {
	o.MaxVolumesQueryParameter = maxVolumes
}

// WithNameQueryParameter adds the name to the svm collection get params
func (o *SvmCollectionGetParams) WithNameQueryParameter(name *string) *SvmCollectionGetParams {
	o.SetNameQueryParameter(name)
	return o
}

// SetNameQueryParameter adds the name to the svm collection get params
func (o *SvmCollectionGetParams) SetNameQueryParameter(name *string) {
	o.NameQueryParameter = name
}

// WithNdmpAllowedQueryParameter adds the ndmpAllowed to the svm collection get params
func (o *SvmCollectionGetParams) WithNdmpAllowedQueryParameter(ndmpAllowed *bool) *SvmCollectionGetParams {
	o.SetNdmpAllowedQueryParameter(ndmpAllowed)
	return o
}

// SetNdmpAllowedQueryParameter adds the ndmpAllowed to the svm collection get params
func (o *SvmCollectionGetParams) SetNdmpAllowedQueryParameter(ndmpAllowed *bool) {
	o.NdmpAllowedQueryParameter = ndmpAllowed
}

// WithNfsAllowedQueryParameter adds the nfsAllowed to the svm collection get params
func (o *SvmCollectionGetParams) WithNfsAllowedQueryParameter(nfsAllowed *bool) *SvmCollectionGetParams {
	o.SetNfsAllowedQueryParameter(nfsAllowed)
	return o
}

// SetNfsAllowedQueryParameter adds the nfsAllowed to the svm collection get params
func (o *SvmCollectionGetParams) SetNfsAllowedQueryParameter(nfsAllowed *bool) {
	o.NfsAllowedQueryParameter = nfsAllowed
}

// WithNfsEnabledQueryParameter adds the nfsEnabled to the svm collection get params
func (o *SvmCollectionGetParams) WithNfsEnabledQueryParameter(nfsEnabled *bool) *SvmCollectionGetParams {
	o.SetNfsEnabledQueryParameter(nfsEnabled)
	return o
}

// SetNfsEnabledQueryParameter adds the nfsEnabled to the svm collection get params
func (o *SvmCollectionGetParams) SetNfsEnabledQueryParameter(nfsEnabled *bool) {
	o.NfsEnabledQueryParameter = nfsEnabled
}

// WithNisDomainQueryParameter adds the nisDomain to the svm collection get params
func (o *SvmCollectionGetParams) WithNisDomainQueryParameter(nisDomain *string) *SvmCollectionGetParams {
	o.SetNisDomainQueryParameter(nisDomain)
	return o
}

// SetNisDomainQueryParameter adds the nisDomain to the svm collection get params
func (o *SvmCollectionGetParams) SetNisDomainQueryParameter(nisDomain *string) {
	o.NisDomainQueryParameter = nisDomain
}

// WithNisEnabledQueryParameter adds the nisEnabled to the svm collection get params
func (o *SvmCollectionGetParams) WithNisEnabledQueryParameter(nisEnabled *bool) *SvmCollectionGetParams {
	o.SetNisEnabledQueryParameter(nisEnabled)
	return o
}

// SetNisEnabledQueryParameter adds the nisEnabled to the svm collection get params
func (o *SvmCollectionGetParams) SetNisEnabledQueryParameter(nisEnabled *bool) {
	o.NisEnabledQueryParameter = nisEnabled
}

// WithNisServersQueryParameter adds the nisServers to the svm collection get params
func (o *SvmCollectionGetParams) WithNisServersQueryParameter(nisServers *string) *SvmCollectionGetParams {
	o.SetNisServersQueryParameter(nisServers)
	return o
}

// SetNisServersQueryParameter adds the nisServers to the svm collection get params
func (o *SvmCollectionGetParams) SetNisServersQueryParameter(nisServers *string) {
	o.NisServersQueryParameter = nisServers
}

// WithNsswitchGroupQueryParameter adds the nsswitchGroup to the svm collection get params
func (o *SvmCollectionGetParams) WithNsswitchGroupQueryParameter(nsswitchGroup *string) *SvmCollectionGetParams {
	o.SetNsswitchGroupQueryParameter(nsswitchGroup)
	return o
}

// SetNsswitchGroupQueryParameter adds the nsswitchGroup to the svm collection get params
func (o *SvmCollectionGetParams) SetNsswitchGroupQueryParameter(nsswitchGroup *string) {
	o.NsswitchGroupQueryParameter = nsswitchGroup
}

// WithNsswitchHostsQueryParameter adds the nsswitchHosts to the svm collection get params
func (o *SvmCollectionGetParams) WithNsswitchHostsQueryParameter(nsswitchHosts *string) *SvmCollectionGetParams {
	o.SetNsswitchHostsQueryParameter(nsswitchHosts)
	return o
}

// SetNsswitchHostsQueryParameter adds the nsswitchHosts to the svm collection get params
func (o *SvmCollectionGetParams) SetNsswitchHostsQueryParameter(nsswitchHosts *string) {
	o.NsswitchHostsQueryParameter = nsswitchHosts
}

// WithNsswitchNamemapQueryParameter adds the nsswitchNamemap to the svm collection get params
func (o *SvmCollectionGetParams) WithNsswitchNamemapQueryParameter(nsswitchNamemap *string) *SvmCollectionGetParams {
	o.SetNsswitchNamemapQueryParameter(nsswitchNamemap)
	return o
}

// SetNsswitchNamemapQueryParameter adds the nsswitchNamemap to the svm collection get params
func (o *SvmCollectionGetParams) SetNsswitchNamemapQueryParameter(nsswitchNamemap *string) {
	o.NsswitchNamemapQueryParameter = nsswitchNamemap
}

// WithNsswitchNetgroupQueryParameter adds the nsswitchNetgroup to the svm collection get params
func (o *SvmCollectionGetParams) WithNsswitchNetgroupQueryParameter(nsswitchNetgroup *string) *SvmCollectionGetParams {
	o.SetNsswitchNetgroupQueryParameter(nsswitchNetgroup)
	return o
}

// SetNsswitchNetgroupQueryParameter adds the nsswitchNetgroup to the svm collection get params
func (o *SvmCollectionGetParams) SetNsswitchNetgroupQueryParameter(nsswitchNetgroup *string) {
	o.NsswitchNetgroupQueryParameter = nsswitchNetgroup
}

// WithNsswitchPasswdQueryParameter adds the nsswitchPasswd to the svm collection get params
func (o *SvmCollectionGetParams) WithNsswitchPasswdQueryParameter(nsswitchPasswd *string) *SvmCollectionGetParams {
	o.SetNsswitchPasswdQueryParameter(nsswitchPasswd)
	return o
}

// SetNsswitchPasswdQueryParameter adds the nsswitchPasswd to the svm collection get params
func (o *SvmCollectionGetParams) SetNsswitchPasswdQueryParameter(nsswitchPasswd *string) {
	o.NsswitchPasswdQueryParameter = nsswitchPasswd
}

// WithNvmeAllowedQueryParameter adds the nvmeAllowed to the svm collection get params
func (o *SvmCollectionGetParams) WithNvmeAllowedQueryParameter(nvmeAllowed *bool) *SvmCollectionGetParams {
	o.SetNvmeAllowedQueryParameter(nvmeAllowed)
	return o
}

// SetNvmeAllowedQueryParameter adds the nvmeAllowed to the svm collection get params
func (o *SvmCollectionGetParams) SetNvmeAllowedQueryParameter(nvmeAllowed *bool) {
	o.NvmeAllowedQueryParameter = nvmeAllowed
}

// WithNvmeEnabledQueryParameter adds the nvmeEnabled to the svm collection get params
func (o *SvmCollectionGetParams) WithNvmeEnabledQueryParameter(nvmeEnabled *bool) *SvmCollectionGetParams {
	o.SetNvmeEnabledQueryParameter(nvmeEnabled)
	return o
}

// SetNvmeEnabledQueryParameter adds the nvmeEnabled to the svm collection get params
func (o *SvmCollectionGetParams) SetNvmeEnabledQueryParameter(nvmeEnabled *bool) {
	o.NvmeEnabledQueryParameter = nvmeEnabled
}

// WithOrderByQueryParameter adds the orderBy to the svm collection get params
func (o *SvmCollectionGetParams) WithOrderByQueryParameter(orderBy []string) *SvmCollectionGetParams {
	o.SetOrderByQueryParameter(orderBy)
	return o
}

// SetOrderByQueryParameter adds the orderBy to the svm collection get params
func (o *SvmCollectionGetParams) SetOrderByQueryParameter(orderBy []string) {
	o.OrderByQueryParameter = orderBy
}

// WithQosPolicyNameQueryParameter adds the qosPolicyName to the svm collection get params
func (o *SvmCollectionGetParams) WithQosPolicyNameQueryParameter(qosPolicyName *string) *SvmCollectionGetParams {
	o.SetQosPolicyNameQueryParameter(qosPolicyName)
	return o
}

// SetQosPolicyNameQueryParameter adds the qosPolicyName to the svm collection get params
func (o *SvmCollectionGetParams) SetQosPolicyNameQueryParameter(qosPolicyName *string) {
	o.QosPolicyNameQueryParameter = qosPolicyName
}

// WithQosPolicyUUIDQueryParameter adds the qosPolicyUUID to the svm collection get params
func (o *SvmCollectionGetParams) WithQosPolicyUUIDQueryParameter(qosPolicyUUID *string) *SvmCollectionGetParams {
	o.SetQosPolicyUUIDQueryParameter(qosPolicyUUID)
	return o
}

// SetQosPolicyUUIDQueryParameter adds the qosPolicyUuid to the svm collection get params
func (o *SvmCollectionGetParams) SetQosPolicyUUIDQueryParameter(qosPolicyUUID *string) {
	o.QosPolicyUUIDQueryParameter = qosPolicyUUID
}

// WithReturnRecordsQueryParameter adds the returnRecords to the svm collection get params
func (o *SvmCollectionGetParams) WithReturnRecordsQueryParameter(returnRecords *bool) *SvmCollectionGetParams {
	o.SetReturnRecordsQueryParameter(returnRecords)
	return o
}

// SetReturnRecordsQueryParameter adds the returnRecords to the svm collection get params
func (o *SvmCollectionGetParams) SetReturnRecordsQueryParameter(returnRecords *bool) {
	o.ReturnRecordsQueryParameter = returnRecords
}

// WithReturnTimeoutQueryParameter adds the returnTimeout to the svm collection get params
func (o *SvmCollectionGetParams) WithReturnTimeoutQueryParameter(returnTimeout *int64) *SvmCollectionGetParams {
	o.SetReturnTimeoutQueryParameter(returnTimeout)
	return o
}

// SetReturnTimeoutQueryParameter adds the returnTimeout to the svm collection get params
func (o *SvmCollectionGetParams) SetReturnTimeoutQueryParameter(returnTimeout *int64) {
	o.ReturnTimeoutQueryParameter = returnTimeout
}

// WithS3EnabledQueryParameter adds the s3Enabled to the svm collection get params
func (o *SvmCollectionGetParams) WithS3EnabledQueryParameter(s3Enabled *bool) *SvmCollectionGetParams {
	o.SetS3EnabledQueryParameter(s3Enabled)
	return o
}

// SetS3EnabledQueryParameter adds the s3Enabled to the svm collection get params
func (o *SvmCollectionGetParams) SetS3EnabledQueryParameter(s3Enabled *bool) {
	o.S3EnabledQueryParameter = s3Enabled
}

// WithS3NameQueryParameter adds the s3Name to the svm collection get params
func (o *SvmCollectionGetParams) WithS3NameQueryParameter(s3Name *string) *SvmCollectionGetParams {
	o.SetS3NameQueryParameter(s3Name)
	return o
}

// SetS3NameQueryParameter adds the s3Name to the svm collection get params
func (o *SvmCollectionGetParams) SetS3NameQueryParameter(s3Name *string) {
	o.S3NameQueryParameter = s3Name
}

// WithSnapshotPolicyNameQueryParameter adds the snapshotPolicyName to the svm collection get params
func (o *SvmCollectionGetParams) WithSnapshotPolicyNameQueryParameter(snapshotPolicyName *string) *SvmCollectionGetParams {
	o.SetSnapshotPolicyNameQueryParameter(snapshotPolicyName)
	return o
}

// SetSnapshotPolicyNameQueryParameter adds the snapshotPolicyName to the svm collection get params
func (o *SvmCollectionGetParams) SetSnapshotPolicyNameQueryParameter(snapshotPolicyName *string) {
	o.SnapshotPolicyNameQueryParameter = snapshotPolicyName
}

// WithSnapshotPolicyUUIDQueryParameter adds the snapshotPolicyUUID to the svm collection get params
func (o *SvmCollectionGetParams) WithSnapshotPolicyUUIDQueryParameter(snapshotPolicyUUID *string) *SvmCollectionGetParams {
	o.SetSnapshotPolicyUUIDQueryParameter(snapshotPolicyUUID)
	return o
}

// SetSnapshotPolicyUUIDQueryParameter adds the snapshotPolicyUuid to the svm collection get params
func (o *SvmCollectionGetParams) SetSnapshotPolicyUUIDQueryParameter(snapshotPolicyUUID *string) {
	o.SnapshotPolicyUUIDQueryParameter = snapshotPolicyUUID
}

// WithStateQueryParameter adds the state to the svm collection get params
func (o *SvmCollectionGetParams) WithStateQueryParameter(state *string) *SvmCollectionGetParams {
	o.SetStateQueryParameter(state)
	return o
}

// SetStateQueryParameter adds the state to the svm collection get params
func (o *SvmCollectionGetParams) SetStateQueryParameter(state *string) {
	o.StateQueryParameter = state
}

// WithSubtypeQueryParameter adds the subtype to the svm collection get params
func (o *SvmCollectionGetParams) WithSubtypeQueryParameter(subtype *string) *SvmCollectionGetParams {
	o.SetSubtypeQueryParameter(subtype)
	return o
}

// SetSubtypeQueryParameter adds the subtype to the svm collection get params
func (o *SvmCollectionGetParams) SetSubtypeQueryParameter(subtype *string) {
	o.SubtypeQueryParameter = subtype
}

// WithUUIDQueryParameter adds the uuid to the svm collection get params
func (o *SvmCollectionGetParams) WithUUIDQueryParameter(uuid *string) *SvmCollectionGetParams {
	o.SetUUIDQueryParameter(uuid)
	return o
}

// SetUUIDQueryParameter adds the uuid to the svm collection get params
func (o *SvmCollectionGetParams) SetUUIDQueryParameter(uuid *string) {
	o.UUIDQueryParameter = uuid
}

// WriteToRequest writes these params to a swagger request
func (o *SvmCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AggregatesNameQueryParameter != nil {

		// query param aggregates.name
		var qrAggregatesName string

		if o.AggregatesNameQueryParameter != nil {
			qrAggregatesName = *o.AggregatesNameQueryParameter
		}
		qAggregatesName := qrAggregatesName
		if qAggregatesName != "" {

			if err := r.SetQueryParam("aggregates.name", qAggregatesName); err != nil {
				return err
			}
		}
	}

	if o.AggregatesUUIDQueryParameter != nil {

		// query param aggregates.uuid
		var qrAggregatesUUID string

		if o.AggregatesUUIDQueryParameter != nil {
			qrAggregatesUUID = *o.AggregatesUUIDQueryParameter
		}
		qAggregatesUUID := qrAggregatesUUID
		if qAggregatesUUID != "" {

			if err := r.SetQueryParam("aggregates.uuid", qAggregatesUUID); err != nil {
				return err
			}
		}
	}

	if o.AntiRansomwareDefaultVolumeStateQueryParameter != nil {

		// query param anti_ransomware_default_volume_state
		var qrAntiRansomwareDefaultVolumeState string

		if o.AntiRansomwareDefaultVolumeStateQueryParameter != nil {
			qrAntiRansomwareDefaultVolumeState = *o.AntiRansomwareDefaultVolumeStateQueryParameter
		}
		qAntiRansomwareDefaultVolumeState := qrAntiRansomwareDefaultVolumeState
		if qAntiRansomwareDefaultVolumeState != "" {

			if err := r.SetQueryParam("anti_ransomware_default_volume_state", qAntiRansomwareDefaultVolumeState); err != nil {
				return err
			}
		}
	}

	if o.CertificateUUIDQueryParameter != nil {

		// query param certificate.uuid
		var qrCertificateUUID string

		if o.CertificateUUIDQueryParameter != nil {
			qrCertificateUUID = *o.CertificateUUIDQueryParameter
		}
		qCertificateUUID := qrCertificateUUID
		if qCertificateUUID != "" {

			if err := r.SetQueryParam("certificate.uuid", qCertificateUUID); err != nil {
				return err
			}
		}
	}

	if o.CifsAdDomainFqdnQueryParameter != nil {

		// query param cifs.ad_domain.fqdn
		var qrCifsAdDomainFqdn string

		if o.CifsAdDomainFqdnQueryParameter != nil {
			qrCifsAdDomainFqdn = *o.CifsAdDomainFqdnQueryParameter
		}
		qCifsAdDomainFqdn := qrCifsAdDomainFqdn
		if qCifsAdDomainFqdn != "" {

			if err := r.SetQueryParam("cifs.ad_domain.fqdn", qCifsAdDomainFqdn); err != nil {
				return err
			}
		}
	}

	if o.CifsAdDomainOrganizationalUnitQueryParameter != nil {

		// query param cifs.ad_domain.organizational_unit
		var qrCifsAdDomainOrganizationalUnit string

		if o.CifsAdDomainOrganizationalUnitQueryParameter != nil {
			qrCifsAdDomainOrganizationalUnit = *o.CifsAdDomainOrganizationalUnitQueryParameter
		}
		qCifsAdDomainOrganizationalUnit := qrCifsAdDomainOrganizationalUnit
		if qCifsAdDomainOrganizationalUnit != "" {

			if err := r.SetQueryParam("cifs.ad_domain.organizational_unit", qCifsAdDomainOrganizationalUnit); err != nil {
				return err
			}
		}
	}

	if o.CifsAllowedQueryParameter != nil {

		// query param cifs.allowed
		var qrCifsAllowed bool

		if o.CifsAllowedQueryParameter != nil {
			qrCifsAllowed = *o.CifsAllowedQueryParameter
		}
		qCifsAllowed := swag.FormatBool(qrCifsAllowed)
		if qCifsAllowed != "" {

			if err := r.SetQueryParam("cifs.allowed", qCifsAllowed); err != nil {
				return err
			}
		}
	}

	if o.CifsEnabledQueryParameter != nil {

		// query param cifs.enabled
		var qrCifsEnabled bool

		if o.CifsEnabledQueryParameter != nil {
			qrCifsEnabled = *o.CifsEnabledQueryParameter
		}
		qCifsEnabled := swag.FormatBool(qrCifsEnabled)
		if qCifsEnabled != "" {

			if err := r.SetQueryParam("cifs.enabled", qCifsEnabled); err != nil {
				return err
			}
		}
	}

	if o.CifsNameQueryParameter != nil {

		// query param cifs.name
		var qrCifsName string

		if o.CifsNameQueryParameter != nil {
			qrCifsName = *o.CifsNameQueryParameter
		}
		qCifsName := qrCifsName
		if qCifsName != "" {

			if err := r.SetQueryParam("cifs.name", qCifsName); err != nil {
				return err
			}
		}
	}

	if o.CommentQueryParameter != nil {

		// query param comment
		var qrComment string

		if o.CommentQueryParameter != nil {
			qrComment = *o.CommentQueryParameter
		}
		qComment := qrComment
		if qComment != "" {

			if err := r.SetQueryParam("comment", qComment); err != nil {
				return err
			}
		}
	}

	if o.DNSDomainsQueryParameter != nil {

		// query param dns.domains
		var qrDNSDomains string

		if o.DNSDomainsQueryParameter != nil {
			qrDNSDomains = *o.DNSDomainsQueryParameter
		}
		qDNSDomains := qrDNSDomains
		if qDNSDomains != "" {

			if err := r.SetQueryParam("dns.domains", qDNSDomains); err != nil {
				return err
			}
		}
	}

	if o.DNSServersQueryParameter != nil {

		// query param dns.servers
		var qrDNSServers string

		if o.DNSServersQueryParameter != nil {
			qrDNSServers = *o.DNSServersQueryParameter
		}
		qDNSServers := qrDNSServers
		if qDNSServers != "" {

			if err := r.SetQueryParam("dns.servers", qDNSServers); err != nil {
				return err
			}
		}
	}

	if o.FcInterfacesDataProtocolQueryParameter != nil {

		// query param fc_interfaces.data_protocol
		var qrFcInterfacesDataProtocol string

		if o.FcInterfacesDataProtocolQueryParameter != nil {
			qrFcInterfacesDataProtocol = *o.FcInterfacesDataProtocolQueryParameter
		}
		qFcInterfacesDataProtocol := qrFcInterfacesDataProtocol
		if qFcInterfacesDataProtocol != "" {

			if err := r.SetQueryParam("fc_interfaces.data_protocol", qFcInterfacesDataProtocol); err != nil {
				return err
			}
		}
	}

	if o.FcInterfacesNameQueryParameter != nil {

		// query param fc_interfaces.name
		var qrFcInterfacesName string

		if o.FcInterfacesNameQueryParameter != nil {
			qrFcInterfacesName = *o.FcInterfacesNameQueryParameter
		}
		qFcInterfacesName := qrFcInterfacesName
		if qFcInterfacesName != "" {

			if err := r.SetQueryParam("fc_interfaces.name", qFcInterfacesName); err != nil {
				return err
			}
		}
	}

	if o.FcpAllowedQueryParameter != nil {

		// query param fcp.allowed
		var qrFcpAllowed bool

		if o.FcpAllowedQueryParameter != nil {
			qrFcpAllowed = *o.FcpAllowedQueryParameter
		}
		qFcpAllowed := swag.FormatBool(qrFcpAllowed)
		if qFcpAllowed != "" {

			if err := r.SetQueryParam("fcp.allowed", qFcpAllowed); err != nil {
				return err
			}
		}
	}

	if o.FcpEnabledQueryParameter != nil {

		// query param fcp.enabled
		var qrFcpEnabled bool

		if o.FcpEnabledQueryParameter != nil {
			qrFcpEnabled = *o.FcpEnabledQueryParameter
		}
		qFcpEnabled := swag.FormatBool(qrFcpEnabled)
		if qFcpEnabled != "" {

			if err := r.SetQueryParam("fcp.enabled", qFcpEnabled); err != nil {
				return err
			}
		}
	}

	if o.FieldsQueryParameter != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.IpspaceNameQueryParameter != nil {

		// query param ipspace.name
		var qrIpspaceName string

		if o.IpspaceNameQueryParameter != nil {
			qrIpspaceName = *o.IpspaceNameQueryParameter
		}
		qIpspaceName := qrIpspaceName
		if qIpspaceName != "" {

			if err := r.SetQueryParam("ipspace.name", qIpspaceName); err != nil {
				return err
			}
		}
	}

	if o.IpspaceUUIDQueryParameter != nil {

		// query param ipspace.uuid
		var qrIpspaceUUID string

		if o.IpspaceUUIDQueryParameter != nil {
			qrIpspaceUUID = *o.IpspaceUUIDQueryParameter
		}
		qIpspaceUUID := qrIpspaceUUID
		if qIpspaceUUID != "" {

			if err := r.SetQueryParam("ipspace.uuid", qIpspaceUUID); err != nil {
				return err
			}
		}
	}

	if o.IscsiAllowedQueryParameter != nil {

		// query param iscsi.allowed
		var qrIscsiAllowed bool

		if o.IscsiAllowedQueryParameter != nil {
			qrIscsiAllowed = *o.IscsiAllowedQueryParameter
		}
		qIscsiAllowed := swag.FormatBool(qrIscsiAllowed)
		if qIscsiAllowed != "" {

			if err := r.SetQueryParam("iscsi.allowed", qIscsiAllowed); err != nil {
				return err
			}
		}
	}

	if o.IscsiEnabledQueryParameter != nil {

		// query param iscsi.enabled
		var qrIscsiEnabled bool

		if o.IscsiEnabledQueryParameter != nil {
			qrIscsiEnabled = *o.IscsiEnabledQueryParameter
		}
		qIscsiEnabled := swag.FormatBool(qrIscsiEnabled)
		if qIscsiEnabled != "" {

			if err := r.SetQueryParam("iscsi.enabled", qIscsiEnabled); err != nil {
				return err
			}
		}
	}

	if o.LanguageQueryParameter != nil {

		// query param language
		var qrLanguage string

		if o.LanguageQueryParameter != nil {
			qrLanguage = *o.LanguageQueryParameter
		}
		qLanguage := qrLanguage
		if qLanguage != "" {

			if err := r.SetQueryParam("language", qLanguage); err != nil {
				return err
			}
		}
	}

	if o.LdapAdDomainQueryParameter != nil {

		// query param ldap.ad_domain
		var qrLdapAdDomain string

		if o.LdapAdDomainQueryParameter != nil {
			qrLdapAdDomain = *o.LdapAdDomainQueryParameter
		}
		qLdapAdDomain := qrLdapAdDomain
		if qLdapAdDomain != "" {

			if err := r.SetQueryParam("ldap.ad_domain", qLdapAdDomain); err != nil {
				return err
			}
		}
	}

	if o.LdapBaseDnQueryParameter != nil {

		// query param ldap.base_dn
		var qrLdapBaseDn string

		if o.LdapBaseDnQueryParameter != nil {
			qrLdapBaseDn = *o.LdapBaseDnQueryParameter
		}
		qLdapBaseDn := qrLdapBaseDn
		if qLdapBaseDn != "" {

			if err := r.SetQueryParam("ldap.base_dn", qLdapBaseDn); err != nil {
				return err
			}
		}
	}

	if o.LdapBindDnQueryParameter != nil {

		// query param ldap.bind_dn
		var qrLdapBindDn string

		if o.LdapBindDnQueryParameter != nil {
			qrLdapBindDn = *o.LdapBindDnQueryParameter
		}
		qLdapBindDn := qrLdapBindDn
		if qLdapBindDn != "" {

			if err := r.SetQueryParam("ldap.bind_dn", qLdapBindDn); err != nil {
				return err
			}
		}
	}

	if o.LdapEnabledQueryParameter != nil {

		// query param ldap.enabled
		var qrLdapEnabled bool

		if o.LdapEnabledQueryParameter != nil {
			qrLdapEnabled = *o.LdapEnabledQueryParameter
		}
		qLdapEnabled := swag.FormatBool(qrLdapEnabled)
		if qLdapEnabled != "" {

			if err := r.SetQueryParam("ldap.enabled", qLdapEnabled); err != nil {
				return err
			}
		}
	}

	if o.LdapServersQueryParameter != nil {

		// query param ldap.servers
		var qrLdapServers string

		if o.LdapServersQueryParameter != nil {
			qrLdapServers = *o.LdapServersQueryParameter
		}
		qLdapServers := qrLdapServers
		if qLdapServers != "" {

			if err := r.SetQueryParam("ldap.servers", qLdapServers); err != nil {
				return err
			}
		}
	}

	if o.MaxRecordsQueryParameter != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecordsQueryParameter != nil {
			qrMaxRecords = *o.MaxRecordsQueryParameter
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.MaxVolumesQueryParameter != nil {

		// query param max_volumes
		var qrMaxVolumes string

		if o.MaxVolumesQueryParameter != nil {
			qrMaxVolumes = *o.MaxVolumesQueryParameter
		}
		qMaxVolumes := qrMaxVolumes
		if qMaxVolumes != "" {

			if err := r.SetQueryParam("max_volumes", qMaxVolumes); err != nil {
				return err
			}
		}
	}

	if o.NameQueryParameter != nil {

		// query param name
		var qrName string

		if o.NameQueryParameter != nil {
			qrName = *o.NameQueryParameter
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.NdmpAllowedQueryParameter != nil {

		// query param ndmp.allowed
		var qrNdmpAllowed bool

		if o.NdmpAllowedQueryParameter != nil {
			qrNdmpAllowed = *o.NdmpAllowedQueryParameter
		}
		qNdmpAllowed := swag.FormatBool(qrNdmpAllowed)
		if qNdmpAllowed != "" {

			if err := r.SetQueryParam("ndmp.allowed", qNdmpAllowed); err != nil {
				return err
			}
		}
	}

	if o.NfsAllowedQueryParameter != nil {

		// query param nfs.allowed
		var qrNfsAllowed bool

		if o.NfsAllowedQueryParameter != nil {
			qrNfsAllowed = *o.NfsAllowedQueryParameter
		}
		qNfsAllowed := swag.FormatBool(qrNfsAllowed)
		if qNfsAllowed != "" {

			if err := r.SetQueryParam("nfs.allowed", qNfsAllowed); err != nil {
				return err
			}
		}
	}

	if o.NfsEnabledQueryParameter != nil {

		// query param nfs.enabled
		var qrNfsEnabled bool

		if o.NfsEnabledQueryParameter != nil {
			qrNfsEnabled = *o.NfsEnabledQueryParameter
		}
		qNfsEnabled := swag.FormatBool(qrNfsEnabled)
		if qNfsEnabled != "" {

			if err := r.SetQueryParam("nfs.enabled", qNfsEnabled); err != nil {
				return err
			}
		}
	}

	if o.NisDomainQueryParameter != nil {

		// query param nis.domain
		var qrNisDomain string

		if o.NisDomainQueryParameter != nil {
			qrNisDomain = *o.NisDomainQueryParameter
		}
		qNisDomain := qrNisDomain
		if qNisDomain != "" {

			if err := r.SetQueryParam("nis.domain", qNisDomain); err != nil {
				return err
			}
		}
	}

	if o.NisEnabledQueryParameter != nil {

		// query param nis.enabled
		var qrNisEnabled bool

		if o.NisEnabledQueryParameter != nil {
			qrNisEnabled = *o.NisEnabledQueryParameter
		}
		qNisEnabled := swag.FormatBool(qrNisEnabled)
		if qNisEnabled != "" {

			if err := r.SetQueryParam("nis.enabled", qNisEnabled); err != nil {
				return err
			}
		}
	}

	if o.NisServersQueryParameter != nil {

		// query param nis.servers
		var qrNisServers string

		if o.NisServersQueryParameter != nil {
			qrNisServers = *o.NisServersQueryParameter
		}
		qNisServers := qrNisServers
		if qNisServers != "" {

			if err := r.SetQueryParam("nis.servers", qNisServers); err != nil {
				return err
			}
		}
	}

	if o.NsswitchGroupQueryParameter != nil {

		// query param nsswitch.group
		var qrNsswitchGroup string

		if o.NsswitchGroupQueryParameter != nil {
			qrNsswitchGroup = *o.NsswitchGroupQueryParameter
		}
		qNsswitchGroup := qrNsswitchGroup
		if qNsswitchGroup != "" {

			if err := r.SetQueryParam("nsswitch.group", qNsswitchGroup); err != nil {
				return err
			}
		}
	}

	if o.NsswitchHostsQueryParameter != nil {

		// query param nsswitch.hosts
		var qrNsswitchHosts string

		if o.NsswitchHostsQueryParameter != nil {
			qrNsswitchHosts = *o.NsswitchHostsQueryParameter
		}
		qNsswitchHosts := qrNsswitchHosts
		if qNsswitchHosts != "" {

			if err := r.SetQueryParam("nsswitch.hosts", qNsswitchHosts); err != nil {
				return err
			}
		}
	}

	if o.NsswitchNamemapQueryParameter != nil {

		// query param nsswitch.namemap
		var qrNsswitchNamemap string

		if o.NsswitchNamemapQueryParameter != nil {
			qrNsswitchNamemap = *o.NsswitchNamemapQueryParameter
		}
		qNsswitchNamemap := qrNsswitchNamemap
		if qNsswitchNamemap != "" {

			if err := r.SetQueryParam("nsswitch.namemap", qNsswitchNamemap); err != nil {
				return err
			}
		}
	}

	if o.NsswitchNetgroupQueryParameter != nil {

		// query param nsswitch.netgroup
		var qrNsswitchNetgroup string

		if o.NsswitchNetgroupQueryParameter != nil {
			qrNsswitchNetgroup = *o.NsswitchNetgroupQueryParameter
		}
		qNsswitchNetgroup := qrNsswitchNetgroup
		if qNsswitchNetgroup != "" {

			if err := r.SetQueryParam("nsswitch.netgroup", qNsswitchNetgroup); err != nil {
				return err
			}
		}
	}

	if o.NsswitchPasswdQueryParameter != nil {

		// query param nsswitch.passwd
		var qrNsswitchPasswd string

		if o.NsswitchPasswdQueryParameter != nil {
			qrNsswitchPasswd = *o.NsswitchPasswdQueryParameter
		}
		qNsswitchPasswd := qrNsswitchPasswd
		if qNsswitchPasswd != "" {

			if err := r.SetQueryParam("nsswitch.passwd", qNsswitchPasswd); err != nil {
				return err
			}
		}
	}

	if o.NvmeAllowedQueryParameter != nil {

		// query param nvme.allowed
		var qrNvmeAllowed bool

		if o.NvmeAllowedQueryParameter != nil {
			qrNvmeAllowed = *o.NvmeAllowedQueryParameter
		}
		qNvmeAllowed := swag.FormatBool(qrNvmeAllowed)
		if qNvmeAllowed != "" {

			if err := r.SetQueryParam("nvme.allowed", qNvmeAllowed); err != nil {
				return err
			}
		}
	}

	if o.NvmeEnabledQueryParameter != nil {

		// query param nvme.enabled
		var qrNvmeEnabled bool

		if o.NvmeEnabledQueryParameter != nil {
			qrNvmeEnabled = *o.NvmeEnabledQueryParameter
		}
		qNvmeEnabled := swag.FormatBool(qrNvmeEnabled)
		if qNvmeEnabled != "" {

			if err := r.SetQueryParam("nvme.enabled", qNvmeEnabled); err != nil {
				return err
			}
		}
	}

	if o.OrderByQueryParameter != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.QosPolicyNameQueryParameter != nil {

		// query param qos_policy.name
		var qrQosPolicyName string

		if o.QosPolicyNameQueryParameter != nil {
			qrQosPolicyName = *o.QosPolicyNameQueryParameter
		}
		qQosPolicyName := qrQosPolicyName
		if qQosPolicyName != "" {

			if err := r.SetQueryParam("qos_policy.name", qQosPolicyName); err != nil {
				return err
			}
		}
	}

	if o.QosPolicyUUIDQueryParameter != nil {

		// query param qos_policy.uuid
		var qrQosPolicyUUID string

		if o.QosPolicyUUIDQueryParameter != nil {
			qrQosPolicyUUID = *o.QosPolicyUUIDQueryParameter
		}
		qQosPolicyUUID := qrQosPolicyUUID
		if qQosPolicyUUID != "" {

			if err := r.SetQueryParam("qos_policy.uuid", qQosPolicyUUID); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecordsQueryParameter != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecordsQueryParameter != nil {
			qrReturnRecords = *o.ReturnRecordsQueryParameter
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeoutQueryParameter != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeoutQueryParameter != nil {
			qrReturnTimeout = *o.ReturnTimeoutQueryParameter
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.S3EnabledQueryParameter != nil {

		// query param s3.enabled
		var qrS3Enabled bool

		if o.S3EnabledQueryParameter != nil {
			qrS3Enabled = *o.S3EnabledQueryParameter
		}
		qS3Enabled := swag.FormatBool(qrS3Enabled)
		if qS3Enabled != "" {

			if err := r.SetQueryParam("s3.enabled", qS3Enabled); err != nil {
				return err
			}
		}
	}

	if o.S3NameQueryParameter != nil {

		// query param s3.name
		var qrS3Name string

		if o.S3NameQueryParameter != nil {
			qrS3Name = *o.S3NameQueryParameter
		}
		qS3Name := qrS3Name
		if qS3Name != "" {

			if err := r.SetQueryParam("s3.name", qS3Name); err != nil {
				return err
			}
		}
	}

	if o.SnapshotPolicyNameQueryParameter != nil {

		// query param snapshot_policy.name
		var qrSnapshotPolicyName string

		if o.SnapshotPolicyNameQueryParameter != nil {
			qrSnapshotPolicyName = *o.SnapshotPolicyNameQueryParameter
		}
		qSnapshotPolicyName := qrSnapshotPolicyName
		if qSnapshotPolicyName != "" {

			if err := r.SetQueryParam("snapshot_policy.name", qSnapshotPolicyName); err != nil {
				return err
			}
		}
	}

	if o.SnapshotPolicyUUIDQueryParameter != nil {

		// query param snapshot_policy.uuid
		var qrSnapshotPolicyUUID string

		if o.SnapshotPolicyUUIDQueryParameter != nil {
			qrSnapshotPolicyUUID = *o.SnapshotPolicyUUIDQueryParameter
		}
		qSnapshotPolicyUUID := qrSnapshotPolicyUUID
		if qSnapshotPolicyUUID != "" {

			if err := r.SetQueryParam("snapshot_policy.uuid", qSnapshotPolicyUUID); err != nil {
				return err
			}
		}
	}

	if o.StateQueryParameter != nil {

		// query param state
		var qrState string

		if o.StateQueryParameter != nil {
			qrState = *o.StateQueryParameter
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if o.SubtypeQueryParameter != nil {

		// query param subtype
		var qrSubtype string

		if o.SubtypeQueryParameter != nil {
			qrSubtype = *o.SubtypeQueryParameter
		}
		qSubtype := qrSubtype
		if qSubtype != "" {

			if err := r.SetQueryParam("subtype", qSubtype); err != nil {
				return err
			}
		}
	}

	if o.UUIDQueryParameter != nil {

		// query param uuid
		var qrUUID string

		if o.UUIDQueryParameter != nil {
			qrUUID = *o.UUIDQueryParameter
		}
		qUUID := qrUUID
		if qUUID != "" {

			if err := r.SetQueryParam("uuid", qUUID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamSvmCollectionGet binds the parameter fields
func (o *SvmCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.FieldsQueryParameter

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamSvmCollectionGet binds the parameter order_by
func (o *SvmCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderByQueryParameter

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
