// Code generated by go-swagger; DO NOT EDIT.

package ndmp

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewNdmpNodeSessionsCollectionGetParams creates a new NdmpNodeSessionsCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewNdmpNodeSessionsCollectionGetParams() *NdmpNodeSessionsCollectionGetParams {
	return &NdmpNodeSessionsCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewNdmpNodeSessionsCollectionGetParamsWithTimeout creates a new NdmpNodeSessionsCollectionGetParams object
// with the ability to set a timeout on a request.
func NewNdmpNodeSessionsCollectionGetParamsWithTimeout(timeout time.Duration) *NdmpNodeSessionsCollectionGetParams {
	return &NdmpNodeSessionsCollectionGetParams{
		timeout: timeout,
	}
}

// NewNdmpNodeSessionsCollectionGetParamsWithContext creates a new NdmpNodeSessionsCollectionGetParams object
// with the ability to set a context for a request.
func NewNdmpNodeSessionsCollectionGetParamsWithContext(ctx context.Context) *NdmpNodeSessionsCollectionGetParams {
	return &NdmpNodeSessionsCollectionGetParams{
		Context: ctx,
	}
}

// NewNdmpNodeSessionsCollectionGetParamsWithHTTPClient creates a new NdmpNodeSessionsCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewNdmpNodeSessionsCollectionGetParamsWithHTTPClient(client *http.Client) *NdmpNodeSessionsCollectionGetParams {
	return &NdmpNodeSessionsCollectionGetParams{
		HTTPClient: client,
	}
}

/* NdmpNodeSessionsCollectionGetParams contains all the parameters to send to the API endpoint
   for the ndmp node sessions collection get operation.

   Typically these are written to a http.Request.
*/
type NdmpNodeSessionsCollectionGetParams struct {

	/* BackupEngine.

	   Filter by backup_engine
	*/
	BackupEngineQueryParameter *string

	/* ClientAddress.

	   Filter by client_address
	*/
	ClientAddressQueryParameter *string

	/* ClientPort.

	   Filter by client_port
	*/
	ClientPortQueryParameter *int64

	/* DataBytesProcessed.

	   Filter by data.bytes_processed
	*/
	DataBytesProcessedQueryParameter *int64

	/* DataConnectionAddress.

	   Filter by data.connection.address
	*/
	DataConnectionAddressQueryParameter *string

	/* DataConnectionPort.

	   Filter by data.connection.port
	*/
	DataConnectionPortQueryParameter *int64

	/* DataConnectionType.

	   Filter by data.connection.type
	*/
	DataConnectionTypeQueryParameter *string

	/* DataOperation.

	   Filter by data.operation
	*/
	DataOperationQueryParameter *string

	/* DataReason.

	   Filter by data.reason
	*/
	DataReasonQueryParameter *string

	/* DataState.

	   Filter by data.state
	*/
	DataStateQueryParameter *string

	/* DataPath.

	   Filter by data_path
	*/
	DataPathQueryParameter *string

	/* Fields.

	   Specify the fields to return.
	*/
	Fields []string

	/* ID.

	   Filter by id
	*/
	IDQueryParameter *string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecords *int64

	/* MoverBytesMoved.

	   Filter by mover.bytes_moved
	*/
	MoverBytesMovedQueryParameter *int64

	/* MoverConnectionAddress.

	   Filter by mover.connection.address
	*/
	MoverConnectionAddressQueryParameter *string

	/* MoverConnectionPort.

	   Filter by mover.connection.port
	*/
	MoverConnectionPortQueryParameter *int64

	/* MoverConnectionType.

	   Filter by mover.connection.type
	*/
	MoverConnectionTypeQueryParameter *string

	/* MoverMode.

	   Filter by mover.mode
	*/
	MoverModeQueryParameter *string

	/* MoverReason.

	   Filter by mover.reason
	*/
	MoverReasonQueryParameter *string

	/* MoverState.

	   Filter by mover.state
	*/
	MoverStateQueryParameter *string

	/* NodeName.

	   Filter by node.name
	*/
	NodeNameQueryParameter *string

	/* NodeUUID.

	   Filter by node.uuid
	*/
	NodeUUIDQueryParameter *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderBy []string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecords *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeout *int64

	/* ScsiDeviceID.

	   Filter by scsi.device_id
	*/
	ScsiDeviceIDQueryParameter *string

	/* ScsiHostAdapter.

	   Filter by scsi.host_adapter
	*/
	ScsiHostAdapterQueryParameter *int64

	/* ScsiLunID.

	   Filter by scsi.lun_id
	*/
	ScsiLunIDQueryParameter *int64

	/* ScsiTargetID.

	   Filter by scsi.target_id
	*/
	ScsiTargetIDQueryParameter *int64

	/* SourceAddress.

	   Filter by source_address
	*/
	SourceAddressQueryParameter *string

	/* SvmName.

	   Filter by svm.name
	*/
	SVMNameQueryParameter *string

	/* SvmUUID.

	   Filter by svm.uuid
	*/
	SVMUUIDQueryParameter *string

	/* TapeDevice.

	   Filter by tape_device
	*/
	TapeDeviceQueryParameter *string

	/* TapeMode.

	   Filter by tape_mode
	*/
	TapeModeQueryParameter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the ndmp node sessions collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NdmpNodeSessionsCollectionGetParams) WithDefaults() *NdmpNodeSessionsCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the ndmp node sessions collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NdmpNodeSessionsCollectionGetParams) SetDefaults() {
	var (
		returnRecordsDefault = bool(true)

		returnTimeoutDefault = int64(15)
	)

	val := NdmpNodeSessionsCollectionGetParams{
		ReturnRecords: &returnRecordsDefault,
		ReturnTimeout: &returnTimeoutDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) WithTimeout(timeout time.Duration) *NdmpNodeSessionsCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) WithContext(ctx context.Context) *NdmpNodeSessionsCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) WithHTTPClient(client *http.Client) *NdmpNodeSessionsCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBackupEngineQueryParameter adds the backupEngine to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) WithBackupEngineQueryParameter(backupEngine *string) *NdmpNodeSessionsCollectionGetParams {
	o.SetBackupEngineQueryParameter(backupEngine)
	return o
}

// SetBackupEngineQueryParameter adds the backupEngine to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) SetBackupEngineQueryParameter(backupEngine *string) {
	o.BackupEngineQueryParameter = backupEngine
}

// WithClientAddressQueryParameter adds the clientAddress to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) WithClientAddressQueryParameter(clientAddress *string) *NdmpNodeSessionsCollectionGetParams {
	o.SetClientAddressQueryParameter(clientAddress)
	return o
}

// SetClientAddressQueryParameter adds the clientAddress to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) SetClientAddressQueryParameter(clientAddress *string) {
	o.ClientAddressQueryParameter = clientAddress
}

// WithClientPortQueryParameter adds the clientPort to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) WithClientPortQueryParameter(clientPort *int64) *NdmpNodeSessionsCollectionGetParams {
	o.SetClientPortQueryParameter(clientPort)
	return o
}

// SetClientPortQueryParameter adds the clientPort to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) SetClientPortQueryParameter(clientPort *int64) {
	o.ClientPortQueryParameter = clientPort
}

// WithDataBytesProcessedQueryParameter adds the dataBytesProcessed to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) WithDataBytesProcessedQueryParameter(dataBytesProcessed *int64) *NdmpNodeSessionsCollectionGetParams {
	o.SetDataBytesProcessedQueryParameter(dataBytesProcessed)
	return o
}

// SetDataBytesProcessedQueryParameter adds the dataBytesProcessed to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) SetDataBytesProcessedQueryParameter(dataBytesProcessed *int64) {
	o.DataBytesProcessedQueryParameter = dataBytesProcessed
}

// WithDataConnectionAddressQueryParameter adds the dataConnectionAddress to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) WithDataConnectionAddressQueryParameter(dataConnectionAddress *string) *NdmpNodeSessionsCollectionGetParams {
	o.SetDataConnectionAddressQueryParameter(dataConnectionAddress)
	return o
}

// SetDataConnectionAddressQueryParameter adds the dataConnectionAddress to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) SetDataConnectionAddressQueryParameter(dataConnectionAddress *string) {
	o.DataConnectionAddressQueryParameter = dataConnectionAddress
}

// WithDataConnectionPortQueryParameter adds the dataConnectionPort to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) WithDataConnectionPortQueryParameter(dataConnectionPort *int64) *NdmpNodeSessionsCollectionGetParams {
	o.SetDataConnectionPortQueryParameter(dataConnectionPort)
	return o
}

// SetDataConnectionPortQueryParameter adds the dataConnectionPort to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) SetDataConnectionPortQueryParameter(dataConnectionPort *int64) {
	o.DataConnectionPortQueryParameter = dataConnectionPort
}

// WithDataConnectionTypeQueryParameter adds the dataConnectionType to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) WithDataConnectionTypeQueryParameter(dataConnectionType *string) *NdmpNodeSessionsCollectionGetParams {
	o.SetDataConnectionTypeQueryParameter(dataConnectionType)
	return o
}

// SetDataConnectionTypeQueryParameter adds the dataConnectionType to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) SetDataConnectionTypeQueryParameter(dataConnectionType *string) {
	o.DataConnectionTypeQueryParameter = dataConnectionType
}

// WithDataOperationQueryParameter adds the dataOperation to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) WithDataOperationQueryParameter(dataOperation *string) *NdmpNodeSessionsCollectionGetParams {
	o.SetDataOperationQueryParameter(dataOperation)
	return o
}

// SetDataOperationQueryParameter adds the dataOperation to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) SetDataOperationQueryParameter(dataOperation *string) {
	o.DataOperationQueryParameter = dataOperation
}

// WithDataReasonQueryParameter adds the dataReason to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) WithDataReasonQueryParameter(dataReason *string) *NdmpNodeSessionsCollectionGetParams {
	o.SetDataReasonQueryParameter(dataReason)
	return o
}

// SetDataReasonQueryParameter adds the dataReason to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) SetDataReasonQueryParameter(dataReason *string) {
	o.DataReasonQueryParameter = dataReason
}

// WithDataStateQueryParameter adds the dataState to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) WithDataStateQueryParameter(dataState *string) *NdmpNodeSessionsCollectionGetParams {
	o.SetDataStateQueryParameter(dataState)
	return o
}

// SetDataStateQueryParameter adds the dataState to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) SetDataStateQueryParameter(dataState *string) {
	o.DataStateQueryParameter = dataState
}

// WithDataPathQueryParameter adds the dataPath to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) WithDataPathQueryParameter(dataPath *string) *NdmpNodeSessionsCollectionGetParams {
	o.SetDataPathQueryParameter(dataPath)
	return o
}

// SetDataPathQueryParameter adds the dataPath to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) SetDataPathQueryParameter(dataPath *string) {
	o.DataPathQueryParameter = dataPath
}

// WithFields adds the fields to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) WithFields(fields []string) *NdmpNodeSessionsCollectionGetParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithIDQueryParameter adds the id to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) WithIDQueryParameter(id *string) *NdmpNodeSessionsCollectionGetParams {
	o.SetIDQueryParameter(id)
	return o
}

// SetIDQueryParameter adds the id to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) SetIDQueryParameter(id *string) {
	o.IDQueryParameter = id
}

// WithMaxRecords adds the maxRecords to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) WithMaxRecords(maxRecords *int64) *NdmpNodeSessionsCollectionGetParams {
	o.SetMaxRecords(maxRecords)
	return o
}

// SetMaxRecords adds the maxRecords to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) SetMaxRecords(maxRecords *int64) {
	o.MaxRecords = maxRecords
}

// WithMoverBytesMovedQueryParameter adds the moverBytesMoved to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) WithMoverBytesMovedQueryParameter(moverBytesMoved *int64) *NdmpNodeSessionsCollectionGetParams {
	o.SetMoverBytesMovedQueryParameter(moverBytesMoved)
	return o
}

// SetMoverBytesMovedQueryParameter adds the moverBytesMoved to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) SetMoverBytesMovedQueryParameter(moverBytesMoved *int64) {
	o.MoverBytesMovedQueryParameter = moverBytesMoved
}

// WithMoverConnectionAddressQueryParameter adds the moverConnectionAddress to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) WithMoverConnectionAddressQueryParameter(moverConnectionAddress *string) *NdmpNodeSessionsCollectionGetParams {
	o.SetMoverConnectionAddressQueryParameter(moverConnectionAddress)
	return o
}

// SetMoverConnectionAddressQueryParameter adds the moverConnectionAddress to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) SetMoverConnectionAddressQueryParameter(moverConnectionAddress *string) {
	o.MoverConnectionAddressQueryParameter = moverConnectionAddress
}

// WithMoverConnectionPortQueryParameter adds the moverConnectionPort to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) WithMoverConnectionPortQueryParameter(moverConnectionPort *int64) *NdmpNodeSessionsCollectionGetParams {
	o.SetMoverConnectionPortQueryParameter(moverConnectionPort)
	return o
}

// SetMoverConnectionPortQueryParameter adds the moverConnectionPort to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) SetMoverConnectionPortQueryParameter(moverConnectionPort *int64) {
	o.MoverConnectionPortQueryParameter = moverConnectionPort
}

// WithMoverConnectionTypeQueryParameter adds the moverConnectionType to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) WithMoverConnectionTypeQueryParameter(moverConnectionType *string) *NdmpNodeSessionsCollectionGetParams {
	o.SetMoverConnectionTypeQueryParameter(moverConnectionType)
	return o
}

// SetMoverConnectionTypeQueryParameter adds the moverConnectionType to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) SetMoverConnectionTypeQueryParameter(moverConnectionType *string) {
	o.MoverConnectionTypeQueryParameter = moverConnectionType
}

// WithMoverModeQueryParameter adds the moverMode to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) WithMoverModeQueryParameter(moverMode *string) *NdmpNodeSessionsCollectionGetParams {
	o.SetMoverModeQueryParameter(moverMode)
	return o
}

// SetMoverModeQueryParameter adds the moverMode to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) SetMoverModeQueryParameter(moverMode *string) {
	o.MoverModeQueryParameter = moverMode
}

// WithMoverReasonQueryParameter adds the moverReason to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) WithMoverReasonQueryParameter(moverReason *string) *NdmpNodeSessionsCollectionGetParams {
	o.SetMoverReasonQueryParameter(moverReason)
	return o
}

// SetMoverReasonQueryParameter adds the moverReason to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) SetMoverReasonQueryParameter(moverReason *string) {
	o.MoverReasonQueryParameter = moverReason
}

// WithMoverStateQueryParameter adds the moverState to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) WithMoverStateQueryParameter(moverState *string) *NdmpNodeSessionsCollectionGetParams {
	o.SetMoverStateQueryParameter(moverState)
	return o
}

// SetMoverStateQueryParameter adds the moverState to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) SetMoverStateQueryParameter(moverState *string) {
	o.MoverStateQueryParameter = moverState
}

// WithNodeNameQueryParameter adds the nodeName to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) WithNodeNameQueryParameter(nodeName *string) *NdmpNodeSessionsCollectionGetParams {
	o.SetNodeNameQueryParameter(nodeName)
	return o
}

// SetNodeNameQueryParameter adds the nodeName to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) SetNodeNameQueryParameter(nodeName *string) {
	o.NodeNameQueryParameter = nodeName
}

// WithNodeUUIDQueryParameter adds the nodeUUID to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) WithNodeUUIDQueryParameter(nodeUUID *string) *NdmpNodeSessionsCollectionGetParams {
	o.SetNodeUUIDQueryParameter(nodeUUID)
	return o
}

// SetNodeUUIDQueryParameter adds the nodeUuid to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) SetNodeUUIDQueryParameter(nodeUUID *string) {
	o.NodeUUIDQueryParameter = nodeUUID
}

// WithOrderBy adds the orderBy to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) WithOrderBy(orderBy []string) *NdmpNodeSessionsCollectionGetParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) SetOrderBy(orderBy []string) {
	o.OrderBy = orderBy
}

// WithReturnRecords adds the returnRecords to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) WithReturnRecords(returnRecords *bool) *NdmpNodeSessionsCollectionGetParams {
	o.SetReturnRecords(returnRecords)
	return o
}

// SetReturnRecords adds the returnRecords to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) SetReturnRecords(returnRecords *bool) {
	o.ReturnRecords = returnRecords
}

// WithReturnTimeout adds the returnTimeout to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) WithReturnTimeout(returnTimeout *int64) *NdmpNodeSessionsCollectionGetParams {
	o.SetReturnTimeout(returnTimeout)
	return o
}

// SetReturnTimeout adds the returnTimeout to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) SetReturnTimeout(returnTimeout *int64) {
	o.ReturnTimeout = returnTimeout
}

// WithScsiDeviceIDQueryParameter adds the scsiDeviceID to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) WithScsiDeviceIDQueryParameter(scsiDeviceID *string) *NdmpNodeSessionsCollectionGetParams {
	o.SetScsiDeviceIDQueryParameter(scsiDeviceID)
	return o
}

// SetScsiDeviceIDQueryParameter adds the scsiDeviceId to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) SetScsiDeviceIDQueryParameter(scsiDeviceID *string) {
	o.ScsiDeviceIDQueryParameter = scsiDeviceID
}

// WithScsiHostAdapterQueryParameter adds the scsiHostAdapter to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) WithScsiHostAdapterQueryParameter(scsiHostAdapter *int64) *NdmpNodeSessionsCollectionGetParams {
	o.SetScsiHostAdapterQueryParameter(scsiHostAdapter)
	return o
}

// SetScsiHostAdapterQueryParameter adds the scsiHostAdapter to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) SetScsiHostAdapterQueryParameter(scsiHostAdapter *int64) {
	o.ScsiHostAdapterQueryParameter = scsiHostAdapter
}

// WithScsiLunIDQueryParameter adds the scsiLunID to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) WithScsiLunIDQueryParameter(scsiLunID *int64) *NdmpNodeSessionsCollectionGetParams {
	o.SetScsiLunIDQueryParameter(scsiLunID)
	return o
}

// SetScsiLunIDQueryParameter adds the scsiLunId to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) SetScsiLunIDQueryParameter(scsiLunID *int64) {
	o.ScsiLunIDQueryParameter = scsiLunID
}

// WithScsiTargetIDQueryParameter adds the scsiTargetID to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) WithScsiTargetIDQueryParameter(scsiTargetID *int64) *NdmpNodeSessionsCollectionGetParams {
	o.SetScsiTargetIDQueryParameter(scsiTargetID)
	return o
}

// SetScsiTargetIDQueryParameter adds the scsiTargetId to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) SetScsiTargetIDQueryParameter(scsiTargetID *int64) {
	o.ScsiTargetIDQueryParameter = scsiTargetID
}

// WithSourceAddressQueryParameter adds the sourceAddress to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) WithSourceAddressQueryParameter(sourceAddress *string) *NdmpNodeSessionsCollectionGetParams {
	o.SetSourceAddressQueryParameter(sourceAddress)
	return o
}

// SetSourceAddressQueryParameter adds the sourceAddress to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) SetSourceAddressQueryParameter(sourceAddress *string) {
	o.SourceAddressQueryParameter = sourceAddress
}

// WithSVMNameQueryParameter adds the svmName to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) WithSVMNameQueryParameter(svmName *string) *NdmpNodeSessionsCollectionGetParams {
	o.SetSVMNameQueryParameter(svmName)
	return o
}

// SetSVMNameQueryParameter adds the svmName to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) SetSVMNameQueryParameter(svmName *string) {
	o.SVMNameQueryParameter = svmName
}

// WithSVMUUIDQueryParameter adds the svmUUID to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) WithSVMUUIDQueryParameter(svmUUID *string) *NdmpNodeSessionsCollectionGetParams {
	o.SetSVMUUIDQueryParameter(svmUUID)
	return o
}

// SetSVMUUIDQueryParameter adds the svmUuid to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) SetSVMUUIDQueryParameter(svmUUID *string) {
	o.SVMUUIDQueryParameter = svmUUID
}

// WithTapeDeviceQueryParameter adds the tapeDevice to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) WithTapeDeviceQueryParameter(tapeDevice *string) *NdmpNodeSessionsCollectionGetParams {
	o.SetTapeDeviceQueryParameter(tapeDevice)
	return o
}

// SetTapeDeviceQueryParameter adds the tapeDevice to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) SetTapeDeviceQueryParameter(tapeDevice *string) {
	o.TapeDeviceQueryParameter = tapeDevice
}

// WithTapeModeQueryParameter adds the tapeMode to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) WithTapeModeQueryParameter(tapeMode *string) *NdmpNodeSessionsCollectionGetParams {
	o.SetTapeModeQueryParameter(tapeMode)
	return o
}

// SetTapeModeQueryParameter adds the tapeMode to the ndmp node sessions collection get params
func (o *NdmpNodeSessionsCollectionGetParams) SetTapeModeQueryParameter(tapeMode *string) {
	o.TapeModeQueryParameter = tapeMode
}

// WriteToRequest writes these params to a swagger request
func (o *NdmpNodeSessionsCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.BackupEngineQueryParameter != nil {

		// query param backup_engine
		var qrBackupEngine string

		if o.BackupEngineQueryParameter != nil {
			qrBackupEngine = *o.BackupEngineQueryParameter
		}
		qBackupEngine := qrBackupEngine
		if qBackupEngine != "" {

			if err := r.SetQueryParam("backup_engine", qBackupEngine); err != nil {
				return err
			}
		}
	}

	if o.ClientAddressQueryParameter != nil {

		// query param client_address
		var qrClientAddress string

		if o.ClientAddressQueryParameter != nil {
			qrClientAddress = *o.ClientAddressQueryParameter
		}
		qClientAddress := qrClientAddress
		if qClientAddress != "" {

			if err := r.SetQueryParam("client_address", qClientAddress); err != nil {
				return err
			}
		}
	}

	if o.ClientPortQueryParameter != nil {

		// query param client_port
		var qrClientPort int64

		if o.ClientPortQueryParameter != nil {
			qrClientPort = *o.ClientPortQueryParameter
		}
		qClientPort := swag.FormatInt64(qrClientPort)
		if qClientPort != "" {

			if err := r.SetQueryParam("client_port", qClientPort); err != nil {
				return err
			}
		}
	}

	if o.DataBytesProcessedQueryParameter != nil {

		// query param data.bytes_processed
		var qrDataBytesProcessed int64

		if o.DataBytesProcessedQueryParameter != nil {
			qrDataBytesProcessed = *o.DataBytesProcessedQueryParameter
		}
		qDataBytesProcessed := swag.FormatInt64(qrDataBytesProcessed)
		if qDataBytesProcessed != "" {

			if err := r.SetQueryParam("data.bytes_processed", qDataBytesProcessed); err != nil {
				return err
			}
		}
	}

	if o.DataConnectionAddressQueryParameter != nil {

		// query param data.connection.address
		var qrDataConnectionAddress string

		if o.DataConnectionAddressQueryParameter != nil {
			qrDataConnectionAddress = *o.DataConnectionAddressQueryParameter
		}
		qDataConnectionAddress := qrDataConnectionAddress
		if qDataConnectionAddress != "" {

			if err := r.SetQueryParam("data.connection.address", qDataConnectionAddress); err != nil {
				return err
			}
		}
	}

	if o.DataConnectionPortQueryParameter != nil {

		// query param data.connection.port
		var qrDataConnectionPort int64

		if o.DataConnectionPortQueryParameter != nil {
			qrDataConnectionPort = *o.DataConnectionPortQueryParameter
		}
		qDataConnectionPort := swag.FormatInt64(qrDataConnectionPort)
		if qDataConnectionPort != "" {

			if err := r.SetQueryParam("data.connection.port", qDataConnectionPort); err != nil {
				return err
			}
		}
	}

	if o.DataConnectionTypeQueryParameter != nil {

		// query param data.connection.type
		var qrDataConnectionType string

		if o.DataConnectionTypeQueryParameter != nil {
			qrDataConnectionType = *o.DataConnectionTypeQueryParameter
		}
		qDataConnectionType := qrDataConnectionType
		if qDataConnectionType != "" {

			if err := r.SetQueryParam("data.connection.type", qDataConnectionType); err != nil {
				return err
			}
		}
	}

	if o.DataOperationQueryParameter != nil {

		// query param data.operation
		var qrDataOperation string

		if o.DataOperationQueryParameter != nil {
			qrDataOperation = *o.DataOperationQueryParameter
		}
		qDataOperation := qrDataOperation
		if qDataOperation != "" {

			if err := r.SetQueryParam("data.operation", qDataOperation); err != nil {
				return err
			}
		}
	}

	if o.DataReasonQueryParameter != nil {

		// query param data.reason
		var qrDataReason string

		if o.DataReasonQueryParameter != nil {
			qrDataReason = *o.DataReasonQueryParameter
		}
		qDataReason := qrDataReason
		if qDataReason != "" {

			if err := r.SetQueryParam("data.reason", qDataReason); err != nil {
				return err
			}
		}
	}

	if o.DataStateQueryParameter != nil {

		// query param data.state
		var qrDataState string

		if o.DataStateQueryParameter != nil {
			qrDataState = *o.DataStateQueryParameter
		}
		qDataState := qrDataState
		if qDataState != "" {

			if err := r.SetQueryParam("data.state", qDataState); err != nil {
				return err
			}
		}
	}

	if o.DataPathQueryParameter != nil {

		// query param data_path
		var qrDataPath string

		if o.DataPathQueryParameter != nil {
			qrDataPath = *o.DataPathQueryParameter
		}
		qDataPath := qrDataPath
		if qDataPath != "" {

			if err := r.SetQueryParam("data_path", qDataPath); err != nil {
				return err
			}
		}
	}

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.IDQueryParameter != nil {

		// query param id
		var qrID string

		if o.IDQueryParameter != nil {
			qrID = *o.IDQueryParameter
		}
		qID := qrID
		if qID != "" {

			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}
	}

	if o.MaxRecords != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecords != nil {
			qrMaxRecords = *o.MaxRecords
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.MoverBytesMovedQueryParameter != nil {

		// query param mover.bytes_moved
		var qrMoverBytesMoved int64

		if o.MoverBytesMovedQueryParameter != nil {
			qrMoverBytesMoved = *o.MoverBytesMovedQueryParameter
		}
		qMoverBytesMoved := swag.FormatInt64(qrMoverBytesMoved)
		if qMoverBytesMoved != "" {

			if err := r.SetQueryParam("mover.bytes_moved", qMoverBytesMoved); err != nil {
				return err
			}
		}
	}

	if o.MoverConnectionAddressQueryParameter != nil {

		// query param mover.connection.address
		var qrMoverConnectionAddress string

		if o.MoverConnectionAddressQueryParameter != nil {
			qrMoverConnectionAddress = *o.MoverConnectionAddressQueryParameter
		}
		qMoverConnectionAddress := qrMoverConnectionAddress
		if qMoverConnectionAddress != "" {

			if err := r.SetQueryParam("mover.connection.address", qMoverConnectionAddress); err != nil {
				return err
			}
		}
	}

	if o.MoverConnectionPortQueryParameter != nil {

		// query param mover.connection.port
		var qrMoverConnectionPort int64

		if o.MoverConnectionPortQueryParameter != nil {
			qrMoverConnectionPort = *o.MoverConnectionPortQueryParameter
		}
		qMoverConnectionPort := swag.FormatInt64(qrMoverConnectionPort)
		if qMoverConnectionPort != "" {

			if err := r.SetQueryParam("mover.connection.port", qMoverConnectionPort); err != nil {
				return err
			}
		}
	}

	if o.MoverConnectionTypeQueryParameter != nil {

		// query param mover.connection.type
		var qrMoverConnectionType string

		if o.MoverConnectionTypeQueryParameter != nil {
			qrMoverConnectionType = *o.MoverConnectionTypeQueryParameter
		}
		qMoverConnectionType := qrMoverConnectionType
		if qMoverConnectionType != "" {

			if err := r.SetQueryParam("mover.connection.type", qMoverConnectionType); err != nil {
				return err
			}
		}
	}

	if o.MoverModeQueryParameter != nil {

		// query param mover.mode
		var qrMoverMode string

		if o.MoverModeQueryParameter != nil {
			qrMoverMode = *o.MoverModeQueryParameter
		}
		qMoverMode := qrMoverMode
		if qMoverMode != "" {

			if err := r.SetQueryParam("mover.mode", qMoverMode); err != nil {
				return err
			}
		}
	}

	if o.MoverReasonQueryParameter != nil {

		// query param mover.reason
		var qrMoverReason string

		if o.MoverReasonQueryParameter != nil {
			qrMoverReason = *o.MoverReasonQueryParameter
		}
		qMoverReason := qrMoverReason
		if qMoverReason != "" {

			if err := r.SetQueryParam("mover.reason", qMoverReason); err != nil {
				return err
			}
		}
	}

	if o.MoverStateQueryParameter != nil {

		// query param mover.state
		var qrMoverState string

		if o.MoverStateQueryParameter != nil {
			qrMoverState = *o.MoverStateQueryParameter
		}
		qMoverState := qrMoverState
		if qMoverState != "" {

			if err := r.SetQueryParam("mover.state", qMoverState); err != nil {
				return err
			}
		}
	}

	if o.NodeNameQueryParameter != nil {

		// query param node.name
		var qrNodeName string

		if o.NodeNameQueryParameter != nil {
			qrNodeName = *o.NodeNameQueryParameter
		}
		qNodeName := qrNodeName
		if qNodeName != "" {

			if err := r.SetQueryParam("node.name", qNodeName); err != nil {
				return err
			}
		}
	}

	if o.NodeUUIDQueryParameter != nil {

		// query param node.uuid
		var qrNodeUUID string

		if o.NodeUUIDQueryParameter != nil {
			qrNodeUUID = *o.NodeUUIDQueryParameter
		}
		qNodeUUID := qrNodeUUID
		if qNodeUUID != "" {

			if err := r.SetQueryParam("node.uuid", qNodeUUID); err != nil {
				return err
			}
		}
	}

	if o.OrderBy != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.ReturnRecords != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecords != nil {
			qrReturnRecords = *o.ReturnRecords
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeout != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeout != nil {
			qrReturnTimeout = *o.ReturnTimeout
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.ScsiDeviceIDQueryParameter != nil {

		// query param scsi.device_id
		var qrScsiDeviceID string

		if o.ScsiDeviceIDQueryParameter != nil {
			qrScsiDeviceID = *o.ScsiDeviceIDQueryParameter
		}
		qScsiDeviceID := qrScsiDeviceID
		if qScsiDeviceID != "" {

			if err := r.SetQueryParam("scsi.device_id", qScsiDeviceID); err != nil {
				return err
			}
		}
	}

	if o.ScsiHostAdapterQueryParameter != nil {

		// query param scsi.host_adapter
		var qrScsiHostAdapter int64

		if o.ScsiHostAdapterQueryParameter != nil {
			qrScsiHostAdapter = *o.ScsiHostAdapterQueryParameter
		}
		qScsiHostAdapter := swag.FormatInt64(qrScsiHostAdapter)
		if qScsiHostAdapter != "" {

			if err := r.SetQueryParam("scsi.host_adapter", qScsiHostAdapter); err != nil {
				return err
			}
		}
	}

	if o.ScsiLunIDQueryParameter != nil {

		// query param scsi.lun_id
		var qrScsiLunID int64

		if o.ScsiLunIDQueryParameter != nil {
			qrScsiLunID = *o.ScsiLunIDQueryParameter
		}
		qScsiLunID := swag.FormatInt64(qrScsiLunID)
		if qScsiLunID != "" {

			if err := r.SetQueryParam("scsi.lun_id", qScsiLunID); err != nil {
				return err
			}
		}
	}

	if o.ScsiTargetIDQueryParameter != nil {

		// query param scsi.target_id
		var qrScsiTargetID int64

		if o.ScsiTargetIDQueryParameter != nil {
			qrScsiTargetID = *o.ScsiTargetIDQueryParameter
		}
		qScsiTargetID := swag.FormatInt64(qrScsiTargetID)
		if qScsiTargetID != "" {

			if err := r.SetQueryParam("scsi.target_id", qScsiTargetID); err != nil {
				return err
			}
		}
	}

	if o.SourceAddressQueryParameter != nil {

		// query param source_address
		var qrSourceAddress string

		if o.SourceAddressQueryParameter != nil {
			qrSourceAddress = *o.SourceAddressQueryParameter
		}
		qSourceAddress := qrSourceAddress
		if qSourceAddress != "" {

			if err := r.SetQueryParam("source_address", qSourceAddress); err != nil {
				return err
			}
		}
	}

	if o.SVMNameQueryParameter != nil {

		// query param svm.name
		var qrSvmName string

		if o.SVMNameQueryParameter != nil {
			qrSvmName = *o.SVMNameQueryParameter
		}
		qSvmName := qrSvmName
		if qSvmName != "" {

			if err := r.SetQueryParam("svm.name", qSvmName); err != nil {
				return err
			}
		}
	}

	if o.SVMUUIDQueryParameter != nil {

		// query param svm.uuid
		var qrSvmUUID string

		if o.SVMUUIDQueryParameter != nil {
			qrSvmUUID = *o.SVMUUIDQueryParameter
		}
		qSvmUUID := qrSvmUUID
		if qSvmUUID != "" {

			if err := r.SetQueryParam("svm.uuid", qSvmUUID); err != nil {
				return err
			}
		}
	}

	if o.TapeDeviceQueryParameter != nil {

		// query param tape_device
		var qrTapeDevice string

		if o.TapeDeviceQueryParameter != nil {
			qrTapeDevice = *o.TapeDeviceQueryParameter
		}
		qTapeDevice := qrTapeDevice
		if qTapeDevice != "" {

			if err := r.SetQueryParam("tape_device", qTapeDevice); err != nil {
				return err
			}
		}
	}

	if o.TapeModeQueryParameter != nil {

		// query param tape_mode
		var qrTapeMode string

		if o.TapeModeQueryParameter != nil {
			qrTapeMode = *o.TapeModeQueryParameter
		}
		qTapeMode := qrTapeMode
		if qTapeMode != "" {

			if err := r.SetQueryParam("tape_mode", qTapeMode); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamNdmpNodeSessionsCollectionGet binds the parameter fields
func (o *NdmpNodeSessionsCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamNdmpNodeSessionsCollectionGet binds the parameter order_by
func (o *NdmpNodeSessionsCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderBy

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
