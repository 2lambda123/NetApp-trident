// Code generated by go-swagger; DO NOT EDIT.

package security

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSecurityAuditLogCollectionGetParams creates a new SecurityAuditLogCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSecurityAuditLogCollectionGetParams() *SecurityAuditLogCollectionGetParams {
	return &SecurityAuditLogCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSecurityAuditLogCollectionGetParamsWithTimeout creates a new SecurityAuditLogCollectionGetParams object
// with the ability to set a timeout on a request.
func NewSecurityAuditLogCollectionGetParamsWithTimeout(timeout time.Duration) *SecurityAuditLogCollectionGetParams {
	return &SecurityAuditLogCollectionGetParams{
		timeout: timeout,
	}
}

// NewSecurityAuditLogCollectionGetParamsWithContext creates a new SecurityAuditLogCollectionGetParams object
// with the ability to set a context for a request.
func NewSecurityAuditLogCollectionGetParamsWithContext(ctx context.Context) *SecurityAuditLogCollectionGetParams {
	return &SecurityAuditLogCollectionGetParams{
		Context: ctx,
	}
}

// NewSecurityAuditLogCollectionGetParamsWithHTTPClient creates a new SecurityAuditLogCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewSecurityAuditLogCollectionGetParamsWithHTTPClient(client *http.Client) *SecurityAuditLogCollectionGetParams {
	return &SecurityAuditLogCollectionGetParams{
		HTTPClient: client,
	}
}

/*
SecurityAuditLogCollectionGetParams contains all the parameters to send to the API endpoint

	for the security audit log collection get operation.

	Typically these are written to a http.Request.
*/
type SecurityAuditLogCollectionGetParams struct {

	/* Application.

	   Filter by application
	*/
	ApplicationQueryParameter *string

	/* CommandID.

	   Filter by command_id
	*/
	CommandIDQueryParameter *string

	/* Fields.

	   Specify the fields to return.
	*/
	FieldsQueryParameter []string

	/* Index.

	   Filter by index
	*/
	IndexQueryParameter *int64

	/* Input.

	   Filter by input
	*/
	InputQueryParameter *string

	/* Location.

	   Filter by location
	*/
	LocationQueryParameter *string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecordsQueryParameter *int64

	/* Message.

	   Filter by message
	*/
	MessageQueryParameter *string

	/* NodeName.

	   Filter by node.name
	*/
	NodeNameQueryParameter *string

	/* NodeUUID.

	   Filter by node.uuid
	*/
	NodeUUIDQueryParameter *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderByQueryParameter []string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecordsQueryParameter *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeoutQueryParameter *int64

	/* Scope.

	   Filter by scope
	*/
	ScopeQueryParameter *string

	/* SessionID.

	   Filter by session_id
	*/
	SessionIDQueryParameter *string

	/* State.

	   Filter by state
	*/
	StateQueryParameter *string

	/* SvmName.

	   Filter by svm.name
	*/
	SVMNameQueryParameter *string

	/* Timestamp.

	   Filter by timestamp
	*/
	TimestampQueryParameter *string

	/* User.

	   Filter by user
	*/
	UserQueryParameter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the security audit log collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SecurityAuditLogCollectionGetParams) WithDefaults() *SecurityAuditLogCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the security audit log collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SecurityAuditLogCollectionGetParams) SetDefaults() {
	var (
		returnRecordsQueryParameterDefault = bool(true)

		returnTimeoutQueryParameterDefault = int64(15)
	)

	val := SecurityAuditLogCollectionGetParams{
		ReturnRecordsQueryParameter: &returnRecordsQueryParameterDefault,
		ReturnTimeoutQueryParameter: &returnTimeoutQueryParameterDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the security audit log collection get params
func (o *SecurityAuditLogCollectionGetParams) WithTimeout(timeout time.Duration) *SecurityAuditLogCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the security audit log collection get params
func (o *SecurityAuditLogCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the security audit log collection get params
func (o *SecurityAuditLogCollectionGetParams) WithContext(ctx context.Context) *SecurityAuditLogCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the security audit log collection get params
func (o *SecurityAuditLogCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the security audit log collection get params
func (o *SecurityAuditLogCollectionGetParams) WithHTTPClient(client *http.Client) *SecurityAuditLogCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the security audit log collection get params
func (o *SecurityAuditLogCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithApplicationQueryParameter adds the application to the security audit log collection get params
func (o *SecurityAuditLogCollectionGetParams) WithApplicationQueryParameter(application *string) *SecurityAuditLogCollectionGetParams {
	o.SetApplicationQueryParameter(application)
	return o
}

// SetApplicationQueryParameter adds the application to the security audit log collection get params
func (o *SecurityAuditLogCollectionGetParams) SetApplicationQueryParameter(application *string) {
	o.ApplicationQueryParameter = application
}

// WithCommandIDQueryParameter adds the commandID to the security audit log collection get params
func (o *SecurityAuditLogCollectionGetParams) WithCommandIDQueryParameter(commandID *string) *SecurityAuditLogCollectionGetParams {
	o.SetCommandIDQueryParameter(commandID)
	return o
}

// SetCommandIDQueryParameter adds the commandId to the security audit log collection get params
func (o *SecurityAuditLogCollectionGetParams) SetCommandIDQueryParameter(commandID *string) {
	o.CommandIDQueryParameter = commandID
}

// WithFieldsQueryParameter adds the fields to the security audit log collection get params
func (o *SecurityAuditLogCollectionGetParams) WithFieldsQueryParameter(fields []string) *SecurityAuditLogCollectionGetParams {
	o.SetFieldsQueryParameter(fields)
	return o
}

// SetFieldsQueryParameter adds the fields to the security audit log collection get params
func (o *SecurityAuditLogCollectionGetParams) SetFieldsQueryParameter(fields []string) {
	o.FieldsQueryParameter = fields
}

// WithIndexQueryParameter adds the index to the security audit log collection get params
func (o *SecurityAuditLogCollectionGetParams) WithIndexQueryParameter(index *int64) *SecurityAuditLogCollectionGetParams {
	o.SetIndexQueryParameter(index)
	return o
}

// SetIndexQueryParameter adds the index to the security audit log collection get params
func (o *SecurityAuditLogCollectionGetParams) SetIndexQueryParameter(index *int64) {
	o.IndexQueryParameter = index
}

// WithInputQueryParameter adds the input to the security audit log collection get params
func (o *SecurityAuditLogCollectionGetParams) WithInputQueryParameter(input *string) *SecurityAuditLogCollectionGetParams {
	o.SetInputQueryParameter(input)
	return o
}

// SetInputQueryParameter adds the input to the security audit log collection get params
func (o *SecurityAuditLogCollectionGetParams) SetInputQueryParameter(input *string) {
	o.InputQueryParameter = input
}

// WithLocationQueryParameter adds the location to the security audit log collection get params
func (o *SecurityAuditLogCollectionGetParams) WithLocationQueryParameter(location *string) *SecurityAuditLogCollectionGetParams {
	o.SetLocationQueryParameter(location)
	return o
}

// SetLocationQueryParameter adds the location to the security audit log collection get params
func (o *SecurityAuditLogCollectionGetParams) SetLocationQueryParameter(location *string) {
	o.LocationQueryParameter = location
}

// WithMaxRecordsQueryParameter adds the maxRecords to the security audit log collection get params
func (o *SecurityAuditLogCollectionGetParams) WithMaxRecordsQueryParameter(maxRecords *int64) *SecurityAuditLogCollectionGetParams {
	o.SetMaxRecordsQueryParameter(maxRecords)
	return o
}

// SetMaxRecordsQueryParameter adds the maxRecords to the security audit log collection get params
func (o *SecurityAuditLogCollectionGetParams) SetMaxRecordsQueryParameter(maxRecords *int64) {
	o.MaxRecordsQueryParameter = maxRecords
}

// WithMessageQueryParameter adds the message to the security audit log collection get params
func (o *SecurityAuditLogCollectionGetParams) WithMessageQueryParameter(message *string) *SecurityAuditLogCollectionGetParams {
	o.SetMessageQueryParameter(message)
	return o
}

// SetMessageQueryParameter adds the message to the security audit log collection get params
func (o *SecurityAuditLogCollectionGetParams) SetMessageQueryParameter(message *string) {
	o.MessageQueryParameter = message
}

// WithNodeNameQueryParameter adds the nodeName to the security audit log collection get params
func (o *SecurityAuditLogCollectionGetParams) WithNodeNameQueryParameter(nodeName *string) *SecurityAuditLogCollectionGetParams {
	o.SetNodeNameQueryParameter(nodeName)
	return o
}

// SetNodeNameQueryParameter adds the nodeName to the security audit log collection get params
func (o *SecurityAuditLogCollectionGetParams) SetNodeNameQueryParameter(nodeName *string) {
	o.NodeNameQueryParameter = nodeName
}

// WithNodeUUIDQueryParameter adds the nodeUUID to the security audit log collection get params
func (o *SecurityAuditLogCollectionGetParams) WithNodeUUIDQueryParameter(nodeUUID *string) *SecurityAuditLogCollectionGetParams {
	o.SetNodeUUIDQueryParameter(nodeUUID)
	return o
}

// SetNodeUUIDQueryParameter adds the nodeUuid to the security audit log collection get params
func (o *SecurityAuditLogCollectionGetParams) SetNodeUUIDQueryParameter(nodeUUID *string) {
	o.NodeUUIDQueryParameter = nodeUUID
}

// WithOrderByQueryParameter adds the orderBy to the security audit log collection get params
func (o *SecurityAuditLogCollectionGetParams) WithOrderByQueryParameter(orderBy []string) *SecurityAuditLogCollectionGetParams {
	o.SetOrderByQueryParameter(orderBy)
	return o
}

// SetOrderByQueryParameter adds the orderBy to the security audit log collection get params
func (o *SecurityAuditLogCollectionGetParams) SetOrderByQueryParameter(orderBy []string) {
	o.OrderByQueryParameter = orderBy
}

// WithReturnRecordsQueryParameter adds the returnRecords to the security audit log collection get params
func (o *SecurityAuditLogCollectionGetParams) WithReturnRecordsQueryParameter(returnRecords *bool) *SecurityAuditLogCollectionGetParams {
	o.SetReturnRecordsQueryParameter(returnRecords)
	return o
}

// SetReturnRecordsQueryParameter adds the returnRecords to the security audit log collection get params
func (o *SecurityAuditLogCollectionGetParams) SetReturnRecordsQueryParameter(returnRecords *bool) {
	o.ReturnRecordsQueryParameter = returnRecords
}

// WithReturnTimeoutQueryParameter adds the returnTimeout to the security audit log collection get params
func (o *SecurityAuditLogCollectionGetParams) WithReturnTimeoutQueryParameter(returnTimeout *int64) *SecurityAuditLogCollectionGetParams {
	o.SetReturnTimeoutQueryParameter(returnTimeout)
	return o
}

// SetReturnTimeoutQueryParameter adds the returnTimeout to the security audit log collection get params
func (o *SecurityAuditLogCollectionGetParams) SetReturnTimeoutQueryParameter(returnTimeout *int64) {
	o.ReturnTimeoutQueryParameter = returnTimeout
}

// WithScopeQueryParameter adds the scope to the security audit log collection get params
func (o *SecurityAuditLogCollectionGetParams) WithScopeQueryParameter(scope *string) *SecurityAuditLogCollectionGetParams {
	o.SetScopeQueryParameter(scope)
	return o
}

// SetScopeQueryParameter adds the scope to the security audit log collection get params
func (o *SecurityAuditLogCollectionGetParams) SetScopeQueryParameter(scope *string) {
	o.ScopeQueryParameter = scope
}

// WithSessionIDQueryParameter adds the sessionID to the security audit log collection get params
func (o *SecurityAuditLogCollectionGetParams) WithSessionIDQueryParameter(sessionID *string) *SecurityAuditLogCollectionGetParams {
	o.SetSessionIDQueryParameter(sessionID)
	return o
}

// SetSessionIDQueryParameter adds the sessionId to the security audit log collection get params
func (o *SecurityAuditLogCollectionGetParams) SetSessionIDQueryParameter(sessionID *string) {
	o.SessionIDQueryParameter = sessionID
}

// WithStateQueryParameter adds the state to the security audit log collection get params
func (o *SecurityAuditLogCollectionGetParams) WithStateQueryParameter(state *string) *SecurityAuditLogCollectionGetParams {
	o.SetStateQueryParameter(state)
	return o
}

// SetStateQueryParameter adds the state to the security audit log collection get params
func (o *SecurityAuditLogCollectionGetParams) SetStateQueryParameter(state *string) {
	o.StateQueryParameter = state
}

// WithSVMNameQueryParameter adds the svmName to the security audit log collection get params
func (o *SecurityAuditLogCollectionGetParams) WithSVMNameQueryParameter(svmName *string) *SecurityAuditLogCollectionGetParams {
	o.SetSVMNameQueryParameter(svmName)
	return o
}

// SetSVMNameQueryParameter adds the svmName to the security audit log collection get params
func (o *SecurityAuditLogCollectionGetParams) SetSVMNameQueryParameter(svmName *string) {
	o.SVMNameQueryParameter = svmName
}

// WithTimestampQueryParameter adds the timestamp to the security audit log collection get params
func (o *SecurityAuditLogCollectionGetParams) WithTimestampQueryParameter(timestamp *string) *SecurityAuditLogCollectionGetParams {
	o.SetTimestampQueryParameter(timestamp)
	return o
}

// SetTimestampQueryParameter adds the timestamp to the security audit log collection get params
func (o *SecurityAuditLogCollectionGetParams) SetTimestampQueryParameter(timestamp *string) {
	o.TimestampQueryParameter = timestamp
}

// WithUserQueryParameter adds the user to the security audit log collection get params
func (o *SecurityAuditLogCollectionGetParams) WithUserQueryParameter(user *string) *SecurityAuditLogCollectionGetParams {
	o.SetUserQueryParameter(user)
	return o
}

// SetUserQueryParameter adds the user to the security audit log collection get params
func (o *SecurityAuditLogCollectionGetParams) SetUserQueryParameter(user *string) {
	o.UserQueryParameter = user
}

// WriteToRequest writes these params to a swagger request
func (o *SecurityAuditLogCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ApplicationQueryParameter != nil {

		// query param application
		var qrApplication string

		if o.ApplicationQueryParameter != nil {
			qrApplication = *o.ApplicationQueryParameter
		}
		qApplication := qrApplication
		if qApplication != "" {

			if err := r.SetQueryParam("application", qApplication); err != nil {
				return err
			}
		}
	}

	if o.CommandIDQueryParameter != nil {

		// query param command_id
		var qrCommandID string

		if o.CommandIDQueryParameter != nil {
			qrCommandID = *o.CommandIDQueryParameter
		}
		qCommandID := qrCommandID
		if qCommandID != "" {

			if err := r.SetQueryParam("command_id", qCommandID); err != nil {
				return err
			}
		}
	}

	if o.FieldsQueryParameter != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.IndexQueryParameter != nil {

		// query param index
		var qrIndex int64

		if o.IndexQueryParameter != nil {
			qrIndex = *o.IndexQueryParameter
		}
		qIndex := swag.FormatInt64(qrIndex)
		if qIndex != "" {

			if err := r.SetQueryParam("index", qIndex); err != nil {
				return err
			}
		}
	}

	if o.InputQueryParameter != nil {

		// query param input
		var qrInput string

		if o.InputQueryParameter != nil {
			qrInput = *o.InputQueryParameter
		}
		qInput := qrInput
		if qInput != "" {

			if err := r.SetQueryParam("input", qInput); err != nil {
				return err
			}
		}
	}

	if o.LocationQueryParameter != nil {

		// query param location
		var qrLocation string

		if o.LocationQueryParameter != nil {
			qrLocation = *o.LocationQueryParameter
		}
		qLocation := qrLocation
		if qLocation != "" {

			if err := r.SetQueryParam("location", qLocation); err != nil {
				return err
			}
		}
	}

	if o.MaxRecordsQueryParameter != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecordsQueryParameter != nil {
			qrMaxRecords = *o.MaxRecordsQueryParameter
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.MessageQueryParameter != nil {

		// query param message
		var qrMessage string

		if o.MessageQueryParameter != nil {
			qrMessage = *o.MessageQueryParameter
		}
		qMessage := qrMessage
		if qMessage != "" {

			if err := r.SetQueryParam("message", qMessage); err != nil {
				return err
			}
		}
	}

	if o.NodeNameQueryParameter != nil {

		// query param node.name
		var qrNodeName string

		if o.NodeNameQueryParameter != nil {
			qrNodeName = *o.NodeNameQueryParameter
		}
		qNodeName := qrNodeName
		if qNodeName != "" {

			if err := r.SetQueryParam("node.name", qNodeName); err != nil {
				return err
			}
		}
	}

	if o.NodeUUIDQueryParameter != nil {

		// query param node.uuid
		var qrNodeUUID string

		if o.NodeUUIDQueryParameter != nil {
			qrNodeUUID = *o.NodeUUIDQueryParameter
		}
		qNodeUUID := qrNodeUUID
		if qNodeUUID != "" {

			if err := r.SetQueryParam("node.uuid", qNodeUUID); err != nil {
				return err
			}
		}
	}

	if o.OrderByQueryParameter != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.ReturnRecordsQueryParameter != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecordsQueryParameter != nil {
			qrReturnRecords = *o.ReturnRecordsQueryParameter
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeoutQueryParameter != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeoutQueryParameter != nil {
			qrReturnTimeout = *o.ReturnTimeoutQueryParameter
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.ScopeQueryParameter != nil {

		// query param scope
		var qrScope string

		if o.ScopeQueryParameter != nil {
			qrScope = *o.ScopeQueryParameter
		}
		qScope := qrScope
		if qScope != "" {

			if err := r.SetQueryParam("scope", qScope); err != nil {
				return err
			}
		}
	}

	if o.SessionIDQueryParameter != nil {

		// query param session_id
		var qrSessionID string

		if o.SessionIDQueryParameter != nil {
			qrSessionID = *o.SessionIDQueryParameter
		}
		qSessionID := qrSessionID
		if qSessionID != "" {

			if err := r.SetQueryParam("session_id", qSessionID); err != nil {
				return err
			}
		}
	}

	if o.StateQueryParameter != nil {

		// query param state
		var qrState string

		if o.StateQueryParameter != nil {
			qrState = *o.StateQueryParameter
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if o.SVMNameQueryParameter != nil {

		// query param svm.name
		var qrSvmName string

		if o.SVMNameQueryParameter != nil {
			qrSvmName = *o.SVMNameQueryParameter
		}
		qSvmName := qrSvmName
		if qSvmName != "" {

			if err := r.SetQueryParam("svm.name", qSvmName); err != nil {
				return err
			}
		}
	}

	if o.TimestampQueryParameter != nil {

		// query param timestamp
		var qrTimestamp string

		if o.TimestampQueryParameter != nil {
			qrTimestamp = *o.TimestampQueryParameter
		}
		qTimestamp := qrTimestamp
		if qTimestamp != "" {

			if err := r.SetQueryParam("timestamp", qTimestamp); err != nil {
				return err
			}
		}
	}

	if o.UserQueryParameter != nil {

		// query param user
		var qrUser string

		if o.UserQueryParameter != nil {
			qrUser = *o.UserQueryParameter
		}
		qUser := qrUser
		if qUser != "" {

			if err := r.SetQueryParam("user", qUser); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamSecurityAuditLogCollectionGet binds the parameter fields
func (o *SecurityAuditLogCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.FieldsQueryParameter

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamSecurityAuditLogCollectionGet binds the parameter order_by
func (o *SecurityAuditLogCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderByQueryParameter

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
