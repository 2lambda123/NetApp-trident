// Code generated by go-swagger; DO NOT EDIT.

package security

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/netapp/trident/storage_drivers/ontap/api/rest/models"
)

// ClusterLdapModifyReader is a Reader for the ClusterLdapModify structure.
type ClusterLdapModifyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ClusterLdapModifyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewClusterLdapModifyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewClusterLdapModifyDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewClusterLdapModifyOK creates a ClusterLdapModifyOK with default headers values
func NewClusterLdapModifyOK() *ClusterLdapModifyOK {
	return &ClusterLdapModifyOK{}
}

/* ClusterLdapModifyOK describes a response with status code 200, with default header values.

OK
*/
type ClusterLdapModifyOK struct {
}

func (o *ClusterLdapModifyOK) Error() string {
	return fmt.Sprintf("[PATCH /security/authentication/cluster/ldap][%d] clusterLdapModifyOK ", 200)
}

func (o *ClusterLdapModifyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewClusterLdapModifyDefault creates a ClusterLdapModifyDefault with default headers values
func NewClusterLdapModifyDefault(code int) *ClusterLdapModifyDefault {
	return &ClusterLdapModifyDefault{
		_statusCode: code,
	}
}

/* ClusterLdapModifyDefault describes a response with status code -1, with default header values.

 ONTAP Error Response Codes
| Error Code | Description |
| ---------- | ----------- |
| 4915203    | The specified LDAP schema does not exist. |
| 4915208    | The specified LDAP servers contain duplicate server entries. |
| 4915229    | DNS resolution failed due to an internal error. Contact technical support if this issue persists. |
| 4915231    | DNS resolution failed for one or more of the specified LDAP servers. Verify that a valid DNS server is configured. |
| 23724132   | DNS resolution failed for all the specified LDAP servers. Verify that a valid DNS server is configured. |
| 4915234    | Specified LDAP server is not supported because it is one of the following: multicast, loopback, 0.0.0.0, or broadcast. |
| 4915248    | LDAP servers cannot be empty or "-". Specified FQDN is not valid because it is empty or "-" or it contains either special characters or "-" at the start or end of the domain. |
| 4915251    | STARTTLS and LDAPS cannot be used together |
| 4915257    | The LDAP configuration is not valid. Verify that the Distinguished Names and bind password are correct. |
| 4915258    | The LDAP configuration is not valid. Verify that the servers are reachable and that the network configuration is correct. |
| 23724130   | Cannot use an IPv6 name server address because there are no IPv6 interfaces. |
| 4915252    | LDAP referral is not supported with STARTTLS, with session security levels sign, seal or with LDAPS. |

*/
type ClusterLdapModifyDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the cluster ldap modify default response
func (o *ClusterLdapModifyDefault) Code() int {
	return o._statusCode
}

func (o *ClusterLdapModifyDefault) Error() string {
	return fmt.Sprintf("[PATCH /security/authentication/cluster/ldap][%d] cluster_ldap_modify default  %+v", o._statusCode, o.Payload)
}
func (o *ClusterLdapModifyDefault) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ClusterLdapModifyDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
