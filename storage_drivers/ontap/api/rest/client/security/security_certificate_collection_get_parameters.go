// Code generated by go-swagger; DO NOT EDIT.

package security

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSecurityCertificateCollectionGetParams creates a new SecurityCertificateCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSecurityCertificateCollectionGetParams() *SecurityCertificateCollectionGetParams {
	return &SecurityCertificateCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSecurityCertificateCollectionGetParamsWithTimeout creates a new SecurityCertificateCollectionGetParams object
// with the ability to set a timeout on a request.
func NewSecurityCertificateCollectionGetParamsWithTimeout(timeout time.Duration) *SecurityCertificateCollectionGetParams {
	return &SecurityCertificateCollectionGetParams{
		timeout: timeout,
	}
}

// NewSecurityCertificateCollectionGetParamsWithContext creates a new SecurityCertificateCollectionGetParams object
// with the ability to set a context for a request.
func NewSecurityCertificateCollectionGetParamsWithContext(ctx context.Context) *SecurityCertificateCollectionGetParams {
	return &SecurityCertificateCollectionGetParams{
		Context: ctx,
	}
}

// NewSecurityCertificateCollectionGetParamsWithHTTPClient creates a new SecurityCertificateCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewSecurityCertificateCollectionGetParamsWithHTTPClient(client *http.Client) *SecurityCertificateCollectionGetParams {
	return &SecurityCertificateCollectionGetParams{
		HTTPClient: client,
	}
}

/* SecurityCertificateCollectionGetParams contains all the parameters to send to the API endpoint
   for the security certificate collection get operation.

   Typically these are written to a http.Request.
*/
type SecurityCertificateCollectionGetParams struct {

	/* Ca.

	   Filter by CA
	*/
	CaQueryParameter *string

	/* CommonName.

	   Filter by common_name
	*/
	CommonNameQueryParameter *string

	/* ExpiryTime.

	   Filter by expiry_time
	*/
	ExpiryTimeQueryParameter *string

	/* Fields.

	   Specify the fields to return.
	*/
	Fields []string

	/* HashFunction.

	   Filter by hash_function
	*/
	HashFunctionQueryParameter *string

	/* KeySize.

	   Filter by key_size
	*/
	KeySizeQueryParameter *string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecords *int64

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderBy []string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecords *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeout *int64

	/* Scope.

	   Filter by scope
	*/
	ScopeQueryParameter *string

	/* SerialNumber.

	   Filter by serial_number
	*/
	SerialNumberQueryParameter *string

	/* SvmName.

	   Filter by svm.name
	*/
	SVMNameQueryParameter *string

	/* SvmUUID.

	   Filter by svm.uuid
	*/
	SVMUUIDQueryParameter *string

	/* Type.

	   Filter by certificate type
	*/
	TypeQueryParameter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the security certificate collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SecurityCertificateCollectionGetParams) WithDefaults() *SecurityCertificateCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the security certificate collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SecurityCertificateCollectionGetParams) SetDefaults() {
	var (
		returnRecordsDefault = bool(true)

		returnTimeoutDefault = int64(15)
	)

	val := SecurityCertificateCollectionGetParams{
		ReturnRecords: &returnRecordsDefault,
		ReturnTimeout: &returnTimeoutDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the security certificate collection get params
func (o *SecurityCertificateCollectionGetParams) WithTimeout(timeout time.Duration) *SecurityCertificateCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the security certificate collection get params
func (o *SecurityCertificateCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the security certificate collection get params
func (o *SecurityCertificateCollectionGetParams) WithContext(ctx context.Context) *SecurityCertificateCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the security certificate collection get params
func (o *SecurityCertificateCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the security certificate collection get params
func (o *SecurityCertificateCollectionGetParams) WithHTTPClient(client *http.Client) *SecurityCertificateCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the security certificate collection get params
func (o *SecurityCertificateCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCaQueryParameter adds the ca to the security certificate collection get params
func (o *SecurityCertificateCollectionGetParams) WithCaQueryParameter(ca *string) *SecurityCertificateCollectionGetParams {
	o.SetCaQueryParameter(ca)
	return o
}

// SetCaQueryParameter adds the ca to the security certificate collection get params
func (o *SecurityCertificateCollectionGetParams) SetCaQueryParameter(ca *string) {
	o.CaQueryParameter = ca
}

// WithCommonNameQueryParameter adds the commonName to the security certificate collection get params
func (o *SecurityCertificateCollectionGetParams) WithCommonNameQueryParameter(commonName *string) *SecurityCertificateCollectionGetParams {
	o.SetCommonNameQueryParameter(commonName)
	return o
}

// SetCommonNameQueryParameter adds the commonName to the security certificate collection get params
func (o *SecurityCertificateCollectionGetParams) SetCommonNameQueryParameter(commonName *string) {
	o.CommonNameQueryParameter = commonName
}

// WithExpiryTimeQueryParameter adds the expiryTime to the security certificate collection get params
func (o *SecurityCertificateCollectionGetParams) WithExpiryTimeQueryParameter(expiryTime *string) *SecurityCertificateCollectionGetParams {
	o.SetExpiryTimeQueryParameter(expiryTime)
	return o
}

// SetExpiryTimeQueryParameter adds the expiryTime to the security certificate collection get params
func (o *SecurityCertificateCollectionGetParams) SetExpiryTimeQueryParameter(expiryTime *string) {
	o.ExpiryTimeQueryParameter = expiryTime
}

// WithFields adds the fields to the security certificate collection get params
func (o *SecurityCertificateCollectionGetParams) WithFields(fields []string) *SecurityCertificateCollectionGetParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the security certificate collection get params
func (o *SecurityCertificateCollectionGetParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithHashFunctionQueryParameter adds the hashFunction to the security certificate collection get params
func (o *SecurityCertificateCollectionGetParams) WithHashFunctionQueryParameter(hashFunction *string) *SecurityCertificateCollectionGetParams {
	o.SetHashFunctionQueryParameter(hashFunction)
	return o
}

// SetHashFunctionQueryParameter adds the hashFunction to the security certificate collection get params
func (o *SecurityCertificateCollectionGetParams) SetHashFunctionQueryParameter(hashFunction *string) {
	o.HashFunctionQueryParameter = hashFunction
}

// WithKeySizeQueryParameter adds the keySize to the security certificate collection get params
func (o *SecurityCertificateCollectionGetParams) WithKeySizeQueryParameter(keySize *string) *SecurityCertificateCollectionGetParams {
	o.SetKeySizeQueryParameter(keySize)
	return o
}

// SetKeySizeQueryParameter adds the keySize to the security certificate collection get params
func (o *SecurityCertificateCollectionGetParams) SetKeySizeQueryParameter(keySize *string) {
	o.KeySizeQueryParameter = keySize
}

// WithMaxRecords adds the maxRecords to the security certificate collection get params
func (o *SecurityCertificateCollectionGetParams) WithMaxRecords(maxRecords *int64) *SecurityCertificateCollectionGetParams {
	o.SetMaxRecords(maxRecords)
	return o
}

// SetMaxRecords adds the maxRecords to the security certificate collection get params
func (o *SecurityCertificateCollectionGetParams) SetMaxRecords(maxRecords *int64) {
	o.MaxRecords = maxRecords
}

// WithOrderBy adds the orderBy to the security certificate collection get params
func (o *SecurityCertificateCollectionGetParams) WithOrderBy(orderBy []string) *SecurityCertificateCollectionGetParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the security certificate collection get params
func (o *SecurityCertificateCollectionGetParams) SetOrderBy(orderBy []string) {
	o.OrderBy = orderBy
}

// WithReturnRecords adds the returnRecords to the security certificate collection get params
func (o *SecurityCertificateCollectionGetParams) WithReturnRecords(returnRecords *bool) *SecurityCertificateCollectionGetParams {
	o.SetReturnRecords(returnRecords)
	return o
}

// SetReturnRecords adds the returnRecords to the security certificate collection get params
func (o *SecurityCertificateCollectionGetParams) SetReturnRecords(returnRecords *bool) {
	o.ReturnRecords = returnRecords
}

// WithReturnTimeout adds the returnTimeout to the security certificate collection get params
func (o *SecurityCertificateCollectionGetParams) WithReturnTimeout(returnTimeout *int64) *SecurityCertificateCollectionGetParams {
	o.SetReturnTimeout(returnTimeout)
	return o
}

// SetReturnTimeout adds the returnTimeout to the security certificate collection get params
func (o *SecurityCertificateCollectionGetParams) SetReturnTimeout(returnTimeout *int64) {
	o.ReturnTimeout = returnTimeout
}

// WithScopeQueryParameter adds the scope to the security certificate collection get params
func (o *SecurityCertificateCollectionGetParams) WithScopeQueryParameter(scope *string) *SecurityCertificateCollectionGetParams {
	o.SetScopeQueryParameter(scope)
	return o
}

// SetScopeQueryParameter adds the scope to the security certificate collection get params
func (o *SecurityCertificateCollectionGetParams) SetScopeQueryParameter(scope *string) {
	o.ScopeQueryParameter = scope
}

// WithSerialNumberQueryParameter adds the serialNumber to the security certificate collection get params
func (o *SecurityCertificateCollectionGetParams) WithSerialNumberQueryParameter(serialNumber *string) *SecurityCertificateCollectionGetParams {
	o.SetSerialNumberQueryParameter(serialNumber)
	return o
}

// SetSerialNumberQueryParameter adds the serialNumber to the security certificate collection get params
func (o *SecurityCertificateCollectionGetParams) SetSerialNumberQueryParameter(serialNumber *string) {
	o.SerialNumberQueryParameter = serialNumber
}

// WithSVMNameQueryParameter adds the svmName to the security certificate collection get params
func (o *SecurityCertificateCollectionGetParams) WithSVMNameQueryParameter(svmName *string) *SecurityCertificateCollectionGetParams {
	o.SetSVMNameQueryParameter(svmName)
	return o
}

// SetSVMNameQueryParameter adds the svmName to the security certificate collection get params
func (o *SecurityCertificateCollectionGetParams) SetSVMNameQueryParameter(svmName *string) {
	o.SVMNameQueryParameter = svmName
}

// WithSVMUUIDQueryParameter adds the svmUUID to the security certificate collection get params
func (o *SecurityCertificateCollectionGetParams) WithSVMUUIDQueryParameter(svmUUID *string) *SecurityCertificateCollectionGetParams {
	o.SetSVMUUIDQueryParameter(svmUUID)
	return o
}

// SetSVMUUIDQueryParameter adds the svmUuid to the security certificate collection get params
func (o *SecurityCertificateCollectionGetParams) SetSVMUUIDQueryParameter(svmUUID *string) {
	o.SVMUUIDQueryParameter = svmUUID
}

// WithTypeQueryParameter adds the typeVar to the security certificate collection get params
func (o *SecurityCertificateCollectionGetParams) WithTypeQueryParameter(typeVar *string) *SecurityCertificateCollectionGetParams {
	o.SetTypeQueryParameter(typeVar)
	return o
}

// SetTypeQueryParameter adds the type to the security certificate collection get params
func (o *SecurityCertificateCollectionGetParams) SetTypeQueryParameter(typeVar *string) {
	o.TypeQueryParameter = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *SecurityCertificateCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CaQueryParameter != nil {

		// query param ca
		var qrCa string

		if o.CaQueryParameter != nil {
			qrCa = *o.CaQueryParameter
		}
		qCa := qrCa
		if qCa != "" {

			if err := r.SetQueryParam("ca", qCa); err != nil {
				return err
			}
		}
	}

	if o.CommonNameQueryParameter != nil {

		// query param common_name
		var qrCommonName string

		if o.CommonNameQueryParameter != nil {
			qrCommonName = *o.CommonNameQueryParameter
		}
		qCommonName := qrCommonName
		if qCommonName != "" {

			if err := r.SetQueryParam("common_name", qCommonName); err != nil {
				return err
			}
		}
	}

	if o.ExpiryTimeQueryParameter != nil {

		// query param expiry_time
		var qrExpiryTime string

		if o.ExpiryTimeQueryParameter != nil {
			qrExpiryTime = *o.ExpiryTimeQueryParameter
		}
		qExpiryTime := qrExpiryTime
		if qExpiryTime != "" {

			if err := r.SetQueryParam("expiry_time", qExpiryTime); err != nil {
				return err
			}
		}
	}

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.HashFunctionQueryParameter != nil {

		// query param hash_function
		var qrHashFunction string

		if o.HashFunctionQueryParameter != nil {
			qrHashFunction = *o.HashFunctionQueryParameter
		}
		qHashFunction := qrHashFunction
		if qHashFunction != "" {

			if err := r.SetQueryParam("hash_function", qHashFunction); err != nil {
				return err
			}
		}
	}

	if o.KeySizeQueryParameter != nil {

		// query param key_size
		var qrKeySize string

		if o.KeySizeQueryParameter != nil {
			qrKeySize = *o.KeySizeQueryParameter
		}
		qKeySize := qrKeySize
		if qKeySize != "" {

			if err := r.SetQueryParam("key_size", qKeySize); err != nil {
				return err
			}
		}
	}

	if o.MaxRecords != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecords != nil {
			qrMaxRecords = *o.MaxRecords
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.OrderBy != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.ReturnRecords != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecords != nil {
			qrReturnRecords = *o.ReturnRecords
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeout != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeout != nil {
			qrReturnTimeout = *o.ReturnTimeout
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.ScopeQueryParameter != nil {

		// query param scope
		var qrScope string

		if o.ScopeQueryParameter != nil {
			qrScope = *o.ScopeQueryParameter
		}
		qScope := qrScope
		if qScope != "" {

			if err := r.SetQueryParam("scope", qScope); err != nil {
				return err
			}
		}
	}

	if o.SerialNumberQueryParameter != nil {

		// query param serial_number
		var qrSerialNumber string

		if o.SerialNumberQueryParameter != nil {
			qrSerialNumber = *o.SerialNumberQueryParameter
		}
		qSerialNumber := qrSerialNumber
		if qSerialNumber != "" {

			if err := r.SetQueryParam("serial_number", qSerialNumber); err != nil {
				return err
			}
		}
	}

	if o.SVMNameQueryParameter != nil {

		// query param svm.name
		var qrSvmName string

		if o.SVMNameQueryParameter != nil {
			qrSvmName = *o.SVMNameQueryParameter
		}
		qSvmName := qrSvmName
		if qSvmName != "" {

			if err := r.SetQueryParam("svm.name", qSvmName); err != nil {
				return err
			}
		}
	}

	if o.SVMUUIDQueryParameter != nil {

		// query param svm.uuid
		var qrSvmUUID string

		if o.SVMUUIDQueryParameter != nil {
			qrSvmUUID = *o.SVMUUIDQueryParameter
		}
		qSvmUUID := qrSvmUUID
		if qSvmUUID != "" {

			if err := r.SetQueryParam("svm.uuid", qSvmUUID); err != nil {
				return err
			}
		}
	}

	if o.TypeQueryParameter != nil {

		// query param type
		var qrType string

		if o.TypeQueryParameter != nil {
			qrType = *o.TypeQueryParameter
		}
		qType := qrType
		if qType != "" {

			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamSecurityCertificateCollectionGet binds the parameter fields
func (o *SecurityCertificateCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamSecurityCertificateCollectionGet binds the parameter order_by
func (o *SecurityCertificateCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderBy

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
