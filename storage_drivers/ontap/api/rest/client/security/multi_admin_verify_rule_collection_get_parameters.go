// Code generated by go-swagger; DO NOT EDIT.

package security

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewMultiAdminVerifyRuleCollectionGetParams creates a new MultiAdminVerifyRuleCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewMultiAdminVerifyRuleCollectionGetParams() *MultiAdminVerifyRuleCollectionGetParams {
	return &MultiAdminVerifyRuleCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewMultiAdminVerifyRuleCollectionGetParamsWithTimeout creates a new MultiAdminVerifyRuleCollectionGetParams object
// with the ability to set a timeout on a request.
func NewMultiAdminVerifyRuleCollectionGetParamsWithTimeout(timeout time.Duration) *MultiAdminVerifyRuleCollectionGetParams {
	return &MultiAdminVerifyRuleCollectionGetParams{
		timeout: timeout,
	}
}

// NewMultiAdminVerifyRuleCollectionGetParamsWithContext creates a new MultiAdminVerifyRuleCollectionGetParams object
// with the ability to set a context for a request.
func NewMultiAdminVerifyRuleCollectionGetParamsWithContext(ctx context.Context) *MultiAdminVerifyRuleCollectionGetParams {
	return &MultiAdminVerifyRuleCollectionGetParams{
		Context: ctx,
	}
}

// NewMultiAdminVerifyRuleCollectionGetParamsWithHTTPClient creates a new MultiAdminVerifyRuleCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewMultiAdminVerifyRuleCollectionGetParamsWithHTTPClient(client *http.Client) *MultiAdminVerifyRuleCollectionGetParams {
	return &MultiAdminVerifyRuleCollectionGetParams{
		HTTPClient: client,
	}
}

/*
MultiAdminVerifyRuleCollectionGetParams contains all the parameters to send to the API endpoint

	for the multi admin verify rule collection get operation.

	Typically these are written to a http.Request.
*/
type MultiAdminVerifyRuleCollectionGetParams struct {

	/* ApprovalExpiry.

	   Filter by approval_expiry
	*/
	ApprovalExpiryQueryParameter *string

	/* ApprovalGroupsName.

	   Filter by approval_groups.name
	*/
	ApprovalGroupsNameQueryParameter *string

	/* AutoRequestCreate.

	   Filter by auto_request_create
	*/
	AutoRequestCreateQueryParameter *bool

	/* CreateTime.

	   Filter by create_time
	*/
	CreateTimeQueryParameter *string

	/* ExecutionExpiry.

	   Filter by execution_expiry
	*/
	ExecutionExpiryQueryParameter *string

	/* Fields.

	   Specify the fields to return.
	*/
	FieldsQueryParameter []string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecordsQueryParameter *int64

	/* Operation.

	   Filter by operation
	*/
	OperationQueryParameter *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderByQueryParameter []string

	/* OwnerName.

	   Filter by owner.name
	*/
	OwnerNameQueryParameter *string

	/* OwnerUUID.

	   Filter by owner.uuid
	*/
	OwnerUUIDQueryParameter *string

	/* Query.

	   Filter by query
	*/
	QueryQueryParameter *string

	/* RequiredApprovers.

	   Filter by required_approvers
	*/
	RequiredApproversQueryParameter *int64

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecordsQueryParameter *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeoutQueryParameter *int64

	/* SystemDefined.

	   Filter by system_defined
	*/
	SystemDefinedQueryParameter *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the multi admin verify rule collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *MultiAdminVerifyRuleCollectionGetParams) WithDefaults() *MultiAdminVerifyRuleCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the multi admin verify rule collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *MultiAdminVerifyRuleCollectionGetParams) SetDefaults() {
	var (
		returnRecordsQueryParameterDefault = bool(true)

		returnTimeoutQueryParameterDefault = int64(15)
	)

	val := MultiAdminVerifyRuleCollectionGetParams{
		ReturnRecordsQueryParameter: &returnRecordsQueryParameterDefault,
		ReturnTimeoutQueryParameter: &returnTimeoutQueryParameterDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) WithTimeout(timeout time.Duration) *MultiAdminVerifyRuleCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) WithContext(ctx context.Context) *MultiAdminVerifyRuleCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) WithHTTPClient(client *http.Client) *MultiAdminVerifyRuleCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithApprovalExpiryQueryParameter adds the approvalExpiry to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) WithApprovalExpiryQueryParameter(approvalExpiry *string) *MultiAdminVerifyRuleCollectionGetParams {
	o.SetApprovalExpiryQueryParameter(approvalExpiry)
	return o
}

// SetApprovalExpiryQueryParameter adds the approvalExpiry to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) SetApprovalExpiryQueryParameter(approvalExpiry *string) {
	o.ApprovalExpiryQueryParameter = approvalExpiry
}

// WithApprovalGroupsNameQueryParameter adds the approvalGroupsName to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) WithApprovalGroupsNameQueryParameter(approvalGroupsName *string) *MultiAdminVerifyRuleCollectionGetParams {
	o.SetApprovalGroupsNameQueryParameter(approvalGroupsName)
	return o
}

// SetApprovalGroupsNameQueryParameter adds the approvalGroupsName to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) SetApprovalGroupsNameQueryParameter(approvalGroupsName *string) {
	o.ApprovalGroupsNameQueryParameter = approvalGroupsName
}

// WithAutoRequestCreateQueryParameter adds the autoRequestCreate to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) WithAutoRequestCreateQueryParameter(autoRequestCreate *bool) *MultiAdminVerifyRuleCollectionGetParams {
	o.SetAutoRequestCreateQueryParameter(autoRequestCreate)
	return o
}

// SetAutoRequestCreateQueryParameter adds the autoRequestCreate to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) SetAutoRequestCreateQueryParameter(autoRequestCreate *bool) {
	o.AutoRequestCreateQueryParameter = autoRequestCreate
}

// WithCreateTimeQueryParameter adds the createTime to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) WithCreateTimeQueryParameter(createTime *string) *MultiAdminVerifyRuleCollectionGetParams {
	o.SetCreateTimeQueryParameter(createTime)
	return o
}

// SetCreateTimeQueryParameter adds the createTime to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) SetCreateTimeQueryParameter(createTime *string) {
	o.CreateTimeQueryParameter = createTime
}

// WithExecutionExpiryQueryParameter adds the executionExpiry to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) WithExecutionExpiryQueryParameter(executionExpiry *string) *MultiAdminVerifyRuleCollectionGetParams {
	o.SetExecutionExpiryQueryParameter(executionExpiry)
	return o
}

// SetExecutionExpiryQueryParameter adds the executionExpiry to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) SetExecutionExpiryQueryParameter(executionExpiry *string) {
	o.ExecutionExpiryQueryParameter = executionExpiry
}

// WithFieldsQueryParameter adds the fields to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) WithFieldsQueryParameter(fields []string) *MultiAdminVerifyRuleCollectionGetParams {
	o.SetFieldsQueryParameter(fields)
	return o
}

// SetFieldsQueryParameter adds the fields to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) SetFieldsQueryParameter(fields []string) {
	o.FieldsQueryParameter = fields
}

// WithMaxRecordsQueryParameter adds the maxRecords to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) WithMaxRecordsQueryParameter(maxRecords *int64) *MultiAdminVerifyRuleCollectionGetParams {
	o.SetMaxRecordsQueryParameter(maxRecords)
	return o
}

// SetMaxRecordsQueryParameter adds the maxRecords to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) SetMaxRecordsQueryParameter(maxRecords *int64) {
	o.MaxRecordsQueryParameter = maxRecords
}

// WithOperationQueryParameter adds the operation to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) WithOperationQueryParameter(operation *string) *MultiAdminVerifyRuleCollectionGetParams {
	o.SetOperationQueryParameter(operation)
	return o
}

// SetOperationQueryParameter adds the operation to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) SetOperationQueryParameter(operation *string) {
	o.OperationQueryParameter = operation
}

// WithOrderByQueryParameter adds the orderBy to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) WithOrderByQueryParameter(orderBy []string) *MultiAdminVerifyRuleCollectionGetParams {
	o.SetOrderByQueryParameter(orderBy)
	return o
}

// SetOrderByQueryParameter adds the orderBy to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) SetOrderByQueryParameter(orderBy []string) {
	o.OrderByQueryParameter = orderBy
}

// WithOwnerNameQueryParameter adds the ownerName to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) WithOwnerNameQueryParameter(ownerName *string) *MultiAdminVerifyRuleCollectionGetParams {
	o.SetOwnerNameQueryParameter(ownerName)
	return o
}

// SetOwnerNameQueryParameter adds the ownerName to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) SetOwnerNameQueryParameter(ownerName *string) {
	o.OwnerNameQueryParameter = ownerName
}

// WithOwnerUUIDQueryParameter adds the ownerUUID to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) WithOwnerUUIDQueryParameter(ownerUUID *string) *MultiAdminVerifyRuleCollectionGetParams {
	o.SetOwnerUUIDQueryParameter(ownerUUID)
	return o
}

// SetOwnerUUIDQueryParameter adds the ownerUuid to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) SetOwnerUUIDQueryParameter(ownerUUID *string) {
	o.OwnerUUIDQueryParameter = ownerUUID
}

// WithQueryQueryParameter adds the query to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) WithQueryQueryParameter(query *string) *MultiAdminVerifyRuleCollectionGetParams {
	o.SetQueryQueryParameter(query)
	return o
}

// SetQueryQueryParameter adds the query to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) SetQueryQueryParameter(query *string) {
	o.QueryQueryParameter = query
}

// WithRequiredApproversQueryParameter adds the requiredApprovers to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) WithRequiredApproversQueryParameter(requiredApprovers *int64) *MultiAdminVerifyRuleCollectionGetParams {
	o.SetRequiredApproversQueryParameter(requiredApprovers)
	return o
}

// SetRequiredApproversQueryParameter adds the requiredApprovers to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) SetRequiredApproversQueryParameter(requiredApprovers *int64) {
	o.RequiredApproversQueryParameter = requiredApprovers
}

// WithReturnRecordsQueryParameter adds the returnRecords to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) WithReturnRecordsQueryParameter(returnRecords *bool) *MultiAdminVerifyRuleCollectionGetParams {
	o.SetReturnRecordsQueryParameter(returnRecords)
	return o
}

// SetReturnRecordsQueryParameter adds the returnRecords to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) SetReturnRecordsQueryParameter(returnRecords *bool) {
	o.ReturnRecordsQueryParameter = returnRecords
}

// WithReturnTimeoutQueryParameter adds the returnTimeout to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) WithReturnTimeoutQueryParameter(returnTimeout *int64) *MultiAdminVerifyRuleCollectionGetParams {
	o.SetReturnTimeoutQueryParameter(returnTimeout)
	return o
}

// SetReturnTimeoutQueryParameter adds the returnTimeout to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) SetReturnTimeoutQueryParameter(returnTimeout *int64) {
	o.ReturnTimeoutQueryParameter = returnTimeout
}

// WithSystemDefinedQueryParameter adds the systemDefined to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) WithSystemDefinedQueryParameter(systemDefined *bool) *MultiAdminVerifyRuleCollectionGetParams {
	o.SetSystemDefinedQueryParameter(systemDefined)
	return o
}

// SetSystemDefinedQueryParameter adds the systemDefined to the multi admin verify rule collection get params
func (o *MultiAdminVerifyRuleCollectionGetParams) SetSystemDefinedQueryParameter(systemDefined *bool) {
	o.SystemDefinedQueryParameter = systemDefined
}

// WriteToRequest writes these params to a swagger request
func (o *MultiAdminVerifyRuleCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ApprovalExpiryQueryParameter != nil {

		// query param approval_expiry
		var qrApprovalExpiry string

		if o.ApprovalExpiryQueryParameter != nil {
			qrApprovalExpiry = *o.ApprovalExpiryQueryParameter
		}
		qApprovalExpiry := qrApprovalExpiry
		if qApprovalExpiry != "" {

			if err := r.SetQueryParam("approval_expiry", qApprovalExpiry); err != nil {
				return err
			}
		}
	}

	if o.ApprovalGroupsNameQueryParameter != nil {

		// query param approval_groups.name
		var qrApprovalGroupsName string

		if o.ApprovalGroupsNameQueryParameter != nil {
			qrApprovalGroupsName = *o.ApprovalGroupsNameQueryParameter
		}
		qApprovalGroupsName := qrApprovalGroupsName
		if qApprovalGroupsName != "" {

			if err := r.SetQueryParam("approval_groups.name", qApprovalGroupsName); err != nil {
				return err
			}
		}
	}

	if o.AutoRequestCreateQueryParameter != nil {

		// query param auto_request_create
		var qrAutoRequestCreate bool

		if o.AutoRequestCreateQueryParameter != nil {
			qrAutoRequestCreate = *o.AutoRequestCreateQueryParameter
		}
		qAutoRequestCreate := swag.FormatBool(qrAutoRequestCreate)
		if qAutoRequestCreate != "" {

			if err := r.SetQueryParam("auto_request_create", qAutoRequestCreate); err != nil {
				return err
			}
		}
	}

	if o.CreateTimeQueryParameter != nil {

		// query param create_time
		var qrCreateTime string

		if o.CreateTimeQueryParameter != nil {
			qrCreateTime = *o.CreateTimeQueryParameter
		}
		qCreateTime := qrCreateTime
		if qCreateTime != "" {

			if err := r.SetQueryParam("create_time", qCreateTime); err != nil {
				return err
			}
		}
	}

	if o.ExecutionExpiryQueryParameter != nil {

		// query param execution_expiry
		var qrExecutionExpiry string

		if o.ExecutionExpiryQueryParameter != nil {
			qrExecutionExpiry = *o.ExecutionExpiryQueryParameter
		}
		qExecutionExpiry := qrExecutionExpiry
		if qExecutionExpiry != "" {

			if err := r.SetQueryParam("execution_expiry", qExecutionExpiry); err != nil {
				return err
			}
		}
	}

	if o.FieldsQueryParameter != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.MaxRecordsQueryParameter != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecordsQueryParameter != nil {
			qrMaxRecords = *o.MaxRecordsQueryParameter
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.OperationQueryParameter != nil {

		// query param operation
		var qrOperation string

		if o.OperationQueryParameter != nil {
			qrOperation = *o.OperationQueryParameter
		}
		qOperation := qrOperation
		if qOperation != "" {

			if err := r.SetQueryParam("operation", qOperation); err != nil {
				return err
			}
		}
	}

	if o.OrderByQueryParameter != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.OwnerNameQueryParameter != nil {

		// query param owner.name
		var qrOwnerName string

		if o.OwnerNameQueryParameter != nil {
			qrOwnerName = *o.OwnerNameQueryParameter
		}
		qOwnerName := qrOwnerName
		if qOwnerName != "" {

			if err := r.SetQueryParam("owner.name", qOwnerName); err != nil {
				return err
			}
		}
	}

	if o.OwnerUUIDQueryParameter != nil {

		// query param owner.uuid
		var qrOwnerUUID string

		if o.OwnerUUIDQueryParameter != nil {
			qrOwnerUUID = *o.OwnerUUIDQueryParameter
		}
		qOwnerUUID := qrOwnerUUID
		if qOwnerUUID != "" {

			if err := r.SetQueryParam("owner.uuid", qOwnerUUID); err != nil {
				return err
			}
		}
	}

	if o.QueryQueryParameter != nil {

		// query param query
		var qrQuery string

		if o.QueryQueryParameter != nil {
			qrQuery = *o.QueryQueryParameter
		}
		qQuery := qrQuery
		if qQuery != "" {

			if err := r.SetQueryParam("query", qQuery); err != nil {
				return err
			}
		}
	}

	if o.RequiredApproversQueryParameter != nil {

		// query param required_approvers
		var qrRequiredApprovers int64

		if o.RequiredApproversQueryParameter != nil {
			qrRequiredApprovers = *o.RequiredApproversQueryParameter
		}
		qRequiredApprovers := swag.FormatInt64(qrRequiredApprovers)
		if qRequiredApprovers != "" {

			if err := r.SetQueryParam("required_approvers", qRequiredApprovers); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecordsQueryParameter != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecordsQueryParameter != nil {
			qrReturnRecords = *o.ReturnRecordsQueryParameter
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeoutQueryParameter != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeoutQueryParameter != nil {
			qrReturnTimeout = *o.ReturnTimeoutQueryParameter
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.SystemDefinedQueryParameter != nil {

		// query param system_defined
		var qrSystemDefined bool

		if o.SystemDefinedQueryParameter != nil {
			qrSystemDefined = *o.SystemDefinedQueryParameter
		}
		qSystemDefined := swag.FormatBool(qrSystemDefined)
		if qSystemDefined != "" {

			if err := r.SetQueryParam("system_defined", qSystemDefined); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamMultiAdminVerifyRuleCollectionGet binds the parameter fields
func (o *MultiAdminVerifyRuleCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.FieldsQueryParameter

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamMultiAdminVerifyRuleCollectionGet binds the parameter order_by
func (o *MultiAdminVerifyRuleCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderByQueryParameter

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
