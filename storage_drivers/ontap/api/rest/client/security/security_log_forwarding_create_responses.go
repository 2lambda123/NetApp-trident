// Code generated by go-swagger; DO NOT EDIT.

package security

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/netapp/trident/storage_drivers/ontap/api/rest/models"
)

// SecurityLogForwardingCreateReader is a Reader for the SecurityLogForwardingCreate structure.
type SecurityLogForwardingCreateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SecurityLogForwardingCreateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewSecurityLogForwardingCreateAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewSecurityLogForwardingCreateDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewSecurityLogForwardingCreateAccepted creates a SecurityLogForwardingCreateAccepted with default headers values
func NewSecurityLogForwardingCreateAccepted() *SecurityLogForwardingCreateAccepted {
	return &SecurityLogForwardingCreateAccepted{}
}

/* SecurityLogForwardingCreateAccepted describes a response with status code 202, with default header values.

Accepted
*/
type SecurityLogForwardingCreateAccepted struct {
	Payload *models.SecurityAuditLogForwardResponse
}

func (o *SecurityLogForwardingCreateAccepted) Error() string {
	return fmt.Sprintf("[POST /security/audit/destinations][%d] securityLogForwardingCreateAccepted  %+v", 202, o.Payload)
}
func (o *SecurityLogForwardingCreateAccepted) GetPayload() *models.SecurityAuditLogForwardResponse {
	return o.Payload
}

func (o *SecurityLogForwardingCreateAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SecurityAuditLogForwardResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSecurityLogForwardingCreateDefault creates a SecurityLogForwardingCreateDefault with default headers values
func NewSecurityLogForwardingCreateDefault(code int) *SecurityLogForwardingCreateDefault {
	return &SecurityLogForwardingCreateDefault{
		_statusCode: code,
	}
}

/* SecurityLogForwardingCreateDefault describes a response with status code -1, with default header values.

 ONTAP Error Response Codes
| Error Code | Description |
| ---------- | ----------- |
| 15661      | The object specified could not be found |
| 13114      | Internal error |
| 13115      | Invalid input |
| 4522285    | Server verification cannot be enabled because it requires a protocol with encryption. Encryption can be selected using the protocol field.|
| 9240603    | Cannot ping destination host. Verify connectivity to desired host or skip the connectivity check with the -force parameter. |
| 327698     | Failed to create RPC client to destination host |
| 9240609    | Cannot connect to destination host. |
| 9240604    | Cannot resolve the destination host. |

*/
type SecurityLogForwardingCreateDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the security log forwarding create default response
func (o *SecurityLogForwardingCreateDefault) Code() int {
	return o._statusCode
}

func (o *SecurityLogForwardingCreateDefault) Error() string {
	return fmt.Sprintf("[POST /security/audit/destinations][%d] security_log_forwarding_create default  %+v", o._statusCode, o.Payload)
}
func (o *SecurityLogForwardingCreateDefault) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *SecurityLogForwardingCreateDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
