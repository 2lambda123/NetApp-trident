// Code generated by go-swagger; DO NOT EDIT.

package security

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGcpKmsCollectionGetParams creates a new GcpKmsCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGcpKmsCollectionGetParams() *GcpKmsCollectionGetParams {
	return &GcpKmsCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGcpKmsCollectionGetParamsWithTimeout creates a new GcpKmsCollectionGetParams object
// with the ability to set a timeout on a request.
func NewGcpKmsCollectionGetParamsWithTimeout(timeout time.Duration) *GcpKmsCollectionGetParams {
	return &GcpKmsCollectionGetParams{
		timeout: timeout,
	}
}

// NewGcpKmsCollectionGetParamsWithContext creates a new GcpKmsCollectionGetParams object
// with the ability to set a context for a request.
func NewGcpKmsCollectionGetParamsWithContext(ctx context.Context) *GcpKmsCollectionGetParams {
	return &GcpKmsCollectionGetParams{
		Context: ctx,
	}
}

// NewGcpKmsCollectionGetParamsWithHTTPClient creates a new GcpKmsCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewGcpKmsCollectionGetParamsWithHTTPClient(client *http.Client) *GcpKmsCollectionGetParams {
	return &GcpKmsCollectionGetParams{
		HTTPClient: client,
	}
}

/*
GcpKmsCollectionGetParams contains all the parameters to send to the API endpoint

	for the gcp kms collection get operation.

	Typically these are written to a http.Request.
*/
type GcpKmsCollectionGetParams struct {

	/* EkmipReachabilityCode.

	   Filter by ekmip_reachability.code
	*/
	EkmIPReachabilityCodeQueryParameter *int64

	/* EkmipReachabilityMessage.

	   Filter by ekmip_reachability.message
	*/
	EkmIPReachabilityMessageQueryParameter *string

	/* EkmipReachabilityNodeName.

	   Filter by ekmip_reachability.node.name
	*/
	EkmIPReachabilityNodeNameQueryParameter *string

	/* EkmipReachabilityNodeUUID.

	   Filter by ekmip_reachability.node.uuid
	*/
	EkmIPReachabilityNodeUUIDQueryParameter *string

	/* EkmipReachabilityReachable.

	   Filter by ekmip_reachability.reachable
	*/
	EkmIPReachabilityReachableQueryParameter *bool

	/* Fields.

	   Specify the fields to return.
	*/
	FieldsQueryParameter []string

	/* GoogleReachabilityCode.

	   Filter by google_reachability.code
	*/
	GoogleReachabilityCodeQueryParameter *int64

	/* GoogleReachabilityMessage.

	   Filter by google_reachability.message
	*/
	GoogleReachabilityMessageQueryParameter *string

	/* GoogleReachabilityReachable.

	   Filter by google_reachability.reachable
	*/
	GoogleReachabilityReachableQueryParameter *bool

	/* KeyName.

	   Filter by key_name
	*/
	KeyNameQueryParameter *string

	/* KeyRingLocation.

	   Filter by key_ring_location
	*/
	KeyRingLocationQueryParameter *string

	/* KeyRingName.

	   Filter by key_ring_name
	*/
	KeyRingNameQueryParameter *string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecordsQueryParameter *int64

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderByQueryParameter []string

	/* ProjectID.

	   Filter by project_id
	*/
	ProjectIDQueryParameter *string

	/* ProxyHost.

	   Filter by proxy_host
	*/
	ProxyHostQueryParameter *string

	/* ProxyPort.

	   Filter by proxy_port
	*/
	ProxyPortQueryParameter *int64

	/* ProxyType.

	   Filter by proxy_type
	*/
	ProxyTypeQueryParameter *string

	/* ProxyUsername.

	   Filter by proxy_username
	*/
	ProxyUsernameQueryParameter *string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecordsQueryParameter *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeoutQueryParameter *int64

	/* Scope.

	   Filter by scope
	*/
	ScopeQueryParameter *string

	/* StateClusterState.

	   Filter by state.cluster_state
	*/
	StateClusterStateQueryParameter *bool

	/* StateCode.

	   Filter by state.code
	*/
	StateCodeQueryParameter *int64

	/* StateMessage.

	   Filter by state.message
	*/
	StateMessageQueryParameter *string

	/* SvmName.

	   Filter by svm.name
	*/
	SVMNameQueryParameter *string

	/* SvmUUID.

	   Filter by svm.uuid
	*/
	SVMUUIDQueryParameter *string

	/* UUID.

	   Filter by uuid
	*/
	UUIDQueryParameter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the gcp kms collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GcpKmsCollectionGetParams) WithDefaults() *GcpKmsCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the gcp kms collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GcpKmsCollectionGetParams) SetDefaults() {
	var (
		returnRecordsQueryParameterDefault = bool(true)

		returnTimeoutQueryParameterDefault = int64(15)
	)

	val := GcpKmsCollectionGetParams{
		ReturnRecordsQueryParameter: &returnRecordsQueryParameterDefault,
		ReturnTimeoutQueryParameter: &returnTimeoutQueryParameterDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) WithTimeout(timeout time.Duration) *GcpKmsCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) WithContext(ctx context.Context) *GcpKmsCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) WithHTTPClient(client *http.Client) *GcpKmsCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEkmIPReachabilityCodeQueryParameter adds the ekmipReachabilityCode to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) WithEkmIPReachabilityCodeQueryParameter(ekmipReachabilityCode *int64) *GcpKmsCollectionGetParams {
	o.SetEkmIPReachabilityCodeQueryParameter(ekmipReachabilityCode)
	return o
}

// SetEkmIPReachabilityCodeQueryParameter adds the ekmipReachabilityCode to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) SetEkmIPReachabilityCodeQueryParameter(ekmipReachabilityCode *int64) {
	o.EkmIPReachabilityCodeQueryParameter = ekmipReachabilityCode
}

// WithEkmIPReachabilityMessageQueryParameter adds the ekmipReachabilityMessage to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) WithEkmIPReachabilityMessageQueryParameter(ekmipReachabilityMessage *string) *GcpKmsCollectionGetParams {
	o.SetEkmIPReachabilityMessageQueryParameter(ekmipReachabilityMessage)
	return o
}

// SetEkmIPReachabilityMessageQueryParameter adds the ekmipReachabilityMessage to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) SetEkmIPReachabilityMessageQueryParameter(ekmipReachabilityMessage *string) {
	o.EkmIPReachabilityMessageQueryParameter = ekmipReachabilityMessage
}

// WithEkmIPReachabilityNodeNameQueryParameter adds the ekmipReachabilityNodeName to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) WithEkmIPReachabilityNodeNameQueryParameter(ekmipReachabilityNodeName *string) *GcpKmsCollectionGetParams {
	o.SetEkmIPReachabilityNodeNameQueryParameter(ekmipReachabilityNodeName)
	return o
}

// SetEkmIPReachabilityNodeNameQueryParameter adds the ekmipReachabilityNodeName to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) SetEkmIPReachabilityNodeNameQueryParameter(ekmipReachabilityNodeName *string) {
	o.EkmIPReachabilityNodeNameQueryParameter = ekmipReachabilityNodeName
}

// WithEkmIPReachabilityNodeUUIDQueryParameter adds the ekmipReachabilityNodeUUID to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) WithEkmIPReachabilityNodeUUIDQueryParameter(ekmipReachabilityNodeUUID *string) *GcpKmsCollectionGetParams {
	o.SetEkmIPReachabilityNodeUUIDQueryParameter(ekmipReachabilityNodeUUID)
	return o
}

// SetEkmIPReachabilityNodeUUIDQueryParameter adds the ekmipReachabilityNodeUuid to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) SetEkmIPReachabilityNodeUUIDQueryParameter(ekmipReachabilityNodeUUID *string) {
	o.EkmIPReachabilityNodeUUIDQueryParameter = ekmipReachabilityNodeUUID
}

// WithEkmIPReachabilityReachableQueryParameter adds the ekmipReachabilityReachable to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) WithEkmIPReachabilityReachableQueryParameter(ekmipReachabilityReachable *bool) *GcpKmsCollectionGetParams {
	o.SetEkmIPReachabilityReachableQueryParameter(ekmipReachabilityReachable)
	return o
}

// SetEkmIPReachabilityReachableQueryParameter adds the ekmipReachabilityReachable to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) SetEkmIPReachabilityReachableQueryParameter(ekmipReachabilityReachable *bool) {
	o.EkmIPReachabilityReachableQueryParameter = ekmipReachabilityReachable
}

// WithFieldsQueryParameter adds the fields to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) WithFieldsQueryParameter(fields []string) *GcpKmsCollectionGetParams {
	o.SetFieldsQueryParameter(fields)
	return o
}

// SetFieldsQueryParameter adds the fields to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) SetFieldsQueryParameter(fields []string) {
	o.FieldsQueryParameter = fields
}

// WithGoogleReachabilityCodeQueryParameter adds the googleReachabilityCode to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) WithGoogleReachabilityCodeQueryParameter(googleReachabilityCode *int64) *GcpKmsCollectionGetParams {
	o.SetGoogleReachabilityCodeQueryParameter(googleReachabilityCode)
	return o
}

// SetGoogleReachabilityCodeQueryParameter adds the googleReachabilityCode to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) SetGoogleReachabilityCodeQueryParameter(googleReachabilityCode *int64) {
	o.GoogleReachabilityCodeQueryParameter = googleReachabilityCode
}

// WithGoogleReachabilityMessageQueryParameter adds the googleReachabilityMessage to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) WithGoogleReachabilityMessageQueryParameter(googleReachabilityMessage *string) *GcpKmsCollectionGetParams {
	o.SetGoogleReachabilityMessageQueryParameter(googleReachabilityMessage)
	return o
}

// SetGoogleReachabilityMessageQueryParameter adds the googleReachabilityMessage to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) SetGoogleReachabilityMessageQueryParameter(googleReachabilityMessage *string) {
	o.GoogleReachabilityMessageQueryParameter = googleReachabilityMessage
}

// WithGoogleReachabilityReachableQueryParameter adds the googleReachabilityReachable to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) WithGoogleReachabilityReachableQueryParameter(googleReachabilityReachable *bool) *GcpKmsCollectionGetParams {
	o.SetGoogleReachabilityReachableQueryParameter(googleReachabilityReachable)
	return o
}

// SetGoogleReachabilityReachableQueryParameter adds the googleReachabilityReachable to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) SetGoogleReachabilityReachableQueryParameter(googleReachabilityReachable *bool) {
	o.GoogleReachabilityReachableQueryParameter = googleReachabilityReachable
}

// WithKeyNameQueryParameter adds the keyName to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) WithKeyNameQueryParameter(keyName *string) *GcpKmsCollectionGetParams {
	o.SetKeyNameQueryParameter(keyName)
	return o
}

// SetKeyNameQueryParameter adds the keyName to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) SetKeyNameQueryParameter(keyName *string) {
	o.KeyNameQueryParameter = keyName
}

// WithKeyRingLocationQueryParameter adds the keyRingLocation to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) WithKeyRingLocationQueryParameter(keyRingLocation *string) *GcpKmsCollectionGetParams {
	o.SetKeyRingLocationQueryParameter(keyRingLocation)
	return o
}

// SetKeyRingLocationQueryParameter adds the keyRingLocation to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) SetKeyRingLocationQueryParameter(keyRingLocation *string) {
	o.KeyRingLocationQueryParameter = keyRingLocation
}

// WithKeyRingNameQueryParameter adds the keyRingName to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) WithKeyRingNameQueryParameter(keyRingName *string) *GcpKmsCollectionGetParams {
	o.SetKeyRingNameQueryParameter(keyRingName)
	return o
}

// SetKeyRingNameQueryParameter adds the keyRingName to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) SetKeyRingNameQueryParameter(keyRingName *string) {
	o.KeyRingNameQueryParameter = keyRingName
}

// WithMaxRecordsQueryParameter adds the maxRecords to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) WithMaxRecordsQueryParameter(maxRecords *int64) *GcpKmsCollectionGetParams {
	o.SetMaxRecordsQueryParameter(maxRecords)
	return o
}

// SetMaxRecordsQueryParameter adds the maxRecords to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) SetMaxRecordsQueryParameter(maxRecords *int64) {
	o.MaxRecordsQueryParameter = maxRecords
}

// WithOrderByQueryParameter adds the orderBy to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) WithOrderByQueryParameter(orderBy []string) *GcpKmsCollectionGetParams {
	o.SetOrderByQueryParameter(orderBy)
	return o
}

// SetOrderByQueryParameter adds the orderBy to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) SetOrderByQueryParameter(orderBy []string) {
	o.OrderByQueryParameter = orderBy
}

// WithProjectIDQueryParameter adds the projectID to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) WithProjectIDQueryParameter(projectID *string) *GcpKmsCollectionGetParams {
	o.SetProjectIDQueryParameter(projectID)
	return o
}

// SetProjectIDQueryParameter adds the projectId to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) SetProjectIDQueryParameter(projectID *string) {
	o.ProjectIDQueryParameter = projectID
}

// WithProxyHostQueryParameter adds the proxyHost to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) WithProxyHostQueryParameter(proxyHost *string) *GcpKmsCollectionGetParams {
	o.SetProxyHostQueryParameter(proxyHost)
	return o
}

// SetProxyHostQueryParameter adds the proxyHost to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) SetProxyHostQueryParameter(proxyHost *string) {
	o.ProxyHostQueryParameter = proxyHost
}

// WithProxyPortQueryParameter adds the proxyPort to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) WithProxyPortQueryParameter(proxyPort *int64) *GcpKmsCollectionGetParams {
	o.SetProxyPortQueryParameter(proxyPort)
	return o
}

// SetProxyPortQueryParameter adds the proxyPort to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) SetProxyPortQueryParameter(proxyPort *int64) {
	o.ProxyPortQueryParameter = proxyPort
}

// WithProxyTypeQueryParameter adds the proxyType to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) WithProxyTypeQueryParameter(proxyType *string) *GcpKmsCollectionGetParams {
	o.SetProxyTypeQueryParameter(proxyType)
	return o
}

// SetProxyTypeQueryParameter adds the proxyType to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) SetProxyTypeQueryParameter(proxyType *string) {
	o.ProxyTypeQueryParameter = proxyType
}

// WithProxyUsernameQueryParameter adds the proxyUsername to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) WithProxyUsernameQueryParameter(proxyUsername *string) *GcpKmsCollectionGetParams {
	o.SetProxyUsernameQueryParameter(proxyUsername)
	return o
}

// SetProxyUsernameQueryParameter adds the proxyUsername to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) SetProxyUsernameQueryParameter(proxyUsername *string) {
	o.ProxyUsernameQueryParameter = proxyUsername
}

// WithReturnRecordsQueryParameter adds the returnRecords to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) WithReturnRecordsQueryParameter(returnRecords *bool) *GcpKmsCollectionGetParams {
	o.SetReturnRecordsQueryParameter(returnRecords)
	return o
}

// SetReturnRecordsQueryParameter adds the returnRecords to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) SetReturnRecordsQueryParameter(returnRecords *bool) {
	o.ReturnRecordsQueryParameter = returnRecords
}

// WithReturnTimeoutQueryParameter adds the returnTimeout to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) WithReturnTimeoutQueryParameter(returnTimeout *int64) *GcpKmsCollectionGetParams {
	o.SetReturnTimeoutQueryParameter(returnTimeout)
	return o
}

// SetReturnTimeoutQueryParameter adds the returnTimeout to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) SetReturnTimeoutQueryParameter(returnTimeout *int64) {
	o.ReturnTimeoutQueryParameter = returnTimeout
}

// WithScopeQueryParameter adds the scope to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) WithScopeQueryParameter(scope *string) *GcpKmsCollectionGetParams {
	o.SetScopeQueryParameter(scope)
	return o
}

// SetScopeQueryParameter adds the scope to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) SetScopeQueryParameter(scope *string) {
	o.ScopeQueryParameter = scope
}

// WithStateClusterStateQueryParameter adds the stateClusterState to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) WithStateClusterStateQueryParameter(stateClusterState *bool) *GcpKmsCollectionGetParams {
	o.SetStateClusterStateQueryParameter(stateClusterState)
	return o
}

// SetStateClusterStateQueryParameter adds the stateClusterState to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) SetStateClusterStateQueryParameter(stateClusterState *bool) {
	o.StateClusterStateQueryParameter = stateClusterState
}

// WithStateCodeQueryParameter adds the stateCode to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) WithStateCodeQueryParameter(stateCode *int64) *GcpKmsCollectionGetParams {
	o.SetStateCodeQueryParameter(stateCode)
	return o
}

// SetStateCodeQueryParameter adds the stateCode to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) SetStateCodeQueryParameter(stateCode *int64) {
	o.StateCodeQueryParameter = stateCode
}

// WithStateMessageQueryParameter adds the stateMessage to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) WithStateMessageQueryParameter(stateMessage *string) *GcpKmsCollectionGetParams {
	o.SetStateMessageQueryParameter(stateMessage)
	return o
}

// SetStateMessageQueryParameter adds the stateMessage to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) SetStateMessageQueryParameter(stateMessage *string) {
	o.StateMessageQueryParameter = stateMessage
}

// WithSVMNameQueryParameter adds the svmName to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) WithSVMNameQueryParameter(svmName *string) *GcpKmsCollectionGetParams {
	o.SetSVMNameQueryParameter(svmName)
	return o
}

// SetSVMNameQueryParameter adds the svmName to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) SetSVMNameQueryParameter(svmName *string) {
	o.SVMNameQueryParameter = svmName
}

// WithSVMUUIDQueryParameter adds the svmUUID to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) WithSVMUUIDQueryParameter(svmUUID *string) *GcpKmsCollectionGetParams {
	o.SetSVMUUIDQueryParameter(svmUUID)
	return o
}

// SetSVMUUIDQueryParameter adds the svmUuid to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) SetSVMUUIDQueryParameter(svmUUID *string) {
	o.SVMUUIDQueryParameter = svmUUID
}

// WithUUIDQueryParameter adds the uuid to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) WithUUIDQueryParameter(uuid *string) *GcpKmsCollectionGetParams {
	o.SetUUIDQueryParameter(uuid)
	return o
}

// SetUUIDQueryParameter adds the uuid to the gcp kms collection get params
func (o *GcpKmsCollectionGetParams) SetUUIDQueryParameter(uuid *string) {
	o.UUIDQueryParameter = uuid
}

// WriteToRequest writes these params to a swagger request
func (o *GcpKmsCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EkmIPReachabilityCodeQueryParameter != nil {

		// query param ekmip_reachability.code
		var qrEkmipReachabilityCode int64

		if o.EkmIPReachabilityCodeQueryParameter != nil {
			qrEkmipReachabilityCode = *o.EkmIPReachabilityCodeQueryParameter
		}
		qEkmipReachabilityCode := swag.FormatInt64(qrEkmipReachabilityCode)
		if qEkmipReachabilityCode != "" {

			if err := r.SetQueryParam("ekmip_reachability.code", qEkmipReachabilityCode); err != nil {
				return err
			}
		}
	}

	if o.EkmIPReachabilityMessageQueryParameter != nil {

		// query param ekmip_reachability.message
		var qrEkmipReachabilityMessage string

		if o.EkmIPReachabilityMessageQueryParameter != nil {
			qrEkmipReachabilityMessage = *o.EkmIPReachabilityMessageQueryParameter
		}
		qEkmipReachabilityMessage := qrEkmipReachabilityMessage
		if qEkmipReachabilityMessage != "" {

			if err := r.SetQueryParam("ekmip_reachability.message", qEkmipReachabilityMessage); err != nil {
				return err
			}
		}
	}

	if o.EkmIPReachabilityNodeNameQueryParameter != nil {

		// query param ekmip_reachability.node.name
		var qrEkmipReachabilityNodeName string

		if o.EkmIPReachabilityNodeNameQueryParameter != nil {
			qrEkmipReachabilityNodeName = *o.EkmIPReachabilityNodeNameQueryParameter
		}
		qEkmipReachabilityNodeName := qrEkmipReachabilityNodeName
		if qEkmipReachabilityNodeName != "" {

			if err := r.SetQueryParam("ekmip_reachability.node.name", qEkmipReachabilityNodeName); err != nil {
				return err
			}
		}
	}

	if o.EkmIPReachabilityNodeUUIDQueryParameter != nil {

		// query param ekmip_reachability.node.uuid
		var qrEkmipReachabilityNodeUUID string

		if o.EkmIPReachabilityNodeUUIDQueryParameter != nil {
			qrEkmipReachabilityNodeUUID = *o.EkmIPReachabilityNodeUUIDQueryParameter
		}
		qEkmipReachabilityNodeUUID := qrEkmipReachabilityNodeUUID
		if qEkmipReachabilityNodeUUID != "" {

			if err := r.SetQueryParam("ekmip_reachability.node.uuid", qEkmipReachabilityNodeUUID); err != nil {
				return err
			}
		}
	}

	if o.EkmIPReachabilityReachableQueryParameter != nil {

		// query param ekmip_reachability.reachable
		var qrEkmipReachabilityReachable bool

		if o.EkmIPReachabilityReachableQueryParameter != nil {
			qrEkmipReachabilityReachable = *o.EkmIPReachabilityReachableQueryParameter
		}
		qEkmipReachabilityReachable := swag.FormatBool(qrEkmipReachabilityReachable)
		if qEkmipReachabilityReachable != "" {

			if err := r.SetQueryParam("ekmip_reachability.reachable", qEkmipReachabilityReachable); err != nil {
				return err
			}
		}
	}

	if o.FieldsQueryParameter != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.GoogleReachabilityCodeQueryParameter != nil {

		// query param google_reachability.code
		var qrGoogleReachabilityCode int64

		if o.GoogleReachabilityCodeQueryParameter != nil {
			qrGoogleReachabilityCode = *o.GoogleReachabilityCodeQueryParameter
		}
		qGoogleReachabilityCode := swag.FormatInt64(qrGoogleReachabilityCode)
		if qGoogleReachabilityCode != "" {

			if err := r.SetQueryParam("google_reachability.code", qGoogleReachabilityCode); err != nil {
				return err
			}
		}
	}

	if o.GoogleReachabilityMessageQueryParameter != nil {

		// query param google_reachability.message
		var qrGoogleReachabilityMessage string

		if o.GoogleReachabilityMessageQueryParameter != nil {
			qrGoogleReachabilityMessage = *o.GoogleReachabilityMessageQueryParameter
		}
		qGoogleReachabilityMessage := qrGoogleReachabilityMessage
		if qGoogleReachabilityMessage != "" {

			if err := r.SetQueryParam("google_reachability.message", qGoogleReachabilityMessage); err != nil {
				return err
			}
		}
	}

	if o.GoogleReachabilityReachableQueryParameter != nil {

		// query param google_reachability.reachable
		var qrGoogleReachabilityReachable bool

		if o.GoogleReachabilityReachableQueryParameter != nil {
			qrGoogleReachabilityReachable = *o.GoogleReachabilityReachableQueryParameter
		}
		qGoogleReachabilityReachable := swag.FormatBool(qrGoogleReachabilityReachable)
		if qGoogleReachabilityReachable != "" {

			if err := r.SetQueryParam("google_reachability.reachable", qGoogleReachabilityReachable); err != nil {
				return err
			}
		}
	}

	if o.KeyNameQueryParameter != nil {

		// query param key_name
		var qrKeyName string

		if o.KeyNameQueryParameter != nil {
			qrKeyName = *o.KeyNameQueryParameter
		}
		qKeyName := qrKeyName
		if qKeyName != "" {

			if err := r.SetQueryParam("key_name", qKeyName); err != nil {
				return err
			}
		}
	}

	if o.KeyRingLocationQueryParameter != nil {

		// query param key_ring_location
		var qrKeyRingLocation string

		if o.KeyRingLocationQueryParameter != nil {
			qrKeyRingLocation = *o.KeyRingLocationQueryParameter
		}
		qKeyRingLocation := qrKeyRingLocation
		if qKeyRingLocation != "" {

			if err := r.SetQueryParam("key_ring_location", qKeyRingLocation); err != nil {
				return err
			}
		}
	}

	if o.KeyRingNameQueryParameter != nil {

		// query param key_ring_name
		var qrKeyRingName string

		if o.KeyRingNameQueryParameter != nil {
			qrKeyRingName = *o.KeyRingNameQueryParameter
		}
		qKeyRingName := qrKeyRingName
		if qKeyRingName != "" {

			if err := r.SetQueryParam("key_ring_name", qKeyRingName); err != nil {
				return err
			}
		}
	}

	if o.MaxRecordsQueryParameter != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecordsQueryParameter != nil {
			qrMaxRecords = *o.MaxRecordsQueryParameter
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.OrderByQueryParameter != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.ProjectIDQueryParameter != nil {

		// query param project_id
		var qrProjectID string

		if o.ProjectIDQueryParameter != nil {
			qrProjectID = *o.ProjectIDQueryParameter
		}
		qProjectID := qrProjectID
		if qProjectID != "" {

			if err := r.SetQueryParam("project_id", qProjectID); err != nil {
				return err
			}
		}
	}

	if o.ProxyHostQueryParameter != nil {

		// query param proxy_host
		var qrProxyHost string

		if o.ProxyHostQueryParameter != nil {
			qrProxyHost = *o.ProxyHostQueryParameter
		}
		qProxyHost := qrProxyHost
		if qProxyHost != "" {

			if err := r.SetQueryParam("proxy_host", qProxyHost); err != nil {
				return err
			}
		}
	}

	if o.ProxyPortQueryParameter != nil {

		// query param proxy_port
		var qrProxyPort int64

		if o.ProxyPortQueryParameter != nil {
			qrProxyPort = *o.ProxyPortQueryParameter
		}
		qProxyPort := swag.FormatInt64(qrProxyPort)
		if qProxyPort != "" {

			if err := r.SetQueryParam("proxy_port", qProxyPort); err != nil {
				return err
			}
		}
	}

	if o.ProxyTypeQueryParameter != nil {

		// query param proxy_type
		var qrProxyType string

		if o.ProxyTypeQueryParameter != nil {
			qrProxyType = *o.ProxyTypeQueryParameter
		}
		qProxyType := qrProxyType
		if qProxyType != "" {

			if err := r.SetQueryParam("proxy_type", qProxyType); err != nil {
				return err
			}
		}
	}

	if o.ProxyUsernameQueryParameter != nil {

		// query param proxy_username
		var qrProxyUsername string

		if o.ProxyUsernameQueryParameter != nil {
			qrProxyUsername = *o.ProxyUsernameQueryParameter
		}
		qProxyUsername := qrProxyUsername
		if qProxyUsername != "" {

			if err := r.SetQueryParam("proxy_username", qProxyUsername); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecordsQueryParameter != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecordsQueryParameter != nil {
			qrReturnRecords = *o.ReturnRecordsQueryParameter
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeoutQueryParameter != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeoutQueryParameter != nil {
			qrReturnTimeout = *o.ReturnTimeoutQueryParameter
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.ScopeQueryParameter != nil {

		// query param scope
		var qrScope string

		if o.ScopeQueryParameter != nil {
			qrScope = *o.ScopeQueryParameter
		}
		qScope := qrScope
		if qScope != "" {

			if err := r.SetQueryParam("scope", qScope); err != nil {
				return err
			}
		}
	}

	if o.StateClusterStateQueryParameter != nil {

		// query param state.cluster_state
		var qrStateClusterState bool

		if o.StateClusterStateQueryParameter != nil {
			qrStateClusterState = *o.StateClusterStateQueryParameter
		}
		qStateClusterState := swag.FormatBool(qrStateClusterState)
		if qStateClusterState != "" {

			if err := r.SetQueryParam("state.cluster_state", qStateClusterState); err != nil {
				return err
			}
		}
	}

	if o.StateCodeQueryParameter != nil {

		// query param state.code
		var qrStateCode int64

		if o.StateCodeQueryParameter != nil {
			qrStateCode = *o.StateCodeQueryParameter
		}
		qStateCode := swag.FormatInt64(qrStateCode)
		if qStateCode != "" {

			if err := r.SetQueryParam("state.code", qStateCode); err != nil {
				return err
			}
		}
	}

	if o.StateMessageQueryParameter != nil {

		// query param state.message
		var qrStateMessage string

		if o.StateMessageQueryParameter != nil {
			qrStateMessage = *o.StateMessageQueryParameter
		}
		qStateMessage := qrStateMessage
		if qStateMessage != "" {

			if err := r.SetQueryParam("state.message", qStateMessage); err != nil {
				return err
			}
		}
	}

	if o.SVMNameQueryParameter != nil {

		// query param svm.name
		var qrSvmName string

		if o.SVMNameQueryParameter != nil {
			qrSvmName = *o.SVMNameQueryParameter
		}
		qSvmName := qrSvmName
		if qSvmName != "" {

			if err := r.SetQueryParam("svm.name", qSvmName); err != nil {
				return err
			}
		}
	}

	if o.SVMUUIDQueryParameter != nil {

		// query param svm.uuid
		var qrSvmUUID string

		if o.SVMUUIDQueryParameter != nil {
			qrSvmUUID = *o.SVMUUIDQueryParameter
		}
		qSvmUUID := qrSvmUUID
		if qSvmUUID != "" {

			if err := r.SetQueryParam("svm.uuid", qSvmUUID); err != nil {
				return err
			}
		}
	}

	if o.UUIDQueryParameter != nil {

		// query param uuid
		var qrUUID string

		if o.UUIDQueryParameter != nil {
			qrUUID = *o.UUIDQueryParameter
		}
		qUUID := qrUUID
		if qUUID != "" {

			if err := r.SetQueryParam("uuid", qUUID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGcpKmsCollectionGet binds the parameter fields
func (o *GcpKmsCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.FieldsQueryParameter

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamGcpKmsCollectionGet binds the parameter order_by
func (o *GcpKmsCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderByQueryParameter

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
