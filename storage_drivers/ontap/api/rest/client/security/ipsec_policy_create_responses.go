// Code generated by go-swagger; DO NOT EDIT.

package security

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/netapp/trident/storage_drivers/ontap/api/rest/models"
)

// IpsecPolicyCreateReader is a Reader for the IpsecPolicyCreate structure.
type IpsecPolicyCreateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IpsecPolicyCreateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewIpsecPolicyCreateCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewIpsecPolicyCreateDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewIpsecPolicyCreateCreated creates a IpsecPolicyCreateCreated with default headers values
func NewIpsecPolicyCreateCreated() *IpsecPolicyCreateCreated {
	return &IpsecPolicyCreateCreated{}
}

/* IpsecPolicyCreateCreated describes a response with status code 201, with default header values.

Created
*/
type IpsecPolicyCreateCreated struct {
	Payload *models.IpsecPolicyResponse
}

func (o *IpsecPolicyCreateCreated) Error() string {
	return fmt.Sprintf("[POST /security/ipsec/policies][%d] ipsecPolicyCreateCreated  %+v", 201, o.Payload)
}
func (o *IpsecPolicyCreateCreated) GetPayload() *models.IpsecPolicyResponse {
	return o.Payload
}

func (o *IpsecPolicyCreateCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IpsecPolicyResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIpsecPolicyCreateDefault creates a IpsecPolicyCreateDefault with default headers values
func NewIpsecPolicyCreateDefault(code int) *IpsecPolicyCreateDefault {
	return &IpsecPolicyCreateDefault{
		_statusCode: code,
	}
}

/* IpsecPolicyCreateDefault describes a response with status code -1, with default header values.

 ONTAP Error Response Codes
| Error Code | Description |
| ---------- | ----------- |
| 66257099 | Only one protocol can be specified. |
| 66257100 | Only one local port can be specified. |
| 66257101 | Only one remote port can be specified. |
| 66257104 | IPsec policy with same name already exists in this SVM. |
| 66257107 | The specified pre-shared key is not a valid hexadecimal string. |
| 66257109 | The specified pre-shared key is not a valid Base64 encoded binary string. |
| 66257110 | Failed to a create policy sequencing value. |
| 66257111 | The IPsec policy with action ESP TRANSPORT provides packet protection and requires a secret key or certificate for authentication. |
| 66257112 | The IPsec policy with the action specified does not provide packet protection and the authentication method provided for the policy will be ignored. |
| 66257113 | Only one local IP subnet can be specified. |
| 66257114 | Only one remote IP subnet can be specified. |
| 66257115 | Port ranges containing more than one port are not supported. |
| 66257117 | IPsec is not supported on the SVM specified in the policy, IPsec is supported on data SVMs only. |
| 66257120 | The subnet selector must be a host address (An IPv4 address with a 32-bit netmask or an IPv6 address with a 128-bit netmask). |
| 66257121 | The maximum limit of IPsec Policies has reached for the specified SVM. |
| 66257125 | The local_endpoint.address must be specified with local_endpoint.netmask. |
| 66257126 | The remote_endpoint.address must be specified with remote_endpoint.netmask. |
| 66257132 | Invalid value for port field. Value should be in range <1-65535>. |
| 66257133 | A pre-shared key is needed for the PSK authentication method. Use the secret_key option to specify a key. |
| 66257134 | An end-entity certificate is needed for the PKI authentication method. Use the certificate.uuid option to specify an end-entity certificate. |
| 66257137 | A pre-shared key is not needed for the PKI authentication method. |
| 66257139 | Certificate with the specified UUID was not found. |
| 66257140 | Only certificates with a client or server type are supported. |

*/
type IpsecPolicyCreateDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the ipsec policy create default response
func (o *IpsecPolicyCreateDefault) Code() int {
	return o._statusCode
}

func (o *IpsecPolicyCreateDefault) Error() string {
	return fmt.Sprintf("[POST /security/ipsec/policies][%d] ipsec_policy_create default  %+v", o._statusCode, o.Payload)
}
func (o *IpsecPolicyCreateDefault) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *IpsecPolicyCreateDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
