// Code generated by go-swagger; DO NOT EDIT.

package security

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/netapp/trident/storage_drivers/ontap/api/rest/models"
)

// NewSecurityCertificateSignParams creates a new SecurityCertificateSignParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSecurityCertificateSignParams() *SecurityCertificateSignParams {
	return &SecurityCertificateSignParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSecurityCertificateSignParamsWithTimeout creates a new SecurityCertificateSignParams object
// with the ability to set a timeout on a request.
func NewSecurityCertificateSignParamsWithTimeout(timeout time.Duration) *SecurityCertificateSignParams {
	return &SecurityCertificateSignParams{
		timeout: timeout,
	}
}

// NewSecurityCertificateSignParamsWithContext creates a new SecurityCertificateSignParams object
// with the ability to set a context for a request.
func NewSecurityCertificateSignParamsWithContext(ctx context.Context) *SecurityCertificateSignParams {
	return &SecurityCertificateSignParams{
		Context: ctx,
	}
}

// NewSecurityCertificateSignParamsWithHTTPClient creates a new SecurityCertificateSignParams object
// with the ability to set a custom HTTPClient for a request.
func NewSecurityCertificateSignParamsWithHTTPClient(client *http.Client) *SecurityCertificateSignParams {
	return &SecurityCertificateSignParams{
		HTTPClient: client,
	}
}

/*
SecurityCertificateSignParams contains all the parameters to send to the API endpoint

	for the security certificate sign operation.

	Typically these are written to a http.Request.
*/
type SecurityCertificateSignParams struct {

	/* CaUUID.

	   UUID of the existing certificate authority certificate
	*/
	CaUUIDPathParameter string

	/* Info.

	   Certificate sign information specification
	*/
	Info *models.SecurityCertificateSign

	/* ReturnRecords.

	   The default is false.  If set to true, the records are returned.
	*/
	ReturnRecordsQueryParameter *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the security certificate sign params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SecurityCertificateSignParams) WithDefaults() *SecurityCertificateSignParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the security certificate sign params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SecurityCertificateSignParams) SetDefaults() {
	var (
		returnRecordsQueryParameterDefault = bool(false)
	)

	val := SecurityCertificateSignParams{
		ReturnRecordsQueryParameter: &returnRecordsQueryParameterDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the security certificate sign params
func (o *SecurityCertificateSignParams) WithTimeout(timeout time.Duration) *SecurityCertificateSignParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the security certificate sign params
func (o *SecurityCertificateSignParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the security certificate sign params
func (o *SecurityCertificateSignParams) WithContext(ctx context.Context) *SecurityCertificateSignParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the security certificate sign params
func (o *SecurityCertificateSignParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the security certificate sign params
func (o *SecurityCertificateSignParams) WithHTTPClient(client *http.Client) *SecurityCertificateSignParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the security certificate sign params
func (o *SecurityCertificateSignParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCaUUIDPathParameter adds the caUUID to the security certificate sign params
func (o *SecurityCertificateSignParams) WithCaUUIDPathParameter(caUUID string) *SecurityCertificateSignParams {
	o.SetCaUUIDPathParameter(caUUID)
	return o
}

// SetCaUUIDPathParameter adds the caUuid to the security certificate sign params
func (o *SecurityCertificateSignParams) SetCaUUIDPathParameter(caUUID string) {
	o.CaUUIDPathParameter = caUUID
}

// WithInfo adds the info to the security certificate sign params
func (o *SecurityCertificateSignParams) WithInfo(info *models.SecurityCertificateSign) *SecurityCertificateSignParams {
	o.SetInfo(info)
	return o
}

// SetInfo adds the info to the security certificate sign params
func (o *SecurityCertificateSignParams) SetInfo(info *models.SecurityCertificateSign) {
	o.Info = info
}

// WithReturnRecordsQueryParameter adds the returnRecords to the security certificate sign params
func (o *SecurityCertificateSignParams) WithReturnRecordsQueryParameter(returnRecords *bool) *SecurityCertificateSignParams {
	o.SetReturnRecordsQueryParameter(returnRecords)
	return o
}

// SetReturnRecordsQueryParameter adds the returnRecords to the security certificate sign params
func (o *SecurityCertificateSignParams) SetReturnRecordsQueryParameter(returnRecords *bool) {
	o.ReturnRecordsQueryParameter = returnRecords
}

// WriteToRequest writes these params to a swagger request
func (o *SecurityCertificateSignParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param ca.uuid
	if err := r.SetPathParam("ca.uuid", o.CaUUIDPathParameter); err != nil {
		return err
	}
	if o.Info != nil {
		if err := r.SetBodyParam(o.Info); err != nil {
			return err
		}
	}

	if o.ReturnRecordsQueryParameter != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecordsQueryParameter != nil {
			qrReturnRecords = *o.ReturnRecordsQueryParameter
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
