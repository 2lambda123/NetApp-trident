// Code generated by go-swagger; DO NOT EDIT.

package security

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/netapp/trident/v21/storage_drivers/ontap/api/rest/models"
)

// SecurityCertificateDeleteReader is a Reader for the SecurityCertificateDelete structure.
type SecurityCertificateDeleteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SecurityCertificateDeleteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSecurityCertificateDeleteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewSecurityCertificateDeleteDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewSecurityCertificateDeleteOK creates a SecurityCertificateDeleteOK with default headers values
func NewSecurityCertificateDeleteOK() *SecurityCertificateDeleteOK {
	return &SecurityCertificateDeleteOK{}
}

/* SecurityCertificateDeleteOK describes a response with status code 200, with default header values.

OK
*/
type SecurityCertificateDeleteOK struct {
}

func (o *SecurityCertificateDeleteOK) Error() string {
	return fmt.Sprintf("[DELETE /security/certificates/{uuid}][%d] securityCertificateDeleteOK ", 200)
}

func (o *SecurityCertificateDeleteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSecurityCertificateDeleteDefault creates a SecurityCertificateDeleteDefault with default headers values
func NewSecurityCertificateDeleteDefault(code int) *SecurityCertificateDeleteDefault {
	return &SecurityCertificateDeleteDefault{
		_statusCode: code,
	}
}

/* SecurityCertificateDeleteDefault describes a response with status code -1, with default header values.

 ONTAP Error Response Codes
| Error Code | Description |
| ---------- | ----------- |
| 3735644    | Cannot delete server-chain certificate. Reason: There is a corresponding server certificate for it. |
| 3735679    | Cannot delete pre-installed server-ca certificates through REST. Use CLI or ZAPI. |
| 3735650    | Deleting this client-ca certificate directly is not supported. Delete the corresponding root-ca certificate using type `root_ca` to delete the root, client, and server certificates. |
| 3735627    | Deleting this server-ca certificate directly is not supported. Delete the corresponding root-ca certificate using type `root_ca` to delete the root, client, and server certificates. |
| 3735589    | Cannot delete certificate. |
| 3735590    | Cannot delete certificate. Failed to remove SSL configuration for the certificate. |
| 3735683    | Cannot remove this certificate while external key manager is configured. |

*/
type SecurityCertificateDeleteDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the security certificate delete default response
func (o *SecurityCertificateDeleteDefault) Code() int {
	return o._statusCode
}

func (o *SecurityCertificateDeleteDefault) Error() string {
	return fmt.Sprintf("[DELETE /security/certificates/{uuid}][%d] security_certificate_delete default  %+v", o._statusCode, o.Payload)
}
func (o *SecurityCertificateDeleteDefault) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *SecurityCertificateDeleteDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
