// Code generated by go-swagger; DO NOT EDIT.

package application

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewConsistencyGroupSnapshotCollectionGetParams creates a new ConsistencyGroupSnapshotCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewConsistencyGroupSnapshotCollectionGetParams() *ConsistencyGroupSnapshotCollectionGetParams {
	return &ConsistencyGroupSnapshotCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewConsistencyGroupSnapshotCollectionGetParamsWithTimeout creates a new ConsistencyGroupSnapshotCollectionGetParams object
// with the ability to set a timeout on a request.
func NewConsistencyGroupSnapshotCollectionGetParamsWithTimeout(timeout time.Duration) *ConsistencyGroupSnapshotCollectionGetParams {
	return &ConsistencyGroupSnapshotCollectionGetParams{
		timeout: timeout,
	}
}

// NewConsistencyGroupSnapshotCollectionGetParamsWithContext creates a new ConsistencyGroupSnapshotCollectionGetParams object
// with the ability to set a context for a request.
func NewConsistencyGroupSnapshotCollectionGetParamsWithContext(ctx context.Context) *ConsistencyGroupSnapshotCollectionGetParams {
	return &ConsistencyGroupSnapshotCollectionGetParams{
		Context: ctx,
	}
}

// NewConsistencyGroupSnapshotCollectionGetParamsWithHTTPClient creates a new ConsistencyGroupSnapshotCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewConsistencyGroupSnapshotCollectionGetParamsWithHTTPClient(client *http.Client) *ConsistencyGroupSnapshotCollectionGetParams {
	return &ConsistencyGroupSnapshotCollectionGetParams{
		HTTPClient: client,
	}
}

/* ConsistencyGroupSnapshotCollectionGetParams contains all the parameters to send to the API endpoint
   for the consistency group snapshot collection get operation.

   Typically these are written to a http.Request.
*/
type ConsistencyGroupSnapshotCollectionGetParams struct {

	/* Comment.

	   Filter by comment
	*/
	CommentQueryParameter *string

	/* ConsistencyGroupName.

	   Filter by consistency_group.name
	*/
	ConsistencyGroupNameQueryParameter *string

	/* ConsistencyGroupUUID.

	   The unique identifier of the consistency group to retrieve.

	*/
	ConsistencyGroupUUIDPathParameter string

	/* ConsistencyType.

	   Filter by consistency_type
	*/
	ConsistencyTypeQueryParameter *string

	/* CreateTime.

	   Filter by create_time
	*/
	CreateTimeQueryParameter *string

	/* Fields.

	   Specify the fields to return.
	*/
	FieldsQueryParameter []string

	/* IsPartial.

	   Filter by is_partial
	*/
	IsPartialQueryParameter *bool

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecordsQueryParameter *int64

	/* MissingVolumesName.

	   Filter by missing_volumes.name
	*/
	MissingVolumesNameQueryParameter *string

	/* MissingVolumesUUID.

	   Filter by missing_volumes.uuid
	*/
	MissingVolumesUUIDQueryParameter *string

	/* Name.

	   Filter by name
	*/
	NameQueryParameter *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderByQueryParameter []string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecordsQueryParameter *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeoutQueryParameter *int64

	/* SnapmirrorLabel.

	   Filter by snapmirror_label
	*/
	SnapmirrorLabelQueryParameter *string

	/* SvmName.

	   Filter by svm.name
	*/
	SVMNameQueryParameter *string

	/* SvmUUID.

	   Filter by svm.uuid
	*/
	SVMUUIDQueryParameter *string

	/* UUID.

	   Filter by uuid
	*/
	UUIDQueryParameter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the consistency group snapshot collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ConsistencyGroupSnapshotCollectionGetParams) WithDefaults() *ConsistencyGroupSnapshotCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the consistency group snapshot collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ConsistencyGroupSnapshotCollectionGetParams) SetDefaults() {
	var (
		returnRecordsQueryParameterDefault = bool(true)

		returnTimeoutQueryParameterDefault = int64(15)
	)

	val := ConsistencyGroupSnapshotCollectionGetParams{
		ReturnRecordsQueryParameter: &returnRecordsQueryParameterDefault,
		ReturnTimeoutQueryParameter: &returnTimeoutQueryParameterDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the consistency group snapshot collection get params
func (o *ConsistencyGroupSnapshotCollectionGetParams) WithTimeout(timeout time.Duration) *ConsistencyGroupSnapshotCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the consistency group snapshot collection get params
func (o *ConsistencyGroupSnapshotCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the consistency group snapshot collection get params
func (o *ConsistencyGroupSnapshotCollectionGetParams) WithContext(ctx context.Context) *ConsistencyGroupSnapshotCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the consistency group snapshot collection get params
func (o *ConsistencyGroupSnapshotCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the consistency group snapshot collection get params
func (o *ConsistencyGroupSnapshotCollectionGetParams) WithHTTPClient(client *http.Client) *ConsistencyGroupSnapshotCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the consistency group snapshot collection get params
func (o *ConsistencyGroupSnapshotCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCommentQueryParameter adds the comment to the consistency group snapshot collection get params
func (o *ConsistencyGroupSnapshotCollectionGetParams) WithCommentQueryParameter(comment *string) *ConsistencyGroupSnapshotCollectionGetParams {
	o.SetCommentQueryParameter(comment)
	return o
}

// SetCommentQueryParameter adds the comment to the consistency group snapshot collection get params
func (o *ConsistencyGroupSnapshotCollectionGetParams) SetCommentQueryParameter(comment *string) {
	o.CommentQueryParameter = comment
}

// WithConsistencyGroupNameQueryParameter adds the consistencyGroupName to the consistency group snapshot collection get params
func (o *ConsistencyGroupSnapshotCollectionGetParams) WithConsistencyGroupNameQueryParameter(consistencyGroupName *string) *ConsistencyGroupSnapshotCollectionGetParams {
	o.SetConsistencyGroupNameQueryParameter(consistencyGroupName)
	return o
}

// SetConsistencyGroupNameQueryParameter adds the consistencyGroupName to the consistency group snapshot collection get params
func (o *ConsistencyGroupSnapshotCollectionGetParams) SetConsistencyGroupNameQueryParameter(consistencyGroupName *string) {
	o.ConsistencyGroupNameQueryParameter = consistencyGroupName
}

// WithConsistencyGroupUUIDPathParameter adds the consistencyGroupUUID to the consistency group snapshot collection get params
func (o *ConsistencyGroupSnapshotCollectionGetParams) WithConsistencyGroupUUIDPathParameter(consistencyGroupUUID string) *ConsistencyGroupSnapshotCollectionGetParams {
	o.SetConsistencyGroupUUIDPathParameter(consistencyGroupUUID)
	return o
}

// SetConsistencyGroupUUIDPathParameter adds the consistencyGroupUuid to the consistency group snapshot collection get params
func (o *ConsistencyGroupSnapshotCollectionGetParams) SetConsistencyGroupUUIDPathParameter(consistencyGroupUUID string) {
	o.ConsistencyGroupUUIDPathParameter = consistencyGroupUUID
}

// WithConsistencyTypeQueryParameter adds the consistencyType to the consistency group snapshot collection get params
func (o *ConsistencyGroupSnapshotCollectionGetParams) WithConsistencyTypeQueryParameter(consistencyType *string) *ConsistencyGroupSnapshotCollectionGetParams {
	o.SetConsistencyTypeQueryParameter(consistencyType)
	return o
}

// SetConsistencyTypeQueryParameter adds the consistencyType to the consistency group snapshot collection get params
func (o *ConsistencyGroupSnapshotCollectionGetParams) SetConsistencyTypeQueryParameter(consistencyType *string) {
	o.ConsistencyTypeQueryParameter = consistencyType
}

// WithCreateTimeQueryParameter adds the createTime to the consistency group snapshot collection get params
func (o *ConsistencyGroupSnapshotCollectionGetParams) WithCreateTimeQueryParameter(createTime *string) *ConsistencyGroupSnapshotCollectionGetParams {
	o.SetCreateTimeQueryParameter(createTime)
	return o
}

// SetCreateTimeQueryParameter adds the createTime to the consistency group snapshot collection get params
func (o *ConsistencyGroupSnapshotCollectionGetParams) SetCreateTimeQueryParameter(createTime *string) {
	o.CreateTimeQueryParameter = createTime
}

// WithFieldsQueryParameter adds the fields to the consistency group snapshot collection get params
func (o *ConsistencyGroupSnapshotCollectionGetParams) WithFieldsQueryParameter(fields []string) *ConsistencyGroupSnapshotCollectionGetParams {
	o.SetFieldsQueryParameter(fields)
	return o
}

// SetFieldsQueryParameter adds the fields to the consistency group snapshot collection get params
func (o *ConsistencyGroupSnapshotCollectionGetParams) SetFieldsQueryParameter(fields []string) {
	o.FieldsQueryParameter = fields
}

// WithIsPartialQueryParameter adds the isPartial to the consistency group snapshot collection get params
func (o *ConsistencyGroupSnapshotCollectionGetParams) WithIsPartialQueryParameter(isPartial *bool) *ConsistencyGroupSnapshotCollectionGetParams {
	o.SetIsPartialQueryParameter(isPartial)
	return o
}

// SetIsPartialQueryParameter adds the isPartial to the consistency group snapshot collection get params
func (o *ConsistencyGroupSnapshotCollectionGetParams) SetIsPartialQueryParameter(isPartial *bool) {
	o.IsPartialQueryParameter = isPartial
}

// WithMaxRecordsQueryParameter adds the maxRecords to the consistency group snapshot collection get params
func (o *ConsistencyGroupSnapshotCollectionGetParams) WithMaxRecordsQueryParameter(maxRecords *int64) *ConsistencyGroupSnapshotCollectionGetParams {
	o.SetMaxRecordsQueryParameter(maxRecords)
	return o
}

// SetMaxRecordsQueryParameter adds the maxRecords to the consistency group snapshot collection get params
func (o *ConsistencyGroupSnapshotCollectionGetParams) SetMaxRecordsQueryParameter(maxRecords *int64) {
	o.MaxRecordsQueryParameter = maxRecords
}

// WithMissingVolumesNameQueryParameter adds the missingVolumesName to the consistency group snapshot collection get params
func (o *ConsistencyGroupSnapshotCollectionGetParams) WithMissingVolumesNameQueryParameter(missingVolumesName *string) *ConsistencyGroupSnapshotCollectionGetParams {
	o.SetMissingVolumesNameQueryParameter(missingVolumesName)
	return o
}

// SetMissingVolumesNameQueryParameter adds the missingVolumesName to the consistency group snapshot collection get params
func (o *ConsistencyGroupSnapshotCollectionGetParams) SetMissingVolumesNameQueryParameter(missingVolumesName *string) {
	o.MissingVolumesNameQueryParameter = missingVolumesName
}

// WithMissingVolumesUUIDQueryParameter adds the missingVolumesUUID to the consistency group snapshot collection get params
func (o *ConsistencyGroupSnapshotCollectionGetParams) WithMissingVolumesUUIDQueryParameter(missingVolumesUUID *string) *ConsistencyGroupSnapshotCollectionGetParams {
	o.SetMissingVolumesUUIDQueryParameter(missingVolumesUUID)
	return o
}

// SetMissingVolumesUUIDQueryParameter adds the missingVolumesUuid to the consistency group snapshot collection get params
func (o *ConsistencyGroupSnapshotCollectionGetParams) SetMissingVolumesUUIDQueryParameter(missingVolumesUUID *string) {
	o.MissingVolumesUUIDQueryParameter = missingVolumesUUID
}

// WithNameQueryParameter adds the name to the consistency group snapshot collection get params
func (o *ConsistencyGroupSnapshotCollectionGetParams) WithNameQueryParameter(name *string) *ConsistencyGroupSnapshotCollectionGetParams {
	o.SetNameQueryParameter(name)
	return o
}

// SetNameQueryParameter adds the name to the consistency group snapshot collection get params
func (o *ConsistencyGroupSnapshotCollectionGetParams) SetNameQueryParameter(name *string) {
	o.NameQueryParameter = name
}

// WithOrderByQueryParameter adds the orderBy to the consistency group snapshot collection get params
func (o *ConsistencyGroupSnapshotCollectionGetParams) WithOrderByQueryParameter(orderBy []string) *ConsistencyGroupSnapshotCollectionGetParams {
	o.SetOrderByQueryParameter(orderBy)
	return o
}

// SetOrderByQueryParameter adds the orderBy to the consistency group snapshot collection get params
func (o *ConsistencyGroupSnapshotCollectionGetParams) SetOrderByQueryParameter(orderBy []string) {
	o.OrderByQueryParameter = orderBy
}

// WithReturnRecordsQueryParameter adds the returnRecords to the consistency group snapshot collection get params
func (o *ConsistencyGroupSnapshotCollectionGetParams) WithReturnRecordsQueryParameter(returnRecords *bool) *ConsistencyGroupSnapshotCollectionGetParams {
	o.SetReturnRecordsQueryParameter(returnRecords)
	return o
}

// SetReturnRecordsQueryParameter adds the returnRecords to the consistency group snapshot collection get params
func (o *ConsistencyGroupSnapshotCollectionGetParams) SetReturnRecordsQueryParameter(returnRecords *bool) {
	o.ReturnRecordsQueryParameter = returnRecords
}

// WithReturnTimeoutQueryParameter adds the returnTimeout to the consistency group snapshot collection get params
func (o *ConsistencyGroupSnapshotCollectionGetParams) WithReturnTimeoutQueryParameter(returnTimeout *int64) *ConsistencyGroupSnapshotCollectionGetParams {
	o.SetReturnTimeoutQueryParameter(returnTimeout)
	return o
}

// SetReturnTimeoutQueryParameter adds the returnTimeout to the consistency group snapshot collection get params
func (o *ConsistencyGroupSnapshotCollectionGetParams) SetReturnTimeoutQueryParameter(returnTimeout *int64) {
	o.ReturnTimeoutQueryParameter = returnTimeout
}

// WithSnapmirrorLabelQueryParameter adds the snapmirrorLabel to the consistency group snapshot collection get params
func (o *ConsistencyGroupSnapshotCollectionGetParams) WithSnapmirrorLabelQueryParameter(snapmirrorLabel *string) *ConsistencyGroupSnapshotCollectionGetParams {
	o.SetSnapmirrorLabelQueryParameter(snapmirrorLabel)
	return o
}

// SetSnapmirrorLabelQueryParameter adds the snapmirrorLabel to the consistency group snapshot collection get params
func (o *ConsistencyGroupSnapshotCollectionGetParams) SetSnapmirrorLabelQueryParameter(snapmirrorLabel *string) {
	o.SnapmirrorLabelQueryParameter = snapmirrorLabel
}

// WithSVMNameQueryParameter adds the svmName to the consistency group snapshot collection get params
func (o *ConsistencyGroupSnapshotCollectionGetParams) WithSVMNameQueryParameter(svmName *string) *ConsistencyGroupSnapshotCollectionGetParams {
	o.SetSVMNameQueryParameter(svmName)
	return o
}

// SetSVMNameQueryParameter adds the svmName to the consistency group snapshot collection get params
func (o *ConsistencyGroupSnapshotCollectionGetParams) SetSVMNameQueryParameter(svmName *string) {
	o.SVMNameQueryParameter = svmName
}

// WithSVMUUIDQueryParameter adds the svmUUID to the consistency group snapshot collection get params
func (o *ConsistencyGroupSnapshotCollectionGetParams) WithSVMUUIDQueryParameter(svmUUID *string) *ConsistencyGroupSnapshotCollectionGetParams {
	o.SetSVMUUIDQueryParameter(svmUUID)
	return o
}

// SetSVMUUIDQueryParameter adds the svmUuid to the consistency group snapshot collection get params
func (o *ConsistencyGroupSnapshotCollectionGetParams) SetSVMUUIDQueryParameter(svmUUID *string) {
	o.SVMUUIDQueryParameter = svmUUID
}

// WithUUIDQueryParameter adds the uuid to the consistency group snapshot collection get params
func (o *ConsistencyGroupSnapshotCollectionGetParams) WithUUIDQueryParameter(uuid *string) *ConsistencyGroupSnapshotCollectionGetParams {
	o.SetUUIDQueryParameter(uuid)
	return o
}

// SetUUIDQueryParameter adds the uuid to the consistency group snapshot collection get params
func (o *ConsistencyGroupSnapshotCollectionGetParams) SetUUIDQueryParameter(uuid *string) {
	o.UUIDQueryParameter = uuid
}

// WriteToRequest writes these params to a swagger request
func (o *ConsistencyGroupSnapshotCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CommentQueryParameter != nil {

		// query param comment
		var qrComment string

		if o.CommentQueryParameter != nil {
			qrComment = *o.CommentQueryParameter
		}
		qComment := qrComment
		if qComment != "" {

			if err := r.SetQueryParam("comment", qComment); err != nil {
				return err
			}
		}
	}

	if o.ConsistencyGroupNameQueryParameter != nil {

		// query param consistency_group.name
		var qrConsistencyGroupName string

		if o.ConsistencyGroupNameQueryParameter != nil {
			qrConsistencyGroupName = *o.ConsistencyGroupNameQueryParameter
		}
		qConsistencyGroupName := qrConsistencyGroupName
		if qConsistencyGroupName != "" {

			if err := r.SetQueryParam("consistency_group.name", qConsistencyGroupName); err != nil {
				return err
			}
		}
	}

	// path param consistency_group.uuid
	if err := r.SetPathParam("consistency_group.uuid", o.ConsistencyGroupUUIDPathParameter); err != nil {
		return err
	}

	if o.ConsistencyTypeQueryParameter != nil {

		// query param consistency_type
		var qrConsistencyType string

		if o.ConsistencyTypeQueryParameter != nil {
			qrConsistencyType = *o.ConsistencyTypeQueryParameter
		}
		qConsistencyType := qrConsistencyType
		if qConsistencyType != "" {

			if err := r.SetQueryParam("consistency_type", qConsistencyType); err != nil {
				return err
			}
		}
	}

	if o.CreateTimeQueryParameter != nil {

		// query param create_time
		var qrCreateTime string

		if o.CreateTimeQueryParameter != nil {
			qrCreateTime = *o.CreateTimeQueryParameter
		}
		qCreateTime := qrCreateTime
		if qCreateTime != "" {

			if err := r.SetQueryParam("create_time", qCreateTime); err != nil {
				return err
			}
		}
	}

	if o.FieldsQueryParameter != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.IsPartialQueryParameter != nil {

		// query param is_partial
		var qrIsPartial bool

		if o.IsPartialQueryParameter != nil {
			qrIsPartial = *o.IsPartialQueryParameter
		}
		qIsPartial := swag.FormatBool(qrIsPartial)
		if qIsPartial != "" {

			if err := r.SetQueryParam("is_partial", qIsPartial); err != nil {
				return err
			}
		}
	}

	if o.MaxRecordsQueryParameter != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecordsQueryParameter != nil {
			qrMaxRecords = *o.MaxRecordsQueryParameter
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.MissingVolumesNameQueryParameter != nil {

		// query param missing_volumes.name
		var qrMissingVolumesName string

		if o.MissingVolumesNameQueryParameter != nil {
			qrMissingVolumesName = *o.MissingVolumesNameQueryParameter
		}
		qMissingVolumesName := qrMissingVolumesName
		if qMissingVolumesName != "" {

			if err := r.SetQueryParam("missing_volumes.name", qMissingVolumesName); err != nil {
				return err
			}
		}
	}

	if o.MissingVolumesUUIDQueryParameter != nil {

		// query param missing_volumes.uuid
		var qrMissingVolumesUUID string

		if o.MissingVolumesUUIDQueryParameter != nil {
			qrMissingVolumesUUID = *o.MissingVolumesUUIDQueryParameter
		}
		qMissingVolumesUUID := qrMissingVolumesUUID
		if qMissingVolumesUUID != "" {

			if err := r.SetQueryParam("missing_volumes.uuid", qMissingVolumesUUID); err != nil {
				return err
			}
		}
	}

	if o.NameQueryParameter != nil {

		// query param name
		var qrName string

		if o.NameQueryParameter != nil {
			qrName = *o.NameQueryParameter
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.OrderByQueryParameter != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.ReturnRecordsQueryParameter != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecordsQueryParameter != nil {
			qrReturnRecords = *o.ReturnRecordsQueryParameter
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeoutQueryParameter != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeoutQueryParameter != nil {
			qrReturnTimeout = *o.ReturnTimeoutQueryParameter
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.SnapmirrorLabelQueryParameter != nil {

		// query param snapmirror_label
		var qrSnapmirrorLabel string

		if o.SnapmirrorLabelQueryParameter != nil {
			qrSnapmirrorLabel = *o.SnapmirrorLabelQueryParameter
		}
		qSnapmirrorLabel := qrSnapmirrorLabel
		if qSnapmirrorLabel != "" {

			if err := r.SetQueryParam("snapmirror_label", qSnapmirrorLabel); err != nil {
				return err
			}
		}
	}

	if o.SVMNameQueryParameter != nil {

		// query param svm.name
		var qrSvmName string

		if o.SVMNameQueryParameter != nil {
			qrSvmName = *o.SVMNameQueryParameter
		}
		qSvmName := qrSvmName
		if qSvmName != "" {

			if err := r.SetQueryParam("svm.name", qSvmName); err != nil {
				return err
			}
		}
	}

	if o.SVMUUIDQueryParameter != nil {

		// query param svm.uuid
		var qrSvmUUID string

		if o.SVMUUIDQueryParameter != nil {
			qrSvmUUID = *o.SVMUUIDQueryParameter
		}
		qSvmUUID := qrSvmUUID
		if qSvmUUID != "" {

			if err := r.SetQueryParam("svm.uuid", qSvmUUID); err != nil {
				return err
			}
		}
	}

	if o.UUIDQueryParameter != nil {

		// query param uuid
		var qrUUID string

		if o.UUIDQueryParameter != nil {
			qrUUID = *o.UUIDQueryParameter
		}
		qUUID := qrUUID
		if qUUID != "" {

			if err := r.SetQueryParam("uuid", qUUID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamConsistencyGroupSnapshotCollectionGet binds the parameter fields
func (o *ConsistencyGroupSnapshotCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.FieldsQueryParameter

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamConsistencyGroupSnapshotCollectionGet binds the parameter order_by
func (o *ConsistencyGroupSnapshotCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderByQueryParameter

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
