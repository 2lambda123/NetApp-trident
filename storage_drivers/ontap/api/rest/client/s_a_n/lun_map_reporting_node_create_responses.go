// Code generated by go-swagger; DO NOT EDIT.

package s_a_n

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/netapp/trident/storage_drivers/ontap/api/rest/models"
)

// LunMapReportingNodeCreateReader is a Reader for the LunMapReportingNodeCreate structure.
type LunMapReportingNodeCreateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LunMapReportingNodeCreateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewLunMapReportingNodeCreateCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewLunMapReportingNodeCreateDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewLunMapReportingNodeCreateCreated creates a LunMapReportingNodeCreateCreated with default headers values
func NewLunMapReportingNodeCreateCreated() *LunMapReportingNodeCreateCreated {
	return &LunMapReportingNodeCreateCreated{}
}

/* LunMapReportingNodeCreateCreated describes a response with status code 201, with default header values.

Created
*/
type LunMapReportingNodeCreateCreated struct {
	Payload *models.LunMapReportingNodeResponse
}

func (o *LunMapReportingNodeCreateCreated) Error() string {
	return fmt.Sprintf("[POST /protocols/san/lun-maps/{lun.uuid}/{igroup.uuid}/reporting-nodes][%d] lunMapReportingNodeCreateCreated  %+v", 201, o.Payload)
}
func (o *LunMapReportingNodeCreateCreated) GetPayload() *models.LunMapReportingNodeResponse {
	return o.Payload
}

func (o *LunMapReportingNodeCreateCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LunMapReportingNodeResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLunMapReportingNodeCreateDefault creates a LunMapReportingNodeCreateDefault with default headers values
func NewLunMapReportingNodeCreateDefault(code int) *LunMapReportingNodeCreateDefault {
	return &LunMapReportingNodeCreateDefault{
		_statusCode: code,
	}
}

/* LunMapReportingNodeCreateDefault describes a response with status code -1, with default header values.

 ONTAP Error Response Codes
| Error Code | Description |
| ---------- | ----------- |
| 5374875 | The specified LUN does not exist or is not accessible to the caller. |
| 5374878 | The specified initiator group does not exist, is not accessible to the caller, or is not in the same SVM as the specified LUN. |
| 5374920 | The specified cluster node does not exist. |
| 5374921 | The specified cluster node name and UUID do not refer to the same cluster node. |
| 5374922 | The specified LUN map does not exist. |
| 5374923 | A cluster node `uuid` or `name` must be specified to add a reporting node. |

*/
type LunMapReportingNodeCreateDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the lun map reporting node create default response
func (o *LunMapReportingNodeCreateDefault) Code() int {
	return o._statusCode
}

func (o *LunMapReportingNodeCreateDefault) Error() string {
	return fmt.Sprintf("[POST /protocols/san/lun-maps/{lun.uuid}/{igroup.uuid}/reporting-nodes][%d] lun_map_reporting_node_create default  %+v", o._statusCode, o.Payload)
}
func (o *LunMapReportingNodeCreateDefault) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *LunMapReportingNodeCreateDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
