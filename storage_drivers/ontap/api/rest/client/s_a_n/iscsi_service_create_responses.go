// Code generated by go-swagger; DO NOT EDIT.

package s_a_n

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/netapp/trident/v21/storage_drivers/ontap/api/rest/models"
)

// IscsiServiceCreateReader is a Reader for the IscsiServiceCreate structure.
type IscsiServiceCreateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IscsiServiceCreateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewIscsiServiceCreateCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewIscsiServiceCreateDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewIscsiServiceCreateCreated creates a IscsiServiceCreateCreated with default headers values
func NewIscsiServiceCreateCreated() *IscsiServiceCreateCreated {
	return &IscsiServiceCreateCreated{}
}

/* IscsiServiceCreateCreated describes a response with status code 201, with default header values.

Created
*/
type IscsiServiceCreateCreated struct {
	Payload *models.IscsiServiceResponse
}

func (o *IscsiServiceCreateCreated) Error() string {
	return fmt.Sprintf("[POST /protocols/san/iscsi/services][%d] iscsiServiceCreateCreated  %+v", 201, o.Payload)
}
func (o *IscsiServiceCreateCreated) GetPayload() *models.IscsiServiceResponse {
	return o.Payload
}

func (o *IscsiServiceCreateCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IscsiServiceResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIscsiServiceCreateDefault creates a IscsiServiceCreateDefault with default headers values
func NewIscsiServiceCreateDefault(code int) *IscsiServiceCreateDefault {
	return &IscsiServiceCreateDefault{
		_statusCode: code,
	}
}

/* IscsiServiceCreateDefault describes a response with status code -1, with default header values.

 ONTAP Error Response Codes
| Error Code | Description |
| ---------- | ----------- |
| 1115127 | The cluster lacks a valid iSCSI license. |
| 2621462 | The supplied SVM does not exist. |
| 2621507 | The iSCSI protocol is not allowed for the specified SVM. |
| 2621706 | The specified `svm.uuid` and `svm.name` do not refer to the same SVM. |
| 2621707 | No SVM was specified. Either `svm.name` or `svm.uuid` must be supplied. |
| 5373966 | An iSCSI service cannot be created in an SVM that is configured for NVMe. |
| 5374077 | An iSCSI service already exists for the specified SVM. |
| 5374893 | The SVM is stopped. The SVM must be running to create an iSCSI service. |

*/
type IscsiServiceCreateDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the iscsi service create default response
func (o *IscsiServiceCreateDefault) Code() int {
	return o._statusCode
}

func (o *IscsiServiceCreateDefault) Error() string {
	return fmt.Sprintf("[POST /protocols/san/iscsi/services][%d] iscsi_service_create default  %+v", o._statusCode, o.Payload)
}
func (o *IscsiServiceCreateDefault) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *IscsiServiceCreateDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
