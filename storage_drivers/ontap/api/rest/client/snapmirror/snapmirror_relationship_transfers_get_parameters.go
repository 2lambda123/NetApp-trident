// Code generated by go-swagger; DO NOT EDIT.

package snapmirror

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSnapmirrorRelationshipTransfersGetParams creates a new SnapmirrorRelationshipTransfersGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSnapmirrorRelationshipTransfersGetParams() *SnapmirrorRelationshipTransfersGetParams {
	return &SnapmirrorRelationshipTransfersGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSnapmirrorRelationshipTransfersGetParamsWithTimeout creates a new SnapmirrorRelationshipTransfersGetParams object
// with the ability to set a timeout on a request.
func NewSnapmirrorRelationshipTransfersGetParamsWithTimeout(timeout time.Duration) *SnapmirrorRelationshipTransfersGetParams {
	return &SnapmirrorRelationshipTransfersGetParams{
		timeout: timeout,
	}
}

// NewSnapmirrorRelationshipTransfersGetParamsWithContext creates a new SnapmirrorRelationshipTransfersGetParams object
// with the ability to set a context for a request.
func NewSnapmirrorRelationshipTransfersGetParamsWithContext(ctx context.Context) *SnapmirrorRelationshipTransfersGetParams {
	return &SnapmirrorRelationshipTransfersGetParams{
		Context: ctx,
	}
}

// NewSnapmirrorRelationshipTransfersGetParamsWithHTTPClient creates a new SnapmirrorRelationshipTransfersGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewSnapmirrorRelationshipTransfersGetParamsWithHTTPClient(client *http.Client) *SnapmirrorRelationshipTransfersGetParams {
	return &SnapmirrorRelationshipTransfersGetParams{
		HTTPClient: client,
	}
}

/* SnapmirrorRelationshipTransfersGetParams contains all the parameters to send to the API endpoint
   for the snapmirror relationship transfers get operation.

   Typically these are written to a http.Request.
*/
type SnapmirrorRelationshipTransfersGetParams struct {

	/* BytesTransferred.

	   Filter by bytes_transferred
	*/
	BytesTransferredQueryParameter *int64

	/* CheckpointSize.

	   Filter by checkpoint_size
	*/
	CheckpointSizeQueryParameter *int64

	/* Fields.

	   Specify the fields to return.
	*/
	Fields []string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecords *int64

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderBy []string

	/* RelationshipDestinationClusterName.

	   Filter by relationship.destination.cluster.name
	*/
	RelationshIPDestinationClusterNameQueryParameter *string

	/* RelationshipDestinationClusterUUID.

	   Filter by relationship.destination.cluster.uuid
	*/
	RelationshIPDestinationClusterUUIDQueryParameter *string

	/* RelationshipDestinationPath.

	   Filter by relationship.destination.path
	*/
	RelationshIPDestinationPathQueryParameter *string

	/* RelationshipDestinationSvmName.

	   Filter by relationship.destination.svm.name
	*/
	RelationshIPDestinationSVMNameQueryParameter *string

	/* RelationshipDestinationSvmUUID.

	   Filter by relationship.destination.svm.uuid
	*/
	RelationshIPDestinationSVMUUIDQueryParameter *string

	/* RelationshipRestore.

	   Filter by relationship.restore
	*/
	RelationshIPRestoreQueryParameter *bool

	/* RelationshipUUID.

	   Filter by relationship.uuid
	*/
	RelationshIPUUIDQueryParameter *string

	/* RelationshipUUID.

	   Relationship UUID
	*/
	RelationshIPUUIDPathParameter string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecords *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeout *int64

	/* Snapshot.

	   Filter by snapshot
	*/
	SnapshotQueryParameter *string

	/* State.

	   Filter by state
	*/
	StateQueryParameter *string

	/* UUID.

	   Filter by uuid
	*/
	UUIDQueryParameter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the snapmirror relationship transfers get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SnapmirrorRelationshipTransfersGetParams) WithDefaults() *SnapmirrorRelationshipTransfersGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the snapmirror relationship transfers get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SnapmirrorRelationshipTransfersGetParams) SetDefaults() {
	var (
		returnRecordsDefault = bool(true)

		returnTimeoutDefault = int64(15)
	)

	val := SnapmirrorRelationshipTransfersGetParams{
		ReturnRecords: &returnRecordsDefault,
		ReturnTimeout: &returnTimeoutDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) WithTimeout(timeout time.Duration) *SnapmirrorRelationshipTransfersGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) WithContext(ctx context.Context) *SnapmirrorRelationshipTransfersGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) WithHTTPClient(client *http.Client) *SnapmirrorRelationshipTransfersGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBytesTransferredQueryParameter adds the bytesTransferred to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) WithBytesTransferredQueryParameter(bytesTransferred *int64) *SnapmirrorRelationshipTransfersGetParams {
	o.SetBytesTransferredQueryParameter(bytesTransferred)
	return o
}

// SetBytesTransferredQueryParameter adds the bytesTransferred to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) SetBytesTransferredQueryParameter(bytesTransferred *int64) {
	o.BytesTransferredQueryParameter = bytesTransferred
}

// WithCheckpointSizeQueryParameter adds the checkpointSize to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) WithCheckpointSizeQueryParameter(checkpointSize *int64) *SnapmirrorRelationshipTransfersGetParams {
	o.SetCheckpointSizeQueryParameter(checkpointSize)
	return o
}

// SetCheckpointSizeQueryParameter adds the checkpointSize to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) SetCheckpointSizeQueryParameter(checkpointSize *int64) {
	o.CheckpointSizeQueryParameter = checkpointSize
}

// WithFields adds the fields to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) WithFields(fields []string) *SnapmirrorRelationshipTransfersGetParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithMaxRecords adds the maxRecords to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) WithMaxRecords(maxRecords *int64) *SnapmirrorRelationshipTransfersGetParams {
	o.SetMaxRecords(maxRecords)
	return o
}

// SetMaxRecords adds the maxRecords to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) SetMaxRecords(maxRecords *int64) {
	o.MaxRecords = maxRecords
}

// WithOrderBy adds the orderBy to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) WithOrderBy(orderBy []string) *SnapmirrorRelationshipTransfersGetParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) SetOrderBy(orderBy []string) {
	o.OrderBy = orderBy
}

// WithRelationshIPDestinationClusterNameQueryParameter adds the relationshipDestinationClusterName to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) WithRelationshIPDestinationClusterNameQueryParameter(relationshipDestinationClusterName *string) *SnapmirrorRelationshipTransfersGetParams {
	o.SetRelationshIPDestinationClusterNameQueryParameter(relationshipDestinationClusterName)
	return o
}

// SetRelationshIPDestinationClusterNameQueryParameter adds the relationshipDestinationClusterName to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) SetRelationshIPDestinationClusterNameQueryParameter(relationshipDestinationClusterName *string) {
	o.RelationshIPDestinationClusterNameQueryParameter = relationshipDestinationClusterName
}

// WithRelationshIPDestinationClusterUUIDQueryParameter adds the relationshipDestinationClusterUUID to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) WithRelationshIPDestinationClusterUUIDQueryParameter(relationshipDestinationClusterUUID *string) *SnapmirrorRelationshipTransfersGetParams {
	o.SetRelationshIPDestinationClusterUUIDQueryParameter(relationshipDestinationClusterUUID)
	return o
}

// SetRelationshIPDestinationClusterUUIDQueryParameter adds the relationshipDestinationClusterUuid to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) SetRelationshIPDestinationClusterUUIDQueryParameter(relationshipDestinationClusterUUID *string) {
	o.RelationshIPDestinationClusterUUIDQueryParameter = relationshipDestinationClusterUUID
}

// WithRelationshIPDestinationPathQueryParameter adds the relationshipDestinationPath to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) WithRelationshIPDestinationPathQueryParameter(relationshipDestinationPath *string) *SnapmirrorRelationshipTransfersGetParams {
	o.SetRelationshIPDestinationPathQueryParameter(relationshipDestinationPath)
	return o
}

// SetRelationshIPDestinationPathQueryParameter adds the relationshipDestinationPath to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) SetRelationshIPDestinationPathQueryParameter(relationshipDestinationPath *string) {
	o.RelationshIPDestinationPathQueryParameter = relationshipDestinationPath
}

// WithRelationshIPDestinationSVMNameQueryParameter adds the relationshipDestinationSvmName to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) WithRelationshIPDestinationSVMNameQueryParameter(relationshipDestinationSvmName *string) *SnapmirrorRelationshipTransfersGetParams {
	o.SetRelationshIPDestinationSVMNameQueryParameter(relationshipDestinationSvmName)
	return o
}

// SetRelationshIPDestinationSVMNameQueryParameter adds the relationshipDestinationSvmName to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) SetRelationshIPDestinationSVMNameQueryParameter(relationshipDestinationSvmName *string) {
	o.RelationshIPDestinationSVMNameQueryParameter = relationshipDestinationSvmName
}

// WithRelationshIPDestinationSVMUUIDQueryParameter adds the relationshipDestinationSvmUUID to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) WithRelationshIPDestinationSVMUUIDQueryParameter(relationshipDestinationSvmUUID *string) *SnapmirrorRelationshipTransfersGetParams {
	o.SetRelationshIPDestinationSVMUUIDQueryParameter(relationshipDestinationSvmUUID)
	return o
}

// SetRelationshIPDestinationSVMUUIDQueryParameter adds the relationshipDestinationSvmUuid to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) SetRelationshIPDestinationSVMUUIDQueryParameter(relationshipDestinationSvmUUID *string) {
	o.RelationshIPDestinationSVMUUIDQueryParameter = relationshipDestinationSvmUUID
}

// WithRelationshIPRestoreQueryParameter adds the relationshipRestore to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) WithRelationshIPRestoreQueryParameter(relationshipRestore *bool) *SnapmirrorRelationshipTransfersGetParams {
	o.SetRelationshIPRestoreQueryParameter(relationshipRestore)
	return o
}

// SetRelationshIPRestoreQueryParameter adds the relationshipRestore to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) SetRelationshIPRestoreQueryParameter(relationshipRestore *bool) {
	o.RelationshIPRestoreQueryParameter = relationshipRestore
}

// WithRelationshIPUUIDQueryParameter adds the relationshipUUID to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) WithRelationshIPUUIDQueryParameter(relationshipUUID *string) *SnapmirrorRelationshipTransfersGetParams {
	o.SetRelationshIPUUIDQueryParameter(relationshipUUID)
	return o
}

// SetRelationshIPUUIDQueryParameter adds the relationshipUuid to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) SetRelationshIPUUIDQueryParameter(relationshipUUID *string) {
	o.RelationshIPUUIDQueryParameter = relationshipUUID
}

// WithRelationshIPUUIDPathParameter adds the relationshipUUID to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) WithRelationshIPUUIDPathParameter(relationshipUUID string) *SnapmirrorRelationshipTransfersGetParams {
	o.SetRelationshIPUUIDPathParameter(relationshipUUID)
	return o
}

// SetRelationshIPUUIDPathParameter adds the relationshipUuid to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) SetRelationshIPUUIDPathParameter(relationshipUUID string) {
	o.RelationshIPUUIDPathParameter = relationshipUUID
}

// WithReturnRecords adds the returnRecords to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) WithReturnRecords(returnRecords *bool) *SnapmirrorRelationshipTransfersGetParams {
	o.SetReturnRecords(returnRecords)
	return o
}

// SetReturnRecords adds the returnRecords to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) SetReturnRecords(returnRecords *bool) {
	o.ReturnRecords = returnRecords
}

// WithReturnTimeout adds the returnTimeout to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) WithReturnTimeout(returnTimeout *int64) *SnapmirrorRelationshipTransfersGetParams {
	o.SetReturnTimeout(returnTimeout)
	return o
}

// SetReturnTimeout adds the returnTimeout to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) SetReturnTimeout(returnTimeout *int64) {
	o.ReturnTimeout = returnTimeout
}

// WithSnapshotQueryParameter adds the snapshot to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) WithSnapshotQueryParameter(snapshot *string) *SnapmirrorRelationshipTransfersGetParams {
	o.SetSnapshotQueryParameter(snapshot)
	return o
}

// SetSnapshotQueryParameter adds the snapshot to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) SetSnapshotQueryParameter(snapshot *string) {
	o.SnapshotQueryParameter = snapshot
}

// WithStateQueryParameter adds the state to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) WithStateQueryParameter(state *string) *SnapmirrorRelationshipTransfersGetParams {
	o.SetStateQueryParameter(state)
	return o
}

// SetStateQueryParameter adds the state to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) SetStateQueryParameter(state *string) {
	o.StateQueryParameter = state
}

// WithUUIDQueryParameter adds the uuid to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) WithUUIDQueryParameter(uuid *string) *SnapmirrorRelationshipTransfersGetParams {
	o.SetUUIDQueryParameter(uuid)
	return o
}

// SetUUIDQueryParameter adds the uuid to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) SetUUIDQueryParameter(uuid *string) {
	o.UUIDQueryParameter = uuid
}

// WriteToRequest writes these params to a swagger request
func (o *SnapmirrorRelationshipTransfersGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.BytesTransferredQueryParameter != nil {

		// query param bytes_transferred
		var qrBytesTransferred int64

		if o.BytesTransferredQueryParameter != nil {
			qrBytesTransferred = *o.BytesTransferredQueryParameter
		}
		qBytesTransferred := swag.FormatInt64(qrBytesTransferred)
		if qBytesTransferred != "" {

			if err := r.SetQueryParam("bytes_transferred", qBytesTransferred); err != nil {
				return err
			}
		}
	}

	if o.CheckpointSizeQueryParameter != nil {

		// query param checkpoint_size
		var qrCheckpointSize int64

		if o.CheckpointSizeQueryParameter != nil {
			qrCheckpointSize = *o.CheckpointSizeQueryParameter
		}
		qCheckpointSize := swag.FormatInt64(qrCheckpointSize)
		if qCheckpointSize != "" {

			if err := r.SetQueryParam("checkpoint_size", qCheckpointSize); err != nil {
				return err
			}
		}
	}

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.MaxRecords != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecords != nil {
			qrMaxRecords = *o.MaxRecords
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.OrderBy != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.RelationshIPDestinationClusterNameQueryParameter != nil {

		// query param relationship.destination.cluster.name
		var qrRelationshipDestinationClusterName string

		if o.RelationshIPDestinationClusterNameQueryParameter != nil {
			qrRelationshipDestinationClusterName = *o.RelationshIPDestinationClusterNameQueryParameter
		}
		qRelationshipDestinationClusterName := qrRelationshipDestinationClusterName
		if qRelationshipDestinationClusterName != "" {

			if err := r.SetQueryParam("relationship.destination.cluster.name", qRelationshipDestinationClusterName); err != nil {
				return err
			}
		}
	}

	if o.RelationshIPDestinationClusterUUIDQueryParameter != nil {

		// query param relationship.destination.cluster.uuid
		var qrRelationshipDestinationClusterUUID string

		if o.RelationshIPDestinationClusterUUIDQueryParameter != nil {
			qrRelationshipDestinationClusterUUID = *o.RelationshIPDestinationClusterUUIDQueryParameter
		}
		qRelationshipDestinationClusterUUID := qrRelationshipDestinationClusterUUID
		if qRelationshipDestinationClusterUUID != "" {

			if err := r.SetQueryParam("relationship.destination.cluster.uuid", qRelationshipDestinationClusterUUID); err != nil {
				return err
			}
		}
	}

	if o.RelationshIPDestinationPathQueryParameter != nil {

		// query param relationship.destination.path
		var qrRelationshipDestinationPath string

		if o.RelationshIPDestinationPathQueryParameter != nil {
			qrRelationshipDestinationPath = *o.RelationshIPDestinationPathQueryParameter
		}
		qRelationshipDestinationPath := qrRelationshipDestinationPath
		if qRelationshipDestinationPath != "" {

			if err := r.SetQueryParam("relationship.destination.path", qRelationshipDestinationPath); err != nil {
				return err
			}
		}
	}

	if o.RelationshIPDestinationSVMNameQueryParameter != nil {

		// query param relationship.destination.svm.name
		var qrRelationshipDestinationSvmName string

		if o.RelationshIPDestinationSVMNameQueryParameter != nil {
			qrRelationshipDestinationSvmName = *o.RelationshIPDestinationSVMNameQueryParameter
		}
		qRelationshipDestinationSvmName := qrRelationshipDestinationSvmName
		if qRelationshipDestinationSvmName != "" {

			if err := r.SetQueryParam("relationship.destination.svm.name", qRelationshipDestinationSvmName); err != nil {
				return err
			}
		}
	}

	if o.RelationshIPDestinationSVMUUIDQueryParameter != nil {

		// query param relationship.destination.svm.uuid
		var qrRelationshipDestinationSvmUUID string

		if o.RelationshIPDestinationSVMUUIDQueryParameter != nil {
			qrRelationshipDestinationSvmUUID = *o.RelationshIPDestinationSVMUUIDQueryParameter
		}
		qRelationshipDestinationSvmUUID := qrRelationshipDestinationSvmUUID
		if qRelationshipDestinationSvmUUID != "" {

			if err := r.SetQueryParam("relationship.destination.svm.uuid", qRelationshipDestinationSvmUUID); err != nil {
				return err
			}
		}
	}

	if o.RelationshIPRestoreQueryParameter != nil {

		// query param relationship.restore
		var qrRelationshipRestore bool

		if o.RelationshIPRestoreQueryParameter != nil {
			qrRelationshipRestore = *o.RelationshIPRestoreQueryParameter
		}
		qRelationshipRestore := swag.FormatBool(qrRelationshipRestore)
		if qRelationshipRestore != "" {

			if err := r.SetQueryParam("relationship.restore", qRelationshipRestore); err != nil {
				return err
			}
		}
	}

	if o.RelationshIPUUIDQueryParameter != nil {

		// query param relationship.uuid
		var qrRelationshipUUID string

		if o.RelationshIPUUIDQueryParameter != nil {
			qrRelationshipUUID = *o.RelationshIPUUIDQueryParameter
		}
		qRelationshipUUID := qrRelationshipUUID
		if qRelationshipUUID != "" {

			if err := r.SetQueryParam("relationship.uuid", qRelationshipUUID); err != nil {
				return err
			}
		}
	}

	// path param relationship.uuid
	if err := r.SetPathParam("relationship.uuid", o.RelationshIPUUIDPathParameter); err != nil {
		return err
	}

	if o.ReturnRecords != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecords != nil {
			qrReturnRecords = *o.ReturnRecords
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeout != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeout != nil {
			qrReturnTimeout = *o.ReturnTimeout
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.SnapshotQueryParameter != nil {

		// query param snapshot
		var qrSnapshot string

		if o.SnapshotQueryParameter != nil {
			qrSnapshot = *o.SnapshotQueryParameter
		}
		qSnapshot := qrSnapshot
		if qSnapshot != "" {

			if err := r.SetQueryParam("snapshot", qSnapshot); err != nil {
				return err
			}
		}
	}

	if o.StateQueryParameter != nil {

		// query param state
		var qrState string

		if o.StateQueryParameter != nil {
			qrState = *o.StateQueryParameter
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if o.UUIDQueryParameter != nil {

		// query param uuid
		var qrUUID string

		if o.UUIDQueryParameter != nil {
			qrUUID = *o.UUIDQueryParameter
		}
		qUUID := qrUUID
		if qUUID != "" {

			if err := r.SetQueryParam("uuid", qUUID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamSnapmirrorRelationshipTransfersGet binds the parameter fields
func (o *SnapmirrorRelationshipTransfersGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamSnapmirrorRelationshipTransfersGet binds the parameter order_by
func (o *SnapmirrorRelationshipTransfersGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderBy

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
