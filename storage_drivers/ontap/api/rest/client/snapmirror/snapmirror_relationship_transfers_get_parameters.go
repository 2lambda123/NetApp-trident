// Code generated by go-swagger; DO NOT EDIT.

package snapmirror

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSnapmirrorRelationshipTransfersGetParams creates a new SnapmirrorRelationshipTransfersGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSnapmirrorRelationshipTransfersGetParams() *SnapmirrorRelationshipTransfersGetParams {
	return &SnapmirrorRelationshipTransfersGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSnapmirrorRelationshipTransfersGetParamsWithTimeout creates a new SnapmirrorRelationshipTransfersGetParams object
// with the ability to set a timeout on a request.
func NewSnapmirrorRelationshipTransfersGetParamsWithTimeout(timeout time.Duration) *SnapmirrorRelationshipTransfersGetParams {
	return &SnapmirrorRelationshipTransfersGetParams{
		timeout: timeout,
	}
}

// NewSnapmirrorRelationshipTransfersGetParamsWithContext creates a new SnapmirrorRelationshipTransfersGetParams object
// with the ability to set a context for a request.
func NewSnapmirrorRelationshipTransfersGetParamsWithContext(ctx context.Context) *SnapmirrorRelationshipTransfersGetParams {
	return &SnapmirrorRelationshipTransfersGetParams{
		Context: ctx,
	}
}

// NewSnapmirrorRelationshipTransfersGetParamsWithHTTPClient creates a new SnapmirrorRelationshipTransfersGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewSnapmirrorRelationshipTransfersGetParamsWithHTTPClient(client *http.Client) *SnapmirrorRelationshipTransfersGetParams {
	return &SnapmirrorRelationshipTransfersGetParams{
		HTTPClient: client,
	}
}

/* SnapmirrorRelationshipTransfersGetParams contains all the parameters to send to the API endpoint
   for the snapmirror relationship transfers get operation.

   Typically these are written to a http.Request.
*/
type SnapmirrorRelationshipTransfersGetParams struct {

	/* ArchiveRetrievalPriority.

	   Filter by archive_retrieval_priority
	*/
	ArchiveRetrievalPriorityQueryParameter *string

	/* BytesTransferred.

	   Filter by bytes_transferred
	*/
	BytesTransferredQueryParameter *int64

	/* CheckpointSize.

	   Filter by checkpoint_size
	*/
	CheckpointSizeQueryParameter *int64

	/* EndTime.

	   Filter by end_time
	*/
	EndTimeQueryParameter *string

	/* ErrorInfoCode.

	   Filter by error_info.code
	*/
	ErrorInfoCodeQueryParameter *int64

	/* ErrorInfoMessage.

	   Filter by error_info.message
	*/
	ErrorInfoMessageQueryParameter *string

	/* Fields.

	   Specify the fields to return.
	*/
	FieldsQueryParameter []string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecordsQueryParameter *int64

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderByQueryParameter []string

	/* RelationshipDestinationClusterName.

	   Filter by relationship.destination.cluster.name
	*/
	RelationshIPDestinationClusterNameQueryParameter *string

	/* RelationshipDestinationClusterUUID.

	   Filter by relationship.destination.cluster.uuid
	*/
	RelationshIPDestinationClusterUUIDQueryParameter *string

	/* RelationshipDestinationConsistencyGroupVolumesName.

	   Filter by relationship.destination.consistency_group_volumes.name
	*/
	RelationshIPDestinationConsistencyGroupVolumesNameQueryParameter *string

	/* RelationshipDestinationPath.

	   Filter by relationship.destination.path
	*/
	RelationshIPDestinationPathQueryParameter *string

	/* RelationshipDestinationSvmName.

	   Filter by relationship.destination.svm.name
	*/
	RelationshIPDestinationSVMNameQueryParameter *string

	/* RelationshipDestinationSvmUUID.

	   Filter by relationship.destination.svm.uuid
	*/
	RelationshIPDestinationSVMUUIDQueryParameter *string

	/* RelationshipDestinationUUID.

	   Filter by relationship.destination.uuid
	*/
	RelationshIPDestinationUUIDQueryParameter *string

	/* RelationshipRestore.

	   Filter by relationship.restore
	*/
	RelationshIPRestoreQueryParameter *bool

	/* RelationshipUUID.

	   Relationship UUID
	*/
	RelationshIPUUIDPathParameter string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecordsQueryParameter *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeoutQueryParameter *int64

	/* Snapshot.

	   Filter by snapshot
	*/
	SnapshotQueryParameter *string

	/* State.

	   Filter by state
	*/
	StateQueryParameter *string

	/* Throttle.

	   Filter by throttle
	*/
	ThrottleQueryParameter *int64

	/* TotalDuration.

	   Filter by total_duration
	*/
	TotalDurationQueryParameter *string

	/* UUID.

	   Filter by uuid
	*/
	UUIDQueryParameter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the snapmirror relationship transfers get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SnapmirrorRelationshipTransfersGetParams) WithDefaults() *SnapmirrorRelationshipTransfersGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the snapmirror relationship transfers get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SnapmirrorRelationshipTransfersGetParams) SetDefaults() {
	var (
		returnRecordsQueryParameterDefault = bool(true)

		returnTimeoutQueryParameterDefault = int64(15)
	)

	val := SnapmirrorRelationshipTransfersGetParams{
		ReturnRecordsQueryParameter: &returnRecordsQueryParameterDefault,
		ReturnTimeoutQueryParameter: &returnTimeoutQueryParameterDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) WithTimeout(timeout time.Duration) *SnapmirrorRelationshipTransfersGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) WithContext(ctx context.Context) *SnapmirrorRelationshipTransfersGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) WithHTTPClient(client *http.Client) *SnapmirrorRelationshipTransfersGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithArchiveRetrievalPriorityQueryParameter adds the archiveRetrievalPriority to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) WithArchiveRetrievalPriorityQueryParameter(archiveRetrievalPriority *string) *SnapmirrorRelationshipTransfersGetParams {
	o.SetArchiveRetrievalPriorityQueryParameter(archiveRetrievalPriority)
	return o
}

// SetArchiveRetrievalPriorityQueryParameter adds the archiveRetrievalPriority to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) SetArchiveRetrievalPriorityQueryParameter(archiveRetrievalPriority *string) {
	o.ArchiveRetrievalPriorityQueryParameter = archiveRetrievalPriority
}

// WithBytesTransferredQueryParameter adds the bytesTransferred to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) WithBytesTransferredQueryParameter(bytesTransferred *int64) *SnapmirrorRelationshipTransfersGetParams {
	o.SetBytesTransferredQueryParameter(bytesTransferred)
	return o
}

// SetBytesTransferredQueryParameter adds the bytesTransferred to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) SetBytesTransferredQueryParameter(bytesTransferred *int64) {
	o.BytesTransferredQueryParameter = bytesTransferred
}

// WithCheckpointSizeQueryParameter adds the checkpointSize to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) WithCheckpointSizeQueryParameter(checkpointSize *int64) *SnapmirrorRelationshipTransfersGetParams {
	o.SetCheckpointSizeQueryParameter(checkpointSize)
	return o
}

// SetCheckpointSizeQueryParameter adds the checkpointSize to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) SetCheckpointSizeQueryParameter(checkpointSize *int64) {
	o.CheckpointSizeQueryParameter = checkpointSize
}

// WithEndTimeQueryParameter adds the endTime to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) WithEndTimeQueryParameter(endTime *string) *SnapmirrorRelationshipTransfersGetParams {
	o.SetEndTimeQueryParameter(endTime)
	return o
}

// SetEndTimeQueryParameter adds the endTime to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) SetEndTimeQueryParameter(endTime *string) {
	o.EndTimeQueryParameter = endTime
}

// WithErrorInfoCodeQueryParameter adds the errorInfoCode to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) WithErrorInfoCodeQueryParameter(errorInfoCode *int64) *SnapmirrorRelationshipTransfersGetParams {
	o.SetErrorInfoCodeQueryParameter(errorInfoCode)
	return o
}

// SetErrorInfoCodeQueryParameter adds the errorInfoCode to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) SetErrorInfoCodeQueryParameter(errorInfoCode *int64) {
	o.ErrorInfoCodeQueryParameter = errorInfoCode
}

// WithErrorInfoMessageQueryParameter adds the errorInfoMessage to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) WithErrorInfoMessageQueryParameter(errorInfoMessage *string) *SnapmirrorRelationshipTransfersGetParams {
	o.SetErrorInfoMessageQueryParameter(errorInfoMessage)
	return o
}

// SetErrorInfoMessageQueryParameter adds the errorInfoMessage to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) SetErrorInfoMessageQueryParameter(errorInfoMessage *string) {
	o.ErrorInfoMessageQueryParameter = errorInfoMessage
}

// WithFieldsQueryParameter adds the fields to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) WithFieldsQueryParameter(fields []string) *SnapmirrorRelationshipTransfersGetParams {
	o.SetFieldsQueryParameter(fields)
	return o
}

// SetFieldsQueryParameter adds the fields to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) SetFieldsQueryParameter(fields []string) {
	o.FieldsQueryParameter = fields
}

// WithMaxRecordsQueryParameter adds the maxRecords to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) WithMaxRecordsQueryParameter(maxRecords *int64) *SnapmirrorRelationshipTransfersGetParams {
	o.SetMaxRecordsQueryParameter(maxRecords)
	return o
}

// SetMaxRecordsQueryParameter adds the maxRecords to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) SetMaxRecordsQueryParameter(maxRecords *int64) {
	o.MaxRecordsQueryParameter = maxRecords
}

// WithOrderByQueryParameter adds the orderBy to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) WithOrderByQueryParameter(orderBy []string) *SnapmirrorRelationshipTransfersGetParams {
	o.SetOrderByQueryParameter(orderBy)
	return o
}

// SetOrderByQueryParameter adds the orderBy to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) SetOrderByQueryParameter(orderBy []string) {
	o.OrderByQueryParameter = orderBy
}

// WithRelationshIPDestinationClusterNameQueryParameter adds the relationshipDestinationClusterName to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) WithRelationshIPDestinationClusterNameQueryParameter(relationshipDestinationClusterName *string) *SnapmirrorRelationshipTransfersGetParams {
	o.SetRelationshIPDestinationClusterNameQueryParameter(relationshipDestinationClusterName)
	return o
}

// SetRelationshIPDestinationClusterNameQueryParameter adds the relationshipDestinationClusterName to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) SetRelationshIPDestinationClusterNameQueryParameter(relationshipDestinationClusterName *string) {
	o.RelationshIPDestinationClusterNameQueryParameter = relationshipDestinationClusterName
}

// WithRelationshIPDestinationClusterUUIDQueryParameter adds the relationshipDestinationClusterUUID to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) WithRelationshIPDestinationClusterUUIDQueryParameter(relationshipDestinationClusterUUID *string) *SnapmirrorRelationshipTransfersGetParams {
	o.SetRelationshIPDestinationClusterUUIDQueryParameter(relationshipDestinationClusterUUID)
	return o
}

// SetRelationshIPDestinationClusterUUIDQueryParameter adds the relationshipDestinationClusterUuid to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) SetRelationshIPDestinationClusterUUIDQueryParameter(relationshipDestinationClusterUUID *string) {
	o.RelationshIPDestinationClusterUUIDQueryParameter = relationshipDestinationClusterUUID
}

// WithRelationshIPDestinationConsistencyGroupVolumesNameQueryParameter adds the relationshipDestinationConsistencyGroupVolumesName to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) WithRelationshIPDestinationConsistencyGroupVolumesNameQueryParameter(relationshipDestinationConsistencyGroupVolumesName *string) *SnapmirrorRelationshipTransfersGetParams {
	o.SetRelationshIPDestinationConsistencyGroupVolumesNameQueryParameter(relationshipDestinationConsistencyGroupVolumesName)
	return o
}

// SetRelationshIPDestinationConsistencyGroupVolumesNameQueryParameter adds the relationshipDestinationConsistencyGroupVolumesName to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) SetRelationshIPDestinationConsistencyGroupVolumesNameQueryParameter(relationshipDestinationConsistencyGroupVolumesName *string) {
	o.RelationshIPDestinationConsistencyGroupVolumesNameQueryParameter = relationshipDestinationConsistencyGroupVolumesName
}

// WithRelationshIPDestinationPathQueryParameter adds the relationshipDestinationPath to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) WithRelationshIPDestinationPathQueryParameter(relationshipDestinationPath *string) *SnapmirrorRelationshipTransfersGetParams {
	o.SetRelationshIPDestinationPathQueryParameter(relationshipDestinationPath)
	return o
}

// SetRelationshIPDestinationPathQueryParameter adds the relationshipDestinationPath to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) SetRelationshIPDestinationPathQueryParameter(relationshipDestinationPath *string) {
	o.RelationshIPDestinationPathQueryParameter = relationshipDestinationPath
}

// WithRelationshIPDestinationSVMNameQueryParameter adds the relationshipDestinationSvmName to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) WithRelationshIPDestinationSVMNameQueryParameter(relationshipDestinationSvmName *string) *SnapmirrorRelationshipTransfersGetParams {
	o.SetRelationshIPDestinationSVMNameQueryParameter(relationshipDestinationSvmName)
	return o
}

// SetRelationshIPDestinationSVMNameQueryParameter adds the relationshipDestinationSvmName to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) SetRelationshIPDestinationSVMNameQueryParameter(relationshipDestinationSvmName *string) {
	o.RelationshIPDestinationSVMNameQueryParameter = relationshipDestinationSvmName
}

// WithRelationshIPDestinationSVMUUIDQueryParameter adds the relationshipDestinationSvmUUID to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) WithRelationshIPDestinationSVMUUIDQueryParameter(relationshipDestinationSvmUUID *string) *SnapmirrorRelationshipTransfersGetParams {
	o.SetRelationshIPDestinationSVMUUIDQueryParameter(relationshipDestinationSvmUUID)
	return o
}

// SetRelationshIPDestinationSVMUUIDQueryParameter adds the relationshipDestinationSvmUuid to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) SetRelationshIPDestinationSVMUUIDQueryParameter(relationshipDestinationSvmUUID *string) {
	o.RelationshIPDestinationSVMUUIDQueryParameter = relationshipDestinationSvmUUID
}

// WithRelationshIPDestinationUUIDQueryParameter adds the relationshipDestinationUUID to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) WithRelationshIPDestinationUUIDQueryParameter(relationshipDestinationUUID *string) *SnapmirrorRelationshipTransfersGetParams {
	o.SetRelationshIPDestinationUUIDQueryParameter(relationshipDestinationUUID)
	return o
}

// SetRelationshIPDestinationUUIDQueryParameter adds the relationshipDestinationUuid to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) SetRelationshIPDestinationUUIDQueryParameter(relationshipDestinationUUID *string) {
	o.RelationshIPDestinationUUIDQueryParameter = relationshipDestinationUUID
}

// WithRelationshIPRestoreQueryParameter adds the relationshipRestore to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) WithRelationshIPRestoreQueryParameter(relationshipRestore *bool) *SnapmirrorRelationshipTransfersGetParams {
	o.SetRelationshIPRestoreQueryParameter(relationshipRestore)
	return o
}

// SetRelationshIPRestoreQueryParameter adds the relationshipRestore to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) SetRelationshIPRestoreQueryParameter(relationshipRestore *bool) {
	o.RelationshIPRestoreQueryParameter = relationshipRestore
}

// WithRelationshIPUUIDPathParameter adds the relationshipUUID to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) WithRelationshIPUUIDPathParameter(relationshipUUID string) *SnapmirrorRelationshipTransfersGetParams {
	o.SetRelationshIPUUIDPathParameter(relationshipUUID)
	return o
}

// SetRelationshIPUUIDPathParameter adds the relationshipUuid to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) SetRelationshIPUUIDPathParameter(relationshipUUID string) {
	o.RelationshIPUUIDPathParameter = relationshipUUID
}

// WithReturnRecordsQueryParameter adds the returnRecords to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) WithReturnRecordsQueryParameter(returnRecords *bool) *SnapmirrorRelationshipTransfersGetParams {
	o.SetReturnRecordsQueryParameter(returnRecords)
	return o
}

// SetReturnRecordsQueryParameter adds the returnRecords to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) SetReturnRecordsQueryParameter(returnRecords *bool) {
	o.ReturnRecordsQueryParameter = returnRecords
}

// WithReturnTimeoutQueryParameter adds the returnTimeout to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) WithReturnTimeoutQueryParameter(returnTimeout *int64) *SnapmirrorRelationshipTransfersGetParams {
	o.SetReturnTimeoutQueryParameter(returnTimeout)
	return o
}

// SetReturnTimeoutQueryParameter adds the returnTimeout to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) SetReturnTimeoutQueryParameter(returnTimeout *int64) {
	o.ReturnTimeoutQueryParameter = returnTimeout
}

// WithSnapshotQueryParameter adds the snapshot to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) WithSnapshotQueryParameter(snapshot *string) *SnapmirrorRelationshipTransfersGetParams {
	o.SetSnapshotQueryParameter(snapshot)
	return o
}

// SetSnapshotQueryParameter adds the snapshot to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) SetSnapshotQueryParameter(snapshot *string) {
	o.SnapshotQueryParameter = snapshot
}

// WithStateQueryParameter adds the state to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) WithStateQueryParameter(state *string) *SnapmirrorRelationshipTransfersGetParams {
	o.SetStateQueryParameter(state)
	return o
}

// SetStateQueryParameter adds the state to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) SetStateQueryParameter(state *string) {
	o.StateQueryParameter = state
}

// WithThrottleQueryParameter adds the throttle to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) WithThrottleQueryParameter(throttle *int64) *SnapmirrorRelationshipTransfersGetParams {
	o.SetThrottleQueryParameter(throttle)
	return o
}

// SetThrottleQueryParameter adds the throttle to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) SetThrottleQueryParameter(throttle *int64) {
	o.ThrottleQueryParameter = throttle
}

// WithTotalDurationQueryParameter adds the totalDuration to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) WithTotalDurationQueryParameter(totalDuration *string) *SnapmirrorRelationshipTransfersGetParams {
	o.SetTotalDurationQueryParameter(totalDuration)
	return o
}

// SetTotalDurationQueryParameter adds the totalDuration to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) SetTotalDurationQueryParameter(totalDuration *string) {
	o.TotalDurationQueryParameter = totalDuration
}

// WithUUIDQueryParameter adds the uuid to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) WithUUIDQueryParameter(uuid *string) *SnapmirrorRelationshipTransfersGetParams {
	o.SetUUIDQueryParameter(uuid)
	return o
}

// SetUUIDQueryParameter adds the uuid to the snapmirror relationship transfers get params
func (o *SnapmirrorRelationshipTransfersGetParams) SetUUIDQueryParameter(uuid *string) {
	o.UUIDQueryParameter = uuid
}

// WriteToRequest writes these params to a swagger request
func (o *SnapmirrorRelationshipTransfersGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ArchiveRetrievalPriorityQueryParameter != nil {

		// query param archive_retrieval_priority
		var qrArchiveRetrievalPriority string

		if o.ArchiveRetrievalPriorityQueryParameter != nil {
			qrArchiveRetrievalPriority = *o.ArchiveRetrievalPriorityQueryParameter
		}
		qArchiveRetrievalPriority := qrArchiveRetrievalPriority
		if qArchiveRetrievalPriority != "" {

			if err := r.SetQueryParam("archive_retrieval_priority", qArchiveRetrievalPriority); err != nil {
				return err
			}
		}
	}

	if o.BytesTransferredQueryParameter != nil {

		// query param bytes_transferred
		var qrBytesTransferred int64

		if o.BytesTransferredQueryParameter != nil {
			qrBytesTransferred = *o.BytesTransferredQueryParameter
		}
		qBytesTransferred := swag.FormatInt64(qrBytesTransferred)
		if qBytesTransferred != "" {

			if err := r.SetQueryParam("bytes_transferred", qBytesTransferred); err != nil {
				return err
			}
		}
	}

	if o.CheckpointSizeQueryParameter != nil {

		// query param checkpoint_size
		var qrCheckpointSize int64

		if o.CheckpointSizeQueryParameter != nil {
			qrCheckpointSize = *o.CheckpointSizeQueryParameter
		}
		qCheckpointSize := swag.FormatInt64(qrCheckpointSize)
		if qCheckpointSize != "" {

			if err := r.SetQueryParam("checkpoint_size", qCheckpointSize); err != nil {
				return err
			}
		}
	}

	if o.EndTimeQueryParameter != nil {

		// query param end_time
		var qrEndTime string

		if o.EndTimeQueryParameter != nil {
			qrEndTime = *o.EndTimeQueryParameter
		}
		qEndTime := qrEndTime
		if qEndTime != "" {

			if err := r.SetQueryParam("end_time", qEndTime); err != nil {
				return err
			}
		}
	}

	if o.ErrorInfoCodeQueryParameter != nil {

		// query param error_info.code
		var qrErrorInfoCode int64

		if o.ErrorInfoCodeQueryParameter != nil {
			qrErrorInfoCode = *o.ErrorInfoCodeQueryParameter
		}
		qErrorInfoCode := swag.FormatInt64(qrErrorInfoCode)
		if qErrorInfoCode != "" {

			if err := r.SetQueryParam("error_info.code", qErrorInfoCode); err != nil {
				return err
			}
		}
	}

	if o.ErrorInfoMessageQueryParameter != nil {

		// query param error_info.message
		var qrErrorInfoMessage string

		if o.ErrorInfoMessageQueryParameter != nil {
			qrErrorInfoMessage = *o.ErrorInfoMessageQueryParameter
		}
		qErrorInfoMessage := qrErrorInfoMessage
		if qErrorInfoMessage != "" {

			if err := r.SetQueryParam("error_info.message", qErrorInfoMessage); err != nil {
				return err
			}
		}
	}

	if o.FieldsQueryParameter != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.MaxRecordsQueryParameter != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecordsQueryParameter != nil {
			qrMaxRecords = *o.MaxRecordsQueryParameter
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.OrderByQueryParameter != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.RelationshIPDestinationClusterNameQueryParameter != nil {

		// query param relationship.destination.cluster.name
		var qrRelationshipDestinationClusterName string

		if o.RelationshIPDestinationClusterNameQueryParameter != nil {
			qrRelationshipDestinationClusterName = *o.RelationshIPDestinationClusterNameQueryParameter
		}
		qRelationshipDestinationClusterName := qrRelationshipDestinationClusterName
		if qRelationshipDestinationClusterName != "" {

			if err := r.SetQueryParam("relationship.destination.cluster.name", qRelationshipDestinationClusterName); err != nil {
				return err
			}
		}
	}

	if o.RelationshIPDestinationClusterUUIDQueryParameter != nil {

		// query param relationship.destination.cluster.uuid
		var qrRelationshipDestinationClusterUUID string

		if o.RelationshIPDestinationClusterUUIDQueryParameter != nil {
			qrRelationshipDestinationClusterUUID = *o.RelationshIPDestinationClusterUUIDQueryParameter
		}
		qRelationshipDestinationClusterUUID := qrRelationshipDestinationClusterUUID
		if qRelationshipDestinationClusterUUID != "" {

			if err := r.SetQueryParam("relationship.destination.cluster.uuid", qRelationshipDestinationClusterUUID); err != nil {
				return err
			}
		}
	}

	if o.RelationshIPDestinationConsistencyGroupVolumesNameQueryParameter != nil {

		// query param relationship.destination.consistency_group_volumes.name
		var qrRelationshipDestinationConsistencyGroupVolumesName string

		if o.RelationshIPDestinationConsistencyGroupVolumesNameQueryParameter != nil {
			qrRelationshipDestinationConsistencyGroupVolumesName = *o.RelationshIPDestinationConsistencyGroupVolumesNameQueryParameter
		}
		qRelationshipDestinationConsistencyGroupVolumesName := qrRelationshipDestinationConsistencyGroupVolumesName
		if qRelationshipDestinationConsistencyGroupVolumesName != "" {

			if err := r.SetQueryParam("relationship.destination.consistency_group_volumes.name", qRelationshipDestinationConsistencyGroupVolumesName); err != nil {
				return err
			}
		}
	}

	if o.RelationshIPDestinationPathQueryParameter != nil {

		// query param relationship.destination.path
		var qrRelationshipDestinationPath string

		if o.RelationshIPDestinationPathQueryParameter != nil {
			qrRelationshipDestinationPath = *o.RelationshIPDestinationPathQueryParameter
		}
		qRelationshipDestinationPath := qrRelationshipDestinationPath
		if qRelationshipDestinationPath != "" {

			if err := r.SetQueryParam("relationship.destination.path", qRelationshipDestinationPath); err != nil {
				return err
			}
		}
	}

	if o.RelationshIPDestinationSVMNameQueryParameter != nil {

		// query param relationship.destination.svm.name
		var qrRelationshipDestinationSvmName string

		if o.RelationshIPDestinationSVMNameQueryParameter != nil {
			qrRelationshipDestinationSvmName = *o.RelationshIPDestinationSVMNameQueryParameter
		}
		qRelationshipDestinationSvmName := qrRelationshipDestinationSvmName
		if qRelationshipDestinationSvmName != "" {

			if err := r.SetQueryParam("relationship.destination.svm.name", qRelationshipDestinationSvmName); err != nil {
				return err
			}
		}
	}

	if o.RelationshIPDestinationSVMUUIDQueryParameter != nil {

		// query param relationship.destination.svm.uuid
		var qrRelationshipDestinationSvmUUID string

		if o.RelationshIPDestinationSVMUUIDQueryParameter != nil {
			qrRelationshipDestinationSvmUUID = *o.RelationshIPDestinationSVMUUIDQueryParameter
		}
		qRelationshipDestinationSvmUUID := qrRelationshipDestinationSvmUUID
		if qRelationshipDestinationSvmUUID != "" {

			if err := r.SetQueryParam("relationship.destination.svm.uuid", qRelationshipDestinationSvmUUID); err != nil {
				return err
			}
		}
	}

	if o.RelationshIPDestinationUUIDQueryParameter != nil {

		// query param relationship.destination.uuid
		var qrRelationshipDestinationUUID string

		if o.RelationshIPDestinationUUIDQueryParameter != nil {
			qrRelationshipDestinationUUID = *o.RelationshIPDestinationUUIDQueryParameter
		}
		qRelationshipDestinationUUID := qrRelationshipDestinationUUID
		if qRelationshipDestinationUUID != "" {

			if err := r.SetQueryParam("relationship.destination.uuid", qRelationshipDestinationUUID); err != nil {
				return err
			}
		}
	}

	if o.RelationshIPRestoreQueryParameter != nil {

		// query param relationship.restore
		var qrRelationshipRestore bool

		if o.RelationshIPRestoreQueryParameter != nil {
			qrRelationshipRestore = *o.RelationshIPRestoreQueryParameter
		}
		qRelationshipRestore := swag.FormatBool(qrRelationshipRestore)
		if qRelationshipRestore != "" {

			if err := r.SetQueryParam("relationship.restore", qRelationshipRestore); err != nil {
				return err
			}
		}
	}

	// path param relationship.uuid
	if err := r.SetPathParam("relationship.uuid", o.RelationshIPUUIDPathParameter); err != nil {
		return err
	}

	if o.ReturnRecordsQueryParameter != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecordsQueryParameter != nil {
			qrReturnRecords = *o.ReturnRecordsQueryParameter
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeoutQueryParameter != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeoutQueryParameter != nil {
			qrReturnTimeout = *o.ReturnTimeoutQueryParameter
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.SnapshotQueryParameter != nil {

		// query param snapshot
		var qrSnapshot string

		if o.SnapshotQueryParameter != nil {
			qrSnapshot = *o.SnapshotQueryParameter
		}
		qSnapshot := qrSnapshot
		if qSnapshot != "" {

			if err := r.SetQueryParam("snapshot", qSnapshot); err != nil {
				return err
			}
		}
	}

	if o.StateQueryParameter != nil {

		// query param state
		var qrState string

		if o.StateQueryParameter != nil {
			qrState = *o.StateQueryParameter
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if o.ThrottleQueryParameter != nil {

		// query param throttle
		var qrThrottle int64

		if o.ThrottleQueryParameter != nil {
			qrThrottle = *o.ThrottleQueryParameter
		}
		qThrottle := swag.FormatInt64(qrThrottle)
		if qThrottle != "" {

			if err := r.SetQueryParam("throttle", qThrottle); err != nil {
				return err
			}
		}
	}

	if o.TotalDurationQueryParameter != nil {

		// query param total_duration
		var qrTotalDuration string

		if o.TotalDurationQueryParameter != nil {
			qrTotalDuration = *o.TotalDurationQueryParameter
		}
		qTotalDuration := qrTotalDuration
		if qTotalDuration != "" {

			if err := r.SetQueryParam("total_duration", qTotalDuration); err != nil {
				return err
			}
		}
	}

	if o.UUIDQueryParameter != nil {

		// query param uuid
		var qrUUID string

		if o.UUIDQueryParameter != nil {
			qrUUID = *o.UUIDQueryParameter
		}
		qUUID := qrUUID
		if qUUID != "" {

			if err := r.SetQueryParam("uuid", qUUID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamSnapmirrorRelationshipTransfersGet binds the parameter fields
func (o *SnapmirrorRelationshipTransfersGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.FieldsQueryParameter

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamSnapmirrorRelationshipTransfersGet binds the parameter order_by
func (o *SnapmirrorRelationshipTransfersGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderByQueryParameter

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
