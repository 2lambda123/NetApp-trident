// Code generated by go-swagger; DO NOT EDIT.

package snapmirror

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSnapmirrorRelationshipDeleteParams creates a new SnapmirrorRelationshipDeleteParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSnapmirrorRelationshipDeleteParams() *SnapmirrorRelationshipDeleteParams {
	return &SnapmirrorRelationshipDeleteParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSnapmirrorRelationshipDeleteParamsWithTimeout creates a new SnapmirrorRelationshipDeleteParams object
// with the ability to set a timeout on a request.
func NewSnapmirrorRelationshipDeleteParamsWithTimeout(timeout time.Duration) *SnapmirrorRelationshipDeleteParams {
	return &SnapmirrorRelationshipDeleteParams{
		timeout: timeout,
	}
}

// NewSnapmirrorRelationshipDeleteParamsWithContext creates a new SnapmirrorRelationshipDeleteParams object
// with the ability to set a context for a request.
func NewSnapmirrorRelationshipDeleteParamsWithContext(ctx context.Context) *SnapmirrorRelationshipDeleteParams {
	return &SnapmirrorRelationshipDeleteParams{
		Context: ctx,
	}
}

// NewSnapmirrorRelationshipDeleteParamsWithHTTPClient creates a new SnapmirrorRelationshipDeleteParams object
// with the ability to set a custom HTTPClient for a request.
func NewSnapmirrorRelationshipDeleteParamsWithHTTPClient(client *http.Client) *SnapmirrorRelationshipDeleteParams {
	return &SnapmirrorRelationshipDeleteParams{
		HTTPClient: client,
	}
}

/* SnapmirrorRelationshipDeleteParams contains all the parameters to send to the API endpoint
   for the snapmirror relationship delete operation.

   Typically these are written to a http.Request.
*/
type SnapmirrorRelationshipDeleteParams struct {

	/* DestinationOnly.

	   Deletes a relationship on the destination only. This parameter is applicable only when the call is executed on the cluster that contains the destination endpoint.
	*/
	DestinationOnlyQueryParameter *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning. When doing a POST, PATCH, or DELETE operation on a single record, the default is 0 seconds.  This means that if an asynchronous operation is started, the server immediately returns HTTP code 202 (Accepted) along with a link to the job.  If a non-zero value is specified for POST, PATCH, or DELETE operations, ONTAP waits that length of time to see if the job completes so it can return something other than 202.
	*/
	ReturnTimeoutQueryParameter *int64

	/* SourceInfoOnly.

	   Deletes relationship information on the source only. This parameter is applicable only when the call is executed on the cluster that contains the source endpoint.
	*/
	SourceInfoOnlyQueryParameter *bool

	/* SourceOnly.

	   Deletes a relationship on the source only. This parameter is applicable only when the call is executed on the cluster that contains the source endpoint.
	*/
	SourceOnlyQueryParameter *bool

	/* UUID.

	   Relationship UUID
	*/
	UUIDPathParameter string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the snapmirror relationship delete params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SnapmirrorRelationshipDeleteParams) WithDefaults() *SnapmirrorRelationshipDeleteParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the snapmirror relationship delete params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SnapmirrorRelationshipDeleteParams) SetDefaults() {
	var (
		returnTimeoutQueryParameterDefault = int64(0)
	)

	val := SnapmirrorRelationshipDeleteParams{
		ReturnTimeoutQueryParameter: &returnTimeoutQueryParameterDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the snapmirror relationship delete params
func (o *SnapmirrorRelationshipDeleteParams) WithTimeout(timeout time.Duration) *SnapmirrorRelationshipDeleteParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the snapmirror relationship delete params
func (o *SnapmirrorRelationshipDeleteParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the snapmirror relationship delete params
func (o *SnapmirrorRelationshipDeleteParams) WithContext(ctx context.Context) *SnapmirrorRelationshipDeleteParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the snapmirror relationship delete params
func (o *SnapmirrorRelationshipDeleteParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the snapmirror relationship delete params
func (o *SnapmirrorRelationshipDeleteParams) WithHTTPClient(client *http.Client) *SnapmirrorRelationshipDeleteParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the snapmirror relationship delete params
func (o *SnapmirrorRelationshipDeleteParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDestinationOnlyQueryParameter adds the destinationOnly to the snapmirror relationship delete params
func (o *SnapmirrorRelationshipDeleteParams) WithDestinationOnlyQueryParameter(destinationOnly *bool) *SnapmirrorRelationshipDeleteParams {
	o.SetDestinationOnlyQueryParameter(destinationOnly)
	return o
}

// SetDestinationOnlyQueryParameter adds the destinationOnly to the snapmirror relationship delete params
func (o *SnapmirrorRelationshipDeleteParams) SetDestinationOnlyQueryParameter(destinationOnly *bool) {
	o.DestinationOnlyQueryParameter = destinationOnly
}

// WithReturnTimeoutQueryParameter adds the returnTimeout to the snapmirror relationship delete params
func (o *SnapmirrorRelationshipDeleteParams) WithReturnTimeoutQueryParameter(returnTimeout *int64) *SnapmirrorRelationshipDeleteParams {
	o.SetReturnTimeoutQueryParameter(returnTimeout)
	return o
}

// SetReturnTimeoutQueryParameter adds the returnTimeout to the snapmirror relationship delete params
func (o *SnapmirrorRelationshipDeleteParams) SetReturnTimeoutQueryParameter(returnTimeout *int64) {
	o.ReturnTimeoutQueryParameter = returnTimeout
}

// WithSourceInfoOnlyQueryParameter adds the sourceInfoOnly to the snapmirror relationship delete params
func (o *SnapmirrorRelationshipDeleteParams) WithSourceInfoOnlyQueryParameter(sourceInfoOnly *bool) *SnapmirrorRelationshipDeleteParams {
	o.SetSourceInfoOnlyQueryParameter(sourceInfoOnly)
	return o
}

// SetSourceInfoOnlyQueryParameter adds the sourceInfoOnly to the snapmirror relationship delete params
func (o *SnapmirrorRelationshipDeleteParams) SetSourceInfoOnlyQueryParameter(sourceInfoOnly *bool) {
	o.SourceInfoOnlyQueryParameter = sourceInfoOnly
}

// WithSourceOnlyQueryParameter adds the sourceOnly to the snapmirror relationship delete params
func (o *SnapmirrorRelationshipDeleteParams) WithSourceOnlyQueryParameter(sourceOnly *bool) *SnapmirrorRelationshipDeleteParams {
	o.SetSourceOnlyQueryParameter(sourceOnly)
	return o
}

// SetSourceOnlyQueryParameter adds the sourceOnly to the snapmirror relationship delete params
func (o *SnapmirrorRelationshipDeleteParams) SetSourceOnlyQueryParameter(sourceOnly *bool) {
	o.SourceOnlyQueryParameter = sourceOnly
}

// WithUUIDPathParameter adds the uuid to the snapmirror relationship delete params
func (o *SnapmirrorRelationshipDeleteParams) WithUUIDPathParameter(uuid string) *SnapmirrorRelationshipDeleteParams {
	o.SetUUIDPathParameter(uuid)
	return o
}

// SetUUIDPathParameter adds the uuid to the snapmirror relationship delete params
func (o *SnapmirrorRelationshipDeleteParams) SetUUIDPathParameter(uuid string) {
	o.UUIDPathParameter = uuid
}

// WriteToRequest writes these params to a swagger request
func (o *SnapmirrorRelationshipDeleteParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DestinationOnlyQueryParameter != nil {

		// query param destination_only
		var qrDestinationOnly bool

		if o.DestinationOnlyQueryParameter != nil {
			qrDestinationOnly = *o.DestinationOnlyQueryParameter
		}
		qDestinationOnly := swag.FormatBool(qrDestinationOnly)
		if qDestinationOnly != "" {

			if err := r.SetQueryParam("destination_only", qDestinationOnly); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeoutQueryParameter != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeoutQueryParameter != nil {
			qrReturnTimeout = *o.ReturnTimeoutQueryParameter
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.SourceInfoOnlyQueryParameter != nil {

		// query param source_info_only
		var qrSourceInfoOnly bool

		if o.SourceInfoOnlyQueryParameter != nil {
			qrSourceInfoOnly = *o.SourceInfoOnlyQueryParameter
		}
		qSourceInfoOnly := swag.FormatBool(qrSourceInfoOnly)
		if qSourceInfoOnly != "" {

			if err := r.SetQueryParam("source_info_only", qSourceInfoOnly); err != nil {
				return err
			}
		}
	}

	if o.SourceOnlyQueryParameter != nil {

		// query param source_only
		var qrSourceOnly bool

		if o.SourceOnlyQueryParameter != nil {
			qrSourceOnly = *o.SourceOnlyQueryParameter
		}
		qSourceOnly := swag.FormatBool(qrSourceOnly)
		if qSourceOnly != "" {

			if err := r.SetQueryParam("source_only", qSourceOnly); err != nil {
				return err
			}
		}
	}

	// path param uuid
	if err := r.SetPathParam("uuid", o.UUIDPathParameter); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
