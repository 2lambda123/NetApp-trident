// Code generated by go-swagger; DO NOT EDIT.

package snapmirror

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSnapmirrorRelationshipsGetParams creates a new SnapmirrorRelationshipsGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSnapmirrorRelationshipsGetParams() *SnapmirrorRelationshipsGetParams {
	return &SnapmirrorRelationshipsGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSnapmirrorRelationshipsGetParamsWithTimeout creates a new SnapmirrorRelationshipsGetParams object
// with the ability to set a timeout on a request.
func NewSnapmirrorRelationshipsGetParamsWithTimeout(timeout time.Duration) *SnapmirrorRelationshipsGetParams {
	return &SnapmirrorRelationshipsGetParams{
		timeout: timeout,
	}
}

// NewSnapmirrorRelationshipsGetParamsWithContext creates a new SnapmirrorRelationshipsGetParams object
// with the ability to set a context for a request.
func NewSnapmirrorRelationshipsGetParamsWithContext(ctx context.Context) *SnapmirrorRelationshipsGetParams {
	return &SnapmirrorRelationshipsGetParams{
		Context: ctx,
	}
}

// NewSnapmirrorRelationshipsGetParamsWithHTTPClient creates a new SnapmirrorRelationshipsGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewSnapmirrorRelationshipsGetParamsWithHTTPClient(client *http.Client) *SnapmirrorRelationshipsGetParams {
	return &SnapmirrorRelationshipsGetParams{
		HTTPClient: client,
	}
}

/* SnapmirrorRelationshipsGetParams contains all the parameters to send to the API endpoint
   for the snapmirror relationships get operation.

   Typically these are written to a http.Request.
*/
type SnapmirrorRelationshipsGetParams struct {

	/* ConsistencyGroupFailoverErrorArgumentsCode.

	   Filter by consistency_group_failover.error.arguments.code
	*/
	ConsistencyGroupFailoverErrorArgumentsCodeQueryParameter *string

	/* ConsistencyGroupFailoverErrorArgumentsMessage.

	   Filter by consistency_group_failover.error.arguments.message
	*/
	ConsistencyGroupFailoverErrorArgumentsMessageQueryParameter *string

	/* ConsistencyGroupFailoverErrorCode.

	   Filter by consistency_group_failover.error.code
	*/
	ConsistencyGroupFailoverErrorCodeQueryParameter *string

	/* ConsistencyGroupFailoverErrorMessage.

	   Filter by consistency_group_failover.error.message
	*/
	ConsistencyGroupFailoverErrorMessageQueryParameter *string

	/* ConsistencyGroupFailoverErrorTarget.

	   Filter by consistency_group_failover.error.target
	*/
	ConsistencyGroupFailoverErrorTargetQueryParameter *string

	/* ConsistencyGroupFailoverStatusCode.

	   Filter by consistency_group_failover.status.code
	*/
	ConsistencyGroupFailoverStatusCodeQueryParameter *string

	/* ConsistencyGroupFailoverStatusMessage.

	   Filter by consistency_group_failover.status.message
	*/
	ConsistencyGroupFailoverStatusMessageQueryParameter *string

	/* DestinationClusterName.

	   Filter by destination.cluster.name
	*/
	DestinationClusterNameQueryParameter *string

	/* DestinationClusterUUID.

	   Filter by destination.cluster.uuid
	*/
	DestinationClusterUUIDQueryParameter *string

	/* DestinationConsistencyGroupVolumesName.

	   Filter by destination.consistency_group_volumes.name
	*/
	DestinationConsistencyGroupVolumesNameQueryParameter *string

	/* DestinationPath.

	   Filter by destination.path
	*/
	DestinationPathQueryParameter *string

	/* DestinationSvmName.

	   Filter by destination.svm.name
	*/
	DestinationSVMNameQueryParameter *string

	/* DestinationSvmUUID.

	   Filter by destination.svm.uuid
	*/
	DestinationSVMUUIDQueryParameter *string

	/* DestinationUUID.

	   Filter by destination.uuid
	*/
	DestinationUUIDQueryParameter *string

	/* ExportedSnapshot.

	   Filter by exported_snapshot
	*/
	ExportedSnapshotQueryParameter *string

	/* FabriclinkDestinationBucket.

	   Filter by fabriclink.destination_bucket
	*/
	FabriclinkDestinationBucketQueryParameter *string

	/* FabriclinkDestinationRole.

	   Filter by fabriclink.destination_role
	*/
	FabriclinkDestinationRoleQueryParameter *string

	/* FabriclinkPendingWorkTaskCount.

	   Filter by fabriclink.pending_work_task_count
	*/
	FabriclinkPendingWorkTaskCountQueryParameter *int64

	/* FabriclinkPullByteCount.

	   Filter by fabriclink.pull_byte_count
	*/
	FabriclinkPullByteCountQueryParameter *int64

	/* FabriclinkPushByteCount.

	   Filter by fabriclink.push_byte_count
	*/
	FabriclinkPushByteCountQueryParameter *int64

	/* FabriclinkSourceBucket.

	   Filter by fabriclink.source_bucket
	*/
	FabriclinkSourceBucketQueryParameter *string

	/* FabriclinkSourceRole.

	   Filter by fabriclink.source_role
	*/
	FabriclinkSourceRoleQueryParameter *string

	/* FabriclinkStatus.

	   Filter by fabriclink.status
	*/
	FabriclinkStatusQueryParameter *string

	/* FabriclinkTopologyUUID.

	   Filter by fabriclink.topology_uuid
	*/
	FabriclinkTopologyUUIDQueryParameter *string

	/* Fields.

	   Specify the fields to return.
	*/
	FieldsQueryParameter []string

	/* GroupType.

	   Filter by group_type
	*/
	GroupTypeQueryParameter *string

	/* Healthy.

	   Filter by healthy
	*/
	HealthyQueryParameter *bool

	/* IdentityPreservation.

	   Filter by identity_preservation
	*/
	IdentityPreservationQueryParameter *string

	/* LagTime.

	   Filter by lag_time
	*/
	LagTimeQueryParameter *string

	/* LastTransferType.

	   Filter by last_transfer_type
	*/
	LastTransferTypeQueryParameter *string

	/* ListDestinationsOnly.

	   Set to true to show relationships from the source only.
	*/
	ListDestinationsOnlyQueryParameter *bool

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecordsQueryParameter *int64

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderByQueryParameter []string

	/* PolicyName.

	   Filter by policy.name
	*/
	PolicyNameQueryParameter *string

	/* PolicyTransferScheduleName.

	   Filter by policy.transfer_schedule.name
	*/
	PolicyTransferScheduleNameQueryParameter *string

	/* PolicyType.

	   Filter by policy.type
	*/
	PolicyTypeQueryParameter *string

	/* PolicyUUID.

	   Filter by policy.uuid
	*/
	PolicyUUIDQueryParameter *string

	/* Restore.

	   Filter by restore
	*/
	RestoreQueryParameter *bool

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecordsQueryParameter *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeoutQueryParameter *int64

	/* SourceClusterName.

	   Filter by source.cluster.name
	*/
	SourceClusterNameQueryParameter *string

	/* SourceClusterUUID.

	   Filter by source.cluster.uuid
	*/
	SourceClusterUUIDQueryParameter *string

	/* SourceConsistencyGroupVolumesName.

	   Filter by source.consistency_group_volumes.name
	*/
	SourceConsistencyGroupVolumesNameQueryParameter *string

	/* SourcePath.

	   Filter by source.path
	*/
	SourcePathQueryParameter *string

	/* SourceSvmName.

	   Filter by source.svm.name
	*/
	SourceSVMNameQueryParameter *string

	/* SourceSvmUUID.

	   Filter by source.svm.uuid
	*/
	SourceSVMUUIDQueryParameter *string

	/* SourceUUID.

	   Filter by source.uuid
	*/
	SourceUUIDQueryParameter *string

	/* State.

	   Filter by state
	*/
	StateQueryParameter *string

	/* Throttle.

	   Filter by throttle
	*/
	ThrottleQueryParameter *int64

	/* TransferBytesTransferred.

	   Filter by transfer.bytes_transferred
	*/
	TransferBytesTransferredQueryParameter *int64

	/* TransferEndTime.

	   Filter by transfer.end_time
	*/
	TransferEndTimeQueryParameter *string

	/* TransferState.

	   Filter by transfer.state
	*/
	TransferStateQueryParameter *string

	/* TransferTotalDuration.

	   Filter by transfer.total_duration
	*/
	TransferTotalDurationQueryParameter *string

	/* TransferUUID.

	   Filter by transfer.uuid
	*/
	TransferUUIDQueryParameter *string

	/* TransferScheduleName.

	   Filter by transfer_schedule.name
	*/
	TransferScheduleNameQueryParameter *string

	/* TransferScheduleUUID.

	   Filter by transfer_schedule.uuid
	*/
	TransferScheduleUUIDQueryParameter *string

	/* UnhealthyReasonCode.

	   Filter by unhealthy_reason.code
	*/
	UnhealthyReasonCodeQueryParameter *int64

	/* UnhealthyReasonMessage.

	   Filter by unhealthy_reason.message
	*/
	UnhealthyReasonMessageQueryParameter *string

	/* UnhealthyReasonParameters.

	   Filter by unhealthy_reason.parameters
	*/
	UnhealthyReasonParametersQueryParameter *string

	/* UUID.

	   Filter by uuid
	*/
	UUIDQueryParameter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the snapmirror relationships get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SnapmirrorRelationshipsGetParams) WithDefaults() *SnapmirrorRelationshipsGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the snapmirror relationships get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SnapmirrorRelationshipsGetParams) SetDefaults() {
	var (
		returnRecordsQueryParameterDefault = bool(true)

		returnTimeoutQueryParameterDefault = int64(15)
	)

	val := SnapmirrorRelationshipsGetParams{
		ReturnRecordsQueryParameter: &returnRecordsQueryParameterDefault,
		ReturnTimeoutQueryParameter: &returnTimeoutQueryParameterDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithTimeout(timeout time.Duration) *SnapmirrorRelationshipsGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithContext(ctx context.Context) *SnapmirrorRelationshipsGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithHTTPClient(client *http.Client) *SnapmirrorRelationshipsGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConsistencyGroupFailoverErrorArgumentsCodeQueryParameter adds the consistencyGroupFailoverErrorArgumentsCode to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithConsistencyGroupFailoverErrorArgumentsCodeQueryParameter(consistencyGroupFailoverErrorArgumentsCode *string) *SnapmirrorRelationshipsGetParams {
	o.SetConsistencyGroupFailoverErrorArgumentsCodeQueryParameter(consistencyGroupFailoverErrorArgumentsCode)
	return o
}

// SetConsistencyGroupFailoverErrorArgumentsCodeQueryParameter adds the consistencyGroupFailoverErrorArgumentsCode to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetConsistencyGroupFailoverErrorArgumentsCodeQueryParameter(consistencyGroupFailoverErrorArgumentsCode *string) {
	o.ConsistencyGroupFailoverErrorArgumentsCodeQueryParameter = consistencyGroupFailoverErrorArgumentsCode
}

// WithConsistencyGroupFailoverErrorArgumentsMessageQueryParameter adds the consistencyGroupFailoverErrorArgumentsMessage to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithConsistencyGroupFailoverErrorArgumentsMessageQueryParameter(consistencyGroupFailoverErrorArgumentsMessage *string) *SnapmirrorRelationshipsGetParams {
	o.SetConsistencyGroupFailoverErrorArgumentsMessageQueryParameter(consistencyGroupFailoverErrorArgumentsMessage)
	return o
}

// SetConsistencyGroupFailoverErrorArgumentsMessageQueryParameter adds the consistencyGroupFailoverErrorArgumentsMessage to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetConsistencyGroupFailoverErrorArgumentsMessageQueryParameter(consistencyGroupFailoverErrorArgumentsMessage *string) {
	o.ConsistencyGroupFailoverErrorArgumentsMessageQueryParameter = consistencyGroupFailoverErrorArgumentsMessage
}

// WithConsistencyGroupFailoverErrorCodeQueryParameter adds the consistencyGroupFailoverErrorCode to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithConsistencyGroupFailoverErrorCodeQueryParameter(consistencyGroupFailoverErrorCode *string) *SnapmirrorRelationshipsGetParams {
	o.SetConsistencyGroupFailoverErrorCodeQueryParameter(consistencyGroupFailoverErrorCode)
	return o
}

// SetConsistencyGroupFailoverErrorCodeQueryParameter adds the consistencyGroupFailoverErrorCode to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetConsistencyGroupFailoverErrorCodeQueryParameter(consistencyGroupFailoverErrorCode *string) {
	o.ConsistencyGroupFailoverErrorCodeQueryParameter = consistencyGroupFailoverErrorCode
}

// WithConsistencyGroupFailoverErrorMessageQueryParameter adds the consistencyGroupFailoverErrorMessage to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithConsistencyGroupFailoverErrorMessageQueryParameter(consistencyGroupFailoverErrorMessage *string) *SnapmirrorRelationshipsGetParams {
	o.SetConsistencyGroupFailoverErrorMessageQueryParameter(consistencyGroupFailoverErrorMessage)
	return o
}

// SetConsistencyGroupFailoverErrorMessageQueryParameter adds the consistencyGroupFailoverErrorMessage to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetConsistencyGroupFailoverErrorMessageQueryParameter(consistencyGroupFailoverErrorMessage *string) {
	o.ConsistencyGroupFailoverErrorMessageQueryParameter = consistencyGroupFailoverErrorMessage
}

// WithConsistencyGroupFailoverErrorTargetQueryParameter adds the consistencyGroupFailoverErrorTarget to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithConsistencyGroupFailoverErrorTargetQueryParameter(consistencyGroupFailoverErrorTarget *string) *SnapmirrorRelationshipsGetParams {
	o.SetConsistencyGroupFailoverErrorTargetQueryParameter(consistencyGroupFailoverErrorTarget)
	return o
}

// SetConsistencyGroupFailoverErrorTargetQueryParameter adds the consistencyGroupFailoverErrorTarget to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetConsistencyGroupFailoverErrorTargetQueryParameter(consistencyGroupFailoverErrorTarget *string) {
	o.ConsistencyGroupFailoverErrorTargetQueryParameter = consistencyGroupFailoverErrorTarget
}

// WithConsistencyGroupFailoverStatusCodeQueryParameter adds the consistencyGroupFailoverStatusCode to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithConsistencyGroupFailoverStatusCodeQueryParameter(consistencyGroupFailoverStatusCode *string) *SnapmirrorRelationshipsGetParams {
	o.SetConsistencyGroupFailoverStatusCodeQueryParameter(consistencyGroupFailoverStatusCode)
	return o
}

// SetConsistencyGroupFailoverStatusCodeQueryParameter adds the consistencyGroupFailoverStatusCode to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetConsistencyGroupFailoverStatusCodeQueryParameter(consistencyGroupFailoverStatusCode *string) {
	o.ConsistencyGroupFailoverStatusCodeQueryParameter = consistencyGroupFailoverStatusCode
}

// WithConsistencyGroupFailoverStatusMessageQueryParameter adds the consistencyGroupFailoverStatusMessage to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithConsistencyGroupFailoverStatusMessageQueryParameter(consistencyGroupFailoverStatusMessage *string) *SnapmirrorRelationshipsGetParams {
	o.SetConsistencyGroupFailoverStatusMessageQueryParameter(consistencyGroupFailoverStatusMessage)
	return o
}

// SetConsistencyGroupFailoverStatusMessageQueryParameter adds the consistencyGroupFailoverStatusMessage to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetConsistencyGroupFailoverStatusMessageQueryParameter(consistencyGroupFailoverStatusMessage *string) {
	o.ConsistencyGroupFailoverStatusMessageQueryParameter = consistencyGroupFailoverStatusMessage
}

// WithDestinationClusterNameQueryParameter adds the destinationClusterName to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithDestinationClusterNameQueryParameter(destinationClusterName *string) *SnapmirrorRelationshipsGetParams {
	o.SetDestinationClusterNameQueryParameter(destinationClusterName)
	return o
}

// SetDestinationClusterNameQueryParameter adds the destinationClusterName to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetDestinationClusterNameQueryParameter(destinationClusterName *string) {
	o.DestinationClusterNameQueryParameter = destinationClusterName
}

// WithDestinationClusterUUIDQueryParameter adds the destinationClusterUUID to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithDestinationClusterUUIDQueryParameter(destinationClusterUUID *string) *SnapmirrorRelationshipsGetParams {
	o.SetDestinationClusterUUIDQueryParameter(destinationClusterUUID)
	return o
}

// SetDestinationClusterUUIDQueryParameter adds the destinationClusterUuid to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetDestinationClusterUUIDQueryParameter(destinationClusterUUID *string) {
	o.DestinationClusterUUIDQueryParameter = destinationClusterUUID
}

// WithDestinationConsistencyGroupVolumesNameQueryParameter adds the destinationConsistencyGroupVolumesName to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithDestinationConsistencyGroupVolumesNameQueryParameter(destinationConsistencyGroupVolumesName *string) *SnapmirrorRelationshipsGetParams {
	o.SetDestinationConsistencyGroupVolumesNameQueryParameter(destinationConsistencyGroupVolumesName)
	return o
}

// SetDestinationConsistencyGroupVolumesNameQueryParameter adds the destinationConsistencyGroupVolumesName to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetDestinationConsistencyGroupVolumesNameQueryParameter(destinationConsistencyGroupVolumesName *string) {
	o.DestinationConsistencyGroupVolumesNameQueryParameter = destinationConsistencyGroupVolumesName
}

// WithDestinationPathQueryParameter adds the destinationPath to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithDestinationPathQueryParameter(destinationPath *string) *SnapmirrorRelationshipsGetParams {
	o.SetDestinationPathQueryParameter(destinationPath)
	return o
}

// SetDestinationPathQueryParameter adds the destinationPath to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetDestinationPathQueryParameter(destinationPath *string) {
	o.DestinationPathQueryParameter = destinationPath
}

// WithDestinationSVMNameQueryParameter adds the destinationSvmName to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithDestinationSVMNameQueryParameter(destinationSvmName *string) *SnapmirrorRelationshipsGetParams {
	o.SetDestinationSVMNameQueryParameter(destinationSvmName)
	return o
}

// SetDestinationSVMNameQueryParameter adds the destinationSvmName to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetDestinationSVMNameQueryParameter(destinationSvmName *string) {
	o.DestinationSVMNameQueryParameter = destinationSvmName
}

// WithDestinationSVMUUIDQueryParameter adds the destinationSvmUUID to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithDestinationSVMUUIDQueryParameter(destinationSvmUUID *string) *SnapmirrorRelationshipsGetParams {
	o.SetDestinationSVMUUIDQueryParameter(destinationSvmUUID)
	return o
}

// SetDestinationSVMUUIDQueryParameter adds the destinationSvmUuid to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetDestinationSVMUUIDQueryParameter(destinationSvmUUID *string) {
	o.DestinationSVMUUIDQueryParameter = destinationSvmUUID
}

// WithDestinationUUIDQueryParameter adds the destinationUUID to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithDestinationUUIDQueryParameter(destinationUUID *string) *SnapmirrorRelationshipsGetParams {
	o.SetDestinationUUIDQueryParameter(destinationUUID)
	return o
}

// SetDestinationUUIDQueryParameter adds the destinationUuid to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetDestinationUUIDQueryParameter(destinationUUID *string) {
	o.DestinationUUIDQueryParameter = destinationUUID
}

// WithExportedSnapshotQueryParameter adds the exportedSnapshot to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithExportedSnapshotQueryParameter(exportedSnapshot *string) *SnapmirrorRelationshipsGetParams {
	o.SetExportedSnapshotQueryParameter(exportedSnapshot)
	return o
}

// SetExportedSnapshotQueryParameter adds the exportedSnapshot to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetExportedSnapshotQueryParameter(exportedSnapshot *string) {
	o.ExportedSnapshotQueryParameter = exportedSnapshot
}

// WithFabriclinkDestinationBucketQueryParameter adds the fabriclinkDestinationBucket to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithFabriclinkDestinationBucketQueryParameter(fabriclinkDestinationBucket *string) *SnapmirrorRelationshipsGetParams {
	o.SetFabriclinkDestinationBucketQueryParameter(fabriclinkDestinationBucket)
	return o
}

// SetFabriclinkDestinationBucketQueryParameter adds the fabriclinkDestinationBucket to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetFabriclinkDestinationBucketQueryParameter(fabriclinkDestinationBucket *string) {
	o.FabriclinkDestinationBucketQueryParameter = fabriclinkDestinationBucket
}

// WithFabriclinkDestinationRoleQueryParameter adds the fabriclinkDestinationRole to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithFabriclinkDestinationRoleQueryParameter(fabriclinkDestinationRole *string) *SnapmirrorRelationshipsGetParams {
	o.SetFabriclinkDestinationRoleQueryParameter(fabriclinkDestinationRole)
	return o
}

// SetFabriclinkDestinationRoleQueryParameter adds the fabriclinkDestinationRole to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetFabriclinkDestinationRoleQueryParameter(fabriclinkDestinationRole *string) {
	o.FabriclinkDestinationRoleQueryParameter = fabriclinkDestinationRole
}

// WithFabriclinkPendingWorkTaskCountQueryParameter adds the fabriclinkPendingWorkTaskCount to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithFabriclinkPendingWorkTaskCountQueryParameter(fabriclinkPendingWorkTaskCount *int64) *SnapmirrorRelationshipsGetParams {
	o.SetFabriclinkPendingWorkTaskCountQueryParameter(fabriclinkPendingWorkTaskCount)
	return o
}

// SetFabriclinkPendingWorkTaskCountQueryParameter adds the fabriclinkPendingWorkTaskCount to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetFabriclinkPendingWorkTaskCountQueryParameter(fabriclinkPendingWorkTaskCount *int64) {
	o.FabriclinkPendingWorkTaskCountQueryParameter = fabriclinkPendingWorkTaskCount
}

// WithFabriclinkPullByteCountQueryParameter adds the fabriclinkPullByteCount to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithFabriclinkPullByteCountQueryParameter(fabriclinkPullByteCount *int64) *SnapmirrorRelationshipsGetParams {
	o.SetFabriclinkPullByteCountQueryParameter(fabriclinkPullByteCount)
	return o
}

// SetFabriclinkPullByteCountQueryParameter adds the fabriclinkPullByteCount to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetFabriclinkPullByteCountQueryParameter(fabriclinkPullByteCount *int64) {
	o.FabriclinkPullByteCountQueryParameter = fabriclinkPullByteCount
}

// WithFabriclinkPushByteCountQueryParameter adds the fabriclinkPushByteCount to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithFabriclinkPushByteCountQueryParameter(fabriclinkPushByteCount *int64) *SnapmirrorRelationshipsGetParams {
	o.SetFabriclinkPushByteCountQueryParameter(fabriclinkPushByteCount)
	return o
}

// SetFabriclinkPushByteCountQueryParameter adds the fabriclinkPushByteCount to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetFabriclinkPushByteCountQueryParameter(fabriclinkPushByteCount *int64) {
	o.FabriclinkPushByteCountQueryParameter = fabriclinkPushByteCount
}

// WithFabriclinkSourceBucketQueryParameter adds the fabriclinkSourceBucket to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithFabriclinkSourceBucketQueryParameter(fabriclinkSourceBucket *string) *SnapmirrorRelationshipsGetParams {
	o.SetFabriclinkSourceBucketQueryParameter(fabriclinkSourceBucket)
	return o
}

// SetFabriclinkSourceBucketQueryParameter adds the fabriclinkSourceBucket to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetFabriclinkSourceBucketQueryParameter(fabriclinkSourceBucket *string) {
	o.FabriclinkSourceBucketQueryParameter = fabriclinkSourceBucket
}

// WithFabriclinkSourceRoleQueryParameter adds the fabriclinkSourceRole to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithFabriclinkSourceRoleQueryParameter(fabriclinkSourceRole *string) *SnapmirrorRelationshipsGetParams {
	o.SetFabriclinkSourceRoleQueryParameter(fabriclinkSourceRole)
	return o
}

// SetFabriclinkSourceRoleQueryParameter adds the fabriclinkSourceRole to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetFabriclinkSourceRoleQueryParameter(fabriclinkSourceRole *string) {
	o.FabriclinkSourceRoleQueryParameter = fabriclinkSourceRole
}

// WithFabriclinkStatusQueryParameter adds the fabriclinkStatus to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithFabriclinkStatusQueryParameter(fabriclinkStatus *string) *SnapmirrorRelationshipsGetParams {
	o.SetFabriclinkStatusQueryParameter(fabriclinkStatus)
	return o
}

// SetFabriclinkStatusQueryParameter adds the fabriclinkStatus to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetFabriclinkStatusQueryParameter(fabriclinkStatus *string) {
	o.FabriclinkStatusQueryParameter = fabriclinkStatus
}

// WithFabriclinkTopologyUUIDQueryParameter adds the fabriclinkTopologyUUID to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithFabriclinkTopologyUUIDQueryParameter(fabriclinkTopologyUUID *string) *SnapmirrorRelationshipsGetParams {
	o.SetFabriclinkTopologyUUIDQueryParameter(fabriclinkTopologyUUID)
	return o
}

// SetFabriclinkTopologyUUIDQueryParameter adds the fabriclinkTopologyUuid to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetFabriclinkTopologyUUIDQueryParameter(fabriclinkTopologyUUID *string) {
	o.FabriclinkTopologyUUIDQueryParameter = fabriclinkTopologyUUID
}

// WithFieldsQueryParameter adds the fields to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithFieldsQueryParameter(fields []string) *SnapmirrorRelationshipsGetParams {
	o.SetFieldsQueryParameter(fields)
	return o
}

// SetFieldsQueryParameter adds the fields to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetFieldsQueryParameter(fields []string) {
	o.FieldsQueryParameter = fields
}

// WithGroupTypeQueryParameter adds the groupType to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithGroupTypeQueryParameter(groupType *string) *SnapmirrorRelationshipsGetParams {
	o.SetGroupTypeQueryParameter(groupType)
	return o
}

// SetGroupTypeQueryParameter adds the groupType to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetGroupTypeQueryParameter(groupType *string) {
	o.GroupTypeQueryParameter = groupType
}

// WithHealthyQueryParameter adds the healthy to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithHealthyQueryParameter(healthy *bool) *SnapmirrorRelationshipsGetParams {
	o.SetHealthyQueryParameter(healthy)
	return o
}

// SetHealthyQueryParameter adds the healthy to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetHealthyQueryParameter(healthy *bool) {
	o.HealthyQueryParameter = healthy
}

// WithIdentityPreservationQueryParameter adds the identityPreservation to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithIdentityPreservationQueryParameter(identityPreservation *string) *SnapmirrorRelationshipsGetParams {
	o.SetIdentityPreservationQueryParameter(identityPreservation)
	return o
}

// SetIdentityPreservationQueryParameter adds the identityPreservation to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetIdentityPreservationQueryParameter(identityPreservation *string) {
	o.IdentityPreservationQueryParameter = identityPreservation
}

// WithLagTimeQueryParameter adds the lagTime to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithLagTimeQueryParameter(lagTime *string) *SnapmirrorRelationshipsGetParams {
	o.SetLagTimeQueryParameter(lagTime)
	return o
}

// SetLagTimeQueryParameter adds the lagTime to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetLagTimeQueryParameter(lagTime *string) {
	o.LagTimeQueryParameter = lagTime
}

// WithLastTransferTypeQueryParameter adds the lastTransferType to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithLastTransferTypeQueryParameter(lastTransferType *string) *SnapmirrorRelationshipsGetParams {
	o.SetLastTransferTypeQueryParameter(lastTransferType)
	return o
}

// SetLastTransferTypeQueryParameter adds the lastTransferType to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetLastTransferTypeQueryParameter(lastTransferType *string) {
	o.LastTransferTypeQueryParameter = lastTransferType
}

// WithListDestinationsOnlyQueryParameter adds the listDestinationsOnly to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithListDestinationsOnlyQueryParameter(listDestinationsOnly *bool) *SnapmirrorRelationshipsGetParams {
	o.SetListDestinationsOnlyQueryParameter(listDestinationsOnly)
	return o
}

// SetListDestinationsOnlyQueryParameter adds the listDestinationsOnly to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetListDestinationsOnlyQueryParameter(listDestinationsOnly *bool) {
	o.ListDestinationsOnlyQueryParameter = listDestinationsOnly
}

// WithMaxRecordsQueryParameter adds the maxRecords to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithMaxRecordsQueryParameter(maxRecords *int64) *SnapmirrorRelationshipsGetParams {
	o.SetMaxRecordsQueryParameter(maxRecords)
	return o
}

// SetMaxRecordsQueryParameter adds the maxRecords to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetMaxRecordsQueryParameter(maxRecords *int64) {
	o.MaxRecordsQueryParameter = maxRecords
}

// WithOrderByQueryParameter adds the orderBy to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithOrderByQueryParameter(orderBy []string) *SnapmirrorRelationshipsGetParams {
	o.SetOrderByQueryParameter(orderBy)
	return o
}

// SetOrderByQueryParameter adds the orderBy to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetOrderByQueryParameter(orderBy []string) {
	o.OrderByQueryParameter = orderBy
}

// WithPolicyNameQueryParameter adds the policyName to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithPolicyNameQueryParameter(policyName *string) *SnapmirrorRelationshipsGetParams {
	o.SetPolicyNameQueryParameter(policyName)
	return o
}

// SetPolicyNameQueryParameter adds the policyName to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetPolicyNameQueryParameter(policyName *string) {
	o.PolicyNameQueryParameter = policyName
}

// WithPolicyTransferScheduleNameQueryParameter adds the policyTransferScheduleName to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithPolicyTransferScheduleNameQueryParameter(policyTransferScheduleName *string) *SnapmirrorRelationshipsGetParams {
	o.SetPolicyTransferScheduleNameQueryParameter(policyTransferScheduleName)
	return o
}

// SetPolicyTransferScheduleNameQueryParameter adds the policyTransferScheduleName to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetPolicyTransferScheduleNameQueryParameter(policyTransferScheduleName *string) {
	o.PolicyTransferScheduleNameQueryParameter = policyTransferScheduleName
}

// WithPolicyTypeQueryParameter adds the policyType to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithPolicyTypeQueryParameter(policyType *string) *SnapmirrorRelationshipsGetParams {
	o.SetPolicyTypeQueryParameter(policyType)
	return o
}

// SetPolicyTypeQueryParameter adds the policyType to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetPolicyTypeQueryParameter(policyType *string) {
	o.PolicyTypeQueryParameter = policyType
}

// WithPolicyUUIDQueryParameter adds the policyUUID to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithPolicyUUIDQueryParameter(policyUUID *string) *SnapmirrorRelationshipsGetParams {
	o.SetPolicyUUIDQueryParameter(policyUUID)
	return o
}

// SetPolicyUUIDQueryParameter adds the policyUuid to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetPolicyUUIDQueryParameter(policyUUID *string) {
	o.PolicyUUIDQueryParameter = policyUUID
}

// WithRestoreQueryParameter adds the restore to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithRestoreQueryParameter(restore *bool) *SnapmirrorRelationshipsGetParams {
	o.SetRestoreQueryParameter(restore)
	return o
}

// SetRestoreQueryParameter adds the restore to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetRestoreQueryParameter(restore *bool) {
	o.RestoreQueryParameter = restore
}

// WithReturnRecordsQueryParameter adds the returnRecords to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithReturnRecordsQueryParameter(returnRecords *bool) *SnapmirrorRelationshipsGetParams {
	o.SetReturnRecordsQueryParameter(returnRecords)
	return o
}

// SetReturnRecordsQueryParameter adds the returnRecords to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetReturnRecordsQueryParameter(returnRecords *bool) {
	o.ReturnRecordsQueryParameter = returnRecords
}

// WithReturnTimeoutQueryParameter adds the returnTimeout to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithReturnTimeoutQueryParameter(returnTimeout *int64) *SnapmirrorRelationshipsGetParams {
	o.SetReturnTimeoutQueryParameter(returnTimeout)
	return o
}

// SetReturnTimeoutQueryParameter adds the returnTimeout to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetReturnTimeoutQueryParameter(returnTimeout *int64) {
	o.ReturnTimeoutQueryParameter = returnTimeout
}

// WithSourceClusterNameQueryParameter adds the sourceClusterName to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithSourceClusterNameQueryParameter(sourceClusterName *string) *SnapmirrorRelationshipsGetParams {
	o.SetSourceClusterNameQueryParameter(sourceClusterName)
	return o
}

// SetSourceClusterNameQueryParameter adds the sourceClusterName to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetSourceClusterNameQueryParameter(sourceClusterName *string) {
	o.SourceClusterNameQueryParameter = sourceClusterName
}

// WithSourceClusterUUIDQueryParameter adds the sourceClusterUUID to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithSourceClusterUUIDQueryParameter(sourceClusterUUID *string) *SnapmirrorRelationshipsGetParams {
	o.SetSourceClusterUUIDQueryParameter(sourceClusterUUID)
	return o
}

// SetSourceClusterUUIDQueryParameter adds the sourceClusterUuid to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetSourceClusterUUIDQueryParameter(sourceClusterUUID *string) {
	o.SourceClusterUUIDQueryParameter = sourceClusterUUID
}

// WithSourceConsistencyGroupVolumesNameQueryParameter adds the sourceConsistencyGroupVolumesName to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithSourceConsistencyGroupVolumesNameQueryParameter(sourceConsistencyGroupVolumesName *string) *SnapmirrorRelationshipsGetParams {
	o.SetSourceConsistencyGroupVolumesNameQueryParameter(sourceConsistencyGroupVolumesName)
	return o
}

// SetSourceConsistencyGroupVolumesNameQueryParameter adds the sourceConsistencyGroupVolumesName to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetSourceConsistencyGroupVolumesNameQueryParameter(sourceConsistencyGroupVolumesName *string) {
	o.SourceConsistencyGroupVolumesNameQueryParameter = sourceConsistencyGroupVolumesName
}

// WithSourcePathQueryParameter adds the sourcePath to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithSourcePathQueryParameter(sourcePath *string) *SnapmirrorRelationshipsGetParams {
	o.SetSourcePathQueryParameter(sourcePath)
	return o
}

// SetSourcePathQueryParameter adds the sourcePath to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetSourcePathQueryParameter(sourcePath *string) {
	o.SourcePathQueryParameter = sourcePath
}

// WithSourceSVMNameQueryParameter adds the sourceSvmName to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithSourceSVMNameQueryParameter(sourceSvmName *string) *SnapmirrorRelationshipsGetParams {
	o.SetSourceSVMNameQueryParameter(sourceSvmName)
	return o
}

// SetSourceSVMNameQueryParameter adds the sourceSvmName to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetSourceSVMNameQueryParameter(sourceSvmName *string) {
	o.SourceSVMNameQueryParameter = sourceSvmName
}

// WithSourceSVMUUIDQueryParameter adds the sourceSvmUUID to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithSourceSVMUUIDQueryParameter(sourceSvmUUID *string) *SnapmirrorRelationshipsGetParams {
	o.SetSourceSVMUUIDQueryParameter(sourceSvmUUID)
	return o
}

// SetSourceSVMUUIDQueryParameter adds the sourceSvmUuid to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetSourceSVMUUIDQueryParameter(sourceSvmUUID *string) {
	o.SourceSVMUUIDQueryParameter = sourceSvmUUID
}

// WithSourceUUIDQueryParameter adds the sourceUUID to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithSourceUUIDQueryParameter(sourceUUID *string) *SnapmirrorRelationshipsGetParams {
	o.SetSourceUUIDQueryParameter(sourceUUID)
	return o
}

// SetSourceUUIDQueryParameter adds the sourceUuid to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetSourceUUIDQueryParameter(sourceUUID *string) {
	o.SourceUUIDQueryParameter = sourceUUID
}

// WithStateQueryParameter adds the state to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithStateQueryParameter(state *string) *SnapmirrorRelationshipsGetParams {
	o.SetStateQueryParameter(state)
	return o
}

// SetStateQueryParameter adds the state to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetStateQueryParameter(state *string) {
	o.StateQueryParameter = state
}

// WithThrottleQueryParameter adds the throttle to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithThrottleQueryParameter(throttle *int64) *SnapmirrorRelationshipsGetParams {
	o.SetThrottleQueryParameter(throttle)
	return o
}

// SetThrottleQueryParameter adds the throttle to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetThrottleQueryParameter(throttle *int64) {
	o.ThrottleQueryParameter = throttle
}

// WithTransferBytesTransferredQueryParameter adds the transferBytesTransferred to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithTransferBytesTransferredQueryParameter(transferBytesTransferred *int64) *SnapmirrorRelationshipsGetParams {
	o.SetTransferBytesTransferredQueryParameter(transferBytesTransferred)
	return o
}

// SetTransferBytesTransferredQueryParameter adds the transferBytesTransferred to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetTransferBytesTransferredQueryParameter(transferBytesTransferred *int64) {
	o.TransferBytesTransferredQueryParameter = transferBytesTransferred
}

// WithTransferEndTimeQueryParameter adds the transferEndTime to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithTransferEndTimeQueryParameter(transferEndTime *string) *SnapmirrorRelationshipsGetParams {
	o.SetTransferEndTimeQueryParameter(transferEndTime)
	return o
}

// SetTransferEndTimeQueryParameter adds the transferEndTime to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetTransferEndTimeQueryParameter(transferEndTime *string) {
	o.TransferEndTimeQueryParameter = transferEndTime
}

// WithTransferStateQueryParameter adds the transferState to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithTransferStateQueryParameter(transferState *string) *SnapmirrorRelationshipsGetParams {
	o.SetTransferStateQueryParameter(transferState)
	return o
}

// SetTransferStateQueryParameter adds the transferState to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetTransferStateQueryParameter(transferState *string) {
	o.TransferStateQueryParameter = transferState
}

// WithTransferTotalDurationQueryParameter adds the transferTotalDuration to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithTransferTotalDurationQueryParameter(transferTotalDuration *string) *SnapmirrorRelationshipsGetParams {
	o.SetTransferTotalDurationQueryParameter(transferTotalDuration)
	return o
}

// SetTransferTotalDurationQueryParameter adds the transferTotalDuration to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetTransferTotalDurationQueryParameter(transferTotalDuration *string) {
	o.TransferTotalDurationQueryParameter = transferTotalDuration
}

// WithTransferUUIDQueryParameter adds the transferUUID to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithTransferUUIDQueryParameter(transferUUID *string) *SnapmirrorRelationshipsGetParams {
	o.SetTransferUUIDQueryParameter(transferUUID)
	return o
}

// SetTransferUUIDQueryParameter adds the transferUuid to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetTransferUUIDQueryParameter(transferUUID *string) {
	o.TransferUUIDQueryParameter = transferUUID
}

// WithTransferScheduleNameQueryParameter adds the transferScheduleName to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithTransferScheduleNameQueryParameter(transferScheduleName *string) *SnapmirrorRelationshipsGetParams {
	o.SetTransferScheduleNameQueryParameter(transferScheduleName)
	return o
}

// SetTransferScheduleNameQueryParameter adds the transferScheduleName to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetTransferScheduleNameQueryParameter(transferScheduleName *string) {
	o.TransferScheduleNameQueryParameter = transferScheduleName
}

// WithTransferScheduleUUIDQueryParameter adds the transferScheduleUUID to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithTransferScheduleUUIDQueryParameter(transferScheduleUUID *string) *SnapmirrorRelationshipsGetParams {
	o.SetTransferScheduleUUIDQueryParameter(transferScheduleUUID)
	return o
}

// SetTransferScheduleUUIDQueryParameter adds the transferScheduleUuid to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetTransferScheduleUUIDQueryParameter(transferScheduleUUID *string) {
	o.TransferScheduleUUIDQueryParameter = transferScheduleUUID
}

// WithUnhealthyReasonCodeQueryParameter adds the unhealthyReasonCode to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithUnhealthyReasonCodeQueryParameter(unhealthyReasonCode *int64) *SnapmirrorRelationshipsGetParams {
	o.SetUnhealthyReasonCodeQueryParameter(unhealthyReasonCode)
	return o
}

// SetUnhealthyReasonCodeQueryParameter adds the unhealthyReasonCode to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetUnhealthyReasonCodeQueryParameter(unhealthyReasonCode *int64) {
	o.UnhealthyReasonCodeQueryParameter = unhealthyReasonCode
}

// WithUnhealthyReasonMessageQueryParameter adds the unhealthyReasonMessage to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithUnhealthyReasonMessageQueryParameter(unhealthyReasonMessage *string) *SnapmirrorRelationshipsGetParams {
	o.SetUnhealthyReasonMessageQueryParameter(unhealthyReasonMessage)
	return o
}

// SetUnhealthyReasonMessageQueryParameter adds the unhealthyReasonMessage to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetUnhealthyReasonMessageQueryParameter(unhealthyReasonMessage *string) {
	o.UnhealthyReasonMessageQueryParameter = unhealthyReasonMessage
}

// WithUnhealthyReasonParametersQueryParameter adds the unhealthyReasonParameters to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithUnhealthyReasonParametersQueryParameter(unhealthyReasonParameters *string) *SnapmirrorRelationshipsGetParams {
	o.SetUnhealthyReasonParametersQueryParameter(unhealthyReasonParameters)
	return o
}

// SetUnhealthyReasonParametersQueryParameter adds the unhealthyReasonParameters to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetUnhealthyReasonParametersQueryParameter(unhealthyReasonParameters *string) {
	o.UnhealthyReasonParametersQueryParameter = unhealthyReasonParameters
}

// WithUUIDQueryParameter adds the uuid to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) WithUUIDQueryParameter(uuid *string) *SnapmirrorRelationshipsGetParams {
	o.SetUUIDQueryParameter(uuid)
	return o
}

// SetUUIDQueryParameter adds the uuid to the snapmirror relationships get params
func (o *SnapmirrorRelationshipsGetParams) SetUUIDQueryParameter(uuid *string) {
	o.UUIDQueryParameter = uuid
}

// WriteToRequest writes these params to a swagger request
func (o *SnapmirrorRelationshipsGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ConsistencyGroupFailoverErrorArgumentsCodeQueryParameter != nil {

		// query param consistency_group_failover.error.arguments.code
		var qrConsistencyGroupFailoverErrorArgumentsCode string

		if o.ConsistencyGroupFailoverErrorArgumentsCodeQueryParameter != nil {
			qrConsistencyGroupFailoverErrorArgumentsCode = *o.ConsistencyGroupFailoverErrorArgumentsCodeQueryParameter
		}
		qConsistencyGroupFailoverErrorArgumentsCode := qrConsistencyGroupFailoverErrorArgumentsCode
		if qConsistencyGroupFailoverErrorArgumentsCode != "" {

			if err := r.SetQueryParam("consistency_group_failover.error.arguments.code", qConsistencyGroupFailoverErrorArgumentsCode); err != nil {
				return err
			}
		}
	}

	if o.ConsistencyGroupFailoverErrorArgumentsMessageQueryParameter != nil {

		// query param consistency_group_failover.error.arguments.message
		var qrConsistencyGroupFailoverErrorArgumentsMessage string

		if o.ConsistencyGroupFailoverErrorArgumentsMessageQueryParameter != nil {
			qrConsistencyGroupFailoverErrorArgumentsMessage = *o.ConsistencyGroupFailoverErrorArgumentsMessageQueryParameter
		}
		qConsistencyGroupFailoverErrorArgumentsMessage := qrConsistencyGroupFailoverErrorArgumentsMessage
		if qConsistencyGroupFailoverErrorArgumentsMessage != "" {

			if err := r.SetQueryParam("consistency_group_failover.error.arguments.message", qConsistencyGroupFailoverErrorArgumentsMessage); err != nil {
				return err
			}
		}
	}

	if o.ConsistencyGroupFailoverErrorCodeQueryParameter != nil {

		// query param consistency_group_failover.error.code
		var qrConsistencyGroupFailoverErrorCode string

		if o.ConsistencyGroupFailoverErrorCodeQueryParameter != nil {
			qrConsistencyGroupFailoverErrorCode = *o.ConsistencyGroupFailoverErrorCodeQueryParameter
		}
		qConsistencyGroupFailoverErrorCode := qrConsistencyGroupFailoverErrorCode
		if qConsistencyGroupFailoverErrorCode != "" {

			if err := r.SetQueryParam("consistency_group_failover.error.code", qConsistencyGroupFailoverErrorCode); err != nil {
				return err
			}
		}
	}

	if o.ConsistencyGroupFailoverErrorMessageQueryParameter != nil {

		// query param consistency_group_failover.error.message
		var qrConsistencyGroupFailoverErrorMessage string

		if o.ConsistencyGroupFailoverErrorMessageQueryParameter != nil {
			qrConsistencyGroupFailoverErrorMessage = *o.ConsistencyGroupFailoverErrorMessageQueryParameter
		}
		qConsistencyGroupFailoverErrorMessage := qrConsistencyGroupFailoverErrorMessage
		if qConsistencyGroupFailoverErrorMessage != "" {

			if err := r.SetQueryParam("consistency_group_failover.error.message", qConsistencyGroupFailoverErrorMessage); err != nil {
				return err
			}
		}
	}

	if o.ConsistencyGroupFailoverErrorTargetQueryParameter != nil {

		// query param consistency_group_failover.error.target
		var qrConsistencyGroupFailoverErrorTarget string

		if o.ConsistencyGroupFailoverErrorTargetQueryParameter != nil {
			qrConsistencyGroupFailoverErrorTarget = *o.ConsistencyGroupFailoverErrorTargetQueryParameter
		}
		qConsistencyGroupFailoverErrorTarget := qrConsistencyGroupFailoverErrorTarget
		if qConsistencyGroupFailoverErrorTarget != "" {

			if err := r.SetQueryParam("consistency_group_failover.error.target", qConsistencyGroupFailoverErrorTarget); err != nil {
				return err
			}
		}
	}

	if o.ConsistencyGroupFailoverStatusCodeQueryParameter != nil {

		// query param consistency_group_failover.status.code
		var qrConsistencyGroupFailoverStatusCode string

		if o.ConsistencyGroupFailoverStatusCodeQueryParameter != nil {
			qrConsistencyGroupFailoverStatusCode = *o.ConsistencyGroupFailoverStatusCodeQueryParameter
		}
		qConsistencyGroupFailoverStatusCode := qrConsistencyGroupFailoverStatusCode
		if qConsistencyGroupFailoverStatusCode != "" {

			if err := r.SetQueryParam("consistency_group_failover.status.code", qConsistencyGroupFailoverStatusCode); err != nil {
				return err
			}
		}
	}

	if o.ConsistencyGroupFailoverStatusMessageQueryParameter != nil {

		// query param consistency_group_failover.status.message
		var qrConsistencyGroupFailoverStatusMessage string

		if o.ConsistencyGroupFailoverStatusMessageQueryParameter != nil {
			qrConsistencyGroupFailoverStatusMessage = *o.ConsistencyGroupFailoverStatusMessageQueryParameter
		}
		qConsistencyGroupFailoverStatusMessage := qrConsistencyGroupFailoverStatusMessage
		if qConsistencyGroupFailoverStatusMessage != "" {

			if err := r.SetQueryParam("consistency_group_failover.status.message", qConsistencyGroupFailoverStatusMessage); err != nil {
				return err
			}
		}
	}

	if o.DestinationClusterNameQueryParameter != nil {

		// query param destination.cluster.name
		var qrDestinationClusterName string

		if o.DestinationClusterNameQueryParameter != nil {
			qrDestinationClusterName = *o.DestinationClusterNameQueryParameter
		}
		qDestinationClusterName := qrDestinationClusterName
		if qDestinationClusterName != "" {

			if err := r.SetQueryParam("destination.cluster.name", qDestinationClusterName); err != nil {
				return err
			}
		}
	}

	if o.DestinationClusterUUIDQueryParameter != nil {

		// query param destination.cluster.uuid
		var qrDestinationClusterUUID string

		if o.DestinationClusterUUIDQueryParameter != nil {
			qrDestinationClusterUUID = *o.DestinationClusterUUIDQueryParameter
		}
		qDestinationClusterUUID := qrDestinationClusterUUID
		if qDestinationClusterUUID != "" {

			if err := r.SetQueryParam("destination.cluster.uuid", qDestinationClusterUUID); err != nil {
				return err
			}
		}
	}

	if o.DestinationConsistencyGroupVolumesNameQueryParameter != nil {

		// query param destination.consistency_group_volumes.name
		var qrDestinationConsistencyGroupVolumesName string

		if o.DestinationConsistencyGroupVolumesNameQueryParameter != nil {
			qrDestinationConsistencyGroupVolumesName = *o.DestinationConsistencyGroupVolumesNameQueryParameter
		}
		qDestinationConsistencyGroupVolumesName := qrDestinationConsistencyGroupVolumesName
		if qDestinationConsistencyGroupVolumesName != "" {

			if err := r.SetQueryParam("destination.consistency_group_volumes.name", qDestinationConsistencyGroupVolumesName); err != nil {
				return err
			}
		}
	}

	if o.DestinationPathQueryParameter != nil {

		// query param destination.path
		var qrDestinationPath string

		if o.DestinationPathQueryParameter != nil {
			qrDestinationPath = *o.DestinationPathQueryParameter
		}
		qDestinationPath := qrDestinationPath
		if qDestinationPath != "" {

			if err := r.SetQueryParam("destination.path", qDestinationPath); err != nil {
				return err
			}
		}
	}

	if o.DestinationSVMNameQueryParameter != nil {

		// query param destination.svm.name
		var qrDestinationSvmName string

		if o.DestinationSVMNameQueryParameter != nil {
			qrDestinationSvmName = *o.DestinationSVMNameQueryParameter
		}
		qDestinationSvmName := qrDestinationSvmName
		if qDestinationSvmName != "" {

			if err := r.SetQueryParam("destination.svm.name", qDestinationSvmName); err != nil {
				return err
			}
		}
	}

	if o.DestinationSVMUUIDQueryParameter != nil {

		// query param destination.svm.uuid
		var qrDestinationSvmUUID string

		if o.DestinationSVMUUIDQueryParameter != nil {
			qrDestinationSvmUUID = *o.DestinationSVMUUIDQueryParameter
		}
		qDestinationSvmUUID := qrDestinationSvmUUID
		if qDestinationSvmUUID != "" {

			if err := r.SetQueryParam("destination.svm.uuid", qDestinationSvmUUID); err != nil {
				return err
			}
		}
	}

	if o.DestinationUUIDQueryParameter != nil {

		// query param destination.uuid
		var qrDestinationUUID string

		if o.DestinationUUIDQueryParameter != nil {
			qrDestinationUUID = *o.DestinationUUIDQueryParameter
		}
		qDestinationUUID := qrDestinationUUID
		if qDestinationUUID != "" {

			if err := r.SetQueryParam("destination.uuid", qDestinationUUID); err != nil {
				return err
			}
		}
	}

	if o.ExportedSnapshotQueryParameter != nil {

		// query param exported_snapshot
		var qrExportedSnapshot string

		if o.ExportedSnapshotQueryParameter != nil {
			qrExportedSnapshot = *o.ExportedSnapshotQueryParameter
		}
		qExportedSnapshot := qrExportedSnapshot
		if qExportedSnapshot != "" {

			if err := r.SetQueryParam("exported_snapshot", qExportedSnapshot); err != nil {
				return err
			}
		}
	}

	if o.FabriclinkDestinationBucketQueryParameter != nil {

		// query param fabriclink.destination_bucket
		var qrFabriclinkDestinationBucket string

		if o.FabriclinkDestinationBucketQueryParameter != nil {
			qrFabriclinkDestinationBucket = *o.FabriclinkDestinationBucketQueryParameter
		}
		qFabriclinkDestinationBucket := qrFabriclinkDestinationBucket
		if qFabriclinkDestinationBucket != "" {

			if err := r.SetQueryParam("fabriclink.destination_bucket", qFabriclinkDestinationBucket); err != nil {
				return err
			}
		}
	}

	if o.FabriclinkDestinationRoleQueryParameter != nil {

		// query param fabriclink.destination_role
		var qrFabriclinkDestinationRole string

		if o.FabriclinkDestinationRoleQueryParameter != nil {
			qrFabriclinkDestinationRole = *o.FabriclinkDestinationRoleQueryParameter
		}
		qFabriclinkDestinationRole := qrFabriclinkDestinationRole
		if qFabriclinkDestinationRole != "" {

			if err := r.SetQueryParam("fabriclink.destination_role", qFabriclinkDestinationRole); err != nil {
				return err
			}
		}
	}

	if o.FabriclinkPendingWorkTaskCountQueryParameter != nil {

		// query param fabriclink.pending_work_task_count
		var qrFabriclinkPendingWorkTaskCount int64

		if o.FabriclinkPendingWorkTaskCountQueryParameter != nil {
			qrFabriclinkPendingWorkTaskCount = *o.FabriclinkPendingWorkTaskCountQueryParameter
		}
		qFabriclinkPendingWorkTaskCount := swag.FormatInt64(qrFabriclinkPendingWorkTaskCount)
		if qFabriclinkPendingWorkTaskCount != "" {

			if err := r.SetQueryParam("fabriclink.pending_work_task_count", qFabriclinkPendingWorkTaskCount); err != nil {
				return err
			}
		}
	}

	if o.FabriclinkPullByteCountQueryParameter != nil {

		// query param fabriclink.pull_byte_count
		var qrFabriclinkPullByteCount int64

		if o.FabriclinkPullByteCountQueryParameter != nil {
			qrFabriclinkPullByteCount = *o.FabriclinkPullByteCountQueryParameter
		}
		qFabriclinkPullByteCount := swag.FormatInt64(qrFabriclinkPullByteCount)
		if qFabriclinkPullByteCount != "" {

			if err := r.SetQueryParam("fabriclink.pull_byte_count", qFabriclinkPullByteCount); err != nil {
				return err
			}
		}
	}

	if o.FabriclinkPushByteCountQueryParameter != nil {

		// query param fabriclink.push_byte_count
		var qrFabriclinkPushByteCount int64

		if o.FabriclinkPushByteCountQueryParameter != nil {
			qrFabriclinkPushByteCount = *o.FabriclinkPushByteCountQueryParameter
		}
		qFabriclinkPushByteCount := swag.FormatInt64(qrFabriclinkPushByteCount)
		if qFabriclinkPushByteCount != "" {

			if err := r.SetQueryParam("fabriclink.push_byte_count", qFabriclinkPushByteCount); err != nil {
				return err
			}
		}
	}

	if o.FabriclinkSourceBucketQueryParameter != nil {

		// query param fabriclink.source_bucket
		var qrFabriclinkSourceBucket string

		if o.FabriclinkSourceBucketQueryParameter != nil {
			qrFabriclinkSourceBucket = *o.FabriclinkSourceBucketQueryParameter
		}
		qFabriclinkSourceBucket := qrFabriclinkSourceBucket
		if qFabriclinkSourceBucket != "" {

			if err := r.SetQueryParam("fabriclink.source_bucket", qFabriclinkSourceBucket); err != nil {
				return err
			}
		}
	}

	if o.FabriclinkSourceRoleQueryParameter != nil {

		// query param fabriclink.source_role
		var qrFabriclinkSourceRole string

		if o.FabriclinkSourceRoleQueryParameter != nil {
			qrFabriclinkSourceRole = *o.FabriclinkSourceRoleQueryParameter
		}
		qFabriclinkSourceRole := qrFabriclinkSourceRole
		if qFabriclinkSourceRole != "" {

			if err := r.SetQueryParam("fabriclink.source_role", qFabriclinkSourceRole); err != nil {
				return err
			}
		}
	}

	if o.FabriclinkStatusQueryParameter != nil {

		// query param fabriclink.status
		var qrFabriclinkStatus string

		if o.FabriclinkStatusQueryParameter != nil {
			qrFabriclinkStatus = *o.FabriclinkStatusQueryParameter
		}
		qFabriclinkStatus := qrFabriclinkStatus
		if qFabriclinkStatus != "" {

			if err := r.SetQueryParam("fabriclink.status", qFabriclinkStatus); err != nil {
				return err
			}
		}
	}

	if o.FabriclinkTopologyUUIDQueryParameter != nil {

		// query param fabriclink.topology_uuid
		var qrFabriclinkTopologyUUID string

		if o.FabriclinkTopologyUUIDQueryParameter != nil {
			qrFabriclinkTopologyUUID = *o.FabriclinkTopologyUUIDQueryParameter
		}
		qFabriclinkTopologyUUID := qrFabriclinkTopologyUUID
		if qFabriclinkTopologyUUID != "" {

			if err := r.SetQueryParam("fabriclink.topology_uuid", qFabriclinkTopologyUUID); err != nil {
				return err
			}
		}
	}

	if o.FieldsQueryParameter != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.GroupTypeQueryParameter != nil {

		// query param group_type
		var qrGroupType string

		if o.GroupTypeQueryParameter != nil {
			qrGroupType = *o.GroupTypeQueryParameter
		}
		qGroupType := qrGroupType
		if qGroupType != "" {

			if err := r.SetQueryParam("group_type", qGroupType); err != nil {
				return err
			}
		}
	}

	if o.HealthyQueryParameter != nil {

		// query param healthy
		var qrHealthy bool

		if o.HealthyQueryParameter != nil {
			qrHealthy = *o.HealthyQueryParameter
		}
		qHealthy := swag.FormatBool(qrHealthy)
		if qHealthy != "" {

			if err := r.SetQueryParam("healthy", qHealthy); err != nil {
				return err
			}
		}
	}

	if o.IdentityPreservationQueryParameter != nil {

		// query param identity_preservation
		var qrIdentityPreservation string

		if o.IdentityPreservationQueryParameter != nil {
			qrIdentityPreservation = *o.IdentityPreservationQueryParameter
		}
		qIdentityPreservation := qrIdentityPreservation
		if qIdentityPreservation != "" {

			if err := r.SetQueryParam("identity_preservation", qIdentityPreservation); err != nil {
				return err
			}
		}
	}

	if o.LagTimeQueryParameter != nil {

		// query param lag_time
		var qrLagTime string

		if o.LagTimeQueryParameter != nil {
			qrLagTime = *o.LagTimeQueryParameter
		}
		qLagTime := qrLagTime
		if qLagTime != "" {

			if err := r.SetQueryParam("lag_time", qLagTime); err != nil {
				return err
			}
		}
	}

	if o.LastTransferTypeQueryParameter != nil {

		// query param last_transfer_type
		var qrLastTransferType string

		if o.LastTransferTypeQueryParameter != nil {
			qrLastTransferType = *o.LastTransferTypeQueryParameter
		}
		qLastTransferType := qrLastTransferType
		if qLastTransferType != "" {

			if err := r.SetQueryParam("last_transfer_type", qLastTransferType); err != nil {
				return err
			}
		}
	}

	if o.ListDestinationsOnlyQueryParameter != nil {

		// query param list_destinations_only
		var qrListDestinationsOnly bool

		if o.ListDestinationsOnlyQueryParameter != nil {
			qrListDestinationsOnly = *o.ListDestinationsOnlyQueryParameter
		}
		qListDestinationsOnly := swag.FormatBool(qrListDestinationsOnly)
		if qListDestinationsOnly != "" {

			if err := r.SetQueryParam("list_destinations_only", qListDestinationsOnly); err != nil {
				return err
			}
		}
	}

	if o.MaxRecordsQueryParameter != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecordsQueryParameter != nil {
			qrMaxRecords = *o.MaxRecordsQueryParameter
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.OrderByQueryParameter != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.PolicyNameQueryParameter != nil {

		// query param policy.name
		var qrPolicyName string

		if o.PolicyNameQueryParameter != nil {
			qrPolicyName = *o.PolicyNameQueryParameter
		}
		qPolicyName := qrPolicyName
		if qPolicyName != "" {

			if err := r.SetQueryParam("policy.name", qPolicyName); err != nil {
				return err
			}
		}
	}

	if o.PolicyTransferScheduleNameQueryParameter != nil {

		// query param policy.transfer_schedule.name
		var qrPolicyTransferScheduleName string

		if o.PolicyTransferScheduleNameQueryParameter != nil {
			qrPolicyTransferScheduleName = *o.PolicyTransferScheduleNameQueryParameter
		}
		qPolicyTransferScheduleName := qrPolicyTransferScheduleName
		if qPolicyTransferScheduleName != "" {

			if err := r.SetQueryParam("policy.transfer_schedule.name", qPolicyTransferScheduleName); err != nil {
				return err
			}
		}
	}

	if o.PolicyTypeQueryParameter != nil {

		// query param policy.type
		var qrPolicyType string

		if o.PolicyTypeQueryParameter != nil {
			qrPolicyType = *o.PolicyTypeQueryParameter
		}
		qPolicyType := qrPolicyType
		if qPolicyType != "" {

			if err := r.SetQueryParam("policy.type", qPolicyType); err != nil {
				return err
			}
		}
	}

	if o.PolicyUUIDQueryParameter != nil {

		// query param policy.uuid
		var qrPolicyUUID string

		if o.PolicyUUIDQueryParameter != nil {
			qrPolicyUUID = *o.PolicyUUIDQueryParameter
		}
		qPolicyUUID := qrPolicyUUID
		if qPolicyUUID != "" {

			if err := r.SetQueryParam("policy.uuid", qPolicyUUID); err != nil {
				return err
			}
		}
	}

	if o.RestoreQueryParameter != nil {

		// query param restore
		var qrRestore bool

		if o.RestoreQueryParameter != nil {
			qrRestore = *o.RestoreQueryParameter
		}
		qRestore := swag.FormatBool(qrRestore)
		if qRestore != "" {

			if err := r.SetQueryParam("restore", qRestore); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecordsQueryParameter != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecordsQueryParameter != nil {
			qrReturnRecords = *o.ReturnRecordsQueryParameter
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeoutQueryParameter != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeoutQueryParameter != nil {
			qrReturnTimeout = *o.ReturnTimeoutQueryParameter
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.SourceClusterNameQueryParameter != nil {

		// query param source.cluster.name
		var qrSourceClusterName string

		if o.SourceClusterNameQueryParameter != nil {
			qrSourceClusterName = *o.SourceClusterNameQueryParameter
		}
		qSourceClusterName := qrSourceClusterName
		if qSourceClusterName != "" {

			if err := r.SetQueryParam("source.cluster.name", qSourceClusterName); err != nil {
				return err
			}
		}
	}

	if o.SourceClusterUUIDQueryParameter != nil {

		// query param source.cluster.uuid
		var qrSourceClusterUUID string

		if o.SourceClusterUUIDQueryParameter != nil {
			qrSourceClusterUUID = *o.SourceClusterUUIDQueryParameter
		}
		qSourceClusterUUID := qrSourceClusterUUID
		if qSourceClusterUUID != "" {

			if err := r.SetQueryParam("source.cluster.uuid", qSourceClusterUUID); err != nil {
				return err
			}
		}
	}

	if o.SourceConsistencyGroupVolumesNameQueryParameter != nil {

		// query param source.consistency_group_volumes.name
		var qrSourceConsistencyGroupVolumesName string

		if o.SourceConsistencyGroupVolumesNameQueryParameter != nil {
			qrSourceConsistencyGroupVolumesName = *o.SourceConsistencyGroupVolumesNameQueryParameter
		}
		qSourceConsistencyGroupVolumesName := qrSourceConsistencyGroupVolumesName
		if qSourceConsistencyGroupVolumesName != "" {

			if err := r.SetQueryParam("source.consistency_group_volumes.name", qSourceConsistencyGroupVolumesName); err != nil {
				return err
			}
		}
	}

	if o.SourcePathQueryParameter != nil {

		// query param source.path
		var qrSourcePath string

		if o.SourcePathQueryParameter != nil {
			qrSourcePath = *o.SourcePathQueryParameter
		}
		qSourcePath := qrSourcePath
		if qSourcePath != "" {

			if err := r.SetQueryParam("source.path", qSourcePath); err != nil {
				return err
			}
		}
	}

	if o.SourceSVMNameQueryParameter != nil {

		// query param source.svm.name
		var qrSourceSvmName string

		if o.SourceSVMNameQueryParameter != nil {
			qrSourceSvmName = *o.SourceSVMNameQueryParameter
		}
		qSourceSvmName := qrSourceSvmName
		if qSourceSvmName != "" {

			if err := r.SetQueryParam("source.svm.name", qSourceSvmName); err != nil {
				return err
			}
		}
	}

	if o.SourceSVMUUIDQueryParameter != nil {

		// query param source.svm.uuid
		var qrSourceSvmUUID string

		if o.SourceSVMUUIDQueryParameter != nil {
			qrSourceSvmUUID = *o.SourceSVMUUIDQueryParameter
		}
		qSourceSvmUUID := qrSourceSvmUUID
		if qSourceSvmUUID != "" {

			if err := r.SetQueryParam("source.svm.uuid", qSourceSvmUUID); err != nil {
				return err
			}
		}
	}

	if o.SourceUUIDQueryParameter != nil {

		// query param source.uuid
		var qrSourceUUID string

		if o.SourceUUIDQueryParameter != nil {
			qrSourceUUID = *o.SourceUUIDQueryParameter
		}
		qSourceUUID := qrSourceUUID
		if qSourceUUID != "" {

			if err := r.SetQueryParam("source.uuid", qSourceUUID); err != nil {
				return err
			}
		}
	}

	if o.StateQueryParameter != nil {

		// query param state
		var qrState string

		if o.StateQueryParameter != nil {
			qrState = *o.StateQueryParameter
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if o.ThrottleQueryParameter != nil {

		// query param throttle
		var qrThrottle int64

		if o.ThrottleQueryParameter != nil {
			qrThrottle = *o.ThrottleQueryParameter
		}
		qThrottle := swag.FormatInt64(qrThrottle)
		if qThrottle != "" {

			if err := r.SetQueryParam("throttle", qThrottle); err != nil {
				return err
			}
		}
	}

	if o.TransferBytesTransferredQueryParameter != nil {

		// query param transfer.bytes_transferred
		var qrTransferBytesTransferred int64

		if o.TransferBytesTransferredQueryParameter != nil {
			qrTransferBytesTransferred = *o.TransferBytesTransferredQueryParameter
		}
		qTransferBytesTransferred := swag.FormatInt64(qrTransferBytesTransferred)
		if qTransferBytesTransferred != "" {

			if err := r.SetQueryParam("transfer.bytes_transferred", qTransferBytesTransferred); err != nil {
				return err
			}
		}
	}

	if o.TransferEndTimeQueryParameter != nil {

		// query param transfer.end_time
		var qrTransferEndTime string

		if o.TransferEndTimeQueryParameter != nil {
			qrTransferEndTime = *o.TransferEndTimeQueryParameter
		}
		qTransferEndTime := qrTransferEndTime
		if qTransferEndTime != "" {

			if err := r.SetQueryParam("transfer.end_time", qTransferEndTime); err != nil {
				return err
			}
		}
	}

	if o.TransferStateQueryParameter != nil {

		// query param transfer.state
		var qrTransferState string

		if o.TransferStateQueryParameter != nil {
			qrTransferState = *o.TransferStateQueryParameter
		}
		qTransferState := qrTransferState
		if qTransferState != "" {

			if err := r.SetQueryParam("transfer.state", qTransferState); err != nil {
				return err
			}
		}
	}

	if o.TransferTotalDurationQueryParameter != nil {

		// query param transfer.total_duration
		var qrTransferTotalDuration string

		if o.TransferTotalDurationQueryParameter != nil {
			qrTransferTotalDuration = *o.TransferTotalDurationQueryParameter
		}
		qTransferTotalDuration := qrTransferTotalDuration
		if qTransferTotalDuration != "" {

			if err := r.SetQueryParam("transfer.total_duration", qTransferTotalDuration); err != nil {
				return err
			}
		}
	}

	if o.TransferUUIDQueryParameter != nil {

		// query param transfer.uuid
		var qrTransferUUID string

		if o.TransferUUIDQueryParameter != nil {
			qrTransferUUID = *o.TransferUUIDQueryParameter
		}
		qTransferUUID := qrTransferUUID
		if qTransferUUID != "" {

			if err := r.SetQueryParam("transfer.uuid", qTransferUUID); err != nil {
				return err
			}
		}
	}

	if o.TransferScheduleNameQueryParameter != nil {

		// query param transfer_schedule.name
		var qrTransferScheduleName string

		if o.TransferScheduleNameQueryParameter != nil {
			qrTransferScheduleName = *o.TransferScheduleNameQueryParameter
		}
		qTransferScheduleName := qrTransferScheduleName
		if qTransferScheduleName != "" {

			if err := r.SetQueryParam("transfer_schedule.name", qTransferScheduleName); err != nil {
				return err
			}
		}
	}

	if o.TransferScheduleUUIDQueryParameter != nil {

		// query param transfer_schedule.uuid
		var qrTransferScheduleUUID string

		if o.TransferScheduleUUIDQueryParameter != nil {
			qrTransferScheduleUUID = *o.TransferScheduleUUIDQueryParameter
		}
		qTransferScheduleUUID := qrTransferScheduleUUID
		if qTransferScheduleUUID != "" {

			if err := r.SetQueryParam("transfer_schedule.uuid", qTransferScheduleUUID); err != nil {
				return err
			}
		}
	}

	if o.UnhealthyReasonCodeQueryParameter != nil {

		// query param unhealthy_reason.code
		var qrUnhealthyReasonCode int64

		if o.UnhealthyReasonCodeQueryParameter != nil {
			qrUnhealthyReasonCode = *o.UnhealthyReasonCodeQueryParameter
		}
		qUnhealthyReasonCode := swag.FormatInt64(qrUnhealthyReasonCode)
		if qUnhealthyReasonCode != "" {

			if err := r.SetQueryParam("unhealthy_reason.code", qUnhealthyReasonCode); err != nil {
				return err
			}
		}
	}

	if o.UnhealthyReasonMessageQueryParameter != nil {

		// query param unhealthy_reason.message
		var qrUnhealthyReasonMessage string

		if o.UnhealthyReasonMessageQueryParameter != nil {
			qrUnhealthyReasonMessage = *o.UnhealthyReasonMessageQueryParameter
		}
		qUnhealthyReasonMessage := qrUnhealthyReasonMessage
		if qUnhealthyReasonMessage != "" {

			if err := r.SetQueryParam("unhealthy_reason.message", qUnhealthyReasonMessage); err != nil {
				return err
			}
		}
	}

	if o.UnhealthyReasonParametersQueryParameter != nil {

		// query param unhealthy_reason.parameters
		var qrUnhealthyReasonParameters string

		if o.UnhealthyReasonParametersQueryParameter != nil {
			qrUnhealthyReasonParameters = *o.UnhealthyReasonParametersQueryParameter
		}
		qUnhealthyReasonParameters := qrUnhealthyReasonParameters
		if qUnhealthyReasonParameters != "" {

			if err := r.SetQueryParam("unhealthy_reason.parameters", qUnhealthyReasonParameters); err != nil {
				return err
			}
		}
	}

	if o.UUIDQueryParameter != nil {

		// query param uuid
		var qrUUID string

		if o.UUIDQueryParameter != nil {
			qrUUID = *o.UUIDQueryParameter
		}
		qUUID := qrUUID
		if qUUID != "" {

			if err := r.SetQueryParam("uuid", qUUID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamSnapmirrorRelationshipsGet binds the parameter fields
func (o *SnapmirrorRelationshipsGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.FieldsQueryParameter

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamSnapmirrorRelationshipsGet binds the parameter order_by
func (o *SnapmirrorRelationshipsGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderByQueryParameter

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
