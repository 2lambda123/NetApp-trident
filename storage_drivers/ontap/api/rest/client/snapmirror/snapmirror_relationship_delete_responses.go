// Code generated by go-swagger; DO NOT EDIT.

package snapmirror

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/netapp/trident/v21/storage_drivers/ontap/api/rest/models"
)

// SnapmirrorRelationshipDeleteReader is a Reader for the SnapmirrorRelationshipDelete structure.
type SnapmirrorRelationshipDeleteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SnapmirrorRelationshipDeleteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewSnapmirrorRelationshipDeleteAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewSnapmirrorRelationshipDeleteDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewSnapmirrorRelationshipDeleteAccepted creates a SnapmirrorRelationshipDeleteAccepted with default headers values
func NewSnapmirrorRelationshipDeleteAccepted() *SnapmirrorRelationshipDeleteAccepted {
	return &SnapmirrorRelationshipDeleteAccepted{}
}

/* SnapmirrorRelationshipDeleteAccepted describes a response with status code 202, with default header values.

Accepted
*/
type SnapmirrorRelationshipDeleteAccepted struct {
	Payload *models.JobLinkResponse
}

func (o *SnapmirrorRelationshipDeleteAccepted) Error() string {
	return fmt.Sprintf("[DELETE /snapmirror/relationships/{uuid}][%d] snapmirrorRelationshipDeleteAccepted  %+v", 202, o.Payload)
}
func (o *SnapmirrorRelationshipDeleteAccepted) GetPayload() *models.JobLinkResponse {
	return o.Payload
}

func (o *SnapmirrorRelationshipDeleteAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.JobLinkResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSnapmirrorRelationshipDeleteDefault creates a SnapmirrorRelationshipDeleteDefault with default headers values
func NewSnapmirrorRelationshipDeleteDefault(code int) *SnapmirrorRelationshipDeleteDefault {
	return &SnapmirrorRelationshipDeleteDefault{
		_statusCode: code,
	}
}

/* SnapmirrorRelationshipDeleteDefault describes a response with status code -1, with default header values.

 ONTAP Error Response codes
| Error code  |  Description |
|-------------|--------------|
| 13303825    | Could not retrieve information for the SnapMirror policy type |
| 13303814    | Could not retrieve the source or destination SVM UUID |
| 13303815    | Could not retrieve information for the peer cluster |
| 13303822    | SnapMirror release has failed |
| 13303813    | SnapMirror release was successful but delete has failed |
| 13303854    | Cleanup of restore relationship failed |
| 13303855    | DELETE call on a restore relationship does not support the given flags |
| 13303865    | Deleting the specified SnapMirror policy is not supported. |

*/
type SnapmirrorRelationshipDeleteDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the snapmirror relationship delete default response
func (o *SnapmirrorRelationshipDeleteDefault) Code() int {
	return o._statusCode
}

func (o *SnapmirrorRelationshipDeleteDefault) Error() string {
	return fmt.Sprintf("[DELETE /snapmirror/relationships/{uuid}][%d] snapmirror_relationship_delete default  %+v", o._statusCode, o.Payload)
}
func (o *SnapmirrorRelationshipDeleteDefault) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *SnapmirrorRelationshipDeleteDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
