// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/netapp/trident/storage_drivers/ontap/api/rest/models"
)

// FlexcacheModifyReader is a Reader for the FlexcacheModify structure.
type FlexcacheModifyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FlexcacheModifyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewFlexcacheModifyAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewFlexcacheModifyDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewFlexcacheModifyAccepted creates a FlexcacheModifyAccepted with default headers values
func NewFlexcacheModifyAccepted() *FlexcacheModifyAccepted {
	return &FlexcacheModifyAccepted{}
}

/* FlexcacheModifyAccepted describes a response with status code 202, with default header values.

Accepted
*/
type FlexcacheModifyAccepted struct {
	Payload *models.JobLinkResponse
}

func (o *FlexcacheModifyAccepted) Error() string {
	return fmt.Sprintf("[PATCH /storage/flexcache/flexcaches/{uuid}][%d] flexcacheModifyAccepted  %+v", 202, o.Payload)
}
func (o *FlexcacheModifyAccepted) GetPayload() *models.JobLinkResponse {
	return o.Payload
}

func (o *FlexcacheModifyAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.JobLinkResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFlexcacheModifyDefault creates a FlexcacheModifyDefault with default headers values
func NewFlexcacheModifyDefault(code int) *FlexcacheModifyDefault {
	return &FlexcacheModifyDefault{
		_statusCode: code,
	}
}

/* FlexcacheModifyDefault describes a response with status code -1, with default header values.

 ONTAP Error Response Codes
| Error Code | Description |
| ---------- | ----------- |
| 66846922   | FlexCache volume does not exist in the SVM |
| 66846923   | Failed to prepopulate FlexCache volume because the origin volume is not reachable |
| 66846924   | FlexCache volume is offline |
| 66846925   | FlexCache volume is not mounted or the junction-path is not active |
| 66846926   | The junction-path of FlexCache volume is not active |
| 66846927   | FlexCache volume does not have an origin volume |
| 66846928   | FlexCache volume does not exist |
| 66846929   | Using FlexCache prepopulate requires an effective cluster version of 9.8.0 or later |
| 66846930   | Using FlexCache prepopulate in a MetroCluster configuration requires an effective cluster version of 9.8.0 or later on both the local and remote clusters |
| 66846931   | Internal Error. FlexCache prepopulate job queue failed. Wait a few minutes, and then try the operation again |
| 66846936   | Failed to lookup root file handle for origin of FlexCache volume. Wait a few minutes, and then try the operation again |
| 66846937   | Internal error. Failed to initialize thread |
| 66846939   | Internal error. Failed to get the MSID of the origin volume for FlexCache volume |
| 66846943   | Failed to prepopulate because dir_path does not exist |
| 66846944   | Failed to get root constituent for FlexCache volume |
| 66846945   | Origin of FlexCache volume is not mounted or the junction-path is not active |
| 66846946   | The junction-path of origin of FlexCache volume is not active |
| 66846947   | FlexCache prepopulate job for FlexCache volume already exists |
| 66846948   | FlexCache prepopulate job for FlexCache volume could not be queued because the node is offline |

*/
type FlexcacheModifyDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the flexcache modify default response
func (o *FlexcacheModifyDefault) Code() int {
	return o._statusCode
}

func (o *FlexcacheModifyDefault) Error() string {
	return fmt.Sprintf("[PATCH /storage/flexcache/flexcaches/{uuid}][%d] flexcache_modify default  %+v", o._statusCode, o.Payload)
}
func (o *FlexcacheModifyDefault) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *FlexcacheModifyDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
