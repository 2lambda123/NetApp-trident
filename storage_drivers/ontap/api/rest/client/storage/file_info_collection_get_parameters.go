// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewFileInfoCollectionGetParams creates a new FileInfoCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewFileInfoCollectionGetParams() *FileInfoCollectionGetParams {
	return &FileInfoCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewFileInfoCollectionGetParamsWithTimeout creates a new FileInfoCollectionGetParams object
// with the ability to set a timeout on a request.
func NewFileInfoCollectionGetParamsWithTimeout(timeout time.Duration) *FileInfoCollectionGetParams {
	return &FileInfoCollectionGetParams{
		timeout: timeout,
	}
}

// NewFileInfoCollectionGetParamsWithContext creates a new FileInfoCollectionGetParams object
// with the ability to set a context for a request.
func NewFileInfoCollectionGetParamsWithContext(ctx context.Context) *FileInfoCollectionGetParams {
	return &FileInfoCollectionGetParams{
		Context: ctx,
	}
}

// NewFileInfoCollectionGetParamsWithHTTPClient creates a new FileInfoCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewFileInfoCollectionGetParamsWithHTTPClient(client *http.Client) *FileInfoCollectionGetParams {
	return &FileInfoCollectionGetParams{
		HTTPClient: client,
	}
}

/* FileInfoCollectionGetParams contains all the parameters to send to the API endpoint
   for the file info collection get operation.

   Typically these are written to a http.Request.
*/
type FileInfoCollectionGetParams struct {

	/* AccessedTime.

	   Filter by accessed_time
	*/
	AccessedTimeQueryParameter *string

	/* BytesUsed.

	   Filter by bytes_used
	*/
	BytesUsedQueryParameter *int64

	/* ChangedTime.

	   Filter by changed_time
	*/
	ChangedTimeQueryParameter *string

	/* CreationTime.

	   Filter by creation_time
	*/
	CreationTimeQueryParameter *string

	/* Fields.

	   Specify the fields to return.
	*/
	Fields []string

	/* GroupID.

	   Filter by group_id
	*/
	GroupIDQueryParameter *int64

	/* HardLinksCount.

	   Filter by hard_links_count
	*/
	HardLinksCountQueryParameter *int64

	/* InodeGeneration.

	   Filter by inode_generation
	*/
	InodeGenerationQueryParameter *int64

	/* InodeNumber.

	   Filter by inode_number
	*/
	InodeNumberQueryParameter *int64

	/* IsEmpty.

	   Filter by is_empty
	*/
	IsEmptyQueryParameter *bool

	/* IsJunction.

	   Filter by is_junction
	*/
	IsJunctionQueryParameter *bool

	/* IsVMAligned.

	   Filter by is_vm_aligned
	*/
	IsVMAlignedQueryParameter *bool

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecords *int64

	/* ModifiedTime.

	   Filter by modified_time
	*/
	ModifiedTimeQueryParameter *string

	/* Name.

	   Filter by name
	*/
	NameQueryParameter *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderBy []string

	/* OwnerID.

	   Filter by owner_id
	*/
	OwnerIDQueryParameter *int64

	/* Path.

	   Filter by path
	*/
	PathQueryParameter *string

	/* Path.

	   Relative path of a directory in the volume.
	*/
	PathPathParameter string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecords *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeout *int64

	/* Size.

	   Filter by size
	*/
	SizeQueryParameter *int64

	/* Type.

	   Filter by type
	*/
	TypeQueryParameter *string

	/* UnixPermissions.

	   Filter by unix_permissions
	*/
	UnixPermissionsQueryParameter *int64

	/* VolumeName.

	   Filter by volume.name
	*/
	VolumeNameQueryParameter *string

	/* VolumeUUID.

	   Volume UUID
	*/
	VolumeUUIDPathParameter string

	/* VolumeUUID.

	   Filter by volume.uuid
	*/
	VolumeUUIDQueryParameter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the file info collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FileInfoCollectionGetParams) WithDefaults() *FileInfoCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the file info collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FileInfoCollectionGetParams) SetDefaults() {
	var (
		returnRecordsDefault = bool(true)

		returnTimeoutDefault = int64(15)
	)

	val := FileInfoCollectionGetParams{
		ReturnRecords: &returnRecordsDefault,
		ReturnTimeout: &returnTimeoutDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the file info collection get params
func (o *FileInfoCollectionGetParams) WithTimeout(timeout time.Duration) *FileInfoCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the file info collection get params
func (o *FileInfoCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the file info collection get params
func (o *FileInfoCollectionGetParams) WithContext(ctx context.Context) *FileInfoCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the file info collection get params
func (o *FileInfoCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the file info collection get params
func (o *FileInfoCollectionGetParams) WithHTTPClient(client *http.Client) *FileInfoCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the file info collection get params
func (o *FileInfoCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccessedTimeQueryParameter adds the accessedTime to the file info collection get params
func (o *FileInfoCollectionGetParams) WithAccessedTimeQueryParameter(accessedTime *string) *FileInfoCollectionGetParams {
	o.SetAccessedTimeQueryParameter(accessedTime)
	return o
}

// SetAccessedTimeQueryParameter adds the accessedTime to the file info collection get params
func (o *FileInfoCollectionGetParams) SetAccessedTimeQueryParameter(accessedTime *string) {
	o.AccessedTimeQueryParameter = accessedTime
}

// WithBytesUsedQueryParameter adds the bytesUsed to the file info collection get params
func (o *FileInfoCollectionGetParams) WithBytesUsedQueryParameter(bytesUsed *int64) *FileInfoCollectionGetParams {
	o.SetBytesUsedQueryParameter(bytesUsed)
	return o
}

// SetBytesUsedQueryParameter adds the bytesUsed to the file info collection get params
func (o *FileInfoCollectionGetParams) SetBytesUsedQueryParameter(bytesUsed *int64) {
	o.BytesUsedQueryParameter = bytesUsed
}

// WithChangedTimeQueryParameter adds the changedTime to the file info collection get params
func (o *FileInfoCollectionGetParams) WithChangedTimeQueryParameter(changedTime *string) *FileInfoCollectionGetParams {
	o.SetChangedTimeQueryParameter(changedTime)
	return o
}

// SetChangedTimeQueryParameter adds the changedTime to the file info collection get params
func (o *FileInfoCollectionGetParams) SetChangedTimeQueryParameter(changedTime *string) {
	o.ChangedTimeQueryParameter = changedTime
}

// WithCreationTimeQueryParameter adds the creationTime to the file info collection get params
func (o *FileInfoCollectionGetParams) WithCreationTimeQueryParameter(creationTime *string) *FileInfoCollectionGetParams {
	o.SetCreationTimeQueryParameter(creationTime)
	return o
}

// SetCreationTimeQueryParameter adds the creationTime to the file info collection get params
func (o *FileInfoCollectionGetParams) SetCreationTimeQueryParameter(creationTime *string) {
	o.CreationTimeQueryParameter = creationTime
}

// WithFields adds the fields to the file info collection get params
func (o *FileInfoCollectionGetParams) WithFields(fields []string) *FileInfoCollectionGetParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the file info collection get params
func (o *FileInfoCollectionGetParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithGroupIDQueryParameter adds the groupID to the file info collection get params
func (o *FileInfoCollectionGetParams) WithGroupIDQueryParameter(groupID *int64) *FileInfoCollectionGetParams {
	o.SetGroupIDQueryParameter(groupID)
	return o
}

// SetGroupIDQueryParameter adds the groupId to the file info collection get params
func (o *FileInfoCollectionGetParams) SetGroupIDQueryParameter(groupID *int64) {
	o.GroupIDQueryParameter = groupID
}

// WithHardLinksCountQueryParameter adds the hardLinksCount to the file info collection get params
func (o *FileInfoCollectionGetParams) WithHardLinksCountQueryParameter(hardLinksCount *int64) *FileInfoCollectionGetParams {
	o.SetHardLinksCountQueryParameter(hardLinksCount)
	return o
}

// SetHardLinksCountQueryParameter adds the hardLinksCount to the file info collection get params
func (o *FileInfoCollectionGetParams) SetHardLinksCountQueryParameter(hardLinksCount *int64) {
	o.HardLinksCountQueryParameter = hardLinksCount
}

// WithInodeGenerationQueryParameter adds the inodeGeneration to the file info collection get params
func (o *FileInfoCollectionGetParams) WithInodeGenerationQueryParameter(inodeGeneration *int64) *FileInfoCollectionGetParams {
	o.SetInodeGenerationQueryParameter(inodeGeneration)
	return o
}

// SetInodeGenerationQueryParameter adds the inodeGeneration to the file info collection get params
func (o *FileInfoCollectionGetParams) SetInodeGenerationQueryParameter(inodeGeneration *int64) {
	o.InodeGenerationQueryParameter = inodeGeneration
}

// WithInodeNumberQueryParameter adds the inodeNumber to the file info collection get params
func (o *FileInfoCollectionGetParams) WithInodeNumberQueryParameter(inodeNumber *int64) *FileInfoCollectionGetParams {
	o.SetInodeNumberQueryParameter(inodeNumber)
	return o
}

// SetInodeNumberQueryParameter adds the inodeNumber to the file info collection get params
func (o *FileInfoCollectionGetParams) SetInodeNumberQueryParameter(inodeNumber *int64) {
	o.InodeNumberQueryParameter = inodeNumber
}

// WithIsEmptyQueryParameter adds the isEmpty to the file info collection get params
func (o *FileInfoCollectionGetParams) WithIsEmptyQueryParameter(isEmpty *bool) *FileInfoCollectionGetParams {
	o.SetIsEmptyQueryParameter(isEmpty)
	return o
}

// SetIsEmptyQueryParameter adds the isEmpty to the file info collection get params
func (o *FileInfoCollectionGetParams) SetIsEmptyQueryParameter(isEmpty *bool) {
	o.IsEmptyQueryParameter = isEmpty
}

// WithIsJunctionQueryParameter adds the isJunction to the file info collection get params
func (o *FileInfoCollectionGetParams) WithIsJunctionQueryParameter(isJunction *bool) *FileInfoCollectionGetParams {
	o.SetIsJunctionQueryParameter(isJunction)
	return o
}

// SetIsJunctionQueryParameter adds the isJunction to the file info collection get params
func (o *FileInfoCollectionGetParams) SetIsJunctionQueryParameter(isJunction *bool) {
	o.IsJunctionQueryParameter = isJunction
}

// WithIsVMAlignedQueryParameter adds the isVMAligned to the file info collection get params
func (o *FileInfoCollectionGetParams) WithIsVMAlignedQueryParameter(isVMAligned *bool) *FileInfoCollectionGetParams {
	o.SetIsVMAlignedQueryParameter(isVMAligned)
	return o
}

// SetIsVMAlignedQueryParameter adds the isVmAligned to the file info collection get params
func (o *FileInfoCollectionGetParams) SetIsVMAlignedQueryParameter(isVMAligned *bool) {
	o.IsVMAlignedQueryParameter = isVMAligned
}

// WithMaxRecords adds the maxRecords to the file info collection get params
func (o *FileInfoCollectionGetParams) WithMaxRecords(maxRecords *int64) *FileInfoCollectionGetParams {
	o.SetMaxRecords(maxRecords)
	return o
}

// SetMaxRecords adds the maxRecords to the file info collection get params
func (o *FileInfoCollectionGetParams) SetMaxRecords(maxRecords *int64) {
	o.MaxRecords = maxRecords
}

// WithModifiedTimeQueryParameter adds the modifiedTime to the file info collection get params
func (o *FileInfoCollectionGetParams) WithModifiedTimeQueryParameter(modifiedTime *string) *FileInfoCollectionGetParams {
	o.SetModifiedTimeQueryParameter(modifiedTime)
	return o
}

// SetModifiedTimeQueryParameter adds the modifiedTime to the file info collection get params
func (o *FileInfoCollectionGetParams) SetModifiedTimeQueryParameter(modifiedTime *string) {
	o.ModifiedTimeQueryParameter = modifiedTime
}

// WithNameQueryParameter adds the name to the file info collection get params
func (o *FileInfoCollectionGetParams) WithNameQueryParameter(name *string) *FileInfoCollectionGetParams {
	o.SetNameQueryParameter(name)
	return o
}

// SetNameQueryParameter adds the name to the file info collection get params
func (o *FileInfoCollectionGetParams) SetNameQueryParameter(name *string) {
	o.NameQueryParameter = name
}

// WithOrderBy adds the orderBy to the file info collection get params
func (o *FileInfoCollectionGetParams) WithOrderBy(orderBy []string) *FileInfoCollectionGetParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the file info collection get params
func (o *FileInfoCollectionGetParams) SetOrderBy(orderBy []string) {
	o.OrderBy = orderBy
}

// WithOwnerIDQueryParameter adds the ownerID to the file info collection get params
func (o *FileInfoCollectionGetParams) WithOwnerIDQueryParameter(ownerID *int64) *FileInfoCollectionGetParams {
	o.SetOwnerIDQueryParameter(ownerID)
	return o
}

// SetOwnerIDQueryParameter adds the ownerId to the file info collection get params
func (o *FileInfoCollectionGetParams) SetOwnerIDQueryParameter(ownerID *int64) {
	o.OwnerIDQueryParameter = ownerID
}

// WithPathQueryParameter adds the path to the file info collection get params
func (o *FileInfoCollectionGetParams) WithPathQueryParameter(path *string) *FileInfoCollectionGetParams {
	o.SetPathQueryParameter(path)
	return o
}

// SetPathQueryParameter adds the path to the file info collection get params
func (o *FileInfoCollectionGetParams) SetPathQueryParameter(path *string) {
	o.PathQueryParameter = path
}

// WithPathPathParameter adds the path to the file info collection get params
func (o *FileInfoCollectionGetParams) WithPathPathParameter(path string) *FileInfoCollectionGetParams {
	o.SetPathPathParameter(path)
	return o
}

// SetPathPathParameter adds the path to the file info collection get params
func (o *FileInfoCollectionGetParams) SetPathPathParameter(path string) {
	o.PathPathParameter = path
}

// WithReturnRecords adds the returnRecords to the file info collection get params
func (o *FileInfoCollectionGetParams) WithReturnRecords(returnRecords *bool) *FileInfoCollectionGetParams {
	o.SetReturnRecords(returnRecords)
	return o
}

// SetReturnRecords adds the returnRecords to the file info collection get params
func (o *FileInfoCollectionGetParams) SetReturnRecords(returnRecords *bool) {
	o.ReturnRecords = returnRecords
}

// WithReturnTimeout adds the returnTimeout to the file info collection get params
func (o *FileInfoCollectionGetParams) WithReturnTimeout(returnTimeout *int64) *FileInfoCollectionGetParams {
	o.SetReturnTimeout(returnTimeout)
	return o
}

// SetReturnTimeout adds the returnTimeout to the file info collection get params
func (o *FileInfoCollectionGetParams) SetReturnTimeout(returnTimeout *int64) {
	o.ReturnTimeout = returnTimeout
}

// WithSizeQueryParameter adds the size to the file info collection get params
func (o *FileInfoCollectionGetParams) WithSizeQueryParameter(size *int64) *FileInfoCollectionGetParams {
	o.SetSizeQueryParameter(size)
	return o
}

// SetSizeQueryParameter adds the size to the file info collection get params
func (o *FileInfoCollectionGetParams) SetSizeQueryParameter(size *int64) {
	o.SizeQueryParameter = size
}

// WithTypeQueryParameter adds the typeVar to the file info collection get params
func (o *FileInfoCollectionGetParams) WithTypeQueryParameter(typeVar *string) *FileInfoCollectionGetParams {
	o.SetTypeQueryParameter(typeVar)
	return o
}

// SetTypeQueryParameter adds the type to the file info collection get params
func (o *FileInfoCollectionGetParams) SetTypeQueryParameter(typeVar *string) {
	o.TypeQueryParameter = typeVar
}

// WithUnixPermissionsQueryParameter adds the unixPermissions to the file info collection get params
func (o *FileInfoCollectionGetParams) WithUnixPermissionsQueryParameter(unixPermissions *int64) *FileInfoCollectionGetParams {
	o.SetUnixPermissionsQueryParameter(unixPermissions)
	return o
}

// SetUnixPermissionsQueryParameter adds the unixPermissions to the file info collection get params
func (o *FileInfoCollectionGetParams) SetUnixPermissionsQueryParameter(unixPermissions *int64) {
	o.UnixPermissionsQueryParameter = unixPermissions
}

// WithVolumeNameQueryParameter adds the volumeName to the file info collection get params
func (o *FileInfoCollectionGetParams) WithVolumeNameQueryParameter(volumeName *string) *FileInfoCollectionGetParams {
	o.SetVolumeNameQueryParameter(volumeName)
	return o
}

// SetVolumeNameQueryParameter adds the volumeName to the file info collection get params
func (o *FileInfoCollectionGetParams) SetVolumeNameQueryParameter(volumeName *string) {
	o.VolumeNameQueryParameter = volumeName
}

// WithVolumeUUIDPathParameter adds the volumeUUID to the file info collection get params
func (o *FileInfoCollectionGetParams) WithVolumeUUIDPathParameter(volumeUUID string) *FileInfoCollectionGetParams {
	o.SetVolumeUUIDPathParameter(volumeUUID)
	return o
}

// SetVolumeUUIDPathParameter adds the volumeUuid to the file info collection get params
func (o *FileInfoCollectionGetParams) SetVolumeUUIDPathParameter(volumeUUID string) {
	o.VolumeUUIDPathParameter = volumeUUID
}

// WithVolumeUUIDQueryParameter adds the volumeUUID to the file info collection get params
func (o *FileInfoCollectionGetParams) WithVolumeUUIDQueryParameter(volumeUUID *string) *FileInfoCollectionGetParams {
	o.SetVolumeUUIDQueryParameter(volumeUUID)
	return o
}

// SetVolumeUUIDQueryParameter adds the volumeUuid to the file info collection get params
func (o *FileInfoCollectionGetParams) SetVolumeUUIDQueryParameter(volumeUUID *string) {
	o.VolumeUUIDQueryParameter = volumeUUID
}

// WriteToRequest writes these params to a swagger request
func (o *FileInfoCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AccessedTimeQueryParameter != nil {

		// query param accessed_time
		var qrAccessedTime string

		if o.AccessedTimeQueryParameter != nil {
			qrAccessedTime = *o.AccessedTimeQueryParameter
		}
		qAccessedTime := qrAccessedTime
		if qAccessedTime != "" {

			if err := r.SetQueryParam("accessed_time", qAccessedTime); err != nil {
				return err
			}
		}
	}

	if o.BytesUsedQueryParameter != nil {

		// query param bytes_used
		var qrBytesUsed int64

		if o.BytesUsedQueryParameter != nil {
			qrBytesUsed = *o.BytesUsedQueryParameter
		}
		qBytesUsed := swag.FormatInt64(qrBytesUsed)
		if qBytesUsed != "" {

			if err := r.SetQueryParam("bytes_used", qBytesUsed); err != nil {
				return err
			}
		}
	}

	if o.ChangedTimeQueryParameter != nil {

		// query param changed_time
		var qrChangedTime string

		if o.ChangedTimeQueryParameter != nil {
			qrChangedTime = *o.ChangedTimeQueryParameter
		}
		qChangedTime := qrChangedTime
		if qChangedTime != "" {

			if err := r.SetQueryParam("changed_time", qChangedTime); err != nil {
				return err
			}
		}
	}

	if o.CreationTimeQueryParameter != nil {

		// query param creation_time
		var qrCreationTime string

		if o.CreationTimeQueryParameter != nil {
			qrCreationTime = *o.CreationTimeQueryParameter
		}
		qCreationTime := qrCreationTime
		if qCreationTime != "" {

			if err := r.SetQueryParam("creation_time", qCreationTime); err != nil {
				return err
			}
		}
	}

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.GroupIDQueryParameter != nil {

		// query param group_id
		var qrGroupID int64

		if o.GroupIDQueryParameter != nil {
			qrGroupID = *o.GroupIDQueryParameter
		}
		qGroupID := swag.FormatInt64(qrGroupID)
		if qGroupID != "" {

			if err := r.SetQueryParam("group_id", qGroupID); err != nil {
				return err
			}
		}
	}

	if o.HardLinksCountQueryParameter != nil {

		// query param hard_links_count
		var qrHardLinksCount int64

		if o.HardLinksCountQueryParameter != nil {
			qrHardLinksCount = *o.HardLinksCountQueryParameter
		}
		qHardLinksCount := swag.FormatInt64(qrHardLinksCount)
		if qHardLinksCount != "" {

			if err := r.SetQueryParam("hard_links_count", qHardLinksCount); err != nil {
				return err
			}
		}
	}

	if o.InodeGenerationQueryParameter != nil {

		// query param inode_generation
		var qrInodeGeneration int64

		if o.InodeGenerationQueryParameter != nil {
			qrInodeGeneration = *o.InodeGenerationQueryParameter
		}
		qInodeGeneration := swag.FormatInt64(qrInodeGeneration)
		if qInodeGeneration != "" {

			if err := r.SetQueryParam("inode_generation", qInodeGeneration); err != nil {
				return err
			}
		}
	}

	if o.InodeNumberQueryParameter != nil {

		// query param inode_number
		var qrInodeNumber int64

		if o.InodeNumberQueryParameter != nil {
			qrInodeNumber = *o.InodeNumberQueryParameter
		}
		qInodeNumber := swag.FormatInt64(qrInodeNumber)
		if qInodeNumber != "" {

			if err := r.SetQueryParam("inode_number", qInodeNumber); err != nil {
				return err
			}
		}
	}

	if o.IsEmptyQueryParameter != nil {

		// query param is_empty
		var qrIsEmpty bool

		if o.IsEmptyQueryParameter != nil {
			qrIsEmpty = *o.IsEmptyQueryParameter
		}
		qIsEmpty := swag.FormatBool(qrIsEmpty)
		if qIsEmpty != "" {

			if err := r.SetQueryParam("is_empty", qIsEmpty); err != nil {
				return err
			}
		}
	}

	if o.IsJunctionQueryParameter != nil {

		// query param is_junction
		var qrIsJunction bool

		if o.IsJunctionQueryParameter != nil {
			qrIsJunction = *o.IsJunctionQueryParameter
		}
		qIsJunction := swag.FormatBool(qrIsJunction)
		if qIsJunction != "" {

			if err := r.SetQueryParam("is_junction", qIsJunction); err != nil {
				return err
			}
		}
	}

	if o.IsVMAlignedQueryParameter != nil {

		// query param is_vm_aligned
		var qrIsVMAligned bool

		if o.IsVMAlignedQueryParameter != nil {
			qrIsVMAligned = *o.IsVMAlignedQueryParameter
		}
		qIsVMAligned := swag.FormatBool(qrIsVMAligned)
		if qIsVMAligned != "" {

			if err := r.SetQueryParam("is_vm_aligned", qIsVMAligned); err != nil {
				return err
			}
		}
	}

	if o.MaxRecords != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecords != nil {
			qrMaxRecords = *o.MaxRecords
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.ModifiedTimeQueryParameter != nil {

		// query param modified_time
		var qrModifiedTime string

		if o.ModifiedTimeQueryParameter != nil {
			qrModifiedTime = *o.ModifiedTimeQueryParameter
		}
		qModifiedTime := qrModifiedTime
		if qModifiedTime != "" {

			if err := r.SetQueryParam("modified_time", qModifiedTime); err != nil {
				return err
			}
		}
	}

	if o.NameQueryParameter != nil {

		// query param name
		var qrName string

		if o.NameQueryParameter != nil {
			qrName = *o.NameQueryParameter
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.OrderBy != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.OwnerIDQueryParameter != nil {

		// query param owner_id
		var qrOwnerID int64

		if o.OwnerIDQueryParameter != nil {
			qrOwnerID = *o.OwnerIDQueryParameter
		}
		qOwnerID := swag.FormatInt64(qrOwnerID)
		if qOwnerID != "" {

			if err := r.SetQueryParam("owner_id", qOwnerID); err != nil {
				return err
			}
		}
	}

	if o.PathQueryParameter != nil {

		// query param path
		var qrPath string

		if o.PathQueryParameter != nil {
			qrPath = *o.PathQueryParameter
		}
		qPath := qrPath
		if qPath != "" {

			if err := r.SetQueryParam("path", qPath); err != nil {
				return err
			}
		}
	}

	// path param path
	if err := r.SetPathParam("path", o.PathPathParameter); err != nil {
		return err
	}

	if o.ReturnRecords != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecords != nil {
			qrReturnRecords = *o.ReturnRecords
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeout != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeout != nil {
			qrReturnTimeout = *o.ReturnTimeout
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.SizeQueryParameter != nil {

		// query param size
		var qrSize int64

		if o.SizeQueryParameter != nil {
			qrSize = *o.SizeQueryParameter
		}
		qSize := swag.FormatInt64(qrSize)
		if qSize != "" {

			if err := r.SetQueryParam("size", qSize); err != nil {
				return err
			}
		}
	}

	if o.TypeQueryParameter != nil {

		// query param type
		var qrType string

		if o.TypeQueryParameter != nil {
			qrType = *o.TypeQueryParameter
		}
		qType := qrType
		if qType != "" {

			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}
	}

	if o.UnixPermissionsQueryParameter != nil {

		// query param unix_permissions
		var qrUnixPermissions int64

		if o.UnixPermissionsQueryParameter != nil {
			qrUnixPermissions = *o.UnixPermissionsQueryParameter
		}
		qUnixPermissions := swag.FormatInt64(qrUnixPermissions)
		if qUnixPermissions != "" {

			if err := r.SetQueryParam("unix_permissions", qUnixPermissions); err != nil {
				return err
			}
		}
	}

	if o.VolumeNameQueryParameter != nil {

		// query param volume.name
		var qrVolumeName string

		if o.VolumeNameQueryParameter != nil {
			qrVolumeName = *o.VolumeNameQueryParameter
		}
		qVolumeName := qrVolumeName
		if qVolumeName != "" {

			if err := r.SetQueryParam("volume.name", qVolumeName); err != nil {
				return err
			}
		}
	}

	// path param volume.uuid
	if err := r.SetPathParam("volume.uuid", o.VolumeUUIDPathParameter); err != nil {
		return err
	}

	if o.VolumeUUIDQueryParameter != nil {

		// query param volume.uuid
		var qrVolumeUUID string

		if o.VolumeUUIDQueryParameter != nil {
			qrVolumeUUID = *o.VolumeUUIDQueryParameter
		}
		qVolumeUUID := qrVolumeUUID
		if qVolumeUUID != "" {

			if err := r.SetQueryParam("volume.uuid", qVolumeUUID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamFileInfoCollectionGet binds the parameter fields
func (o *FileInfoCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamFileInfoCollectionGet binds the parameter order_by
func (o *FileInfoCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderBy

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
