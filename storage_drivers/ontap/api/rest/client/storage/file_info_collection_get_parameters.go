// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewFileInfoCollectionGetParams creates a new FileInfoCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewFileInfoCollectionGetParams() *FileInfoCollectionGetParams {
	return &FileInfoCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewFileInfoCollectionGetParamsWithTimeout creates a new FileInfoCollectionGetParams object
// with the ability to set a timeout on a request.
func NewFileInfoCollectionGetParamsWithTimeout(timeout time.Duration) *FileInfoCollectionGetParams {
	return &FileInfoCollectionGetParams{
		timeout: timeout,
	}
}

// NewFileInfoCollectionGetParamsWithContext creates a new FileInfoCollectionGetParams object
// with the ability to set a context for a request.
func NewFileInfoCollectionGetParamsWithContext(ctx context.Context) *FileInfoCollectionGetParams {
	return &FileInfoCollectionGetParams{
		Context: ctx,
	}
}

// NewFileInfoCollectionGetParamsWithHTTPClient creates a new FileInfoCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewFileInfoCollectionGetParamsWithHTTPClient(client *http.Client) *FileInfoCollectionGetParams {
	return &FileInfoCollectionGetParams{
		HTTPClient: client,
	}
}

/* FileInfoCollectionGetParams contains all the parameters to send to the API endpoint
   for the file info collection get operation.

   Typically these are written to a http.Request.
*/
type FileInfoCollectionGetParams struct {

	/* AccessedTime.

	   Filter by accessed_time
	*/
	AccessedTimeQueryParameter *string

	/* AnalyticsByAccessedTimeBytesUsedLabels.

	   Filter by analytics.by_accessed_time.bytes_used.labels
	*/
	AnalyticsByAccessedTimeBytesUsedLabelsQueryParameter *string

	/* AnalyticsByAccessedTimeBytesUsedNewestLabel.

	   Filter by analytics.by_accessed_time.bytes_used.newest_label
	*/
	AnalyticsByAccessedTimeBytesUsedNewestLabelQueryParameter *string

	/* AnalyticsByAccessedTimeBytesUsedOldestLabel.

	   Filter by analytics.by_accessed_time.bytes_used.oldest_label
	*/
	AnalyticsByAccessedTimeBytesUsedOldestLabelQueryParameter *string

	/* AnalyticsByAccessedTimeBytesUsedPercentages.

	   Filter by analytics.by_accessed_time.bytes_used.percentages
	*/
	AnalyticsByAccessedTimeBytesUsedPercentagesQueryParameter *float64

	/* AnalyticsByAccessedTimeBytesUsedValues.

	   Filter by analytics.by_accessed_time.bytes_used.values
	*/
	AnalyticsByAccessedTimeBytesUsedValuesQueryParameter *int64

	/* AnalyticsByModifiedTimeBytesUsedLabels.

	   Filter by analytics.by_modified_time.bytes_used.labels
	*/
	AnalyticsByModifiedTimeBytesUsedLabelsQueryParameter *string

	/* AnalyticsByModifiedTimeBytesUsedNewestLabel.

	   Filter by analytics.by_modified_time.bytes_used.newest_label
	*/
	AnalyticsByModifiedTimeBytesUsedNewestLabelQueryParameter *string

	/* AnalyticsByModifiedTimeBytesUsedOldestLabel.

	   Filter by analytics.by_modified_time.bytes_used.oldest_label
	*/
	AnalyticsByModifiedTimeBytesUsedOldestLabelQueryParameter *string

	/* AnalyticsByModifiedTimeBytesUsedPercentages.

	   Filter by analytics.by_modified_time.bytes_used.percentages
	*/
	AnalyticsByModifiedTimeBytesUsedPercentagesQueryParameter *float64

	/* AnalyticsByModifiedTimeBytesUsedValues.

	   Filter by analytics.by_modified_time.bytes_used.values
	*/
	AnalyticsByModifiedTimeBytesUsedValuesQueryParameter *int64

	/* AnalyticsBytesUsed.

	   Filter by analytics.bytes_used
	*/
	AnalyticsBytesUsedQueryParameter *int64

	/* AnalyticsFileCount.

	   Filter by analytics.file_count
	*/
	AnalyticsFileCountQueryParameter *int64

	/* AnalyticsHistogramByTimeLabels.

	     Request that returned [`analytics_histogram_by_time`](#model-analytics_histogram_by_time) objects including values associated with the specified labels. <br/>
	As described in the object description, the labels may take the following forms:<ul>
	<li><i>partial-date</i></li>
	<li><tt><span>-</span>-</tt><i>partial-date</i></li>
	<li><i>partial-date</i><tt><span>-</span>-</tt></li>
	<li><i>partial-date</i><span><tt>-</span>-</tt><i>partial-date</i></li>
	<li><tt>unknown</tt></li>
	</ul>Intervals that the system would not normally return may be specified.  In this case, the appropriate values and percentages summarizing all files with a time-based attribute within the indicated period of time are calculated and returned in the response.  However, there are some restrictions:<ul>
	<li>Any <i>partial-date</i> specified as the beginning or end of an interval must be tracked by the system.  Valid <i>partial-date</i>s may be determined by making an OPTIONS request to the <tt>/storage/volumes/{volume.uuid}/files/{path}</tt> endpoint.</li>
	<li>Intervals may not mix week-based <i>partial-date</i>s in the form <i>yyyy</i>-W<i>ww</i> with other types of <i>partial-date</i>s.</li>
	</ul>

	*/
	AnalyticsHistogramByTimeLabelsQueryParameter []string

	/* AnalyticsSubdirCount.

	   Filter by analytics.subdir_count
	*/
	AnalyticsSubdirCountQueryParameter *int64

	/* ByteOffset.

	   The file offset to start reading from.
	*/
	ByteOffsetQueryParameter *int64

	/* BytesUsed.

	   Filter by bytes_used
	*/
	BytesUsedQueryParameter *int64

	/* ChangedTime.

	   Filter by changed_time
	*/
	ChangedTimeQueryParameter *string

	/* ConstituentName.

	   Filter by constituent.name
	*/
	ConstituentNameQueryParameter *string

	/* ConstituentUUID.

	   Filter by constituent.uuid
	*/
	ConstituentUUIDQueryParameter *string

	/* CreationTime.

	   Filter by creation_time
	*/
	CreationTimeQueryParameter *string

	/* Fields.

	   Specify the fields to return.
	*/
	FieldsQueryParameter []string

	/* FillEnabled.

	   Filter by fill_enabled
	*/
	FillEnabledQueryParameter *bool

	/* GroupID.

	   Filter by group_id
	*/
	GroupIDQueryParameter *int64

	/* HardLinksCount.

	   Filter by hard_links_count
	*/
	HardLinksCountQueryParameter *int64

	/* HolesSize.

	   Filter by holes.size
	*/
	HolesSizeQueryParameter *int64

	/* HolesStart.

	   Filter by holes.start
	*/
	HolesStartQueryParameter *int64

	/* InodeGeneration.

	   Filter by inode_generation
	*/
	InodeGenerationQueryParameter *int64

	/* InodeNumber.

	   Filter by inode_number
	*/
	InodeNumberQueryParameter *int64

	/* IsEmpty.

	   Filter by is_empty
	*/
	IsEmptyQueryParameter *bool

	/* IsJunction.

	   Filter by is_junction
	*/
	IsJunctionQueryParameter *bool

	/* IsSnapshot.

	   Filter by is_snapshot
	*/
	IsSnapshotQueryParameter *bool

	/* IsVMAligned.

	   Filter by is_vm_aligned
	*/
	IsVMAlignedQueryParameter *bool

	/* Length.

	   Length of the range in bytes.
	*/
	LengthQueryParameter *int64

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecordsQueryParameter *int64

	/* ModifiedTime.

	   Filter by modified_time
	*/
	ModifiedTimeQueryParameter *string

	/* Name.

	   Filter by name
	*/
	NameQueryParameter *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderByQueryParameter []string

	/* OverwriteEnabled.

	   Filter by overwrite_enabled
	*/
	OverwriteEnabledQueryParameter *bool

	/* OwnerID.

	   Filter by owner_id
	*/
	OwnerIDQueryParameter *int64

	/* Path.

	   Relative path of a file or directory in the volume. The path field requires using "%2E" to represent "." and "%2F" to represent "/" for the path provided.
	*/
	PathPathParameter string

	/* QosPolicyName.

	   Filter by qos_policy.name
	*/
	QosPolicyNameQueryParameter *string

	/* QosPolicyUUID.

	   Filter by qos_policy.uuid
	*/
	QosPolicyUUIDQueryParameter *string

	/* ReturnMetadata.

	   If true, the request returns metadata for the the directory or file specified in the path.
	*/
	ReturnMetadataQueryParameter *bool

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecordsQueryParameter *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeoutQueryParameter *int64

	/* Size.

	   Filter by size
	*/
	SizeQueryParameter *int64

	/* Target.

	   Filter by target
	*/
	TargetQueryParameter *string

	/* Type.

	   Filter by type
	*/
	TypeQueryParameter *string

	/* UniqueBytes.

	   Filter by unique_bytes
	*/
	UniqueBytesQueryParameter *int64

	/* UnixPermissions.

	   Filter by unix_permissions
	*/
	UnixPermissionsQueryParameter *int64

	/* VolumeName.

	   Filter by volume.name
	*/
	VolumeNameQueryParameter *string

	/* VolumeUUID.

	   Volume UUID
	*/
	VolumeUUIDPathParameter string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the file info collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FileInfoCollectionGetParams) WithDefaults() *FileInfoCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the file info collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FileInfoCollectionGetParams) SetDefaults() {
	var (
		returnMetadataQueryParameterDefault = bool(false)

		returnRecordsQueryParameterDefault = bool(true)

		returnTimeoutQueryParameterDefault = int64(15)
	)

	val := FileInfoCollectionGetParams{
		ReturnMetadataQueryParameter: &returnMetadataQueryParameterDefault,
		ReturnRecordsQueryParameter:  &returnRecordsQueryParameterDefault,
		ReturnTimeoutQueryParameter:  &returnTimeoutQueryParameterDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the file info collection get params
func (o *FileInfoCollectionGetParams) WithTimeout(timeout time.Duration) *FileInfoCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the file info collection get params
func (o *FileInfoCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the file info collection get params
func (o *FileInfoCollectionGetParams) WithContext(ctx context.Context) *FileInfoCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the file info collection get params
func (o *FileInfoCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the file info collection get params
func (o *FileInfoCollectionGetParams) WithHTTPClient(client *http.Client) *FileInfoCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the file info collection get params
func (o *FileInfoCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccessedTimeQueryParameter adds the accessedTime to the file info collection get params
func (o *FileInfoCollectionGetParams) WithAccessedTimeQueryParameter(accessedTime *string) *FileInfoCollectionGetParams {
	o.SetAccessedTimeQueryParameter(accessedTime)
	return o
}

// SetAccessedTimeQueryParameter adds the accessedTime to the file info collection get params
func (o *FileInfoCollectionGetParams) SetAccessedTimeQueryParameter(accessedTime *string) {
	o.AccessedTimeQueryParameter = accessedTime
}

// WithAnalyticsByAccessedTimeBytesUsedLabelsQueryParameter adds the analyticsByAccessedTimeBytesUsedLabels to the file info collection get params
func (o *FileInfoCollectionGetParams) WithAnalyticsByAccessedTimeBytesUsedLabelsQueryParameter(analyticsByAccessedTimeBytesUsedLabels *string) *FileInfoCollectionGetParams {
	o.SetAnalyticsByAccessedTimeBytesUsedLabelsQueryParameter(analyticsByAccessedTimeBytesUsedLabels)
	return o
}

// SetAnalyticsByAccessedTimeBytesUsedLabelsQueryParameter adds the analyticsByAccessedTimeBytesUsedLabels to the file info collection get params
func (o *FileInfoCollectionGetParams) SetAnalyticsByAccessedTimeBytesUsedLabelsQueryParameter(analyticsByAccessedTimeBytesUsedLabels *string) {
	o.AnalyticsByAccessedTimeBytesUsedLabelsQueryParameter = analyticsByAccessedTimeBytesUsedLabels
}

// WithAnalyticsByAccessedTimeBytesUsedNewestLabelQueryParameter adds the analyticsByAccessedTimeBytesUsedNewestLabel to the file info collection get params
func (o *FileInfoCollectionGetParams) WithAnalyticsByAccessedTimeBytesUsedNewestLabelQueryParameter(analyticsByAccessedTimeBytesUsedNewestLabel *string) *FileInfoCollectionGetParams {
	o.SetAnalyticsByAccessedTimeBytesUsedNewestLabelQueryParameter(analyticsByAccessedTimeBytesUsedNewestLabel)
	return o
}

// SetAnalyticsByAccessedTimeBytesUsedNewestLabelQueryParameter adds the analyticsByAccessedTimeBytesUsedNewestLabel to the file info collection get params
func (o *FileInfoCollectionGetParams) SetAnalyticsByAccessedTimeBytesUsedNewestLabelQueryParameter(analyticsByAccessedTimeBytesUsedNewestLabel *string) {
	o.AnalyticsByAccessedTimeBytesUsedNewestLabelQueryParameter = analyticsByAccessedTimeBytesUsedNewestLabel
}

// WithAnalyticsByAccessedTimeBytesUsedOldestLabelQueryParameter adds the analyticsByAccessedTimeBytesUsedOldestLabel to the file info collection get params
func (o *FileInfoCollectionGetParams) WithAnalyticsByAccessedTimeBytesUsedOldestLabelQueryParameter(analyticsByAccessedTimeBytesUsedOldestLabel *string) *FileInfoCollectionGetParams {
	o.SetAnalyticsByAccessedTimeBytesUsedOldestLabelQueryParameter(analyticsByAccessedTimeBytesUsedOldestLabel)
	return o
}

// SetAnalyticsByAccessedTimeBytesUsedOldestLabelQueryParameter adds the analyticsByAccessedTimeBytesUsedOldestLabel to the file info collection get params
func (o *FileInfoCollectionGetParams) SetAnalyticsByAccessedTimeBytesUsedOldestLabelQueryParameter(analyticsByAccessedTimeBytesUsedOldestLabel *string) {
	o.AnalyticsByAccessedTimeBytesUsedOldestLabelQueryParameter = analyticsByAccessedTimeBytesUsedOldestLabel
}

// WithAnalyticsByAccessedTimeBytesUsedPercentagesQueryParameter adds the analyticsByAccessedTimeBytesUsedPercentages to the file info collection get params
func (o *FileInfoCollectionGetParams) WithAnalyticsByAccessedTimeBytesUsedPercentagesQueryParameter(analyticsByAccessedTimeBytesUsedPercentages *float64) *FileInfoCollectionGetParams {
	o.SetAnalyticsByAccessedTimeBytesUsedPercentagesQueryParameter(analyticsByAccessedTimeBytesUsedPercentages)
	return o
}

// SetAnalyticsByAccessedTimeBytesUsedPercentagesQueryParameter adds the analyticsByAccessedTimeBytesUsedPercentages to the file info collection get params
func (o *FileInfoCollectionGetParams) SetAnalyticsByAccessedTimeBytesUsedPercentagesQueryParameter(analyticsByAccessedTimeBytesUsedPercentages *float64) {
	o.AnalyticsByAccessedTimeBytesUsedPercentagesQueryParameter = analyticsByAccessedTimeBytesUsedPercentages
}

// WithAnalyticsByAccessedTimeBytesUsedValuesQueryParameter adds the analyticsByAccessedTimeBytesUsedValues to the file info collection get params
func (o *FileInfoCollectionGetParams) WithAnalyticsByAccessedTimeBytesUsedValuesQueryParameter(analyticsByAccessedTimeBytesUsedValues *int64) *FileInfoCollectionGetParams {
	o.SetAnalyticsByAccessedTimeBytesUsedValuesQueryParameter(analyticsByAccessedTimeBytesUsedValues)
	return o
}

// SetAnalyticsByAccessedTimeBytesUsedValuesQueryParameter adds the analyticsByAccessedTimeBytesUsedValues to the file info collection get params
func (o *FileInfoCollectionGetParams) SetAnalyticsByAccessedTimeBytesUsedValuesQueryParameter(analyticsByAccessedTimeBytesUsedValues *int64) {
	o.AnalyticsByAccessedTimeBytesUsedValuesQueryParameter = analyticsByAccessedTimeBytesUsedValues
}

// WithAnalyticsByModifiedTimeBytesUsedLabelsQueryParameter adds the analyticsByModifiedTimeBytesUsedLabels to the file info collection get params
func (o *FileInfoCollectionGetParams) WithAnalyticsByModifiedTimeBytesUsedLabelsQueryParameter(analyticsByModifiedTimeBytesUsedLabels *string) *FileInfoCollectionGetParams {
	o.SetAnalyticsByModifiedTimeBytesUsedLabelsQueryParameter(analyticsByModifiedTimeBytesUsedLabels)
	return o
}

// SetAnalyticsByModifiedTimeBytesUsedLabelsQueryParameter adds the analyticsByModifiedTimeBytesUsedLabels to the file info collection get params
func (o *FileInfoCollectionGetParams) SetAnalyticsByModifiedTimeBytesUsedLabelsQueryParameter(analyticsByModifiedTimeBytesUsedLabels *string) {
	o.AnalyticsByModifiedTimeBytesUsedLabelsQueryParameter = analyticsByModifiedTimeBytesUsedLabels
}

// WithAnalyticsByModifiedTimeBytesUsedNewestLabelQueryParameter adds the analyticsByModifiedTimeBytesUsedNewestLabel to the file info collection get params
func (o *FileInfoCollectionGetParams) WithAnalyticsByModifiedTimeBytesUsedNewestLabelQueryParameter(analyticsByModifiedTimeBytesUsedNewestLabel *string) *FileInfoCollectionGetParams {
	o.SetAnalyticsByModifiedTimeBytesUsedNewestLabelQueryParameter(analyticsByModifiedTimeBytesUsedNewestLabel)
	return o
}

// SetAnalyticsByModifiedTimeBytesUsedNewestLabelQueryParameter adds the analyticsByModifiedTimeBytesUsedNewestLabel to the file info collection get params
func (o *FileInfoCollectionGetParams) SetAnalyticsByModifiedTimeBytesUsedNewestLabelQueryParameter(analyticsByModifiedTimeBytesUsedNewestLabel *string) {
	o.AnalyticsByModifiedTimeBytesUsedNewestLabelQueryParameter = analyticsByModifiedTimeBytesUsedNewestLabel
}

// WithAnalyticsByModifiedTimeBytesUsedOldestLabelQueryParameter adds the analyticsByModifiedTimeBytesUsedOldestLabel to the file info collection get params
func (o *FileInfoCollectionGetParams) WithAnalyticsByModifiedTimeBytesUsedOldestLabelQueryParameter(analyticsByModifiedTimeBytesUsedOldestLabel *string) *FileInfoCollectionGetParams {
	o.SetAnalyticsByModifiedTimeBytesUsedOldestLabelQueryParameter(analyticsByModifiedTimeBytesUsedOldestLabel)
	return o
}

// SetAnalyticsByModifiedTimeBytesUsedOldestLabelQueryParameter adds the analyticsByModifiedTimeBytesUsedOldestLabel to the file info collection get params
func (o *FileInfoCollectionGetParams) SetAnalyticsByModifiedTimeBytesUsedOldestLabelQueryParameter(analyticsByModifiedTimeBytesUsedOldestLabel *string) {
	o.AnalyticsByModifiedTimeBytesUsedOldestLabelQueryParameter = analyticsByModifiedTimeBytesUsedOldestLabel
}

// WithAnalyticsByModifiedTimeBytesUsedPercentagesQueryParameter adds the analyticsByModifiedTimeBytesUsedPercentages to the file info collection get params
func (o *FileInfoCollectionGetParams) WithAnalyticsByModifiedTimeBytesUsedPercentagesQueryParameter(analyticsByModifiedTimeBytesUsedPercentages *float64) *FileInfoCollectionGetParams {
	o.SetAnalyticsByModifiedTimeBytesUsedPercentagesQueryParameter(analyticsByModifiedTimeBytesUsedPercentages)
	return o
}

// SetAnalyticsByModifiedTimeBytesUsedPercentagesQueryParameter adds the analyticsByModifiedTimeBytesUsedPercentages to the file info collection get params
func (o *FileInfoCollectionGetParams) SetAnalyticsByModifiedTimeBytesUsedPercentagesQueryParameter(analyticsByModifiedTimeBytesUsedPercentages *float64) {
	o.AnalyticsByModifiedTimeBytesUsedPercentagesQueryParameter = analyticsByModifiedTimeBytesUsedPercentages
}

// WithAnalyticsByModifiedTimeBytesUsedValuesQueryParameter adds the analyticsByModifiedTimeBytesUsedValues to the file info collection get params
func (o *FileInfoCollectionGetParams) WithAnalyticsByModifiedTimeBytesUsedValuesQueryParameter(analyticsByModifiedTimeBytesUsedValues *int64) *FileInfoCollectionGetParams {
	o.SetAnalyticsByModifiedTimeBytesUsedValuesQueryParameter(analyticsByModifiedTimeBytesUsedValues)
	return o
}

// SetAnalyticsByModifiedTimeBytesUsedValuesQueryParameter adds the analyticsByModifiedTimeBytesUsedValues to the file info collection get params
func (o *FileInfoCollectionGetParams) SetAnalyticsByModifiedTimeBytesUsedValuesQueryParameter(analyticsByModifiedTimeBytesUsedValues *int64) {
	o.AnalyticsByModifiedTimeBytesUsedValuesQueryParameter = analyticsByModifiedTimeBytesUsedValues
}

// WithAnalyticsBytesUsedQueryParameter adds the analyticsBytesUsed to the file info collection get params
func (o *FileInfoCollectionGetParams) WithAnalyticsBytesUsedQueryParameter(analyticsBytesUsed *int64) *FileInfoCollectionGetParams {
	o.SetAnalyticsBytesUsedQueryParameter(analyticsBytesUsed)
	return o
}

// SetAnalyticsBytesUsedQueryParameter adds the analyticsBytesUsed to the file info collection get params
func (o *FileInfoCollectionGetParams) SetAnalyticsBytesUsedQueryParameter(analyticsBytesUsed *int64) {
	o.AnalyticsBytesUsedQueryParameter = analyticsBytesUsed
}

// WithAnalyticsFileCountQueryParameter adds the analyticsFileCount to the file info collection get params
func (o *FileInfoCollectionGetParams) WithAnalyticsFileCountQueryParameter(analyticsFileCount *int64) *FileInfoCollectionGetParams {
	o.SetAnalyticsFileCountQueryParameter(analyticsFileCount)
	return o
}

// SetAnalyticsFileCountQueryParameter adds the analyticsFileCount to the file info collection get params
func (o *FileInfoCollectionGetParams) SetAnalyticsFileCountQueryParameter(analyticsFileCount *int64) {
	o.AnalyticsFileCountQueryParameter = analyticsFileCount
}

// WithAnalyticsHistogramByTimeLabelsQueryParameter adds the analyticsHistogramByTimeLabels to the file info collection get params
func (o *FileInfoCollectionGetParams) WithAnalyticsHistogramByTimeLabelsQueryParameter(analyticsHistogramByTimeLabels []string) *FileInfoCollectionGetParams {
	o.SetAnalyticsHistogramByTimeLabelsQueryParameter(analyticsHistogramByTimeLabels)
	return o
}

// SetAnalyticsHistogramByTimeLabelsQueryParameter adds the analyticsHistogramByTimeLabels to the file info collection get params
func (o *FileInfoCollectionGetParams) SetAnalyticsHistogramByTimeLabelsQueryParameter(analyticsHistogramByTimeLabels []string) {
	o.AnalyticsHistogramByTimeLabelsQueryParameter = analyticsHistogramByTimeLabels
}

// WithAnalyticsSubdirCountQueryParameter adds the analyticsSubdirCount to the file info collection get params
func (o *FileInfoCollectionGetParams) WithAnalyticsSubdirCountQueryParameter(analyticsSubdirCount *int64) *FileInfoCollectionGetParams {
	o.SetAnalyticsSubdirCountQueryParameter(analyticsSubdirCount)
	return o
}

// SetAnalyticsSubdirCountQueryParameter adds the analyticsSubdirCount to the file info collection get params
func (o *FileInfoCollectionGetParams) SetAnalyticsSubdirCountQueryParameter(analyticsSubdirCount *int64) {
	o.AnalyticsSubdirCountQueryParameter = analyticsSubdirCount
}

// WithByteOffsetQueryParameter adds the byteOffset to the file info collection get params
func (o *FileInfoCollectionGetParams) WithByteOffsetQueryParameter(byteOffset *int64) *FileInfoCollectionGetParams {
	o.SetByteOffsetQueryParameter(byteOffset)
	return o
}

// SetByteOffsetQueryParameter adds the byteOffset to the file info collection get params
func (o *FileInfoCollectionGetParams) SetByteOffsetQueryParameter(byteOffset *int64) {
	o.ByteOffsetQueryParameter = byteOffset
}

// WithBytesUsedQueryParameter adds the bytesUsed to the file info collection get params
func (o *FileInfoCollectionGetParams) WithBytesUsedQueryParameter(bytesUsed *int64) *FileInfoCollectionGetParams {
	o.SetBytesUsedQueryParameter(bytesUsed)
	return o
}

// SetBytesUsedQueryParameter adds the bytesUsed to the file info collection get params
func (o *FileInfoCollectionGetParams) SetBytesUsedQueryParameter(bytesUsed *int64) {
	o.BytesUsedQueryParameter = bytesUsed
}

// WithChangedTimeQueryParameter adds the changedTime to the file info collection get params
func (o *FileInfoCollectionGetParams) WithChangedTimeQueryParameter(changedTime *string) *FileInfoCollectionGetParams {
	o.SetChangedTimeQueryParameter(changedTime)
	return o
}

// SetChangedTimeQueryParameter adds the changedTime to the file info collection get params
func (o *FileInfoCollectionGetParams) SetChangedTimeQueryParameter(changedTime *string) {
	o.ChangedTimeQueryParameter = changedTime
}

// WithConstituentNameQueryParameter adds the constituentName to the file info collection get params
func (o *FileInfoCollectionGetParams) WithConstituentNameQueryParameter(constituentName *string) *FileInfoCollectionGetParams {
	o.SetConstituentNameQueryParameter(constituentName)
	return o
}

// SetConstituentNameQueryParameter adds the constituentName to the file info collection get params
func (o *FileInfoCollectionGetParams) SetConstituentNameQueryParameter(constituentName *string) {
	o.ConstituentNameQueryParameter = constituentName
}

// WithConstituentUUIDQueryParameter adds the constituentUUID to the file info collection get params
func (o *FileInfoCollectionGetParams) WithConstituentUUIDQueryParameter(constituentUUID *string) *FileInfoCollectionGetParams {
	o.SetConstituentUUIDQueryParameter(constituentUUID)
	return o
}

// SetConstituentUUIDQueryParameter adds the constituentUuid to the file info collection get params
func (o *FileInfoCollectionGetParams) SetConstituentUUIDQueryParameter(constituentUUID *string) {
	o.ConstituentUUIDQueryParameter = constituentUUID
}

// WithCreationTimeQueryParameter adds the creationTime to the file info collection get params
func (o *FileInfoCollectionGetParams) WithCreationTimeQueryParameter(creationTime *string) *FileInfoCollectionGetParams {
	o.SetCreationTimeQueryParameter(creationTime)
	return o
}

// SetCreationTimeQueryParameter adds the creationTime to the file info collection get params
func (o *FileInfoCollectionGetParams) SetCreationTimeQueryParameter(creationTime *string) {
	o.CreationTimeQueryParameter = creationTime
}

// WithFieldsQueryParameter adds the fields to the file info collection get params
func (o *FileInfoCollectionGetParams) WithFieldsQueryParameter(fields []string) *FileInfoCollectionGetParams {
	o.SetFieldsQueryParameter(fields)
	return o
}

// SetFieldsQueryParameter adds the fields to the file info collection get params
func (o *FileInfoCollectionGetParams) SetFieldsQueryParameter(fields []string) {
	o.FieldsQueryParameter = fields
}

// WithFillEnabledQueryParameter adds the fillEnabled to the file info collection get params
func (o *FileInfoCollectionGetParams) WithFillEnabledQueryParameter(fillEnabled *bool) *FileInfoCollectionGetParams {
	o.SetFillEnabledQueryParameter(fillEnabled)
	return o
}

// SetFillEnabledQueryParameter adds the fillEnabled to the file info collection get params
func (o *FileInfoCollectionGetParams) SetFillEnabledQueryParameter(fillEnabled *bool) {
	o.FillEnabledQueryParameter = fillEnabled
}

// WithGroupIDQueryParameter adds the groupID to the file info collection get params
func (o *FileInfoCollectionGetParams) WithGroupIDQueryParameter(groupID *int64) *FileInfoCollectionGetParams {
	o.SetGroupIDQueryParameter(groupID)
	return o
}

// SetGroupIDQueryParameter adds the groupId to the file info collection get params
func (o *FileInfoCollectionGetParams) SetGroupIDQueryParameter(groupID *int64) {
	o.GroupIDQueryParameter = groupID
}

// WithHardLinksCountQueryParameter adds the hardLinksCount to the file info collection get params
func (o *FileInfoCollectionGetParams) WithHardLinksCountQueryParameter(hardLinksCount *int64) *FileInfoCollectionGetParams {
	o.SetHardLinksCountQueryParameter(hardLinksCount)
	return o
}

// SetHardLinksCountQueryParameter adds the hardLinksCount to the file info collection get params
func (o *FileInfoCollectionGetParams) SetHardLinksCountQueryParameter(hardLinksCount *int64) {
	o.HardLinksCountQueryParameter = hardLinksCount
}

// WithHolesSizeQueryParameter adds the holesSize to the file info collection get params
func (o *FileInfoCollectionGetParams) WithHolesSizeQueryParameter(holesSize *int64) *FileInfoCollectionGetParams {
	o.SetHolesSizeQueryParameter(holesSize)
	return o
}

// SetHolesSizeQueryParameter adds the holesSize to the file info collection get params
func (o *FileInfoCollectionGetParams) SetHolesSizeQueryParameter(holesSize *int64) {
	o.HolesSizeQueryParameter = holesSize
}

// WithHolesStartQueryParameter adds the holesStart to the file info collection get params
func (o *FileInfoCollectionGetParams) WithHolesStartQueryParameter(holesStart *int64) *FileInfoCollectionGetParams {
	o.SetHolesStartQueryParameter(holesStart)
	return o
}

// SetHolesStartQueryParameter adds the holesStart to the file info collection get params
func (o *FileInfoCollectionGetParams) SetHolesStartQueryParameter(holesStart *int64) {
	o.HolesStartQueryParameter = holesStart
}

// WithInodeGenerationQueryParameter adds the inodeGeneration to the file info collection get params
func (o *FileInfoCollectionGetParams) WithInodeGenerationQueryParameter(inodeGeneration *int64) *FileInfoCollectionGetParams {
	o.SetInodeGenerationQueryParameter(inodeGeneration)
	return o
}

// SetInodeGenerationQueryParameter adds the inodeGeneration to the file info collection get params
func (o *FileInfoCollectionGetParams) SetInodeGenerationQueryParameter(inodeGeneration *int64) {
	o.InodeGenerationQueryParameter = inodeGeneration
}

// WithInodeNumberQueryParameter adds the inodeNumber to the file info collection get params
func (o *FileInfoCollectionGetParams) WithInodeNumberQueryParameter(inodeNumber *int64) *FileInfoCollectionGetParams {
	o.SetInodeNumberQueryParameter(inodeNumber)
	return o
}

// SetInodeNumberQueryParameter adds the inodeNumber to the file info collection get params
func (o *FileInfoCollectionGetParams) SetInodeNumberQueryParameter(inodeNumber *int64) {
	o.InodeNumberQueryParameter = inodeNumber
}

// WithIsEmptyQueryParameter adds the isEmpty to the file info collection get params
func (o *FileInfoCollectionGetParams) WithIsEmptyQueryParameter(isEmpty *bool) *FileInfoCollectionGetParams {
	o.SetIsEmptyQueryParameter(isEmpty)
	return o
}

// SetIsEmptyQueryParameter adds the isEmpty to the file info collection get params
func (o *FileInfoCollectionGetParams) SetIsEmptyQueryParameter(isEmpty *bool) {
	o.IsEmptyQueryParameter = isEmpty
}

// WithIsJunctionQueryParameter adds the isJunction to the file info collection get params
func (o *FileInfoCollectionGetParams) WithIsJunctionQueryParameter(isJunction *bool) *FileInfoCollectionGetParams {
	o.SetIsJunctionQueryParameter(isJunction)
	return o
}

// SetIsJunctionQueryParameter adds the isJunction to the file info collection get params
func (o *FileInfoCollectionGetParams) SetIsJunctionQueryParameter(isJunction *bool) {
	o.IsJunctionQueryParameter = isJunction
}

// WithIsSnapshotQueryParameter adds the isSnapshot to the file info collection get params
func (o *FileInfoCollectionGetParams) WithIsSnapshotQueryParameter(isSnapshot *bool) *FileInfoCollectionGetParams {
	o.SetIsSnapshotQueryParameter(isSnapshot)
	return o
}

// SetIsSnapshotQueryParameter adds the isSnapshot to the file info collection get params
func (o *FileInfoCollectionGetParams) SetIsSnapshotQueryParameter(isSnapshot *bool) {
	o.IsSnapshotQueryParameter = isSnapshot
}

// WithIsVMAlignedQueryParameter adds the isVMAligned to the file info collection get params
func (o *FileInfoCollectionGetParams) WithIsVMAlignedQueryParameter(isVMAligned *bool) *FileInfoCollectionGetParams {
	o.SetIsVMAlignedQueryParameter(isVMAligned)
	return o
}

// SetIsVMAlignedQueryParameter adds the isVmAligned to the file info collection get params
func (o *FileInfoCollectionGetParams) SetIsVMAlignedQueryParameter(isVMAligned *bool) {
	o.IsVMAlignedQueryParameter = isVMAligned
}

// WithLengthQueryParameter adds the length to the file info collection get params
func (o *FileInfoCollectionGetParams) WithLengthQueryParameter(length *int64) *FileInfoCollectionGetParams {
	o.SetLengthQueryParameter(length)
	return o
}

// SetLengthQueryParameter adds the length to the file info collection get params
func (o *FileInfoCollectionGetParams) SetLengthQueryParameter(length *int64) {
	o.LengthQueryParameter = length
}

// WithMaxRecordsQueryParameter adds the maxRecords to the file info collection get params
func (o *FileInfoCollectionGetParams) WithMaxRecordsQueryParameter(maxRecords *int64) *FileInfoCollectionGetParams {
	o.SetMaxRecordsQueryParameter(maxRecords)
	return o
}

// SetMaxRecordsQueryParameter adds the maxRecords to the file info collection get params
func (o *FileInfoCollectionGetParams) SetMaxRecordsQueryParameter(maxRecords *int64) {
	o.MaxRecordsQueryParameter = maxRecords
}

// WithModifiedTimeQueryParameter adds the modifiedTime to the file info collection get params
func (o *FileInfoCollectionGetParams) WithModifiedTimeQueryParameter(modifiedTime *string) *FileInfoCollectionGetParams {
	o.SetModifiedTimeQueryParameter(modifiedTime)
	return o
}

// SetModifiedTimeQueryParameter adds the modifiedTime to the file info collection get params
func (o *FileInfoCollectionGetParams) SetModifiedTimeQueryParameter(modifiedTime *string) {
	o.ModifiedTimeQueryParameter = modifiedTime
}

// WithNameQueryParameter adds the name to the file info collection get params
func (o *FileInfoCollectionGetParams) WithNameQueryParameter(name *string) *FileInfoCollectionGetParams {
	o.SetNameQueryParameter(name)
	return o
}

// SetNameQueryParameter adds the name to the file info collection get params
func (o *FileInfoCollectionGetParams) SetNameQueryParameter(name *string) {
	o.NameQueryParameter = name
}

// WithOrderByQueryParameter adds the orderBy to the file info collection get params
func (o *FileInfoCollectionGetParams) WithOrderByQueryParameter(orderBy []string) *FileInfoCollectionGetParams {
	o.SetOrderByQueryParameter(orderBy)
	return o
}

// SetOrderByQueryParameter adds the orderBy to the file info collection get params
func (o *FileInfoCollectionGetParams) SetOrderByQueryParameter(orderBy []string) {
	o.OrderByQueryParameter = orderBy
}

// WithOverwriteEnabledQueryParameter adds the overwriteEnabled to the file info collection get params
func (o *FileInfoCollectionGetParams) WithOverwriteEnabledQueryParameter(overwriteEnabled *bool) *FileInfoCollectionGetParams {
	o.SetOverwriteEnabledQueryParameter(overwriteEnabled)
	return o
}

// SetOverwriteEnabledQueryParameter adds the overwriteEnabled to the file info collection get params
func (o *FileInfoCollectionGetParams) SetOverwriteEnabledQueryParameter(overwriteEnabled *bool) {
	o.OverwriteEnabledQueryParameter = overwriteEnabled
}

// WithOwnerIDQueryParameter adds the ownerID to the file info collection get params
func (o *FileInfoCollectionGetParams) WithOwnerIDQueryParameter(ownerID *int64) *FileInfoCollectionGetParams {
	o.SetOwnerIDQueryParameter(ownerID)
	return o
}

// SetOwnerIDQueryParameter adds the ownerId to the file info collection get params
func (o *FileInfoCollectionGetParams) SetOwnerIDQueryParameter(ownerID *int64) {
	o.OwnerIDQueryParameter = ownerID
}

// WithPathPathParameter adds the path to the file info collection get params
func (o *FileInfoCollectionGetParams) WithPathPathParameter(path string) *FileInfoCollectionGetParams {
	o.SetPathPathParameter(path)
	return o
}

// SetPathPathParameter adds the path to the file info collection get params
func (o *FileInfoCollectionGetParams) SetPathPathParameter(path string) {
	o.PathPathParameter = path
}

// WithQosPolicyNameQueryParameter adds the qosPolicyName to the file info collection get params
func (o *FileInfoCollectionGetParams) WithQosPolicyNameQueryParameter(qosPolicyName *string) *FileInfoCollectionGetParams {
	o.SetQosPolicyNameQueryParameter(qosPolicyName)
	return o
}

// SetQosPolicyNameQueryParameter adds the qosPolicyName to the file info collection get params
func (o *FileInfoCollectionGetParams) SetQosPolicyNameQueryParameter(qosPolicyName *string) {
	o.QosPolicyNameQueryParameter = qosPolicyName
}

// WithQosPolicyUUIDQueryParameter adds the qosPolicyUUID to the file info collection get params
func (o *FileInfoCollectionGetParams) WithQosPolicyUUIDQueryParameter(qosPolicyUUID *string) *FileInfoCollectionGetParams {
	o.SetQosPolicyUUIDQueryParameter(qosPolicyUUID)
	return o
}

// SetQosPolicyUUIDQueryParameter adds the qosPolicyUuid to the file info collection get params
func (o *FileInfoCollectionGetParams) SetQosPolicyUUIDQueryParameter(qosPolicyUUID *string) {
	o.QosPolicyUUIDQueryParameter = qosPolicyUUID
}

// WithReturnMetadataQueryParameter adds the returnMetadata to the file info collection get params
func (o *FileInfoCollectionGetParams) WithReturnMetadataQueryParameter(returnMetadata *bool) *FileInfoCollectionGetParams {
	o.SetReturnMetadataQueryParameter(returnMetadata)
	return o
}

// SetReturnMetadataQueryParameter adds the returnMetadata to the file info collection get params
func (o *FileInfoCollectionGetParams) SetReturnMetadataQueryParameter(returnMetadata *bool) {
	o.ReturnMetadataQueryParameter = returnMetadata
}

// WithReturnRecordsQueryParameter adds the returnRecords to the file info collection get params
func (o *FileInfoCollectionGetParams) WithReturnRecordsQueryParameter(returnRecords *bool) *FileInfoCollectionGetParams {
	o.SetReturnRecordsQueryParameter(returnRecords)
	return o
}

// SetReturnRecordsQueryParameter adds the returnRecords to the file info collection get params
func (o *FileInfoCollectionGetParams) SetReturnRecordsQueryParameter(returnRecords *bool) {
	o.ReturnRecordsQueryParameter = returnRecords
}

// WithReturnTimeoutQueryParameter adds the returnTimeout to the file info collection get params
func (o *FileInfoCollectionGetParams) WithReturnTimeoutQueryParameter(returnTimeout *int64) *FileInfoCollectionGetParams {
	o.SetReturnTimeoutQueryParameter(returnTimeout)
	return o
}

// SetReturnTimeoutQueryParameter adds the returnTimeout to the file info collection get params
func (o *FileInfoCollectionGetParams) SetReturnTimeoutQueryParameter(returnTimeout *int64) {
	o.ReturnTimeoutQueryParameter = returnTimeout
}

// WithSizeQueryParameter adds the size to the file info collection get params
func (o *FileInfoCollectionGetParams) WithSizeQueryParameter(size *int64) *FileInfoCollectionGetParams {
	o.SetSizeQueryParameter(size)
	return o
}

// SetSizeQueryParameter adds the size to the file info collection get params
func (o *FileInfoCollectionGetParams) SetSizeQueryParameter(size *int64) {
	o.SizeQueryParameter = size
}

// WithTargetQueryParameter adds the target to the file info collection get params
func (o *FileInfoCollectionGetParams) WithTargetQueryParameter(target *string) *FileInfoCollectionGetParams {
	o.SetTargetQueryParameter(target)
	return o
}

// SetTargetQueryParameter adds the target to the file info collection get params
func (o *FileInfoCollectionGetParams) SetTargetQueryParameter(target *string) {
	o.TargetQueryParameter = target
}

// WithTypeQueryParameter adds the typeVar to the file info collection get params
func (o *FileInfoCollectionGetParams) WithTypeQueryParameter(typeVar *string) *FileInfoCollectionGetParams {
	o.SetTypeQueryParameter(typeVar)
	return o
}

// SetTypeQueryParameter adds the type to the file info collection get params
func (o *FileInfoCollectionGetParams) SetTypeQueryParameter(typeVar *string) {
	o.TypeQueryParameter = typeVar
}

// WithUniqueBytesQueryParameter adds the uniqueBytes to the file info collection get params
func (o *FileInfoCollectionGetParams) WithUniqueBytesQueryParameter(uniqueBytes *int64) *FileInfoCollectionGetParams {
	o.SetUniqueBytesQueryParameter(uniqueBytes)
	return o
}

// SetUniqueBytesQueryParameter adds the uniqueBytes to the file info collection get params
func (o *FileInfoCollectionGetParams) SetUniqueBytesQueryParameter(uniqueBytes *int64) {
	o.UniqueBytesQueryParameter = uniqueBytes
}

// WithUnixPermissionsQueryParameter adds the unixPermissions to the file info collection get params
func (o *FileInfoCollectionGetParams) WithUnixPermissionsQueryParameter(unixPermissions *int64) *FileInfoCollectionGetParams {
	o.SetUnixPermissionsQueryParameter(unixPermissions)
	return o
}

// SetUnixPermissionsQueryParameter adds the unixPermissions to the file info collection get params
func (o *FileInfoCollectionGetParams) SetUnixPermissionsQueryParameter(unixPermissions *int64) {
	o.UnixPermissionsQueryParameter = unixPermissions
}

// WithVolumeNameQueryParameter adds the volumeName to the file info collection get params
func (o *FileInfoCollectionGetParams) WithVolumeNameQueryParameter(volumeName *string) *FileInfoCollectionGetParams {
	o.SetVolumeNameQueryParameter(volumeName)
	return o
}

// SetVolumeNameQueryParameter adds the volumeName to the file info collection get params
func (o *FileInfoCollectionGetParams) SetVolumeNameQueryParameter(volumeName *string) {
	o.VolumeNameQueryParameter = volumeName
}

// WithVolumeUUIDPathParameter adds the volumeUUID to the file info collection get params
func (o *FileInfoCollectionGetParams) WithVolumeUUIDPathParameter(volumeUUID string) *FileInfoCollectionGetParams {
	o.SetVolumeUUIDPathParameter(volumeUUID)
	return o
}

// SetVolumeUUIDPathParameter adds the volumeUuid to the file info collection get params
func (o *FileInfoCollectionGetParams) SetVolumeUUIDPathParameter(volumeUUID string) {
	o.VolumeUUIDPathParameter = volumeUUID
}

// WriteToRequest writes these params to a swagger request
func (o *FileInfoCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AccessedTimeQueryParameter != nil {

		// query param accessed_time
		var qrAccessedTime string

		if o.AccessedTimeQueryParameter != nil {
			qrAccessedTime = *o.AccessedTimeQueryParameter
		}
		qAccessedTime := qrAccessedTime
		if qAccessedTime != "" {

			if err := r.SetQueryParam("accessed_time", qAccessedTime); err != nil {
				return err
			}
		}
	}

	if o.AnalyticsByAccessedTimeBytesUsedLabelsQueryParameter != nil {

		// query param analytics.by_accessed_time.bytes_used.labels
		var qrAnalyticsByAccessedTimeBytesUsedLabels string

		if o.AnalyticsByAccessedTimeBytesUsedLabelsQueryParameter != nil {
			qrAnalyticsByAccessedTimeBytesUsedLabels = *o.AnalyticsByAccessedTimeBytesUsedLabelsQueryParameter
		}
		qAnalyticsByAccessedTimeBytesUsedLabels := qrAnalyticsByAccessedTimeBytesUsedLabels
		if qAnalyticsByAccessedTimeBytesUsedLabels != "" {

			if err := r.SetQueryParam("analytics.by_accessed_time.bytes_used.labels", qAnalyticsByAccessedTimeBytesUsedLabels); err != nil {
				return err
			}
		}
	}

	if o.AnalyticsByAccessedTimeBytesUsedNewestLabelQueryParameter != nil {

		// query param analytics.by_accessed_time.bytes_used.newest_label
		var qrAnalyticsByAccessedTimeBytesUsedNewestLabel string

		if o.AnalyticsByAccessedTimeBytesUsedNewestLabelQueryParameter != nil {
			qrAnalyticsByAccessedTimeBytesUsedNewestLabel = *o.AnalyticsByAccessedTimeBytesUsedNewestLabelQueryParameter
		}
		qAnalyticsByAccessedTimeBytesUsedNewestLabel := qrAnalyticsByAccessedTimeBytesUsedNewestLabel
		if qAnalyticsByAccessedTimeBytesUsedNewestLabel != "" {

			if err := r.SetQueryParam("analytics.by_accessed_time.bytes_used.newest_label", qAnalyticsByAccessedTimeBytesUsedNewestLabel); err != nil {
				return err
			}
		}
	}

	if o.AnalyticsByAccessedTimeBytesUsedOldestLabelQueryParameter != nil {

		// query param analytics.by_accessed_time.bytes_used.oldest_label
		var qrAnalyticsByAccessedTimeBytesUsedOldestLabel string

		if o.AnalyticsByAccessedTimeBytesUsedOldestLabelQueryParameter != nil {
			qrAnalyticsByAccessedTimeBytesUsedOldestLabel = *o.AnalyticsByAccessedTimeBytesUsedOldestLabelQueryParameter
		}
		qAnalyticsByAccessedTimeBytesUsedOldestLabel := qrAnalyticsByAccessedTimeBytesUsedOldestLabel
		if qAnalyticsByAccessedTimeBytesUsedOldestLabel != "" {

			if err := r.SetQueryParam("analytics.by_accessed_time.bytes_used.oldest_label", qAnalyticsByAccessedTimeBytesUsedOldestLabel); err != nil {
				return err
			}
		}
	}

	if o.AnalyticsByAccessedTimeBytesUsedPercentagesQueryParameter != nil {

		// query param analytics.by_accessed_time.bytes_used.percentages
		var qrAnalyticsByAccessedTimeBytesUsedPercentages float64

		if o.AnalyticsByAccessedTimeBytesUsedPercentagesQueryParameter != nil {
			qrAnalyticsByAccessedTimeBytesUsedPercentages = *o.AnalyticsByAccessedTimeBytesUsedPercentagesQueryParameter
		}
		qAnalyticsByAccessedTimeBytesUsedPercentages := swag.FormatFloat64(qrAnalyticsByAccessedTimeBytesUsedPercentages)
		if qAnalyticsByAccessedTimeBytesUsedPercentages != "" {

			if err := r.SetQueryParam("analytics.by_accessed_time.bytes_used.percentages", qAnalyticsByAccessedTimeBytesUsedPercentages); err != nil {
				return err
			}
		}
	}

	if o.AnalyticsByAccessedTimeBytesUsedValuesQueryParameter != nil {

		// query param analytics.by_accessed_time.bytes_used.values
		var qrAnalyticsByAccessedTimeBytesUsedValues int64

		if o.AnalyticsByAccessedTimeBytesUsedValuesQueryParameter != nil {
			qrAnalyticsByAccessedTimeBytesUsedValues = *o.AnalyticsByAccessedTimeBytesUsedValuesQueryParameter
		}
		qAnalyticsByAccessedTimeBytesUsedValues := swag.FormatInt64(qrAnalyticsByAccessedTimeBytesUsedValues)
		if qAnalyticsByAccessedTimeBytesUsedValues != "" {

			if err := r.SetQueryParam("analytics.by_accessed_time.bytes_used.values", qAnalyticsByAccessedTimeBytesUsedValues); err != nil {
				return err
			}
		}
	}

	if o.AnalyticsByModifiedTimeBytesUsedLabelsQueryParameter != nil {

		// query param analytics.by_modified_time.bytes_used.labels
		var qrAnalyticsByModifiedTimeBytesUsedLabels string

		if o.AnalyticsByModifiedTimeBytesUsedLabelsQueryParameter != nil {
			qrAnalyticsByModifiedTimeBytesUsedLabels = *o.AnalyticsByModifiedTimeBytesUsedLabelsQueryParameter
		}
		qAnalyticsByModifiedTimeBytesUsedLabels := qrAnalyticsByModifiedTimeBytesUsedLabels
		if qAnalyticsByModifiedTimeBytesUsedLabels != "" {

			if err := r.SetQueryParam("analytics.by_modified_time.bytes_used.labels", qAnalyticsByModifiedTimeBytesUsedLabels); err != nil {
				return err
			}
		}
	}

	if o.AnalyticsByModifiedTimeBytesUsedNewestLabelQueryParameter != nil {

		// query param analytics.by_modified_time.bytes_used.newest_label
		var qrAnalyticsByModifiedTimeBytesUsedNewestLabel string

		if o.AnalyticsByModifiedTimeBytesUsedNewestLabelQueryParameter != nil {
			qrAnalyticsByModifiedTimeBytesUsedNewestLabel = *o.AnalyticsByModifiedTimeBytesUsedNewestLabelQueryParameter
		}
		qAnalyticsByModifiedTimeBytesUsedNewestLabel := qrAnalyticsByModifiedTimeBytesUsedNewestLabel
		if qAnalyticsByModifiedTimeBytesUsedNewestLabel != "" {

			if err := r.SetQueryParam("analytics.by_modified_time.bytes_used.newest_label", qAnalyticsByModifiedTimeBytesUsedNewestLabel); err != nil {
				return err
			}
		}
	}

	if o.AnalyticsByModifiedTimeBytesUsedOldestLabelQueryParameter != nil {

		// query param analytics.by_modified_time.bytes_used.oldest_label
		var qrAnalyticsByModifiedTimeBytesUsedOldestLabel string

		if o.AnalyticsByModifiedTimeBytesUsedOldestLabelQueryParameter != nil {
			qrAnalyticsByModifiedTimeBytesUsedOldestLabel = *o.AnalyticsByModifiedTimeBytesUsedOldestLabelQueryParameter
		}
		qAnalyticsByModifiedTimeBytesUsedOldestLabel := qrAnalyticsByModifiedTimeBytesUsedOldestLabel
		if qAnalyticsByModifiedTimeBytesUsedOldestLabel != "" {

			if err := r.SetQueryParam("analytics.by_modified_time.bytes_used.oldest_label", qAnalyticsByModifiedTimeBytesUsedOldestLabel); err != nil {
				return err
			}
		}
	}

	if o.AnalyticsByModifiedTimeBytesUsedPercentagesQueryParameter != nil {

		// query param analytics.by_modified_time.bytes_used.percentages
		var qrAnalyticsByModifiedTimeBytesUsedPercentages float64

		if o.AnalyticsByModifiedTimeBytesUsedPercentagesQueryParameter != nil {
			qrAnalyticsByModifiedTimeBytesUsedPercentages = *o.AnalyticsByModifiedTimeBytesUsedPercentagesQueryParameter
		}
		qAnalyticsByModifiedTimeBytesUsedPercentages := swag.FormatFloat64(qrAnalyticsByModifiedTimeBytesUsedPercentages)
		if qAnalyticsByModifiedTimeBytesUsedPercentages != "" {

			if err := r.SetQueryParam("analytics.by_modified_time.bytes_used.percentages", qAnalyticsByModifiedTimeBytesUsedPercentages); err != nil {
				return err
			}
		}
	}

	if o.AnalyticsByModifiedTimeBytesUsedValuesQueryParameter != nil {

		// query param analytics.by_modified_time.bytes_used.values
		var qrAnalyticsByModifiedTimeBytesUsedValues int64

		if o.AnalyticsByModifiedTimeBytesUsedValuesQueryParameter != nil {
			qrAnalyticsByModifiedTimeBytesUsedValues = *o.AnalyticsByModifiedTimeBytesUsedValuesQueryParameter
		}
		qAnalyticsByModifiedTimeBytesUsedValues := swag.FormatInt64(qrAnalyticsByModifiedTimeBytesUsedValues)
		if qAnalyticsByModifiedTimeBytesUsedValues != "" {

			if err := r.SetQueryParam("analytics.by_modified_time.bytes_used.values", qAnalyticsByModifiedTimeBytesUsedValues); err != nil {
				return err
			}
		}
	}

	if o.AnalyticsBytesUsedQueryParameter != nil {

		// query param analytics.bytes_used
		var qrAnalyticsBytesUsed int64

		if o.AnalyticsBytesUsedQueryParameter != nil {
			qrAnalyticsBytesUsed = *o.AnalyticsBytesUsedQueryParameter
		}
		qAnalyticsBytesUsed := swag.FormatInt64(qrAnalyticsBytesUsed)
		if qAnalyticsBytesUsed != "" {

			if err := r.SetQueryParam("analytics.bytes_used", qAnalyticsBytesUsed); err != nil {
				return err
			}
		}
	}

	if o.AnalyticsFileCountQueryParameter != nil {

		// query param analytics.file_count
		var qrAnalyticsFileCount int64

		if o.AnalyticsFileCountQueryParameter != nil {
			qrAnalyticsFileCount = *o.AnalyticsFileCountQueryParameter
		}
		qAnalyticsFileCount := swag.FormatInt64(qrAnalyticsFileCount)
		if qAnalyticsFileCount != "" {

			if err := r.SetQueryParam("analytics.file_count", qAnalyticsFileCount); err != nil {
				return err
			}
		}
	}

	if o.AnalyticsHistogramByTimeLabelsQueryParameter != nil {

		// binding items for analytics.histogram_by_time_labels
		joinedAnalyticsHistogramByTimeLabels := o.bindParamAnalyticsHistogramByTimeLabels(reg)

		// query array param analytics.histogram_by_time_labels
		if err := r.SetQueryParam("analytics.histogram_by_time_labels", joinedAnalyticsHistogramByTimeLabels...); err != nil {
			return err
		}
	}

	if o.AnalyticsSubdirCountQueryParameter != nil {

		// query param analytics.subdir_count
		var qrAnalyticsSubdirCount int64

		if o.AnalyticsSubdirCountQueryParameter != nil {
			qrAnalyticsSubdirCount = *o.AnalyticsSubdirCountQueryParameter
		}
		qAnalyticsSubdirCount := swag.FormatInt64(qrAnalyticsSubdirCount)
		if qAnalyticsSubdirCount != "" {

			if err := r.SetQueryParam("analytics.subdir_count", qAnalyticsSubdirCount); err != nil {
				return err
			}
		}
	}

	if o.ByteOffsetQueryParameter != nil {

		// query param byte_offset
		var qrByteOffset int64

		if o.ByteOffsetQueryParameter != nil {
			qrByteOffset = *o.ByteOffsetQueryParameter
		}
		qByteOffset := swag.FormatInt64(qrByteOffset)
		if qByteOffset != "" {

			if err := r.SetQueryParam("byte_offset", qByteOffset); err != nil {
				return err
			}
		}
	}

	if o.BytesUsedQueryParameter != nil {

		// query param bytes_used
		var qrBytesUsed int64

		if o.BytesUsedQueryParameter != nil {
			qrBytesUsed = *o.BytesUsedQueryParameter
		}
		qBytesUsed := swag.FormatInt64(qrBytesUsed)
		if qBytesUsed != "" {

			if err := r.SetQueryParam("bytes_used", qBytesUsed); err != nil {
				return err
			}
		}
	}

	if o.ChangedTimeQueryParameter != nil {

		// query param changed_time
		var qrChangedTime string

		if o.ChangedTimeQueryParameter != nil {
			qrChangedTime = *o.ChangedTimeQueryParameter
		}
		qChangedTime := qrChangedTime
		if qChangedTime != "" {

			if err := r.SetQueryParam("changed_time", qChangedTime); err != nil {
				return err
			}
		}
	}

	if o.ConstituentNameQueryParameter != nil {

		// query param constituent.name
		var qrConstituentName string

		if o.ConstituentNameQueryParameter != nil {
			qrConstituentName = *o.ConstituentNameQueryParameter
		}
		qConstituentName := qrConstituentName
		if qConstituentName != "" {

			if err := r.SetQueryParam("constituent.name", qConstituentName); err != nil {
				return err
			}
		}
	}

	if o.ConstituentUUIDQueryParameter != nil {

		// query param constituent.uuid
		var qrConstituentUUID string

		if o.ConstituentUUIDQueryParameter != nil {
			qrConstituentUUID = *o.ConstituentUUIDQueryParameter
		}
		qConstituentUUID := qrConstituentUUID
		if qConstituentUUID != "" {

			if err := r.SetQueryParam("constituent.uuid", qConstituentUUID); err != nil {
				return err
			}
		}
	}

	if o.CreationTimeQueryParameter != nil {

		// query param creation_time
		var qrCreationTime string

		if o.CreationTimeQueryParameter != nil {
			qrCreationTime = *o.CreationTimeQueryParameter
		}
		qCreationTime := qrCreationTime
		if qCreationTime != "" {

			if err := r.SetQueryParam("creation_time", qCreationTime); err != nil {
				return err
			}
		}
	}

	if o.FieldsQueryParameter != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.FillEnabledQueryParameter != nil {

		// query param fill_enabled
		var qrFillEnabled bool

		if o.FillEnabledQueryParameter != nil {
			qrFillEnabled = *o.FillEnabledQueryParameter
		}
		qFillEnabled := swag.FormatBool(qrFillEnabled)
		if qFillEnabled != "" {

			if err := r.SetQueryParam("fill_enabled", qFillEnabled); err != nil {
				return err
			}
		}
	}

	if o.GroupIDQueryParameter != nil {

		// query param group_id
		var qrGroupID int64

		if o.GroupIDQueryParameter != nil {
			qrGroupID = *o.GroupIDQueryParameter
		}
		qGroupID := swag.FormatInt64(qrGroupID)
		if qGroupID != "" {

			if err := r.SetQueryParam("group_id", qGroupID); err != nil {
				return err
			}
		}
	}

	if o.HardLinksCountQueryParameter != nil {

		// query param hard_links_count
		var qrHardLinksCount int64

		if o.HardLinksCountQueryParameter != nil {
			qrHardLinksCount = *o.HardLinksCountQueryParameter
		}
		qHardLinksCount := swag.FormatInt64(qrHardLinksCount)
		if qHardLinksCount != "" {

			if err := r.SetQueryParam("hard_links_count", qHardLinksCount); err != nil {
				return err
			}
		}
	}

	if o.HolesSizeQueryParameter != nil {

		// query param holes.size
		var qrHolesSize int64

		if o.HolesSizeQueryParameter != nil {
			qrHolesSize = *o.HolesSizeQueryParameter
		}
		qHolesSize := swag.FormatInt64(qrHolesSize)
		if qHolesSize != "" {

			if err := r.SetQueryParam("holes.size", qHolesSize); err != nil {
				return err
			}
		}
	}

	if o.HolesStartQueryParameter != nil {

		// query param holes.start
		var qrHolesStart int64

		if o.HolesStartQueryParameter != nil {
			qrHolesStart = *o.HolesStartQueryParameter
		}
		qHolesStart := swag.FormatInt64(qrHolesStart)
		if qHolesStart != "" {

			if err := r.SetQueryParam("holes.start", qHolesStart); err != nil {
				return err
			}
		}
	}

	if o.InodeGenerationQueryParameter != nil {

		// query param inode_generation
		var qrInodeGeneration int64

		if o.InodeGenerationQueryParameter != nil {
			qrInodeGeneration = *o.InodeGenerationQueryParameter
		}
		qInodeGeneration := swag.FormatInt64(qrInodeGeneration)
		if qInodeGeneration != "" {

			if err := r.SetQueryParam("inode_generation", qInodeGeneration); err != nil {
				return err
			}
		}
	}

	if o.InodeNumberQueryParameter != nil {

		// query param inode_number
		var qrInodeNumber int64

		if o.InodeNumberQueryParameter != nil {
			qrInodeNumber = *o.InodeNumberQueryParameter
		}
		qInodeNumber := swag.FormatInt64(qrInodeNumber)
		if qInodeNumber != "" {

			if err := r.SetQueryParam("inode_number", qInodeNumber); err != nil {
				return err
			}
		}
	}

	if o.IsEmptyQueryParameter != nil {

		// query param is_empty
		var qrIsEmpty bool

		if o.IsEmptyQueryParameter != nil {
			qrIsEmpty = *o.IsEmptyQueryParameter
		}
		qIsEmpty := swag.FormatBool(qrIsEmpty)
		if qIsEmpty != "" {

			if err := r.SetQueryParam("is_empty", qIsEmpty); err != nil {
				return err
			}
		}
	}

	if o.IsJunctionQueryParameter != nil {

		// query param is_junction
		var qrIsJunction bool

		if o.IsJunctionQueryParameter != nil {
			qrIsJunction = *o.IsJunctionQueryParameter
		}
		qIsJunction := swag.FormatBool(qrIsJunction)
		if qIsJunction != "" {

			if err := r.SetQueryParam("is_junction", qIsJunction); err != nil {
				return err
			}
		}
	}

	if o.IsSnapshotQueryParameter != nil {

		// query param is_snapshot
		var qrIsSnapshot bool

		if o.IsSnapshotQueryParameter != nil {
			qrIsSnapshot = *o.IsSnapshotQueryParameter
		}
		qIsSnapshot := swag.FormatBool(qrIsSnapshot)
		if qIsSnapshot != "" {

			if err := r.SetQueryParam("is_snapshot", qIsSnapshot); err != nil {
				return err
			}
		}
	}

	if o.IsVMAlignedQueryParameter != nil {

		// query param is_vm_aligned
		var qrIsVMAligned bool

		if o.IsVMAlignedQueryParameter != nil {
			qrIsVMAligned = *o.IsVMAlignedQueryParameter
		}
		qIsVMAligned := swag.FormatBool(qrIsVMAligned)
		if qIsVMAligned != "" {

			if err := r.SetQueryParam("is_vm_aligned", qIsVMAligned); err != nil {
				return err
			}
		}
	}

	if o.LengthQueryParameter != nil {

		// query param length
		var qrLength int64

		if o.LengthQueryParameter != nil {
			qrLength = *o.LengthQueryParameter
		}
		qLength := swag.FormatInt64(qrLength)
		if qLength != "" {

			if err := r.SetQueryParam("length", qLength); err != nil {
				return err
			}
		}
	}

	if o.MaxRecordsQueryParameter != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecordsQueryParameter != nil {
			qrMaxRecords = *o.MaxRecordsQueryParameter
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.ModifiedTimeQueryParameter != nil {

		// query param modified_time
		var qrModifiedTime string

		if o.ModifiedTimeQueryParameter != nil {
			qrModifiedTime = *o.ModifiedTimeQueryParameter
		}
		qModifiedTime := qrModifiedTime
		if qModifiedTime != "" {

			if err := r.SetQueryParam("modified_time", qModifiedTime); err != nil {
				return err
			}
		}
	}

	if o.NameQueryParameter != nil {

		// query param name
		var qrName string

		if o.NameQueryParameter != nil {
			qrName = *o.NameQueryParameter
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.OrderByQueryParameter != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.OverwriteEnabledQueryParameter != nil {

		// query param overwrite_enabled
		var qrOverwriteEnabled bool

		if o.OverwriteEnabledQueryParameter != nil {
			qrOverwriteEnabled = *o.OverwriteEnabledQueryParameter
		}
		qOverwriteEnabled := swag.FormatBool(qrOverwriteEnabled)
		if qOverwriteEnabled != "" {

			if err := r.SetQueryParam("overwrite_enabled", qOverwriteEnabled); err != nil {
				return err
			}
		}
	}

	if o.OwnerIDQueryParameter != nil {

		// query param owner_id
		var qrOwnerID int64

		if o.OwnerIDQueryParameter != nil {
			qrOwnerID = *o.OwnerIDQueryParameter
		}
		qOwnerID := swag.FormatInt64(qrOwnerID)
		if qOwnerID != "" {

			if err := r.SetQueryParam("owner_id", qOwnerID); err != nil {
				return err
			}
		}
	}

	// path param path
	if err := r.SetPathParam("path", o.PathPathParameter); err != nil {
		return err
	}

	if o.QosPolicyNameQueryParameter != nil {

		// query param qos_policy.name
		var qrQosPolicyName string

		if o.QosPolicyNameQueryParameter != nil {
			qrQosPolicyName = *o.QosPolicyNameQueryParameter
		}
		qQosPolicyName := qrQosPolicyName
		if qQosPolicyName != "" {

			if err := r.SetQueryParam("qos_policy.name", qQosPolicyName); err != nil {
				return err
			}
		}
	}

	if o.QosPolicyUUIDQueryParameter != nil {

		// query param qos_policy.uuid
		var qrQosPolicyUUID string

		if o.QosPolicyUUIDQueryParameter != nil {
			qrQosPolicyUUID = *o.QosPolicyUUIDQueryParameter
		}
		qQosPolicyUUID := qrQosPolicyUUID
		if qQosPolicyUUID != "" {

			if err := r.SetQueryParam("qos_policy.uuid", qQosPolicyUUID); err != nil {
				return err
			}
		}
	}

	if o.ReturnMetadataQueryParameter != nil {

		// query param return_metadata
		var qrReturnMetadata bool

		if o.ReturnMetadataQueryParameter != nil {
			qrReturnMetadata = *o.ReturnMetadataQueryParameter
		}
		qReturnMetadata := swag.FormatBool(qrReturnMetadata)
		if qReturnMetadata != "" {

			if err := r.SetQueryParam("return_metadata", qReturnMetadata); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecordsQueryParameter != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecordsQueryParameter != nil {
			qrReturnRecords = *o.ReturnRecordsQueryParameter
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeoutQueryParameter != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeoutQueryParameter != nil {
			qrReturnTimeout = *o.ReturnTimeoutQueryParameter
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.SizeQueryParameter != nil {

		// query param size
		var qrSize int64

		if o.SizeQueryParameter != nil {
			qrSize = *o.SizeQueryParameter
		}
		qSize := swag.FormatInt64(qrSize)
		if qSize != "" {

			if err := r.SetQueryParam("size", qSize); err != nil {
				return err
			}
		}
	}

	if o.TargetQueryParameter != nil {

		// query param target
		var qrTarget string

		if o.TargetQueryParameter != nil {
			qrTarget = *o.TargetQueryParameter
		}
		qTarget := qrTarget
		if qTarget != "" {

			if err := r.SetQueryParam("target", qTarget); err != nil {
				return err
			}
		}
	}

	if o.TypeQueryParameter != nil {

		// query param type
		var qrType string

		if o.TypeQueryParameter != nil {
			qrType = *o.TypeQueryParameter
		}
		qType := qrType
		if qType != "" {

			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}
	}

	if o.UniqueBytesQueryParameter != nil {

		// query param unique_bytes
		var qrUniqueBytes int64

		if o.UniqueBytesQueryParameter != nil {
			qrUniqueBytes = *o.UniqueBytesQueryParameter
		}
		qUniqueBytes := swag.FormatInt64(qrUniqueBytes)
		if qUniqueBytes != "" {

			if err := r.SetQueryParam("unique_bytes", qUniqueBytes); err != nil {
				return err
			}
		}
	}

	if o.UnixPermissionsQueryParameter != nil {

		// query param unix_permissions
		var qrUnixPermissions int64

		if o.UnixPermissionsQueryParameter != nil {
			qrUnixPermissions = *o.UnixPermissionsQueryParameter
		}
		qUnixPermissions := swag.FormatInt64(qrUnixPermissions)
		if qUnixPermissions != "" {

			if err := r.SetQueryParam("unix_permissions", qUnixPermissions); err != nil {
				return err
			}
		}
	}

	if o.VolumeNameQueryParameter != nil {

		// query param volume.name
		var qrVolumeName string

		if o.VolumeNameQueryParameter != nil {
			qrVolumeName = *o.VolumeNameQueryParameter
		}
		qVolumeName := qrVolumeName
		if qVolumeName != "" {

			if err := r.SetQueryParam("volume.name", qVolumeName); err != nil {
				return err
			}
		}
	}

	// path param volume.uuid
	if err := r.SetPathParam("volume.uuid", o.VolumeUUIDPathParameter); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamFileInfoCollectionGet binds the parameter analytics.histogram_by_time_labels
func (o *FileInfoCollectionGetParams) bindParamAnalyticsHistogramByTimeLabels(formats strfmt.Registry) []string {
	analyticsHistogramByTimeLabelsIR := o.AnalyticsHistogramByTimeLabelsQueryParameter

	var analyticsHistogramByTimeLabelsIC []string
	for _, analyticsHistogramByTimeLabelsIIR := range analyticsHistogramByTimeLabelsIR { // explode []string

		analyticsHistogramByTimeLabelsIIV := analyticsHistogramByTimeLabelsIIR // string as string
		analyticsHistogramByTimeLabelsIC = append(analyticsHistogramByTimeLabelsIC, analyticsHistogramByTimeLabelsIIV)
	}

	// items.CollectionFormat: "csv"
	analyticsHistogramByTimeLabelsIS := swag.JoinByFormat(analyticsHistogramByTimeLabelsIC, "csv")

	return analyticsHistogramByTimeLabelsIS
}

// bindParamFileInfoCollectionGet binds the parameter fields
func (o *FileInfoCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.FieldsQueryParameter

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamFileInfoCollectionGet binds the parameter order_by
func (o *FileInfoCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderByQueryParameter

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
