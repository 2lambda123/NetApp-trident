// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPortCollectionGetParams creates a new PortCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPortCollectionGetParams() *PortCollectionGetParams {
	return &PortCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPortCollectionGetParamsWithTimeout creates a new PortCollectionGetParams object
// with the ability to set a timeout on a request.
func NewPortCollectionGetParamsWithTimeout(timeout time.Duration) *PortCollectionGetParams {
	return &PortCollectionGetParams{
		timeout: timeout,
	}
}

// NewPortCollectionGetParamsWithContext creates a new PortCollectionGetParams object
// with the ability to set a context for a request.
func NewPortCollectionGetParamsWithContext(ctx context.Context) *PortCollectionGetParams {
	return &PortCollectionGetParams{
		Context: ctx,
	}
}

// NewPortCollectionGetParamsWithHTTPClient creates a new PortCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewPortCollectionGetParamsWithHTTPClient(client *http.Client) *PortCollectionGetParams {
	return &PortCollectionGetParams{
		HTTPClient: client,
	}
}

/* PortCollectionGetParams contains all the parameters to send to the API endpoint
   for the port collection get operation.

   Typically these are written to a http.Request.
*/
type PortCollectionGetParams struct {

	/* BoardName.

	   Filter by board_name
	*/
	BoardNameQueryParameter *string

	/* CableIdentifier.

	   Filter by cable.identifier
	*/
	CableIDentifierQueryParameter *string

	/* CableLength.

	   Filter by cable.length
	*/
	CableLengthQueryParameter *string

	/* CablePartNumber.

	   Filter by cable.part_number
	*/
	CablePartNumberQueryParameter *string

	/* CableSerialNumber.

	   Filter by cable.serial_number
	*/
	CableSerialNumberQueryParameter *string

	/* Description.

	   Filter by description
	*/
	DescriptionQueryParameter *string

	/* Enabled.

	   Filter by enabled
	*/
	EnabledQueryParameter *bool

	/* ErrorCorrectiveAction.

	   Filter by error.corrective_action
	*/
	ErrorCorrectiveActionQueryParameter *string

	/* ErrorMessage.

	   Filter by error.message
	*/
	ErrorMessageQueryParameter *string

	/* Fields.

	   Specify the fields to return.
	*/
	FieldsQueryParameter []string

	/* FirmwareVersion.

	   Filter by firmware_version
	*/
	FirmwareVersionQueryParameter *string

	/* InUse.

	   Filter by in_use
	*/
	InUseQueryParameter *bool

	/* MacAddress.

	   Filter by mac_address
	*/
	MacAddressQueryParameter *string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecordsQueryParameter *int64

	/* Mode.

	   Filter by mode
	*/
	ModeQueryParameter *string

	/* Name.

	   Filter by name
	*/
	NameQueryParameter *string

	/* NodeName.

	   Filter by node.name
	*/
	NodeNameQueryParameter *string

	/* NodeUUID.

	   Filter by node.uuid
	*/
	NodeUUIDQueryParameter *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderByQueryParameter []string

	/* PartNumber.

	   Filter by part_number
	*/
	PartNumberQueryParameter *string

	/* Redundant.

	   Filter by redundant
	*/
	RedundantQueryParameter *bool

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecordsQueryParameter *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeoutQueryParameter *int64

	/* SerialNumber.

	   Filter by serial_number
	*/
	SerialNumberQueryParameter *string

	/* Speed.

	   Filter by speed
	*/
	SpeedQueryParameter *float64

	/* State.

	   Filter by state
	*/
	StateQueryParameter *string

	/* Type.

	   Filter by type
	*/
	TypeQueryParameter *string

	/* Wwn.

	   Filter by wwn
	*/
	WwnQueryParameter *string

	/* Wwpn.

	   Filter by wwpn
	*/
	WwpnQueryParameter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the port collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PortCollectionGetParams) WithDefaults() *PortCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the port collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PortCollectionGetParams) SetDefaults() {
	var (
		returnRecordsQueryParameterDefault = bool(true)

		returnTimeoutQueryParameterDefault = int64(15)
	)

	val := PortCollectionGetParams{
		ReturnRecordsQueryParameter: &returnRecordsQueryParameterDefault,
		ReturnTimeoutQueryParameter: &returnTimeoutQueryParameterDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the port collection get params
func (o *PortCollectionGetParams) WithTimeout(timeout time.Duration) *PortCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the port collection get params
func (o *PortCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the port collection get params
func (o *PortCollectionGetParams) WithContext(ctx context.Context) *PortCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the port collection get params
func (o *PortCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the port collection get params
func (o *PortCollectionGetParams) WithHTTPClient(client *http.Client) *PortCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the port collection get params
func (o *PortCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBoardNameQueryParameter adds the boardName to the port collection get params
func (o *PortCollectionGetParams) WithBoardNameQueryParameter(boardName *string) *PortCollectionGetParams {
	o.SetBoardNameQueryParameter(boardName)
	return o
}

// SetBoardNameQueryParameter adds the boardName to the port collection get params
func (o *PortCollectionGetParams) SetBoardNameQueryParameter(boardName *string) {
	o.BoardNameQueryParameter = boardName
}

// WithCableIDentifierQueryParameter adds the cableIdentifier to the port collection get params
func (o *PortCollectionGetParams) WithCableIDentifierQueryParameter(cableIdentifier *string) *PortCollectionGetParams {
	o.SetCableIDentifierQueryParameter(cableIdentifier)
	return o
}

// SetCableIDentifierQueryParameter adds the cableIdentifier to the port collection get params
func (o *PortCollectionGetParams) SetCableIDentifierQueryParameter(cableIdentifier *string) {
	o.CableIDentifierQueryParameter = cableIdentifier
}

// WithCableLengthQueryParameter adds the cableLength to the port collection get params
func (o *PortCollectionGetParams) WithCableLengthQueryParameter(cableLength *string) *PortCollectionGetParams {
	o.SetCableLengthQueryParameter(cableLength)
	return o
}

// SetCableLengthQueryParameter adds the cableLength to the port collection get params
func (o *PortCollectionGetParams) SetCableLengthQueryParameter(cableLength *string) {
	o.CableLengthQueryParameter = cableLength
}

// WithCablePartNumberQueryParameter adds the cablePartNumber to the port collection get params
func (o *PortCollectionGetParams) WithCablePartNumberQueryParameter(cablePartNumber *string) *PortCollectionGetParams {
	o.SetCablePartNumberQueryParameter(cablePartNumber)
	return o
}

// SetCablePartNumberQueryParameter adds the cablePartNumber to the port collection get params
func (o *PortCollectionGetParams) SetCablePartNumberQueryParameter(cablePartNumber *string) {
	o.CablePartNumberQueryParameter = cablePartNumber
}

// WithCableSerialNumberQueryParameter adds the cableSerialNumber to the port collection get params
func (o *PortCollectionGetParams) WithCableSerialNumberQueryParameter(cableSerialNumber *string) *PortCollectionGetParams {
	o.SetCableSerialNumberQueryParameter(cableSerialNumber)
	return o
}

// SetCableSerialNumberQueryParameter adds the cableSerialNumber to the port collection get params
func (o *PortCollectionGetParams) SetCableSerialNumberQueryParameter(cableSerialNumber *string) {
	o.CableSerialNumberQueryParameter = cableSerialNumber
}

// WithDescriptionQueryParameter adds the description to the port collection get params
func (o *PortCollectionGetParams) WithDescriptionQueryParameter(description *string) *PortCollectionGetParams {
	o.SetDescriptionQueryParameter(description)
	return o
}

// SetDescriptionQueryParameter adds the description to the port collection get params
func (o *PortCollectionGetParams) SetDescriptionQueryParameter(description *string) {
	o.DescriptionQueryParameter = description
}

// WithEnabledQueryParameter adds the enabled to the port collection get params
func (o *PortCollectionGetParams) WithEnabledQueryParameter(enabled *bool) *PortCollectionGetParams {
	o.SetEnabledQueryParameter(enabled)
	return o
}

// SetEnabledQueryParameter adds the enabled to the port collection get params
func (o *PortCollectionGetParams) SetEnabledQueryParameter(enabled *bool) {
	o.EnabledQueryParameter = enabled
}

// WithErrorCorrectiveActionQueryParameter adds the errorCorrectiveAction to the port collection get params
func (o *PortCollectionGetParams) WithErrorCorrectiveActionQueryParameter(errorCorrectiveAction *string) *PortCollectionGetParams {
	o.SetErrorCorrectiveActionQueryParameter(errorCorrectiveAction)
	return o
}

// SetErrorCorrectiveActionQueryParameter adds the errorCorrectiveAction to the port collection get params
func (o *PortCollectionGetParams) SetErrorCorrectiveActionQueryParameter(errorCorrectiveAction *string) {
	o.ErrorCorrectiveActionQueryParameter = errorCorrectiveAction
}

// WithErrorMessageQueryParameter adds the errorMessage to the port collection get params
func (o *PortCollectionGetParams) WithErrorMessageQueryParameter(errorMessage *string) *PortCollectionGetParams {
	o.SetErrorMessageQueryParameter(errorMessage)
	return o
}

// SetErrorMessageQueryParameter adds the errorMessage to the port collection get params
func (o *PortCollectionGetParams) SetErrorMessageQueryParameter(errorMessage *string) {
	o.ErrorMessageQueryParameter = errorMessage
}

// WithFieldsQueryParameter adds the fields to the port collection get params
func (o *PortCollectionGetParams) WithFieldsQueryParameter(fields []string) *PortCollectionGetParams {
	o.SetFieldsQueryParameter(fields)
	return o
}

// SetFieldsQueryParameter adds the fields to the port collection get params
func (o *PortCollectionGetParams) SetFieldsQueryParameter(fields []string) {
	o.FieldsQueryParameter = fields
}

// WithFirmwareVersionQueryParameter adds the firmwareVersion to the port collection get params
func (o *PortCollectionGetParams) WithFirmwareVersionQueryParameter(firmwareVersion *string) *PortCollectionGetParams {
	o.SetFirmwareVersionQueryParameter(firmwareVersion)
	return o
}

// SetFirmwareVersionQueryParameter adds the firmwareVersion to the port collection get params
func (o *PortCollectionGetParams) SetFirmwareVersionQueryParameter(firmwareVersion *string) {
	o.FirmwareVersionQueryParameter = firmwareVersion
}

// WithInUseQueryParameter adds the inUse to the port collection get params
func (o *PortCollectionGetParams) WithInUseQueryParameter(inUse *bool) *PortCollectionGetParams {
	o.SetInUseQueryParameter(inUse)
	return o
}

// SetInUseQueryParameter adds the inUse to the port collection get params
func (o *PortCollectionGetParams) SetInUseQueryParameter(inUse *bool) {
	o.InUseQueryParameter = inUse
}

// WithMacAddressQueryParameter adds the macAddress to the port collection get params
func (o *PortCollectionGetParams) WithMacAddressQueryParameter(macAddress *string) *PortCollectionGetParams {
	o.SetMacAddressQueryParameter(macAddress)
	return o
}

// SetMacAddressQueryParameter adds the macAddress to the port collection get params
func (o *PortCollectionGetParams) SetMacAddressQueryParameter(macAddress *string) {
	o.MacAddressQueryParameter = macAddress
}

// WithMaxRecordsQueryParameter adds the maxRecords to the port collection get params
func (o *PortCollectionGetParams) WithMaxRecordsQueryParameter(maxRecords *int64) *PortCollectionGetParams {
	o.SetMaxRecordsQueryParameter(maxRecords)
	return o
}

// SetMaxRecordsQueryParameter adds the maxRecords to the port collection get params
func (o *PortCollectionGetParams) SetMaxRecordsQueryParameter(maxRecords *int64) {
	o.MaxRecordsQueryParameter = maxRecords
}

// WithModeQueryParameter adds the mode to the port collection get params
func (o *PortCollectionGetParams) WithModeQueryParameter(mode *string) *PortCollectionGetParams {
	o.SetModeQueryParameter(mode)
	return o
}

// SetModeQueryParameter adds the mode to the port collection get params
func (o *PortCollectionGetParams) SetModeQueryParameter(mode *string) {
	o.ModeQueryParameter = mode
}

// WithNameQueryParameter adds the name to the port collection get params
func (o *PortCollectionGetParams) WithNameQueryParameter(name *string) *PortCollectionGetParams {
	o.SetNameQueryParameter(name)
	return o
}

// SetNameQueryParameter adds the name to the port collection get params
func (o *PortCollectionGetParams) SetNameQueryParameter(name *string) {
	o.NameQueryParameter = name
}

// WithNodeNameQueryParameter adds the nodeName to the port collection get params
func (o *PortCollectionGetParams) WithNodeNameQueryParameter(nodeName *string) *PortCollectionGetParams {
	o.SetNodeNameQueryParameter(nodeName)
	return o
}

// SetNodeNameQueryParameter adds the nodeName to the port collection get params
func (o *PortCollectionGetParams) SetNodeNameQueryParameter(nodeName *string) {
	o.NodeNameQueryParameter = nodeName
}

// WithNodeUUIDQueryParameter adds the nodeUUID to the port collection get params
func (o *PortCollectionGetParams) WithNodeUUIDQueryParameter(nodeUUID *string) *PortCollectionGetParams {
	o.SetNodeUUIDQueryParameter(nodeUUID)
	return o
}

// SetNodeUUIDQueryParameter adds the nodeUuid to the port collection get params
func (o *PortCollectionGetParams) SetNodeUUIDQueryParameter(nodeUUID *string) {
	o.NodeUUIDQueryParameter = nodeUUID
}

// WithOrderByQueryParameter adds the orderBy to the port collection get params
func (o *PortCollectionGetParams) WithOrderByQueryParameter(orderBy []string) *PortCollectionGetParams {
	o.SetOrderByQueryParameter(orderBy)
	return o
}

// SetOrderByQueryParameter adds the orderBy to the port collection get params
func (o *PortCollectionGetParams) SetOrderByQueryParameter(orderBy []string) {
	o.OrderByQueryParameter = orderBy
}

// WithPartNumberQueryParameter adds the partNumber to the port collection get params
func (o *PortCollectionGetParams) WithPartNumberQueryParameter(partNumber *string) *PortCollectionGetParams {
	o.SetPartNumberQueryParameter(partNumber)
	return o
}

// SetPartNumberQueryParameter adds the partNumber to the port collection get params
func (o *PortCollectionGetParams) SetPartNumberQueryParameter(partNumber *string) {
	o.PartNumberQueryParameter = partNumber
}

// WithRedundantQueryParameter adds the redundant to the port collection get params
func (o *PortCollectionGetParams) WithRedundantQueryParameter(redundant *bool) *PortCollectionGetParams {
	o.SetRedundantQueryParameter(redundant)
	return o
}

// SetRedundantQueryParameter adds the redundant to the port collection get params
func (o *PortCollectionGetParams) SetRedundantQueryParameter(redundant *bool) {
	o.RedundantQueryParameter = redundant
}

// WithReturnRecordsQueryParameter adds the returnRecords to the port collection get params
func (o *PortCollectionGetParams) WithReturnRecordsQueryParameter(returnRecords *bool) *PortCollectionGetParams {
	o.SetReturnRecordsQueryParameter(returnRecords)
	return o
}

// SetReturnRecordsQueryParameter adds the returnRecords to the port collection get params
func (o *PortCollectionGetParams) SetReturnRecordsQueryParameter(returnRecords *bool) {
	o.ReturnRecordsQueryParameter = returnRecords
}

// WithReturnTimeoutQueryParameter adds the returnTimeout to the port collection get params
func (o *PortCollectionGetParams) WithReturnTimeoutQueryParameter(returnTimeout *int64) *PortCollectionGetParams {
	o.SetReturnTimeoutQueryParameter(returnTimeout)
	return o
}

// SetReturnTimeoutQueryParameter adds the returnTimeout to the port collection get params
func (o *PortCollectionGetParams) SetReturnTimeoutQueryParameter(returnTimeout *int64) {
	o.ReturnTimeoutQueryParameter = returnTimeout
}

// WithSerialNumberQueryParameter adds the serialNumber to the port collection get params
func (o *PortCollectionGetParams) WithSerialNumberQueryParameter(serialNumber *string) *PortCollectionGetParams {
	o.SetSerialNumberQueryParameter(serialNumber)
	return o
}

// SetSerialNumberQueryParameter adds the serialNumber to the port collection get params
func (o *PortCollectionGetParams) SetSerialNumberQueryParameter(serialNumber *string) {
	o.SerialNumberQueryParameter = serialNumber
}

// WithSpeedQueryParameter adds the speed to the port collection get params
func (o *PortCollectionGetParams) WithSpeedQueryParameter(speed *float64) *PortCollectionGetParams {
	o.SetSpeedQueryParameter(speed)
	return o
}

// SetSpeedQueryParameter adds the speed to the port collection get params
func (o *PortCollectionGetParams) SetSpeedQueryParameter(speed *float64) {
	o.SpeedQueryParameter = speed
}

// WithStateQueryParameter adds the state to the port collection get params
func (o *PortCollectionGetParams) WithStateQueryParameter(state *string) *PortCollectionGetParams {
	o.SetStateQueryParameter(state)
	return o
}

// SetStateQueryParameter adds the state to the port collection get params
func (o *PortCollectionGetParams) SetStateQueryParameter(state *string) {
	o.StateQueryParameter = state
}

// WithTypeQueryParameter adds the typeVar to the port collection get params
func (o *PortCollectionGetParams) WithTypeQueryParameter(typeVar *string) *PortCollectionGetParams {
	o.SetTypeQueryParameter(typeVar)
	return o
}

// SetTypeQueryParameter adds the type to the port collection get params
func (o *PortCollectionGetParams) SetTypeQueryParameter(typeVar *string) {
	o.TypeQueryParameter = typeVar
}

// WithWwnQueryParameter adds the wwn to the port collection get params
func (o *PortCollectionGetParams) WithWwnQueryParameter(wwn *string) *PortCollectionGetParams {
	o.SetWwnQueryParameter(wwn)
	return o
}

// SetWwnQueryParameter adds the wwn to the port collection get params
func (o *PortCollectionGetParams) SetWwnQueryParameter(wwn *string) {
	o.WwnQueryParameter = wwn
}

// WithWwpnQueryParameter adds the wwpn to the port collection get params
func (o *PortCollectionGetParams) WithWwpnQueryParameter(wwpn *string) *PortCollectionGetParams {
	o.SetWwpnQueryParameter(wwpn)
	return o
}

// SetWwpnQueryParameter adds the wwpn to the port collection get params
func (o *PortCollectionGetParams) SetWwpnQueryParameter(wwpn *string) {
	o.WwpnQueryParameter = wwpn
}

// WriteToRequest writes these params to a swagger request
func (o *PortCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.BoardNameQueryParameter != nil {

		// query param board_name
		var qrBoardName string

		if o.BoardNameQueryParameter != nil {
			qrBoardName = *o.BoardNameQueryParameter
		}
		qBoardName := qrBoardName
		if qBoardName != "" {

			if err := r.SetQueryParam("board_name", qBoardName); err != nil {
				return err
			}
		}
	}

	if o.CableIDentifierQueryParameter != nil {

		// query param cable.identifier
		var qrCableIdentifier string

		if o.CableIDentifierQueryParameter != nil {
			qrCableIdentifier = *o.CableIDentifierQueryParameter
		}
		qCableIdentifier := qrCableIdentifier
		if qCableIdentifier != "" {

			if err := r.SetQueryParam("cable.identifier", qCableIdentifier); err != nil {
				return err
			}
		}
	}

	if o.CableLengthQueryParameter != nil {

		// query param cable.length
		var qrCableLength string

		if o.CableLengthQueryParameter != nil {
			qrCableLength = *o.CableLengthQueryParameter
		}
		qCableLength := qrCableLength
		if qCableLength != "" {

			if err := r.SetQueryParam("cable.length", qCableLength); err != nil {
				return err
			}
		}
	}

	if o.CablePartNumberQueryParameter != nil {

		// query param cable.part_number
		var qrCablePartNumber string

		if o.CablePartNumberQueryParameter != nil {
			qrCablePartNumber = *o.CablePartNumberQueryParameter
		}
		qCablePartNumber := qrCablePartNumber
		if qCablePartNumber != "" {

			if err := r.SetQueryParam("cable.part_number", qCablePartNumber); err != nil {
				return err
			}
		}
	}

	if o.CableSerialNumberQueryParameter != nil {

		// query param cable.serial_number
		var qrCableSerialNumber string

		if o.CableSerialNumberQueryParameter != nil {
			qrCableSerialNumber = *o.CableSerialNumberQueryParameter
		}
		qCableSerialNumber := qrCableSerialNumber
		if qCableSerialNumber != "" {

			if err := r.SetQueryParam("cable.serial_number", qCableSerialNumber); err != nil {
				return err
			}
		}
	}

	if o.DescriptionQueryParameter != nil {

		// query param description
		var qrDescription string

		if o.DescriptionQueryParameter != nil {
			qrDescription = *o.DescriptionQueryParameter
		}
		qDescription := qrDescription
		if qDescription != "" {

			if err := r.SetQueryParam("description", qDescription); err != nil {
				return err
			}
		}
	}

	if o.EnabledQueryParameter != nil {

		// query param enabled
		var qrEnabled bool

		if o.EnabledQueryParameter != nil {
			qrEnabled = *o.EnabledQueryParameter
		}
		qEnabled := swag.FormatBool(qrEnabled)
		if qEnabled != "" {

			if err := r.SetQueryParam("enabled", qEnabled); err != nil {
				return err
			}
		}
	}

	if o.ErrorCorrectiveActionQueryParameter != nil {

		// query param error.corrective_action
		var qrErrorCorrectiveAction string

		if o.ErrorCorrectiveActionQueryParameter != nil {
			qrErrorCorrectiveAction = *o.ErrorCorrectiveActionQueryParameter
		}
		qErrorCorrectiveAction := qrErrorCorrectiveAction
		if qErrorCorrectiveAction != "" {

			if err := r.SetQueryParam("error.corrective_action", qErrorCorrectiveAction); err != nil {
				return err
			}
		}
	}

	if o.ErrorMessageQueryParameter != nil {

		// query param error.message
		var qrErrorMessage string

		if o.ErrorMessageQueryParameter != nil {
			qrErrorMessage = *o.ErrorMessageQueryParameter
		}
		qErrorMessage := qrErrorMessage
		if qErrorMessage != "" {

			if err := r.SetQueryParam("error.message", qErrorMessage); err != nil {
				return err
			}
		}
	}

	if o.FieldsQueryParameter != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.FirmwareVersionQueryParameter != nil {

		// query param firmware_version
		var qrFirmwareVersion string

		if o.FirmwareVersionQueryParameter != nil {
			qrFirmwareVersion = *o.FirmwareVersionQueryParameter
		}
		qFirmwareVersion := qrFirmwareVersion
		if qFirmwareVersion != "" {

			if err := r.SetQueryParam("firmware_version", qFirmwareVersion); err != nil {
				return err
			}
		}
	}

	if o.InUseQueryParameter != nil {

		// query param in_use
		var qrInUse bool

		if o.InUseQueryParameter != nil {
			qrInUse = *o.InUseQueryParameter
		}
		qInUse := swag.FormatBool(qrInUse)
		if qInUse != "" {

			if err := r.SetQueryParam("in_use", qInUse); err != nil {
				return err
			}
		}
	}

	if o.MacAddressQueryParameter != nil {

		// query param mac_address
		var qrMacAddress string

		if o.MacAddressQueryParameter != nil {
			qrMacAddress = *o.MacAddressQueryParameter
		}
		qMacAddress := qrMacAddress
		if qMacAddress != "" {

			if err := r.SetQueryParam("mac_address", qMacAddress); err != nil {
				return err
			}
		}
	}

	if o.MaxRecordsQueryParameter != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecordsQueryParameter != nil {
			qrMaxRecords = *o.MaxRecordsQueryParameter
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.ModeQueryParameter != nil {

		// query param mode
		var qrMode string

		if o.ModeQueryParameter != nil {
			qrMode = *o.ModeQueryParameter
		}
		qMode := qrMode
		if qMode != "" {

			if err := r.SetQueryParam("mode", qMode); err != nil {
				return err
			}
		}
	}

	if o.NameQueryParameter != nil {

		// query param name
		var qrName string

		if o.NameQueryParameter != nil {
			qrName = *o.NameQueryParameter
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.NodeNameQueryParameter != nil {

		// query param node.name
		var qrNodeName string

		if o.NodeNameQueryParameter != nil {
			qrNodeName = *o.NodeNameQueryParameter
		}
		qNodeName := qrNodeName
		if qNodeName != "" {

			if err := r.SetQueryParam("node.name", qNodeName); err != nil {
				return err
			}
		}
	}

	if o.NodeUUIDQueryParameter != nil {

		// query param node.uuid
		var qrNodeUUID string

		if o.NodeUUIDQueryParameter != nil {
			qrNodeUUID = *o.NodeUUIDQueryParameter
		}
		qNodeUUID := qrNodeUUID
		if qNodeUUID != "" {

			if err := r.SetQueryParam("node.uuid", qNodeUUID); err != nil {
				return err
			}
		}
	}

	if o.OrderByQueryParameter != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.PartNumberQueryParameter != nil {

		// query param part_number
		var qrPartNumber string

		if o.PartNumberQueryParameter != nil {
			qrPartNumber = *o.PartNumberQueryParameter
		}
		qPartNumber := qrPartNumber
		if qPartNumber != "" {

			if err := r.SetQueryParam("part_number", qPartNumber); err != nil {
				return err
			}
		}
	}

	if o.RedundantQueryParameter != nil {

		// query param redundant
		var qrRedundant bool

		if o.RedundantQueryParameter != nil {
			qrRedundant = *o.RedundantQueryParameter
		}
		qRedundant := swag.FormatBool(qrRedundant)
		if qRedundant != "" {

			if err := r.SetQueryParam("redundant", qRedundant); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecordsQueryParameter != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecordsQueryParameter != nil {
			qrReturnRecords = *o.ReturnRecordsQueryParameter
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeoutQueryParameter != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeoutQueryParameter != nil {
			qrReturnTimeout = *o.ReturnTimeoutQueryParameter
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.SerialNumberQueryParameter != nil {

		// query param serial_number
		var qrSerialNumber string

		if o.SerialNumberQueryParameter != nil {
			qrSerialNumber = *o.SerialNumberQueryParameter
		}
		qSerialNumber := qrSerialNumber
		if qSerialNumber != "" {

			if err := r.SetQueryParam("serial_number", qSerialNumber); err != nil {
				return err
			}
		}
	}

	if o.SpeedQueryParameter != nil {

		// query param speed
		var qrSpeed float64

		if o.SpeedQueryParameter != nil {
			qrSpeed = *o.SpeedQueryParameter
		}
		qSpeed := swag.FormatFloat64(qrSpeed)
		if qSpeed != "" {

			if err := r.SetQueryParam("speed", qSpeed); err != nil {
				return err
			}
		}
	}

	if o.StateQueryParameter != nil {

		// query param state
		var qrState string

		if o.StateQueryParameter != nil {
			qrState = *o.StateQueryParameter
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if o.TypeQueryParameter != nil {

		// query param type
		var qrType string

		if o.TypeQueryParameter != nil {
			qrType = *o.TypeQueryParameter
		}
		qType := qrType
		if qType != "" {

			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}
	}

	if o.WwnQueryParameter != nil {

		// query param wwn
		var qrWwn string

		if o.WwnQueryParameter != nil {
			qrWwn = *o.WwnQueryParameter
		}
		qWwn := qrWwn
		if qWwn != "" {

			if err := r.SetQueryParam("wwn", qWwn); err != nil {
				return err
			}
		}
	}

	if o.WwpnQueryParameter != nil {

		// query param wwpn
		var qrWwpn string

		if o.WwpnQueryParameter != nil {
			qrWwpn = *o.WwpnQueryParameter
		}
		qWwpn := qrWwpn
		if qWwpn != "" {

			if err := r.SetQueryParam("wwpn", qWwpn); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamPortCollectionGet binds the parameter fields
func (o *PortCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.FieldsQueryParameter

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamPortCollectionGet binds the parameter order_by
func (o *PortCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderByQueryParameter

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
