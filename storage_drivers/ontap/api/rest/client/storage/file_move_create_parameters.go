// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/netapp/trident/storage_drivers/ontap/api/rest/models"
)

// NewFileMoveCreateParams creates a new FileMoveCreateParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewFileMoveCreateParams() *FileMoveCreateParams {
	return &FileMoveCreateParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewFileMoveCreateParamsWithTimeout creates a new FileMoveCreateParams object
// with the ability to set a timeout on a request.
func NewFileMoveCreateParamsWithTimeout(timeout time.Duration) *FileMoveCreateParams {
	return &FileMoveCreateParams{
		timeout: timeout,
	}
}

// NewFileMoveCreateParamsWithContext creates a new FileMoveCreateParams object
// with the ability to set a context for a request.
func NewFileMoveCreateParamsWithContext(ctx context.Context) *FileMoveCreateParams {
	return &FileMoveCreateParams{
		Context: ctx,
	}
}

// NewFileMoveCreateParamsWithHTTPClient creates a new FileMoveCreateParams object
// with the ability to set a custom HTTPClient for a request.
func NewFileMoveCreateParamsWithHTTPClient(client *http.Client) *FileMoveCreateParams {
	return &FileMoveCreateParams{
		HTTPClient: client,
	}
}

/*
FileMoveCreateParams contains all the parameters to send to the API endpoint

	for the file move create operation.

	Typically these are written to a http.Request.
*/
type FileMoveCreateParams struct {

	/* Automatic.

	   If true, the FlexGroup volume file move operation selects the destination constituent automatically.
	*/
	AutomaticQueryParameter *bool

	/* Force.

	   If true, the FlexGroup volume file move operation breaks the existing lock state on the file being moved. Breaking the lock state may cause a disruption for some client applications.
	*/
	ForceQueryParameter *bool

	/* Info.

	   Info specification
	*/
	Info *models.FileMove

	/* ReturnRecords.

	   The default is false.  If set to true, the records are returned.
	*/
	ReturnRecordsQueryParameter *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the file move create params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FileMoveCreateParams) WithDefaults() *FileMoveCreateParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the file move create params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FileMoveCreateParams) SetDefaults() {
	var (
		automaticQueryParameterDefault = bool(false)

		forceQueryParameterDefault = bool(false)

		returnRecordsQueryParameterDefault = bool(false)
	)

	val := FileMoveCreateParams{
		AutomaticQueryParameter:     &automaticQueryParameterDefault,
		ForceQueryParameter:         &forceQueryParameterDefault,
		ReturnRecordsQueryParameter: &returnRecordsQueryParameterDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the file move create params
func (o *FileMoveCreateParams) WithTimeout(timeout time.Duration) *FileMoveCreateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the file move create params
func (o *FileMoveCreateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the file move create params
func (o *FileMoveCreateParams) WithContext(ctx context.Context) *FileMoveCreateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the file move create params
func (o *FileMoveCreateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the file move create params
func (o *FileMoveCreateParams) WithHTTPClient(client *http.Client) *FileMoveCreateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the file move create params
func (o *FileMoveCreateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAutomaticQueryParameter adds the automatic to the file move create params
func (o *FileMoveCreateParams) WithAutomaticQueryParameter(automatic *bool) *FileMoveCreateParams {
	o.SetAutomaticQueryParameter(automatic)
	return o
}

// SetAutomaticQueryParameter adds the automatic to the file move create params
func (o *FileMoveCreateParams) SetAutomaticQueryParameter(automatic *bool) {
	o.AutomaticQueryParameter = automatic
}

// WithForceQueryParameter adds the force to the file move create params
func (o *FileMoveCreateParams) WithForceQueryParameter(force *bool) *FileMoveCreateParams {
	o.SetForceQueryParameter(force)
	return o
}

// SetForceQueryParameter adds the force to the file move create params
func (o *FileMoveCreateParams) SetForceQueryParameter(force *bool) {
	o.ForceQueryParameter = force
}

// WithInfo adds the info to the file move create params
func (o *FileMoveCreateParams) WithInfo(info *models.FileMove) *FileMoveCreateParams {
	o.SetInfo(info)
	return o
}

// SetInfo adds the info to the file move create params
func (o *FileMoveCreateParams) SetInfo(info *models.FileMove) {
	o.Info = info
}

// WithReturnRecordsQueryParameter adds the returnRecords to the file move create params
func (o *FileMoveCreateParams) WithReturnRecordsQueryParameter(returnRecords *bool) *FileMoveCreateParams {
	o.SetReturnRecordsQueryParameter(returnRecords)
	return o
}

// SetReturnRecordsQueryParameter adds the returnRecords to the file move create params
func (o *FileMoveCreateParams) SetReturnRecordsQueryParameter(returnRecords *bool) {
	o.ReturnRecordsQueryParameter = returnRecords
}

// WriteToRequest writes these params to a swagger request
func (o *FileMoveCreateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AutomaticQueryParameter != nil {

		// query param automatic
		var qrAutomatic bool

		if o.AutomaticQueryParameter != nil {
			qrAutomatic = *o.AutomaticQueryParameter
		}
		qAutomatic := swag.FormatBool(qrAutomatic)
		if qAutomatic != "" {

			if err := r.SetQueryParam("automatic", qAutomatic); err != nil {
				return err
			}
		}
	}

	if o.ForceQueryParameter != nil {

		// query param force
		var qrForce bool

		if o.ForceQueryParameter != nil {
			qrForce = *o.ForceQueryParameter
		}
		qForce := swag.FormatBool(qrForce)
		if qForce != "" {

			if err := r.SetQueryParam("force", qForce); err != nil {
				return err
			}
		}
	}
	if o.Info != nil {
		if err := r.SetBodyParam(o.Info); err != nil {
			return err
		}
	}

	if o.ReturnRecordsQueryParameter != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecordsQueryParameter != nil {
			qrReturnRecords = *o.ReturnRecordsQueryParameter
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
