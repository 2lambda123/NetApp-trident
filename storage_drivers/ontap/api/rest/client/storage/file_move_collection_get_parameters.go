// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewFileMoveCollectionGetParams creates a new FileMoveCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewFileMoveCollectionGetParams() *FileMoveCollectionGetParams {
	return &FileMoveCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewFileMoveCollectionGetParamsWithTimeout creates a new FileMoveCollectionGetParams object
// with the ability to set a timeout on a request.
func NewFileMoveCollectionGetParamsWithTimeout(timeout time.Duration) *FileMoveCollectionGetParams {
	return &FileMoveCollectionGetParams{
		timeout: timeout,
	}
}

// NewFileMoveCollectionGetParamsWithContext creates a new FileMoveCollectionGetParams object
// with the ability to set a context for a request.
func NewFileMoveCollectionGetParamsWithContext(ctx context.Context) *FileMoveCollectionGetParams {
	return &FileMoveCollectionGetParams{
		Context: ctx,
	}
}

// NewFileMoveCollectionGetParamsWithHTTPClient creates a new FileMoveCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewFileMoveCollectionGetParamsWithHTTPClient(client *http.Client) *FileMoveCollectionGetParams {
	return &FileMoveCollectionGetParams{
		HTTPClient: client,
	}
}

/* FileMoveCollectionGetParams contains all the parameters to send to the API endpoint
   for the file move collection get operation.

   Typically these are written to a http.Request.
*/
type FileMoveCollectionGetParams struct {

	/* CutoverTime.

	   Filter by cutover_time
	*/
	CutoverTimeQueryParameter *int64

	/* DestinationPath.

	   Filter by destination.path
	*/
	DestinationPathQueryParameter *string

	/* DestinationSvmName.

	   Filter by destination.svm.name
	*/
	DestinationSVMNameQueryParameter *string

	/* DestinationSvmUUID.

	   Filter by destination.svm.uuid
	*/
	DestinationSVMUUIDQueryParameter *string

	/* DestinationVolumeName.

	   Filter by destination.volume.name
	*/
	DestinationVolumeNameQueryParameter *string

	/* DestinationVolumeUUID.

	   Filter by destination.volume.uuid
	*/
	DestinationVolumeUUIDQueryParameter *string

	/* ElapsedTime.

	   Filter by elapsed_time
	*/
	ElapsedTimeQueryParameter *int64

	/* FailureArgumentsCode.

	   Filter by failure.arguments.code
	*/
	FailureArgumentsCodeQueryParameter *string

	/* FailureArgumentsMessage.

	   Filter by failure.arguments.message
	*/
	FailureArgumentsMessageQueryParameter *string

	/* FailureCode.

	   Filter by failure.code
	*/
	FailureCodeQueryParameter *string

	/* FailureMessage.

	   Filter by failure.message
	*/
	FailureMessageQueryParameter *string

	/* FailureTarget.

	   Filter by failure.target
	*/
	FailureTargetQueryParameter *string

	/* Fields.

	   Specify the fields to return.
	*/
	FieldsQueryParameter []string

	/* Index.

	   Filter by index
	*/
	IndexQueryParameter *int64

	/* IsDestinationReady.

	   Filter by is_destination_ready
	*/
	IsDestinationReadyQueryParameter *bool

	/* IsFlexgroup.

	   Filter by is_flexgroup
	*/
	IsFlexgroupQueryParameter *bool

	/* IsSnapshotFenced.

	   Filter by is_snapshot_fenced
	*/
	IsSnapshotFencedQueryParameter *bool

	/* MaxCutoverTime.

	   Filter by max_cutover_time
	*/
	MaxCutoverTimeQueryParameter *int64

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecordsQueryParameter *int64

	/* MaxThroughput.

	   Filter by max_throughput
	*/
	MaxThroughputQueryParameter *int64

	/* NodeName.

	   Filter by node.name
	*/
	NodeNameQueryParameter *string

	/* NodeUUID.

	   Filter by node.uuid
	*/
	NodeUUIDQueryParameter *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderByQueryParameter []string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecordsQueryParameter *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeoutQueryParameter *int64

	/* ScannerPercent.

	   Filter by scanner.percent
	*/
	ScannerPercentQueryParameter *int64

	/* ScannerProgress.

	   Filter by scanner.progress
	*/
	ScannerProgressQueryParameter *int64

	/* ScannerState.

	   Filter by scanner.state
	*/
	ScannerStateQueryParameter *string

	/* ScannerTotal.

	   Filter by scanner.total
	*/
	ScannerTotalQueryParameter *int64

	/* SourcePath.

	   Filter by source.path
	*/
	SourcePathQueryParameter *string

	/* SourceSvmName.

	   Filter by source.svm.name
	*/
	SourceSVMNameQueryParameter *string

	/* SourceSvmUUID.

	   Filter by source.svm.uuid
	*/
	SourceSVMUUIDQueryParameter *string

	/* SourceVolumeName.

	   Filter by source.volume.name
	*/
	SourceVolumeNameQueryParameter *string

	/* SourceVolumeUUID.

	   Filter by source.volume.uuid
	*/
	SourceVolumeUUIDQueryParameter *string

	/* SvmName.

	   Filter by svm.name
	*/
	SVMNameQueryParameter *string

	/* SvmUUID.

	   Filter by svm.uuid
	*/
	SVMUUIDQueryParameter *string

	/* UUID.

	   Filter by uuid
	*/
	UUIDQueryParameter *string

	/* VolumeName.

	   Filter by volume.name
	*/
	VolumeNameQueryParameter *string

	/* VolumeUUID.

	   Filter by volume.uuid
	*/
	VolumeUUIDQueryParameter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the file move collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FileMoveCollectionGetParams) WithDefaults() *FileMoveCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the file move collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FileMoveCollectionGetParams) SetDefaults() {
	var (
		returnRecordsQueryParameterDefault = bool(true)

		returnTimeoutQueryParameterDefault = int64(15)
	)

	val := FileMoveCollectionGetParams{
		ReturnRecordsQueryParameter: &returnRecordsQueryParameterDefault,
		ReturnTimeoutQueryParameter: &returnTimeoutQueryParameterDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the file move collection get params
func (o *FileMoveCollectionGetParams) WithTimeout(timeout time.Duration) *FileMoveCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the file move collection get params
func (o *FileMoveCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the file move collection get params
func (o *FileMoveCollectionGetParams) WithContext(ctx context.Context) *FileMoveCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the file move collection get params
func (o *FileMoveCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the file move collection get params
func (o *FileMoveCollectionGetParams) WithHTTPClient(client *http.Client) *FileMoveCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the file move collection get params
func (o *FileMoveCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCutoverTimeQueryParameter adds the cutoverTime to the file move collection get params
func (o *FileMoveCollectionGetParams) WithCutoverTimeQueryParameter(cutoverTime *int64) *FileMoveCollectionGetParams {
	o.SetCutoverTimeQueryParameter(cutoverTime)
	return o
}

// SetCutoverTimeQueryParameter adds the cutoverTime to the file move collection get params
func (o *FileMoveCollectionGetParams) SetCutoverTimeQueryParameter(cutoverTime *int64) {
	o.CutoverTimeQueryParameter = cutoverTime
}

// WithDestinationPathQueryParameter adds the destinationPath to the file move collection get params
func (o *FileMoveCollectionGetParams) WithDestinationPathQueryParameter(destinationPath *string) *FileMoveCollectionGetParams {
	o.SetDestinationPathQueryParameter(destinationPath)
	return o
}

// SetDestinationPathQueryParameter adds the destinationPath to the file move collection get params
func (o *FileMoveCollectionGetParams) SetDestinationPathQueryParameter(destinationPath *string) {
	o.DestinationPathQueryParameter = destinationPath
}

// WithDestinationSVMNameQueryParameter adds the destinationSvmName to the file move collection get params
func (o *FileMoveCollectionGetParams) WithDestinationSVMNameQueryParameter(destinationSvmName *string) *FileMoveCollectionGetParams {
	o.SetDestinationSVMNameQueryParameter(destinationSvmName)
	return o
}

// SetDestinationSVMNameQueryParameter adds the destinationSvmName to the file move collection get params
func (o *FileMoveCollectionGetParams) SetDestinationSVMNameQueryParameter(destinationSvmName *string) {
	o.DestinationSVMNameQueryParameter = destinationSvmName
}

// WithDestinationSVMUUIDQueryParameter adds the destinationSvmUUID to the file move collection get params
func (o *FileMoveCollectionGetParams) WithDestinationSVMUUIDQueryParameter(destinationSvmUUID *string) *FileMoveCollectionGetParams {
	o.SetDestinationSVMUUIDQueryParameter(destinationSvmUUID)
	return o
}

// SetDestinationSVMUUIDQueryParameter adds the destinationSvmUuid to the file move collection get params
func (o *FileMoveCollectionGetParams) SetDestinationSVMUUIDQueryParameter(destinationSvmUUID *string) {
	o.DestinationSVMUUIDQueryParameter = destinationSvmUUID
}

// WithDestinationVolumeNameQueryParameter adds the destinationVolumeName to the file move collection get params
func (o *FileMoveCollectionGetParams) WithDestinationVolumeNameQueryParameter(destinationVolumeName *string) *FileMoveCollectionGetParams {
	o.SetDestinationVolumeNameQueryParameter(destinationVolumeName)
	return o
}

// SetDestinationVolumeNameQueryParameter adds the destinationVolumeName to the file move collection get params
func (o *FileMoveCollectionGetParams) SetDestinationVolumeNameQueryParameter(destinationVolumeName *string) {
	o.DestinationVolumeNameQueryParameter = destinationVolumeName
}

// WithDestinationVolumeUUIDQueryParameter adds the destinationVolumeUUID to the file move collection get params
func (o *FileMoveCollectionGetParams) WithDestinationVolumeUUIDQueryParameter(destinationVolumeUUID *string) *FileMoveCollectionGetParams {
	o.SetDestinationVolumeUUIDQueryParameter(destinationVolumeUUID)
	return o
}

// SetDestinationVolumeUUIDQueryParameter adds the destinationVolumeUuid to the file move collection get params
func (o *FileMoveCollectionGetParams) SetDestinationVolumeUUIDQueryParameter(destinationVolumeUUID *string) {
	o.DestinationVolumeUUIDQueryParameter = destinationVolumeUUID
}

// WithElapsedTimeQueryParameter adds the elapsedTime to the file move collection get params
func (o *FileMoveCollectionGetParams) WithElapsedTimeQueryParameter(elapsedTime *int64) *FileMoveCollectionGetParams {
	o.SetElapsedTimeQueryParameter(elapsedTime)
	return o
}

// SetElapsedTimeQueryParameter adds the elapsedTime to the file move collection get params
func (o *FileMoveCollectionGetParams) SetElapsedTimeQueryParameter(elapsedTime *int64) {
	o.ElapsedTimeQueryParameter = elapsedTime
}

// WithFailureArgumentsCodeQueryParameter adds the failureArgumentsCode to the file move collection get params
func (o *FileMoveCollectionGetParams) WithFailureArgumentsCodeQueryParameter(failureArgumentsCode *string) *FileMoveCollectionGetParams {
	o.SetFailureArgumentsCodeQueryParameter(failureArgumentsCode)
	return o
}

// SetFailureArgumentsCodeQueryParameter adds the failureArgumentsCode to the file move collection get params
func (o *FileMoveCollectionGetParams) SetFailureArgumentsCodeQueryParameter(failureArgumentsCode *string) {
	o.FailureArgumentsCodeQueryParameter = failureArgumentsCode
}

// WithFailureArgumentsMessageQueryParameter adds the failureArgumentsMessage to the file move collection get params
func (o *FileMoveCollectionGetParams) WithFailureArgumentsMessageQueryParameter(failureArgumentsMessage *string) *FileMoveCollectionGetParams {
	o.SetFailureArgumentsMessageQueryParameter(failureArgumentsMessage)
	return o
}

// SetFailureArgumentsMessageQueryParameter adds the failureArgumentsMessage to the file move collection get params
func (o *FileMoveCollectionGetParams) SetFailureArgumentsMessageQueryParameter(failureArgumentsMessage *string) {
	o.FailureArgumentsMessageQueryParameter = failureArgumentsMessage
}

// WithFailureCodeQueryParameter adds the failureCode to the file move collection get params
func (o *FileMoveCollectionGetParams) WithFailureCodeQueryParameter(failureCode *string) *FileMoveCollectionGetParams {
	o.SetFailureCodeQueryParameter(failureCode)
	return o
}

// SetFailureCodeQueryParameter adds the failureCode to the file move collection get params
func (o *FileMoveCollectionGetParams) SetFailureCodeQueryParameter(failureCode *string) {
	o.FailureCodeQueryParameter = failureCode
}

// WithFailureMessageQueryParameter adds the failureMessage to the file move collection get params
func (o *FileMoveCollectionGetParams) WithFailureMessageQueryParameter(failureMessage *string) *FileMoveCollectionGetParams {
	o.SetFailureMessageQueryParameter(failureMessage)
	return o
}

// SetFailureMessageQueryParameter adds the failureMessage to the file move collection get params
func (o *FileMoveCollectionGetParams) SetFailureMessageQueryParameter(failureMessage *string) {
	o.FailureMessageQueryParameter = failureMessage
}

// WithFailureTargetQueryParameter adds the failureTarget to the file move collection get params
func (o *FileMoveCollectionGetParams) WithFailureTargetQueryParameter(failureTarget *string) *FileMoveCollectionGetParams {
	o.SetFailureTargetQueryParameter(failureTarget)
	return o
}

// SetFailureTargetQueryParameter adds the failureTarget to the file move collection get params
func (o *FileMoveCollectionGetParams) SetFailureTargetQueryParameter(failureTarget *string) {
	o.FailureTargetQueryParameter = failureTarget
}

// WithFieldsQueryParameter adds the fields to the file move collection get params
func (o *FileMoveCollectionGetParams) WithFieldsQueryParameter(fields []string) *FileMoveCollectionGetParams {
	o.SetFieldsQueryParameter(fields)
	return o
}

// SetFieldsQueryParameter adds the fields to the file move collection get params
func (o *FileMoveCollectionGetParams) SetFieldsQueryParameter(fields []string) {
	o.FieldsQueryParameter = fields
}

// WithIndexQueryParameter adds the index to the file move collection get params
func (o *FileMoveCollectionGetParams) WithIndexQueryParameter(index *int64) *FileMoveCollectionGetParams {
	o.SetIndexQueryParameter(index)
	return o
}

// SetIndexQueryParameter adds the index to the file move collection get params
func (o *FileMoveCollectionGetParams) SetIndexQueryParameter(index *int64) {
	o.IndexQueryParameter = index
}

// WithIsDestinationReadyQueryParameter adds the isDestinationReady to the file move collection get params
func (o *FileMoveCollectionGetParams) WithIsDestinationReadyQueryParameter(isDestinationReady *bool) *FileMoveCollectionGetParams {
	o.SetIsDestinationReadyQueryParameter(isDestinationReady)
	return o
}

// SetIsDestinationReadyQueryParameter adds the isDestinationReady to the file move collection get params
func (o *FileMoveCollectionGetParams) SetIsDestinationReadyQueryParameter(isDestinationReady *bool) {
	o.IsDestinationReadyQueryParameter = isDestinationReady
}

// WithIsFlexgroupQueryParameter adds the isFlexgroup to the file move collection get params
func (o *FileMoveCollectionGetParams) WithIsFlexgroupQueryParameter(isFlexgroup *bool) *FileMoveCollectionGetParams {
	o.SetIsFlexgroupQueryParameter(isFlexgroup)
	return o
}

// SetIsFlexgroupQueryParameter adds the isFlexgroup to the file move collection get params
func (o *FileMoveCollectionGetParams) SetIsFlexgroupQueryParameter(isFlexgroup *bool) {
	o.IsFlexgroupQueryParameter = isFlexgroup
}

// WithIsSnapshotFencedQueryParameter adds the isSnapshotFenced to the file move collection get params
func (o *FileMoveCollectionGetParams) WithIsSnapshotFencedQueryParameter(isSnapshotFenced *bool) *FileMoveCollectionGetParams {
	o.SetIsSnapshotFencedQueryParameter(isSnapshotFenced)
	return o
}

// SetIsSnapshotFencedQueryParameter adds the isSnapshotFenced to the file move collection get params
func (o *FileMoveCollectionGetParams) SetIsSnapshotFencedQueryParameter(isSnapshotFenced *bool) {
	o.IsSnapshotFencedQueryParameter = isSnapshotFenced
}

// WithMaxCutoverTimeQueryParameter adds the maxCutoverTime to the file move collection get params
func (o *FileMoveCollectionGetParams) WithMaxCutoverTimeQueryParameter(maxCutoverTime *int64) *FileMoveCollectionGetParams {
	o.SetMaxCutoverTimeQueryParameter(maxCutoverTime)
	return o
}

// SetMaxCutoverTimeQueryParameter adds the maxCutoverTime to the file move collection get params
func (o *FileMoveCollectionGetParams) SetMaxCutoverTimeQueryParameter(maxCutoverTime *int64) {
	o.MaxCutoverTimeQueryParameter = maxCutoverTime
}

// WithMaxRecordsQueryParameter adds the maxRecords to the file move collection get params
func (o *FileMoveCollectionGetParams) WithMaxRecordsQueryParameter(maxRecords *int64) *FileMoveCollectionGetParams {
	o.SetMaxRecordsQueryParameter(maxRecords)
	return o
}

// SetMaxRecordsQueryParameter adds the maxRecords to the file move collection get params
func (o *FileMoveCollectionGetParams) SetMaxRecordsQueryParameter(maxRecords *int64) {
	o.MaxRecordsQueryParameter = maxRecords
}

// WithMaxThroughputQueryParameter adds the maxThroughput to the file move collection get params
func (o *FileMoveCollectionGetParams) WithMaxThroughputQueryParameter(maxThroughput *int64) *FileMoveCollectionGetParams {
	o.SetMaxThroughputQueryParameter(maxThroughput)
	return o
}

// SetMaxThroughputQueryParameter adds the maxThroughput to the file move collection get params
func (o *FileMoveCollectionGetParams) SetMaxThroughputQueryParameter(maxThroughput *int64) {
	o.MaxThroughputQueryParameter = maxThroughput
}

// WithNodeNameQueryParameter adds the nodeName to the file move collection get params
func (o *FileMoveCollectionGetParams) WithNodeNameQueryParameter(nodeName *string) *FileMoveCollectionGetParams {
	o.SetNodeNameQueryParameter(nodeName)
	return o
}

// SetNodeNameQueryParameter adds the nodeName to the file move collection get params
func (o *FileMoveCollectionGetParams) SetNodeNameQueryParameter(nodeName *string) {
	o.NodeNameQueryParameter = nodeName
}

// WithNodeUUIDQueryParameter adds the nodeUUID to the file move collection get params
func (o *FileMoveCollectionGetParams) WithNodeUUIDQueryParameter(nodeUUID *string) *FileMoveCollectionGetParams {
	o.SetNodeUUIDQueryParameter(nodeUUID)
	return o
}

// SetNodeUUIDQueryParameter adds the nodeUuid to the file move collection get params
func (o *FileMoveCollectionGetParams) SetNodeUUIDQueryParameter(nodeUUID *string) {
	o.NodeUUIDQueryParameter = nodeUUID
}

// WithOrderByQueryParameter adds the orderBy to the file move collection get params
func (o *FileMoveCollectionGetParams) WithOrderByQueryParameter(orderBy []string) *FileMoveCollectionGetParams {
	o.SetOrderByQueryParameter(orderBy)
	return o
}

// SetOrderByQueryParameter adds the orderBy to the file move collection get params
func (o *FileMoveCollectionGetParams) SetOrderByQueryParameter(orderBy []string) {
	o.OrderByQueryParameter = orderBy
}

// WithReturnRecordsQueryParameter adds the returnRecords to the file move collection get params
func (o *FileMoveCollectionGetParams) WithReturnRecordsQueryParameter(returnRecords *bool) *FileMoveCollectionGetParams {
	o.SetReturnRecordsQueryParameter(returnRecords)
	return o
}

// SetReturnRecordsQueryParameter adds the returnRecords to the file move collection get params
func (o *FileMoveCollectionGetParams) SetReturnRecordsQueryParameter(returnRecords *bool) {
	o.ReturnRecordsQueryParameter = returnRecords
}

// WithReturnTimeoutQueryParameter adds the returnTimeout to the file move collection get params
func (o *FileMoveCollectionGetParams) WithReturnTimeoutQueryParameter(returnTimeout *int64) *FileMoveCollectionGetParams {
	o.SetReturnTimeoutQueryParameter(returnTimeout)
	return o
}

// SetReturnTimeoutQueryParameter adds the returnTimeout to the file move collection get params
func (o *FileMoveCollectionGetParams) SetReturnTimeoutQueryParameter(returnTimeout *int64) {
	o.ReturnTimeoutQueryParameter = returnTimeout
}

// WithScannerPercentQueryParameter adds the scannerPercent to the file move collection get params
func (o *FileMoveCollectionGetParams) WithScannerPercentQueryParameter(scannerPercent *int64) *FileMoveCollectionGetParams {
	o.SetScannerPercentQueryParameter(scannerPercent)
	return o
}

// SetScannerPercentQueryParameter adds the scannerPercent to the file move collection get params
func (o *FileMoveCollectionGetParams) SetScannerPercentQueryParameter(scannerPercent *int64) {
	o.ScannerPercentQueryParameter = scannerPercent
}

// WithScannerProgressQueryParameter adds the scannerProgress to the file move collection get params
func (o *FileMoveCollectionGetParams) WithScannerProgressQueryParameter(scannerProgress *int64) *FileMoveCollectionGetParams {
	o.SetScannerProgressQueryParameter(scannerProgress)
	return o
}

// SetScannerProgressQueryParameter adds the scannerProgress to the file move collection get params
func (o *FileMoveCollectionGetParams) SetScannerProgressQueryParameter(scannerProgress *int64) {
	o.ScannerProgressQueryParameter = scannerProgress
}

// WithScannerStateQueryParameter adds the scannerState to the file move collection get params
func (o *FileMoveCollectionGetParams) WithScannerStateQueryParameter(scannerState *string) *FileMoveCollectionGetParams {
	o.SetScannerStateQueryParameter(scannerState)
	return o
}

// SetScannerStateQueryParameter adds the scannerState to the file move collection get params
func (o *FileMoveCollectionGetParams) SetScannerStateQueryParameter(scannerState *string) {
	o.ScannerStateQueryParameter = scannerState
}

// WithScannerTotalQueryParameter adds the scannerTotal to the file move collection get params
func (o *FileMoveCollectionGetParams) WithScannerTotalQueryParameter(scannerTotal *int64) *FileMoveCollectionGetParams {
	o.SetScannerTotalQueryParameter(scannerTotal)
	return o
}

// SetScannerTotalQueryParameter adds the scannerTotal to the file move collection get params
func (o *FileMoveCollectionGetParams) SetScannerTotalQueryParameter(scannerTotal *int64) {
	o.ScannerTotalQueryParameter = scannerTotal
}

// WithSourcePathQueryParameter adds the sourcePath to the file move collection get params
func (o *FileMoveCollectionGetParams) WithSourcePathQueryParameter(sourcePath *string) *FileMoveCollectionGetParams {
	o.SetSourcePathQueryParameter(sourcePath)
	return o
}

// SetSourcePathQueryParameter adds the sourcePath to the file move collection get params
func (o *FileMoveCollectionGetParams) SetSourcePathQueryParameter(sourcePath *string) {
	o.SourcePathQueryParameter = sourcePath
}

// WithSourceSVMNameQueryParameter adds the sourceSvmName to the file move collection get params
func (o *FileMoveCollectionGetParams) WithSourceSVMNameQueryParameter(sourceSvmName *string) *FileMoveCollectionGetParams {
	o.SetSourceSVMNameQueryParameter(sourceSvmName)
	return o
}

// SetSourceSVMNameQueryParameter adds the sourceSvmName to the file move collection get params
func (o *FileMoveCollectionGetParams) SetSourceSVMNameQueryParameter(sourceSvmName *string) {
	o.SourceSVMNameQueryParameter = sourceSvmName
}

// WithSourceSVMUUIDQueryParameter adds the sourceSvmUUID to the file move collection get params
func (o *FileMoveCollectionGetParams) WithSourceSVMUUIDQueryParameter(sourceSvmUUID *string) *FileMoveCollectionGetParams {
	o.SetSourceSVMUUIDQueryParameter(sourceSvmUUID)
	return o
}

// SetSourceSVMUUIDQueryParameter adds the sourceSvmUuid to the file move collection get params
func (o *FileMoveCollectionGetParams) SetSourceSVMUUIDQueryParameter(sourceSvmUUID *string) {
	o.SourceSVMUUIDQueryParameter = sourceSvmUUID
}

// WithSourceVolumeNameQueryParameter adds the sourceVolumeName to the file move collection get params
func (o *FileMoveCollectionGetParams) WithSourceVolumeNameQueryParameter(sourceVolumeName *string) *FileMoveCollectionGetParams {
	o.SetSourceVolumeNameQueryParameter(sourceVolumeName)
	return o
}

// SetSourceVolumeNameQueryParameter adds the sourceVolumeName to the file move collection get params
func (o *FileMoveCollectionGetParams) SetSourceVolumeNameQueryParameter(sourceVolumeName *string) {
	o.SourceVolumeNameQueryParameter = sourceVolumeName
}

// WithSourceVolumeUUIDQueryParameter adds the sourceVolumeUUID to the file move collection get params
func (o *FileMoveCollectionGetParams) WithSourceVolumeUUIDQueryParameter(sourceVolumeUUID *string) *FileMoveCollectionGetParams {
	o.SetSourceVolumeUUIDQueryParameter(sourceVolumeUUID)
	return o
}

// SetSourceVolumeUUIDQueryParameter adds the sourceVolumeUuid to the file move collection get params
func (o *FileMoveCollectionGetParams) SetSourceVolumeUUIDQueryParameter(sourceVolumeUUID *string) {
	o.SourceVolumeUUIDQueryParameter = sourceVolumeUUID
}

// WithSVMNameQueryParameter adds the svmName to the file move collection get params
func (o *FileMoveCollectionGetParams) WithSVMNameQueryParameter(svmName *string) *FileMoveCollectionGetParams {
	o.SetSVMNameQueryParameter(svmName)
	return o
}

// SetSVMNameQueryParameter adds the svmName to the file move collection get params
func (o *FileMoveCollectionGetParams) SetSVMNameQueryParameter(svmName *string) {
	o.SVMNameQueryParameter = svmName
}

// WithSVMUUIDQueryParameter adds the svmUUID to the file move collection get params
func (o *FileMoveCollectionGetParams) WithSVMUUIDQueryParameter(svmUUID *string) *FileMoveCollectionGetParams {
	o.SetSVMUUIDQueryParameter(svmUUID)
	return o
}

// SetSVMUUIDQueryParameter adds the svmUuid to the file move collection get params
func (o *FileMoveCollectionGetParams) SetSVMUUIDQueryParameter(svmUUID *string) {
	o.SVMUUIDQueryParameter = svmUUID
}

// WithUUIDQueryParameter adds the uuid to the file move collection get params
func (o *FileMoveCollectionGetParams) WithUUIDQueryParameter(uuid *string) *FileMoveCollectionGetParams {
	o.SetUUIDQueryParameter(uuid)
	return o
}

// SetUUIDQueryParameter adds the uuid to the file move collection get params
func (o *FileMoveCollectionGetParams) SetUUIDQueryParameter(uuid *string) {
	o.UUIDQueryParameter = uuid
}

// WithVolumeNameQueryParameter adds the volumeName to the file move collection get params
func (o *FileMoveCollectionGetParams) WithVolumeNameQueryParameter(volumeName *string) *FileMoveCollectionGetParams {
	o.SetVolumeNameQueryParameter(volumeName)
	return o
}

// SetVolumeNameQueryParameter adds the volumeName to the file move collection get params
func (o *FileMoveCollectionGetParams) SetVolumeNameQueryParameter(volumeName *string) {
	o.VolumeNameQueryParameter = volumeName
}

// WithVolumeUUIDQueryParameter adds the volumeUUID to the file move collection get params
func (o *FileMoveCollectionGetParams) WithVolumeUUIDQueryParameter(volumeUUID *string) *FileMoveCollectionGetParams {
	o.SetVolumeUUIDQueryParameter(volumeUUID)
	return o
}

// SetVolumeUUIDQueryParameter adds the volumeUuid to the file move collection get params
func (o *FileMoveCollectionGetParams) SetVolumeUUIDQueryParameter(volumeUUID *string) {
	o.VolumeUUIDQueryParameter = volumeUUID
}

// WriteToRequest writes these params to a swagger request
func (o *FileMoveCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CutoverTimeQueryParameter != nil {

		// query param cutover_time
		var qrCutoverTime int64

		if o.CutoverTimeQueryParameter != nil {
			qrCutoverTime = *o.CutoverTimeQueryParameter
		}
		qCutoverTime := swag.FormatInt64(qrCutoverTime)
		if qCutoverTime != "" {

			if err := r.SetQueryParam("cutover_time", qCutoverTime); err != nil {
				return err
			}
		}
	}

	if o.DestinationPathQueryParameter != nil {

		// query param destination.path
		var qrDestinationPath string

		if o.DestinationPathQueryParameter != nil {
			qrDestinationPath = *o.DestinationPathQueryParameter
		}
		qDestinationPath := qrDestinationPath
		if qDestinationPath != "" {

			if err := r.SetQueryParam("destination.path", qDestinationPath); err != nil {
				return err
			}
		}
	}

	if o.DestinationSVMNameQueryParameter != nil {

		// query param destination.svm.name
		var qrDestinationSvmName string

		if o.DestinationSVMNameQueryParameter != nil {
			qrDestinationSvmName = *o.DestinationSVMNameQueryParameter
		}
		qDestinationSvmName := qrDestinationSvmName
		if qDestinationSvmName != "" {

			if err := r.SetQueryParam("destination.svm.name", qDestinationSvmName); err != nil {
				return err
			}
		}
	}

	if o.DestinationSVMUUIDQueryParameter != nil {

		// query param destination.svm.uuid
		var qrDestinationSvmUUID string

		if o.DestinationSVMUUIDQueryParameter != nil {
			qrDestinationSvmUUID = *o.DestinationSVMUUIDQueryParameter
		}
		qDestinationSvmUUID := qrDestinationSvmUUID
		if qDestinationSvmUUID != "" {

			if err := r.SetQueryParam("destination.svm.uuid", qDestinationSvmUUID); err != nil {
				return err
			}
		}
	}

	if o.DestinationVolumeNameQueryParameter != nil {

		// query param destination.volume.name
		var qrDestinationVolumeName string

		if o.DestinationVolumeNameQueryParameter != nil {
			qrDestinationVolumeName = *o.DestinationVolumeNameQueryParameter
		}
		qDestinationVolumeName := qrDestinationVolumeName
		if qDestinationVolumeName != "" {

			if err := r.SetQueryParam("destination.volume.name", qDestinationVolumeName); err != nil {
				return err
			}
		}
	}

	if o.DestinationVolumeUUIDQueryParameter != nil {

		// query param destination.volume.uuid
		var qrDestinationVolumeUUID string

		if o.DestinationVolumeUUIDQueryParameter != nil {
			qrDestinationVolumeUUID = *o.DestinationVolumeUUIDQueryParameter
		}
		qDestinationVolumeUUID := qrDestinationVolumeUUID
		if qDestinationVolumeUUID != "" {

			if err := r.SetQueryParam("destination.volume.uuid", qDestinationVolumeUUID); err != nil {
				return err
			}
		}
	}

	if o.ElapsedTimeQueryParameter != nil {

		// query param elapsed_time
		var qrElapsedTime int64

		if o.ElapsedTimeQueryParameter != nil {
			qrElapsedTime = *o.ElapsedTimeQueryParameter
		}
		qElapsedTime := swag.FormatInt64(qrElapsedTime)
		if qElapsedTime != "" {

			if err := r.SetQueryParam("elapsed_time", qElapsedTime); err != nil {
				return err
			}
		}
	}

	if o.FailureArgumentsCodeQueryParameter != nil {

		// query param failure.arguments.code
		var qrFailureArgumentsCode string

		if o.FailureArgumentsCodeQueryParameter != nil {
			qrFailureArgumentsCode = *o.FailureArgumentsCodeQueryParameter
		}
		qFailureArgumentsCode := qrFailureArgumentsCode
		if qFailureArgumentsCode != "" {

			if err := r.SetQueryParam("failure.arguments.code", qFailureArgumentsCode); err != nil {
				return err
			}
		}
	}

	if o.FailureArgumentsMessageQueryParameter != nil {

		// query param failure.arguments.message
		var qrFailureArgumentsMessage string

		if o.FailureArgumentsMessageQueryParameter != nil {
			qrFailureArgumentsMessage = *o.FailureArgumentsMessageQueryParameter
		}
		qFailureArgumentsMessage := qrFailureArgumentsMessage
		if qFailureArgumentsMessage != "" {

			if err := r.SetQueryParam("failure.arguments.message", qFailureArgumentsMessage); err != nil {
				return err
			}
		}
	}

	if o.FailureCodeQueryParameter != nil {

		// query param failure.code
		var qrFailureCode string

		if o.FailureCodeQueryParameter != nil {
			qrFailureCode = *o.FailureCodeQueryParameter
		}
		qFailureCode := qrFailureCode
		if qFailureCode != "" {

			if err := r.SetQueryParam("failure.code", qFailureCode); err != nil {
				return err
			}
		}
	}

	if o.FailureMessageQueryParameter != nil {

		// query param failure.message
		var qrFailureMessage string

		if o.FailureMessageQueryParameter != nil {
			qrFailureMessage = *o.FailureMessageQueryParameter
		}
		qFailureMessage := qrFailureMessage
		if qFailureMessage != "" {

			if err := r.SetQueryParam("failure.message", qFailureMessage); err != nil {
				return err
			}
		}
	}

	if o.FailureTargetQueryParameter != nil {

		// query param failure.target
		var qrFailureTarget string

		if o.FailureTargetQueryParameter != nil {
			qrFailureTarget = *o.FailureTargetQueryParameter
		}
		qFailureTarget := qrFailureTarget
		if qFailureTarget != "" {

			if err := r.SetQueryParam("failure.target", qFailureTarget); err != nil {
				return err
			}
		}
	}

	if o.FieldsQueryParameter != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.IndexQueryParameter != nil {

		// query param index
		var qrIndex int64

		if o.IndexQueryParameter != nil {
			qrIndex = *o.IndexQueryParameter
		}
		qIndex := swag.FormatInt64(qrIndex)
		if qIndex != "" {

			if err := r.SetQueryParam("index", qIndex); err != nil {
				return err
			}
		}
	}

	if o.IsDestinationReadyQueryParameter != nil {

		// query param is_destination_ready
		var qrIsDestinationReady bool

		if o.IsDestinationReadyQueryParameter != nil {
			qrIsDestinationReady = *o.IsDestinationReadyQueryParameter
		}
		qIsDestinationReady := swag.FormatBool(qrIsDestinationReady)
		if qIsDestinationReady != "" {

			if err := r.SetQueryParam("is_destination_ready", qIsDestinationReady); err != nil {
				return err
			}
		}
	}

	if o.IsFlexgroupQueryParameter != nil {

		// query param is_flexgroup
		var qrIsFlexgroup bool

		if o.IsFlexgroupQueryParameter != nil {
			qrIsFlexgroup = *o.IsFlexgroupQueryParameter
		}
		qIsFlexgroup := swag.FormatBool(qrIsFlexgroup)
		if qIsFlexgroup != "" {

			if err := r.SetQueryParam("is_flexgroup", qIsFlexgroup); err != nil {
				return err
			}
		}
	}

	if o.IsSnapshotFencedQueryParameter != nil {

		// query param is_snapshot_fenced
		var qrIsSnapshotFenced bool

		if o.IsSnapshotFencedQueryParameter != nil {
			qrIsSnapshotFenced = *o.IsSnapshotFencedQueryParameter
		}
		qIsSnapshotFenced := swag.FormatBool(qrIsSnapshotFenced)
		if qIsSnapshotFenced != "" {

			if err := r.SetQueryParam("is_snapshot_fenced", qIsSnapshotFenced); err != nil {
				return err
			}
		}
	}

	if o.MaxCutoverTimeQueryParameter != nil {

		// query param max_cutover_time
		var qrMaxCutoverTime int64

		if o.MaxCutoverTimeQueryParameter != nil {
			qrMaxCutoverTime = *o.MaxCutoverTimeQueryParameter
		}
		qMaxCutoverTime := swag.FormatInt64(qrMaxCutoverTime)
		if qMaxCutoverTime != "" {

			if err := r.SetQueryParam("max_cutover_time", qMaxCutoverTime); err != nil {
				return err
			}
		}
	}

	if o.MaxRecordsQueryParameter != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecordsQueryParameter != nil {
			qrMaxRecords = *o.MaxRecordsQueryParameter
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.MaxThroughputQueryParameter != nil {

		// query param max_throughput
		var qrMaxThroughput int64

		if o.MaxThroughputQueryParameter != nil {
			qrMaxThroughput = *o.MaxThroughputQueryParameter
		}
		qMaxThroughput := swag.FormatInt64(qrMaxThroughput)
		if qMaxThroughput != "" {

			if err := r.SetQueryParam("max_throughput", qMaxThroughput); err != nil {
				return err
			}
		}
	}

	if o.NodeNameQueryParameter != nil {

		// query param node.name
		var qrNodeName string

		if o.NodeNameQueryParameter != nil {
			qrNodeName = *o.NodeNameQueryParameter
		}
		qNodeName := qrNodeName
		if qNodeName != "" {

			if err := r.SetQueryParam("node.name", qNodeName); err != nil {
				return err
			}
		}
	}

	if o.NodeUUIDQueryParameter != nil {

		// query param node.uuid
		var qrNodeUUID string

		if o.NodeUUIDQueryParameter != nil {
			qrNodeUUID = *o.NodeUUIDQueryParameter
		}
		qNodeUUID := qrNodeUUID
		if qNodeUUID != "" {

			if err := r.SetQueryParam("node.uuid", qNodeUUID); err != nil {
				return err
			}
		}
	}

	if o.OrderByQueryParameter != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.ReturnRecordsQueryParameter != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecordsQueryParameter != nil {
			qrReturnRecords = *o.ReturnRecordsQueryParameter
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeoutQueryParameter != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeoutQueryParameter != nil {
			qrReturnTimeout = *o.ReturnTimeoutQueryParameter
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.ScannerPercentQueryParameter != nil {

		// query param scanner.percent
		var qrScannerPercent int64

		if o.ScannerPercentQueryParameter != nil {
			qrScannerPercent = *o.ScannerPercentQueryParameter
		}
		qScannerPercent := swag.FormatInt64(qrScannerPercent)
		if qScannerPercent != "" {

			if err := r.SetQueryParam("scanner.percent", qScannerPercent); err != nil {
				return err
			}
		}
	}

	if o.ScannerProgressQueryParameter != nil {

		// query param scanner.progress
		var qrScannerProgress int64

		if o.ScannerProgressQueryParameter != nil {
			qrScannerProgress = *o.ScannerProgressQueryParameter
		}
		qScannerProgress := swag.FormatInt64(qrScannerProgress)
		if qScannerProgress != "" {

			if err := r.SetQueryParam("scanner.progress", qScannerProgress); err != nil {
				return err
			}
		}
	}

	if o.ScannerStateQueryParameter != nil {

		// query param scanner.state
		var qrScannerState string

		if o.ScannerStateQueryParameter != nil {
			qrScannerState = *o.ScannerStateQueryParameter
		}
		qScannerState := qrScannerState
		if qScannerState != "" {

			if err := r.SetQueryParam("scanner.state", qScannerState); err != nil {
				return err
			}
		}
	}

	if o.ScannerTotalQueryParameter != nil {

		// query param scanner.total
		var qrScannerTotal int64

		if o.ScannerTotalQueryParameter != nil {
			qrScannerTotal = *o.ScannerTotalQueryParameter
		}
		qScannerTotal := swag.FormatInt64(qrScannerTotal)
		if qScannerTotal != "" {

			if err := r.SetQueryParam("scanner.total", qScannerTotal); err != nil {
				return err
			}
		}
	}

	if o.SourcePathQueryParameter != nil {

		// query param source.path
		var qrSourcePath string

		if o.SourcePathQueryParameter != nil {
			qrSourcePath = *o.SourcePathQueryParameter
		}
		qSourcePath := qrSourcePath
		if qSourcePath != "" {

			if err := r.SetQueryParam("source.path", qSourcePath); err != nil {
				return err
			}
		}
	}

	if o.SourceSVMNameQueryParameter != nil {

		// query param source.svm.name
		var qrSourceSvmName string

		if o.SourceSVMNameQueryParameter != nil {
			qrSourceSvmName = *o.SourceSVMNameQueryParameter
		}
		qSourceSvmName := qrSourceSvmName
		if qSourceSvmName != "" {

			if err := r.SetQueryParam("source.svm.name", qSourceSvmName); err != nil {
				return err
			}
		}
	}

	if o.SourceSVMUUIDQueryParameter != nil {

		// query param source.svm.uuid
		var qrSourceSvmUUID string

		if o.SourceSVMUUIDQueryParameter != nil {
			qrSourceSvmUUID = *o.SourceSVMUUIDQueryParameter
		}
		qSourceSvmUUID := qrSourceSvmUUID
		if qSourceSvmUUID != "" {

			if err := r.SetQueryParam("source.svm.uuid", qSourceSvmUUID); err != nil {
				return err
			}
		}
	}

	if o.SourceVolumeNameQueryParameter != nil {

		// query param source.volume.name
		var qrSourceVolumeName string

		if o.SourceVolumeNameQueryParameter != nil {
			qrSourceVolumeName = *o.SourceVolumeNameQueryParameter
		}
		qSourceVolumeName := qrSourceVolumeName
		if qSourceVolumeName != "" {

			if err := r.SetQueryParam("source.volume.name", qSourceVolumeName); err != nil {
				return err
			}
		}
	}

	if o.SourceVolumeUUIDQueryParameter != nil {

		// query param source.volume.uuid
		var qrSourceVolumeUUID string

		if o.SourceVolumeUUIDQueryParameter != nil {
			qrSourceVolumeUUID = *o.SourceVolumeUUIDQueryParameter
		}
		qSourceVolumeUUID := qrSourceVolumeUUID
		if qSourceVolumeUUID != "" {

			if err := r.SetQueryParam("source.volume.uuid", qSourceVolumeUUID); err != nil {
				return err
			}
		}
	}

	if o.SVMNameQueryParameter != nil {

		// query param svm.name
		var qrSvmName string

		if o.SVMNameQueryParameter != nil {
			qrSvmName = *o.SVMNameQueryParameter
		}
		qSvmName := qrSvmName
		if qSvmName != "" {

			if err := r.SetQueryParam("svm.name", qSvmName); err != nil {
				return err
			}
		}
	}

	if o.SVMUUIDQueryParameter != nil {

		// query param svm.uuid
		var qrSvmUUID string

		if o.SVMUUIDQueryParameter != nil {
			qrSvmUUID = *o.SVMUUIDQueryParameter
		}
		qSvmUUID := qrSvmUUID
		if qSvmUUID != "" {

			if err := r.SetQueryParam("svm.uuid", qSvmUUID); err != nil {
				return err
			}
		}
	}

	if o.UUIDQueryParameter != nil {

		// query param uuid
		var qrUUID string

		if o.UUIDQueryParameter != nil {
			qrUUID = *o.UUIDQueryParameter
		}
		qUUID := qrUUID
		if qUUID != "" {

			if err := r.SetQueryParam("uuid", qUUID); err != nil {
				return err
			}
		}
	}

	if o.VolumeNameQueryParameter != nil {

		// query param volume.name
		var qrVolumeName string

		if o.VolumeNameQueryParameter != nil {
			qrVolumeName = *o.VolumeNameQueryParameter
		}
		qVolumeName := qrVolumeName
		if qVolumeName != "" {

			if err := r.SetQueryParam("volume.name", qVolumeName); err != nil {
				return err
			}
		}
	}

	if o.VolumeUUIDQueryParameter != nil {

		// query param volume.uuid
		var qrVolumeUUID string

		if o.VolumeUUIDQueryParameter != nil {
			qrVolumeUUID = *o.VolumeUUIDQueryParameter
		}
		qVolumeUUID := qrVolumeUUID
		if qVolumeUUID != "" {

			if err := r.SetQueryParam("volume.uuid", qVolumeUUID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamFileMoveCollectionGet binds the parameter fields
func (o *FileMoveCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.FieldsQueryParameter

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamFileMoveCollectionGet binds the parameter order_by
func (o *FileMoveCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderByQueryParameter

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
