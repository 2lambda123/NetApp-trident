// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewStoragePoolCollectionGetParams creates a new StoragePoolCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewStoragePoolCollectionGetParams() *StoragePoolCollectionGetParams {
	return &StoragePoolCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewStoragePoolCollectionGetParamsWithTimeout creates a new StoragePoolCollectionGetParams object
// with the ability to set a timeout on a request.
func NewStoragePoolCollectionGetParamsWithTimeout(timeout time.Duration) *StoragePoolCollectionGetParams {
	return &StoragePoolCollectionGetParams{
		timeout: timeout,
	}
}

// NewStoragePoolCollectionGetParamsWithContext creates a new StoragePoolCollectionGetParams object
// with the ability to set a context for a request.
func NewStoragePoolCollectionGetParamsWithContext(ctx context.Context) *StoragePoolCollectionGetParams {
	return &StoragePoolCollectionGetParams{
		Context: ctx,
	}
}

// NewStoragePoolCollectionGetParamsWithHTTPClient creates a new StoragePoolCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewStoragePoolCollectionGetParamsWithHTTPClient(client *http.Client) *StoragePoolCollectionGetParams {
	return &StoragePoolCollectionGetParams{
		HTTPClient: client,
	}
}

/*
StoragePoolCollectionGetParams contains all the parameters to send to the API endpoint

	for the storage pool collection get operation.

	Typically these are written to a http.Request.
*/
type StoragePoolCollectionGetParams struct {

	/* CapacityDiskCount.

	   Filter by capacity.disk_count
	*/
	CapacityDiskCountQueryParameter *int64

	/* CapacityDisksDiskName.

	   Filter by capacity.disks.disk.name
	*/
	CapacityDisksDiskNameQueryParameter *string

	/* CapacityDisksTotalSize.

	   Filter by capacity.disks.total_size
	*/
	CapacityDisksTotalSizeQueryParameter *int64

	/* CapacityDisksUsableSize.

	   Filter by capacity.disks.usable_size
	*/
	CapacityDisksUsableSizeQueryParameter *int64

	/* CapacityRemaining.

	   Filter by capacity.remaining
	*/
	CapacityRemainingQueryParameter *int64

	/* CapacitySpareAllocationUnitsAvailableSize.

	   Filter by capacity.spare_allocation_units.available_size
	*/
	CapacitySpareAllocationUnitsAvailableSizeQueryParameter *int64

	/* CapacitySpareAllocationUnitsCount.

	   Filter by capacity.spare_allocation_units.count
	*/
	CapacitySpareAllocationUnitsCountQueryParameter *int64

	/* CapacitySpareAllocationUnitsNodeName.

	   Filter by capacity.spare_allocation_units.node.name
	*/
	CapacitySpareAllocationUnitsNodeNameQueryParameter *string

	/* CapacitySpareAllocationUnitsNodeUUID.

	   Filter by capacity.spare_allocation_units.node.uuid
	*/
	CapacitySpareAllocationUnitsNodeUUIDQueryParameter *string

	/* CapacitySpareAllocationUnitsSize.

	   Filter by capacity.spare_allocation_units.size
	*/
	CapacitySpareAllocationUnitsSizeQueryParameter *int64

	/* CapacitySpareAllocationUnitsSyncmirrorPool.

	   Filter by capacity.spare_allocation_units.syncmirror_pool
	*/
	CapacitySpareAllocationUnitsSyncmirrorPoolQueryParameter *string

	/* CapacityTotal.

	   Filter by capacity.total
	*/
	CapacityTotalQueryParameter *int64

	/* CapacityUsedAllocationUnitsAggregateName.

	   Filter by capacity.used_allocation_units.aggregate.name
	*/
	CapacityUsedAllocationUnitsAggregateNameQueryParameter *string

	/* CapacityUsedAllocationUnitsAggregateUUID.

	   Filter by capacity.used_allocation_units.aggregate.uuid
	*/
	CapacityUsedAllocationUnitsAggregateUUIDQueryParameter *string

	/* CapacityUsedAllocationUnitsCount.

	   Filter by capacity.used_allocation_units.count
	*/
	CapacityUsedAllocationUnitsCountQueryParameter *int64

	/* CapacityUsedAllocationUnitsCurrentUsage.

	   Filter by capacity.used_allocation_units.current_usage
	*/
	CapacityUsedAllocationUnitsCurrentUsageQueryParameter *int64

	/* CapacityUsedAllocationUnitsNodeName.

	   Filter by capacity.used_allocation_units.node.name
	*/
	CapacityUsedAllocationUnitsNodeNameQueryParameter *string

	/* CapacityUsedAllocationUnitsNodeUUID.

	   Filter by capacity.used_allocation_units.node.uuid
	*/
	CapacityUsedAllocationUnitsNodeUUIDQueryParameter *string

	/* Fields.

	   Specify the fields to return.
	*/
	FieldsQueryParameter []string

	/* HealthIsHealthy.

	   Filter by health.is_healthy
	*/
	HealthIsHealthyQueryParameter *bool

	/* HealthState.

	   Filter by health.state
	*/
	HealthStateQueryParameter *string

	/* HealthUnhealthyReasonArgumentsCode.

	   Filter by health.unhealthy_reason.arguments.code
	*/
	HealthUnhealthyReasonArgumentsCodeQueryParameter *string

	/* HealthUnhealthyReasonArgumentsMessage.

	   Filter by health.unhealthy_reason.arguments.message
	*/
	HealthUnhealthyReasonArgumentsMessageQueryParameter *string

	/* HealthUnhealthyReasonCode.

	   Filter by health.unhealthy_reason.code
	*/
	HealthUnhealthyReasonCodeQueryParameter *string

	/* HealthUnhealthyReasonMessage.

	   Filter by health.unhealthy_reason.message
	*/
	HealthUnhealthyReasonMessageQueryParameter *string

	/* HealthUnhealthyReasonTarget.

	   Filter by health.unhealthy_reason.target
	*/
	HealthUnhealthyReasonTargetQueryParameter *string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecordsQueryParameter *int64

	/* Name.

	   Filter by name
	*/
	NameQueryParameter *string

	/* NodesName.

	   Filter by nodes.name
	*/
	NodesNameQueryParameter *string

	/* NodesUUID.

	   Filter by nodes.uuid
	*/
	NodesUUIDQueryParameter *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderByQueryParameter []string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecordsQueryParameter *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeoutQueryParameter *int64

	/* StorageType.

	   Filter by storage_type
	*/
	StorageTypeQueryParameter *string

	/* UUID.

	   Filter by uuid
	*/
	UUIDQueryParameter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the storage pool collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *StoragePoolCollectionGetParams) WithDefaults() *StoragePoolCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the storage pool collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *StoragePoolCollectionGetParams) SetDefaults() {
	var (
		returnRecordsQueryParameterDefault = bool(true)

		returnTimeoutQueryParameterDefault = int64(15)
	)

	val := StoragePoolCollectionGetParams{
		ReturnRecordsQueryParameter: &returnRecordsQueryParameterDefault,
		ReturnTimeoutQueryParameter: &returnTimeoutQueryParameterDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) WithTimeout(timeout time.Duration) *StoragePoolCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) WithContext(ctx context.Context) *StoragePoolCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) WithHTTPClient(client *http.Client) *StoragePoolCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCapacityDiskCountQueryParameter adds the capacityDiskCount to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) WithCapacityDiskCountQueryParameter(capacityDiskCount *int64) *StoragePoolCollectionGetParams {
	o.SetCapacityDiskCountQueryParameter(capacityDiskCount)
	return o
}

// SetCapacityDiskCountQueryParameter adds the capacityDiskCount to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) SetCapacityDiskCountQueryParameter(capacityDiskCount *int64) {
	o.CapacityDiskCountQueryParameter = capacityDiskCount
}

// WithCapacityDisksDiskNameQueryParameter adds the capacityDisksDiskName to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) WithCapacityDisksDiskNameQueryParameter(capacityDisksDiskName *string) *StoragePoolCollectionGetParams {
	o.SetCapacityDisksDiskNameQueryParameter(capacityDisksDiskName)
	return o
}

// SetCapacityDisksDiskNameQueryParameter adds the capacityDisksDiskName to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) SetCapacityDisksDiskNameQueryParameter(capacityDisksDiskName *string) {
	o.CapacityDisksDiskNameQueryParameter = capacityDisksDiskName
}

// WithCapacityDisksTotalSizeQueryParameter adds the capacityDisksTotalSize to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) WithCapacityDisksTotalSizeQueryParameter(capacityDisksTotalSize *int64) *StoragePoolCollectionGetParams {
	o.SetCapacityDisksTotalSizeQueryParameter(capacityDisksTotalSize)
	return o
}

// SetCapacityDisksTotalSizeQueryParameter adds the capacityDisksTotalSize to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) SetCapacityDisksTotalSizeQueryParameter(capacityDisksTotalSize *int64) {
	o.CapacityDisksTotalSizeQueryParameter = capacityDisksTotalSize
}

// WithCapacityDisksUsableSizeQueryParameter adds the capacityDisksUsableSize to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) WithCapacityDisksUsableSizeQueryParameter(capacityDisksUsableSize *int64) *StoragePoolCollectionGetParams {
	o.SetCapacityDisksUsableSizeQueryParameter(capacityDisksUsableSize)
	return o
}

// SetCapacityDisksUsableSizeQueryParameter adds the capacityDisksUsableSize to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) SetCapacityDisksUsableSizeQueryParameter(capacityDisksUsableSize *int64) {
	o.CapacityDisksUsableSizeQueryParameter = capacityDisksUsableSize
}

// WithCapacityRemainingQueryParameter adds the capacityRemaining to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) WithCapacityRemainingQueryParameter(capacityRemaining *int64) *StoragePoolCollectionGetParams {
	o.SetCapacityRemainingQueryParameter(capacityRemaining)
	return o
}

// SetCapacityRemainingQueryParameter adds the capacityRemaining to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) SetCapacityRemainingQueryParameter(capacityRemaining *int64) {
	o.CapacityRemainingQueryParameter = capacityRemaining
}

// WithCapacitySpareAllocationUnitsAvailableSizeQueryParameter adds the capacitySpareAllocationUnitsAvailableSize to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) WithCapacitySpareAllocationUnitsAvailableSizeQueryParameter(capacitySpareAllocationUnitsAvailableSize *int64) *StoragePoolCollectionGetParams {
	o.SetCapacitySpareAllocationUnitsAvailableSizeQueryParameter(capacitySpareAllocationUnitsAvailableSize)
	return o
}

// SetCapacitySpareAllocationUnitsAvailableSizeQueryParameter adds the capacitySpareAllocationUnitsAvailableSize to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) SetCapacitySpareAllocationUnitsAvailableSizeQueryParameter(capacitySpareAllocationUnitsAvailableSize *int64) {
	o.CapacitySpareAllocationUnitsAvailableSizeQueryParameter = capacitySpareAllocationUnitsAvailableSize
}

// WithCapacitySpareAllocationUnitsCountQueryParameter adds the capacitySpareAllocationUnitsCount to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) WithCapacitySpareAllocationUnitsCountQueryParameter(capacitySpareAllocationUnitsCount *int64) *StoragePoolCollectionGetParams {
	o.SetCapacitySpareAllocationUnitsCountQueryParameter(capacitySpareAllocationUnitsCount)
	return o
}

// SetCapacitySpareAllocationUnitsCountQueryParameter adds the capacitySpareAllocationUnitsCount to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) SetCapacitySpareAllocationUnitsCountQueryParameter(capacitySpareAllocationUnitsCount *int64) {
	o.CapacitySpareAllocationUnitsCountQueryParameter = capacitySpareAllocationUnitsCount
}

// WithCapacitySpareAllocationUnitsNodeNameQueryParameter adds the capacitySpareAllocationUnitsNodeName to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) WithCapacitySpareAllocationUnitsNodeNameQueryParameter(capacitySpareAllocationUnitsNodeName *string) *StoragePoolCollectionGetParams {
	o.SetCapacitySpareAllocationUnitsNodeNameQueryParameter(capacitySpareAllocationUnitsNodeName)
	return o
}

// SetCapacitySpareAllocationUnitsNodeNameQueryParameter adds the capacitySpareAllocationUnitsNodeName to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) SetCapacitySpareAllocationUnitsNodeNameQueryParameter(capacitySpareAllocationUnitsNodeName *string) {
	o.CapacitySpareAllocationUnitsNodeNameQueryParameter = capacitySpareAllocationUnitsNodeName
}

// WithCapacitySpareAllocationUnitsNodeUUIDQueryParameter adds the capacitySpareAllocationUnitsNodeUUID to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) WithCapacitySpareAllocationUnitsNodeUUIDQueryParameter(capacitySpareAllocationUnitsNodeUUID *string) *StoragePoolCollectionGetParams {
	o.SetCapacitySpareAllocationUnitsNodeUUIDQueryParameter(capacitySpareAllocationUnitsNodeUUID)
	return o
}

// SetCapacitySpareAllocationUnitsNodeUUIDQueryParameter adds the capacitySpareAllocationUnitsNodeUuid to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) SetCapacitySpareAllocationUnitsNodeUUIDQueryParameter(capacitySpareAllocationUnitsNodeUUID *string) {
	o.CapacitySpareAllocationUnitsNodeUUIDQueryParameter = capacitySpareAllocationUnitsNodeUUID
}

// WithCapacitySpareAllocationUnitsSizeQueryParameter adds the capacitySpareAllocationUnitsSize to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) WithCapacitySpareAllocationUnitsSizeQueryParameter(capacitySpareAllocationUnitsSize *int64) *StoragePoolCollectionGetParams {
	o.SetCapacitySpareAllocationUnitsSizeQueryParameter(capacitySpareAllocationUnitsSize)
	return o
}

// SetCapacitySpareAllocationUnitsSizeQueryParameter adds the capacitySpareAllocationUnitsSize to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) SetCapacitySpareAllocationUnitsSizeQueryParameter(capacitySpareAllocationUnitsSize *int64) {
	o.CapacitySpareAllocationUnitsSizeQueryParameter = capacitySpareAllocationUnitsSize
}

// WithCapacitySpareAllocationUnitsSyncmirrorPoolQueryParameter adds the capacitySpareAllocationUnitsSyncmirrorPool to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) WithCapacitySpareAllocationUnitsSyncmirrorPoolQueryParameter(capacitySpareAllocationUnitsSyncmirrorPool *string) *StoragePoolCollectionGetParams {
	o.SetCapacitySpareAllocationUnitsSyncmirrorPoolQueryParameter(capacitySpareAllocationUnitsSyncmirrorPool)
	return o
}

// SetCapacitySpareAllocationUnitsSyncmirrorPoolQueryParameter adds the capacitySpareAllocationUnitsSyncmirrorPool to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) SetCapacitySpareAllocationUnitsSyncmirrorPoolQueryParameter(capacitySpareAllocationUnitsSyncmirrorPool *string) {
	o.CapacitySpareAllocationUnitsSyncmirrorPoolQueryParameter = capacitySpareAllocationUnitsSyncmirrorPool
}

// WithCapacityTotalQueryParameter adds the capacityTotal to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) WithCapacityTotalQueryParameter(capacityTotal *int64) *StoragePoolCollectionGetParams {
	o.SetCapacityTotalQueryParameter(capacityTotal)
	return o
}

// SetCapacityTotalQueryParameter adds the capacityTotal to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) SetCapacityTotalQueryParameter(capacityTotal *int64) {
	o.CapacityTotalQueryParameter = capacityTotal
}

// WithCapacityUsedAllocationUnitsAggregateNameQueryParameter adds the capacityUsedAllocationUnitsAggregateName to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) WithCapacityUsedAllocationUnitsAggregateNameQueryParameter(capacityUsedAllocationUnitsAggregateName *string) *StoragePoolCollectionGetParams {
	o.SetCapacityUsedAllocationUnitsAggregateNameQueryParameter(capacityUsedAllocationUnitsAggregateName)
	return o
}

// SetCapacityUsedAllocationUnitsAggregateNameQueryParameter adds the capacityUsedAllocationUnitsAggregateName to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) SetCapacityUsedAllocationUnitsAggregateNameQueryParameter(capacityUsedAllocationUnitsAggregateName *string) {
	o.CapacityUsedAllocationUnitsAggregateNameQueryParameter = capacityUsedAllocationUnitsAggregateName
}

// WithCapacityUsedAllocationUnitsAggregateUUIDQueryParameter adds the capacityUsedAllocationUnitsAggregateUUID to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) WithCapacityUsedAllocationUnitsAggregateUUIDQueryParameter(capacityUsedAllocationUnitsAggregateUUID *string) *StoragePoolCollectionGetParams {
	o.SetCapacityUsedAllocationUnitsAggregateUUIDQueryParameter(capacityUsedAllocationUnitsAggregateUUID)
	return o
}

// SetCapacityUsedAllocationUnitsAggregateUUIDQueryParameter adds the capacityUsedAllocationUnitsAggregateUuid to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) SetCapacityUsedAllocationUnitsAggregateUUIDQueryParameter(capacityUsedAllocationUnitsAggregateUUID *string) {
	o.CapacityUsedAllocationUnitsAggregateUUIDQueryParameter = capacityUsedAllocationUnitsAggregateUUID
}

// WithCapacityUsedAllocationUnitsCountQueryParameter adds the capacityUsedAllocationUnitsCount to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) WithCapacityUsedAllocationUnitsCountQueryParameter(capacityUsedAllocationUnitsCount *int64) *StoragePoolCollectionGetParams {
	o.SetCapacityUsedAllocationUnitsCountQueryParameter(capacityUsedAllocationUnitsCount)
	return o
}

// SetCapacityUsedAllocationUnitsCountQueryParameter adds the capacityUsedAllocationUnitsCount to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) SetCapacityUsedAllocationUnitsCountQueryParameter(capacityUsedAllocationUnitsCount *int64) {
	o.CapacityUsedAllocationUnitsCountQueryParameter = capacityUsedAllocationUnitsCount
}

// WithCapacityUsedAllocationUnitsCurrentUsageQueryParameter adds the capacityUsedAllocationUnitsCurrentUsage to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) WithCapacityUsedAllocationUnitsCurrentUsageQueryParameter(capacityUsedAllocationUnitsCurrentUsage *int64) *StoragePoolCollectionGetParams {
	o.SetCapacityUsedAllocationUnitsCurrentUsageQueryParameter(capacityUsedAllocationUnitsCurrentUsage)
	return o
}

// SetCapacityUsedAllocationUnitsCurrentUsageQueryParameter adds the capacityUsedAllocationUnitsCurrentUsage to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) SetCapacityUsedAllocationUnitsCurrentUsageQueryParameter(capacityUsedAllocationUnitsCurrentUsage *int64) {
	o.CapacityUsedAllocationUnitsCurrentUsageQueryParameter = capacityUsedAllocationUnitsCurrentUsage
}

// WithCapacityUsedAllocationUnitsNodeNameQueryParameter adds the capacityUsedAllocationUnitsNodeName to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) WithCapacityUsedAllocationUnitsNodeNameQueryParameter(capacityUsedAllocationUnitsNodeName *string) *StoragePoolCollectionGetParams {
	o.SetCapacityUsedAllocationUnitsNodeNameQueryParameter(capacityUsedAllocationUnitsNodeName)
	return o
}

// SetCapacityUsedAllocationUnitsNodeNameQueryParameter adds the capacityUsedAllocationUnitsNodeName to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) SetCapacityUsedAllocationUnitsNodeNameQueryParameter(capacityUsedAllocationUnitsNodeName *string) {
	o.CapacityUsedAllocationUnitsNodeNameQueryParameter = capacityUsedAllocationUnitsNodeName
}

// WithCapacityUsedAllocationUnitsNodeUUIDQueryParameter adds the capacityUsedAllocationUnitsNodeUUID to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) WithCapacityUsedAllocationUnitsNodeUUIDQueryParameter(capacityUsedAllocationUnitsNodeUUID *string) *StoragePoolCollectionGetParams {
	o.SetCapacityUsedAllocationUnitsNodeUUIDQueryParameter(capacityUsedAllocationUnitsNodeUUID)
	return o
}

// SetCapacityUsedAllocationUnitsNodeUUIDQueryParameter adds the capacityUsedAllocationUnitsNodeUuid to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) SetCapacityUsedAllocationUnitsNodeUUIDQueryParameter(capacityUsedAllocationUnitsNodeUUID *string) {
	o.CapacityUsedAllocationUnitsNodeUUIDQueryParameter = capacityUsedAllocationUnitsNodeUUID
}

// WithFieldsQueryParameter adds the fields to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) WithFieldsQueryParameter(fields []string) *StoragePoolCollectionGetParams {
	o.SetFieldsQueryParameter(fields)
	return o
}

// SetFieldsQueryParameter adds the fields to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) SetFieldsQueryParameter(fields []string) {
	o.FieldsQueryParameter = fields
}

// WithHealthIsHealthyQueryParameter adds the healthIsHealthy to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) WithHealthIsHealthyQueryParameter(healthIsHealthy *bool) *StoragePoolCollectionGetParams {
	o.SetHealthIsHealthyQueryParameter(healthIsHealthy)
	return o
}

// SetHealthIsHealthyQueryParameter adds the healthIsHealthy to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) SetHealthIsHealthyQueryParameter(healthIsHealthy *bool) {
	o.HealthIsHealthyQueryParameter = healthIsHealthy
}

// WithHealthStateQueryParameter adds the healthState to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) WithHealthStateQueryParameter(healthState *string) *StoragePoolCollectionGetParams {
	o.SetHealthStateQueryParameter(healthState)
	return o
}

// SetHealthStateQueryParameter adds the healthState to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) SetHealthStateQueryParameter(healthState *string) {
	o.HealthStateQueryParameter = healthState
}

// WithHealthUnhealthyReasonArgumentsCodeQueryParameter adds the healthUnhealthyReasonArgumentsCode to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) WithHealthUnhealthyReasonArgumentsCodeQueryParameter(healthUnhealthyReasonArgumentsCode *string) *StoragePoolCollectionGetParams {
	o.SetHealthUnhealthyReasonArgumentsCodeQueryParameter(healthUnhealthyReasonArgumentsCode)
	return o
}

// SetHealthUnhealthyReasonArgumentsCodeQueryParameter adds the healthUnhealthyReasonArgumentsCode to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) SetHealthUnhealthyReasonArgumentsCodeQueryParameter(healthUnhealthyReasonArgumentsCode *string) {
	o.HealthUnhealthyReasonArgumentsCodeQueryParameter = healthUnhealthyReasonArgumentsCode
}

// WithHealthUnhealthyReasonArgumentsMessageQueryParameter adds the healthUnhealthyReasonArgumentsMessage to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) WithHealthUnhealthyReasonArgumentsMessageQueryParameter(healthUnhealthyReasonArgumentsMessage *string) *StoragePoolCollectionGetParams {
	o.SetHealthUnhealthyReasonArgumentsMessageQueryParameter(healthUnhealthyReasonArgumentsMessage)
	return o
}

// SetHealthUnhealthyReasonArgumentsMessageQueryParameter adds the healthUnhealthyReasonArgumentsMessage to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) SetHealthUnhealthyReasonArgumentsMessageQueryParameter(healthUnhealthyReasonArgumentsMessage *string) {
	o.HealthUnhealthyReasonArgumentsMessageQueryParameter = healthUnhealthyReasonArgumentsMessage
}

// WithHealthUnhealthyReasonCodeQueryParameter adds the healthUnhealthyReasonCode to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) WithHealthUnhealthyReasonCodeQueryParameter(healthUnhealthyReasonCode *string) *StoragePoolCollectionGetParams {
	o.SetHealthUnhealthyReasonCodeQueryParameter(healthUnhealthyReasonCode)
	return o
}

// SetHealthUnhealthyReasonCodeQueryParameter adds the healthUnhealthyReasonCode to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) SetHealthUnhealthyReasonCodeQueryParameter(healthUnhealthyReasonCode *string) {
	o.HealthUnhealthyReasonCodeQueryParameter = healthUnhealthyReasonCode
}

// WithHealthUnhealthyReasonMessageQueryParameter adds the healthUnhealthyReasonMessage to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) WithHealthUnhealthyReasonMessageQueryParameter(healthUnhealthyReasonMessage *string) *StoragePoolCollectionGetParams {
	o.SetHealthUnhealthyReasonMessageQueryParameter(healthUnhealthyReasonMessage)
	return o
}

// SetHealthUnhealthyReasonMessageQueryParameter adds the healthUnhealthyReasonMessage to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) SetHealthUnhealthyReasonMessageQueryParameter(healthUnhealthyReasonMessage *string) {
	o.HealthUnhealthyReasonMessageQueryParameter = healthUnhealthyReasonMessage
}

// WithHealthUnhealthyReasonTargetQueryParameter adds the healthUnhealthyReasonTarget to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) WithHealthUnhealthyReasonTargetQueryParameter(healthUnhealthyReasonTarget *string) *StoragePoolCollectionGetParams {
	o.SetHealthUnhealthyReasonTargetQueryParameter(healthUnhealthyReasonTarget)
	return o
}

// SetHealthUnhealthyReasonTargetQueryParameter adds the healthUnhealthyReasonTarget to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) SetHealthUnhealthyReasonTargetQueryParameter(healthUnhealthyReasonTarget *string) {
	o.HealthUnhealthyReasonTargetQueryParameter = healthUnhealthyReasonTarget
}

// WithMaxRecordsQueryParameter adds the maxRecords to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) WithMaxRecordsQueryParameter(maxRecords *int64) *StoragePoolCollectionGetParams {
	o.SetMaxRecordsQueryParameter(maxRecords)
	return o
}

// SetMaxRecordsQueryParameter adds the maxRecords to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) SetMaxRecordsQueryParameter(maxRecords *int64) {
	o.MaxRecordsQueryParameter = maxRecords
}

// WithNameQueryParameter adds the name to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) WithNameQueryParameter(name *string) *StoragePoolCollectionGetParams {
	o.SetNameQueryParameter(name)
	return o
}

// SetNameQueryParameter adds the name to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) SetNameQueryParameter(name *string) {
	o.NameQueryParameter = name
}

// WithNodesNameQueryParameter adds the nodesName to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) WithNodesNameQueryParameter(nodesName *string) *StoragePoolCollectionGetParams {
	o.SetNodesNameQueryParameter(nodesName)
	return o
}

// SetNodesNameQueryParameter adds the nodesName to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) SetNodesNameQueryParameter(nodesName *string) {
	o.NodesNameQueryParameter = nodesName
}

// WithNodesUUIDQueryParameter adds the nodesUUID to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) WithNodesUUIDQueryParameter(nodesUUID *string) *StoragePoolCollectionGetParams {
	o.SetNodesUUIDQueryParameter(nodesUUID)
	return o
}

// SetNodesUUIDQueryParameter adds the nodesUuid to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) SetNodesUUIDQueryParameter(nodesUUID *string) {
	o.NodesUUIDQueryParameter = nodesUUID
}

// WithOrderByQueryParameter adds the orderBy to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) WithOrderByQueryParameter(orderBy []string) *StoragePoolCollectionGetParams {
	o.SetOrderByQueryParameter(orderBy)
	return o
}

// SetOrderByQueryParameter adds the orderBy to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) SetOrderByQueryParameter(orderBy []string) {
	o.OrderByQueryParameter = orderBy
}

// WithReturnRecordsQueryParameter adds the returnRecords to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) WithReturnRecordsQueryParameter(returnRecords *bool) *StoragePoolCollectionGetParams {
	o.SetReturnRecordsQueryParameter(returnRecords)
	return o
}

// SetReturnRecordsQueryParameter adds the returnRecords to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) SetReturnRecordsQueryParameter(returnRecords *bool) {
	o.ReturnRecordsQueryParameter = returnRecords
}

// WithReturnTimeoutQueryParameter adds the returnTimeout to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) WithReturnTimeoutQueryParameter(returnTimeout *int64) *StoragePoolCollectionGetParams {
	o.SetReturnTimeoutQueryParameter(returnTimeout)
	return o
}

// SetReturnTimeoutQueryParameter adds the returnTimeout to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) SetReturnTimeoutQueryParameter(returnTimeout *int64) {
	o.ReturnTimeoutQueryParameter = returnTimeout
}

// WithStorageTypeQueryParameter adds the storageType to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) WithStorageTypeQueryParameter(storageType *string) *StoragePoolCollectionGetParams {
	o.SetStorageTypeQueryParameter(storageType)
	return o
}

// SetStorageTypeQueryParameter adds the storageType to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) SetStorageTypeQueryParameter(storageType *string) {
	o.StorageTypeQueryParameter = storageType
}

// WithUUIDQueryParameter adds the uuid to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) WithUUIDQueryParameter(uuid *string) *StoragePoolCollectionGetParams {
	o.SetUUIDQueryParameter(uuid)
	return o
}

// SetUUIDQueryParameter adds the uuid to the storage pool collection get params
func (o *StoragePoolCollectionGetParams) SetUUIDQueryParameter(uuid *string) {
	o.UUIDQueryParameter = uuid
}

// WriteToRequest writes these params to a swagger request
func (o *StoragePoolCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CapacityDiskCountQueryParameter != nil {

		// query param capacity.disk_count
		var qrCapacityDiskCount int64

		if o.CapacityDiskCountQueryParameter != nil {
			qrCapacityDiskCount = *o.CapacityDiskCountQueryParameter
		}
		qCapacityDiskCount := swag.FormatInt64(qrCapacityDiskCount)
		if qCapacityDiskCount != "" {

			if err := r.SetQueryParam("capacity.disk_count", qCapacityDiskCount); err != nil {
				return err
			}
		}
	}

	if o.CapacityDisksDiskNameQueryParameter != nil {

		// query param capacity.disks.disk.name
		var qrCapacityDisksDiskName string

		if o.CapacityDisksDiskNameQueryParameter != nil {
			qrCapacityDisksDiskName = *o.CapacityDisksDiskNameQueryParameter
		}
		qCapacityDisksDiskName := qrCapacityDisksDiskName
		if qCapacityDisksDiskName != "" {

			if err := r.SetQueryParam("capacity.disks.disk.name", qCapacityDisksDiskName); err != nil {
				return err
			}
		}
	}

	if o.CapacityDisksTotalSizeQueryParameter != nil {

		// query param capacity.disks.total_size
		var qrCapacityDisksTotalSize int64

		if o.CapacityDisksTotalSizeQueryParameter != nil {
			qrCapacityDisksTotalSize = *o.CapacityDisksTotalSizeQueryParameter
		}
		qCapacityDisksTotalSize := swag.FormatInt64(qrCapacityDisksTotalSize)
		if qCapacityDisksTotalSize != "" {

			if err := r.SetQueryParam("capacity.disks.total_size", qCapacityDisksTotalSize); err != nil {
				return err
			}
		}
	}

	if o.CapacityDisksUsableSizeQueryParameter != nil {

		// query param capacity.disks.usable_size
		var qrCapacityDisksUsableSize int64

		if o.CapacityDisksUsableSizeQueryParameter != nil {
			qrCapacityDisksUsableSize = *o.CapacityDisksUsableSizeQueryParameter
		}
		qCapacityDisksUsableSize := swag.FormatInt64(qrCapacityDisksUsableSize)
		if qCapacityDisksUsableSize != "" {

			if err := r.SetQueryParam("capacity.disks.usable_size", qCapacityDisksUsableSize); err != nil {
				return err
			}
		}
	}

	if o.CapacityRemainingQueryParameter != nil {

		// query param capacity.remaining
		var qrCapacityRemaining int64

		if o.CapacityRemainingQueryParameter != nil {
			qrCapacityRemaining = *o.CapacityRemainingQueryParameter
		}
		qCapacityRemaining := swag.FormatInt64(qrCapacityRemaining)
		if qCapacityRemaining != "" {

			if err := r.SetQueryParam("capacity.remaining", qCapacityRemaining); err != nil {
				return err
			}
		}
	}

	if o.CapacitySpareAllocationUnitsAvailableSizeQueryParameter != nil {

		// query param capacity.spare_allocation_units.available_size
		var qrCapacitySpareAllocationUnitsAvailableSize int64

		if o.CapacitySpareAllocationUnitsAvailableSizeQueryParameter != nil {
			qrCapacitySpareAllocationUnitsAvailableSize = *o.CapacitySpareAllocationUnitsAvailableSizeQueryParameter
		}
		qCapacitySpareAllocationUnitsAvailableSize := swag.FormatInt64(qrCapacitySpareAllocationUnitsAvailableSize)
		if qCapacitySpareAllocationUnitsAvailableSize != "" {

			if err := r.SetQueryParam("capacity.spare_allocation_units.available_size", qCapacitySpareAllocationUnitsAvailableSize); err != nil {
				return err
			}
		}
	}

	if o.CapacitySpareAllocationUnitsCountQueryParameter != nil {

		// query param capacity.spare_allocation_units.count
		var qrCapacitySpareAllocationUnitsCount int64

		if o.CapacitySpareAllocationUnitsCountQueryParameter != nil {
			qrCapacitySpareAllocationUnitsCount = *o.CapacitySpareAllocationUnitsCountQueryParameter
		}
		qCapacitySpareAllocationUnitsCount := swag.FormatInt64(qrCapacitySpareAllocationUnitsCount)
		if qCapacitySpareAllocationUnitsCount != "" {

			if err := r.SetQueryParam("capacity.spare_allocation_units.count", qCapacitySpareAllocationUnitsCount); err != nil {
				return err
			}
		}
	}

	if o.CapacitySpareAllocationUnitsNodeNameQueryParameter != nil {

		// query param capacity.spare_allocation_units.node.name
		var qrCapacitySpareAllocationUnitsNodeName string

		if o.CapacitySpareAllocationUnitsNodeNameQueryParameter != nil {
			qrCapacitySpareAllocationUnitsNodeName = *o.CapacitySpareAllocationUnitsNodeNameQueryParameter
		}
		qCapacitySpareAllocationUnitsNodeName := qrCapacitySpareAllocationUnitsNodeName
		if qCapacitySpareAllocationUnitsNodeName != "" {

			if err := r.SetQueryParam("capacity.spare_allocation_units.node.name", qCapacitySpareAllocationUnitsNodeName); err != nil {
				return err
			}
		}
	}

	if o.CapacitySpareAllocationUnitsNodeUUIDQueryParameter != nil {

		// query param capacity.spare_allocation_units.node.uuid
		var qrCapacitySpareAllocationUnitsNodeUUID string

		if o.CapacitySpareAllocationUnitsNodeUUIDQueryParameter != nil {
			qrCapacitySpareAllocationUnitsNodeUUID = *o.CapacitySpareAllocationUnitsNodeUUIDQueryParameter
		}
		qCapacitySpareAllocationUnitsNodeUUID := qrCapacitySpareAllocationUnitsNodeUUID
		if qCapacitySpareAllocationUnitsNodeUUID != "" {

			if err := r.SetQueryParam("capacity.spare_allocation_units.node.uuid", qCapacitySpareAllocationUnitsNodeUUID); err != nil {
				return err
			}
		}
	}

	if o.CapacitySpareAllocationUnitsSizeQueryParameter != nil {

		// query param capacity.spare_allocation_units.size
		var qrCapacitySpareAllocationUnitsSize int64

		if o.CapacitySpareAllocationUnitsSizeQueryParameter != nil {
			qrCapacitySpareAllocationUnitsSize = *o.CapacitySpareAllocationUnitsSizeQueryParameter
		}
		qCapacitySpareAllocationUnitsSize := swag.FormatInt64(qrCapacitySpareAllocationUnitsSize)
		if qCapacitySpareAllocationUnitsSize != "" {

			if err := r.SetQueryParam("capacity.spare_allocation_units.size", qCapacitySpareAllocationUnitsSize); err != nil {
				return err
			}
		}
	}

	if o.CapacitySpareAllocationUnitsSyncmirrorPoolQueryParameter != nil {

		// query param capacity.spare_allocation_units.syncmirror_pool
		var qrCapacitySpareAllocationUnitsSyncmirrorPool string

		if o.CapacitySpareAllocationUnitsSyncmirrorPoolQueryParameter != nil {
			qrCapacitySpareAllocationUnitsSyncmirrorPool = *o.CapacitySpareAllocationUnitsSyncmirrorPoolQueryParameter
		}
		qCapacitySpareAllocationUnitsSyncmirrorPool := qrCapacitySpareAllocationUnitsSyncmirrorPool
		if qCapacitySpareAllocationUnitsSyncmirrorPool != "" {

			if err := r.SetQueryParam("capacity.spare_allocation_units.syncmirror_pool", qCapacitySpareAllocationUnitsSyncmirrorPool); err != nil {
				return err
			}
		}
	}

	if o.CapacityTotalQueryParameter != nil {

		// query param capacity.total
		var qrCapacityTotal int64

		if o.CapacityTotalQueryParameter != nil {
			qrCapacityTotal = *o.CapacityTotalQueryParameter
		}
		qCapacityTotal := swag.FormatInt64(qrCapacityTotal)
		if qCapacityTotal != "" {

			if err := r.SetQueryParam("capacity.total", qCapacityTotal); err != nil {
				return err
			}
		}
	}

	if o.CapacityUsedAllocationUnitsAggregateNameQueryParameter != nil {

		// query param capacity.used_allocation_units.aggregate.name
		var qrCapacityUsedAllocationUnitsAggregateName string

		if o.CapacityUsedAllocationUnitsAggregateNameQueryParameter != nil {
			qrCapacityUsedAllocationUnitsAggregateName = *o.CapacityUsedAllocationUnitsAggregateNameQueryParameter
		}
		qCapacityUsedAllocationUnitsAggregateName := qrCapacityUsedAllocationUnitsAggregateName
		if qCapacityUsedAllocationUnitsAggregateName != "" {

			if err := r.SetQueryParam("capacity.used_allocation_units.aggregate.name", qCapacityUsedAllocationUnitsAggregateName); err != nil {
				return err
			}
		}
	}

	if o.CapacityUsedAllocationUnitsAggregateUUIDQueryParameter != nil {

		// query param capacity.used_allocation_units.aggregate.uuid
		var qrCapacityUsedAllocationUnitsAggregateUUID string

		if o.CapacityUsedAllocationUnitsAggregateUUIDQueryParameter != nil {
			qrCapacityUsedAllocationUnitsAggregateUUID = *o.CapacityUsedAllocationUnitsAggregateUUIDQueryParameter
		}
		qCapacityUsedAllocationUnitsAggregateUUID := qrCapacityUsedAllocationUnitsAggregateUUID
		if qCapacityUsedAllocationUnitsAggregateUUID != "" {

			if err := r.SetQueryParam("capacity.used_allocation_units.aggregate.uuid", qCapacityUsedAllocationUnitsAggregateUUID); err != nil {
				return err
			}
		}
	}

	if o.CapacityUsedAllocationUnitsCountQueryParameter != nil {

		// query param capacity.used_allocation_units.count
		var qrCapacityUsedAllocationUnitsCount int64

		if o.CapacityUsedAllocationUnitsCountQueryParameter != nil {
			qrCapacityUsedAllocationUnitsCount = *o.CapacityUsedAllocationUnitsCountQueryParameter
		}
		qCapacityUsedAllocationUnitsCount := swag.FormatInt64(qrCapacityUsedAllocationUnitsCount)
		if qCapacityUsedAllocationUnitsCount != "" {

			if err := r.SetQueryParam("capacity.used_allocation_units.count", qCapacityUsedAllocationUnitsCount); err != nil {
				return err
			}
		}
	}

	if o.CapacityUsedAllocationUnitsCurrentUsageQueryParameter != nil {

		// query param capacity.used_allocation_units.current_usage
		var qrCapacityUsedAllocationUnitsCurrentUsage int64

		if o.CapacityUsedAllocationUnitsCurrentUsageQueryParameter != nil {
			qrCapacityUsedAllocationUnitsCurrentUsage = *o.CapacityUsedAllocationUnitsCurrentUsageQueryParameter
		}
		qCapacityUsedAllocationUnitsCurrentUsage := swag.FormatInt64(qrCapacityUsedAllocationUnitsCurrentUsage)
		if qCapacityUsedAllocationUnitsCurrentUsage != "" {

			if err := r.SetQueryParam("capacity.used_allocation_units.current_usage", qCapacityUsedAllocationUnitsCurrentUsage); err != nil {
				return err
			}
		}
	}

	if o.CapacityUsedAllocationUnitsNodeNameQueryParameter != nil {

		// query param capacity.used_allocation_units.node.name
		var qrCapacityUsedAllocationUnitsNodeName string

		if o.CapacityUsedAllocationUnitsNodeNameQueryParameter != nil {
			qrCapacityUsedAllocationUnitsNodeName = *o.CapacityUsedAllocationUnitsNodeNameQueryParameter
		}
		qCapacityUsedAllocationUnitsNodeName := qrCapacityUsedAllocationUnitsNodeName
		if qCapacityUsedAllocationUnitsNodeName != "" {

			if err := r.SetQueryParam("capacity.used_allocation_units.node.name", qCapacityUsedAllocationUnitsNodeName); err != nil {
				return err
			}
		}
	}

	if o.CapacityUsedAllocationUnitsNodeUUIDQueryParameter != nil {

		// query param capacity.used_allocation_units.node.uuid
		var qrCapacityUsedAllocationUnitsNodeUUID string

		if o.CapacityUsedAllocationUnitsNodeUUIDQueryParameter != nil {
			qrCapacityUsedAllocationUnitsNodeUUID = *o.CapacityUsedAllocationUnitsNodeUUIDQueryParameter
		}
		qCapacityUsedAllocationUnitsNodeUUID := qrCapacityUsedAllocationUnitsNodeUUID
		if qCapacityUsedAllocationUnitsNodeUUID != "" {

			if err := r.SetQueryParam("capacity.used_allocation_units.node.uuid", qCapacityUsedAllocationUnitsNodeUUID); err != nil {
				return err
			}
		}
	}

	if o.FieldsQueryParameter != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.HealthIsHealthyQueryParameter != nil {

		// query param health.is_healthy
		var qrHealthIsHealthy bool

		if o.HealthIsHealthyQueryParameter != nil {
			qrHealthIsHealthy = *o.HealthIsHealthyQueryParameter
		}
		qHealthIsHealthy := swag.FormatBool(qrHealthIsHealthy)
		if qHealthIsHealthy != "" {

			if err := r.SetQueryParam("health.is_healthy", qHealthIsHealthy); err != nil {
				return err
			}
		}
	}

	if o.HealthStateQueryParameter != nil {

		// query param health.state
		var qrHealthState string

		if o.HealthStateQueryParameter != nil {
			qrHealthState = *o.HealthStateQueryParameter
		}
		qHealthState := qrHealthState
		if qHealthState != "" {

			if err := r.SetQueryParam("health.state", qHealthState); err != nil {
				return err
			}
		}
	}

	if o.HealthUnhealthyReasonArgumentsCodeQueryParameter != nil {

		// query param health.unhealthy_reason.arguments.code
		var qrHealthUnhealthyReasonArgumentsCode string

		if o.HealthUnhealthyReasonArgumentsCodeQueryParameter != nil {
			qrHealthUnhealthyReasonArgumentsCode = *o.HealthUnhealthyReasonArgumentsCodeQueryParameter
		}
		qHealthUnhealthyReasonArgumentsCode := qrHealthUnhealthyReasonArgumentsCode
		if qHealthUnhealthyReasonArgumentsCode != "" {

			if err := r.SetQueryParam("health.unhealthy_reason.arguments.code", qHealthUnhealthyReasonArgumentsCode); err != nil {
				return err
			}
		}
	}

	if o.HealthUnhealthyReasonArgumentsMessageQueryParameter != nil {

		// query param health.unhealthy_reason.arguments.message
		var qrHealthUnhealthyReasonArgumentsMessage string

		if o.HealthUnhealthyReasonArgumentsMessageQueryParameter != nil {
			qrHealthUnhealthyReasonArgumentsMessage = *o.HealthUnhealthyReasonArgumentsMessageQueryParameter
		}
		qHealthUnhealthyReasonArgumentsMessage := qrHealthUnhealthyReasonArgumentsMessage
		if qHealthUnhealthyReasonArgumentsMessage != "" {

			if err := r.SetQueryParam("health.unhealthy_reason.arguments.message", qHealthUnhealthyReasonArgumentsMessage); err != nil {
				return err
			}
		}
	}

	if o.HealthUnhealthyReasonCodeQueryParameter != nil {

		// query param health.unhealthy_reason.code
		var qrHealthUnhealthyReasonCode string

		if o.HealthUnhealthyReasonCodeQueryParameter != nil {
			qrHealthUnhealthyReasonCode = *o.HealthUnhealthyReasonCodeQueryParameter
		}
		qHealthUnhealthyReasonCode := qrHealthUnhealthyReasonCode
		if qHealthUnhealthyReasonCode != "" {

			if err := r.SetQueryParam("health.unhealthy_reason.code", qHealthUnhealthyReasonCode); err != nil {
				return err
			}
		}
	}

	if o.HealthUnhealthyReasonMessageQueryParameter != nil {

		// query param health.unhealthy_reason.message
		var qrHealthUnhealthyReasonMessage string

		if o.HealthUnhealthyReasonMessageQueryParameter != nil {
			qrHealthUnhealthyReasonMessage = *o.HealthUnhealthyReasonMessageQueryParameter
		}
		qHealthUnhealthyReasonMessage := qrHealthUnhealthyReasonMessage
		if qHealthUnhealthyReasonMessage != "" {

			if err := r.SetQueryParam("health.unhealthy_reason.message", qHealthUnhealthyReasonMessage); err != nil {
				return err
			}
		}
	}

	if o.HealthUnhealthyReasonTargetQueryParameter != nil {

		// query param health.unhealthy_reason.target
		var qrHealthUnhealthyReasonTarget string

		if o.HealthUnhealthyReasonTargetQueryParameter != nil {
			qrHealthUnhealthyReasonTarget = *o.HealthUnhealthyReasonTargetQueryParameter
		}
		qHealthUnhealthyReasonTarget := qrHealthUnhealthyReasonTarget
		if qHealthUnhealthyReasonTarget != "" {

			if err := r.SetQueryParam("health.unhealthy_reason.target", qHealthUnhealthyReasonTarget); err != nil {
				return err
			}
		}
	}

	if o.MaxRecordsQueryParameter != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecordsQueryParameter != nil {
			qrMaxRecords = *o.MaxRecordsQueryParameter
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.NameQueryParameter != nil {

		// query param name
		var qrName string

		if o.NameQueryParameter != nil {
			qrName = *o.NameQueryParameter
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.NodesNameQueryParameter != nil {

		// query param nodes.name
		var qrNodesName string

		if o.NodesNameQueryParameter != nil {
			qrNodesName = *o.NodesNameQueryParameter
		}
		qNodesName := qrNodesName
		if qNodesName != "" {

			if err := r.SetQueryParam("nodes.name", qNodesName); err != nil {
				return err
			}
		}
	}

	if o.NodesUUIDQueryParameter != nil {

		// query param nodes.uuid
		var qrNodesUUID string

		if o.NodesUUIDQueryParameter != nil {
			qrNodesUUID = *o.NodesUUIDQueryParameter
		}
		qNodesUUID := qrNodesUUID
		if qNodesUUID != "" {

			if err := r.SetQueryParam("nodes.uuid", qNodesUUID); err != nil {
				return err
			}
		}
	}

	if o.OrderByQueryParameter != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.ReturnRecordsQueryParameter != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecordsQueryParameter != nil {
			qrReturnRecords = *o.ReturnRecordsQueryParameter
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeoutQueryParameter != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeoutQueryParameter != nil {
			qrReturnTimeout = *o.ReturnTimeoutQueryParameter
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.StorageTypeQueryParameter != nil {

		// query param storage_type
		var qrStorageType string

		if o.StorageTypeQueryParameter != nil {
			qrStorageType = *o.StorageTypeQueryParameter
		}
		qStorageType := qrStorageType
		if qStorageType != "" {

			if err := r.SetQueryParam("storage_type", qStorageType); err != nil {
				return err
			}
		}
	}

	if o.UUIDQueryParameter != nil {

		// query param uuid
		var qrUUID string

		if o.UUIDQueryParameter != nil {
			qrUUID = *o.UUIDQueryParameter
		}
		qUUID := qrUUID
		if qUUID != "" {

			if err := r.SetQueryParam("uuid", qUUID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamStoragePoolCollectionGet binds the parameter fields
func (o *StoragePoolCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.FieldsQueryParameter

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamStoragePoolCollectionGet binds the parameter order_by
func (o *StoragePoolCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderByQueryParameter

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
