// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/netapp/trident/storage_drivers/ontap/api/rest/models"
)

// VolumeEfficiencyPolicyModifyReader is a Reader for the VolumeEfficiencyPolicyModify structure.
type VolumeEfficiencyPolicyModifyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *VolumeEfficiencyPolicyModifyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewVolumeEfficiencyPolicyModifyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewVolumeEfficiencyPolicyModifyDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewVolumeEfficiencyPolicyModifyOK creates a VolumeEfficiencyPolicyModifyOK with default headers values
func NewVolumeEfficiencyPolicyModifyOK() *VolumeEfficiencyPolicyModifyOK {
	return &VolumeEfficiencyPolicyModifyOK{}
}

/* VolumeEfficiencyPolicyModifyOK describes a response with status code 200, with default header values.

OK
*/
type VolumeEfficiencyPolicyModifyOK struct {
}

func (o *VolumeEfficiencyPolicyModifyOK) Error() string {
	return fmt.Sprintf("[PATCH /storage/volume-efficiency-policies/{uuid}][%d] volumeEfficiencyPolicyModifyOK ", 200)
}

func (o *VolumeEfficiencyPolicyModifyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewVolumeEfficiencyPolicyModifyDefault creates a VolumeEfficiencyPolicyModifyDefault with default headers values
func NewVolumeEfficiencyPolicyModifyDefault(code int) *VolumeEfficiencyPolicyModifyDefault {
	return &VolumeEfficiencyPolicyModifyDefault{
		_statusCode: code,
	}
}

/* VolumeEfficiencyPolicyModifyDefault describes a response with status code -1, with default header values.

 ONTAP Error Response Code
| Error Code | Description |
| ---------- | ----------- |
|  6881341   | Specified schedule not found. |
|  6881344   | Failed to queue specified job. |
|  6881348   | This operation cannot be performed because the specified policy is owned by the cluster admin. |
|  6881349   | Policy name is not valid. |
|  6881362   | Threshold percentage cannot be less than 1 percent. |
|  6881433   | For \"{{0}}\" type policy, \"{{1}}\" duration is not supported. |
|  6881435   | Only a policy of type "threshold" can set the "start-threshold-percent" attribute. |
|  6881436   | For a policy of type "scheduled", a valid "schedule" is a required attribute. |
|  6881438   | For \"{{0}}\" policy, modification of attributes is not allowed. |
|  6881474   | Duration cannot be null. |
|  6881475   | Duration is not valid. |
|  6881476   | Duration cannot be less than 1 hour. |
|  6881477   | Duration cannot be more than 999 hours. |

*/
type VolumeEfficiencyPolicyModifyDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the volume efficiency policy modify default response
func (o *VolumeEfficiencyPolicyModifyDefault) Code() int {
	return o._statusCode
}

func (o *VolumeEfficiencyPolicyModifyDefault) Error() string {
	return fmt.Sprintf("[PATCH /storage/volume-efficiency-policies/{uuid}][%d] volume_efficiency_policy_modify default  %+v", o._statusCode, o.Payload)
}
func (o *VolumeEfficiencyPolicyModifyDefault) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *VolumeEfficiencyPolicyModifyDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
