// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDiskCollectionGetParams creates a new DiskCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDiskCollectionGetParams() *DiskCollectionGetParams {
	return &DiskCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDiskCollectionGetParamsWithTimeout creates a new DiskCollectionGetParams object
// with the ability to set a timeout on a request.
func NewDiskCollectionGetParamsWithTimeout(timeout time.Duration) *DiskCollectionGetParams {
	return &DiskCollectionGetParams{
		timeout: timeout,
	}
}

// NewDiskCollectionGetParamsWithContext creates a new DiskCollectionGetParams object
// with the ability to set a context for a request.
func NewDiskCollectionGetParamsWithContext(ctx context.Context) *DiskCollectionGetParams {
	return &DiskCollectionGetParams{
		Context: ctx,
	}
}

// NewDiskCollectionGetParamsWithHTTPClient creates a new DiskCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewDiskCollectionGetParamsWithHTTPClient(client *http.Client) *DiskCollectionGetParams {
	return &DiskCollectionGetParams{
		HTTPClient: client,
	}
}

/* DiskCollectionGetParams contains all the parameters to send to the API endpoint
   for the disk collection get operation.

   Typically these are written to a http.Request.
*/
type DiskCollectionGetParams struct {

	/* AggregatesName.

	   Filter by aggregates.name
	*/
	AggregatesNameQueryParameter *string

	/* AggregatesUUID.

	   Filter by aggregates.uuid
	*/
	AggregatesUUIDQueryParameter *string

	/* Bay.

	   Filter by bay
	*/
	BayQueryParameter *int64

	/* Class.

	   Filter by class
	*/
	ClassQueryParameter *string

	/* ContainerType.

	   Filter by container_type
	*/
	ContainerTypeQueryParameter *string

	/* DrNodeName.

	   Filter by dr_node.name
	*/
	DrNodeNameQueryParameter *string

	/* DrNodeUUID.

	   Filter by dr_node.uuid
	*/
	DrNodeUUIDQueryParameter *string

	/* DrawerID.

	   Filter by drawer.id
	*/
	DrawerIDQueryParameter *int64

	/* DrawerSlot.

	   Filter by drawer.slot
	*/
	DrawerSlotQueryParameter *int64

	/* Fields.

	   Specify the fields to return.
	*/
	Fields []string

	/* FipsCertified.

	   Filter by fips_certified
	*/
	FipsCertifiedQueryParameter *bool

	/* FirmwareVersion.

	   Filter by firmware_version
	*/
	FirmwareVersionQueryParameter *string

	/* HomeNodeName.

	   Filter by home_node.name
	*/
	HomeNodeNameQueryParameter *string

	/* HomeNodeUUID.

	   Filter by home_node.uuid
	*/
	HomeNodeUUIDQueryParameter *string

	/* KeyIDData.

	   Filter by key_id.data
	*/
	KeyIDDataQueryParameter *string

	/* KeyIDFips.

	   Filter by key_id.fips
	*/
	KeyIDFipsQueryParameter *string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecords *int64

	/* Model.

	   Filter by model
	*/
	ModelQueryParameter *string

	/* Name.

	   Filter by name
	*/
	NameQueryParameter *string

	/* NodeName.

	   Filter by node.name
	*/
	NodeNameQueryParameter *string

	/* NodeUUID.

	   Filter by node.uuid
	*/
	NodeUUIDQueryParameter *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderBy []string

	/* Pool.

	   Filter by pool
	*/
	PoolQueryParameter *string

	/* ProtectionMode.

	   Filter by protection_mode
	*/
	ProtectionModeQueryParameter *string

	/* RatedLifeUsedPercent.

	   Filter by rated_life_used_percent
	*/
	RatedLifeUsedPercentQueryParameter *int64

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecords *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeout *int64

	/* Rpm.

	   Filter by rpm
	*/
	RpmQueryParameter *int64

	/* SelfEncrypting.

	   Filter by self_encrypting
	*/
	SelfEncryptingQueryParameter *bool

	/* SerialNumber.

	   Filter by serial_number
	*/
	SerialNumberQueryParameter *string

	/* ShelfUID.

	   Filter by shelf.uid
	*/
	ShelfUIDQueryParameter *string

	/* State.

	   Filter by state
	*/
	StateQueryParameter *string

	/* Type.

	   Filter by type
	*/
	TypeQueryParameter *string

	/* UID.

	   Filter by uid
	*/
	UIDQueryParameter *string

	/* UsableSize.

	   Filter by usable_size
	*/
	UsableSizeQueryParameter *int64

	/* Vendor.

	   Filter by vendor
	*/
	VendorQueryParameter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the disk collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DiskCollectionGetParams) WithDefaults() *DiskCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the disk collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DiskCollectionGetParams) SetDefaults() {
	var (
		returnRecordsDefault = bool(true)

		returnTimeoutDefault = int64(15)
	)

	val := DiskCollectionGetParams{
		ReturnRecords: &returnRecordsDefault,
		ReturnTimeout: &returnTimeoutDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the disk collection get params
func (o *DiskCollectionGetParams) WithTimeout(timeout time.Duration) *DiskCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the disk collection get params
func (o *DiskCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the disk collection get params
func (o *DiskCollectionGetParams) WithContext(ctx context.Context) *DiskCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the disk collection get params
func (o *DiskCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the disk collection get params
func (o *DiskCollectionGetParams) WithHTTPClient(client *http.Client) *DiskCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the disk collection get params
func (o *DiskCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAggregatesNameQueryParameter adds the aggregatesName to the disk collection get params
func (o *DiskCollectionGetParams) WithAggregatesNameQueryParameter(aggregatesName *string) *DiskCollectionGetParams {
	o.SetAggregatesNameQueryParameter(aggregatesName)
	return o
}

// SetAggregatesNameQueryParameter adds the aggregatesName to the disk collection get params
func (o *DiskCollectionGetParams) SetAggregatesNameQueryParameter(aggregatesName *string) {
	o.AggregatesNameQueryParameter = aggregatesName
}

// WithAggregatesUUIDQueryParameter adds the aggregatesUUID to the disk collection get params
func (o *DiskCollectionGetParams) WithAggregatesUUIDQueryParameter(aggregatesUUID *string) *DiskCollectionGetParams {
	o.SetAggregatesUUIDQueryParameter(aggregatesUUID)
	return o
}

// SetAggregatesUUIDQueryParameter adds the aggregatesUuid to the disk collection get params
func (o *DiskCollectionGetParams) SetAggregatesUUIDQueryParameter(aggregatesUUID *string) {
	o.AggregatesUUIDQueryParameter = aggregatesUUID
}

// WithBayQueryParameter adds the bay to the disk collection get params
func (o *DiskCollectionGetParams) WithBayQueryParameter(bay *int64) *DiskCollectionGetParams {
	o.SetBayQueryParameter(bay)
	return o
}

// SetBayQueryParameter adds the bay to the disk collection get params
func (o *DiskCollectionGetParams) SetBayQueryParameter(bay *int64) {
	o.BayQueryParameter = bay
}

// WithClassQueryParameter adds the class to the disk collection get params
func (o *DiskCollectionGetParams) WithClassQueryParameter(class *string) *DiskCollectionGetParams {
	o.SetClassQueryParameter(class)
	return o
}

// SetClassQueryParameter adds the class to the disk collection get params
func (o *DiskCollectionGetParams) SetClassQueryParameter(class *string) {
	o.ClassQueryParameter = class
}

// WithContainerTypeQueryParameter adds the containerType to the disk collection get params
func (o *DiskCollectionGetParams) WithContainerTypeQueryParameter(containerType *string) *DiskCollectionGetParams {
	o.SetContainerTypeQueryParameter(containerType)
	return o
}

// SetContainerTypeQueryParameter adds the containerType to the disk collection get params
func (o *DiskCollectionGetParams) SetContainerTypeQueryParameter(containerType *string) {
	o.ContainerTypeQueryParameter = containerType
}

// WithDrNodeNameQueryParameter adds the drNodeName to the disk collection get params
func (o *DiskCollectionGetParams) WithDrNodeNameQueryParameter(drNodeName *string) *DiskCollectionGetParams {
	o.SetDrNodeNameQueryParameter(drNodeName)
	return o
}

// SetDrNodeNameQueryParameter adds the drNodeName to the disk collection get params
func (o *DiskCollectionGetParams) SetDrNodeNameQueryParameter(drNodeName *string) {
	o.DrNodeNameQueryParameter = drNodeName
}

// WithDrNodeUUIDQueryParameter adds the drNodeUUID to the disk collection get params
func (o *DiskCollectionGetParams) WithDrNodeUUIDQueryParameter(drNodeUUID *string) *DiskCollectionGetParams {
	o.SetDrNodeUUIDQueryParameter(drNodeUUID)
	return o
}

// SetDrNodeUUIDQueryParameter adds the drNodeUuid to the disk collection get params
func (o *DiskCollectionGetParams) SetDrNodeUUIDQueryParameter(drNodeUUID *string) {
	o.DrNodeUUIDQueryParameter = drNodeUUID
}

// WithDrawerIDQueryParameter adds the drawerID to the disk collection get params
func (o *DiskCollectionGetParams) WithDrawerIDQueryParameter(drawerID *int64) *DiskCollectionGetParams {
	o.SetDrawerIDQueryParameter(drawerID)
	return o
}

// SetDrawerIDQueryParameter adds the drawerId to the disk collection get params
func (o *DiskCollectionGetParams) SetDrawerIDQueryParameter(drawerID *int64) {
	o.DrawerIDQueryParameter = drawerID
}

// WithDrawerSlotQueryParameter adds the drawerSlot to the disk collection get params
func (o *DiskCollectionGetParams) WithDrawerSlotQueryParameter(drawerSlot *int64) *DiskCollectionGetParams {
	o.SetDrawerSlotQueryParameter(drawerSlot)
	return o
}

// SetDrawerSlotQueryParameter adds the drawerSlot to the disk collection get params
func (o *DiskCollectionGetParams) SetDrawerSlotQueryParameter(drawerSlot *int64) {
	o.DrawerSlotQueryParameter = drawerSlot
}

// WithFields adds the fields to the disk collection get params
func (o *DiskCollectionGetParams) WithFields(fields []string) *DiskCollectionGetParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the disk collection get params
func (o *DiskCollectionGetParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithFipsCertifiedQueryParameter adds the fipsCertified to the disk collection get params
func (o *DiskCollectionGetParams) WithFipsCertifiedQueryParameter(fipsCertified *bool) *DiskCollectionGetParams {
	o.SetFipsCertifiedQueryParameter(fipsCertified)
	return o
}

// SetFipsCertifiedQueryParameter adds the fipsCertified to the disk collection get params
func (o *DiskCollectionGetParams) SetFipsCertifiedQueryParameter(fipsCertified *bool) {
	o.FipsCertifiedQueryParameter = fipsCertified
}

// WithFirmwareVersionQueryParameter adds the firmwareVersion to the disk collection get params
func (o *DiskCollectionGetParams) WithFirmwareVersionQueryParameter(firmwareVersion *string) *DiskCollectionGetParams {
	o.SetFirmwareVersionQueryParameter(firmwareVersion)
	return o
}

// SetFirmwareVersionQueryParameter adds the firmwareVersion to the disk collection get params
func (o *DiskCollectionGetParams) SetFirmwareVersionQueryParameter(firmwareVersion *string) {
	o.FirmwareVersionQueryParameter = firmwareVersion
}

// WithHomeNodeNameQueryParameter adds the homeNodeName to the disk collection get params
func (o *DiskCollectionGetParams) WithHomeNodeNameQueryParameter(homeNodeName *string) *DiskCollectionGetParams {
	o.SetHomeNodeNameQueryParameter(homeNodeName)
	return o
}

// SetHomeNodeNameQueryParameter adds the homeNodeName to the disk collection get params
func (o *DiskCollectionGetParams) SetHomeNodeNameQueryParameter(homeNodeName *string) {
	o.HomeNodeNameQueryParameter = homeNodeName
}

// WithHomeNodeUUIDQueryParameter adds the homeNodeUUID to the disk collection get params
func (o *DiskCollectionGetParams) WithHomeNodeUUIDQueryParameter(homeNodeUUID *string) *DiskCollectionGetParams {
	o.SetHomeNodeUUIDQueryParameter(homeNodeUUID)
	return o
}

// SetHomeNodeUUIDQueryParameter adds the homeNodeUuid to the disk collection get params
func (o *DiskCollectionGetParams) SetHomeNodeUUIDQueryParameter(homeNodeUUID *string) {
	o.HomeNodeUUIDQueryParameter = homeNodeUUID
}

// WithKeyIDDataQueryParameter adds the keyIDData to the disk collection get params
func (o *DiskCollectionGetParams) WithKeyIDDataQueryParameter(keyIDData *string) *DiskCollectionGetParams {
	o.SetKeyIDDataQueryParameter(keyIDData)
	return o
}

// SetKeyIDDataQueryParameter adds the keyIdData to the disk collection get params
func (o *DiskCollectionGetParams) SetKeyIDDataQueryParameter(keyIDData *string) {
	o.KeyIDDataQueryParameter = keyIDData
}

// WithKeyIDFipsQueryParameter adds the keyIDFips to the disk collection get params
func (o *DiskCollectionGetParams) WithKeyIDFipsQueryParameter(keyIDFips *string) *DiskCollectionGetParams {
	o.SetKeyIDFipsQueryParameter(keyIDFips)
	return o
}

// SetKeyIDFipsQueryParameter adds the keyIdFips to the disk collection get params
func (o *DiskCollectionGetParams) SetKeyIDFipsQueryParameter(keyIDFips *string) {
	o.KeyIDFipsQueryParameter = keyIDFips
}

// WithMaxRecords adds the maxRecords to the disk collection get params
func (o *DiskCollectionGetParams) WithMaxRecords(maxRecords *int64) *DiskCollectionGetParams {
	o.SetMaxRecords(maxRecords)
	return o
}

// SetMaxRecords adds the maxRecords to the disk collection get params
func (o *DiskCollectionGetParams) SetMaxRecords(maxRecords *int64) {
	o.MaxRecords = maxRecords
}

// WithModelQueryParameter adds the model to the disk collection get params
func (o *DiskCollectionGetParams) WithModelQueryParameter(model *string) *DiskCollectionGetParams {
	o.SetModelQueryParameter(model)
	return o
}

// SetModelQueryParameter adds the model to the disk collection get params
func (o *DiskCollectionGetParams) SetModelQueryParameter(model *string) {
	o.ModelQueryParameter = model
}

// WithNameQueryParameter adds the name to the disk collection get params
func (o *DiskCollectionGetParams) WithNameQueryParameter(name *string) *DiskCollectionGetParams {
	o.SetNameQueryParameter(name)
	return o
}

// SetNameQueryParameter adds the name to the disk collection get params
func (o *DiskCollectionGetParams) SetNameQueryParameter(name *string) {
	o.NameQueryParameter = name
}

// WithNodeNameQueryParameter adds the nodeName to the disk collection get params
func (o *DiskCollectionGetParams) WithNodeNameQueryParameter(nodeName *string) *DiskCollectionGetParams {
	o.SetNodeNameQueryParameter(nodeName)
	return o
}

// SetNodeNameQueryParameter adds the nodeName to the disk collection get params
func (o *DiskCollectionGetParams) SetNodeNameQueryParameter(nodeName *string) {
	o.NodeNameQueryParameter = nodeName
}

// WithNodeUUIDQueryParameter adds the nodeUUID to the disk collection get params
func (o *DiskCollectionGetParams) WithNodeUUIDQueryParameter(nodeUUID *string) *DiskCollectionGetParams {
	o.SetNodeUUIDQueryParameter(nodeUUID)
	return o
}

// SetNodeUUIDQueryParameter adds the nodeUuid to the disk collection get params
func (o *DiskCollectionGetParams) SetNodeUUIDQueryParameter(nodeUUID *string) {
	o.NodeUUIDQueryParameter = nodeUUID
}

// WithOrderBy adds the orderBy to the disk collection get params
func (o *DiskCollectionGetParams) WithOrderBy(orderBy []string) *DiskCollectionGetParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the disk collection get params
func (o *DiskCollectionGetParams) SetOrderBy(orderBy []string) {
	o.OrderBy = orderBy
}

// WithPoolQueryParameter adds the pool to the disk collection get params
func (o *DiskCollectionGetParams) WithPoolQueryParameter(pool *string) *DiskCollectionGetParams {
	o.SetPoolQueryParameter(pool)
	return o
}

// SetPoolQueryParameter adds the pool to the disk collection get params
func (o *DiskCollectionGetParams) SetPoolQueryParameter(pool *string) {
	o.PoolQueryParameter = pool
}

// WithProtectionModeQueryParameter adds the protectionMode to the disk collection get params
func (o *DiskCollectionGetParams) WithProtectionModeQueryParameter(protectionMode *string) *DiskCollectionGetParams {
	o.SetProtectionModeQueryParameter(protectionMode)
	return o
}

// SetProtectionModeQueryParameter adds the protectionMode to the disk collection get params
func (o *DiskCollectionGetParams) SetProtectionModeQueryParameter(protectionMode *string) {
	o.ProtectionModeQueryParameter = protectionMode
}

// WithRatedLifeUsedPercentQueryParameter adds the ratedLifeUsedPercent to the disk collection get params
func (o *DiskCollectionGetParams) WithRatedLifeUsedPercentQueryParameter(ratedLifeUsedPercent *int64) *DiskCollectionGetParams {
	o.SetRatedLifeUsedPercentQueryParameter(ratedLifeUsedPercent)
	return o
}

// SetRatedLifeUsedPercentQueryParameter adds the ratedLifeUsedPercent to the disk collection get params
func (o *DiskCollectionGetParams) SetRatedLifeUsedPercentQueryParameter(ratedLifeUsedPercent *int64) {
	o.RatedLifeUsedPercentQueryParameter = ratedLifeUsedPercent
}

// WithReturnRecords adds the returnRecords to the disk collection get params
func (o *DiskCollectionGetParams) WithReturnRecords(returnRecords *bool) *DiskCollectionGetParams {
	o.SetReturnRecords(returnRecords)
	return o
}

// SetReturnRecords adds the returnRecords to the disk collection get params
func (o *DiskCollectionGetParams) SetReturnRecords(returnRecords *bool) {
	o.ReturnRecords = returnRecords
}

// WithReturnTimeout adds the returnTimeout to the disk collection get params
func (o *DiskCollectionGetParams) WithReturnTimeout(returnTimeout *int64) *DiskCollectionGetParams {
	o.SetReturnTimeout(returnTimeout)
	return o
}

// SetReturnTimeout adds the returnTimeout to the disk collection get params
func (o *DiskCollectionGetParams) SetReturnTimeout(returnTimeout *int64) {
	o.ReturnTimeout = returnTimeout
}

// WithRpmQueryParameter adds the rpm to the disk collection get params
func (o *DiskCollectionGetParams) WithRpmQueryParameter(rpm *int64) *DiskCollectionGetParams {
	o.SetRpmQueryParameter(rpm)
	return o
}

// SetRpmQueryParameter adds the rpm to the disk collection get params
func (o *DiskCollectionGetParams) SetRpmQueryParameter(rpm *int64) {
	o.RpmQueryParameter = rpm
}

// WithSelfEncryptingQueryParameter adds the selfEncrypting to the disk collection get params
func (o *DiskCollectionGetParams) WithSelfEncryptingQueryParameter(selfEncrypting *bool) *DiskCollectionGetParams {
	o.SetSelfEncryptingQueryParameter(selfEncrypting)
	return o
}

// SetSelfEncryptingQueryParameter adds the selfEncrypting to the disk collection get params
func (o *DiskCollectionGetParams) SetSelfEncryptingQueryParameter(selfEncrypting *bool) {
	o.SelfEncryptingQueryParameter = selfEncrypting
}

// WithSerialNumberQueryParameter adds the serialNumber to the disk collection get params
func (o *DiskCollectionGetParams) WithSerialNumberQueryParameter(serialNumber *string) *DiskCollectionGetParams {
	o.SetSerialNumberQueryParameter(serialNumber)
	return o
}

// SetSerialNumberQueryParameter adds the serialNumber to the disk collection get params
func (o *DiskCollectionGetParams) SetSerialNumberQueryParameter(serialNumber *string) {
	o.SerialNumberQueryParameter = serialNumber
}

// WithShelfUIDQueryParameter adds the shelfUID to the disk collection get params
func (o *DiskCollectionGetParams) WithShelfUIDQueryParameter(shelfUID *string) *DiskCollectionGetParams {
	o.SetShelfUIDQueryParameter(shelfUID)
	return o
}

// SetShelfUIDQueryParameter adds the shelfUid to the disk collection get params
func (o *DiskCollectionGetParams) SetShelfUIDQueryParameter(shelfUID *string) {
	o.ShelfUIDQueryParameter = shelfUID
}

// WithStateQueryParameter adds the state to the disk collection get params
func (o *DiskCollectionGetParams) WithStateQueryParameter(state *string) *DiskCollectionGetParams {
	o.SetStateQueryParameter(state)
	return o
}

// SetStateQueryParameter adds the state to the disk collection get params
func (o *DiskCollectionGetParams) SetStateQueryParameter(state *string) {
	o.StateQueryParameter = state
}

// WithTypeQueryParameter adds the typeVar to the disk collection get params
func (o *DiskCollectionGetParams) WithTypeQueryParameter(typeVar *string) *DiskCollectionGetParams {
	o.SetTypeQueryParameter(typeVar)
	return o
}

// SetTypeQueryParameter adds the type to the disk collection get params
func (o *DiskCollectionGetParams) SetTypeQueryParameter(typeVar *string) {
	o.TypeQueryParameter = typeVar
}

// WithUIDQueryParameter adds the uid to the disk collection get params
func (o *DiskCollectionGetParams) WithUIDQueryParameter(uid *string) *DiskCollectionGetParams {
	o.SetUIDQueryParameter(uid)
	return o
}

// SetUIDQueryParameter adds the uid to the disk collection get params
func (o *DiskCollectionGetParams) SetUIDQueryParameter(uid *string) {
	o.UIDQueryParameter = uid
}

// WithUsableSizeQueryParameter adds the usableSize to the disk collection get params
func (o *DiskCollectionGetParams) WithUsableSizeQueryParameter(usableSize *int64) *DiskCollectionGetParams {
	o.SetUsableSizeQueryParameter(usableSize)
	return o
}

// SetUsableSizeQueryParameter adds the usableSize to the disk collection get params
func (o *DiskCollectionGetParams) SetUsableSizeQueryParameter(usableSize *int64) {
	o.UsableSizeQueryParameter = usableSize
}

// WithVendorQueryParameter adds the vendor to the disk collection get params
func (o *DiskCollectionGetParams) WithVendorQueryParameter(vendor *string) *DiskCollectionGetParams {
	o.SetVendorQueryParameter(vendor)
	return o
}

// SetVendorQueryParameter adds the vendor to the disk collection get params
func (o *DiskCollectionGetParams) SetVendorQueryParameter(vendor *string) {
	o.VendorQueryParameter = vendor
}

// WriteToRequest writes these params to a swagger request
func (o *DiskCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AggregatesNameQueryParameter != nil {

		// query param aggregates.name
		var qrAggregatesName string

		if o.AggregatesNameQueryParameter != nil {
			qrAggregatesName = *o.AggregatesNameQueryParameter
		}
		qAggregatesName := qrAggregatesName
		if qAggregatesName != "" {

			if err := r.SetQueryParam("aggregates.name", qAggregatesName); err != nil {
				return err
			}
		}
	}

	if o.AggregatesUUIDQueryParameter != nil {

		// query param aggregates.uuid
		var qrAggregatesUUID string

		if o.AggregatesUUIDQueryParameter != nil {
			qrAggregatesUUID = *o.AggregatesUUIDQueryParameter
		}
		qAggregatesUUID := qrAggregatesUUID
		if qAggregatesUUID != "" {

			if err := r.SetQueryParam("aggregates.uuid", qAggregatesUUID); err != nil {
				return err
			}
		}
	}

	if o.BayQueryParameter != nil {

		// query param bay
		var qrBay int64

		if o.BayQueryParameter != nil {
			qrBay = *o.BayQueryParameter
		}
		qBay := swag.FormatInt64(qrBay)
		if qBay != "" {

			if err := r.SetQueryParam("bay", qBay); err != nil {
				return err
			}
		}
	}

	if o.ClassQueryParameter != nil {

		// query param class
		var qrClass string

		if o.ClassQueryParameter != nil {
			qrClass = *o.ClassQueryParameter
		}
		qClass := qrClass
		if qClass != "" {

			if err := r.SetQueryParam("class", qClass); err != nil {
				return err
			}
		}
	}

	if o.ContainerTypeQueryParameter != nil {

		// query param container_type
		var qrContainerType string

		if o.ContainerTypeQueryParameter != nil {
			qrContainerType = *o.ContainerTypeQueryParameter
		}
		qContainerType := qrContainerType
		if qContainerType != "" {

			if err := r.SetQueryParam("container_type", qContainerType); err != nil {
				return err
			}
		}
	}

	if o.DrNodeNameQueryParameter != nil {

		// query param dr_node.name
		var qrDrNodeName string

		if o.DrNodeNameQueryParameter != nil {
			qrDrNodeName = *o.DrNodeNameQueryParameter
		}
		qDrNodeName := qrDrNodeName
		if qDrNodeName != "" {

			if err := r.SetQueryParam("dr_node.name", qDrNodeName); err != nil {
				return err
			}
		}
	}

	if o.DrNodeUUIDQueryParameter != nil {

		// query param dr_node.uuid
		var qrDrNodeUUID string

		if o.DrNodeUUIDQueryParameter != nil {
			qrDrNodeUUID = *o.DrNodeUUIDQueryParameter
		}
		qDrNodeUUID := qrDrNodeUUID
		if qDrNodeUUID != "" {

			if err := r.SetQueryParam("dr_node.uuid", qDrNodeUUID); err != nil {
				return err
			}
		}
	}

	if o.DrawerIDQueryParameter != nil {

		// query param drawer.id
		var qrDrawerID int64

		if o.DrawerIDQueryParameter != nil {
			qrDrawerID = *o.DrawerIDQueryParameter
		}
		qDrawerID := swag.FormatInt64(qrDrawerID)
		if qDrawerID != "" {

			if err := r.SetQueryParam("drawer.id", qDrawerID); err != nil {
				return err
			}
		}
	}

	if o.DrawerSlotQueryParameter != nil {

		// query param drawer.slot
		var qrDrawerSlot int64

		if o.DrawerSlotQueryParameter != nil {
			qrDrawerSlot = *o.DrawerSlotQueryParameter
		}
		qDrawerSlot := swag.FormatInt64(qrDrawerSlot)
		if qDrawerSlot != "" {

			if err := r.SetQueryParam("drawer.slot", qDrawerSlot); err != nil {
				return err
			}
		}
	}

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.FipsCertifiedQueryParameter != nil {

		// query param fips_certified
		var qrFipsCertified bool

		if o.FipsCertifiedQueryParameter != nil {
			qrFipsCertified = *o.FipsCertifiedQueryParameter
		}
		qFipsCertified := swag.FormatBool(qrFipsCertified)
		if qFipsCertified != "" {

			if err := r.SetQueryParam("fips_certified", qFipsCertified); err != nil {
				return err
			}
		}
	}

	if o.FirmwareVersionQueryParameter != nil {

		// query param firmware_version
		var qrFirmwareVersion string

		if o.FirmwareVersionQueryParameter != nil {
			qrFirmwareVersion = *o.FirmwareVersionQueryParameter
		}
		qFirmwareVersion := qrFirmwareVersion
		if qFirmwareVersion != "" {

			if err := r.SetQueryParam("firmware_version", qFirmwareVersion); err != nil {
				return err
			}
		}
	}

	if o.HomeNodeNameQueryParameter != nil {

		// query param home_node.name
		var qrHomeNodeName string

		if o.HomeNodeNameQueryParameter != nil {
			qrHomeNodeName = *o.HomeNodeNameQueryParameter
		}
		qHomeNodeName := qrHomeNodeName
		if qHomeNodeName != "" {

			if err := r.SetQueryParam("home_node.name", qHomeNodeName); err != nil {
				return err
			}
		}
	}

	if o.HomeNodeUUIDQueryParameter != nil {

		// query param home_node.uuid
		var qrHomeNodeUUID string

		if o.HomeNodeUUIDQueryParameter != nil {
			qrHomeNodeUUID = *o.HomeNodeUUIDQueryParameter
		}
		qHomeNodeUUID := qrHomeNodeUUID
		if qHomeNodeUUID != "" {

			if err := r.SetQueryParam("home_node.uuid", qHomeNodeUUID); err != nil {
				return err
			}
		}
	}

	if o.KeyIDDataQueryParameter != nil {

		// query param key_id.data
		var qrKeyIDData string

		if o.KeyIDDataQueryParameter != nil {
			qrKeyIDData = *o.KeyIDDataQueryParameter
		}
		qKeyIDData := qrKeyIDData
		if qKeyIDData != "" {

			if err := r.SetQueryParam("key_id.data", qKeyIDData); err != nil {
				return err
			}
		}
	}

	if o.KeyIDFipsQueryParameter != nil {

		// query param key_id.fips
		var qrKeyIDFips string

		if o.KeyIDFipsQueryParameter != nil {
			qrKeyIDFips = *o.KeyIDFipsQueryParameter
		}
		qKeyIDFips := qrKeyIDFips
		if qKeyIDFips != "" {

			if err := r.SetQueryParam("key_id.fips", qKeyIDFips); err != nil {
				return err
			}
		}
	}

	if o.MaxRecords != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecords != nil {
			qrMaxRecords = *o.MaxRecords
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.ModelQueryParameter != nil {

		// query param model
		var qrModel string

		if o.ModelQueryParameter != nil {
			qrModel = *o.ModelQueryParameter
		}
		qModel := qrModel
		if qModel != "" {

			if err := r.SetQueryParam("model", qModel); err != nil {
				return err
			}
		}
	}

	if o.NameQueryParameter != nil {

		// query param name
		var qrName string

		if o.NameQueryParameter != nil {
			qrName = *o.NameQueryParameter
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.NodeNameQueryParameter != nil {

		// query param node.name
		var qrNodeName string

		if o.NodeNameQueryParameter != nil {
			qrNodeName = *o.NodeNameQueryParameter
		}
		qNodeName := qrNodeName
		if qNodeName != "" {

			if err := r.SetQueryParam("node.name", qNodeName); err != nil {
				return err
			}
		}
	}

	if o.NodeUUIDQueryParameter != nil {

		// query param node.uuid
		var qrNodeUUID string

		if o.NodeUUIDQueryParameter != nil {
			qrNodeUUID = *o.NodeUUIDQueryParameter
		}
		qNodeUUID := qrNodeUUID
		if qNodeUUID != "" {

			if err := r.SetQueryParam("node.uuid", qNodeUUID); err != nil {
				return err
			}
		}
	}

	if o.OrderBy != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.PoolQueryParameter != nil {

		// query param pool
		var qrPool string

		if o.PoolQueryParameter != nil {
			qrPool = *o.PoolQueryParameter
		}
		qPool := qrPool
		if qPool != "" {

			if err := r.SetQueryParam("pool", qPool); err != nil {
				return err
			}
		}
	}

	if o.ProtectionModeQueryParameter != nil {

		// query param protection_mode
		var qrProtectionMode string

		if o.ProtectionModeQueryParameter != nil {
			qrProtectionMode = *o.ProtectionModeQueryParameter
		}
		qProtectionMode := qrProtectionMode
		if qProtectionMode != "" {

			if err := r.SetQueryParam("protection_mode", qProtectionMode); err != nil {
				return err
			}
		}
	}

	if o.RatedLifeUsedPercentQueryParameter != nil {

		// query param rated_life_used_percent
		var qrRatedLifeUsedPercent int64

		if o.RatedLifeUsedPercentQueryParameter != nil {
			qrRatedLifeUsedPercent = *o.RatedLifeUsedPercentQueryParameter
		}
		qRatedLifeUsedPercent := swag.FormatInt64(qrRatedLifeUsedPercent)
		if qRatedLifeUsedPercent != "" {

			if err := r.SetQueryParam("rated_life_used_percent", qRatedLifeUsedPercent); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecords != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecords != nil {
			qrReturnRecords = *o.ReturnRecords
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeout != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeout != nil {
			qrReturnTimeout = *o.ReturnTimeout
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.RpmQueryParameter != nil {

		// query param rpm
		var qrRpm int64

		if o.RpmQueryParameter != nil {
			qrRpm = *o.RpmQueryParameter
		}
		qRpm := swag.FormatInt64(qrRpm)
		if qRpm != "" {

			if err := r.SetQueryParam("rpm", qRpm); err != nil {
				return err
			}
		}
	}

	if o.SelfEncryptingQueryParameter != nil {

		// query param self_encrypting
		var qrSelfEncrypting bool

		if o.SelfEncryptingQueryParameter != nil {
			qrSelfEncrypting = *o.SelfEncryptingQueryParameter
		}
		qSelfEncrypting := swag.FormatBool(qrSelfEncrypting)
		if qSelfEncrypting != "" {

			if err := r.SetQueryParam("self_encrypting", qSelfEncrypting); err != nil {
				return err
			}
		}
	}

	if o.SerialNumberQueryParameter != nil {

		// query param serial_number
		var qrSerialNumber string

		if o.SerialNumberQueryParameter != nil {
			qrSerialNumber = *o.SerialNumberQueryParameter
		}
		qSerialNumber := qrSerialNumber
		if qSerialNumber != "" {

			if err := r.SetQueryParam("serial_number", qSerialNumber); err != nil {
				return err
			}
		}
	}

	if o.ShelfUIDQueryParameter != nil {

		// query param shelf.uid
		var qrShelfUID string

		if o.ShelfUIDQueryParameter != nil {
			qrShelfUID = *o.ShelfUIDQueryParameter
		}
		qShelfUID := qrShelfUID
		if qShelfUID != "" {

			if err := r.SetQueryParam("shelf.uid", qShelfUID); err != nil {
				return err
			}
		}
	}

	if o.StateQueryParameter != nil {

		// query param state
		var qrState string

		if o.StateQueryParameter != nil {
			qrState = *o.StateQueryParameter
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if o.TypeQueryParameter != nil {

		// query param type
		var qrType string

		if o.TypeQueryParameter != nil {
			qrType = *o.TypeQueryParameter
		}
		qType := qrType
		if qType != "" {

			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}
	}

	if o.UIDQueryParameter != nil {

		// query param uid
		var qrUID string

		if o.UIDQueryParameter != nil {
			qrUID = *o.UIDQueryParameter
		}
		qUID := qrUID
		if qUID != "" {

			if err := r.SetQueryParam("uid", qUID); err != nil {
				return err
			}
		}
	}

	if o.UsableSizeQueryParameter != nil {

		// query param usable_size
		var qrUsableSize int64

		if o.UsableSizeQueryParameter != nil {
			qrUsableSize = *o.UsableSizeQueryParameter
		}
		qUsableSize := swag.FormatInt64(qrUsableSize)
		if qUsableSize != "" {

			if err := r.SetQueryParam("usable_size", qUsableSize); err != nil {
				return err
			}
		}
	}

	if o.VendorQueryParameter != nil {

		// query param vendor
		var qrVendor string

		if o.VendorQueryParameter != nil {
			qrVendor = *o.VendorQueryParameter
		}
		qVendor := qrVendor
		if qVendor != "" {

			if err := r.SetQueryParam("vendor", qVendor); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamDiskCollectionGet binds the parameter fields
func (o *DiskCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamDiskCollectionGet binds the parameter order_by
func (o *DiskCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderBy

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
