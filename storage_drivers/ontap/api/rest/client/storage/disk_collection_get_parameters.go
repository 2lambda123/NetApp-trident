// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDiskCollectionGetParams creates a new DiskCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDiskCollectionGetParams() *DiskCollectionGetParams {
	return &DiskCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDiskCollectionGetParamsWithTimeout creates a new DiskCollectionGetParams object
// with the ability to set a timeout on a request.
func NewDiskCollectionGetParamsWithTimeout(timeout time.Duration) *DiskCollectionGetParams {
	return &DiskCollectionGetParams{
		timeout: timeout,
	}
}

// NewDiskCollectionGetParamsWithContext creates a new DiskCollectionGetParams object
// with the ability to set a context for a request.
func NewDiskCollectionGetParamsWithContext(ctx context.Context) *DiskCollectionGetParams {
	return &DiskCollectionGetParams{
		Context: ctx,
	}
}

// NewDiskCollectionGetParamsWithHTTPClient creates a new DiskCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewDiskCollectionGetParamsWithHTTPClient(client *http.Client) *DiskCollectionGetParams {
	return &DiskCollectionGetParams{
		HTTPClient: client,
	}
}

/* DiskCollectionGetParams contains all the parameters to send to the API endpoint
   for the disk collection get operation.

   Typically these are written to a http.Request.
*/
type DiskCollectionGetParams struct {

	/* AggregatesName.

	   Filter by aggregates.name
	*/
	AggregatesNameQueryParameter *string

	/* AggregatesUUID.

	   Filter by aggregates.uuid
	*/
	AggregatesUUIDQueryParameter *string

	/* Bay.

	   Filter by bay
	*/
	BayQueryParameter *int64

	/* BytesPerSector.

	   Filter by bytes_per_sector
	*/
	BytesPerSectorQueryParameter *int64

	/* Class.

	   Filter by class
	*/
	ClassQueryParameter *string

	/* ContainerType.

	   Filter by container_type
	*/
	ContainerTypeQueryParameter *string

	/* DrNodeName.

	   Filter by dr_node.name
	*/
	DrNodeNameQueryParameter *string

	/* DrNodeUUID.

	   Filter by dr_node.uuid
	*/
	DrNodeUUIDQueryParameter *string

	/* DrawerID.

	   Filter by drawer.id
	*/
	DrawerIDQueryParameter *int64

	/* DrawerSlot.

	   Filter by drawer.slot
	*/
	DrawerSlotQueryParameter *int64

	/* EffectiveType.

	   Filter by effective_type
	*/
	EffectiveTypeQueryParameter *string

	/* ErrorReasonArgumentsCode.

	   Filter by error.reason.arguments.code
	*/
	ErrorReasonArgumentsCodeQueryParameter *string

	/* ErrorReasonArgumentsMessage.

	   Filter by error.reason.arguments.message
	*/
	ErrorReasonArgumentsMessageQueryParameter *string

	/* ErrorReasonCode.

	   Filter by error.reason.code
	*/
	ErrorReasonCodeQueryParameter *string

	/* ErrorReasonMessage.

	   Filter by error.reason.message
	*/
	ErrorReasonMessageQueryParameter *string

	/* ErrorReasonTarget.

	   Filter by error.reason.target
	*/
	ErrorReasonTargetQueryParameter *string

	/* ErrorType.

	   Filter by error.type
	*/
	ErrorTypeQueryParameter *string

	/* Fields.

	   Specify the fields to return.
	*/
	FieldsQueryParameter []string

	/* FipsCertified.

	   Filter by fips_certified
	*/
	FipsCertifiedQueryParameter *bool

	/* FirmwareVersion.

	   Filter by firmware_version
	*/
	FirmwareVersionQueryParameter *string

	/* HomeNodeName.

	   Filter by home_node.name
	*/
	HomeNodeNameQueryParameter *string

	/* HomeNodeUUID.

	   Filter by home_node.uuid
	*/
	HomeNodeUUIDQueryParameter *string

	/* KeyIDData.

	   Filter by key_id.data
	*/
	KeyIDDataQueryParameter *string

	/* KeyIDFips.

	   Filter by key_id.fips
	*/
	KeyIDFipsQueryParameter *string

	/* Local.

	   Filter by local
	*/
	LocalQueryParameter *bool

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecordsQueryParameter *int64

	/* Model.

	   Filter by model
	*/
	ModelQueryParameter *string

	/* Name.

	   Filter by name
	*/
	NameQueryParameter *string

	/* NodeName.

	   Filter by node.name
	*/
	NodeNameQueryParameter *string

	/* NodeUUID.

	   Filter by node.uuid
	*/
	NodeUUIDQueryParameter *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderByQueryParameter []string

	/* OutagePersistentlyFailed.

	   Filter by outage.persistently_failed
	*/
	OutagePersistentlyFailedQueryParameter *bool

	/* OutageReasonArgumentsCode.

	   Filter by outage.reason.arguments.code
	*/
	OutageReasonArgumentsCodeQueryParameter *string

	/* OutageReasonArgumentsMessage.

	   Filter by outage.reason.arguments.message
	*/
	OutageReasonArgumentsMessageQueryParameter *string

	/* OutageReasonCode.

	   Filter by outage.reason.code
	*/
	OutageReasonCodeQueryParameter *string

	/* OutageReasonMessage.

	   Filter by outage.reason.message
	*/
	OutageReasonMessageQueryParameter *string

	/* OutageReasonTarget.

	   Filter by outage.reason.target
	*/
	OutageReasonTargetQueryParameter *string

	/* PathsInitiator.

	   Filter by paths.initiator
	*/
	PathsInitiatorQueryParameter *string

	/* PathsPortName.

	   Filter by paths.port_name
	*/
	PathsPortNameQueryParameter *string

	/* PathsPortType.

	   Filter by paths.port_type
	*/
	PathsPortTypeQueryParameter *string

	/* PathsWwnn.

	   Filter by paths.wwnn
	*/
	PathsWwnnQueryParameter *string

	/* PathsWwpn.

	   Filter by paths.wwpn
	*/
	PathsWwpnQueryParameter *string

	/* Pool.

	   Filter by pool
	*/
	PoolQueryParameter *string

	/* ProtectionMode.

	   Filter by protection_mode
	*/
	ProtectionModeQueryParameter *string

	/* RatedLifeUsedPercent.

	   Filter by rated_life_used_percent
	*/
	RatedLifeUsedPercentQueryParameter *int64

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecordsQueryParameter *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeoutQueryParameter *int64

	/* Rpm.

	   Filter by rpm
	*/
	RpmQueryParameter *int64

	/* SectorCount.

	   Filter by sector_count
	*/
	SectorCountQueryParameter *int64

	/* SelfEncrypting.

	   Filter by self_encrypting
	*/
	SelfEncryptingQueryParameter *bool

	/* SerialNumber.

	   Filter by serial_number
	*/
	SerialNumberQueryParameter *string

	/* ShelfUID.

	   Filter by shelf.uid
	*/
	ShelfUIDQueryParameter *string

	/* State.

	   Filter by state
	*/
	StateQueryParameter *string

	/* StatsAverageLatency.

	   Filter by stats.average_latency
	*/
	StatsAverageLatencyQueryParameter *int64

	/* StatsIopsTotal.

	   Filter by stats.iops_total
	*/
	StatsIopsTotalQueryParameter *int64

	/* StatsPathErrorCount.

	   Filter by stats.path_error_count
	*/
	StatsPathErrorCountQueryParameter *int64

	/* StatsPowerOnHours.

	   Filter by stats.power_on_hours
	*/
	StatsPowerOnHoursQueryParameter *int64

	/* StatsThroughput.

	   Filter by stats.throughput
	*/
	StatsThroughputQueryParameter *int64

	/* Type.

	   Filter by type
	*/
	TypeQueryParameter *string

	/* UID.

	   Filter by uid
	*/
	UIDQueryParameter *string

	/* UsableSize.

	   Filter by usable_size
	*/
	UsableSizeQueryParameter *int64

	/* Vendor.

	   Filter by vendor
	*/
	VendorQueryParameter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the disk collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DiskCollectionGetParams) WithDefaults() *DiskCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the disk collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DiskCollectionGetParams) SetDefaults() {
	var (
		returnRecordsQueryParameterDefault = bool(true)

		returnTimeoutQueryParameterDefault = int64(15)
	)

	val := DiskCollectionGetParams{
		ReturnRecordsQueryParameter: &returnRecordsQueryParameterDefault,
		ReturnTimeoutQueryParameter: &returnTimeoutQueryParameterDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the disk collection get params
func (o *DiskCollectionGetParams) WithTimeout(timeout time.Duration) *DiskCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the disk collection get params
func (o *DiskCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the disk collection get params
func (o *DiskCollectionGetParams) WithContext(ctx context.Context) *DiskCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the disk collection get params
func (o *DiskCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the disk collection get params
func (o *DiskCollectionGetParams) WithHTTPClient(client *http.Client) *DiskCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the disk collection get params
func (o *DiskCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAggregatesNameQueryParameter adds the aggregatesName to the disk collection get params
func (o *DiskCollectionGetParams) WithAggregatesNameQueryParameter(aggregatesName *string) *DiskCollectionGetParams {
	o.SetAggregatesNameQueryParameter(aggregatesName)
	return o
}

// SetAggregatesNameQueryParameter adds the aggregatesName to the disk collection get params
func (o *DiskCollectionGetParams) SetAggregatesNameQueryParameter(aggregatesName *string) {
	o.AggregatesNameQueryParameter = aggregatesName
}

// WithAggregatesUUIDQueryParameter adds the aggregatesUUID to the disk collection get params
func (o *DiskCollectionGetParams) WithAggregatesUUIDQueryParameter(aggregatesUUID *string) *DiskCollectionGetParams {
	o.SetAggregatesUUIDQueryParameter(aggregatesUUID)
	return o
}

// SetAggregatesUUIDQueryParameter adds the aggregatesUuid to the disk collection get params
func (o *DiskCollectionGetParams) SetAggregatesUUIDQueryParameter(aggregatesUUID *string) {
	o.AggregatesUUIDQueryParameter = aggregatesUUID
}

// WithBayQueryParameter adds the bay to the disk collection get params
func (o *DiskCollectionGetParams) WithBayQueryParameter(bay *int64) *DiskCollectionGetParams {
	o.SetBayQueryParameter(bay)
	return o
}

// SetBayQueryParameter adds the bay to the disk collection get params
func (o *DiskCollectionGetParams) SetBayQueryParameter(bay *int64) {
	o.BayQueryParameter = bay
}

// WithBytesPerSectorQueryParameter adds the bytesPerSector to the disk collection get params
func (o *DiskCollectionGetParams) WithBytesPerSectorQueryParameter(bytesPerSector *int64) *DiskCollectionGetParams {
	o.SetBytesPerSectorQueryParameter(bytesPerSector)
	return o
}

// SetBytesPerSectorQueryParameter adds the bytesPerSector to the disk collection get params
func (o *DiskCollectionGetParams) SetBytesPerSectorQueryParameter(bytesPerSector *int64) {
	o.BytesPerSectorQueryParameter = bytesPerSector
}

// WithClassQueryParameter adds the class to the disk collection get params
func (o *DiskCollectionGetParams) WithClassQueryParameter(class *string) *DiskCollectionGetParams {
	o.SetClassQueryParameter(class)
	return o
}

// SetClassQueryParameter adds the class to the disk collection get params
func (o *DiskCollectionGetParams) SetClassQueryParameter(class *string) {
	o.ClassQueryParameter = class
}

// WithContainerTypeQueryParameter adds the containerType to the disk collection get params
func (o *DiskCollectionGetParams) WithContainerTypeQueryParameter(containerType *string) *DiskCollectionGetParams {
	o.SetContainerTypeQueryParameter(containerType)
	return o
}

// SetContainerTypeQueryParameter adds the containerType to the disk collection get params
func (o *DiskCollectionGetParams) SetContainerTypeQueryParameter(containerType *string) {
	o.ContainerTypeQueryParameter = containerType
}

// WithDrNodeNameQueryParameter adds the drNodeName to the disk collection get params
func (o *DiskCollectionGetParams) WithDrNodeNameQueryParameter(drNodeName *string) *DiskCollectionGetParams {
	o.SetDrNodeNameQueryParameter(drNodeName)
	return o
}

// SetDrNodeNameQueryParameter adds the drNodeName to the disk collection get params
func (o *DiskCollectionGetParams) SetDrNodeNameQueryParameter(drNodeName *string) {
	o.DrNodeNameQueryParameter = drNodeName
}

// WithDrNodeUUIDQueryParameter adds the drNodeUUID to the disk collection get params
func (o *DiskCollectionGetParams) WithDrNodeUUIDQueryParameter(drNodeUUID *string) *DiskCollectionGetParams {
	o.SetDrNodeUUIDQueryParameter(drNodeUUID)
	return o
}

// SetDrNodeUUIDQueryParameter adds the drNodeUuid to the disk collection get params
func (o *DiskCollectionGetParams) SetDrNodeUUIDQueryParameter(drNodeUUID *string) {
	o.DrNodeUUIDQueryParameter = drNodeUUID
}

// WithDrawerIDQueryParameter adds the drawerID to the disk collection get params
func (o *DiskCollectionGetParams) WithDrawerIDQueryParameter(drawerID *int64) *DiskCollectionGetParams {
	o.SetDrawerIDQueryParameter(drawerID)
	return o
}

// SetDrawerIDQueryParameter adds the drawerId to the disk collection get params
func (o *DiskCollectionGetParams) SetDrawerIDQueryParameter(drawerID *int64) {
	o.DrawerIDQueryParameter = drawerID
}

// WithDrawerSlotQueryParameter adds the drawerSlot to the disk collection get params
func (o *DiskCollectionGetParams) WithDrawerSlotQueryParameter(drawerSlot *int64) *DiskCollectionGetParams {
	o.SetDrawerSlotQueryParameter(drawerSlot)
	return o
}

// SetDrawerSlotQueryParameter adds the drawerSlot to the disk collection get params
func (o *DiskCollectionGetParams) SetDrawerSlotQueryParameter(drawerSlot *int64) {
	o.DrawerSlotQueryParameter = drawerSlot
}

// WithEffectiveTypeQueryParameter adds the effectiveType to the disk collection get params
func (o *DiskCollectionGetParams) WithEffectiveTypeQueryParameter(effectiveType *string) *DiskCollectionGetParams {
	o.SetEffectiveTypeQueryParameter(effectiveType)
	return o
}

// SetEffectiveTypeQueryParameter adds the effectiveType to the disk collection get params
func (o *DiskCollectionGetParams) SetEffectiveTypeQueryParameter(effectiveType *string) {
	o.EffectiveTypeQueryParameter = effectiveType
}

// WithErrorReasonArgumentsCodeQueryParameter adds the errorReasonArgumentsCode to the disk collection get params
func (o *DiskCollectionGetParams) WithErrorReasonArgumentsCodeQueryParameter(errorReasonArgumentsCode *string) *DiskCollectionGetParams {
	o.SetErrorReasonArgumentsCodeQueryParameter(errorReasonArgumentsCode)
	return o
}

// SetErrorReasonArgumentsCodeQueryParameter adds the errorReasonArgumentsCode to the disk collection get params
func (o *DiskCollectionGetParams) SetErrorReasonArgumentsCodeQueryParameter(errorReasonArgumentsCode *string) {
	o.ErrorReasonArgumentsCodeQueryParameter = errorReasonArgumentsCode
}

// WithErrorReasonArgumentsMessageQueryParameter adds the errorReasonArgumentsMessage to the disk collection get params
func (o *DiskCollectionGetParams) WithErrorReasonArgumentsMessageQueryParameter(errorReasonArgumentsMessage *string) *DiskCollectionGetParams {
	o.SetErrorReasonArgumentsMessageQueryParameter(errorReasonArgumentsMessage)
	return o
}

// SetErrorReasonArgumentsMessageQueryParameter adds the errorReasonArgumentsMessage to the disk collection get params
func (o *DiskCollectionGetParams) SetErrorReasonArgumentsMessageQueryParameter(errorReasonArgumentsMessage *string) {
	o.ErrorReasonArgumentsMessageQueryParameter = errorReasonArgumentsMessage
}

// WithErrorReasonCodeQueryParameter adds the errorReasonCode to the disk collection get params
func (o *DiskCollectionGetParams) WithErrorReasonCodeQueryParameter(errorReasonCode *string) *DiskCollectionGetParams {
	o.SetErrorReasonCodeQueryParameter(errorReasonCode)
	return o
}

// SetErrorReasonCodeQueryParameter adds the errorReasonCode to the disk collection get params
func (o *DiskCollectionGetParams) SetErrorReasonCodeQueryParameter(errorReasonCode *string) {
	o.ErrorReasonCodeQueryParameter = errorReasonCode
}

// WithErrorReasonMessageQueryParameter adds the errorReasonMessage to the disk collection get params
func (o *DiskCollectionGetParams) WithErrorReasonMessageQueryParameter(errorReasonMessage *string) *DiskCollectionGetParams {
	o.SetErrorReasonMessageQueryParameter(errorReasonMessage)
	return o
}

// SetErrorReasonMessageQueryParameter adds the errorReasonMessage to the disk collection get params
func (o *DiskCollectionGetParams) SetErrorReasonMessageQueryParameter(errorReasonMessage *string) {
	o.ErrorReasonMessageQueryParameter = errorReasonMessage
}

// WithErrorReasonTargetQueryParameter adds the errorReasonTarget to the disk collection get params
func (o *DiskCollectionGetParams) WithErrorReasonTargetQueryParameter(errorReasonTarget *string) *DiskCollectionGetParams {
	o.SetErrorReasonTargetQueryParameter(errorReasonTarget)
	return o
}

// SetErrorReasonTargetQueryParameter adds the errorReasonTarget to the disk collection get params
func (o *DiskCollectionGetParams) SetErrorReasonTargetQueryParameter(errorReasonTarget *string) {
	o.ErrorReasonTargetQueryParameter = errorReasonTarget
}

// WithErrorTypeQueryParameter adds the errorType to the disk collection get params
func (o *DiskCollectionGetParams) WithErrorTypeQueryParameter(errorType *string) *DiskCollectionGetParams {
	o.SetErrorTypeQueryParameter(errorType)
	return o
}

// SetErrorTypeQueryParameter adds the errorType to the disk collection get params
func (o *DiskCollectionGetParams) SetErrorTypeQueryParameter(errorType *string) {
	o.ErrorTypeQueryParameter = errorType
}

// WithFieldsQueryParameter adds the fields to the disk collection get params
func (o *DiskCollectionGetParams) WithFieldsQueryParameter(fields []string) *DiskCollectionGetParams {
	o.SetFieldsQueryParameter(fields)
	return o
}

// SetFieldsQueryParameter adds the fields to the disk collection get params
func (o *DiskCollectionGetParams) SetFieldsQueryParameter(fields []string) {
	o.FieldsQueryParameter = fields
}

// WithFipsCertifiedQueryParameter adds the fipsCertified to the disk collection get params
func (o *DiskCollectionGetParams) WithFipsCertifiedQueryParameter(fipsCertified *bool) *DiskCollectionGetParams {
	o.SetFipsCertifiedQueryParameter(fipsCertified)
	return o
}

// SetFipsCertifiedQueryParameter adds the fipsCertified to the disk collection get params
func (o *DiskCollectionGetParams) SetFipsCertifiedQueryParameter(fipsCertified *bool) {
	o.FipsCertifiedQueryParameter = fipsCertified
}

// WithFirmwareVersionQueryParameter adds the firmwareVersion to the disk collection get params
func (o *DiskCollectionGetParams) WithFirmwareVersionQueryParameter(firmwareVersion *string) *DiskCollectionGetParams {
	o.SetFirmwareVersionQueryParameter(firmwareVersion)
	return o
}

// SetFirmwareVersionQueryParameter adds the firmwareVersion to the disk collection get params
func (o *DiskCollectionGetParams) SetFirmwareVersionQueryParameter(firmwareVersion *string) {
	o.FirmwareVersionQueryParameter = firmwareVersion
}

// WithHomeNodeNameQueryParameter adds the homeNodeName to the disk collection get params
func (o *DiskCollectionGetParams) WithHomeNodeNameQueryParameter(homeNodeName *string) *DiskCollectionGetParams {
	o.SetHomeNodeNameQueryParameter(homeNodeName)
	return o
}

// SetHomeNodeNameQueryParameter adds the homeNodeName to the disk collection get params
func (o *DiskCollectionGetParams) SetHomeNodeNameQueryParameter(homeNodeName *string) {
	o.HomeNodeNameQueryParameter = homeNodeName
}

// WithHomeNodeUUIDQueryParameter adds the homeNodeUUID to the disk collection get params
func (o *DiskCollectionGetParams) WithHomeNodeUUIDQueryParameter(homeNodeUUID *string) *DiskCollectionGetParams {
	o.SetHomeNodeUUIDQueryParameter(homeNodeUUID)
	return o
}

// SetHomeNodeUUIDQueryParameter adds the homeNodeUuid to the disk collection get params
func (o *DiskCollectionGetParams) SetHomeNodeUUIDQueryParameter(homeNodeUUID *string) {
	o.HomeNodeUUIDQueryParameter = homeNodeUUID
}

// WithKeyIDDataQueryParameter adds the keyIDData to the disk collection get params
func (o *DiskCollectionGetParams) WithKeyIDDataQueryParameter(keyIDData *string) *DiskCollectionGetParams {
	o.SetKeyIDDataQueryParameter(keyIDData)
	return o
}

// SetKeyIDDataQueryParameter adds the keyIdData to the disk collection get params
func (o *DiskCollectionGetParams) SetKeyIDDataQueryParameter(keyIDData *string) {
	o.KeyIDDataQueryParameter = keyIDData
}

// WithKeyIDFipsQueryParameter adds the keyIDFips to the disk collection get params
func (o *DiskCollectionGetParams) WithKeyIDFipsQueryParameter(keyIDFips *string) *DiskCollectionGetParams {
	o.SetKeyIDFipsQueryParameter(keyIDFips)
	return o
}

// SetKeyIDFipsQueryParameter adds the keyIdFips to the disk collection get params
func (o *DiskCollectionGetParams) SetKeyIDFipsQueryParameter(keyIDFips *string) {
	o.KeyIDFipsQueryParameter = keyIDFips
}

// WithLocalQueryParameter adds the local to the disk collection get params
func (o *DiskCollectionGetParams) WithLocalQueryParameter(local *bool) *DiskCollectionGetParams {
	o.SetLocalQueryParameter(local)
	return o
}

// SetLocalQueryParameter adds the local to the disk collection get params
func (o *DiskCollectionGetParams) SetLocalQueryParameter(local *bool) {
	o.LocalQueryParameter = local
}

// WithMaxRecordsQueryParameter adds the maxRecords to the disk collection get params
func (o *DiskCollectionGetParams) WithMaxRecordsQueryParameter(maxRecords *int64) *DiskCollectionGetParams {
	o.SetMaxRecordsQueryParameter(maxRecords)
	return o
}

// SetMaxRecordsQueryParameter adds the maxRecords to the disk collection get params
func (o *DiskCollectionGetParams) SetMaxRecordsQueryParameter(maxRecords *int64) {
	o.MaxRecordsQueryParameter = maxRecords
}

// WithModelQueryParameter adds the model to the disk collection get params
func (o *DiskCollectionGetParams) WithModelQueryParameter(model *string) *DiskCollectionGetParams {
	o.SetModelQueryParameter(model)
	return o
}

// SetModelQueryParameter adds the model to the disk collection get params
func (o *DiskCollectionGetParams) SetModelQueryParameter(model *string) {
	o.ModelQueryParameter = model
}

// WithNameQueryParameter adds the name to the disk collection get params
func (o *DiskCollectionGetParams) WithNameQueryParameter(name *string) *DiskCollectionGetParams {
	o.SetNameQueryParameter(name)
	return o
}

// SetNameQueryParameter adds the name to the disk collection get params
func (o *DiskCollectionGetParams) SetNameQueryParameter(name *string) {
	o.NameQueryParameter = name
}

// WithNodeNameQueryParameter adds the nodeName to the disk collection get params
func (o *DiskCollectionGetParams) WithNodeNameQueryParameter(nodeName *string) *DiskCollectionGetParams {
	o.SetNodeNameQueryParameter(nodeName)
	return o
}

// SetNodeNameQueryParameter adds the nodeName to the disk collection get params
func (o *DiskCollectionGetParams) SetNodeNameQueryParameter(nodeName *string) {
	o.NodeNameQueryParameter = nodeName
}

// WithNodeUUIDQueryParameter adds the nodeUUID to the disk collection get params
func (o *DiskCollectionGetParams) WithNodeUUIDQueryParameter(nodeUUID *string) *DiskCollectionGetParams {
	o.SetNodeUUIDQueryParameter(nodeUUID)
	return o
}

// SetNodeUUIDQueryParameter adds the nodeUuid to the disk collection get params
func (o *DiskCollectionGetParams) SetNodeUUIDQueryParameter(nodeUUID *string) {
	o.NodeUUIDQueryParameter = nodeUUID
}

// WithOrderByQueryParameter adds the orderBy to the disk collection get params
func (o *DiskCollectionGetParams) WithOrderByQueryParameter(orderBy []string) *DiskCollectionGetParams {
	o.SetOrderByQueryParameter(orderBy)
	return o
}

// SetOrderByQueryParameter adds the orderBy to the disk collection get params
func (o *DiskCollectionGetParams) SetOrderByQueryParameter(orderBy []string) {
	o.OrderByQueryParameter = orderBy
}

// WithOutagePersistentlyFailedQueryParameter adds the outagePersistentlyFailed to the disk collection get params
func (o *DiskCollectionGetParams) WithOutagePersistentlyFailedQueryParameter(outagePersistentlyFailed *bool) *DiskCollectionGetParams {
	o.SetOutagePersistentlyFailedQueryParameter(outagePersistentlyFailed)
	return o
}

// SetOutagePersistentlyFailedQueryParameter adds the outagePersistentlyFailed to the disk collection get params
func (o *DiskCollectionGetParams) SetOutagePersistentlyFailedQueryParameter(outagePersistentlyFailed *bool) {
	o.OutagePersistentlyFailedQueryParameter = outagePersistentlyFailed
}

// WithOutageReasonArgumentsCodeQueryParameter adds the outageReasonArgumentsCode to the disk collection get params
func (o *DiskCollectionGetParams) WithOutageReasonArgumentsCodeQueryParameter(outageReasonArgumentsCode *string) *DiskCollectionGetParams {
	o.SetOutageReasonArgumentsCodeQueryParameter(outageReasonArgumentsCode)
	return o
}

// SetOutageReasonArgumentsCodeQueryParameter adds the outageReasonArgumentsCode to the disk collection get params
func (o *DiskCollectionGetParams) SetOutageReasonArgumentsCodeQueryParameter(outageReasonArgumentsCode *string) {
	o.OutageReasonArgumentsCodeQueryParameter = outageReasonArgumentsCode
}

// WithOutageReasonArgumentsMessageQueryParameter adds the outageReasonArgumentsMessage to the disk collection get params
func (o *DiskCollectionGetParams) WithOutageReasonArgumentsMessageQueryParameter(outageReasonArgumentsMessage *string) *DiskCollectionGetParams {
	o.SetOutageReasonArgumentsMessageQueryParameter(outageReasonArgumentsMessage)
	return o
}

// SetOutageReasonArgumentsMessageQueryParameter adds the outageReasonArgumentsMessage to the disk collection get params
func (o *DiskCollectionGetParams) SetOutageReasonArgumentsMessageQueryParameter(outageReasonArgumentsMessage *string) {
	o.OutageReasonArgumentsMessageQueryParameter = outageReasonArgumentsMessage
}

// WithOutageReasonCodeQueryParameter adds the outageReasonCode to the disk collection get params
func (o *DiskCollectionGetParams) WithOutageReasonCodeQueryParameter(outageReasonCode *string) *DiskCollectionGetParams {
	o.SetOutageReasonCodeQueryParameter(outageReasonCode)
	return o
}

// SetOutageReasonCodeQueryParameter adds the outageReasonCode to the disk collection get params
func (o *DiskCollectionGetParams) SetOutageReasonCodeQueryParameter(outageReasonCode *string) {
	o.OutageReasonCodeQueryParameter = outageReasonCode
}

// WithOutageReasonMessageQueryParameter adds the outageReasonMessage to the disk collection get params
func (o *DiskCollectionGetParams) WithOutageReasonMessageQueryParameter(outageReasonMessage *string) *DiskCollectionGetParams {
	o.SetOutageReasonMessageQueryParameter(outageReasonMessage)
	return o
}

// SetOutageReasonMessageQueryParameter adds the outageReasonMessage to the disk collection get params
func (o *DiskCollectionGetParams) SetOutageReasonMessageQueryParameter(outageReasonMessage *string) {
	o.OutageReasonMessageQueryParameter = outageReasonMessage
}

// WithOutageReasonTargetQueryParameter adds the outageReasonTarget to the disk collection get params
func (o *DiskCollectionGetParams) WithOutageReasonTargetQueryParameter(outageReasonTarget *string) *DiskCollectionGetParams {
	o.SetOutageReasonTargetQueryParameter(outageReasonTarget)
	return o
}

// SetOutageReasonTargetQueryParameter adds the outageReasonTarget to the disk collection get params
func (o *DiskCollectionGetParams) SetOutageReasonTargetQueryParameter(outageReasonTarget *string) {
	o.OutageReasonTargetQueryParameter = outageReasonTarget
}

// WithPathsInitiatorQueryParameter adds the pathsInitiator to the disk collection get params
func (o *DiskCollectionGetParams) WithPathsInitiatorQueryParameter(pathsInitiator *string) *DiskCollectionGetParams {
	o.SetPathsInitiatorQueryParameter(pathsInitiator)
	return o
}

// SetPathsInitiatorQueryParameter adds the pathsInitiator to the disk collection get params
func (o *DiskCollectionGetParams) SetPathsInitiatorQueryParameter(pathsInitiator *string) {
	o.PathsInitiatorQueryParameter = pathsInitiator
}

// WithPathsPortNameQueryParameter adds the pathsPortName to the disk collection get params
func (o *DiskCollectionGetParams) WithPathsPortNameQueryParameter(pathsPortName *string) *DiskCollectionGetParams {
	o.SetPathsPortNameQueryParameter(pathsPortName)
	return o
}

// SetPathsPortNameQueryParameter adds the pathsPortName to the disk collection get params
func (o *DiskCollectionGetParams) SetPathsPortNameQueryParameter(pathsPortName *string) {
	o.PathsPortNameQueryParameter = pathsPortName
}

// WithPathsPortTypeQueryParameter adds the pathsPortType to the disk collection get params
func (o *DiskCollectionGetParams) WithPathsPortTypeQueryParameter(pathsPortType *string) *DiskCollectionGetParams {
	o.SetPathsPortTypeQueryParameter(pathsPortType)
	return o
}

// SetPathsPortTypeQueryParameter adds the pathsPortType to the disk collection get params
func (o *DiskCollectionGetParams) SetPathsPortTypeQueryParameter(pathsPortType *string) {
	o.PathsPortTypeQueryParameter = pathsPortType
}

// WithPathsWwnnQueryParameter adds the pathsWwnn to the disk collection get params
func (o *DiskCollectionGetParams) WithPathsWwnnQueryParameter(pathsWwnn *string) *DiskCollectionGetParams {
	o.SetPathsWwnnQueryParameter(pathsWwnn)
	return o
}

// SetPathsWwnnQueryParameter adds the pathsWwnn to the disk collection get params
func (o *DiskCollectionGetParams) SetPathsWwnnQueryParameter(pathsWwnn *string) {
	o.PathsWwnnQueryParameter = pathsWwnn
}

// WithPathsWwpnQueryParameter adds the pathsWwpn to the disk collection get params
func (o *DiskCollectionGetParams) WithPathsWwpnQueryParameter(pathsWwpn *string) *DiskCollectionGetParams {
	o.SetPathsWwpnQueryParameter(pathsWwpn)
	return o
}

// SetPathsWwpnQueryParameter adds the pathsWwpn to the disk collection get params
func (o *DiskCollectionGetParams) SetPathsWwpnQueryParameter(pathsWwpn *string) {
	o.PathsWwpnQueryParameter = pathsWwpn
}

// WithPoolQueryParameter adds the pool to the disk collection get params
func (o *DiskCollectionGetParams) WithPoolQueryParameter(pool *string) *DiskCollectionGetParams {
	o.SetPoolQueryParameter(pool)
	return o
}

// SetPoolQueryParameter adds the pool to the disk collection get params
func (o *DiskCollectionGetParams) SetPoolQueryParameter(pool *string) {
	o.PoolQueryParameter = pool
}

// WithProtectionModeQueryParameter adds the protectionMode to the disk collection get params
func (o *DiskCollectionGetParams) WithProtectionModeQueryParameter(protectionMode *string) *DiskCollectionGetParams {
	o.SetProtectionModeQueryParameter(protectionMode)
	return o
}

// SetProtectionModeQueryParameter adds the protectionMode to the disk collection get params
func (o *DiskCollectionGetParams) SetProtectionModeQueryParameter(protectionMode *string) {
	o.ProtectionModeQueryParameter = protectionMode
}

// WithRatedLifeUsedPercentQueryParameter adds the ratedLifeUsedPercent to the disk collection get params
func (o *DiskCollectionGetParams) WithRatedLifeUsedPercentQueryParameter(ratedLifeUsedPercent *int64) *DiskCollectionGetParams {
	o.SetRatedLifeUsedPercentQueryParameter(ratedLifeUsedPercent)
	return o
}

// SetRatedLifeUsedPercentQueryParameter adds the ratedLifeUsedPercent to the disk collection get params
func (o *DiskCollectionGetParams) SetRatedLifeUsedPercentQueryParameter(ratedLifeUsedPercent *int64) {
	o.RatedLifeUsedPercentQueryParameter = ratedLifeUsedPercent
}

// WithReturnRecordsQueryParameter adds the returnRecords to the disk collection get params
func (o *DiskCollectionGetParams) WithReturnRecordsQueryParameter(returnRecords *bool) *DiskCollectionGetParams {
	o.SetReturnRecordsQueryParameter(returnRecords)
	return o
}

// SetReturnRecordsQueryParameter adds the returnRecords to the disk collection get params
func (o *DiskCollectionGetParams) SetReturnRecordsQueryParameter(returnRecords *bool) {
	o.ReturnRecordsQueryParameter = returnRecords
}

// WithReturnTimeoutQueryParameter adds the returnTimeout to the disk collection get params
func (o *DiskCollectionGetParams) WithReturnTimeoutQueryParameter(returnTimeout *int64) *DiskCollectionGetParams {
	o.SetReturnTimeoutQueryParameter(returnTimeout)
	return o
}

// SetReturnTimeoutQueryParameter adds the returnTimeout to the disk collection get params
func (o *DiskCollectionGetParams) SetReturnTimeoutQueryParameter(returnTimeout *int64) {
	o.ReturnTimeoutQueryParameter = returnTimeout
}

// WithRpmQueryParameter adds the rpm to the disk collection get params
func (o *DiskCollectionGetParams) WithRpmQueryParameter(rpm *int64) *DiskCollectionGetParams {
	o.SetRpmQueryParameter(rpm)
	return o
}

// SetRpmQueryParameter adds the rpm to the disk collection get params
func (o *DiskCollectionGetParams) SetRpmQueryParameter(rpm *int64) {
	o.RpmQueryParameter = rpm
}

// WithSectorCountQueryParameter adds the sectorCount to the disk collection get params
func (o *DiskCollectionGetParams) WithSectorCountQueryParameter(sectorCount *int64) *DiskCollectionGetParams {
	o.SetSectorCountQueryParameter(sectorCount)
	return o
}

// SetSectorCountQueryParameter adds the sectorCount to the disk collection get params
func (o *DiskCollectionGetParams) SetSectorCountQueryParameter(sectorCount *int64) {
	o.SectorCountQueryParameter = sectorCount
}

// WithSelfEncryptingQueryParameter adds the selfEncrypting to the disk collection get params
func (o *DiskCollectionGetParams) WithSelfEncryptingQueryParameter(selfEncrypting *bool) *DiskCollectionGetParams {
	o.SetSelfEncryptingQueryParameter(selfEncrypting)
	return o
}

// SetSelfEncryptingQueryParameter adds the selfEncrypting to the disk collection get params
func (o *DiskCollectionGetParams) SetSelfEncryptingQueryParameter(selfEncrypting *bool) {
	o.SelfEncryptingQueryParameter = selfEncrypting
}

// WithSerialNumberQueryParameter adds the serialNumber to the disk collection get params
func (o *DiskCollectionGetParams) WithSerialNumberQueryParameter(serialNumber *string) *DiskCollectionGetParams {
	o.SetSerialNumberQueryParameter(serialNumber)
	return o
}

// SetSerialNumberQueryParameter adds the serialNumber to the disk collection get params
func (o *DiskCollectionGetParams) SetSerialNumberQueryParameter(serialNumber *string) {
	o.SerialNumberQueryParameter = serialNumber
}

// WithShelfUIDQueryParameter adds the shelfUID to the disk collection get params
func (o *DiskCollectionGetParams) WithShelfUIDQueryParameter(shelfUID *string) *DiskCollectionGetParams {
	o.SetShelfUIDQueryParameter(shelfUID)
	return o
}

// SetShelfUIDQueryParameter adds the shelfUid to the disk collection get params
func (o *DiskCollectionGetParams) SetShelfUIDQueryParameter(shelfUID *string) {
	o.ShelfUIDQueryParameter = shelfUID
}

// WithStateQueryParameter adds the state to the disk collection get params
func (o *DiskCollectionGetParams) WithStateQueryParameter(state *string) *DiskCollectionGetParams {
	o.SetStateQueryParameter(state)
	return o
}

// SetStateQueryParameter adds the state to the disk collection get params
func (o *DiskCollectionGetParams) SetStateQueryParameter(state *string) {
	o.StateQueryParameter = state
}

// WithStatsAverageLatencyQueryParameter adds the statsAverageLatency to the disk collection get params
func (o *DiskCollectionGetParams) WithStatsAverageLatencyQueryParameter(statsAverageLatency *int64) *DiskCollectionGetParams {
	o.SetStatsAverageLatencyQueryParameter(statsAverageLatency)
	return o
}

// SetStatsAverageLatencyQueryParameter adds the statsAverageLatency to the disk collection get params
func (o *DiskCollectionGetParams) SetStatsAverageLatencyQueryParameter(statsAverageLatency *int64) {
	o.StatsAverageLatencyQueryParameter = statsAverageLatency
}

// WithStatsIopsTotalQueryParameter adds the statsIopsTotal to the disk collection get params
func (o *DiskCollectionGetParams) WithStatsIopsTotalQueryParameter(statsIopsTotal *int64) *DiskCollectionGetParams {
	o.SetStatsIopsTotalQueryParameter(statsIopsTotal)
	return o
}

// SetStatsIopsTotalQueryParameter adds the statsIopsTotal to the disk collection get params
func (o *DiskCollectionGetParams) SetStatsIopsTotalQueryParameter(statsIopsTotal *int64) {
	o.StatsIopsTotalQueryParameter = statsIopsTotal
}

// WithStatsPathErrorCountQueryParameter adds the statsPathErrorCount to the disk collection get params
func (o *DiskCollectionGetParams) WithStatsPathErrorCountQueryParameter(statsPathErrorCount *int64) *DiskCollectionGetParams {
	o.SetStatsPathErrorCountQueryParameter(statsPathErrorCount)
	return o
}

// SetStatsPathErrorCountQueryParameter adds the statsPathErrorCount to the disk collection get params
func (o *DiskCollectionGetParams) SetStatsPathErrorCountQueryParameter(statsPathErrorCount *int64) {
	o.StatsPathErrorCountQueryParameter = statsPathErrorCount
}

// WithStatsPowerOnHoursQueryParameter adds the statsPowerOnHours to the disk collection get params
func (o *DiskCollectionGetParams) WithStatsPowerOnHoursQueryParameter(statsPowerOnHours *int64) *DiskCollectionGetParams {
	o.SetStatsPowerOnHoursQueryParameter(statsPowerOnHours)
	return o
}

// SetStatsPowerOnHoursQueryParameter adds the statsPowerOnHours to the disk collection get params
func (o *DiskCollectionGetParams) SetStatsPowerOnHoursQueryParameter(statsPowerOnHours *int64) {
	o.StatsPowerOnHoursQueryParameter = statsPowerOnHours
}

// WithStatsThroughputQueryParameter adds the statsThroughput to the disk collection get params
func (o *DiskCollectionGetParams) WithStatsThroughputQueryParameter(statsThroughput *int64) *DiskCollectionGetParams {
	o.SetStatsThroughputQueryParameter(statsThroughput)
	return o
}

// SetStatsThroughputQueryParameter adds the statsThroughput to the disk collection get params
func (o *DiskCollectionGetParams) SetStatsThroughputQueryParameter(statsThroughput *int64) {
	o.StatsThroughputQueryParameter = statsThroughput
}

// WithTypeQueryParameter adds the typeVar to the disk collection get params
func (o *DiskCollectionGetParams) WithTypeQueryParameter(typeVar *string) *DiskCollectionGetParams {
	o.SetTypeQueryParameter(typeVar)
	return o
}

// SetTypeQueryParameter adds the type to the disk collection get params
func (o *DiskCollectionGetParams) SetTypeQueryParameter(typeVar *string) {
	o.TypeQueryParameter = typeVar
}

// WithUIDQueryParameter adds the uid to the disk collection get params
func (o *DiskCollectionGetParams) WithUIDQueryParameter(uid *string) *DiskCollectionGetParams {
	o.SetUIDQueryParameter(uid)
	return o
}

// SetUIDQueryParameter adds the uid to the disk collection get params
func (o *DiskCollectionGetParams) SetUIDQueryParameter(uid *string) {
	o.UIDQueryParameter = uid
}

// WithUsableSizeQueryParameter adds the usableSize to the disk collection get params
func (o *DiskCollectionGetParams) WithUsableSizeQueryParameter(usableSize *int64) *DiskCollectionGetParams {
	o.SetUsableSizeQueryParameter(usableSize)
	return o
}

// SetUsableSizeQueryParameter adds the usableSize to the disk collection get params
func (o *DiskCollectionGetParams) SetUsableSizeQueryParameter(usableSize *int64) {
	o.UsableSizeQueryParameter = usableSize
}

// WithVendorQueryParameter adds the vendor to the disk collection get params
func (o *DiskCollectionGetParams) WithVendorQueryParameter(vendor *string) *DiskCollectionGetParams {
	o.SetVendorQueryParameter(vendor)
	return o
}

// SetVendorQueryParameter adds the vendor to the disk collection get params
func (o *DiskCollectionGetParams) SetVendorQueryParameter(vendor *string) {
	o.VendorQueryParameter = vendor
}

// WriteToRequest writes these params to a swagger request
func (o *DiskCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AggregatesNameQueryParameter != nil {

		// query param aggregates.name
		var qrAggregatesName string

		if o.AggregatesNameQueryParameter != nil {
			qrAggregatesName = *o.AggregatesNameQueryParameter
		}
		qAggregatesName := qrAggregatesName
		if qAggregatesName != "" {

			if err := r.SetQueryParam("aggregates.name", qAggregatesName); err != nil {
				return err
			}
		}
	}

	if o.AggregatesUUIDQueryParameter != nil {

		// query param aggregates.uuid
		var qrAggregatesUUID string

		if o.AggregatesUUIDQueryParameter != nil {
			qrAggregatesUUID = *o.AggregatesUUIDQueryParameter
		}
		qAggregatesUUID := qrAggregatesUUID
		if qAggregatesUUID != "" {

			if err := r.SetQueryParam("aggregates.uuid", qAggregatesUUID); err != nil {
				return err
			}
		}
	}

	if o.BayQueryParameter != nil {

		// query param bay
		var qrBay int64

		if o.BayQueryParameter != nil {
			qrBay = *o.BayQueryParameter
		}
		qBay := swag.FormatInt64(qrBay)
		if qBay != "" {

			if err := r.SetQueryParam("bay", qBay); err != nil {
				return err
			}
		}
	}

	if o.BytesPerSectorQueryParameter != nil {

		// query param bytes_per_sector
		var qrBytesPerSector int64

		if o.BytesPerSectorQueryParameter != nil {
			qrBytesPerSector = *o.BytesPerSectorQueryParameter
		}
		qBytesPerSector := swag.FormatInt64(qrBytesPerSector)
		if qBytesPerSector != "" {

			if err := r.SetQueryParam("bytes_per_sector", qBytesPerSector); err != nil {
				return err
			}
		}
	}

	if o.ClassQueryParameter != nil {

		// query param class
		var qrClass string

		if o.ClassQueryParameter != nil {
			qrClass = *o.ClassQueryParameter
		}
		qClass := qrClass
		if qClass != "" {

			if err := r.SetQueryParam("class", qClass); err != nil {
				return err
			}
		}
	}

	if o.ContainerTypeQueryParameter != nil {

		// query param container_type
		var qrContainerType string

		if o.ContainerTypeQueryParameter != nil {
			qrContainerType = *o.ContainerTypeQueryParameter
		}
		qContainerType := qrContainerType
		if qContainerType != "" {

			if err := r.SetQueryParam("container_type", qContainerType); err != nil {
				return err
			}
		}
	}

	if o.DrNodeNameQueryParameter != nil {

		// query param dr_node.name
		var qrDrNodeName string

		if o.DrNodeNameQueryParameter != nil {
			qrDrNodeName = *o.DrNodeNameQueryParameter
		}
		qDrNodeName := qrDrNodeName
		if qDrNodeName != "" {

			if err := r.SetQueryParam("dr_node.name", qDrNodeName); err != nil {
				return err
			}
		}
	}

	if o.DrNodeUUIDQueryParameter != nil {

		// query param dr_node.uuid
		var qrDrNodeUUID string

		if o.DrNodeUUIDQueryParameter != nil {
			qrDrNodeUUID = *o.DrNodeUUIDQueryParameter
		}
		qDrNodeUUID := qrDrNodeUUID
		if qDrNodeUUID != "" {

			if err := r.SetQueryParam("dr_node.uuid", qDrNodeUUID); err != nil {
				return err
			}
		}
	}

	if o.DrawerIDQueryParameter != nil {

		// query param drawer.id
		var qrDrawerID int64

		if o.DrawerIDQueryParameter != nil {
			qrDrawerID = *o.DrawerIDQueryParameter
		}
		qDrawerID := swag.FormatInt64(qrDrawerID)
		if qDrawerID != "" {

			if err := r.SetQueryParam("drawer.id", qDrawerID); err != nil {
				return err
			}
		}
	}

	if o.DrawerSlotQueryParameter != nil {

		// query param drawer.slot
		var qrDrawerSlot int64

		if o.DrawerSlotQueryParameter != nil {
			qrDrawerSlot = *o.DrawerSlotQueryParameter
		}
		qDrawerSlot := swag.FormatInt64(qrDrawerSlot)
		if qDrawerSlot != "" {

			if err := r.SetQueryParam("drawer.slot", qDrawerSlot); err != nil {
				return err
			}
		}
	}

	if o.EffectiveTypeQueryParameter != nil {

		// query param effective_type
		var qrEffectiveType string

		if o.EffectiveTypeQueryParameter != nil {
			qrEffectiveType = *o.EffectiveTypeQueryParameter
		}
		qEffectiveType := qrEffectiveType
		if qEffectiveType != "" {

			if err := r.SetQueryParam("effective_type", qEffectiveType); err != nil {
				return err
			}
		}
	}

	if o.ErrorReasonArgumentsCodeQueryParameter != nil {

		// query param error.reason.arguments.code
		var qrErrorReasonArgumentsCode string

		if o.ErrorReasonArgumentsCodeQueryParameter != nil {
			qrErrorReasonArgumentsCode = *o.ErrorReasonArgumentsCodeQueryParameter
		}
		qErrorReasonArgumentsCode := qrErrorReasonArgumentsCode
		if qErrorReasonArgumentsCode != "" {

			if err := r.SetQueryParam("error.reason.arguments.code", qErrorReasonArgumentsCode); err != nil {
				return err
			}
		}
	}

	if o.ErrorReasonArgumentsMessageQueryParameter != nil {

		// query param error.reason.arguments.message
		var qrErrorReasonArgumentsMessage string

		if o.ErrorReasonArgumentsMessageQueryParameter != nil {
			qrErrorReasonArgumentsMessage = *o.ErrorReasonArgumentsMessageQueryParameter
		}
		qErrorReasonArgumentsMessage := qrErrorReasonArgumentsMessage
		if qErrorReasonArgumentsMessage != "" {

			if err := r.SetQueryParam("error.reason.arguments.message", qErrorReasonArgumentsMessage); err != nil {
				return err
			}
		}
	}

	if o.ErrorReasonCodeQueryParameter != nil {

		// query param error.reason.code
		var qrErrorReasonCode string

		if o.ErrorReasonCodeQueryParameter != nil {
			qrErrorReasonCode = *o.ErrorReasonCodeQueryParameter
		}
		qErrorReasonCode := qrErrorReasonCode
		if qErrorReasonCode != "" {

			if err := r.SetQueryParam("error.reason.code", qErrorReasonCode); err != nil {
				return err
			}
		}
	}

	if o.ErrorReasonMessageQueryParameter != nil {

		// query param error.reason.message
		var qrErrorReasonMessage string

		if o.ErrorReasonMessageQueryParameter != nil {
			qrErrorReasonMessage = *o.ErrorReasonMessageQueryParameter
		}
		qErrorReasonMessage := qrErrorReasonMessage
		if qErrorReasonMessage != "" {

			if err := r.SetQueryParam("error.reason.message", qErrorReasonMessage); err != nil {
				return err
			}
		}
	}

	if o.ErrorReasonTargetQueryParameter != nil {

		// query param error.reason.target
		var qrErrorReasonTarget string

		if o.ErrorReasonTargetQueryParameter != nil {
			qrErrorReasonTarget = *o.ErrorReasonTargetQueryParameter
		}
		qErrorReasonTarget := qrErrorReasonTarget
		if qErrorReasonTarget != "" {

			if err := r.SetQueryParam("error.reason.target", qErrorReasonTarget); err != nil {
				return err
			}
		}
	}

	if o.ErrorTypeQueryParameter != nil {

		// query param error.type
		var qrErrorType string

		if o.ErrorTypeQueryParameter != nil {
			qrErrorType = *o.ErrorTypeQueryParameter
		}
		qErrorType := qrErrorType
		if qErrorType != "" {

			if err := r.SetQueryParam("error.type", qErrorType); err != nil {
				return err
			}
		}
	}

	if o.FieldsQueryParameter != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.FipsCertifiedQueryParameter != nil {

		// query param fips_certified
		var qrFipsCertified bool

		if o.FipsCertifiedQueryParameter != nil {
			qrFipsCertified = *o.FipsCertifiedQueryParameter
		}
		qFipsCertified := swag.FormatBool(qrFipsCertified)
		if qFipsCertified != "" {

			if err := r.SetQueryParam("fips_certified", qFipsCertified); err != nil {
				return err
			}
		}
	}

	if o.FirmwareVersionQueryParameter != nil {

		// query param firmware_version
		var qrFirmwareVersion string

		if o.FirmwareVersionQueryParameter != nil {
			qrFirmwareVersion = *o.FirmwareVersionQueryParameter
		}
		qFirmwareVersion := qrFirmwareVersion
		if qFirmwareVersion != "" {

			if err := r.SetQueryParam("firmware_version", qFirmwareVersion); err != nil {
				return err
			}
		}
	}

	if o.HomeNodeNameQueryParameter != nil {

		// query param home_node.name
		var qrHomeNodeName string

		if o.HomeNodeNameQueryParameter != nil {
			qrHomeNodeName = *o.HomeNodeNameQueryParameter
		}
		qHomeNodeName := qrHomeNodeName
		if qHomeNodeName != "" {

			if err := r.SetQueryParam("home_node.name", qHomeNodeName); err != nil {
				return err
			}
		}
	}

	if o.HomeNodeUUIDQueryParameter != nil {

		// query param home_node.uuid
		var qrHomeNodeUUID string

		if o.HomeNodeUUIDQueryParameter != nil {
			qrHomeNodeUUID = *o.HomeNodeUUIDQueryParameter
		}
		qHomeNodeUUID := qrHomeNodeUUID
		if qHomeNodeUUID != "" {

			if err := r.SetQueryParam("home_node.uuid", qHomeNodeUUID); err != nil {
				return err
			}
		}
	}

	if o.KeyIDDataQueryParameter != nil {

		// query param key_id.data
		var qrKeyIDData string

		if o.KeyIDDataQueryParameter != nil {
			qrKeyIDData = *o.KeyIDDataQueryParameter
		}
		qKeyIDData := qrKeyIDData
		if qKeyIDData != "" {

			if err := r.SetQueryParam("key_id.data", qKeyIDData); err != nil {
				return err
			}
		}
	}

	if o.KeyIDFipsQueryParameter != nil {

		// query param key_id.fips
		var qrKeyIDFips string

		if o.KeyIDFipsQueryParameter != nil {
			qrKeyIDFips = *o.KeyIDFipsQueryParameter
		}
		qKeyIDFips := qrKeyIDFips
		if qKeyIDFips != "" {

			if err := r.SetQueryParam("key_id.fips", qKeyIDFips); err != nil {
				return err
			}
		}
	}

	if o.LocalQueryParameter != nil {

		// query param local
		var qrLocal bool

		if o.LocalQueryParameter != nil {
			qrLocal = *o.LocalQueryParameter
		}
		qLocal := swag.FormatBool(qrLocal)
		if qLocal != "" {

			if err := r.SetQueryParam("local", qLocal); err != nil {
				return err
			}
		}
	}

	if o.MaxRecordsQueryParameter != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecordsQueryParameter != nil {
			qrMaxRecords = *o.MaxRecordsQueryParameter
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.ModelQueryParameter != nil {

		// query param model
		var qrModel string

		if o.ModelQueryParameter != nil {
			qrModel = *o.ModelQueryParameter
		}
		qModel := qrModel
		if qModel != "" {

			if err := r.SetQueryParam("model", qModel); err != nil {
				return err
			}
		}
	}

	if o.NameQueryParameter != nil {

		// query param name
		var qrName string

		if o.NameQueryParameter != nil {
			qrName = *o.NameQueryParameter
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.NodeNameQueryParameter != nil {

		// query param node.name
		var qrNodeName string

		if o.NodeNameQueryParameter != nil {
			qrNodeName = *o.NodeNameQueryParameter
		}
		qNodeName := qrNodeName
		if qNodeName != "" {

			if err := r.SetQueryParam("node.name", qNodeName); err != nil {
				return err
			}
		}
	}

	if o.NodeUUIDQueryParameter != nil {

		// query param node.uuid
		var qrNodeUUID string

		if o.NodeUUIDQueryParameter != nil {
			qrNodeUUID = *o.NodeUUIDQueryParameter
		}
		qNodeUUID := qrNodeUUID
		if qNodeUUID != "" {

			if err := r.SetQueryParam("node.uuid", qNodeUUID); err != nil {
				return err
			}
		}
	}

	if o.OrderByQueryParameter != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.OutagePersistentlyFailedQueryParameter != nil {

		// query param outage.persistently_failed
		var qrOutagePersistentlyFailed bool

		if o.OutagePersistentlyFailedQueryParameter != nil {
			qrOutagePersistentlyFailed = *o.OutagePersistentlyFailedQueryParameter
		}
		qOutagePersistentlyFailed := swag.FormatBool(qrOutagePersistentlyFailed)
		if qOutagePersistentlyFailed != "" {

			if err := r.SetQueryParam("outage.persistently_failed", qOutagePersistentlyFailed); err != nil {
				return err
			}
		}
	}

	if o.OutageReasonArgumentsCodeQueryParameter != nil {

		// query param outage.reason.arguments.code
		var qrOutageReasonArgumentsCode string

		if o.OutageReasonArgumentsCodeQueryParameter != nil {
			qrOutageReasonArgumentsCode = *o.OutageReasonArgumentsCodeQueryParameter
		}
		qOutageReasonArgumentsCode := qrOutageReasonArgumentsCode
		if qOutageReasonArgumentsCode != "" {

			if err := r.SetQueryParam("outage.reason.arguments.code", qOutageReasonArgumentsCode); err != nil {
				return err
			}
		}
	}

	if o.OutageReasonArgumentsMessageQueryParameter != nil {

		// query param outage.reason.arguments.message
		var qrOutageReasonArgumentsMessage string

		if o.OutageReasonArgumentsMessageQueryParameter != nil {
			qrOutageReasonArgumentsMessage = *o.OutageReasonArgumentsMessageQueryParameter
		}
		qOutageReasonArgumentsMessage := qrOutageReasonArgumentsMessage
		if qOutageReasonArgumentsMessage != "" {

			if err := r.SetQueryParam("outage.reason.arguments.message", qOutageReasonArgumentsMessage); err != nil {
				return err
			}
		}
	}

	if o.OutageReasonCodeQueryParameter != nil {

		// query param outage.reason.code
		var qrOutageReasonCode string

		if o.OutageReasonCodeQueryParameter != nil {
			qrOutageReasonCode = *o.OutageReasonCodeQueryParameter
		}
		qOutageReasonCode := qrOutageReasonCode
		if qOutageReasonCode != "" {

			if err := r.SetQueryParam("outage.reason.code", qOutageReasonCode); err != nil {
				return err
			}
		}
	}

	if o.OutageReasonMessageQueryParameter != nil {

		// query param outage.reason.message
		var qrOutageReasonMessage string

		if o.OutageReasonMessageQueryParameter != nil {
			qrOutageReasonMessage = *o.OutageReasonMessageQueryParameter
		}
		qOutageReasonMessage := qrOutageReasonMessage
		if qOutageReasonMessage != "" {

			if err := r.SetQueryParam("outage.reason.message", qOutageReasonMessage); err != nil {
				return err
			}
		}
	}

	if o.OutageReasonTargetQueryParameter != nil {

		// query param outage.reason.target
		var qrOutageReasonTarget string

		if o.OutageReasonTargetQueryParameter != nil {
			qrOutageReasonTarget = *o.OutageReasonTargetQueryParameter
		}
		qOutageReasonTarget := qrOutageReasonTarget
		if qOutageReasonTarget != "" {

			if err := r.SetQueryParam("outage.reason.target", qOutageReasonTarget); err != nil {
				return err
			}
		}
	}

	if o.PathsInitiatorQueryParameter != nil {

		// query param paths.initiator
		var qrPathsInitiator string

		if o.PathsInitiatorQueryParameter != nil {
			qrPathsInitiator = *o.PathsInitiatorQueryParameter
		}
		qPathsInitiator := qrPathsInitiator
		if qPathsInitiator != "" {

			if err := r.SetQueryParam("paths.initiator", qPathsInitiator); err != nil {
				return err
			}
		}
	}

	if o.PathsPortNameQueryParameter != nil {

		// query param paths.port_name
		var qrPathsPortName string

		if o.PathsPortNameQueryParameter != nil {
			qrPathsPortName = *o.PathsPortNameQueryParameter
		}
		qPathsPortName := qrPathsPortName
		if qPathsPortName != "" {

			if err := r.SetQueryParam("paths.port_name", qPathsPortName); err != nil {
				return err
			}
		}
	}

	if o.PathsPortTypeQueryParameter != nil {

		// query param paths.port_type
		var qrPathsPortType string

		if o.PathsPortTypeQueryParameter != nil {
			qrPathsPortType = *o.PathsPortTypeQueryParameter
		}
		qPathsPortType := qrPathsPortType
		if qPathsPortType != "" {

			if err := r.SetQueryParam("paths.port_type", qPathsPortType); err != nil {
				return err
			}
		}
	}

	if o.PathsWwnnQueryParameter != nil {

		// query param paths.wwnn
		var qrPathsWwnn string

		if o.PathsWwnnQueryParameter != nil {
			qrPathsWwnn = *o.PathsWwnnQueryParameter
		}
		qPathsWwnn := qrPathsWwnn
		if qPathsWwnn != "" {

			if err := r.SetQueryParam("paths.wwnn", qPathsWwnn); err != nil {
				return err
			}
		}
	}

	if o.PathsWwpnQueryParameter != nil {

		// query param paths.wwpn
		var qrPathsWwpn string

		if o.PathsWwpnQueryParameter != nil {
			qrPathsWwpn = *o.PathsWwpnQueryParameter
		}
		qPathsWwpn := qrPathsWwpn
		if qPathsWwpn != "" {

			if err := r.SetQueryParam("paths.wwpn", qPathsWwpn); err != nil {
				return err
			}
		}
	}

	if o.PoolQueryParameter != nil {

		// query param pool
		var qrPool string

		if o.PoolQueryParameter != nil {
			qrPool = *o.PoolQueryParameter
		}
		qPool := qrPool
		if qPool != "" {

			if err := r.SetQueryParam("pool", qPool); err != nil {
				return err
			}
		}
	}

	if o.ProtectionModeQueryParameter != nil {

		// query param protection_mode
		var qrProtectionMode string

		if o.ProtectionModeQueryParameter != nil {
			qrProtectionMode = *o.ProtectionModeQueryParameter
		}
		qProtectionMode := qrProtectionMode
		if qProtectionMode != "" {

			if err := r.SetQueryParam("protection_mode", qProtectionMode); err != nil {
				return err
			}
		}
	}

	if o.RatedLifeUsedPercentQueryParameter != nil {

		// query param rated_life_used_percent
		var qrRatedLifeUsedPercent int64

		if o.RatedLifeUsedPercentQueryParameter != nil {
			qrRatedLifeUsedPercent = *o.RatedLifeUsedPercentQueryParameter
		}
		qRatedLifeUsedPercent := swag.FormatInt64(qrRatedLifeUsedPercent)
		if qRatedLifeUsedPercent != "" {

			if err := r.SetQueryParam("rated_life_used_percent", qRatedLifeUsedPercent); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecordsQueryParameter != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecordsQueryParameter != nil {
			qrReturnRecords = *o.ReturnRecordsQueryParameter
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeoutQueryParameter != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeoutQueryParameter != nil {
			qrReturnTimeout = *o.ReturnTimeoutQueryParameter
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.RpmQueryParameter != nil {

		// query param rpm
		var qrRpm int64

		if o.RpmQueryParameter != nil {
			qrRpm = *o.RpmQueryParameter
		}
		qRpm := swag.FormatInt64(qrRpm)
		if qRpm != "" {

			if err := r.SetQueryParam("rpm", qRpm); err != nil {
				return err
			}
		}
	}

	if o.SectorCountQueryParameter != nil {

		// query param sector_count
		var qrSectorCount int64

		if o.SectorCountQueryParameter != nil {
			qrSectorCount = *o.SectorCountQueryParameter
		}
		qSectorCount := swag.FormatInt64(qrSectorCount)
		if qSectorCount != "" {

			if err := r.SetQueryParam("sector_count", qSectorCount); err != nil {
				return err
			}
		}
	}

	if o.SelfEncryptingQueryParameter != nil {

		// query param self_encrypting
		var qrSelfEncrypting bool

		if o.SelfEncryptingQueryParameter != nil {
			qrSelfEncrypting = *o.SelfEncryptingQueryParameter
		}
		qSelfEncrypting := swag.FormatBool(qrSelfEncrypting)
		if qSelfEncrypting != "" {

			if err := r.SetQueryParam("self_encrypting", qSelfEncrypting); err != nil {
				return err
			}
		}
	}

	if o.SerialNumberQueryParameter != nil {

		// query param serial_number
		var qrSerialNumber string

		if o.SerialNumberQueryParameter != nil {
			qrSerialNumber = *o.SerialNumberQueryParameter
		}
		qSerialNumber := qrSerialNumber
		if qSerialNumber != "" {

			if err := r.SetQueryParam("serial_number", qSerialNumber); err != nil {
				return err
			}
		}
	}

	if o.ShelfUIDQueryParameter != nil {

		// query param shelf.uid
		var qrShelfUID string

		if o.ShelfUIDQueryParameter != nil {
			qrShelfUID = *o.ShelfUIDQueryParameter
		}
		qShelfUID := qrShelfUID
		if qShelfUID != "" {

			if err := r.SetQueryParam("shelf.uid", qShelfUID); err != nil {
				return err
			}
		}
	}

	if o.StateQueryParameter != nil {

		// query param state
		var qrState string

		if o.StateQueryParameter != nil {
			qrState = *o.StateQueryParameter
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if o.StatsAverageLatencyQueryParameter != nil {

		// query param stats.average_latency
		var qrStatsAverageLatency int64

		if o.StatsAverageLatencyQueryParameter != nil {
			qrStatsAverageLatency = *o.StatsAverageLatencyQueryParameter
		}
		qStatsAverageLatency := swag.FormatInt64(qrStatsAverageLatency)
		if qStatsAverageLatency != "" {

			if err := r.SetQueryParam("stats.average_latency", qStatsAverageLatency); err != nil {
				return err
			}
		}
	}

	if o.StatsIopsTotalQueryParameter != nil {

		// query param stats.iops_total
		var qrStatsIopsTotal int64

		if o.StatsIopsTotalQueryParameter != nil {
			qrStatsIopsTotal = *o.StatsIopsTotalQueryParameter
		}
		qStatsIopsTotal := swag.FormatInt64(qrStatsIopsTotal)
		if qStatsIopsTotal != "" {

			if err := r.SetQueryParam("stats.iops_total", qStatsIopsTotal); err != nil {
				return err
			}
		}
	}

	if o.StatsPathErrorCountQueryParameter != nil {

		// query param stats.path_error_count
		var qrStatsPathErrorCount int64

		if o.StatsPathErrorCountQueryParameter != nil {
			qrStatsPathErrorCount = *o.StatsPathErrorCountQueryParameter
		}
		qStatsPathErrorCount := swag.FormatInt64(qrStatsPathErrorCount)
		if qStatsPathErrorCount != "" {

			if err := r.SetQueryParam("stats.path_error_count", qStatsPathErrorCount); err != nil {
				return err
			}
		}
	}

	if o.StatsPowerOnHoursQueryParameter != nil {

		// query param stats.power_on_hours
		var qrStatsPowerOnHours int64

		if o.StatsPowerOnHoursQueryParameter != nil {
			qrStatsPowerOnHours = *o.StatsPowerOnHoursQueryParameter
		}
		qStatsPowerOnHours := swag.FormatInt64(qrStatsPowerOnHours)
		if qStatsPowerOnHours != "" {

			if err := r.SetQueryParam("stats.power_on_hours", qStatsPowerOnHours); err != nil {
				return err
			}
		}
	}

	if o.StatsThroughputQueryParameter != nil {

		// query param stats.throughput
		var qrStatsThroughput int64

		if o.StatsThroughputQueryParameter != nil {
			qrStatsThroughput = *o.StatsThroughputQueryParameter
		}
		qStatsThroughput := swag.FormatInt64(qrStatsThroughput)
		if qStatsThroughput != "" {

			if err := r.SetQueryParam("stats.throughput", qStatsThroughput); err != nil {
				return err
			}
		}
	}

	if o.TypeQueryParameter != nil {

		// query param type
		var qrType string

		if o.TypeQueryParameter != nil {
			qrType = *o.TypeQueryParameter
		}
		qType := qrType
		if qType != "" {

			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}
	}

	if o.UIDQueryParameter != nil {

		// query param uid
		var qrUID string

		if o.UIDQueryParameter != nil {
			qrUID = *o.UIDQueryParameter
		}
		qUID := qrUID
		if qUID != "" {

			if err := r.SetQueryParam("uid", qUID); err != nil {
				return err
			}
		}
	}

	if o.UsableSizeQueryParameter != nil {

		// query param usable_size
		var qrUsableSize int64

		if o.UsableSizeQueryParameter != nil {
			qrUsableSize = *o.UsableSizeQueryParameter
		}
		qUsableSize := swag.FormatInt64(qrUsableSize)
		if qUsableSize != "" {

			if err := r.SetQueryParam("usable_size", qUsableSize); err != nil {
				return err
			}
		}
	}

	if o.VendorQueryParameter != nil {

		// query param vendor
		var qrVendor string

		if o.VendorQueryParameter != nil {
			qrVendor = *o.VendorQueryParameter
		}
		qVendor := qrVendor
		if qVendor != "" {

			if err := r.SetQueryParam("vendor", qVendor); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamDiskCollectionGet binds the parameter fields
func (o *DiskCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.FieldsQueryParameter

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamDiskCollectionGet binds the parameter order_by
func (o *DiskCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderByQueryParameter

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
