// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/netapp/trident/storage_drivers/ontap/api/rest/models"
)

// NewVolumeModifyParams creates a new VolumeModifyParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewVolumeModifyParams() *VolumeModifyParams {
	return &VolumeModifyParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewVolumeModifyParamsWithTimeout creates a new VolumeModifyParams object
// with the ability to set a timeout on a request.
func NewVolumeModifyParamsWithTimeout(timeout time.Duration) *VolumeModifyParams {
	return &VolumeModifyParams{
		timeout: timeout,
	}
}

// NewVolumeModifyParamsWithContext creates a new VolumeModifyParams object
// with the ability to set a context for a request.
func NewVolumeModifyParamsWithContext(ctx context.Context) *VolumeModifyParams {
	return &VolumeModifyParams{
		Context: ctx,
	}
}

// NewVolumeModifyParamsWithHTTPClient creates a new VolumeModifyParams object
// with the ability to set a custom HTTPClient for a request.
func NewVolumeModifyParamsWithHTTPClient(client *http.Client) *VolumeModifyParams {
	return &VolumeModifyParams{
		HTTPClient: client,
	}
}

/*
VolumeModifyParams contains all the parameters to send to the API endpoint

	for the volume modify operation.

	Typically these are written to a http.Request.
*/
type VolumeModifyParams struct {

	/* CloneMatchParentStorageTier.

	   Specifies whether the FlexClone volume splits the data blocks by matching its parent storage tier. This option is applicable only if the tiering policy and the tiering minimum cooling days of the parent volume and the FlexClone volume are the same.
	*/
	CloneMatchParentStorageTierQueryParameter *bool

	/* Info.

	   Info specification
	*/
	Info *models.Volume

	/* Nvfail.

	   When this option is "on", the filer performs additional work at boot time if it finds that there has been any potential data loss due to an NVRAM failure. In such situations, it causes the invalidation of all NFS file handles on all volumes affected by the problem so that client-side users are forced to remount the affected file system (and thus not continue to use potentially incorrect data). It is also possible to specify a set of files per volume that are renamed in such cases. The filer sends error messages to the console whenever such problems are found.
	*/
	NvfailQueryParameter *string

	/* PreserveLunIds.

	   Specifies whether LUN IDs need to be preserved during a Snapshot copy restore operation.
	*/
	PreserveLunIDsQueryParameter *bool

	/* RestoreToByteCount.

	   Number of bytes to restore from the source file, in multiples of 4096.
	*/
	RestoreToByteCountQueryParameter *float64

	/* RestoreToPath.

	   Path to the file which is restored from the Snapshot copy.
	*/
	RestoreToPathQueryParameter *string

	/* RestoreToRestorePath.

	   Specifies the destination location inside the volume where the file is restored.
	*/
	RestoreToRestorePathQueryParameter *string

	/* RestoreToSnapshotName.

	   Name of the Snapshot copy to restore volume to the point in time the Snapshot copy was taken.
	*/
	RestoreToSnapshotNameQueryParameter *string

	/* RestoreToSnapshotUUID.

	   UUID of the Snapshot copy to restore volume to the point in time the Snapshot copy was taken.
	*/
	RestoreToSnapshotUUIDQueryParameter *string

	/* RestoreToStartByte.

	   Starting byte offset of the source file, in multiples of 4096.
	*/
	RestoreToStartByteQueryParameter *float64

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning. When doing a POST, PATCH, or DELETE operation on a single record, the default is 0 seconds.  This means that if an asynchronous operation is started, the server immediately returns HTTP code 202 (Accepted) along with a link to the job.  If a non-zero value is specified for POST, PATCH, or DELETE operations, ONTAP waits that length of time to see if the job completes so it can return something other than 202.
	*/
	ReturnTimeoutQueryParameter *int64

	/* ScheduledSnapshotNamingScheme.

	     Naming Scheme for automatic Snapshot copies:
	* create_time - Automatic Snapshot copies are saved as per the start of their current date and time.
	* ordinal - Latest automatic snapshot copy is saved as <scheduled_frequency>.0 and subsequent copies will follow the create_time naming convention.


	     Default: "create_time"
	*/
	ScheduledSnapshotNamingSchemeQueryParameter *string

	/* SizingMethod.

	     Represents the method to modify the size of a Flexgroup. The following methods are supported:
	* use_existing_resources - Increases or decreases the size of the FlexGroup by increasing or decreasing the size of the current FlexGroup resources
	* add_new_resources - Increases the size of the FlexGroup by adding new resources. This is limited to two new resources per available aggregate.


	     Default: "use_existing_resources"
	*/
	SizingMethodQueryParameter *string

	/* SnapshotDirectoryAccessEnabled.

	   This field, if true, enables the visible ".snapshot" directory from the client. The ".snapshot" directory will be available in every directory on the volume.

	   Default: true
	*/
	SnapshotDirectoryAccessEnabledQueryParameter *bool

	/* UUID.

	   Unique identifier of the volume.
	*/
	UUIDPathParameter string

	/* ValidateOnly.

	   Validate the operation and its parameters, without actually performing the operation.
	*/
	ValidateOnlyQueryParameter *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the volume modify params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *VolumeModifyParams) WithDefaults() *VolumeModifyParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the volume modify params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *VolumeModifyParams) SetDefaults() {
	var (
		preserveLunIDsQueryParameterDefault = bool(false)

		returnTimeoutQueryParameterDefault = int64(0)

		scheduledSnapshotNamingSchemeQueryParameterDefault = string("create_time")

		sizingMethodQueryParameterDefault = string("use_existing_resources")

		snapshotDirectoryAccessEnabledQueryParameterDefault = bool(true)
	)

	val := VolumeModifyParams{
		PreserveLunIDsQueryParameter:                 &preserveLunIDsQueryParameterDefault,
		ReturnTimeoutQueryParameter:                  &returnTimeoutQueryParameterDefault,
		ScheduledSnapshotNamingSchemeQueryParameter:  &scheduledSnapshotNamingSchemeQueryParameterDefault,
		SizingMethodQueryParameter:                   &sizingMethodQueryParameterDefault,
		SnapshotDirectoryAccessEnabledQueryParameter: &snapshotDirectoryAccessEnabledQueryParameterDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the volume modify params
func (o *VolumeModifyParams) WithTimeout(timeout time.Duration) *VolumeModifyParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the volume modify params
func (o *VolumeModifyParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the volume modify params
func (o *VolumeModifyParams) WithContext(ctx context.Context) *VolumeModifyParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the volume modify params
func (o *VolumeModifyParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the volume modify params
func (o *VolumeModifyParams) WithHTTPClient(client *http.Client) *VolumeModifyParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the volume modify params
func (o *VolumeModifyParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCloneMatchParentStorageTierQueryParameter adds the cloneMatchParentStorageTier to the volume modify params
func (o *VolumeModifyParams) WithCloneMatchParentStorageTierQueryParameter(cloneMatchParentStorageTier *bool) *VolumeModifyParams {
	o.SetCloneMatchParentStorageTierQueryParameter(cloneMatchParentStorageTier)
	return o
}

// SetCloneMatchParentStorageTierQueryParameter adds the cloneMatchParentStorageTier to the volume modify params
func (o *VolumeModifyParams) SetCloneMatchParentStorageTierQueryParameter(cloneMatchParentStorageTier *bool) {
	o.CloneMatchParentStorageTierQueryParameter = cloneMatchParentStorageTier
}

// WithInfo adds the info to the volume modify params
func (o *VolumeModifyParams) WithInfo(info *models.Volume) *VolumeModifyParams {
	o.SetInfo(info)
	return o
}

// SetInfo adds the info to the volume modify params
func (o *VolumeModifyParams) SetInfo(info *models.Volume) {
	o.Info = info
}

// WithNvfailQueryParameter adds the nvfail to the volume modify params
func (o *VolumeModifyParams) WithNvfailQueryParameter(nvfail *string) *VolumeModifyParams {
	o.SetNvfailQueryParameter(nvfail)
	return o
}

// SetNvfailQueryParameter adds the nvfail to the volume modify params
func (o *VolumeModifyParams) SetNvfailQueryParameter(nvfail *string) {
	o.NvfailQueryParameter = nvfail
}

// WithPreserveLunIDsQueryParameter adds the preserveLunIds to the volume modify params
func (o *VolumeModifyParams) WithPreserveLunIDsQueryParameter(preserveLunIds *bool) *VolumeModifyParams {
	o.SetPreserveLunIDsQueryParameter(preserveLunIds)
	return o
}

// SetPreserveLunIDsQueryParameter adds the preserveLunIds to the volume modify params
func (o *VolumeModifyParams) SetPreserveLunIDsQueryParameter(preserveLunIds *bool) {
	o.PreserveLunIDsQueryParameter = preserveLunIds
}

// WithRestoreToByteCountQueryParameter adds the restoreToByteCount to the volume modify params
func (o *VolumeModifyParams) WithRestoreToByteCountQueryParameter(restoreToByteCount *float64) *VolumeModifyParams {
	o.SetRestoreToByteCountQueryParameter(restoreToByteCount)
	return o
}

// SetRestoreToByteCountQueryParameter adds the restoreToByteCount to the volume modify params
func (o *VolumeModifyParams) SetRestoreToByteCountQueryParameter(restoreToByteCount *float64) {
	o.RestoreToByteCountQueryParameter = restoreToByteCount
}

// WithRestoreToPathQueryParameter adds the restoreToPath to the volume modify params
func (o *VolumeModifyParams) WithRestoreToPathQueryParameter(restoreToPath *string) *VolumeModifyParams {
	o.SetRestoreToPathQueryParameter(restoreToPath)
	return o
}

// SetRestoreToPathQueryParameter adds the restoreToPath to the volume modify params
func (o *VolumeModifyParams) SetRestoreToPathQueryParameter(restoreToPath *string) {
	o.RestoreToPathQueryParameter = restoreToPath
}

// WithRestoreToRestorePathQueryParameter adds the restoreToRestorePath to the volume modify params
func (o *VolumeModifyParams) WithRestoreToRestorePathQueryParameter(restoreToRestorePath *string) *VolumeModifyParams {
	o.SetRestoreToRestorePathQueryParameter(restoreToRestorePath)
	return o
}

// SetRestoreToRestorePathQueryParameter adds the restoreToRestorePath to the volume modify params
func (o *VolumeModifyParams) SetRestoreToRestorePathQueryParameter(restoreToRestorePath *string) {
	o.RestoreToRestorePathQueryParameter = restoreToRestorePath
}

// WithRestoreToSnapshotNameQueryParameter adds the restoreToSnapshotName to the volume modify params
func (o *VolumeModifyParams) WithRestoreToSnapshotNameQueryParameter(restoreToSnapshotName *string) *VolumeModifyParams {
	o.SetRestoreToSnapshotNameQueryParameter(restoreToSnapshotName)
	return o
}

// SetRestoreToSnapshotNameQueryParameter adds the restoreToSnapshotName to the volume modify params
func (o *VolumeModifyParams) SetRestoreToSnapshotNameQueryParameter(restoreToSnapshotName *string) {
	o.RestoreToSnapshotNameQueryParameter = restoreToSnapshotName
}

// WithRestoreToSnapshotUUIDQueryParameter adds the restoreToSnapshotUUID to the volume modify params
func (o *VolumeModifyParams) WithRestoreToSnapshotUUIDQueryParameter(restoreToSnapshotUUID *string) *VolumeModifyParams {
	o.SetRestoreToSnapshotUUIDQueryParameter(restoreToSnapshotUUID)
	return o
}

// SetRestoreToSnapshotUUIDQueryParameter adds the restoreToSnapshotUuid to the volume modify params
func (o *VolumeModifyParams) SetRestoreToSnapshotUUIDQueryParameter(restoreToSnapshotUUID *string) {
	o.RestoreToSnapshotUUIDQueryParameter = restoreToSnapshotUUID
}

// WithRestoreToStartByteQueryParameter adds the restoreToStartByte to the volume modify params
func (o *VolumeModifyParams) WithRestoreToStartByteQueryParameter(restoreToStartByte *float64) *VolumeModifyParams {
	o.SetRestoreToStartByteQueryParameter(restoreToStartByte)
	return o
}

// SetRestoreToStartByteQueryParameter adds the restoreToStartByte to the volume modify params
func (o *VolumeModifyParams) SetRestoreToStartByteQueryParameter(restoreToStartByte *float64) {
	o.RestoreToStartByteQueryParameter = restoreToStartByte
}

// WithReturnTimeoutQueryParameter adds the returnTimeout to the volume modify params
func (o *VolumeModifyParams) WithReturnTimeoutQueryParameter(returnTimeout *int64) *VolumeModifyParams {
	o.SetReturnTimeoutQueryParameter(returnTimeout)
	return o
}

// SetReturnTimeoutQueryParameter adds the returnTimeout to the volume modify params
func (o *VolumeModifyParams) SetReturnTimeoutQueryParameter(returnTimeout *int64) {
	o.ReturnTimeoutQueryParameter = returnTimeout
}

// WithScheduledSnapshotNamingSchemeQueryParameter adds the scheduledSnapshotNamingScheme to the volume modify params
func (o *VolumeModifyParams) WithScheduledSnapshotNamingSchemeQueryParameter(scheduledSnapshotNamingScheme *string) *VolumeModifyParams {
	o.SetScheduledSnapshotNamingSchemeQueryParameter(scheduledSnapshotNamingScheme)
	return o
}

// SetScheduledSnapshotNamingSchemeQueryParameter adds the scheduledSnapshotNamingScheme to the volume modify params
func (o *VolumeModifyParams) SetScheduledSnapshotNamingSchemeQueryParameter(scheduledSnapshotNamingScheme *string) {
	o.ScheduledSnapshotNamingSchemeQueryParameter = scheduledSnapshotNamingScheme
}

// WithSizingMethodQueryParameter adds the sizingMethod to the volume modify params
func (o *VolumeModifyParams) WithSizingMethodQueryParameter(sizingMethod *string) *VolumeModifyParams {
	o.SetSizingMethodQueryParameter(sizingMethod)
	return o
}

// SetSizingMethodQueryParameter adds the sizingMethod to the volume modify params
func (o *VolumeModifyParams) SetSizingMethodQueryParameter(sizingMethod *string) {
	o.SizingMethodQueryParameter = sizingMethod
}

// WithSnapshotDirectoryAccessEnabledQueryParameter adds the snapshotDirectoryAccessEnabled to the volume modify params
func (o *VolumeModifyParams) WithSnapshotDirectoryAccessEnabledQueryParameter(snapshotDirectoryAccessEnabled *bool) *VolumeModifyParams {
	o.SetSnapshotDirectoryAccessEnabledQueryParameter(snapshotDirectoryAccessEnabled)
	return o
}

// SetSnapshotDirectoryAccessEnabledQueryParameter adds the snapshotDirectoryAccessEnabled to the volume modify params
func (o *VolumeModifyParams) SetSnapshotDirectoryAccessEnabledQueryParameter(snapshotDirectoryAccessEnabled *bool) {
	o.SnapshotDirectoryAccessEnabledQueryParameter = snapshotDirectoryAccessEnabled
}

// WithUUIDPathParameter adds the uuid to the volume modify params
func (o *VolumeModifyParams) WithUUIDPathParameter(uuid string) *VolumeModifyParams {
	o.SetUUIDPathParameter(uuid)
	return o
}

// SetUUIDPathParameter adds the uuid to the volume modify params
func (o *VolumeModifyParams) SetUUIDPathParameter(uuid string) {
	o.UUIDPathParameter = uuid
}

// WithValidateOnlyQueryParameter adds the validateOnly to the volume modify params
func (o *VolumeModifyParams) WithValidateOnlyQueryParameter(validateOnly *bool) *VolumeModifyParams {
	o.SetValidateOnlyQueryParameter(validateOnly)
	return o
}

// SetValidateOnlyQueryParameter adds the validateOnly to the volume modify params
func (o *VolumeModifyParams) SetValidateOnlyQueryParameter(validateOnly *bool) {
	o.ValidateOnlyQueryParameter = validateOnly
}

// WriteToRequest writes these params to a swagger request
func (o *VolumeModifyParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CloneMatchParentStorageTierQueryParameter != nil {

		// query param clone.match_parent_storage_tier
		var qrCloneMatchParentStorageTier bool

		if o.CloneMatchParentStorageTierQueryParameter != nil {
			qrCloneMatchParentStorageTier = *o.CloneMatchParentStorageTierQueryParameter
		}
		qCloneMatchParentStorageTier := swag.FormatBool(qrCloneMatchParentStorageTier)
		if qCloneMatchParentStorageTier != "" {

			if err := r.SetQueryParam("clone.match_parent_storage_tier", qCloneMatchParentStorageTier); err != nil {
				return err
			}
		}
	}
	if o.Info != nil {
		if err := r.SetBodyParam(o.Info); err != nil {
			return err
		}
	}

	if o.NvfailQueryParameter != nil {

		// query param nvfail
		var qrNvfail string

		if o.NvfailQueryParameter != nil {
			qrNvfail = *o.NvfailQueryParameter
		}
		qNvfail := qrNvfail
		if qNvfail != "" {

			if err := r.SetQueryParam("nvfail", qNvfail); err != nil {
				return err
			}
		}
	}

	if o.PreserveLunIDsQueryParameter != nil {

		// query param preserve_lun_ids
		var qrPreserveLunIds bool

		if o.PreserveLunIDsQueryParameter != nil {
			qrPreserveLunIds = *o.PreserveLunIDsQueryParameter
		}
		qPreserveLunIds := swag.FormatBool(qrPreserveLunIds)
		if qPreserveLunIds != "" {

			if err := r.SetQueryParam("preserve_lun_ids", qPreserveLunIds); err != nil {
				return err
			}
		}
	}

	if o.RestoreToByteCountQueryParameter != nil {

		// query param restore_to.byte_count
		var qrRestoreToByteCount float64

		if o.RestoreToByteCountQueryParameter != nil {
			qrRestoreToByteCount = *o.RestoreToByteCountQueryParameter
		}
		qRestoreToByteCount := swag.FormatFloat64(qrRestoreToByteCount)
		if qRestoreToByteCount != "" {

			if err := r.SetQueryParam("restore_to.byte_count", qRestoreToByteCount); err != nil {
				return err
			}
		}
	}

	if o.RestoreToPathQueryParameter != nil {

		// query param restore_to.path
		var qrRestoreToPath string

		if o.RestoreToPathQueryParameter != nil {
			qrRestoreToPath = *o.RestoreToPathQueryParameter
		}
		qRestoreToPath := qrRestoreToPath
		if qRestoreToPath != "" {

			if err := r.SetQueryParam("restore_to.path", qRestoreToPath); err != nil {
				return err
			}
		}
	}

	if o.RestoreToRestorePathQueryParameter != nil {

		// query param restore_to.restore_path
		var qrRestoreToRestorePath string

		if o.RestoreToRestorePathQueryParameter != nil {
			qrRestoreToRestorePath = *o.RestoreToRestorePathQueryParameter
		}
		qRestoreToRestorePath := qrRestoreToRestorePath
		if qRestoreToRestorePath != "" {

			if err := r.SetQueryParam("restore_to.restore_path", qRestoreToRestorePath); err != nil {
				return err
			}
		}
	}

	if o.RestoreToSnapshotNameQueryParameter != nil {

		// query param restore_to.snapshot.name
		var qrRestoreToSnapshotName string

		if o.RestoreToSnapshotNameQueryParameter != nil {
			qrRestoreToSnapshotName = *o.RestoreToSnapshotNameQueryParameter
		}
		qRestoreToSnapshotName := qrRestoreToSnapshotName
		if qRestoreToSnapshotName != "" {

			if err := r.SetQueryParam("restore_to.snapshot.name", qRestoreToSnapshotName); err != nil {
				return err
			}
		}
	}

	if o.RestoreToSnapshotUUIDQueryParameter != nil {

		// query param restore_to.snapshot.uuid
		var qrRestoreToSnapshotUUID string

		if o.RestoreToSnapshotUUIDQueryParameter != nil {
			qrRestoreToSnapshotUUID = *o.RestoreToSnapshotUUIDQueryParameter
		}
		qRestoreToSnapshotUUID := qrRestoreToSnapshotUUID
		if qRestoreToSnapshotUUID != "" {

			if err := r.SetQueryParam("restore_to.snapshot.uuid", qRestoreToSnapshotUUID); err != nil {
				return err
			}
		}
	}

	if o.RestoreToStartByteQueryParameter != nil {

		// query param restore_to.start_byte
		var qrRestoreToStartByte float64

		if o.RestoreToStartByteQueryParameter != nil {
			qrRestoreToStartByte = *o.RestoreToStartByteQueryParameter
		}
		qRestoreToStartByte := swag.FormatFloat64(qrRestoreToStartByte)
		if qRestoreToStartByte != "" {

			if err := r.SetQueryParam("restore_to.start_byte", qRestoreToStartByte); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeoutQueryParameter != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeoutQueryParameter != nil {
			qrReturnTimeout = *o.ReturnTimeoutQueryParameter
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.ScheduledSnapshotNamingSchemeQueryParameter != nil {

		// query param scheduled_snapshot_naming_scheme
		var qrScheduledSnapshotNamingScheme string

		if o.ScheduledSnapshotNamingSchemeQueryParameter != nil {
			qrScheduledSnapshotNamingScheme = *o.ScheduledSnapshotNamingSchemeQueryParameter
		}
		qScheduledSnapshotNamingScheme := qrScheduledSnapshotNamingScheme
		if qScheduledSnapshotNamingScheme != "" {

			if err := r.SetQueryParam("scheduled_snapshot_naming_scheme", qScheduledSnapshotNamingScheme); err != nil {
				return err
			}
		}
	}

	if o.SizingMethodQueryParameter != nil {

		// query param sizing_method
		var qrSizingMethod string

		if o.SizingMethodQueryParameter != nil {
			qrSizingMethod = *o.SizingMethodQueryParameter
		}
		qSizingMethod := qrSizingMethod
		if qSizingMethod != "" {

			if err := r.SetQueryParam("sizing_method", qSizingMethod); err != nil {
				return err
			}
		}
	}

	if o.SnapshotDirectoryAccessEnabledQueryParameter != nil {

		// query param snapshot_directory_access_enabled
		var qrSnapshotDirectoryAccessEnabled bool

		if o.SnapshotDirectoryAccessEnabledQueryParameter != nil {
			qrSnapshotDirectoryAccessEnabled = *o.SnapshotDirectoryAccessEnabledQueryParameter
		}
		qSnapshotDirectoryAccessEnabled := swag.FormatBool(qrSnapshotDirectoryAccessEnabled)
		if qSnapshotDirectoryAccessEnabled != "" {

			if err := r.SetQueryParam("snapshot_directory_access_enabled", qSnapshotDirectoryAccessEnabled); err != nil {
				return err
			}
		}
	}

	// path param uuid
	if err := r.SetPathParam("uuid", o.UUIDPathParameter); err != nil {
		return err
	}

	if o.ValidateOnlyQueryParameter != nil {

		// query param validate_only
		var qrValidateOnly bool

		if o.ValidateOnlyQueryParameter != nil {
			qrValidateOnly = *o.ValidateOnlyQueryParameter
		}
		qValidateOnly := swag.FormatBool(qrValidateOnly)
		if qValidateOnly != "" {

			if err := r.SetQueryParam("validate_only", qValidateOnly); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
