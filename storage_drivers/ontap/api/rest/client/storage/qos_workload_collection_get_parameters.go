// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewQosWorkloadCollectionGetParams creates a new QosWorkloadCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewQosWorkloadCollectionGetParams() *QosWorkloadCollectionGetParams {
	return &QosWorkloadCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewQosWorkloadCollectionGetParamsWithTimeout creates a new QosWorkloadCollectionGetParams object
// with the ability to set a timeout on a request.
func NewQosWorkloadCollectionGetParamsWithTimeout(timeout time.Duration) *QosWorkloadCollectionGetParams {
	return &QosWorkloadCollectionGetParams{
		timeout: timeout,
	}
}

// NewQosWorkloadCollectionGetParamsWithContext creates a new QosWorkloadCollectionGetParams object
// with the ability to set a context for a request.
func NewQosWorkloadCollectionGetParamsWithContext(ctx context.Context) *QosWorkloadCollectionGetParams {
	return &QosWorkloadCollectionGetParams{
		Context: ctx,
	}
}

// NewQosWorkloadCollectionGetParamsWithHTTPClient creates a new QosWorkloadCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewQosWorkloadCollectionGetParamsWithHTTPClient(client *http.Client) *QosWorkloadCollectionGetParams {
	return &QosWorkloadCollectionGetParams{
		HTTPClient: client,
	}
}

/*
QosWorkloadCollectionGetParams contains all the parameters to send to the API endpoint

	for the qos workload collection get operation.

	Typically these are written to a http.Request.
*/
type QosWorkloadCollectionGetParams struct {

	/* Fields.

	   Specify the fields to return.
	*/
	FieldsQueryParameter []string

	/* File.

	   Filter by file
	*/
	FileQueryParameter *string

	/* Lun.

	   Filter by lun
	*/
	LunQueryParameter *string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecordsQueryParameter *int64

	/* Name.

	   Filter by name
	*/
	NameQueryParameter *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderByQueryParameter []string

	/* PolicyName.

	   Filter by policy.name
	*/
	PolicyNameQueryParameter *string

	/* PolicyUUID.

	   Filter by policy.uuid
	*/
	PolicyUUIDQueryParameter *string

	/* Qtree.

	   Filter by qtree
	*/
	QtreeQueryParameter *string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecordsQueryParameter *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeoutQueryParameter *int64

	/* SvmName.

	   Filter by svm.name
	*/
	SVMNameQueryParameter *string

	/* SvmUUID.

	   Filter by svm.uuid
	*/
	SVMUUIDQueryParameter *string

	/* UUID.

	   Filter by uuid
	*/
	UUIDQueryParameter *string

	/* Volume.

	   Filter by volume
	*/
	VolumeQueryParameter *string

	/* Wid.

	   Filter by wid
	*/
	WIDQueryParameter *int64

	/* WorkloadClass.

	   Filter by workload_class
	*/
	WorkloadClassQueryParameter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the qos workload collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *QosWorkloadCollectionGetParams) WithDefaults() *QosWorkloadCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the qos workload collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *QosWorkloadCollectionGetParams) SetDefaults() {
	var (
		returnRecordsQueryParameterDefault = bool(true)

		returnTimeoutQueryParameterDefault = int64(15)
	)

	val := QosWorkloadCollectionGetParams{
		ReturnRecordsQueryParameter: &returnRecordsQueryParameterDefault,
		ReturnTimeoutQueryParameter: &returnTimeoutQueryParameterDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the qos workload collection get params
func (o *QosWorkloadCollectionGetParams) WithTimeout(timeout time.Duration) *QosWorkloadCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the qos workload collection get params
func (o *QosWorkloadCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the qos workload collection get params
func (o *QosWorkloadCollectionGetParams) WithContext(ctx context.Context) *QosWorkloadCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the qos workload collection get params
func (o *QosWorkloadCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the qos workload collection get params
func (o *QosWorkloadCollectionGetParams) WithHTTPClient(client *http.Client) *QosWorkloadCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the qos workload collection get params
func (o *QosWorkloadCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFieldsQueryParameter adds the fields to the qos workload collection get params
func (o *QosWorkloadCollectionGetParams) WithFieldsQueryParameter(fields []string) *QosWorkloadCollectionGetParams {
	o.SetFieldsQueryParameter(fields)
	return o
}

// SetFieldsQueryParameter adds the fields to the qos workload collection get params
func (o *QosWorkloadCollectionGetParams) SetFieldsQueryParameter(fields []string) {
	o.FieldsQueryParameter = fields
}

// WithFileQueryParameter adds the file to the qos workload collection get params
func (o *QosWorkloadCollectionGetParams) WithFileQueryParameter(file *string) *QosWorkloadCollectionGetParams {
	o.SetFileQueryParameter(file)
	return o
}

// SetFileQueryParameter adds the file to the qos workload collection get params
func (o *QosWorkloadCollectionGetParams) SetFileQueryParameter(file *string) {
	o.FileQueryParameter = file
}

// WithLunQueryParameter adds the lun to the qos workload collection get params
func (o *QosWorkloadCollectionGetParams) WithLunQueryParameter(lun *string) *QosWorkloadCollectionGetParams {
	o.SetLunQueryParameter(lun)
	return o
}

// SetLunQueryParameter adds the lun to the qos workload collection get params
func (o *QosWorkloadCollectionGetParams) SetLunQueryParameter(lun *string) {
	o.LunQueryParameter = lun
}

// WithMaxRecordsQueryParameter adds the maxRecords to the qos workload collection get params
func (o *QosWorkloadCollectionGetParams) WithMaxRecordsQueryParameter(maxRecords *int64) *QosWorkloadCollectionGetParams {
	o.SetMaxRecordsQueryParameter(maxRecords)
	return o
}

// SetMaxRecordsQueryParameter adds the maxRecords to the qos workload collection get params
func (o *QosWorkloadCollectionGetParams) SetMaxRecordsQueryParameter(maxRecords *int64) {
	o.MaxRecordsQueryParameter = maxRecords
}

// WithNameQueryParameter adds the name to the qos workload collection get params
func (o *QosWorkloadCollectionGetParams) WithNameQueryParameter(name *string) *QosWorkloadCollectionGetParams {
	o.SetNameQueryParameter(name)
	return o
}

// SetNameQueryParameter adds the name to the qos workload collection get params
func (o *QosWorkloadCollectionGetParams) SetNameQueryParameter(name *string) {
	o.NameQueryParameter = name
}

// WithOrderByQueryParameter adds the orderBy to the qos workload collection get params
func (o *QosWorkloadCollectionGetParams) WithOrderByQueryParameter(orderBy []string) *QosWorkloadCollectionGetParams {
	o.SetOrderByQueryParameter(orderBy)
	return o
}

// SetOrderByQueryParameter adds the orderBy to the qos workload collection get params
func (o *QosWorkloadCollectionGetParams) SetOrderByQueryParameter(orderBy []string) {
	o.OrderByQueryParameter = orderBy
}

// WithPolicyNameQueryParameter adds the policyName to the qos workload collection get params
func (o *QosWorkloadCollectionGetParams) WithPolicyNameQueryParameter(policyName *string) *QosWorkloadCollectionGetParams {
	o.SetPolicyNameQueryParameter(policyName)
	return o
}

// SetPolicyNameQueryParameter adds the policyName to the qos workload collection get params
func (o *QosWorkloadCollectionGetParams) SetPolicyNameQueryParameter(policyName *string) {
	o.PolicyNameQueryParameter = policyName
}

// WithPolicyUUIDQueryParameter adds the policyUUID to the qos workload collection get params
func (o *QosWorkloadCollectionGetParams) WithPolicyUUIDQueryParameter(policyUUID *string) *QosWorkloadCollectionGetParams {
	o.SetPolicyUUIDQueryParameter(policyUUID)
	return o
}

// SetPolicyUUIDQueryParameter adds the policyUuid to the qos workload collection get params
func (o *QosWorkloadCollectionGetParams) SetPolicyUUIDQueryParameter(policyUUID *string) {
	o.PolicyUUIDQueryParameter = policyUUID
}

// WithQtreeQueryParameter adds the qtree to the qos workload collection get params
func (o *QosWorkloadCollectionGetParams) WithQtreeQueryParameter(qtree *string) *QosWorkloadCollectionGetParams {
	o.SetQtreeQueryParameter(qtree)
	return o
}

// SetQtreeQueryParameter adds the qtree to the qos workload collection get params
func (o *QosWorkloadCollectionGetParams) SetQtreeQueryParameter(qtree *string) {
	o.QtreeQueryParameter = qtree
}

// WithReturnRecordsQueryParameter adds the returnRecords to the qos workload collection get params
func (o *QosWorkloadCollectionGetParams) WithReturnRecordsQueryParameter(returnRecords *bool) *QosWorkloadCollectionGetParams {
	o.SetReturnRecordsQueryParameter(returnRecords)
	return o
}

// SetReturnRecordsQueryParameter adds the returnRecords to the qos workload collection get params
func (o *QosWorkloadCollectionGetParams) SetReturnRecordsQueryParameter(returnRecords *bool) {
	o.ReturnRecordsQueryParameter = returnRecords
}

// WithReturnTimeoutQueryParameter adds the returnTimeout to the qos workload collection get params
func (o *QosWorkloadCollectionGetParams) WithReturnTimeoutQueryParameter(returnTimeout *int64) *QosWorkloadCollectionGetParams {
	o.SetReturnTimeoutQueryParameter(returnTimeout)
	return o
}

// SetReturnTimeoutQueryParameter adds the returnTimeout to the qos workload collection get params
func (o *QosWorkloadCollectionGetParams) SetReturnTimeoutQueryParameter(returnTimeout *int64) {
	o.ReturnTimeoutQueryParameter = returnTimeout
}

// WithSVMNameQueryParameter adds the svmName to the qos workload collection get params
func (o *QosWorkloadCollectionGetParams) WithSVMNameQueryParameter(svmName *string) *QosWorkloadCollectionGetParams {
	o.SetSVMNameQueryParameter(svmName)
	return o
}

// SetSVMNameQueryParameter adds the svmName to the qos workload collection get params
func (o *QosWorkloadCollectionGetParams) SetSVMNameQueryParameter(svmName *string) {
	o.SVMNameQueryParameter = svmName
}

// WithSVMUUIDQueryParameter adds the svmUUID to the qos workload collection get params
func (o *QosWorkloadCollectionGetParams) WithSVMUUIDQueryParameter(svmUUID *string) *QosWorkloadCollectionGetParams {
	o.SetSVMUUIDQueryParameter(svmUUID)
	return o
}

// SetSVMUUIDQueryParameter adds the svmUuid to the qos workload collection get params
func (o *QosWorkloadCollectionGetParams) SetSVMUUIDQueryParameter(svmUUID *string) {
	o.SVMUUIDQueryParameter = svmUUID
}

// WithUUIDQueryParameter adds the uuid to the qos workload collection get params
func (o *QosWorkloadCollectionGetParams) WithUUIDQueryParameter(uuid *string) *QosWorkloadCollectionGetParams {
	o.SetUUIDQueryParameter(uuid)
	return o
}

// SetUUIDQueryParameter adds the uuid to the qos workload collection get params
func (o *QosWorkloadCollectionGetParams) SetUUIDQueryParameter(uuid *string) {
	o.UUIDQueryParameter = uuid
}

// WithVolumeQueryParameter adds the volume to the qos workload collection get params
func (o *QosWorkloadCollectionGetParams) WithVolumeQueryParameter(volume *string) *QosWorkloadCollectionGetParams {
	o.SetVolumeQueryParameter(volume)
	return o
}

// SetVolumeQueryParameter adds the volume to the qos workload collection get params
func (o *QosWorkloadCollectionGetParams) SetVolumeQueryParameter(volume *string) {
	o.VolumeQueryParameter = volume
}

// WithWIDQueryParameter adds the wid to the qos workload collection get params
func (o *QosWorkloadCollectionGetParams) WithWIDQueryParameter(wid *int64) *QosWorkloadCollectionGetParams {
	o.SetWIDQueryParameter(wid)
	return o
}

// SetWIDQueryParameter adds the wid to the qos workload collection get params
func (o *QosWorkloadCollectionGetParams) SetWIDQueryParameter(wid *int64) {
	o.WIDQueryParameter = wid
}

// WithWorkloadClassQueryParameter adds the workloadClass to the qos workload collection get params
func (o *QosWorkloadCollectionGetParams) WithWorkloadClassQueryParameter(workloadClass *string) *QosWorkloadCollectionGetParams {
	o.SetWorkloadClassQueryParameter(workloadClass)
	return o
}

// SetWorkloadClassQueryParameter adds the workloadClass to the qos workload collection get params
func (o *QosWorkloadCollectionGetParams) SetWorkloadClassQueryParameter(workloadClass *string) {
	o.WorkloadClassQueryParameter = workloadClass
}

// WriteToRequest writes these params to a swagger request
func (o *QosWorkloadCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FieldsQueryParameter != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.FileQueryParameter != nil {

		// query param file
		var qrFile string

		if o.FileQueryParameter != nil {
			qrFile = *o.FileQueryParameter
		}
		qFile := qrFile
		if qFile != "" {

			if err := r.SetQueryParam("file", qFile); err != nil {
				return err
			}
		}
	}

	if o.LunQueryParameter != nil {

		// query param lun
		var qrLun string

		if o.LunQueryParameter != nil {
			qrLun = *o.LunQueryParameter
		}
		qLun := qrLun
		if qLun != "" {

			if err := r.SetQueryParam("lun", qLun); err != nil {
				return err
			}
		}
	}

	if o.MaxRecordsQueryParameter != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecordsQueryParameter != nil {
			qrMaxRecords = *o.MaxRecordsQueryParameter
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.NameQueryParameter != nil {

		// query param name
		var qrName string

		if o.NameQueryParameter != nil {
			qrName = *o.NameQueryParameter
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.OrderByQueryParameter != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.PolicyNameQueryParameter != nil {

		// query param policy.name
		var qrPolicyName string

		if o.PolicyNameQueryParameter != nil {
			qrPolicyName = *o.PolicyNameQueryParameter
		}
		qPolicyName := qrPolicyName
		if qPolicyName != "" {

			if err := r.SetQueryParam("policy.name", qPolicyName); err != nil {
				return err
			}
		}
	}

	if o.PolicyUUIDQueryParameter != nil {

		// query param policy.uuid
		var qrPolicyUUID string

		if o.PolicyUUIDQueryParameter != nil {
			qrPolicyUUID = *o.PolicyUUIDQueryParameter
		}
		qPolicyUUID := qrPolicyUUID
		if qPolicyUUID != "" {

			if err := r.SetQueryParam("policy.uuid", qPolicyUUID); err != nil {
				return err
			}
		}
	}

	if o.QtreeQueryParameter != nil {

		// query param qtree
		var qrQtree string

		if o.QtreeQueryParameter != nil {
			qrQtree = *o.QtreeQueryParameter
		}
		qQtree := qrQtree
		if qQtree != "" {

			if err := r.SetQueryParam("qtree", qQtree); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecordsQueryParameter != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecordsQueryParameter != nil {
			qrReturnRecords = *o.ReturnRecordsQueryParameter
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeoutQueryParameter != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeoutQueryParameter != nil {
			qrReturnTimeout = *o.ReturnTimeoutQueryParameter
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.SVMNameQueryParameter != nil {

		// query param svm.name
		var qrSvmName string

		if o.SVMNameQueryParameter != nil {
			qrSvmName = *o.SVMNameQueryParameter
		}
		qSvmName := qrSvmName
		if qSvmName != "" {

			if err := r.SetQueryParam("svm.name", qSvmName); err != nil {
				return err
			}
		}
	}

	if o.SVMUUIDQueryParameter != nil {

		// query param svm.uuid
		var qrSvmUUID string

		if o.SVMUUIDQueryParameter != nil {
			qrSvmUUID = *o.SVMUUIDQueryParameter
		}
		qSvmUUID := qrSvmUUID
		if qSvmUUID != "" {

			if err := r.SetQueryParam("svm.uuid", qSvmUUID); err != nil {
				return err
			}
		}
	}

	if o.UUIDQueryParameter != nil {

		// query param uuid
		var qrUUID string

		if o.UUIDQueryParameter != nil {
			qrUUID = *o.UUIDQueryParameter
		}
		qUUID := qrUUID
		if qUUID != "" {

			if err := r.SetQueryParam("uuid", qUUID); err != nil {
				return err
			}
		}
	}

	if o.VolumeQueryParameter != nil {

		// query param volume
		var qrVolume string

		if o.VolumeQueryParameter != nil {
			qrVolume = *o.VolumeQueryParameter
		}
		qVolume := qrVolume
		if qVolume != "" {

			if err := r.SetQueryParam("volume", qVolume); err != nil {
				return err
			}
		}
	}

	if o.WIDQueryParameter != nil {

		// query param wid
		var qrWid int64

		if o.WIDQueryParameter != nil {
			qrWid = *o.WIDQueryParameter
		}
		qWid := swag.FormatInt64(qrWid)
		if qWid != "" {

			if err := r.SetQueryParam("wid", qWid); err != nil {
				return err
			}
		}
	}

	if o.WorkloadClassQueryParameter != nil {

		// query param workload_class
		var qrWorkloadClass string

		if o.WorkloadClassQueryParameter != nil {
			qrWorkloadClass = *o.WorkloadClassQueryParameter
		}
		qWorkloadClass := qrWorkloadClass
		if qWorkloadClass != "" {

			if err := r.SetQueryParam("workload_class", qWorkloadClass); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamQosWorkloadCollectionGet binds the parameter fields
func (o *QosWorkloadCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.FieldsQueryParameter

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamQosWorkloadCollectionGet binds the parameter order_by
func (o *QosWorkloadCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderByQueryParameter

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
