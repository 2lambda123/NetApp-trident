// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCloudStoreCollectionGetParams creates a new CloudStoreCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCloudStoreCollectionGetParams() *CloudStoreCollectionGetParams {
	return &CloudStoreCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCloudStoreCollectionGetParamsWithTimeout creates a new CloudStoreCollectionGetParams object
// with the ability to set a timeout on a request.
func NewCloudStoreCollectionGetParamsWithTimeout(timeout time.Duration) *CloudStoreCollectionGetParams {
	return &CloudStoreCollectionGetParams{
		timeout: timeout,
	}
}

// NewCloudStoreCollectionGetParamsWithContext creates a new CloudStoreCollectionGetParams object
// with the ability to set a context for a request.
func NewCloudStoreCollectionGetParamsWithContext(ctx context.Context) *CloudStoreCollectionGetParams {
	return &CloudStoreCollectionGetParams{
		Context: ctx,
	}
}

// NewCloudStoreCollectionGetParamsWithHTTPClient creates a new CloudStoreCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewCloudStoreCollectionGetParamsWithHTTPClient(client *http.Client) *CloudStoreCollectionGetParams {
	return &CloudStoreCollectionGetParams{
		HTTPClient: client,
	}
}

/* CloudStoreCollectionGetParams contains all the parameters to send to the API endpoint
   for the cloud store collection get operation.

   Typically these are written to a http.Request.
*/
type CloudStoreCollectionGetParams struct {

	/* AggregateName.

	   Filter by aggregate.name
	*/
	AggregateNameQueryParameter *string

	/* AggregateUUID.

	   Aggregate UUID
	*/
	AggregateUUIDPathParameter string

	/* Availability.

	   Filter by availability
	*/
	AvailabilityQueryParameter *string

	/* Fields.

	   Specify the fields to return.
	*/
	FieldsQueryParameter []string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecordsQueryParameter *int64

	/* MirrorDegraded.

	   Filter by mirror_degraded
	*/
	MirrorDegradedQueryParameter *bool

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderByQueryParameter []string

	/* Primary.

	   Filter by primary
	*/
	PrimaryQueryParameter *bool

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecordsQueryParameter *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeoutQueryParameter *int64

	/* TargetName.

	   Filter by target.name
	*/
	TargetNameQueryParameter *string

	/* TargetUUID.

	   Filter by target.uuid
	*/
	TargetUUIDQueryParameter *string

	/* UnavailableReasonMessage.

	   Filter by unavailable_reason.message
	*/
	UnavailableReasonMessageQueryParameter *string

	/* UnreclaimedSpaceThreshold.

	   Filter by unreclaimed_space_threshold
	*/
	UnreclaimedSpaceThresholdQueryParameter *int64

	/* Used.

	   Filter by used
	*/
	UsedQueryParameter *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the cloud store collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CloudStoreCollectionGetParams) WithDefaults() *CloudStoreCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the cloud store collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CloudStoreCollectionGetParams) SetDefaults() {
	var (
		returnRecordsQueryParameterDefault = bool(true)

		returnTimeoutQueryParameterDefault = int64(15)
	)

	val := CloudStoreCollectionGetParams{
		ReturnRecordsQueryParameter: &returnRecordsQueryParameterDefault,
		ReturnTimeoutQueryParameter: &returnTimeoutQueryParameterDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the cloud store collection get params
func (o *CloudStoreCollectionGetParams) WithTimeout(timeout time.Duration) *CloudStoreCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the cloud store collection get params
func (o *CloudStoreCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the cloud store collection get params
func (o *CloudStoreCollectionGetParams) WithContext(ctx context.Context) *CloudStoreCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the cloud store collection get params
func (o *CloudStoreCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the cloud store collection get params
func (o *CloudStoreCollectionGetParams) WithHTTPClient(client *http.Client) *CloudStoreCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the cloud store collection get params
func (o *CloudStoreCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAggregateNameQueryParameter adds the aggregateName to the cloud store collection get params
func (o *CloudStoreCollectionGetParams) WithAggregateNameQueryParameter(aggregateName *string) *CloudStoreCollectionGetParams {
	o.SetAggregateNameQueryParameter(aggregateName)
	return o
}

// SetAggregateNameQueryParameter adds the aggregateName to the cloud store collection get params
func (o *CloudStoreCollectionGetParams) SetAggregateNameQueryParameter(aggregateName *string) {
	o.AggregateNameQueryParameter = aggregateName
}

// WithAggregateUUIDPathParameter adds the aggregateUUID to the cloud store collection get params
func (o *CloudStoreCollectionGetParams) WithAggregateUUIDPathParameter(aggregateUUID string) *CloudStoreCollectionGetParams {
	o.SetAggregateUUIDPathParameter(aggregateUUID)
	return o
}

// SetAggregateUUIDPathParameter adds the aggregateUuid to the cloud store collection get params
func (o *CloudStoreCollectionGetParams) SetAggregateUUIDPathParameter(aggregateUUID string) {
	o.AggregateUUIDPathParameter = aggregateUUID
}

// WithAvailabilityQueryParameter adds the availability to the cloud store collection get params
func (o *CloudStoreCollectionGetParams) WithAvailabilityQueryParameter(availability *string) *CloudStoreCollectionGetParams {
	o.SetAvailabilityQueryParameter(availability)
	return o
}

// SetAvailabilityQueryParameter adds the availability to the cloud store collection get params
func (o *CloudStoreCollectionGetParams) SetAvailabilityQueryParameter(availability *string) {
	o.AvailabilityQueryParameter = availability
}

// WithFieldsQueryParameter adds the fields to the cloud store collection get params
func (o *CloudStoreCollectionGetParams) WithFieldsQueryParameter(fields []string) *CloudStoreCollectionGetParams {
	o.SetFieldsQueryParameter(fields)
	return o
}

// SetFieldsQueryParameter adds the fields to the cloud store collection get params
func (o *CloudStoreCollectionGetParams) SetFieldsQueryParameter(fields []string) {
	o.FieldsQueryParameter = fields
}

// WithMaxRecordsQueryParameter adds the maxRecords to the cloud store collection get params
func (o *CloudStoreCollectionGetParams) WithMaxRecordsQueryParameter(maxRecords *int64) *CloudStoreCollectionGetParams {
	o.SetMaxRecordsQueryParameter(maxRecords)
	return o
}

// SetMaxRecordsQueryParameter adds the maxRecords to the cloud store collection get params
func (o *CloudStoreCollectionGetParams) SetMaxRecordsQueryParameter(maxRecords *int64) {
	o.MaxRecordsQueryParameter = maxRecords
}

// WithMirrorDegradedQueryParameter adds the mirrorDegraded to the cloud store collection get params
func (o *CloudStoreCollectionGetParams) WithMirrorDegradedQueryParameter(mirrorDegraded *bool) *CloudStoreCollectionGetParams {
	o.SetMirrorDegradedQueryParameter(mirrorDegraded)
	return o
}

// SetMirrorDegradedQueryParameter adds the mirrorDegraded to the cloud store collection get params
func (o *CloudStoreCollectionGetParams) SetMirrorDegradedQueryParameter(mirrorDegraded *bool) {
	o.MirrorDegradedQueryParameter = mirrorDegraded
}

// WithOrderByQueryParameter adds the orderBy to the cloud store collection get params
func (o *CloudStoreCollectionGetParams) WithOrderByQueryParameter(orderBy []string) *CloudStoreCollectionGetParams {
	o.SetOrderByQueryParameter(orderBy)
	return o
}

// SetOrderByQueryParameter adds the orderBy to the cloud store collection get params
func (o *CloudStoreCollectionGetParams) SetOrderByQueryParameter(orderBy []string) {
	o.OrderByQueryParameter = orderBy
}

// WithPrimaryQueryParameter adds the primary to the cloud store collection get params
func (o *CloudStoreCollectionGetParams) WithPrimaryQueryParameter(primary *bool) *CloudStoreCollectionGetParams {
	o.SetPrimaryQueryParameter(primary)
	return o
}

// SetPrimaryQueryParameter adds the primary to the cloud store collection get params
func (o *CloudStoreCollectionGetParams) SetPrimaryQueryParameter(primary *bool) {
	o.PrimaryQueryParameter = primary
}

// WithReturnRecordsQueryParameter adds the returnRecords to the cloud store collection get params
func (o *CloudStoreCollectionGetParams) WithReturnRecordsQueryParameter(returnRecords *bool) *CloudStoreCollectionGetParams {
	o.SetReturnRecordsQueryParameter(returnRecords)
	return o
}

// SetReturnRecordsQueryParameter adds the returnRecords to the cloud store collection get params
func (o *CloudStoreCollectionGetParams) SetReturnRecordsQueryParameter(returnRecords *bool) {
	o.ReturnRecordsQueryParameter = returnRecords
}

// WithReturnTimeoutQueryParameter adds the returnTimeout to the cloud store collection get params
func (o *CloudStoreCollectionGetParams) WithReturnTimeoutQueryParameter(returnTimeout *int64) *CloudStoreCollectionGetParams {
	o.SetReturnTimeoutQueryParameter(returnTimeout)
	return o
}

// SetReturnTimeoutQueryParameter adds the returnTimeout to the cloud store collection get params
func (o *CloudStoreCollectionGetParams) SetReturnTimeoutQueryParameter(returnTimeout *int64) {
	o.ReturnTimeoutQueryParameter = returnTimeout
}

// WithTargetNameQueryParameter adds the targetName to the cloud store collection get params
func (o *CloudStoreCollectionGetParams) WithTargetNameQueryParameter(targetName *string) *CloudStoreCollectionGetParams {
	o.SetTargetNameQueryParameter(targetName)
	return o
}

// SetTargetNameQueryParameter adds the targetName to the cloud store collection get params
func (o *CloudStoreCollectionGetParams) SetTargetNameQueryParameter(targetName *string) {
	o.TargetNameQueryParameter = targetName
}

// WithTargetUUIDQueryParameter adds the targetUUID to the cloud store collection get params
func (o *CloudStoreCollectionGetParams) WithTargetUUIDQueryParameter(targetUUID *string) *CloudStoreCollectionGetParams {
	o.SetTargetUUIDQueryParameter(targetUUID)
	return o
}

// SetTargetUUIDQueryParameter adds the targetUuid to the cloud store collection get params
func (o *CloudStoreCollectionGetParams) SetTargetUUIDQueryParameter(targetUUID *string) {
	o.TargetUUIDQueryParameter = targetUUID
}

// WithUnavailableReasonMessageQueryParameter adds the unavailableReasonMessage to the cloud store collection get params
func (o *CloudStoreCollectionGetParams) WithUnavailableReasonMessageQueryParameter(unavailableReasonMessage *string) *CloudStoreCollectionGetParams {
	o.SetUnavailableReasonMessageQueryParameter(unavailableReasonMessage)
	return o
}

// SetUnavailableReasonMessageQueryParameter adds the unavailableReasonMessage to the cloud store collection get params
func (o *CloudStoreCollectionGetParams) SetUnavailableReasonMessageQueryParameter(unavailableReasonMessage *string) {
	o.UnavailableReasonMessageQueryParameter = unavailableReasonMessage
}

// WithUnreclaimedSpaceThresholdQueryParameter adds the unreclaimedSpaceThreshold to the cloud store collection get params
func (o *CloudStoreCollectionGetParams) WithUnreclaimedSpaceThresholdQueryParameter(unreclaimedSpaceThreshold *int64) *CloudStoreCollectionGetParams {
	o.SetUnreclaimedSpaceThresholdQueryParameter(unreclaimedSpaceThreshold)
	return o
}

// SetUnreclaimedSpaceThresholdQueryParameter adds the unreclaimedSpaceThreshold to the cloud store collection get params
func (o *CloudStoreCollectionGetParams) SetUnreclaimedSpaceThresholdQueryParameter(unreclaimedSpaceThreshold *int64) {
	o.UnreclaimedSpaceThresholdQueryParameter = unreclaimedSpaceThreshold
}

// WithUsedQueryParameter adds the used to the cloud store collection get params
func (o *CloudStoreCollectionGetParams) WithUsedQueryParameter(used *int64) *CloudStoreCollectionGetParams {
	o.SetUsedQueryParameter(used)
	return o
}

// SetUsedQueryParameter adds the used to the cloud store collection get params
func (o *CloudStoreCollectionGetParams) SetUsedQueryParameter(used *int64) {
	o.UsedQueryParameter = used
}

// WriteToRequest writes these params to a swagger request
func (o *CloudStoreCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AggregateNameQueryParameter != nil {

		// query param aggregate.name
		var qrAggregateName string

		if o.AggregateNameQueryParameter != nil {
			qrAggregateName = *o.AggregateNameQueryParameter
		}
		qAggregateName := qrAggregateName
		if qAggregateName != "" {

			if err := r.SetQueryParam("aggregate.name", qAggregateName); err != nil {
				return err
			}
		}
	}

	// path param aggregate.uuid
	if err := r.SetPathParam("aggregate.uuid", o.AggregateUUIDPathParameter); err != nil {
		return err
	}

	if o.AvailabilityQueryParameter != nil {

		// query param availability
		var qrAvailability string

		if o.AvailabilityQueryParameter != nil {
			qrAvailability = *o.AvailabilityQueryParameter
		}
		qAvailability := qrAvailability
		if qAvailability != "" {

			if err := r.SetQueryParam("availability", qAvailability); err != nil {
				return err
			}
		}
	}

	if o.FieldsQueryParameter != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.MaxRecordsQueryParameter != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecordsQueryParameter != nil {
			qrMaxRecords = *o.MaxRecordsQueryParameter
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.MirrorDegradedQueryParameter != nil {

		// query param mirror_degraded
		var qrMirrorDegraded bool

		if o.MirrorDegradedQueryParameter != nil {
			qrMirrorDegraded = *o.MirrorDegradedQueryParameter
		}
		qMirrorDegraded := swag.FormatBool(qrMirrorDegraded)
		if qMirrorDegraded != "" {

			if err := r.SetQueryParam("mirror_degraded", qMirrorDegraded); err != nil {
				return err
			}
		}
	}

	if o.OrderByQueryParameter != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.PrimaryQueryParameter != nil {

		// query param primary
		var qrPrimary bool

		if o.PrimaryQueryParameter != nil {
			qrPrimary = *o.PrimaryQueryParameter
		}
		qPrimary := swag.FormatBool(qrPrimary)
		if qPrimary != "" {

			if err := r.SetQueryParam("primary", qPrimary); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecordsQueryParameter != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecordsQueryParameter != nil {
			qrReturnRecords = *o.ReturnRecordsQueryParameter
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeoutQueryParameter != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeoutQueryParameter != nil {
			qrReturnTimeout = *o.ReturnTimeoutQueryParameter
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.TargetNameQueryParameter != nil {

		// query param target.name
		var qrTargetName string

		if o.TargetNameQueryParameter != nil {
			qrTargetName = *o.TargetNameQueryParameter
		}
		qTargetName := qrTargetName
		if qTargetName != "" {

			if err := r.SetQueryParam("target.name", qTargetName); err != nil {
				return err
			}
		}
	}

	if o.TargetUUIDQueryParameter != nil {

		// query param target.uuid
		var qrTargetUUID string

		if o.TargetUUIDQueryParameter != nil {
			qrTargetUUID = *o.TargetUUIDQueryParameter
		}
		qTargetUUID := qrTargetUUID
		if qTargetUUID != "" {

			if err := r.SetQueryParam("target.uuid", qTargetUUID); err != nil {
				return err
			}
		}
	}

	if o.UnavailableReasonMessageQueryParameter != nil {

		// query param unavailable_reason.message
		var qrUnavailableReasonMessage string

		if o.UnavailableReasonMessageQueryParameter != nil {
			qrUnavailableReasonMessage = *o.UnavailableReasonMessageQueryParameter
		}
		qUnavailableReasonMessage := qrUnavailableReasonMessage
		if qUnavailableReasonMessage != "" {

			if err := r.SetQueryParam("unavailable_reason.message", qUnavailableReasonMessage); err != nil {
				return err
			}
		}
	}

	if o.UnreclaimedSpaceThresholdQueryParameter != nil {

		// query param unreclaimed_space_threshold
		var qrUnreclaimedSpaceThreshold int64

		if o.UnreclaimedSpaceThresholdQueryParameter != nil {
			qrUnreclaimedSpaceThreshold = *o.UnreclaimedSpaceThresholdQueryParameter
		}
		qUnreclaimedSpaceThreshold := swag.FormatInt64(qrUnreclaimedSpaceThreshold)
		if qUnreclaimedSpaceThreshold != "" {

			if err := r.SetQueryParam("unreclaimed_space_threshold", qUnreclaimedSpaceThreshold); err != nil {
				return err
			}
		}
	}

	if o.UsedQueryParameter != nil {

		// query param used
		var qrUsed int64

		if o.UsedQueryParameter != nil {
			qrUsed = *o.UsedQueryParameter
		}
		qUsed := swag.FormatInt64(qrUsed)
		if qUsed != "" {

			if err := r.SetQueryParam("used", qUsed); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamCloudStoreCollectionGet binds the parameter fields
func (o *CloudStoreCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.FieldsQueryParameter

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamCloudStoreCollectionGet binds the parameter order_by
func (o *CloudStoreCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderByQueryParameter

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
