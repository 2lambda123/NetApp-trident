// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewShelfCollectionGetParams creates a new ShelfCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewShelfCollectionGetParams() *ShelfCollectionGetParams {
	return &ShelfCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewShelfCollectionGetParamsWithTimeout creates a new ShelfCollectionGetParams object
// with the ability to set a timeout on a request.
func NewShelfCollectionGetParamsWithTimeout(timeout time.Duration) *ShelfCollectionGetParams {
	return &ShelfCollectionGetParams{
		timeout: timeout,
	}
}

// NewShelfCollectionGetParamsWithContext creates a new ShelfCollectionGetParams object
// with the ability to set a context for a request.
func NewShelfCollectionGetParamsWithContext(ctx context.Context) *ShelfCollectionGetParams {
	return &ShelfCollectionGetParams{
		Context: ctx,
	}
}

// NewShelfCollectionGetParamsWithHTTPClient creates a new ShelfCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewShelfCollectionGetParamsWithHTTPClient(client *http.Client) *ShelfCollectionGetParams {
	return &ShelfCollectionGetParams{
		HTTPClient: client,
	}
}

/* ShelfCollectionGetParams contains all the parameters to send to the API endpoint
   for the shelf collection get operation.

   Typically these are written to a http.Request.
*/
type ShelfCollectionGetParams struct {

	/* BaysHasDisk.

	   Filter by bays.has_disk
	*/
	BaysHasDiskQueryParameter *bool

	/* BaysID.

	   Filter by bays.id
	*/
	BaysIDQueryParameter *int64

	/* BaysState.

	   Filter by bays.state
	*/
	BaysStateQueryParameter *string

	/* BaysType.

	   Filter by bays.type
	*/
	BaysTypeQueryParameter *string

	/* ConnectionType.

	   Filter by connection_type
	*/
	ConnectionTypeQueryParameter *string

	/* DiskCount.

	   Filter by disk_count
	*/
	DiskCountQueryParameter *int64

	/* DrawersClosed.

	   Filter by drawers.closed
	*/
	DrawersClosedQueryParameter *bool

	/* DrawersDiskCount.

	   Filter by drawers.disk_count
	*/
	DrawersDiskCountQueryParameter *int64

	/* DrawersError.

	   Filter by drawers.error
	*/
	DrawersErrorQueryParameter *string

	/* DrawersID.

	   Filter by drawers.id
	*/
	DrawersIDQueryParameter *int64

	/* DrawersPartNumber.

	   Filter by drawers.part_number
	*/
	DrawersPartNumberQueryParameter *string

	/* DrawersSerialNumber.

	   Filter by drawers.serial_number
	*/
	DrawersSerialNumberQueryParameter *string

	/* DrawersState.

	   Filter by drawers.state
	*/
	DrawersStateQueryParameter *string

	/* Fields.

	   Specify the fields to return.
	*/
	Fields []string

	/* FrusFirmwareVersion.

	   Filter by frus.firmware_version
	*/
	FrusFirmwareVersionQueryParameter *string

	/* FrusID.

	   Filter by frus.id
	*/
	FrusIDQueryParameter *int64

	/* FrusPartNumber.

	   Filter by frus.part_number
	*/
	FrusPartNumberQueryParameter *string

	/* FrusSerialNumber.

	   Filter by frus.serial_number
	*/
	FrusSerialNumberQueryParameter *string

	/* FrusState.

	   Filter by frus.state
	*/
	FrusStateQueryParameter *string

	/* FrusType.

	   Filter by frus.type
	*/
	FrusTypeQueryParameter *string

	/* ID.

	   Filter by id
	*/
	IDQueryParameter *string

	/* Internal.

	   Filter by internal
	*/
	InternalQueryParameter *bool

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecords *int64

	/* Model.

	   Filter by model
	*/
	ModelQueryParameter *string

	/* ModuleType.

	   Filter by module_type
	*/
	ModuleTypeQueryParameter *string

	/* Name.

	   Filter by name
	*/
	NameQueryParameter *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderBy []string

	/* PathsName.

	   Filter by paths.name
	*/
	PathsNameQueryParameter *string

	/* PathsNodeName.

	   Filter by paths.node.name
	*/
	PathsNodeNameQueryParameter *string

	/* PathsNodeUUID.

	   Filter by paths.node.uuid
	*/
	PathsNodeUUIDQueryParameter *string

	/* PortsCableIdentifier.

	   Filter by ports.cable.identifier
	*/
	PortsCableIDentifierQueryParameter *string

	/* PortsCableLength.

	   Filter by ports.cable.length
	*/
	PortsCableLengthQueryParameter *string

	/* PortsCablePartNumber.

	   Filter by ports.cable.part_number
	*/
	PortsCablePartNumberQueryParameter *string

	/* PortsCableSerialNumber.

	   Filter by ports.cable.serial_number
	*/
	PortsCableSerialNumberQueryParameter *string

	/* PortsDesignator.

	   Filter by ports.designator
	*/
	PortsDesignatorQueryParameter *string

	/* PortsID.

	   Filter by ports.id
	*/
	PortsIDQueryParameter *int64

	/* PortsInternal.

	   Filter by ports.internal
	*/
	PortsInternalQueryParameter *bool

	/* PortsMacAddress.

	   Filter by ports.mac_address
	*/
	PortsMacAddressQueryParameter *string

	/* PortsModuleID.

	   Filter by ports.module_id
	*/
	PortsModuleIDQueryParameter *string

	/* PortsRemoteChassis.

	   Filter by ports.remote.chassis
	*/
	PortsRemoteChassisQueryParameter *string

	/* PortsRemoteMacAddress.

	   Filter by ports.remote.mac_address
	*/
	PortsRemoteMacAddressQueryParameter *string

	/* PortsRemotePhy.

	   Filter by ports.remote.phy
	*/
	PortsRemotePhyQueryParameter *string

	/* PortsRemotePort.

	   Filter by ports.remote.port
	*/
	PortsRemotePortQueryParameter *string

	/* PortsRemoteWwn.

	   Filter by ports.remote.wwn
	*/
	PortsRemoteWwnQueryParameter *string

	/* PortsState.

	   Filter by ports.state
	*/
	PortsStateQueryParameter *string

	/* PortsWwn.

	   Filter by ports.wwn
	*/
	PortsWwnQueryParameter *string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecords *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeout *int64

	/* SerialNumber.

	   Filter by serial_number
	*/
	SerialNumberQueryParameter *string

	/* State.

	   Filter by state
	*/
	StateQueryParameter *string

	/* UID.

	   Filter by uid
	*/
	UIDQueryParameter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the shelf collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ShelfCollectionGetParams) WithDefaults() *ShelfCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the shelf collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ShelfCollectionGetParams) SetDefaults() {
	var (
		returnRecordsDefault = bool(true)

		returnTimeoutDefault = int64(15)
	)

	val := ShelfCollectionGetParams{
		ReturnRecords: &returnRecordsDefault,
		ReturnTimeout: &returnTimeoutDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the shelf collection get params
func (o *ShelfCollectionGetParams) WithTimeout(timeout time.Duration) *ShelfCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the shelf collection get params
func (o *ShelfCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the shelf collection get params
func (o *ShelfCollectionGetParams) WithContext(ctx context.Context) *ShelfCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the shelf collection get params
func (o *ShelfCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the shelf collection get params
func (o *ShelfCollectionGetParams) WithHTTPClient(client *http.Client) *ShelfCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the shelf collection get params
func (o *ShelfCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBaysHasDiskQueryParameter adds the baysHasDisk to the shelf collection get params
func (o *ShelfCollectionGetParams) WithBaysHasDiskQueryParameter(baysHasDisk *bool) *ShelfCollectionGetParams {
	o.SetBaysHasDiskQueryParameter(baysHasDisk)
	return o
}

// SetBaysHasDiskQueryParameter adds the baysHasDisk to the shelf collection get params
func (o *ShelfCollectionGetParams) SetBaysHasDiskQueryParameter(baysHasDisk *bool) {
	o.BaysHasDiskQueryParameter = baysHasDisk
}

// WithBaysIDQueryParameter adds the baysID to the shelf collection get params
func (o *ShelfCollectionGetParams) WithBaysIDQueryParameter(baysID *int64) *ShelfCollectionGetParams {
	o.SetBaysIDQueryParameter(baysID)
	return o
}

// SetBaysIDQueryParameter adds the baysId to the shelf collection get params
func (o *ShelfCollectionGetParams) SetBaysIDQueryParameter(baysID *int64) {
	o.BaysIDQueryParameter = baysID
}

// WithBaysStateQueryParameter adds the baysState to the shelf collection get params
func (o *ShelfCollectionGetParams) WithBaysStateQueryParameter(baysState *string) *ShelfCollectionGetParams {
	o.SetBaysStateQueryParameter(baysState)
	return o
}

// SetBaysStateQueryParameter adds the baysState to the shelf collection get params
func (o *ShelfCollectionGetParams) SetBaysStateQueryParameter(baysState *string) {
	o.BaysStateQueryParameter = baysState
}

// WithBaysTypeQueryParameter adds the baysType to the shelf collection get params
func (o *ShelfCollectionGetParams) WithBaysTypeQueryParameter(baysType *string) *ShelfCollectionGetParams {
	o.SetBaysTypeQueryParameter(baysType)
	return o
}

// SetBaysTypeQueryParameter adds the baysType to the shelf collection get params
func (o *ShelfCollectionGetParams) SetBaysTypeQueryParameter(baysType *string) {
	o.BaysTypeQueryParameter = baysType
}

// WithConnectionTypeQueryParameter adds the connectionType to the shelf collection get params
func (o *ShelfCollectionGetParams) WithConnectionTypeQueryParameter(connectionType *string) *ShelfCollectionGetParams {
	o.SetConnectionTypeQueryParameter(connectionType)
	return o
}

// SetConnectionTypeQueryParameter adds the connectionType to the shelf collection get params
func (o *ShelfCollectionGetParams) SetConnectionTypeQueryParameter(connectionType *string) {
	o.ConnectionTypeQueryParameter = connectionType
}

// WithDiskCountQueryParameter adds the diskCount to the shelf collection get params
func (o *ShelfCollectionGetParams) WithDiskCountQueryParameter(diskCount *int64) *ShelfCollectionGetParams {
	o.SetDiskCountQueryParameter(diskCount)
	return o
}

// SetDiskCountQueryParameter adds the diskCount to the shelf collection get params
func (o *ShelfCollectionGetParams) SetDiskCountQueryParameter(diskCount *int64) {
	o.DiskCountQueryParameter = diskCount
}

// WithDrawersClosedQueryParameter adds the drawersClosed to the shelf collection get params
func (o *ShelfCollectionGetParams) WithDrawersClosedQueryParameter(drawersClosed *bool) *ShelfCollectionGetParams {
	o.SetDrawersClosedQueryParameter(drawersClosed)
	return o
}

// SetDrawersClosedQueryParameter adds the drawersClosed to the shelf collection get params
func (o *ShelfCollectionGetParams) SetDrawersClosedQueryParameter(drawersClosed *bool) {
	o.DrawersClosedQueryParameter = drawersClosed
}

// WithDrawersDiskCountQueryParameter adds the drawersDiskCount to the shelf collection get params
func (o *ShelfCollectionGetParams) WithDrawersDiskCountQueryParameter(drawersDiskCount *int64) *ShelfCollectionGetParams {
	o.SetDrawersDiskCountQueryParameter(drawersDiskCount)
	return o
}

// SetDrawersDiskCountQueryParameter adds the drawersDiskCount to the shelf collection get params
func (o *ShelfCollectionGetParams) SetDrawersDiskCountQueryParameter(drawersDiskCount *int64) {
	o.DrawersDiskCountQueryParameter = drawersDiskCount
}

// WithDrawersErrorQueryParameter adds the drawersError to the shelf collection get params
func (o *ShelfCollectionGetParams) WithDrawersErrorQueryParameter(drawersError *string) *ShelfCollectionGetParams {
	o.SetDrawersErrorQueryParameter(drawersError)
	return o
}

// SetDrawersErrorQueryParameter adds the drawersError to the shelf collection get params
func (o *ShelfCollectionGetParams) SetDrawersErrorQueryParameter(drawersError *string) {
	o.DrawersErrorQueryParameter = drawersError
}

// WithDrawersIDQueryParameter adds the drawersID to the shelf collection get params
func (o *ShelfCollectionGetParams) WithDrawersIDQueryParameter(drawersID *int64) *ShelfCollectionGetParams {
	o.SetDrawersIDQueryParameter(drawersID)
	return o
}

// SetDrawersIDQueryParameter adds the drawersId to the shelf collection get params
func (o *ShelfCollectionGetParams) SetDrawersIDQueryParameter(drawersID *int64) {
	o.DrawersIDQueryParameter = drawersID
}

// WithDrawersPartNumberQueryParameter adds the drawersPartNumber to the shelf collection get params
func (o *ShelfCollectionGetParams) WithDrawersPartNumberQueryParameter(drawersPartNumber *string) *ShelfCollectionGetParams {
	o.SetDrawersPartNumberQueryParameter(drawersPartNumber)
	return o
}

// SetDrawersPartNumberQueryParameter adds the drawersPartNumber to the shelf collection get params
func (o *ShelfCollectionGetParams) SetDrawersPartNumberQueryParameter(drawersPartNumber *string) {
	o.DrawersPartNumberQueryParameter = drawersPartNumber
}

// WithDrawersSerialNumberQueryParameter adds the drawersSerialNumber to the shelf collection get params
func (o *ShelfCollectionGetParams) WithDrawersSerialNumberQueryParameter(drawersSerialNumber *string) *ShelfCollectionGetParams {
	o.SetDrawersSerialNumberQueryParameter(drawersSerialNumber)
	return o
}

// SetDrawersSerialNumberQueryParameter adds the drawersSerialNumber to the shelf collection get params
func (o *ShelfCollectionGetParams) SetDrawersSerialNumberQueryParameter(drawersSerialNumber *string) {
	o.DrawersSerialNumberQueryParameter = drawersSerialNumber
}

// WithDrawersStateQueryParameter adds the drawersState to the shelf collection get params
func (o *ShelfCollectionGetParams) WithDrawersStateQueryParameter(drawersState *string) *ShelfCollectionGetParams {
	o.SetDrawersStateQueryParameter(drawersState)
	return o
}

// SetDrawersStateQueryParameter adds the drawersState to the shelf collection get params
func (o *ShelfCollectionGetParams) SetDrawersStateQueryParameter(drawersState *string) {
	o.DrawersStateQueryParameter = drawersState
}

// WithFields adds the fields to the shelf collection get params
func (o *ShelfCollectionGetParams) WithFields(fields []string) *ShelfCollectionGetParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the shelf collection get params
func (o *ShelfCollectionGetParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithFrusFirmwareVersionQueryParameter adds the frusFirmwareVersion to the shelf collection get params
func (o *ShelfCollectionGetParams) WithFrusFirmwareVersionQueryParameter(frusFirmwareVersion *string) *ShelfCollectionGetParams {
	o.SetFrusFirmwareVersionQueryParameter(frusFirmwareVersion)
	return o
}

// SetFrusFirmwareVersionQueryParameter adds the frusFirmwareVersion to the shelf collection get params
func (o *ShelfCollectionGetParams) SetFrusFirmwareVersionQueryParameter(frusFirmwareVersion *string) {
	o.FrusFirmwareVersionQueryParameter = frusFirmwareVersion
}

// WithFrusIDQueryParameter adds the frusID to the shelf collection get params
func (o *ShelfCollectionGetParams) WithFrusIDQueryParameter(frusID *int64) *ShelfCollectionGetParams {
	o.SetFrusIDQueryParameter(frusID)
	return o
}

// SetFrusIDQueryParameter adds the frusId to the shelf collection get params
func (o *ShelfCollectionGetParams) SetFrusIDQueryParameter(frusID *int64) {
	o.FrusIDQueryParameter = frusID
}

// WithFrusPartNumberQueryParameter adds the frusPartNumber to the shelf collection get params
func (o *ShelfCollectionGetParams) WithFrusPartNumberQueryParameter(frusPartNumber *string) *ShelfCollectionGetParams {
	o.SetFrusPartNumberQueryParameter(frusPartNumber)
	return o
}

// SetFrusPartNumberQueryParameter adds the frusPartNumber to the shelf collection get params
func (o *ShelfCollectionGetParams) SetFrusPartNumberQueryParameter(frusPartNumber *string) {
	o.FrusPartNumberQueryParameter = frusPartNumber
}

// WithFrusSerialNumberQueryParameter adds the frusSerialNumber to the shelf collection get params
func (o *ShelfCollectionGetParams) WithFrusSerialNumberQueryParameter(frusSerialNumber *string) *ShelfCollectionGetParams {
	o.SetFrusSerialNumberQueryParameter(frusSerialNumber)
	return o
}

// SetFrusSerialNumberQueryParameter adds the frusSerialNumber to the shelf collection get params
func (o *ShelfCollectionGetParams) SetFrusSerialNumberQueryParameter(frusSerialNumber *string) {
	o.FrusSerialNumberQueryParameter = frusSerialNumber
}

// WithFrusStateQueryParameter adds the frusState to the shelf collection get params
func (o *ShelfCollectionGetParams) WithFrusStateQueryParameter(frusState *string) *ShelfCollectionGetParams {
	o.SetFrusStateQueryParameter(frusState)
	return o
}

// SetFrusStateQueryParameter adds the frusState to the shelf collection get params
func (o *ShelfCollectionGetParams) SetFrusStateQueryParameter(frusState *string) {
	o.FrusStateQueryParameter = frusState
}

// WithFrusTypeQueryParameter adds the frusType to the shelf collection get params
func (o *ShelfCollectionGetParams) WithFrusTypeQueryParameter(frusType *string) *ShelfCollectionGetParams {
	o.SetFrusTypeQueryParameter(frusType)
	return o
}

// SetFrusTypeQueryParameter adds the frusType to the shelf collection get params
func (o *ShelfCollectionGetParams) SetFrusTypeQueryParameter(frusType *string) {
	o.FrusTypeQueryParameter = frusType
}

// WithIDQueryParameter adds the id to the shelf collection get params
func (o *ShelfCollectionGetParams) WithIDQueryParameter(id *string) *ShelfCollectionGetParams {
	o.SetIDQueryParameter(id)
	return o
}

// SetIDQueryParameter adds the id to the shelf collection get params
func (o *ShelfCollectionGetParams) SetIDQueryParameter(id *string) {
	o.IDQueryParameter = id
}

// WithInternalQueryParameter adds the internal to the shelf collection get params
func (o *ShelfCollectionGetParams) WithInternalQueryParameter(internal *bool) *ShelfCollectionGetParams {
	o.SetInternalQueryParameter(internal)
	return o
}

// SetInternalQueryParameter adds the internal to the shelf collection get params
func (o *ShelfCollectionGetParams) SetInternalQueryParameter(internal *bool) {
	o.InternalQueryParameter = internal
}

// WithMaxRecords adds the maxRecords to the shelf collection get params
func (o *ShelfCollectionGetParams) WithMaxRecords(maxRecords *int64) *ShelfCollectionGetParams {
	o.SetMaxRecords(maxRecords)
	return o
}

// SetMaxRecords adds the maxRecords to the shelf collection get params
func (o *ShelfCollectionGetParams) SetMaxRecords(maxRecords *int64) {
	o.MaxRecords = maxRecords
}

// WithModelQueryParameter adds the model to the shelf collection get params
func (o *ShelfCollectionGetParams) WithModelQueryParameter(model *string) *ShelfCollectionGetParams {
	o.SetModelQueryParameter(model)
	return o
}

// SetModelQueryParameter adds the model to the shelf collection get params
func (o *ShelfCollectionGetParams) SetModelQueryParameter(model *string) {
	o.ModelQueryParameter = model
}

// WithModuleTypeQueryParameter adds the moduleType to the shelf collection get params
func (o *ShelfCollectionGetParams) WithModuleTypeQueryParameter(moduleType *string) *ShelfCollectionGetParams {
	o.SetModuleTypeQueryParameter(moduleType)
	return o
}

// SetModuleTypeQueryParameter adds the moduleType to the shelf collection get params
func (o *ShelfCollectionGetParams) SetModuleTypeQueryParameter(moduleType *string) {
	o.ModuleTypeQueryParameter = moduleType
}

// WithNameQueryParameter adds the name to the shelf collection get params
func (o *ShelfCollectionGetParams) WithNameQueryParameter(name *string) *ShelfCollectionGetParams {
	o.SetNameQueryParameter(name)
	return o
}

// SetNameQueryParameter adds the name to the shelf collection get params
func (o *ShelfCollectionGetParams) SetNameQueryParameter(name *string) {
	o.NameQueryParameter = name
}

// WithOrderBy adds the orderBy to the shelf collection get params
func (o *ShelfCollectionGetParams) WithOrderBy(orderBy []string) *ShelfCollectionGetParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the shelf collection get params
func (o *ShelfCollectionGetParams) SetOrderBy(orderBy []string) {
	o.OrderBy = orderBy
}

// WithPathsNameQueryParameter adds the pathsName to the shelf collection get params
func (o *ShelfCollectionGetParams) WithPathsNameQueryParameter(pathsName *string) *ShelfCollectionGetParams {
	o.SetPathsNameQueryParameter(pathsName)
	return o
}

// SetPathsNameQueryParameter adds the pathsName to the shelf collection get params
func (o *ShelfCollectionGetParams) SetPathsNameQueryParameter(pathsName *string) {
	o.PathsNameQueryParameter = pathsName
}

// WithPathsNodeNameQueryParameter adds the pathsNodeName to the shelf collection get params
func (o *ShelfCollectionGetParams) WithPathsNodeNameQueryParameter(pathsNodeName *string) *ShelfCollectionGetParams {
	o.SetPathsNodeNameQueryParameter(pathsNodeName)
	return o
}

// SetPathsNodeNameQueryParameter adds the pathsNodeName to the shelf collection get params
func (o *ShelfCollectionGetParams) SetPathsNodeNameQueryParameter(pathsNodeName *string) {
	o.PathsNodeNameQueryParameter = pathsNodeName
}

// WithPathsNodeUUIDQueryParameter adds the pathsNodeUUID to the shelf collection get params
func (o *ShelfCollectionGetParams) WithPathsNodeUUIDQueryParameter(pathsNodeUUID *string) *ShelfCollectionGetParams {
	o.SetPathsNodeUUIDQueryParameter(pathsNodeUUID)
	return o
}

// SetPathsNodeUUIDQueryParameter adds the pathsNodeUuid to the shelf collection get params
func (o *ShelfCollectionGetParams) SetPathsNodeUUIDQueryParameter(pathsNodeUUID *string) {
	o.PathsNodeUUIDQueryParameter = pathsNodeUUID
}

// WithPortsCableIDentifierQueryParameter adds the portsCableIdentifier to the shelf collection get params
func (o *ShelfCollectionGetParams) WithPortsCableIDentifierQueryParameter(portsCableIdentifier *string) *ShelfCollectionGetParams {
	o.SetPortsCableIDentifierQueryParameter(portsCableIdentifier)
	return o
}

// SetPortsCableIDentifierQueryParameter adds the portsCableIdentifier to the shelf collection get params
func (o *ShelfCollectionGetParams) SetPortsCableIDentifierQueryParameter(portsCableIdentifier *string) {
	o.PortsCableIDentifierQueryParameter = portsCableIdentifier
}

// WithPortsCableLengthQueryParameter adds the portsCableLength to the shelf collection get params
func (o *ShelfCollectionGetParams) WithPortsCableLengthQueryParameter(portsCableLength *string) *ShelfCollectionGetParams {
	o.SetPortsCableLengthQueryParameter(portsCableLength)
	return o
}

// SetPortsCableLengthQueryParameter adds the portsCableLength to the shelf collection get params
func (o *ShelfCollectionGetParams) SetPortsCableLengthQueryParameter(portsCableLength *string) {
	o.PortsCableLengthQueryParameter = portsCableLength
}

// WithPortsCablePartNumberQueryParameter adds the portsCablePartNumber to the shelf collection get params
func (o *ShelfCollectionGetParams) WithPortsCablePartNumberQueryParameter(portsCablePartNumber *string) *ShelfCollectionGetParams {
	o.SetPortsCablePartNumberQueryParameter(portsCablePartNumber)
	return o
}

// SetPortsCablePartNumberQueryParameter adds the portsCablePartNumber to the shelf collection get params
func (o *ShelfCollectionGetParams) SetPortsCablePartNumberQueryParameter(portsCablePartNumber *string) {
	o.PortsCablePartNumberQueryParameter = portsCablePartNumber
}

// WithPortsCableSerialNumberQueryParameter adds the portsCableSerialNumber to the shelf collection get params
func (o *ShelfCollectionGetParams) WithPortsCableSerialNumberQueryParameter(portsCableSerialNumber *string) *ShelfCollectionGetParams {
	o.SetPortsCableSerialNumberQueryParameter(portsCableSerialNumber)
	return o
}

// SetPortsCableSerialNumberQueryParameter adds the portsCableSerialNumber to the shelf collection get params
func (o *ShelfCollectionGetParams) SetPortsCableSerialNumberQueryParameter(portsCableSerialNumber *string) {
	o.PortsCableSerialNumberQueryParameter = portsCableSerialNumber
}

// WithPortsDesignatorQueryParameter adds the portsDesignator to the shelf collection get params
func (o *ShelfCollectionGetParams) WithPortsDesignatorQueryParameter(portsDesignator *string) *ShelfCollectionGetParams {
	o.SetPortsDesignatorQueryParameter(portsDesignator)
	return o
}

// SetPortsDesignatorQueryParameter adds the portsDesignator to the shelf collection get params
func (o *ShelfCollectionGetParams) SetPortsDesignatorQueryParameter(portsDesignator *string) {
	o.PortsDesignatorQueryParameter = portsDesignator
}

// WithPortsIDQueryParameter adds the portsID to the shelf collection get params
func (o *ShelfCollectionGetParams) WithPortsIDQueryParameter(portsID *int64) *ShelfCollectionGetParams {
	o.SetPortsIDQueryParameter(portsID)
	return o
}

// SetPortsIDQueryParameter adds the portsId to the shelf collection get params
func (o *ShelfCollectionGetParams) SetPortsIDQueryParameter(portsID *int64) {
	o.PortsIDQueryParameter = portsID
}

// WithPortsInternalQueryParameter adds the portsInternal to the shelf collection get params
func (o *ShelfCollectionGetParams) WithPortsInternalQueryParameter(portsInternal *bool) *ShelfCollectionGetParams {
	o.SetPortsInternalQueryParameter(portsInternal)
	return o
}

// SetPortsInternalQueryParameter adds the portsInternal to the shelf collection get params
func (o *ShelfCollectionGetParams) SetPortsInternalQueryParameter(portsInternal *bool) {
	o.PortsInternalQueryParameter = portsInternal
}

// WithPortsMacAddressQueryParameter adds the portsMacAddress to the shelf collection get params
func (o *ShelfCollectionGetParams) WithPortsMacAddressQueryParameter(portsMacAddress *string) *ShelfCollectionGetParams {
	o.SetPortsMacAddressQueryParameter(portsMacAddress)
	return o
}

// SetPortsMacAddressQueryParameter adds the portsMacAddress to the shelf collection get params
func (o *ShelfCollectionGetParams) SetPortsMacAddressQueryParameter(portsMacAddress *string) {
	o.PortsMacAddressQueryParameter = portsMacAddress
}

// WithPortsModuleIDQueryParameter adds the portsModuleID to the shelf collection get params
func (o *ShelfCollectionGetParams) WithPortsModuleIDQueryParameter(portsModuleID *string) *ShelfCollectionGetParams {
	o.SetPortsModuleIDQueryParameter(portsModuleID)
	return o
}

// SetPortsModuleIDQueryParameter adds the portsModuleId to the shelf collection get params
func (o *ShelfCollectionGetParams) SetPortsModuleIDQueryParameter(portsModuleID *string) {
	o.PortsModuleIDQueryParameter = portsModuleID
}

// WithPortsRemoteChassisQueryParameter adds the portsRemoteChassis to the shelf collection get params
func (o *ShelfCollectionGetParams) WithPortsRemoteChassisQueryParameter(portsRemoteChassis *string) *ShelfCollectionGetParams {
	o.SetPortsRemoteChassisQueryParameter(portsRemoteChassis)
	return o
}

// SetPortsRemoteChassisQueryParameter adds the portsRemoteChassis to the shelf collection get params
func (o *ShelfCollectionGetParams) SetPortsRemoteChassisQueryParameter(portsRemoteChassis *string) {
	o.PortsRemoteChassisQueryParameter = portsRemoteChassis
}

// WithPortsRemoteMacAddressQueryParameter adds the portsRemoteMacAddress to the shelf collection get params
func (o *ShelfCollectionGetParams) WithPortsRemoteMacAddressQueryParameter(portsRemoteMacAddress *string) *ShelfCollectionGetParams {
	o.SetPortsRemoteMacAddressQueryParameter(portsRemoteMacAddress)
	return o
}

// SetPortsRemoteMacAddressQueryParameter adds the portsRemoteMacAddress to the shelf collection get params
func (o *ShelfCollectionGetParams) SetPortsRemoteMacAddressQueryParameter(portsRemoteMacAddress *string) {
	o.PortsRemoteMacAddressQueryParameter = portsRemoteMacAddress
}

// WithPortsRemotePhyQueryParameter adds the portsRemotePhy to the shelf collection get params
func (o *ShelfCollectionGetParams) WithPortsRemotePhyQueryParameter(portsRemotePhy *string) *ShelfCollectionGetParams {
	o.SetPortsRemotePhyQueryParameter(portsRemotePhy)
	return o
}

// SetPortsRemotePhyQueryParameter adds the portsRemotePhy to the shelf collection get params
func (o *ShelfCollectionGetParams) SetPortsRemotePhyQueryParameter(portsRemotePhy *string) {
	o.PortsRemotePhyQueryParameter = portsRemotePhy
}

// WithPortsRemotePortQueryParameter adds the portsRemotePort to the shelf collection get params
func (o *ShelfCollectionGetParams) WithPortsRemotePortQueryParameter(portsRemotePort *string) *ShelfCollectionGetParams {
	o.SetPortsRemotePortQueryParameter(portsRemotePort)
	return o
}

// SetPortsRemotePortQueryParameter adds the portsRemotePort to the shelf collection get params
func (o *ShelfCollectionGetParams) SetPortsRemotePortQueryParameter(portsRemotePort *string) {
	o.PortsRemotePortQueryParameter = portsRemotePort
}

// WithPortsRemoteWwnQueryParameter adds the portsRemoteWwn to the shelf collection get params
func (o *ShelfCollectionGetParams) WithPortsRemoteWwnQueryParameter(portsRemoteWwn *string) *ShelfCollectionGetParams {
	o.SetPortsRemoteWwnQueryParameter(portsRemoteWwn)
	return o
}

// SetPortsRemoteWwnQueryParameter adds the portsRemoteWwn to the shelf collection get params
func (o *ShelfCollectionGetParams) SetPortsRemoteWwnQueryParameter(portsRemoteWwn *string) {
	o.PortsRemoteWwnQueryParameter = portsRemoteWwn
}

// WithPortsStateQueryParameter adds the portsState to the shelf collection get params
func (o *ShelfCollectionGetParams) WithPortsStateQueryParameter(portsState *string) *ShelfCollectionGetParams {
	o.SetPortsStateQueryParameter(portsState)
	return o
}

// SetPortsStateQueryParameter adds the portsState to the shelf collection get params
func (o *ShelfCollectionGetParams) SetPortsStateQueryParameter(portsState *string) {
	o.PortsStateQueryParameter = portsState
}

// WithPortsWwnQueryParameter adds the portsWwn to the shelf collection get params
func (o *ShelfCollectionGetParams) WithPortsWwnQueryParameter(portsWwn *string) *ShelfCollectionGetParams {
	o.SetPortsWwnQueryParameter(portsWwn)
	return o
}

// SetPortsWwnQueryParameter adds the portsWwn to the shelf collection get params
func (o *ShelfCollectionGetParams) SetPortsWwnQueryParameter(portsWwn *string) {
	o.PortsWwnQueryParameter = portsWwn
}

// WithReturnRecords adds the returnRecords to the shelf collection get params
func (o *ShelfCollectionGetParams) WithReturnRecords(returnRecords *bool) *ShelfCollectionGetParams {
	o.SetReturnRecords(returnRecords)
	return o
}

// SetReturnRecords adds the returnRecords to the shelf collection get params
func (o *ShelfCollectionGetParams) SetReturnRecords(returnRecords *bool) {
	o.ReturnRecords = returnRecords
}

// WithReturnTimeout adds the returnTimeout to the shelf collection get params
func (o *ShelfCollectionGetParams) WithReturnTimeout(returnTimeout *int64) *ShelfCollectionGetParams {
	o.SetReturnTimeout(returnTimeout)
	return o
}

// SetReturnTimeout adds the returnTimeout to the shelf collection get params
func (o *ShelfCollectionGetParams) SetReturnTimeout(returnTimeout *int64) {
	o.ReturnTimeout = returnTimeout
}

// WithSerialNumberQueryParameter adds the serialNumber to the shelf collection get params
func (o *ShelfCollectionGetParams) WithSerialNumberQueryParameter(serialNumber *string) *ShelfCollectionGetParams {
	o.SetSerialNumberQueryParameter(serialNumber)
	return o
}

// SetSerialNumberQueryParameter adds the serialNumber to the shelf collection get params
func (o *ShelfCollectionGetParams) SetSerialNumberQueryParameter(serialNumber *string) {
	o.SerialNumberQueryParameter = serialNumber
}

// WithStateQueryParameter adds the state to the shelf collection get params
func (o *ShelfCollectionGetParams) WithStateQueryParameter(state *string) *ShelfCollectionGetParams {
	o.SetStateQueryParameter(state)
	return o
}

// SetStateQueryParameter adds the state to the shelf collection get params
func (o *ShelfCollectionGetParams) SetStateQueryParameter(state *string) {
	o.StateQueryParameter = state
}

// WithUIDQueryParameter adds the uid to the shelf collection get params
func (o *ShelfCollectionGetParams) WithUIDQueryParameter(uid *string) *ShelfCollectionGetParams {
	o.SetUIDQueryParameter(uid)
	return o
}

// SetUIDQueryParameter adds the uid to the shelf collection get params
func (o *ShelfCollectionGetParams) SetUIDQueryParameter(uid *string) {
	o.UIDQueryParameter = uid
}

// WriteToRequest writes these params to a swagger request
func (o *ShelfCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.BaysHasDiskQueryParameter != nil {

		// query param bays.has_disk
		var qrBaysHasDisk bool

		if o.BaysHasDiskQueryParameter != nil {
			qrBaysHasDisk = *o.BaysHasDiskQueryParameter
		}
		qBaysHasDisk := swag.FormatBool(qrBaysHasDisk)
		if qBaysHasDisk != "" {

			if err := r.SetQueryParam("bays.has_disk", qBaysHasDisk); err != nil {
				return err
			}
		}
	}

	if o.BaysIDQueryParameter != nil {

		// query param bays.id
		var qrBaysID int64

		if o.BaysIDQueryParameter != nil {
			qrBaysID = *o.BaysIDQueryParameter
		}
		qBaysID := swag.FormatInt64(qrBaysID)
		if qBaysID != "" {

			if err := r.SetQueryParam("bays.id", qBaysID); err != nil {
				return err
			}
		}
	}

	if o.BaysStateQueryParameter != nil {

		// query param bays.state
		var qrBaysState string

		if o.BaysStateQueryParameter != nil {
			qrBaysState = *o.BaysStateQueryParameter
		}
		qBaysState := qrBaysState
		if qBaysState != "" {

			if err := r.SetQueryParam("bays.state", qBaysState); err != nil {
				return err
			}
		}
	}

	if o.BaysTypeQueryParameter != nil {

		// query param bays.type
		var qrBaysType string

		if o.BaysTypeQueryParameter != nil {
			qrBaysType = *o.BaysTypeQueryParameter
		}
		qBaysType := qrBaysType
		if qBaysType != "" {

			if err := r.SetQueryParam("bays.type", qBaysType); err != nil {
				return err
			}
		}
	}

	if o.ConnectionTypeQueryParameter != nil {

		// query param connection_type
		var qrConnectionType string

		if o.ConnectionTypeQueryParameter != nil {
			qrConnectionType = *o.ConnectionTypeQueryParameter
		}
		qConnectionType := qrConnectionType
		if qConnectionType != "" {

			if err := r.SetQueryParam("connection_type", qConnectionType); err != nil {
				return err
			}
		}
	}

	if o.DiskCountQueryParameter != nil {

		// query param disk_count
		var qrDiskCount int64

		if o.DiskCountQueryParameter != nil {
			qrDiskCount = *o.DiskCountQueryParameter
		}
		qDiskCount := swag.FormatInt64(qrDiskCount)
		if qDiskCount != "" {

			if err := r.SetQueryParam("disk_count", qDiskCount); err != nil {
				return err
			}
		}
	}

	if o.DrawersClosedQueryParameter != nil {

		// query param drawers.closed
		var qrDrawersClosed bool

		if o.DrawersClosedQueryParameter != nil {
			qrDrawersClosed = *o.DrawersClosedQueryParameter
		}
		qDrawersClosed := swag.FormatBool(qrDrawersClosed)
		if qDrawersClosed != "" {

			if err := r.SetQueryParam("drawers.closed", qDrawersClosed); err != nil {
				return err
			}
		}
	}

	if o.DrawersDiskCountQueryParameter != nil {

		// query param drawers.disk_count
		var qrDrawersDiskCount int64

		if o.DrawersDiskCountQueryParameter != nil {
			qrDrawersDiskCount = *o.DrawersDiskCountQueryParameter
		}
		qDrawersDiskCount := swag.FormatInt64(qrDrawersDiskCount)
		if qDrawersDiskCount != "" {

			if err := r.SetQueryParam("drawers.disk_count", qDrawersDiskCount); err != nil {
				return err
			}
		}
	}

	if o.DrawersErrorQueryParameter != nil {

		// query param drawers.error
		var qrDrawersError string

		if o.DrawersErrorQueryParameter != nil {
			qrDrawersError = *o.DrawersErrorQueryParameter
		}
		qDrawersError := qrDrawersError
		if qDrawersError != "" {

			if err := r.SetQueryParam("drawers.error", qDrawersError); err != nil {
				return err
			}
		}
	}

	if o.DrawersIDQueryParameter != nil {

		// query param drawers.id
		var qrDrawersID int64

		if o.DrawersIDQueryParameter != nil {
			qrDrawersID = *o.DrawersIDQueryParameter
		}
		qDrawersID := swag.FormatInt64(qrDrawersID)
		if qDrawersID != "" {

			if err := r.SetQueryParam("drawers.id", qDrawersID); err != nil {
				return err
			}
		}
	}

	if o.DrawersPartNumberQueryParameter != nil {

		// query param drawers.part_number
		var qrDrawersPartNumber string

		if o.DrawersPartNumberQueryParameter != nil {
			qrDrawersPartNumber = *o.DrawersPartNumberQueryParameter
		}
		qDrawersPartNumber := qrDrawersPartNumber
		if qDrawersPartNumber != "" {

			if err := r.SetQueryParam("drawers.part_number", qDrawersPartNumber); err != nil {
				return err
			}
		}
	}

	if o.DrawersSerialNumberQueryParameter != nil {

		// query param drawers.serial_number
		var qrDrawersSerialNumber string

		if o.DrawersSerialNumberQueryParameter != nil {
			qrDrawersSerialNumber = *o.DrawersSerialNumberQueryParameter
		}
		qDrawersSerialNumber := qrDrawersSerialNumber
		if qDrawersSerialNumber != "" {

			if err := r.SetQueryParam("drawers.serial_number", qDrawersSerialNumber); err != nil {
				return err
			}
		}
	}

	if o.DrawersStateQueryParameter != nil {

		// query param drawers.state
		var qrDrawersState string

		if o.DrawersStateQueryParameter != nil {
			qrDrawersState = *o.DrawersStateQueryParameter
		}
		qDrawersState := qrDrawersState
		if qDrawersState != "" {

			if err := r.SetQueryParam("drawers.state", qDrawersState); err != nil {
				return err
			}
		}
	}

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.FrusFirmwareVersionQueryParameter != nil {

		// query param frus.firmware_version
		var qrFrusFirmwareVersion string

		if o.FrusFirmwareVersionQueryParameter != nil {
			qrFrusFirmwareVersion = *o.FrusFirmwareVersionQueryParameter
		}
		qFrusFirmwareVersion := qrFrusFirmwareVersion
		if qFrusFirmwareVersion != "" {

			if err := r.SetQueryParam("frus.firmware_version", qFrusFirmwareVersion); err != nil {
				return err
			}
		}
	}

	if o.FrusIDQueryParameter != nil {

		// query param frus.id
		var qrFrusID int64

		if o.FrusIDQueryParameter != nil {
			qrFrusID = *o.FrusIDQueryParameter
		}
		qFrusID := swag.FormatInt64(qrFrusID)
		if qFrusID != "" {

			if err := r.SetQueryParam("frus.id", qFrusID); err != nil {
				return err
			}
		}
	}

	if o.FrusPartNumberQueryParameter != nil {

		// query param frus.part_number
		var qrFrusPartNumber string

		if o.FrusPartNumberQueryParameter != nil {
			qrFrusPartNumber = *o.FrusPartNumberQueryParameter
		}
		qFrusPartNumber := qrFrusPartNumber
		if qFrusPartNumber != "" {

			if err := r.SetQueryParam("frus.part_number", qFrusPartNumber); err != nil {
				return err
			}
		}
	}

	if o.FrusSerialNumberQueryParameter != nil {

		// query param frus.serial_number
		var qrFrusSerialNumber string

		if o.FrusSerialNumberQueryParameter != nil {
			qrFrusSerialNumber = *o.FrusSerialNumberQueryParameter
		}
		qFrusSerialNumber := qrFrusSerialNumber
		if qFrusSerialNumber != "" {

			if err := r.SetQueryParam("frus.serial_number", qFrusSerialNumber); err != nil {
				return err
			}
		}
	}

	if o.FrusStateQueryParameter != nil {

		// query param frus.state
		var qrFrusState string

		if o.FrusStateQueryParameter != nil {
			qrFrusState = *o.FrusStateQueryParameter
		}
		qFrusState := qrFrusState
		if qFrusState != "" {

			if err := r.SetQueryParam("frus.state", qFrusState); err != nil {
				return err
			}
		}
	}

	if o.FrusTypeQueryParameter != nil {

		// query param frus.type
		var qrFrusType string

		if o.FrusTypeQueryParameter != nil {
			qrFrusType = *o.FrusTypeQueryParameter
		}
		qFrusType := qrFrusType
		if qFrusType != "" {

			if err := r.SetQueryParam("frus.type", qFrusType); err != nil {
				return err
			}
		}
	}

	if o.IDQueryParameter != nil {

		// query param id
		var qrID string

		if o.IDQueryParameter != nil {
			qrID = *o.IDQueryParameter
		}
		qID := qrID
		if qID != "" {

			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}
	}

	if o.InternalQueryParameter != nil {

		// query param internal
		var qrInternal bool

		if o.InternalQueryParameter != nil {
			qrInternal = *o.InternalQueryParameter
		}
		qInternal := swag.FormatBool(qrInternal)
		if qInternal != "" {

			if err := r.SetQueryParam("internal", qInternal); err != nil {
				return err
			}
		}
	}

	if o.MaxRecords != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecords != nil {
			qrMaxRecords = *o.MaxRecords
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.ModelQueryParameter != nil {

		// query param model
		var qrModel string

		if o.ModelQueryParameter != nil {
			qrModel = *o.ModelQueryParameter
		}
		qModel := qrModel
		if qModel != "" {

			if err := r.SetQueryParam("model", qModel); err != nil {
				return err
			}
		}
	}

	if o.ModuleTypeQueryParameter != nil {

		// query param module_type
		var qrModuleType string

		if o.ModuleTypeQueryParameter != nil {
			qrModuleType = *o.ModuleTypeQueryParameter
		}
		qModuleType := qrModuleType
		if qModuleType != "" {

			if err := r.SetQueryParam("module_type", qModuleType); err != nil {
				return err
			}
		}
	}

	if o.NameQueryParameter != nil {

		// query param name
		var qrName string

		if o.NameQueryParameter != nil {
			qrName = *o.NameQueryParameter
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.OrderBy != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.PathsNameQueryParameter != nil {

		// query param paths.name
		var qrPathsName string

		if o.PathsNameQueryParameter != nil {
			qrPathsName = *o.PathsNameQueryParameter
		}
		qPathsName := qrPathsName
		if qPathsName != "" {

			if err := r.SetQueryParam("paths.name", qPathsName); err != nil {
				return err
			}
		}
	}

	if o.PathsNodeNameQueryParameter != nil {

		// query param paths.node.name
		var qrPathsNodeName string

		if o.PathsNodeNameQueryParameter != nil {
			qrPathsNodeName = *o.PathsNodeNameQueryParameter
		}
		qPathsNodeName := qrPathsNodeName
		if qPathsNodeName != "" {

			if err := r.SetQueryParam("paths.node.name", qPathsNodeName); err != nil {
				return err
			}
		}
	}

	if o.PathsNodeUUIDQueryParameter != nil {

		// query param paths.node.uuid
		var qrPathsNodeUUID string

		if o.PathsNodeUUIDQueryParameter != nil {
			qrPathsNodeUUID = *o.PathsNodeUUIDQueryParameter
		}
		qPathsNodeUUID := qrPathsNodeUUID
		if qPathsNodeUUID != "" {

			if err := r.SetQueryParam("paths.node.uuid", qPathsNodeUUID); err != nil {
				return err
			}
		}
	}

	if o.PortsCableIDentifierQueryParameter != nil {

		// query param ports.cable.identifier
		var qrPortsCableIdentifier string

		if o.PortsCableIDentifierQueryParameter != nil {
			qrPortsCableIdentifier = *o.PortsCableIDentifierQueryParameter
		}
		qPortsCableIdentifier := qrPortsCableIdentifier
		if qPortsCableIdentifier != "" {

			if err := r.SetQueryParam("ports.cable.identifier", qPortsCableIdentifier); err != nil {
				return err
			}
		}
	}

	if o.PortsCableLengthQueryParameter != nil {

		// query param ports.cable.length
		var qrPortsCableLength string

		if o.PortsCableLengthQueryParameter != nil {
			qrPortsCableLength = *o.PortsCableLengthQueryParameter
		}
		qPortsCableLength := qrPortsCableLength
		if qPortsCableLength != "" {

			if err := r.SetQueryParam("ports.cable.length", qPortsCableLength); err != nil {
				return err
			}
		}
	}

	if o.PortsCablePartNumberQueryParameter != nil {

		// query param ports.cable.part_number
		var qrPortsCablePartNumber string

		if o.PortsCablePartNumberQueryParameter != nil {
			qrPortsCablePartNumber = *o.PortsCablePartNumberQueryParameter
		}
		qPortsCablePartNumber := qrPortsCablePartNumber
		if qPortsCablePartNumber != "" {

			if err := r.SetQueryParam("ports.cable.part_number", qPortsCablePartNumber); err != nil {
				return err
			}
		}
	}

	if o.PortsCableSerialNumberQueryParameter != nil {

		// query param ports.cable.serial_number
		var qrPortsCableSerialNumber string

		if o.PortsCableSerialNumberQueryParameter != nil {
			qrPortsCableSerialNumber = *o.PortsCableSerialNumberQueryParameter
		}
		qPortsCableSerialNumber := qrPortsCableSerialNumber
		if qPortsCableSerialNumber != "" {

			if err := r.SetQueryParam("ports.cable.serial_number", qPortsCableSerialNumber); err != nil {
				return err
			}
		}
	}

	if o.PortsDesignatorQueryParameter != nil {

		// query param ports.designator
		var qrPortsDesignator string

		if o.PortsDesignatorQueryParameter != nil {
			qrPortsDesignator = *o.PortsDesignatorQueryParameter
		}
		qPortsDesignator := qrPortsDesignator
		if qPortsDesignator != "" {

			if err := r.SetQueryParam("ports.designator", qPortsDesignator); err != nil {
				return err
			}
		}
	}

	if o.PortsIDQueryParameter != nil {

		// query param ports.id
		var qrPortsID int64

		if o.PortsIDQueryParameter != nil {
			qrPortsID = *o.PortsIDQueryParameter
		}
		qPortsID := swag.FormatInt64(qrPortsID)
		if qPortsID != "" {

			if err := r.SetQueryParam("ports.id", qPortsID); err != nil {
				return err
			}
		}
	}

	if o.PortsInternalQueryParameter != nil {

		// query param ports.internal
		var qrPortsInternal bool

		if o.PortsInternalQueryParameter != nil {
			qrPortsInternal = *o.PortsInternalQueryParameter
		}
		qPortsInternal := swag.FormatBool(qrPortsInternal)
		if qPortsInternal != "" {

			if err := r.SetQueryParam("ports.internal", qPortsInternal); err != nil {
				return err
			}
		}
	}

	if o.PortsMacAddressQueryParameter != nil {

		// query param ports.mac_address
		var qrPortsMacAddress string

		if o.PortsMacAddressQueryParameter != nil {
			qrPortsMacAddress = *o.PortsMacAddressQueryParameter
		}
		qPortsMacAddress := qrPortsMacAddress
		if qPortsMacAddress != "" {

			if err := r.SetQueryParam("ports.mac_address", qPortsMacAddress); err != nil {
				return err
			}
		}
	}

	if o.PortsModuleIDQueryParameter != nil {

		// query param ports.module_id
		var qrPortsModuleID string

		if o.PortsModuleIDQueryParameter != nil {
			qrPortsModuleID = *o.PortsModuleIDQueryParameter
		}
		qPortsModuleID := qrPortsModuleID
		if qPortsModuleID != "" {

			if err := r.SetQueryParam("ports.module_id", qPortsModuleID); err != nil {
				return err
			}
		}
	}

	if o.PortsRemoteChassisQueryParameter != nil {

		// query param ports.remote.chassis
		var qrPortsRemoteChassis string

		if o.PortsRemoteChassisQueryParameter != nil {
			qrPortsRemoteChassis = *o.PortsRemoteChassisQueryParameter
		}
		qPortsRemoteChassis := qrPortsRemoteChassis
		if qPortsRemoteChassis != "" {

			if err := r.SetQueryParam("ports.remote.chassis", qPortsRemoteChassis); err != nil {
				return err
			}
		}
	}

	if o.PortsRemoteMacAddressQueryParameter != nil {

		// query param ports.remote.mac_address
		var qrPortsRemoteMacAddress string

		if o.PortsRemoteMacAddressQueryParameter != nil {
			qrPortsRemoteMacAddress = *o.PortsRemoteMacAddressQueryParameter
		}
		qPortsRemoteMacAddress := qrPortsRemoteMacAddress
		if qPortsRemoteMacAddress != "" {

			if err := r.SetQueryParam("ports.remote.mac_address", qPortsRemoteMacAddress); err != nil {
				return err
			}
		}
	}

	if o.PortsRemotePhyQueryParameter != nil {

		// query param ports.remote.phy
		var qrPortsRemotePhy string

		if o.PortsRemotePhyQueryParameter != nil {
			qrPortsRemotePhy = *o.PortsRemotePhyQueryParameter
		}
		qPortsRemotePhy := qrPortsRemotePhy
		if qPortsRemotePhy != "" {

			if err := r.SetQueryParam("ports.remote.phy", qPortsRemotePhy); err != nil {
				return err
			}
		}
	}

	if o.PortsRemotePortQueryParameter != nil {

		// query param ports.remote.port
		var qrPortsRemotePort string

		if o.PortsRemotePortQueryParameter != nil {
			qrPortsRemotePort = *o.PortsRemotePortQueryParameter
		}
		qPortsRemotePort := qrPortsRemotePort
		if qPortsRemotePort != "" {

			if err := r.SetQueryParam("ports.remote.port", qPortsRemotePort); err != nil {
				return err
			}
		}
	}

	if o.PortsRemoteWwnQueryParameter != nil {

		// query param ports.remote.wwn
		var qrPortsRemoteWwn string

		if o.PortsRemoteWwnQueryParameter != nil {
			qrPortsRemoteWwn = *o.PortsRemoteWwnQueryParameter
		}
		qPortsRemoteWwn := qrPortsRemoteWwn
		if qPortsRemoteWwn != "" {

			if err := r.SetQueryParam("ports.remote.wwn", qPortsRemoteWwn); err != nil {
				return err
			}
		}
	}

	if o.PortsStateQueryParameter != nil {

		// query param ports.state
		var qrPortsState string

		if o.PortsStateQueryParameter != nil {
			qrPortsState = *o.PortsStateQueryParameter
		}
		qPortsState := qrPortsState
		if qPortsState != "" {

			if err := r.SetQueryParam("ports.state", qPortsState); err != nil {
				return err
			}
		}
	}

	if o.PortsWwnQueryParameter != nil {

		// query param ports.wwn
		var qrPortsWwn string

		if o.PortsWwnQueryParameter != nil {
			qrPortsWwn = *o.PortsWwnQueryParameter
		}
		qPortsWwn := qrPortsWwn
		if qPortsWwn != "" {

			if err := r.SetQueryParam("ports.wwn", qPortsWwn); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecords != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecords != nil {
			qrReturnRecords = *o.ReturnRecords
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeout != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeout != nil {
			qrReturnTimeout = *o.ReturnTimeout
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.SerialNumberQueryParameter != nil {

		// query param serial_number
		var qrSerialNumber string

		if o.SerialNumberQueryParameter != nil {
			qrSerialNumber = *o.SerialNumberQueryParameter
		}
		qSerialNumber := qrSerialNumber
		if qSerialNumber != "" {

			if err := r.SetQueryParam("serial_number", qSerialNumber); err != nil {
				return err
			}
		}
	}

	if o.StateQueryParameter != nil {

		// query param state
		var qrState string

		if o.StateQueryParameter != nil {
			qrState = *o.StateQueryParameter
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if o.UIDQueryParameter != nil {

		// query param uid
		var qrUID string

		if o.UIDQueryParameter != nil {
			qrUID = *o.UIDQueryParameter
		}
		qUID := qrUID
		if qUID != "" {

			if err := r.SetQueryParam("uid", qUID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamShelfCollectionGet binds the parameter fields
func (o *ShelfCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamShelfCollectionGet binds the parameter order_by
func (o *ShelfCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderBy

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
