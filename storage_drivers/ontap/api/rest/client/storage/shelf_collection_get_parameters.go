// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewShelfCollectionGetParams creates a new ShelfCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewShelfCollectionGetParams() *ShelfCollectionGetParams {
	return &ShelfCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewShelfCollectionGetParamsWithTimeout creates a new ShelfCollectionGetParams object
// with the ability to set a timeout on a request.
func NewShelfCollectionGetParamsWithTimeout(timeout time.Duration) *ShelfCollectionGetParams {
	return &ShelfCollectionGetParams{
		timeout: timeout,
	}
}

// NewShelfCollectionGetParamsWithContext creates a new ShelfCollectionGetParams object
// with the ability to set a context for a request.
func NewShelfCollectionGetParamsWithContext(ctx context.Context) *ShelfCollectionGetParams {
	return &ShelfCollectionGetParams{
		Context: ctx,
	}
}

// NewShelfCollectionGetParamsWithHTTPClient creates a new ShelfCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewShelfCollectionGetParamsWithHTTPClient(client *http.Client) *ShelfCollectionGetParams {
	return &ShelfCollectionGetParams{
		HTTPClient: client,
	}
}

/*
ShelfCollectionGetParams contains all the parameters to send to the API endpoint

	for the shelf collection get operation.

	Typically these are written to a http.Request.
*/
type ShelfCollectionGetParams struct {

	/* AcpsAddress.

	   Filter by acps.address
	*/
	AcpsAddressQueryParameter *string

	/* AcpsChannel.

	   Filter by acps.channel
	*/
	AcpsChannelQueryParameter *string

	/* AcpsConnectionState.

	   Filter by acps.connection_state
	*/
	AcpsConnectionStateQueryParameter *string

	/* AcpsEnabled.

	   Filter by acps.enabled
	*/
	AcpsEnabledQueryParameter *bool

	/* AcpsErrorReasonArgumentsCode.

	   Filter by acps.error.reason.arguments.code
	*/
	AcpsErrorReasonArgumentsCodeQueryParameter *string

	/* AcpsErrorReasonArgumentsMessage.

	   Filter by acps.error.reason.arguments.message
	*/
	AcpsErrorReasonArgumentsMessageQueryParameter *string

	/* AcpsErrorReasonCode.

	   Filter by acps.error.reason.code
	*/
	AcpsErrorReasonCodeQueryParameter *string

	/* AcpsErrorReasonMessage.

	   Filter by acps.error.reason.message
	*/
	AcpsErrorReasonMessageQueryParameter *string

	/* AcpsErrorReasonTarget.

	   Filter by acps.error.reason.target
	*/
	AcpsErrorReasonTargetQueryParameter *string

	/* AcpsErrorSeverity.

	   Filter by acps.error.severity
	*/
	AcpsErrorSeverityQueryParameter *string

	/* AcpsErrorType.

	   Filter by acps.error.type
	*/
	AcpsErrorTypeQueryParameter *string

	/* AcpsNetmask.

	   Filter by acps.netmask
	*/
	AcpsNetmaskQueryParameter *string

	/* AcpsNodeName.

	   Filter by acps.node.name
	*/
	AcpsNodeNameQueryParameter *string

	/* AcpsNodeUUID.

	   Filter by acps.node.uuid
	*/
	AcpsNodeUUIDQueryParameter *string

	/* AcpsPort.

	   Filter by acps.port
	*/
	AcpsPortQueryParameter *string

	/* AcpsSubnet.

	   Filter by acps.subnet
	*/
	AcpsSubnetQueryParameter *string

	/* BaysDrawerID.

	   Filter by bays.drawer.id
	*/
	BaysDrawerIDQueryParameter *int64

	/* BaysDrawerSlot.

	   Filter by bays.drawer.slot
	*/
	BaysDrawerSlotQueryParameter *int64

	/* BaysHasDisk.

	   Filter by bays.has_disk
	*/
	BaysHasDiskQueryParameter *bool

	/* BaysID.

	   Filter by bays.id
	*/
	BaysIDQueryParameter *int64

	/* BaysState.

	   Filter by bays.state
	*/
	BaysStateQueryParameter *string

	/* BaysType.

	   Filter by bays.type
	*/
	BaysTypeQueryParameter *string

	/* ConnectionType.

	   Filter by connection_type
	*/
	ConnectionTypeQueryParameter *string

	/* CurrentSensorsCurrent.

	   Filter by current_sensors.current
	*/
	CurrentSensorsCurrentQueryParameter *int64

	/* CurrentSensorsID.

	   Filter by current_sensors.id
	*/
	CurrentSensorsIDQueryParameter *int64

	/* CurrentSensorsLocation.

	   Filter by current_sensors.location
	*/
	CurrentSensorsLocationQueryParameter *string

	/* CurrentSensorsState.

	   Filter by current_sensors.state
	*/
	CurrentSensorsStateQueryParameter *string

	/* DiskCount.

	   Filter by disk_count
	*/
	DiskCountQueryParameter *int64

	/* DrawersClosed.

	   Filter by drawers.closed
	*/
	DrawersClosedQueryParameter *bool

	/* DrawersDiskCount.

	   Filter by drawers.disk_count
	*/
	DrawersDiskCountQueryParameter *int64

	/* DrawersError.

	   Filter by drawers.error
	*/
	DrawersErrorQueryParameter *string

	/* DrawersID.

	   Filter by drawers.id
	*/
	DrawersIDQueryParameter *int64

	/* DrawersPartNumber.

	   Filter by drawers.part_number
	*/
	DrawersPartNumberQueryParameter *string

	/* DrawersSerialNumber.

	   Filter by drawers.serial_number
	*/
	DrawersSerialNumberQueryParameter *string

	/* DrawersState.

	   Filter by drawers.state
	*/
	DrawersStateQueryParameter *string

	/* ErrorsReasonArgumentsCode.

	   Filter by errors.reason.arguments.code
	*/
	ErrorsReasonArgumentsCodeQueryParameter *string

	/* ErrorsReasonArgumentsMessage.

	   Filter by errors.reason.arguments.message
	*/
	ErrorsReasonArgumentsMessageQueryParameter *string

	/* ErrorsReasonCode.

	   Filter by errors.reason.code
	*/
	ErrorsReasonCodeQueryParameter *string

	/* ErrorsReasonMessage.

	   Filter by errors.reason.message
	*/
	ErrorsReasonMessageQueryParameter *string

	/* ErrorsReasonTarget.

	   Filter by errors.reason.target
	*/
	ErrorsReasonTargetQueryParameter *string

	/* FansID.

	   Filter by fans.id
	*/
	FansIDQueryParameter *int64

	/* FansLocation.

	   Filter by fans.location
	*/
	FansLocationQueryParameter *string

	/* FansRpm.

	   Filter by fans.rpm
	*/
	FansRpmQueryParameter *int64

	/* FansState.

	   Filter by fans.state
	*/
	FansStateQueryParameter *string

	/* Fields.

	   Specify the fields to return.
	*/
	FieldsQueryParameter []string

	/* FrusFirmwareVersion.

	   Filter by frus.firmware_version
	*/
	FrusFirmwareVersionQueryParameter *string

	/* FrusID.

	   Filter by frus.id
	*/
	FrusIDQueryParameter *int64

	/* FrusInstalled.

	   Filter by frus.installed
	*/
	FrusInstalledQueryParameter *bool

	/* FrusPartNumber.

	   Filter by frus.part_number
	*/
	FrusPartNumberQueryParameter *string

	/* FrusPsuCrestFactor.

	   Filter by frus.psu.crest_factor
	*/
	FrusPsuCrestFactorQueryParameter *int64

	/* FrusPsuModel.

	   Filter by frus.psu.model
	*/
	FrusPsuModelQueryParameter *string

	/* FrusPsuPowerDrawn.

	   Filter by frus.psu.power_drawn
	*/
	FrusPsuPowerDrawnQueryParameter *int64

	/* FrusPsuPowerRating.

	   Filter by frus.psu.power_rating
	*/
	FrusPsuPowerRatingQueryParameter *int64

	/* FrusSerialNumber.

	   Filter by frus.serial_number
	*/
	FrusSerialNumberQueryParameter *string

	/* FrusState.

	   Filter by frus.state
	*/
	FrusStateQueryParameter *string

	/* FrusType.

	   Filter by frus.type
	*/
	FrusTypeQueryParameter *string

	/* ID.

	   Filter by id
	*/
	IDQueryParameter *string

	/* Internal.

	   Filter by internal
	*/
	InternalQueryParameter *bool

	/* Local.

	   Filter by local
	*/
	LocalQueryParameter *bool

	/* LocationLed.

	   Filter by location_led
	*/
	LocationLedQueryParameter *string

	/* ManufacturerName.

	   Filter by manufacturer.name
	*/
	ManufacturerNameQueryParameter *string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecordsQueryParameter *int64

	/* Model.

	   Filter by model
	*/
	ModelQueryParameter *string

	/* ModuleType.

	   Filter by module_type
	*/
	ModuleTypeQueryParameter *string

	/* Name.

	   Filter by name
	*/
	NameQueryParameter *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderByQueryParameter []string

	/* PathsName.

	   Filter by paths.name
	*/
	PathsNameQueryParameter *string

	/* PathsNodeName.

	   Filter by paths.node.name
	*/
	PathsNodeNameQueryParameter *string

	/* PathsNodeUUID.

	   Filter by paths.node.uuid
	*/
	PathsNodeUUIDQueryParameter *string

	/* PortsCableIdentifier.

	   Filter by ports.cable.identifier
	*/
	PortsCableIDentifierQueryParameter *string

	/* PortsCableLength.

	   Filter by ports.cable.length
	*/
	PortsCableLengthQueryParameter *string

	/* PortsCablePartNumber.

	   Filter by ports.cable.part_number
	*/
	PortsCablePartNumberQueryParameter *string

	/* PortsCableSerialNumber.

	   Filter by ports.cable.serial_number
	*/
	PortsCableSerialNumberQueryParameter *string

	/* PortsDesignator.

	   Filter by ports.designator
	*/
	PortsDesignatorQueryParameter *string

	/* PortsID.

	   Filter by ports.id
	*/
	PortsIDQueryParameter *int64

	/* PortsInternal.

	   Filter by ports.internal
	*/
	PortsInternalQueryParameter *bool

	/* PortsMacAddress.

	   Filter by ports.mac_address
	*/
	PortsMacAddressQueryParameter *string

	/* PortsModuleID.

	   Filter by ports.module_id
	*/
	PortsModuleIDQueryParameter *string

	/* PortsRemoteChassis.

	   Filter by ports.remote.chassis
	*/
	PortsRemoteChassisQueryParameter *string

	/* PortsRemoteDevice.

	   Filter by ports.remote.device
	*/
	PortsRemoteDeviceQueryParameter *string

	/* PortsRemoteMacAddress.

	   Filter by ports.remote.mac_address
	*/
	PortsRemoteMacAddressQueryParameter *string

	/* PortsRemotePhy.

	   Filter by ports.remote.phy
	*/
	PortsRemotePhyQueryParameter *string

	/* PortsRemotePort.

	   Filter by ports.remote.port
	*/
	PortsRemotePortQueryParameter *string

	/* PortsRemoteWwn.

	   Filter by ports.remote.wwn
	*/
	PortsRemoteWwnQueryParameter *string

	/* PortsState.

	   Filter by ports.state
	*/
	PortsStateQueryParameter *string

	/* PortsWwn.

	   Filter by ports.wwn
	*/
	PortsWwnQueryParameter *string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecordsQueryParameter *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeoutQueryParameter *int64

	/* SerialNumber.

	   Filter by serial_number
	*/
	SerialNumberQueryParameter *string

	/* State.

	   Filter by state
	*/
	StateQueryParameter *string

	/* TemperatureSensorsAmbient.

	   Filter by temperature_sensors.ambient
	*/
	TemperatureSensorsAmbientQueryParameter *bool

	/* TemperatureSensorsID.

	   Filter by temperature_sensors.id
	*/
	TemperatureSensorsIDQueryParameter *int64

	/* TemperatureSensorsLocation.

	   Filter by temperature_sensors.location
	*/
	TemperatureSensorsLocationQueryParameter *string

	/* TemperatureSensorsState.

	   Filter by temperature_sensors.state
	*/
	TemperatureSensorsStateQueryParameter *string

	/* TemperatureSensorsTemperature.

	   Filter by temperature_sensors.temperature
	*/
	TemperatureSensorsTemperatureQueryParameter *int64

	/* TemperatureSensorsThresholdHighCritical.

	   Filter by temperature_sensors.threshold.high.critical
	*/
	TemperatureSensorsThresholdHighCriticalQueryParameter *int64

	/* TemperatureSensorsThresholdHighWarning.

	   Filter by temperature_sensors.threshold.high.warning
	*/
	TemperatureSensorsThresholdHighWarningQueryParameter *int64

	/* TemperatureSensorsThresholdLowCritical.

	   Filter by temperature_sensors.threshold.low.critical
	*/
	TemperatureSensorsThresholdLowCriticalQueryParameter *int64

	/* TemperatureSensorsThresholdLowWarning.

	   Filter by temperature_sensors.threshold.low.warning
	*/
	TemperatureSensorsThresholdLowWarningQueryParameter *int64

	/* UID.

	   Filter by uid
	*/
	UIDQueryParameter *string

	/* VendorManufacturer.

	   Filter by vendor.manufacturer
	*/
	VendorManufacturerQueryParameter *string

	/* VendorName.

	   Filter by vendor.name
	*/
	VendorNameQueryParameter *string

	/* VendorPartNumber.

	   Filter by vendor.part_number
	*/
	VendorPartNumberQueryParameter *string

	/* VendorProduct.

	   Filter by vendor.product
	*/
	VendorProductQueryParameter *string

	/* VendorSerialNumber.

	   Filter by vendor.serial_number
	*/
	VendorSerialNumberQueryParameter *string

	/* VoltageSensorsID.

	   Filter by voltage_sensors.id
	*/
	VoltageSensorsIDQueryParameter *int64

	/* VoltageSensorsLocation.

	   Filter by voltage_sensors.location
	*/
	VoltageSensorsLocationQueryParameter *string

	/* VoltageSensorsState.

	   Filter by voltage_sensors.state
	*/
	VoltageSensorsStateQueryParameter *string

	/* VoltageSensorsVoltage.

	   Filter by voltage_sensors.voltage
	*/
	VoltageSensorsVoltageQueryParameter *float64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the shelf collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ShelfCollectionGetParams) WithDefaults() *ShelfCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the shelf collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ShelfCollectionGetParams) SetDefaults() {
	var (
		returnRecordsQueryParameterDefault = bool(true)

		returnTimeoutQueryParameterDefault = int64(15)
	)

	val := ShelfCollectionGetParams{
		ReturnRecordsQueryParameter: &returnRecordsQueryParameterDefault,
		ReturnTimeoutQueryParameter: &returnTimeoutQueryParameterDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the shelf collection get params
func (o *ShelfCollectionGetParams) WithTimeout(timeout time.Duration) *ShelfCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the shelf collection get params
func (o *ShelfCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the shelf collection get params
func (o *ShelfCollectionGetParams) WithContext(ctx context.Context) *ShelfCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the shelf collection get params
func (o *ShelfCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the shelf collection get params
func (o *ShelfCollectionGetParams) WithHTTPClient(client *http.Client) *ShelfCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the shelf collection get params
func (o *ShelfCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAcpsAddressQueryParameter adds the acpsAddress to the shelf collection get params
func (o *ShelfCollectionGetParams) WithAcpsAddressQueryParameter(acpsAddress *string) *ShelfCollectionGetParams {
	o.SetAcpsAddressQueryParameter(acpsAddress)
	return o
}

// SetAcpsAddressQueryParameter adds the acpsAddress to the shelf collection get params
func (o *ShelfCollectionGetParams) SetAcpsAddressQueryParameter(acpsAddress *string) {
	o.AcpsAddressQueryParameter = acpsAddress
}

// WithAcpsChannelQueryParameter adds the acpsChannel to the shelf collection get params
func (o *ShelfCollectionGetParams) WithAcpsChannelQueryParameter(acpsChannel *string) *ShelfCollectionGetParams {
	o.SetAcpsChannelQueryParameter(acpsChannel)
	return o
}

// SetAcpsChannelQueryParameter adds the acpsChannel to the shelf collection get params
func (o *ShelfCollectionGetParams) SetAcpsChannelQueryParameter(acpsChannel *string) {
	o.AcpsChannelQueryParameter = acpsChannel
}

// WithAcpsConnectionStateQueryParameter adds the acpsConnectionState to the shelf collection get params
func (o *ShelfCollectionGetParams) WithAcpsConnectionStateQueryParameter(acpsConnectionState *string) *ShelfCollectionGetParams {
	o.SetAcpsConnectionStateQueryParameter(acpsConnectionState)
	return o
}

// SetAcpsConnectionStateQueryParameter adds the acpsConnectionState to the shelf collection get params
func (o *ShelfCollectionGetParams) SetAcpsConnectionStateQueryParameter(acpsConnectionState *string) {
	o.AcpsConnectionStateQueryParameter = acpsConnectionState
}

// WithAcpsEnabledQueryParameter adds the acpsEnabled to the shelf collection get params
func (o *ShelfCollectionGetParams) WithAcpsEnabledQueryParameter(acpsEnabled *bool) *ShelfCollectionGetParams {
	o.SetAcpsEnabledQueryParameter(acpsEnabled)
	return o
}

// SetAcpsEnabledQueryParameter adds the acpsEnabled to the shelf collection get params
func (o *ShelfCollectionGetParams) SetAcpsEnabledQueryParameter(acpsEnabled *bool) {
	o.AcpsEnabledQueryParameter = acpsEnabled
}

// WithAcpsErrorReasonArgumentsCodeQueryParameter adds the acpsErrorReasonArgumentsCode to the shelf collection get params
func (o *ShelfCollectionGetParams) WithAcpsErrorReasonArgumentsCodeQueryParameter(acpsErrorReasonArgumentsCode *string) *ShelfCollectionGetParams {
	o.SetAcpsErrorReasonArgumentsCodeQueryParameter(acpsErrorReasonArgumentsCode)
	return o
}

// SetAcpsErrorReasonArgumentsCodeQueryParameter adds the acpsErrorReasonArgumentsCode to the shelf collection get params
func (o *ShelfCollectionGetParams) SetAcpsErrorReasonArgumentsCodeQueryParameter(acpsErrorReasonArgumentsCode *string) {
	o.AcpsErrorReasonArgumentsCodeQueryParameter = acpsErrorReasonArgumentsCode
}

// WithAcpsErrorReasonArgumentsMessageQueryParameter adds the acpsErrorReasonArgumentsMessage to the shelf collection get params
func (o *ShelfCollectionGetParams) WithAcpsErrorReasonArgumentsMessageQueryParameter(acpsErrorReasonArgumentsMessage *string) *ShelfCollectionGetParams {
	o.SetAcpsErrorReasonArgumentsMessageQueryParameter(acpsErrorReasonArgumentsMessage)
	return o
}

// SetAcpsErrorReasonArgumentsMessageQueryParameter adds the acpsErrorReasonArgumentsMessage to the shelf collection get params
func (o *ShelfCollectionGetParams) SetAcpsErrorReasonArgumentsMessageQueryParameter(acpsErrorReasonArgumentsMessage *string) {
	o.AcpsErrorReasonArgumentsMessageQueryParameter = acpsErrorReasonArgumentsMessage
}

// WithAcpsErrorReasonCodeQueryParameter adds the acpsErrorReasonCode to the shelf collection get params
func (o *ShelfCollectionGetParams) WithAcpsErrorReasonCodeQueryParameter(acpsErrorReasonCode *string) *ShelfCollectionGetParams {
	o.SetAcpsErrorReasonCodeQueryParameter(acpsErrorReasonCode)
	return o
}

// SetAcpsErrorReasonCodeQueryParameter adds the acpsErrorReasonCode to the shelf collection get params
func (o *ShelfCollectionGetParams) SetAcpsErrorReasonCodeQueryParameter(acpsErrorReasonCode *string) {
	o.AcpsErrorReasonCodeQueryParameter = acpsErrorReasonCode
}

// WithAcpsErrorReasonMessageQueryParameter adds the acpsErrorReasonMessage to the shelf collection get params
func (o *ShelfCollectionGetParams) WithAcpsErrorReasonMessageQueryParameter(acpsErrorReasonMessage *string) *ShelfCollectionGetParams {
	o.SetAcpsErrorReasonMessageQueryParameter(acpsErrorReasonMessage)
	return o
}

// SetAcpsErrorReasonMessageQueryParameter adds the acpsErrorReasonMessage to the shelf collection get params
func (o *ShelfCollectionGetParams) SetAcpsErrorReasonMessageQueryParameter(acpsErrorReasonMessage *string) {
	o.AcpsErrorReasonMessageQueryParameter = acpsErrorReasonMessage
}

// WithAcpsErrorReasonTargetQueryParameter adds the acpsErrorReasonTarget to the shelf collection get params
func (o *ShelfCollectionGetParams) WithAcpsErrorReasonTargetQueryParameter(acpsErrorReasonTarget *string) *ShelfCollectionGetParams {
	o.SetAcpsErrorReasonTargetQueryParameter(acpsErrorReasonTarget)
	return o
}

// SetAcpsErrorReasonTargetQueryParameter adds the acpsErrorReasonTarget to the shelf collection get params
func (o *ShelfCollectionGetParams) SetAcpsErrorReasonTargetQueryParameter(acpsErrorReasonTarget *string) {
	o.AcpsErrorReasonTargetQueryParameter = acpsErrorReasonTarget
}

// WithAcpsErrorSeverityQueryParameter adds the acpsErrorSeverity to the shelf collection get params
func (o *ShelfCollectionGetParams) WithAcpsErrorSeverityQueryParameter(acpsErrorSeverity *string) *ShelfCollectionGetParams {
	o.SetAcpsErrorSeverityQueryParameter(acpsErrorSeverity)
	return o
}

// SetAcpsErrorSeverityQueryParameter adds the acpsErrorSeverity to the shelf collection get params
func (o *ShelfCollectionGetParams) SetAcpsErrorSeverityQueryParameter(acpsErrorSeverity *string) {
	o.AcpsErrorSeverityQueryParameter = acpsErrorSeverity
}

// WithAcpsErrorTypeQueryParameter adds the acpsErrorType to the shelf collection get params
func (o *ShelfCollectionGetParams) WithAcpsErrorTypeQueryParameter(acpsErrorType *string) *ShelfCollectionGetParams {
	o.SetAcpsErrorTypeQueryParameter(acpsErrorType)
	return o
}

// SetAcpsErrorTypeQueryParameter adds the acpsErrorType to the shelf collection get params
func (o *ShelfCollectionGetParams) SetAcpsErrorTypeQueryParameter(acpsErrorType *string) {
	o.AcpsErrorTypeQueryParameter = acpsErrorType
}

// WithAcpsNetmaskQueryParameter adds the acpsNetmask to the shelf collection get params
func (o *ShelfCollectionGetParams) WithAcpsNetmaskQueryParameter(acpsNetmask *string) *ShelfCollectionGetParams {
	o.SetAcpsNetmaskQueryParameter(acpsNetmask)
	return o
}

// SetAcpsNetmaskQueryParameter adds the acpsNetmask to the shelf collection get params
func (o *ShelfCollectionGetParams) SetAcpsNetmaskQueryParameter(acpsNetmask *string) {
	o.AcpsNetmaskQueryParameter = acpsNetmask
}

// WithAcpsNodeNameQueryParameter adds the acpsNodeName to the shelf collection get params
func (o *ShelfCollectionGetParams) WithAcpsNodeNameQueryParameter(acpsNodeName *string) *ShelfCollectionGetParams {
	o.SetAcpsNodeNameQueryParameter(acpsNodeName)
	return o
}

// SetAcpsNodeNameQueryParameter adds the acpsNodeName to the shelf collection get params
func (o *ShelfCollectionGetParams) SetAcpsNodeNameQueryParameter(acpsNodeName *string) {
	o.AcpsNodeNameQueryParameter = acpsNodeName
}

// WithAcpsNodeUUIDQueryParameter adds the acpsNodeUUID to the shelf collection get params
func (o *ShelfCollectionGetParams) WithAcpsNodeUUIDQueryParameter(acpsNodeUUID *string) *ShelfCollectionGetParams {
	o.SetAcpsNodeUUIDQueryParameter(acpsNodeUUID)
	return o
}

// SetAcpsNodeUUIDQueryParameter adds the acpsNodeUuid to the shelf collection get params
func (o *ShelfCollectionGetParams) SetAcpsNodeUUIDQueryParameter(acpsNodeUUID *string) {
	o.AcpsNodeUUIDQueryParameter = acpsNodeUUID
}

// WithAcpsPortQueryParameter adds the acpsPort to the shelf collection get params
func (o *ShelfCollectionGetParams) WithAcpsPortQueryParameter(acpsPort *string) *ShelfCollectionGetParams {
	o.SetAcpsPortQueryParameter(acpsPort)
	return o
}

// SetAcpsPortQueryParameter adds the acpsPort to the shelf collection get params
func (o *ShelfCollectionGetParams) SetAcpsPortQueryParameter(acpsPort *string) {
	o.AcpsPortQueryParameter = acpsPort
}

// WithAcpsSubnetQueryParameter adds the acpsSubnet to the shelf collection get params
func (o *ShelfCollectionGetParams) WithAcpsSubnetQueryParameter(acpsSubnet *string) *ShelfCollectionGetParams {
	o.SetAcpsSubnetQueryParameter(acpsSubnet)
	return o
}

// SetAcpsSubnetQueryParameter adds the acpsSubnet to the shelf collection get params
func (o *ShelfCollectionGetParams) SetAcpsSubnetQueryParameter(acpsSubnet *string) {
	o.AcpsSubnetQueryParameter = acpsSubnet
}

// WithBaysDrawerIDQueryParameter adds the baysDrawerID to the shelf collection get params
func (o *ShelfCollectionGetParams) WithBaysDrawerIDQueryParameter(baysDrawerID *int64) *ShelfCollectionGetParams {
	o.SetBaysDrawerIDQueryParameter(baysDrawerID)
	return o
}

// SetBaysDrawerIDQueryParameter adds the baysDrawerId to the shelf collection get params
func (o *ShelfCollectionGetParams) SetBaysDrawerIDQueryParameter(baysDrawerID *int64) {
	o.BaysDrawerIDQueryParameter = baysDrawerID
}

// WithBaysDrawerSlotQueryParameter adds the baysDrawerSlot to the shelf collection get params
func (o *ShelfCollectionGetParams) WithBaysDrawerSlotQueryParameter(baysDrawerSlot *int64) *ShelfCollectionGetParams {
	o.SetBaysDrawerSlotQueryParameter(baysDrawerSlot)
	return o
}

// SetBaysDrawerSlotQueryParameter adds the baysDrawerSlot to the shelf collection get params
func (o *ShelfCollectionGetParams) SetBaysDrawerSlotQueryParameter(baysDrawerSlot *int64) {
	o.BaysDrawerSlotQueryParameter = baysDrawerSlot
}

// WithBaysHasDiskQueryParameter adds the baysHasDisk to the shelf collection get params
func (o *ShelfCollectionGetParams) WithBaysHasDiskQueryParameter(baysHasDisk *bool) *ShelfCollectionGetParams {
	o.SetBaysHasDiskQueryParameter(baysHasDisk)
	return o
}

// SetBaysHasDiskQueryParameter adds the baysHasDisk to the shelf collection get params
func (o *ShelfCollectionGetParams) SetBaysHasDiskQueryParameter(baysHasDisk *bool) {
	o.BaysHasDiskQueryParameter = baysHasDisk
}

// WithBaysIDQueryParameter adds the baysID to the shelf collection get params
func (o *ShelfCollectionGetParams) WithBaysIDQueryParameter(baysID *int64) *ShelfCollectionGetParams {
	o.SetBaysIDQueryParameter(baysID)
	return o
}

// SetBaysIDQueryParameter adds the baysId to the shelf collection get params
func (o *ShelfCollectionGetParams) SetBaysIDQueryParameter(baysID *int64) {
	o.BaysIDQueryParameter = baysID
}

// WithBaysStateQueryParameter adds the baysState to the shelf collection get params
func (o *ShelfCollectionGetParams) WithBaysStateQueryParameter(baysState *string) *ShelfCollectionGetParams {
	o.SetBaysStateQueryParameter(baysState)
	return o
}

// SetBaysStateQueryParameter adds the baysState to the shelf collection get params
func (o *ShelfCollectionGetParams) SetBaysStateQueryParameter(baysState *string) {
	o.BaysStateQueryParameter = baysState
}

// WithBaysTypeQueryParameter adds the baysType to the shelf collection get params
func (o *ShelfCollectionGetParams) WithBaysTypeQueryParameter(baysType *string) *ShelfCollectionGetParams {
	o.SetBaysTypeQueryParameter(baysType)
	return o
}

// SetBaysTypeQueryParameter adds the baysType to the shelf collection get params
func (o *ShelfCollectionGetParams) SetBaysTypeQueryParameter(baysType *string) {
	o.BaysTypeQueryParameter = baysType
}

// WithConnectionTypeQueryParameter adds the connectionType to the shelf collection get params
func (o *ShelfCollectionGetParams) WithConnectionTypeQueryParameter(connectionType *string) *ShelfCollectionGetParams {
	o.SetConnectionTypeQueryParameter(connectionType)
	return o
}

// SetConnectionTypeQueryParameter adds the connectionType to the shelf collection get params
func (o *ShelfCollectionGetParams) SetConnectionTypeQueryParameter(connectionType *string) {
	o.ConnectionTypeQueryParameter = connectionType
}

// WithCurrentSensorsCurrentQueryParameter adds the currentSensorsCurrent to the shelf collection get params
func (o *ShelfCollectionGetParams) WithCurrentSensorsCurrentQueryParameter(currentSensorsCurrent *int64) *ShelfCollectionGetParams {
	o.SetCurrentSensorsCurrentQueryParameter(currentSensorsCurrent)
	return o
}

// SetCurrentSensorsCurrentQueryParameter adds the currentSensorsCurrent to the shelf collection get params
func (o *ShelfCollectionGetParams) SetCurrentSensorsCurrentQueryParameter(currentSensorsCurrent *int64) {
	o.CurrentSensorsCurrentQueryParameter = currentSensorsCurrent
}

// WithCurrentSensorsIDQueryParameter adds the currentSensorsID to the shelf collection get params
func (o *ShelfCollectionGetParams) WithCurrentSensorsIDQueryParameter(currentSensorsID *int64) *ShelfCollectionGetParams {
	o.SetCurrentSensorsIDQueryParameter(currentSensorsID)
	return o
}

// SetCurrentSensorsIDQueryParameter adds the currentSensorsId to the shelf collection get params
func (o *ShelfCollectionGetParams) SetCurrentSensorsIDQueryParameter(currentSensorsID *int64) {
	o.CurrentSensorsIDQueryParameter = currentSensorsID
}

// WithCurrentSensorsLocationQueryParameter adds the currentSensorsLocation to the shelf collection get params
func (o *ShelfCollectionGetParams) WithCurrentSensorsLocationQueryParameter(currentSensorsLocation *string) *ShelfCollectionGetParams {
	o.SetCurrentSensorsLocationQueryParameter(currentSensorsLocation)
	return o
}

// SetCurrentSensorsLocationQueryParameter adds the currentSensorsLocation to the shelf collection get params
func (o *ShelfCollectionGetParams) SetCurrentSensorsLocationQueryParameter(currentSensorsLocation *string) {
	o.CurrentSensorsLocationQueryParameter = currentSensorsLocation
}

// WithCurrentSensorsStateQueryParameter adds the currentSensorsState to the shelf collection get params
func (o *ShelfCollectionGetParams) WithCurrentSensorsStateQueryParameter(currentSensorsState *string) *ShelfCollectionGetParams {
	o.SetCurrentSensorsStateQueryParameter(currentSensorsState)
	return o
}

// SetCurrentSensorsStateQueryParameter adds the currentSensorsState to the shelf collection get params
func (o *ShelfCollectionGetParams) SetCurrentSensorsStateQueryParameter(currentSensorsState *string) {
	o.CurrentSensorsStateQueryParameter = currentSensorsState
}

// WithDiskCountQueryParameter adds the diskCount to the shelf collection get params
func (o *ShelfCollectionGetParams) WithDiskCountQueryParameter(diskCount *int64) *ShelfCollectionGetParams {
	o.SetDiskCountQueryParameter(diskCount)
	return o
}

// SetDiskCountQueryParameter adds the diskCount to the shelf collection get params
func (o *ShelfCollectionGetParams) SetDiskCountQueryParameter(diskCount *int64) {
	o.DiskCountQueryParameter = diskCount
}

// WithDrawersClosedQueryParameter adds the drawersClosed to the shelf collection get params
func (o *ShelfCollectionGetParams) WithDrawersClosedQueryParameter(drawersClosed *bool) *ShelfCollectionGetParams {
	o.SetDrawersClosedQueryParameter(drawersClosed)
	return o
}

// SetDrawersClosedQueryParameter adds the drawersClosed to the shelf collection get params
func (o *ShelfCollectionGetParams) SetDrawersClosedQueryParameter(drawersClosed *bool) {
	o.DrawersClosedQueryParameter = drawersClosed
}

// WithDrawersDiskCountQueryParameter adds the drawersDiskCount to the shelf collection get params
func (o *ShelfCollectionGetParams) WithDrawersDiskCountQueryParameter(drawersDiskCount *int64) *ShelfCollectionGetParams {
	o.SetDrawersDiskCountQueryParameter(drawersDiskCount)
	return o
}

// SetDrawersDiskCountQueryParameter adds the drawersDiskCount to the shelf collection get params
func (o *ShelfCollectionGetParams) SetDrawersDiskCountQueryParameter(drawersDiskCount *int64) {
	o.DrawersDiskCountQueryParameter = drawersDiskCount
}

// WithDrawersErrorQueryParameter adds the drawersError to the shelf collection get params
func (o *ShelfCollectionGetParams) WithDrawersErrorQueryParameter(drawersError *string) *ShelfCollectionGetParams {
	o.SetDrawersErrorQueryParameter(drawersError)
	return o
}

// SetDrawersErrorQueryParameter adds the drawersError to the shelf collection get params
func (o *ShelfCollectionGetParams) SetDrawersErrorQueryParameter(drawersError *string) {
	o.DrawersErrorQueryParameter = drawersError
}

// WithDrawersIDQueryParameter adds the drawersID to the shelf collection get params
func (o *ShelfCollectionGetParams) WithDrawersIDQueryParameter(drawersID *int64) *ShelfCollectionGetParams {
	o.SetDrawersIDQueryParameter(drawersID)
	return o
}

// SetDrawersIDQueryParameter adds the drawersId to the shelf collection get params
func (o *ShelfCollectionGetParams) SetDrawersIDQueryParameter(drawersID *int64) {
	o.DrawersIDQueryParameter = drawersID
}

// WithDrawersPartNumberQueryParameter adds the drawersPartNumber to the shelf collection get params
func (o *ShelfCollectionGetParams) WithDrawersPartNumberQueryParameter(drawersPartNumber *string) *ShelfCollectionGetParams {
	o.SetDrawersPartNumberQueryParameter(drawersPartNumber)
	return o
}

// SetDrawersPartNumberQueryParameter adds the drawersPartNumber to the shelf collection get params
func (o *ShelfCollectionGetParams) SetDrawersPartNumberQueryParameter(drawersPartNumber *string) {
	o.DrawersPartNumberQueryParameter = drawersPartNumber
}

// WithDrawersSerialNumberQueryParameter adds the drawersSerialNumber to the shelf collection get params
func (o *ShelfCollectionGetParams) WithDrawersSerialNumberQueryParameter(drawersSerialNumber *string) *ShelfCollectionGetParams {
	o.SetDrawersSerialNumberQueryParameter(drawersSerialNumber)
	return o
}

// SetDrawersSerialNumberQueryParameter adds the drawersSerialNumber to the shelf collection get params
func (o *ShelfCollectionGetParams) SetDrawersSerialNumberQueryParameter(drawersSerialNumber *string) {
	o.DrawersSerialNumberQueryParameter = drawersSerialNumber
}

// WithDrawersStateQueryParameter adds the drawersState to the shelf collection get params
func (o *ShelfCollectionGetParams) WithDrawersStateQueryParameter(drawersState *string) *ShelfCollectionGetParams {
	o.SetDrawersStateQueryParameter(drawersState)
	return o
}

// SetDrawersStateQueryParameter adds the drawersState to the shelf collection get params
func (o *ShelfCollectionGetParams) SetDrawersStateQueryParameter(drawersState *string) {
	o.DrawersStateQueryParameter = drawersState
}

// WithErrorsReasonArgumentsCodeQueryParameter adds the errorsReasonArgumentsCode to the shelf collection get params
func (o *ShelfCollectionGetParams) WithErrorsReasonArgumentsCodeQueryParameter(errorsReasonArgumentsCode *string) *ShelfCollectionGetParams {
	o.SetErrorsReasonArgumentsCodeQueryParameter(errorsReasonArgumentsCode)
	return o
}

// SetErrorsReasonArgumentsCodeQueryParameter adds the errorsReasonArgumentsCode to the shelf collection get params
func (o *ShelfCollectionGetParams) SetErrorsReasonArgumentsCodeQueryParameter(errorsReasonArgumentsCode *string) {
	o.ErrorsReasonArgumentsCodeQueryParameter = errorsReasonArgumentsCode
}

// WithErrorsReasonArgumentsMessageQueryParameter adds the errorsReasonArgumentsMessage to the shelf collection get params
func (o *ShelfCollectionGetParams) WithErrorsReasonArgumentsMessageQueryParameter(errorsReasonArgumentsMessage *string) *ShelfCollectionGetParams {
	o.SetErrorsReasonArgumentsMessageQueryParameter(errorsReasonArgumentsMessage)
	return o
}

// SetErrorsReasonArgumentsMessageQueryParameter adds the errorsReasonArgumentsMessage to the shelf collection get params
func (o *ShelfCollectionGetParams) SetErrorsReasonArgumentsMessageQueryParameter(errorsReasonArgumentsMessage *string) {
	o.ErrorsReasonArgumentsMessageQueryParameter = errorsReasonArgumentsMessage
}

// WithErrorsReasonCodeQueryParameter adds the errorsReasonCode to the shelf collection get params
func (o *ShelfCollectionGetParams) WithErrorsReasonCodeQueryParameter(errorsReasonCode *string) *ShelfCollectionGetParams {
	o.SetErrorsReasonCodeQueryParameter(errorsReasonCode)
	return o
}

// SetErrorsReasonCodeQueryParameter adds the errorsReasonCode to the shelf collection get params
func (o *ShelfCollectionGetParams) SetErrorsReasonCodeQueryParameter(errorsReasonCode *string) {
	o.ErrorsReasonCodeQueryParameter = errorsReasonCode
}

// WithErrorsReasonMessageQueryParameter adds the errorsReasonMessage to the shelf collection get params
func (o *ShelfCollectionGetParams) WithErrorsReasonMessageQueryParameter(errorsReasonMessage *string) *ShelfCollectionGetParams {
	o.SetErrorsReasonMessageQueryParameter(errorsReasonMessage)
	return o
}

// SetErrorsReasonMessageQueryParameter adds the errorsReasonMessage to the shelf collection get params
func (o *ShelfCollectionGetParams) SetErrorsReasonMessageQueryParameter(errorsReasonMessage *string) {
	o.ErrorsReasonMessageQueryParameter = errorsReasonMessage
}

// WithErrorsReasonTargetQueryParameter adds the errorsReasonTarget to the shelf collection get params
func (o *ShelfCollectionGetParams) WithErrorsReasonTargetQueryParameter(errorsReasonTarget *string) *ShelfCollectionGetParams {
	o.SetErrorsReasonTargetQueryParameter(errorsReasonTarget)
	return o
}

// SetErrorsReasonTargetQueryParameter adds the errorsReasonTarget to the shelf collection get params
func (o *ShelfCollectionGetParams) SetErrorsReasonTargetQueryParameter(errorsReasonTarget *string) {
	o.ErrorsReasonTargetQueryParameter = errorsReasonTarget
}

// WithFansIDQueryParameter adds the fansID to the shelf collection get params
func (o *ShelfCollectionGetParams) WithFansIDQueryParameter(fansID *int64) *ShelfCollectionGetParams {
	o.SetFansIDQueryParameter(fansID)
	return o
}

// SetFansIDQueryParameter adds the fansId to the shelf collection get params
func (o *ShelfCollectionGetParams) SetFansIDQueryParameter(fansID *int64) {
	o.FansIDQueryParameter = fansID
}

// WithFansLocationQueryParameter adds the fansLocation to the shelf collection get params
func (o *ShelfCollectionGetParams) WithFansLocationQueryParameter(fansLocation *string) *ShelfCollectionGetParams {
	o.SetFansLocationQueryParameter(fansLocation)
	return o
}

// SetFansLocationQueryParameter adds the fansLocation to the shelf collection get params
func (o *ShelfCollectionGetParams) SetFansLocationQueryParameter(fansLocation *string) {
	o.FansLocationQueryParameter = fansLocation
}

// WithFansRpmQueryParameter adds the fansRpm to the shelf collection get params
func (o *ShelfCollectionGetParams) WithFansRpmQueryParameter(fansRpm *int64) *ShelfCollectionGetParams {
	o.SetFansRpmQueryParameter(fansRpm)
	return o
}

// SetFansRpmQueryParameter adds the fansRpm to the shelf collection get params
func (o *ShelfCollectionGetParams) SetFansRpmQueryParameter(fansRpm *int64) {
	o.FansRpmQueryParameter = fansRpm
}

// WithFansStateQueryParameter adds the fansState to the shelf collection get params
func (o *ShelfCollectionGetParams) WithFansStateQueryParameter(fansState *string) *ShelfCollectionGetParams {
	o.SetFansStateQueryParameter(fansState)
	return o
}

// SetFansStateQueryParameter adds the fansState to the shelf collection get params
func (o *ShelfCollectionGetParams) SetFansStateQueryParameter(fansState *string) {
	o.FansStateQueryParameter = fansState
}

// WithFieldsQueryParameter adds the fields to the shelf collection get params
func (o *ShelfCollectionGetParams) WithFieldsQueryParameter(fields []string) *ShelfCollectionGetParams {
	o.SetFieldsQueryParameter(fields)
	return o
}

// SetFieldsQueryParameter adds the fields to the shelf collection get params
func (o *ShelfCollectionGetParams) SetFieldsQueryParameter(fields []string) {
	o.FieldsQueryParameter = fields
}

// WithFrusFirmwareVersionQueryParameter adds the frusFirmwareVersion to the shelf collection get params
func (o *ShelfCollectionGetParams) WithFrusFirmwareVersionQueryParameter(frusFirmwareVersion *string) *ShelfCollectionGetParams {
	o.SetFrusFirmwareVersionQueryParameter(frusFirmwareVersion)
	return o
}

// SetFrusFirmwareVersionQueryParameter adds the frusFirmwareVersion to the shelf collection get params
func (o *ShelfCollectionGetParams) SetFrusFirmwareVersionQueryParameter(frusFirmwareVersion *string) {
	o.FrusFirmwareVersionQueryParameter = frusFirmwareVersion
}

// WithFrusIDQueryParameter adds the frusID to the shelf collection get params
func (o *ShelfCollectionGetParams) WithFrusIDQueryParameter(frusID *int64) *ShelfCollectionGetParams {
	o.SetFrusIDQueryParameter(frusID)
	return o
}

// SetFrusIDQueryParameter adds the frusId to the shelf collection get params
func (o *ShelfCollectionGetParams) SetFrusIDQueryParameter(frusID *int64) {
	o.FrusIDQueryParameter = frusID
}

// WithFrusInstalledQueryParameter adds the frusInstalled to the shelf collection get params
func (o *ShelfCollectionGetParams) WithFrusInstalledQueryParameter(frusInstalled *bool) *ShelfCollectionGetParams {
	o.SetFrusInstalledQueryParameter(frusInstalled)
	return o
}

// SetFrusInstalledQueryParameter adds the frusInstalled to the shelf collection get params
func (o *ShelfCollectionGetParams) SetFrusInstalledQueryParameter(frusInstalled *bool) {
	o.FrusInstalledQueryParameter = frusInstalled
}

// WithFrusPartNumberQueryParameter adds the frusPartNumber to the shelf collection get params
func (o *ShelfCollectionGetParams) WithFrusPartNumberQueryParameter(frusPartNumber *string) *ShelfCollectionGetParams {
	o.SetFrusPartNumberQueryParameter(frusPartNumber)
	return o
}

// SetFrusPartNumberQueryParameter adds the frusPartNumber to the shelf collection get params
func (o *ShelfCollectionGetParams) SetFrusPartNumberQueryParameter(frusPartNumber *string) {
	o.FrusPartNumberQueryParameter = frusPartNumber
}

// WithFrusPsuCrestFactorQueryParameter adds the frusPsuCrestFactor to the shelf collection get params
func (o *ShelfCollectionGetParams) WithFrusPsuCrestFactorQueryParameter(frusPsuCrestFactor *int64) *ShelfCollectionGetParams {
	o.SetFrusPsuCrestFactorQueryParameter(frusPsuCrestFactor)
	return o
}

// SetFrusPsuCrestFactorQueryParameter adds the frusPsuCrestFactor to the shelf collection get params
func (o *ShelfCollectionGetParams) SetFrusPsuCrestFactorQueryParameter(frusPsuCrestFactor *int64) {
	o.FrusPsuCrestFactorQueryParameter = frusPsuCrestFactor
}

// WithFrusPsuModelQueryParameter adds the frusPsuModel to the shelf collection get params
func (o *ShelfCollectionGetParams) WithFrusPsuModelQueryParameter(frusPsuModel *string) *ShelfCollectionGetParams {
	o.SetFrusPsuModelQueryParameter(frusPsuModel)
	return o
}

// SetFrusPsuModelQueryParameter adds the frusPsuModel to the shelf collection get params
func (o *ShelfCollectionGetParams) SetFrusPsuModelQueryParameter(frusPsuModel *string) {
	o.FrusPsuModelQueryParameter = frusPsuModel
}

// WithFrusPsuPowerDrawnQueryParameter adds the frusPsuPowerDrawn to the shelf collection get params
func (o *ShelfCollectionGetParams) WithFrusPsuPowerDrawnQueryParameter(frusPsuPowerDrawn *int64) *ShelfCollectionGetParams {
	o.SetFrusPsuPowerDrawnQueryParameter(frusPsuPowerDrawn)
	return o
}

// SetFrusPsuPowerDrawnQueryParameter adds the frusPsuPowerDrawn to the shelf collection get params
func (o *ShelfCollectionGetParams) SetFrusPsuPowerDrawnQueryParameter(frusPsuPowerDrawn *int64) {
	o.FrusPsuPowerDrawnQueryParameter = frusPsuPowerDrawn
}

// WithFrusPsuPowerRatingQueryParameter adds the frusPsuPowerRating to the shelf collection get params
func (o *ShelfCollectionGetParams) WithFrusPsuPowerRatingQueryParameter(frusPsuPowerRating *int64) *ShelfCollectionGetParams {
	o.SetFrusPsuPowerRatingQueryParameter(frusPsuPowerRating)
	return o
}

// SetFrusPsuPowerRatingQueryParameter adds the frusPsuPowerRating to the shelf collection get params
func (o *ShelfCollectionGetParams) SetFrusPsuPowerRatingQueryParameter(frusPsuPowerRating *int64) {
	o.FrusPsuPowerRatingQueryParameter = frusPsuPowerRating
}

// WithFrusSerialNumberQueryParameter adds the frusSerialNumber to the shelf collection get params
func (o *ShelfCollectionGetParams) WithFrusSerialNumberQueryParameter(frusSerialNumber *string) *ShelfCollectionGetParams {
	o.SetFrusSerialNumberQueryParameter(frusSerialNumber)
	return o
}

// SetFrusSerialNumberQueryParameter adds the frusSerialNumber to the shelf collection get params
func (o *ShelfCollectionGetParams) SetFrusSerialNumberQueryParameter(frusSerialNumber *string) {
	o.FrusSerialNumberQueryParameter = frusSerialNumber
}

// WithFrusStateQueryParameter adds the frusState to the shelf collection get params
func (o *ShelfCollectionGetParams) WithFrusStateQueryParameter(frusState *string) *ShelfCollectionGetParams {
	o.SetFrusStateQueryParameter(frusState)
	return o
}

// SetFrusStateQueryParameter adds the frusState to the shelf collection get params
func (o *ShelfCollectionGetParams) SetFrusStateQueryParameter(frusState *string) {
	o.FrusStateQueryParameter = frusState
}

// WithFrusTypeQueryParameter adds the frusType to the shelf collection get params
func (o *ShelfCollectionGetParams) WithFrusTypeQueryParameter(frusType *string) *ShelfCollectionGetParams {
	o.SetFrusTypeQueryParameter(frusType)
	return o
}

// SetFrusTypeQueryParameter adds the frusType to the shelf collection get params
func (o *ShelfCollectionGetParams) SetFrusTypeQueryParameter(frusType *string) {
	o.FrusTypeQueryParameter = frusType
}

// WithIDQueryParameter adds the id to the shelf collection get params
func (o *ShelfCollectionGetParams) WithIDQueryParameter(id *string) *ShelfCollectionGetParams {
	o.SetIDQueryParameter(id)
	return o
}

// SetIDQueryParameter adds the id to the shelf collection get params
func (o *ShelfCollectionGetParams) SetIDQueryParameter(id *string) {
	o.IDQueryParameter = id
}

// WithInternalQueryParameter adds the internal to the shelf collection get params
func (o *ShelfCollectionGetParams) WithInternalQueryParameter(internal *bool) *ShelfCollectionGetParams {
	o.SetInternalQueryParameter(internal)
	return o
}

// SetInternalQueryParameter adds the internal to the shelf collection get params
func (o *ShelfCollectionGetParams) SetInternalQueryParameter(internal *bool) {
	o.InternalQueryParameter = internal
}

// WithLocalQueryParameter adds the local to the shelf collection get params
func (o *ShelfCollectionGetParams) WithLocalQueryParameter(local *bool) *ShelfCollectionGetParams {
	o.SetLocalQueryParameter(local)
	return o
}

// SetLocalQueryParameter adds the local to the shelf collection get params
func (o *ShelfCollectionGetParams) SetLocalQueryParameter(local *bool) {
	o.LocalQueryParameter = local
}

// WithLocationLedQueryParameter adds the locationLed to the shelf collection get params
func (o *ShelfCollectionGetParams) WithLocationLedQueryParameter(locationLed *string) *ShelfCollectionGetParams {
	o.SetLocationLedQueryParameter(locationLed)
	return o
}

// SetLocationLedQueryParameter adds the locationLed to the shelf collection get params
func (o *ShelfCollectionGetParams) SetLocationLedQueryParameter(locationLed *string) {
	o.LocationLedQueryParameter = locationLed
}

// WithManufacturerNameQueryParameter adds the manufacturerName to the shelf collection get params
func (o *ShelfCollectionGetParams) WithManufacturerNameQueryParameter(manufacturerName *string) *ShelfCollectionGetParams {
	o.SetManufacturerNameQueryParameter(manufacturerName)
	return o
}

// SetManufacturerNameQueryParameter adds the manufacturerName to the shelf collection get params
func (o *ShelfCollectionGetParams) SetManufacturerNameQueryParameter(manufacturerName *string) {
	o.ManufacturerNameQueryParameter = manufacturerName
}

// WithMaxRecordsQueryParameter adds the maxRecords to the shelf collection get params
func (o *ShelfCollectionGetParams) WithMaxRecordsQueryParameter(maxRecords *int64) *ShelfCollectionGetParams {
	o.SetMaxRecordsQueryParameter(maxRecords)
	return o
}

// SetMaxRecordsQueryParameter adds the maxRecords to the shelf collection get params
func (o *ShelfCollectionGetParams) SetMaxRecordsQueryParameter(maxRecords *int64) {
	o.MaxRecordsQueryParameter = maxRecords
}

// WithModelQueryParameter adds the model to the shelf collection get params
func (o *ShelfCollectionGetParams) WithModelQueryParameter(model *string) *ShelfCollectionGetParams {
	o.SetModelQueryParameter(model)
	return o
}

// SetModelQueryParameter adds the model to the shelf collection get params
func (o *ShelfCollectionGetParams) SetModelQueryParameter(model *string) {
	o.ModelQueryParameter = model
}

// WithModuleTypeQueryParameter adds the moduleType to the shelf collection get params
func (o *ShelfCollectionGetParams) WithModuleTypeQueryParameter(moduleType *string) *ShelfCollectionGetParams {
	o.SetModuleTypeQueryParameter(moduleType)
	return o
}

// SetModuleTypeQueryParameter adds the moduleType to the shelf collection get params
func (o *ShelfCollectionGetParams) SetModuleTypeQueryParameter(moduleType *string) {
	o.ModuleTypeQueryParameter = moduleType
}

// WithNameQueryParameter adds the name to the shelf collection get params
func (o *ShelfCollectionGetParams) WithNameQueryParameter(name *string) *ShelfCollectionGetParams {
	o.SetNameQueryParameter(name)
	return o
}

// SetNameQueryParameter adds the name to the shelf collection get params
func (o *ShelfCollectionGetParams) SetNameQueryParameter(name *string) {
	o.NameQueryParameter = name
}

// WithOrderByQueryParameter adds the orderBy to the shelf collection get params
func (o *ShelfCollectionGetParams) WithOrderByQueryParameter(orderBy []string) *ShelfCollectionGetParams {
	o.SetOrderByQueryParameter(orderBy)
	return o
}

// SetOrderByQueryParameter adds the orderBy to the shelf collection get params
func (o *ShelfCollectionGetParams) SetOrderByQueryParameter(orderBy []string) {
	o.OrderByQueryParameter = orderBy
}

// WithPathsNameQueryParameter adds the pathsName to the shelf collection get params
func (o *ShelfCollectionGetParams) WithPathsNameQueryParameter(pathsName *string) *ShelfCollectionGetParams {
	o.SetPathsNameQueryParameter(pathsName)
	return o
}

// SetPathsNameQueryParameter adds the pathsName to the shelf collection get params
func (o *ShelfCollectionGetParams) SetPathsNameQueryParameter(pathsName *string) {
	o.PathsNameQueryParameter = pathsName
}

// WithPathsNodeNameQueryParameter adds the pathsNodeName to the shelf collection get params
func (o *ShelfCollectionGetParams) WithPathsNodeNameQueryParameter(pathsNodeName *string) *ShelfCollectionGetParams {
	o.SetPathsNodeNameQueryParameter(pathsNodeName)
	return o
}

// SetPathsNodeNameQueryParameter adds the pathsNodeName to the shelf collection get params
func (o *ShelfCollectionGetParams) SetPathsNodeNameQueryParameter(pathsNodeName *string) {
	o.PathsNodeNameQueryParameter = pathsNodeName
}

// WithPathsNodeUUIDQueryParameter adds the pathsNodeUUID to the shelf collection get params
func (o *ShelfCollectionGetParams) WithPathsNodeUUIDQueryParameter(pathsNodeUUID *string) *ShelfCollectionGetParams {
	o.SetPathsNodeUUIDQueryParameter(pathsNodeUUID)
	return o
}

// SetPathsNodeUUIDQueryParameter adds the pathsNodeUuid to the shelf collection get params
func (o *ShelfCollectionGetParams) SetPathsNodeUUIDQueryParameter(pathsNodeUUID *string) {
	o.PathsNodeUUIDQueryParameter = pathsNodeUUID
}

// WithPortsCableIDentifierQueryParameter adds the portsCableIdentifier to the shelf collection get params
func (o *ShelfCollectionGetParams) WithPortsCableIDentifierQueryParameter(portsCableIdentifier *string) *ShelfCollectionGetParams {
	o.SetPortsCableIDentifierQueryParameter(portsCableIdentifier)
	return o
}

// SetPortsCableIDentifierQueryParameter adds the portsCableIdentifier to the shelf collection get params
func (o *ShelfCollectionGetParams) SetPortsCableIDentifierQueryParameter(portsCableIdentifier *string) {
	o.PortsCableIDentifierQueryParameter = portsCableIdentifier
}

// WithPortsCableLengthQueryParameter adds the portsCableLength to the shelf collection get params
func (o *ShelfCollectionGetParams) WithPortsCableLengthQueryParameter(portsCableLength *string) *ShelfCollectionGetParams {
	o.SetPortsCableLengthQueryParameter(portsCableLength)
	return o
}

// SetPortsCableLengthQueryParameter adds the portsCableLength to the shelf collection get params
func (o *ShelfCollectionGetParams) SetPortsCableLengthQueryParameter(portsCableLength *string) {
	o.PortsCableLengthQueryParameter = portsCableLength
}

// WithPortsCablePartNumberQueryParameter adds the portsCablePartNumber to the shelf collection get params
func (o *ShelfCollectionGetParams) WithPortsCablePartNumberQueryParameter(portsCablePartNumber *string) *ShelfCollectionGetParams {
	o.SetPortsCablePartNumberQueryParameter(portsCablePartNumber)
	return o
}

// SetPortsCablePartNumberQueryParameter adds the portsCablePartNumber to the shelf collection get params
func (o *ShelfCollectionGetParams) SetPortsCablePartNumberQueryParameter(portsCablePartNumber *string) {
	o.PortsCablePartNumberQueryParameter = portsCablePartNumber
}

// WithPortsCableSerialNumberQueryParameter adds the portsCableSerialNumber to the shelf collection get params
func (o *ShelfCollectionGetParams) WithPortsCableSerialNumberQueryParameter(portsCableSerialNumber *string) *ShelfCollectionGetParams {
	o.SetPortsCableSerialNumberQueryParameter(portsCableSerialNumber)
	return o
}

// SetPortsCableSerialNumberQueryParameter adds the portsCableSerialNumber to the shelf collection get params
func (o *ShelfCollectionGetParams) SetPortsCableSerialNumberQueryParameter(portsCableSerialNumber *string) {
	o.PortsCableSerialNumberQueryParameter = portsCableSerialNumber
}

// WithPortsDesignatorQueryParameter adds the portsDesignator to the shelf collection get params
func (o *ShelfCollectionGetParams) WithPortsDesignatorQueryParameter(portsDesignator *string) *ShelfCollectionGetParams {
	o.SetPortsDesignatorQueryParameter(portsDesignator)
	return o
}

// SetPortsDesignatorQueryParameter adds the portsDesignator to the shelf collection get params
func (o *ShelfCollectionGetParams) SetPortsDesignatorQueryParameter(portsDesignator *string) {
	o.PortsDesignatorQueryParameter = portsDesignator
}

// WithPortsIDQueryParameter adds the portsID to the shelf collection get params
func (o *ShelfCollectionGetParams) WithPortsIDQueryParameter(portsID *int64) *ShelfCollectionGetParams {
	o.SetPortsIDQueryParameter(portsID)
	return o
}

// SetPortsIDQueryParameter adds the portsId to the shelf collection get params
func (o *ShelfCollectionGetParams) SetPortsIDQueryParameter(portsID *int64) {
	o.PortsIDQueryParameter = portsID
}

// WithPortsInternalQueryParameter adds the portsInternal to the shelf collection get params
func (o *ShelfCollectionGetParams) WithPortsInternalQueryParameter(portsInternal *bool) *ShelfCollectionGetParams {
	o.SetPortsInternalQueryParameter(portsInternal)
	return o
}

// SetPortsInternalQueryParameter adds the portsInternal to the shelf collection get params
func (o *ShelfCollectionGetParams) SetPortsInternalQueryParameter(portsInternal *bool) {
	o.PortsInternalQueryParameter = portsInternal
}

// WithPortsMacAddressQueryParameter adds the portsMacAddress to the shelf collection get params
func (o *ShelfCollectionGetParams) WithPortsMacAddressQueryParameter(portsMacAddress *string) *ShelfCollectionGetParams {
	o.SetPortsMacAddressQueryParameter(portsMacAddress)
	return o
}

// SetPortsMacAddressQueryParameter adds the portsMacAddress to the shelf collection get params
func (o *ShelfCollectionGetParams) SetPortsMacAddressQueryParameter(portsMacAddress *string) {
	o.PortsMacAddressQueryParameter = portsMacAddress
}

// WithPortsModuleIDQueryParameter adds the portsModuleID to the shelf collection get params
func (o *ShelfCollectionGetParams) WithPortsModuleIDQueryParameter(portsModuleID *string) *ShelfCollectionGetParams {
	o.SetPortsModuleIDQueryParameter(portsModuleID)
	return o
}

// SetPortsModuleIDQueryParameter adds the portsModuleId to the shelf collection get params
func (o *ShelfCollectionGetParams) SetPortsModuleIDQueryParameter(portsModuleID *string) {
	o.PortsModuleIDQueryParameter = portsModuleID
}

// WithPortsRemoteChassisQueryParameter adds the portsRemoteChassis to the shelf collection get params
func (o *ShelfCollectionGetParams) WithPortsRemoteChassisQueryParameter(portsRemoteChassis *string) *ShelfCollectionGetParams {
	o.SetPortsRemoteChassisQueryParameter(portsRemoteChassis)
	return o
}

// SetPortsRemoteChassisQueryParameter adds the portsRemoteChassis to the shelf collection get params
func (o *ShelfCollectionGetParams) SetPortsRemoteChassisQueryParameter(portsRemoteChassis *string) {
	o.PortsRemoteChassisQueryParameter = portsRemoteChassis
}

// WithPortsRemoteDeviceQueryParameter adds the portsRemoteDevice to the shelf collection get params
func (o *ShelfCollectionGetParams) WithPortsRemoteDeviceQueryParameter(portsRemoteDevice *string) *ShelfCollectionGetParams {
	o.SetPortsRemoteDeviceQueryParameter(portsRemoteDevice)
	return o
}

// SetPortsRemoteDeviceQueryParameter adds the portsRemoteDevice to the shelf collection get params
func (o *ShelfCollectionGetParams) SetPortsRemoteDeviceQueryParameter(portsRemoteDevice *string) {
	o.PortsRemoteDeviceQueryParameter = portsRemoteDevice
}

// WithPortsRemoteMacAddressQueryParameter adds the portsRemoteMacAddress to the shelf collection get params
func (o *ShelfCollectionGetParams) WithPortsRemoteMacAddressQueryParameter(portsRemoteMacAddress *string) *ShelfCollectionGetParams {
	o.SetPortsRemoteMacAddressQueryParameter(portsRemoteMacAddress)
	return o
}

// SetPortsRemoteMacAddressQueryParameter adds the portsRemoteMacAddress to the shelf collection get params
func (o *ShelfCollectionGetParams) SetPortsRemoteMacAddressQueryParameter(portsRemoteMacAddress *string) {
	o.PortsRemoteMacAddressQueryParameter = portsRemoteMacAddress
}

// WithPortsRemotePhyQueryParameter adds the portsRemotePhy to the shelf collection get params
func (o *ShelfCollectionGetParams) WithPortsRemotePhyQueryParameter(portsRemotePhy *string) *ShelfCollectionGetParams {
	o.SetPortsRemotePhyQueryParameter(portsRemotePhy)
	return o
}

// SetPortsRemotePhyQueryParameter adds the portsRemotePhy to the shelf collection get params
func (o *ShelfCollectionGetParams) SetPortsRemotePhyQueryParameter(portsRemotePhy *string) {
	o.PortsRemotePhyQueryParameter = portsRemotePhy
}

// WithPortsRemotePortQueryParameter adds the portsRemotePort to the shelf collection get params
func (o *ShelfCollectionGetParams) WithPortsRemotePortQueryParameter(portsRemotePort *string) *ShelfCollectionGetParams {
	o.SetPortsRemotePortQueryParameter(portsRemotePort)
	return o
}

// SetPortsRemotePortQueryParameter adds the portsRemotePort to the shelf collection get params
func (o *ShelfCollectionGetParams) SetPortsRemotePortQueryParameter(portsRemotePort *string) {
	o.PortsRemotePortQueryParameter = portsRemotePort
}

// WithPortsRemoteWwnQueryParameter adds the portsRemoteWwn to the shelf collection get params
func (o *ShelfCollectionGetParams) WithPortsRemoteWwnQueryParameter(portsRemoteWwn *string) *ShelfCollectionGetParams {
	o.SetPortsRemoteWwnQueryParameter(portsRemoteWwn)
	return o
}

// SetPortsRemoteWwnQueryParameter adds the portsRemoteWwn to the shelf collection get params
func (o *ShelfCollectionGetParams) SetPortsRemoteWwnQueryParameter(portsRemoteWwn *string) {
	o.PortsRemoteWwnQueryParameter = portsRemoteWwn
}

// WithPortsStateQueryParameter adds the portsState to the shelf collection get params
func (o *ShelfCollectionGetParams) WithPortsStateQueryParameter(portsState *string) *ShelfCollectionGetParams {
	o.SetPortsStateQueryParameter(portsState)
	return o
}

// SetPortsStateQueryParameter adds the portsState to the shelf collection get params
func (o *ShelfCollectionGetParams) SetPortsStateQueryParameter(portsState *string) {
	o.PortsStateQueryParameter = portsState
}

// WithPortsWwnQueryParameter adds the portsWwn to the shelf collection get params
func (o *ShelfCollectionGetParams) WithPortsWwnQueryParameter(portsWwn *string) *ShelfCollectionGetParams {
	o.SetPortsWwnQueryParameter(portsWwn)
	return o
}

// SetPortsWwnQueryParameter adds the portsWwn to the shelf collection get params
func (o *ShelfCollectionGetParams) SetPortsWwnQueryParameter(portsWwn *string) {
	o.PortsWwnQueryParameter = portsWwn
}

// WithReturnRecordsQueryParameter adds the returnRecords to the shelf collection get params
func (o *ShelfCollectionGetParams) WithReturnRecordsQueryParameter(returnRecords *bool) *ShelfCollectionGetParams {
	o.SetReturnRecordsQueryParameter(returnRecords)
	return o
}

// SetReturnRecordsQueryParameter adds the returnRecords to the shelf collection get params
func (o *ShelfCollectionGetParams) SetReturnRecordsQueryParameter(returnRecords *bool) {
	o.ReturnRecordsQueryParameter = returnRecords
}

// WithReturnTimeoutQueryParameter adds the returnTimeout to the shelf collection get params
func (o *ShelfCollectionGetParams) WithReturnTimeoutQueryParameter(returnTimeout *int64) *ShelfCollectionGetParams {
	o.SetReturnTimeoutQueryParameter(returnTimeout)
	return o
}

// SetReturnTimeoutQueryParameter adds the returnTimeout to the shelf collection get params
func (o *ShelfCollectionGetParams) SetReturnTimeoutQueryParameter(returnTimeout *int64) {
	o.ReturnTimeoutQueryParameter = returnTimeout
}

// WithSerialNumberQueryParameter adds the serialNumber to the shelf collection get params
func (o *ShelfCollectionGetParams) WithSerialNumberQueryParameter(serialNumber *string) *ShelfCollectionGetParams {
	o.SetSerialNumberQueryParameter(serialNumber)
	return o
}

// SetSerialNumberQueryParameter adds the serialNumber to the shelf collection get params
func (o *ShelfCollectionGetParams) SetSerialNumberQueryParameter(serialNumber *string) {
	o.SerialNumberQueryParameter = serialNumber
}

// WithStateQueryParameter adds the state to the shelf collection get params
func (o *ShelfCollectionGetParams) WithStateQueryParameter(state *string) *ShelfCollectionGetParams {
	o.SetStateQueryParameter(state)
	return o
}

// SetStateQueryParameter adds the state to the shelf collection get params
func (o *ShelfCollectionGetParams) SetStateQueryParameter(state *string) {
	o.StateQueryParameter = state
}

// WithTemperatureSensorsAmbientQueryParameter adds the temperatureSensorsAmbient to the shelf collection get params
func (o *ShelfCollectionGetParams) WithTemperatureSensorsAmbientQueryParameter(temperatureSensorsAmbient *bool) *ShelfCollectionGetParams {
	o.SetTemperatureSensorsAmbientQueryParameter(temperatureSensorsAmbient)
	return o
}

// SetTemperatureSensorsAmbientQueryParameter adds the temperatureSensorsAmbient to the shelf collection get params
func (o *ShelfCollectionGetParams) SetTemperatureSensorsAmbientQueryParameter(temperatureSensorsAmbient *bool) {
	o.TemperatureSensorsAmbientQueryParameter = temperatureSensorsAmbient
}

// WithTemperatureSensorsIDQueryParameter adds the temperatureSensorsID to the shelf collection get params
func (o *ShelfCollectionGetParams) WithTemperatureSensorsIDQueryParameter(temperatureSensorsID *int64) *ShelfCollectionGetParams {
	o.SetTemperatureSensorsIDQueryParameter(temperatureSensorsID)
	return o
}

// SetTemperatureSensorsIDQueryParameter adds the temperatureSensorsId to the shelf collection get params
func (o *ShelfCollectionGetParams) SetTemperatureSensorsIDQueryParameter(temperatureSensorsID *int64) {
	o.TemperatureSensorsIDQueryParameter = temperatureSensorsID
}

// WithTemperatureSensorsLocationQueryParameter adds the temperatureSensorsLocation to the shelf collection get params
func (o *ShelfCollectionGetParams) WithTemperatureSensorsLocationQueryParameter(temperatureSensorsLocation *string) *ShelfCollectionGetParams {
	o.SetTemperatureSensorsLocationQueryParameter(temperatureSensorsLocation)
	return o
}

// SetTemperatureSensorsLocationQueryParameter adds the temperatureSensorsLocation to the shelf collection get params
func (o *ShelfCollectionGetParams) SetTemperatureSensorsLocationQueryParameter(temperatureSensorsLocation *string) {
	o.TemperatureSensorsLocationQueryParameter = temperatureSensorsLocation
}

// WithTemperatureSensorsStateQueryParameter adds the temperatureSensorsState to the shelf collection get params
func (o *ShelfCollectionGetParams) WithTemperatureSensorsStateQueryParameter(temperatureSensorsState *string) *ShelfCollectionGetParams {
	o.SetTemperatureSensorsStateQueryParameter(temperatureSensorsState)
	return o
}

// SetTemperatureSensorsStateQueryParameter adds the temperatureSensorsState to the shelf collection get params
func (o *ShelfCollectionGetParams) SetTemperatureSensorsStateQueryParameter(temperatureSensorsState *string) {
	o.TemperatureSensorsStateQueryParameter = temperatureSensorsState
}

// WithTemperatureSensorsTemperatureQueryParameter adds the temperatureSensorsTemperature to the shelf collection get params
func (o *ShelfCollectionGetParams) WithTemperatureSensorsTemperatureQueryParameter(temperatureSensorsTemperature *int64) *ShelfCollectionGetParams {
	o.SetTemperatureSensorsTemperatureQueryParameter(temperatureSensorsTemperature)
	return o
}

// SetTemperatureSensorsTemperatureQueryParameter adds the temperatureSensorsTemperature to the shelf collection get params
func (o *ShelfCollectionGetParams) SetTemperatureSensorsTemperatureQueryParameter(temperatureSensorsTemperature *int64) {
	o.TemperatureSensorsTemperatureQueryParameter = temperatureSensorsTemperature
}

// WithTemperatureSensorsThresholdHighCriticalQueryParameter adds the temperatureSensorsThresholdHighCritical to the shelf collection get params
func (o *ShelfCollectionGetParams) WithTemperatureSensorsThresholdHighCriticalQueryParameter(temperatureSensorsThresholdHighCritical *int64) *ShelfCollectionGetParams {
	o.SetTemperatureSensorsThresholdHighCriticalQueryParameter(temperatureSensorsThresholdHighCritical)
	return o
}

// SetTemperatureSensorsThresholdHighCriticalQueryParameter adds the temperatureSensorsThresholdHighCritical to the shelf collection get params
func (o *ShelfCollectionGetParams) SetTemperatureSensorsThresholdHighCriticalQueryParameter(temperatureSensorsThresholdHighCritical *int64) {
	o.TemperatureSensorsThresholdHighCriticalQueryParameter = temperatureSensorsThresholdHighCritical
}

// WithTemperatureSensorsThresholdHighWarningQueryParameter adds the temperatureSensorsThresholdHighWarning to the shelf collection get params
func (o *ShelfCollectionGetParams) WithTemperatureSensorsThresholdHighWarningQueryParameter(temperatureSensorsThresholdHighWarning *int64) *ShelfCollectionGetParams {
	o.SetTemperatureSensorsThresholdHighWarningQueryParameter(temperatureSensorsThresholdHighWarning)
	return o
}

// SetTemperatureSensorsThresholdHighWarningQueryParameter adds the temperatureSensorsThresholdHighWarning to the shelf collection get params
func (o *ShelfCollectionGetParams) SetTemperatureSensorsThresholdHighWarningQueryParameter(temperatureSensorsThresholdHighWarning *int64) {
	o.TemperatureSensorsThresholdHighWarningQueryParameter = temperatureSensorsThresholdHighWarning
}

// WithTemperatureSensorsThresholdLowCriticalQueryParameter adds the temperatureSensorsThresholdLowCritical to the shelf collection get params
func (o *ShelfCollectionGetParams) WithTemperatureSensorsThresholdLowCriticalQueryParameter(temperatureSensorsThresholdLowCritical *int64) *ShelfCollectionGetParams {
	o.SetTemperatureSensorsThresholdLowCriticalQueryParameter(temperatureSensorsThresholdLowCritical)
	return o
}

// SetTemperatureSensorsThresholdLowCriticalQueryParameter adds the temperatureSensorsThresholdLowCritical to the shelf collection get params
func (o *ShelfCollectionGetParams) SetTemperatureSensorsThresholdLowCriticalQueryParameter(temperatureSensorsThresholdLowCritical *int64) {
	o.TemperatureSensorsThresholdLowCriticalQueryParameter = temperatureSensorsThresholdLowCritical
}

// WithTemperatureSensorsThresholdLowWarningQueryParameter adds the temperatureSensorsThresholdLowWarning to the shelf collection get params
func (o *ShelfCollectionGetParams) WithTemperatureSensorsThresholdLowWarningQueryParameter(temperatureSensorsThresholdLowWarning *int64) *ShelfCollectionGetParams {
	o.SetTemperatureSensorsThresholdLowWarningQueryParameter(temperatureSensorsThresholdLowWarning)
	return o
}

// SetTemperatureSensorsThresholdLowWarningQueryParameter adds the temperatureSensorsThresholdLowWarning to the shelf collection get params
func (o *ShelfCollectionGetParams) SetTemperatureSensorsThresholdLowWarningQueryParameter(temperatureSensorsThresholdLowWarning *int64) {
	o.TemperatureSensorsThresholdLowWarningQueryParameter = temperatureSensorsThresholdLowWarning
}

// WithUIDQueryParameter adds the uid to the shelf collection get params
func (o *ShelfCollectionGetParams) WithUIDQueryParameter(uid *string) *ShelfCollectionGetParams {
	o.SetUIDQueryParameter(uid)
	return o
}

// SetUIDQueryParameter adds the uid to the shelf collection get params
func (o *ShelfCollectionGetParams) SetUIDQueryParameter(uid *string) {
	o.UIDQueryParameter = uid
}

// WithVendorManufacturerQueryParameter adds the vendorManufacturer to the shelf collection get params
func (o *ShelfCollectionGetParams) WithVendorManufacturerQueryParameter(vendorManufacturer *string) *ShelfCollectionGetParams {
	o.SetVendorManufacturerQueryParameter(vendorManufacturer)
	return o
}

// SetVendorManufacturerQueryParameter adds the vendorManufacturer to the shelf collection get params
func (o *ShelfCollectionGetParams) SetVendorManufacturerQueryParameter(vendorManufacturer *string) {
	o.VendorManufacturerQueryParameter = vendorManufacturer
}

// WithVendorNameQueryParameter adds the vendorName to the shelf collection get params
func (o *ShelfCollectionGetParams) WithVendorNameQueryParameter(vendorName *string) *ShelfCollectionGetParams {
	o.SetVendorNameQueryParameter(vendorName)
	return o
}

// SetVendorNameQueryParameter adds the vendorName to the shelf collection get params
func (o *ShelfCollectionGetParams) SetVendorNameQueryParameter(vendorName *string) {
	o.VendorNameQueryParameter = vendorName
}

// WithVendorPartNumberQueryParameter adds the vendorPartNumber to the shelf collection get params
func (o *ShelfCollectionGetParams) WithVendorPartNumberQueryParameter(vendorPartNumber *string) *ShelfCollectionGetParams {
	o.SetVendorPartNumberQueryParameter(vendorPartNumber)
	return o
}

// SetVendorPartNumberQueryParameter adds the vendorPartNumber to the shelf collection get params
func (o *ShelfCollectionGetParams) SetVendorPartNumberQueryParameter(vendorPartNumber *string) {
	o.VendorPartNumberQueryParameter = vendorPartNumber
}

// WithVendorProductQueryParameter adds the vendorProduct to the shelf collection get params
func (o *ShelfCollectionGetParams) WithVendorProductQueryParameter(vendorProduct *string) *ShelfCollectionGetParams {
	o.SetVendorProductQueryParameter(vendorProduct)
	return o
}

// SetVendorProductQueryParameter adds the vendorProduct to the shelf collection get params
func (o *ShelfCollectionGetParams) SetVendorProductQueryParameter(vendorProduct *string) {
	o.VendorProductQueryParameter = vendorProduct
}

// WithVendorSerialNumberQueryParameter adds the vendorSerialNumber to the shelf collection get params
func (o *ShelfCollectionGetParams) WithVendorSerialNumberQueryParameter(vendorSerialNumber *string) *ShelfCollectionGetParams {
	o.SetVendorSerialNumberQueryParameter(vendorSerialNumber)
	return o
}

// SetVendorSerialNumberQueryParameter adds the vendorSerialNumber to the shelf collection get params
func (o *ShelfCollectionGetParams) SetVendorSerialNumberQueryParameter(vendorSerialNumber *string) {
	o.VendorSerialNumberQueryParameter = vendorSerialNumber
}

// WithVoltageSensorsIDQueryParameter adds the voltageSensorsID to the shelf collection get params
func (o *ShelfCollectionGetParams) WithVoltageSensorsIDQueryParameter(voltageSensorsID *int64) *ShelfCollectionGetParams {
	o.SetVoltageSensorsIDQueryParameter(voltageSensorsID)
	return o
}

// SetVoltageSensorsIDQueryParameter adds the voltageSensorsId to the shelf collection get params
func (o *ShelfCollectionGetParams) SetVoltageSensorsIDQueryParameter(voltageSensorsID *int64) {
	o.VoltageSensorsIDQueryParameter = voltageSensorsID
}

// WithVoltageSensorsLocationQueryParameter adds the voltageSensorsLocation to the shelf collection get params
func (o *ShelfCollectionGetParams) WithVoltageSensorsLocationQueryParameter(voltageSensorsLocation *string) *ShelfCollectionGetParams {
	o.SetVoltageSensorsLocationQueryParameter(voltageSensorsLocation)
	return o
}

// SetVoltageSensorsLocationQueryParameter adds the voltageSensorsLocation to the shelf collection get params
func (o *ShelfCollectionGetParams) SetVoltageSensorsLocationQueryParameter(voltageSensorsLocation *string) {
	o.VoltageSensorsLocationQueryParameter = voltageSensorsLocation
}

// WithVoltageSensorsStateQueryParameter adds the voltageSensorsState to the shelf collection get params
func (o *ShelfCollectionGetParams) WithVoltageSensorsStateQueryParameter(voltageSensorsState *string) *ShelfCollectionGetParams {
	o.SetVoltageSensorsStateQueryParameter(voltageSensorsState)
	return o
}

// SetVoltageSensorsStateQueryParameter adds the voltageSensorsState to the shelf collection get params
func (o *ShelfCollectionGetParams) SetVoltageSensorsStateQueryParameter(voltageSensorsState *string) {
	o.VoltageSensorsStateQueryParameter = voltageSensorsState
}

// WithVoltageSensorsVoltageQueryParameter adds the voltageSensorsVoltage to the shelf collection get params
func (o *ShelfCollectionGetParams) WithVoltageSensorsVoltageQueryParameter(voltageSensorsVoltage *float64) *ShelfCollectionGetParams {
	o.SetVoltageSensorsVoltageQueryParameter(voltageSensorsVoltage)
	return o
}

// SetVoltageSensorsVoltageQueryParameter adds the voltageSensorsVoltage to the shelf collection get params
func (o *ShelfCollectionGetParams) SetVoltageSensorsVoltageQueryParameter(voltageSensorsVoltage *float64) {
	o.VoltageSensorsVoltageQueryParameter = voltageSensorsVoltage
}

// WriteToRequest writes these params to a swagger request
func (o *ShelfCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AcpsAddressQueryParameter != nil {

		// query param acps.address
		var qrAcpsAddress string

		if o.AcpsAddressQueryParameter != nil {
			qrAcpsAddress = *o.AcpsAddressQueryParameter
		}
		qAcpsAddress := qrAcpsAddress
		if qAcpsAddress != "" {

			if err := r.SetQueryParam("acps.address", qAcpsAddress); err != nil {
				return err
			}
		}
	}

	if o.AcpsChannelQueryParameter != nil {

		// query param acps.channel
		var qrAcpsChannel string

		if o.AcpsChannelQueryParameter != nil {
			qrAcpsChannel = *o.AcpsChannelQueryParameter
		}
		qAcpsChannel := qrAcpsChannel
		if qAcpsChannel != "" {

			if err := r.SetQueryParam("acps.channel", qAcpsChannel); err != nil {
				return err
			}
		}
	}

	if o.AcpsConnectionStateQueryParameter != nil {

		// query param acps.connection_state
		var qrAcpsConnectionState string

		if o.AcpsConnectionStateQueryParameter != nil {
			qrAcpsConnectionState = *o.AcpsConnectionStateQueryParameter
		}
		qAcpsConnectionState := qrAcpsConnectionState
		if qAcpsConnectionState != "" {

			if err := r.SetQueryParam("acps.connection_state", qAcpsConnectionState); err != nil {
				return err
			}
		}
	}

	if o.AcpsEnabledQueryParameter != nil {

		// query param acps.enabled
		var qrAcpsEnabled bool

		if o.AcpsEnabledQueryParameter != nil {
			qrAcpsEnabled = *o.AcpsEnabledQueryParameter
		}
		qAcpsEnabled := swag.FormatBool(qrAcpsEnabled)
		if qAcpsEnabled != "" {

			if err := r.SetQueryParam("acps.enabled", qAcpsEnabled); err != nil {
				return err
			}
		}
	}

	if o.AcpsErrorReasonArgumentsCodeQueryParameter != nil {

		// query param acps.error.reason.arguments.code
		var qrAcpsErrorReasonArgumentsCode string

		if o.AcpsErrorReasonArgumentsCodeQueryParameter != nil {
			qrAcpsErrorReasonArgumentsCode = *o.AcpsErrorReasonArgumentsCodeQueryParameter
		}
		qAcpsErrorReasonArgumentsCode := qrAcpsErrorReasonArgumentsCode
		if qAcpsErrorReasonArgumentsCode != "" {

			if err := r.SetQueryParam("acps.error.reason.arguments.code", qAcpsErrorReasonArgumentsCode); err != nil {
				return err
			}
		}
	}

	if o.AcpsErrorReasonArgumentsMessageQueryParameter != nil {

		// query param acps.error.reason.arguments.message
		var qrAcpsErrorReasonArgumentsMessage string

		if o.AcpsErrorReasonArgumentsMessageQueryParameter != nil {
			qrAcpsErrorReasonArgumentsMessage = *o.AcpsErrorReasonArgumentsMessageQueryParameter
		}
		qAcpsErrorReasonArgumentsMessage := qrAcpsErrorReasonArgumentsMessage
		if qAcpsErrorReasonArgumentsMessage != "" {

			if err := r.SetQueryParam("acps.error.reason.arguments.message", qAcpsErrorReasonArgumentsMessage); err != nil {
				return err
			}
		}
	}

	if o.AcpsErrorReasonCodeQueryParameter != nil {

		// query param acps.error.reason.code
		var qrAcpsErrorReasonCode string

		if o.AcpsErrorReasonCodeQueryParameter != nil {
			qrAcpsErrorReasonCode = *o.AcpsErrorReasonCodeQueryParameter
		}
		qAcpsErrorReasonCode := qrAcpsErrorReasonCode
		if qAcpsErrorReasonCode != "" {

			if err := r.SetQueryParam("acps.error.reason.code", qAcpsErrorReasonCode); err != nil {
				return err
			}
		}
	}

	if o.AcpsErrorReasonMessageQueryParameter != nil {

		// query param acps.error.reason.message
		var qrAcpsErrorReasonMessage string

		if o.AcpsErrorReasonMessageQueryParameter != nil {
			qrAcpsErrorReasonMessage = *o.AcpsErrorReasonMessageQueryParameter
		}
		qAcpsErrorReasonMessage := qrAcpsErrorReasonMessage
		if qAcpsErrorReasonMessage != "" {

			if err := r.SetQueryParam("acps.error.reason.message", qAcpsErrorReasonMessage); err != nil {
				return err
			}
		}
	}

	if o.AcpsErrorReasonTargetQueryParameter != nil {

		// query param acps.error.reason.target
		var qrAcpsErrorReasonTarget string

		if o.AcpsErrorReasonTargetQueryParameter != nil {
			qrAcpsErrorReasonTarget = *o.AcpsErrorReasonTargetQueryParameter
		}
		qAcpsErrorReasonTarget := qrAcpsErrorReasonTarget
		if qAcpsErrorReasonTarget != "" {

			if err := r.SetQueryParam("acps.error.reason.target", qAcpsErrorReasonTarget); err != nil {
				return err
			}
		}
	}

	if o.AcpsErrorSeverityQueryParameter != nil {

		// query param acps.error.severity
		var qrAcpsErrorSeverity string

		if o.AcpsErrorSeverityQueryParameter != nil {
			qrAcpsErrorSeverity = *o.AcpsErrorSeverityQueryParameter
		}
		qAcpsErrorSeverity := qrAcpsErrorSeverity
		if qAcpsErrorSeverity != "" {

			if err := r.SetQueryParam("acps.error.severity", qAcpsErrorSeverity); err != nil {
				return err
			}
		}
	}

	if o.AcpsErrorTypeQueryParameter != nil {

		// query param acps.error.type
		var qrAcpsErrorType string

		if o.AcpsErrorTypeQueryParameter != nil {
			qrAcpsErrorType = *o.AcpsErrorTypeQueryParameter
		}
		qAcpsErrorType := qrAcpsErrorType
		if qAcpsErrorType != "" {

			if err := r.SetQueryParam("acps.error.type", qAcpsErrorType); err != nil {
				return err
			}
		}
	}

	if o.AcpsNetmaskQueryParameter != nil {

		// query param acps.netmask
		var qrAcpsNetmask string

		if o.AcpsNetmaskQueryParameter != nil {
			qrAcpsNetmask = *o.AcpsNetmaskQueryParameter
		}
		qAcpsNetmask := qrAcpsNetmask
		if qAcpsNetmask != "" {

			if err := r.SetQueryParam("acps.netmask", qAcpsNetmask); err != nil {
				return err
			}
		}
	}

	if o.AcpsNodeNameQueryParameter != nil {

		// query param acps.node.name
		var qrAcpsNodeName string

		if o.AcpsNodeNameQueryParameter != nil {
			qrAcpsNodeName = *o.AcpsNodeNameQueryParameter
		}
		qAcpsNodeName := qrAcpsNodeName
		if qAcpsNodeName != "" {

			if err := r.SetQueryParam("acps.node.name", qAcpsNodeName); err != nil {
				return err
			}
		}
	}

	if o.AcpsNodeUUIDQueryParameter != nil {

		// query param acps.node.uuid
		var qrAcpsNodeUUID string

		if o.AcpsNodeUUIDQueryParameter != nil {
			qrAcpsNodeUUID = *o.AcpsNodeUUIDQueryParameter
		}
		qAcpsNodeUUID := qrAcpsNodeUUID
		if qAcpsNodeUUID != "" {

			if err := r.SetQueryParam("acps.node.uuid", qAcpsNodeUUID); err != nil {
				return err
			}
		}
	}

	if o.AcpsPortQueryParameter != nil {

		// query param acps.port
		var qrAcpsPort string

		if o.AcpsPortQueryParameter != nil {
			qrAcpsPort = *o.AcpsPortQueryParameter
		}
		qAcpsPort := qrAcpsPort
		if qAcpsPort != "" {

			if err := r.SetQueryParam("acps.port", qAcpsPort); err != nil {
				return err
			}
		}
	}

	if o.AcpsSubnetQueryParameter != nil {

		// query param acps.subnet
		var qrAcpsSubnet string

		if o.AcpsSubnetQueryParameter != nil {
			qrAcpsSubnet = *o.AcpsSubnetQueryParameter
		}
		qAcpsSubnet := qrAcpsSubnet
		if qAcpsSubnet != "" {

			if err := r.SetQueryParam("acps.subnet", qAcpsSubnet); err != nil {
				return err
			}
		}
	}

	if o.BaysDrawerIDQueryParameter != nil {

		// query param bays.drawer.id
		var qrBaysDrawerID int64

		if o.BaysDrawerIDQueryParameter != nil {
			qrBaysDrawerID = *o.BaysDrawerIDQueryParameter
		}
		qBaysDrawerID := swag.FormatInt64(qrBaysDrawerID)
		if qBaysDrawerID != "" {

			if err := r.SetQueryParam("bays.drawer.id", qBaysDrawerID); err != nil {
				return err
			}
		}
	}

	if o.BaysDrawerSlotQueryParameter != nil {

		// query param bays.drawer.slot
		var qrBaysDrawerSlot int64

		if o.BaysDrawerSlotQueryParameter != nil {
			qrBaysDrawerSlot = *o.BaysDrawerSlotQueryParameter
		}
		qBaysDrawerSlot := swag.FormatInt64(qrBaysDrawerSlot)
		if qBaysDrawerSlot != "" {

			if err := r.SetQueryParam("bays.drawer.slot", qBaysDrawerSlot); err != nil {
				return err
			}
		}
	}

	if o.BaysHasDiskQueryParameter != nil {

		// query param bays.has_disk
		var qrBaysHasDisk bool

		if o.BaysHasDiskQueryParameter != nil {
			qrBaysHasDisk = *o.BaysHasDiskQueryParameter
		}
		qBaysHasDisk := swag.FormatBool(qrBaysHasDisk)
		if qBaysHasDisk != "" {

			if err := r.SetQueryParam("bays.has_disk", qBaysHasDisk); err != nil {
				return err
			}
		}
	}

	if o.BaysIDQueryParameter != nil {

		// query param bays.id
		var qrBaysID int64

		if o.BaysIDQueryParameter != nil {
			qrBaysID = *o.BaysIDQueryParameter
		}
		qBaysID := swag.FormatInt64(qrBaysID)
		if qBaysID != "" {

			if err := r.SetQueryParam("bays.id", qBaysID); err != nil {
				return err
			}
		}
	}

	if o.BaysStateQueryParameter != nil {

		// query param bays.state
		var qrBaysState string

		if o.BaysStateQueryParameter != nil {
			qrBaysState = *o.BaysStateQueryParameter
		}
		qBaysState := qrBaysState
		if qBaysState != "" {

			if err := r.SetQueryParam("bays.state", qBaysState); err != nil {
				return err
			}
		}
	}

	if o.BaysTypeQueryParameter != nil {

		// query param bays.type
		var qrBaysType string

		if o.BaysTypeQueryParameter != nil {
			qrBaysType = *o.BaysTypeQueryParameter
		}
		qBaysType := qrBaysType
		if qBaysType != "" {

			if err := r.SetQueryParam("bays.type", qBaysType); err != nil {
				return err
			}
		}
	}

	if o.ConnectionTypeQueryParameter != nil {

		// query param connection_type
		var qrConnectionType string

		if o.ConnectionTypeQueryParameter != nil {
			qrConnectionType = *o.ConnectionTypeQueryParameter
		}
		qConnectionType := qrConnectionType
		if qConnectionType != "" {

			if err := r.SetQueryParam("connection_type", qConnectionType); err != nil {
				return err
			}
		}
	}

	if o.CurrentSensorsCurrentQueryParameter != nil {

		// query param current_sensors.current
		var qrCurrentSensorsCurrent int64

		if o.CurrentSensorsCurrentQueryParameter != nil {
			qrCurrentSensorsCurrent = *o.CurrentSensorsCurrentQueryParameter
		}
		qCurrentSensorsCurrent := swag.FormatInt64(qrCurrentSensorsCurrent)
		if qCurrentSensorsCurrent != "" {

			if err := r.SetQueryParam("current_sensors.current", qCurrentSensorsCurrent); err != nil {
				return err
			}
		}
	}

	if o.CurrentSensorsIDQueryParameter != nil {

		// query param current_sensors.id
		var qrCurrentSensorsID int64

		if o.CurrentSensorsIDQueryParameter != nil {
			qrCurrentSensorsID = *o.CurrentSensorsIDQueryParameter
		}
		qCurrentSensorsID := swag.FormatInt64(qrCurrentSensorsID)
		if qCurrentSensorsID != "" {

			if err := r.SetQueryParam("current_sensors.id", qCurrentSensorsID); err != nil {
				return err
			}
		}
	}

	if o.CurrentSensorsLocationQueryParameter != nil {

		// query param current_sensors.location
		var qrCurrentSensorsLocation string

		if o.CurrentSensorsLocationQueryParameter != nil {
			qrCurrentSensorsLocation = *o.CurrentSensorsLocationQueryParameter
		}
		qCurrentSensorsLocation := qrCurrentSensorsLocation
		if qCurrentSensorsLocation != "" {

			if err := r.SetQueryParam("current_sensors.location", qCurrentSensorsLocation); err != nil {
				return err
			}
		}
	}

	if o.CurrentSensorsStateQueryParameter != nil {

		// query param current_sensors.state
		var qrCurrentSensorsState string

		if o.CurrentSensorsStateQueryParameter != nil {
			qrCurrentSensorsState = *o.CurrentSensorsStateQueryParameter
		}
		qCurrentSensorsState := qrCurrentSensorsState
		if qCurrentSensorsState != "" {

			if err := r.SetQueryParam("current_sensors.state", qCurrentSensorsState); err != nil {
				return err
			}
		}
	}

	if o.DiskCountQueryParameter != nil {

		// query param disk_count
		var qrDiskCount int64

		if o.DiskCountQueryParameter != nil {
			qrDiskCount = *o.DiskCountQueryParameter
		}
		qDiskCount := swag.FormatInt64(qrDiskCount)
		if qDiskCount != "" {

			if err := r.SetQueryParam("disk_count", qDiskCount); err != nil {
				return err
			}
		}
	}

	if o.DrawersClosedQueryParameter != nil {

		// query param drawers.closed
		var qrDrawersClosed bool

		if o.DrawersClosedQueryParameter != nil {
			qrDrawersClosed = *o.DrawersClosedQueryParameter
		}
		qDrawersClosed := swag.FormatBool(qrDrawersClosed)
		if qDrawersClosed != "" {

			if err := r.SetQueryParam("drawers.closed", qDrawersClosed); err != nil {
				return err
			}
		}
	}

	if o.DrawersDiskCountQueryParameter != nil {

		// query param drawers.disk_count
		var qrDrawersDiskCount int64

		if o.DrawersDiskCountQueryParameter != nil {
			qrDrawersDiskCount = *o.DrawersDiskCountQueryParameter
		}
		qDrawersDiskCount := swag.FormatInt64(qrDrawersDiskCount)
		if qDrawersDiskCount != "" {

			if err := r.SetQueryParam("drawers.disk_count", qDrawersDiskCount); err != nil {
				return err
			}
		}
	}

	if o.DrawersErrorQueryParameter != nil {

		// query param drawers.error
		var qrDrawersError string

		if o.DrawersErrorQueryParameter != nil {
			qrDrawersError = *o.DrawersErrorQueryParameter
		}
		qDrawersError := qrDrawersError
		if qDrawersError != "" {

			if err := r.SetQueryParam("drawers.error", qDrawersError); err != nil {
				return err
			}
		}
	}

	if o.DrawersIDQueryParameter != nil {

		// query param drawers.id
		var qrDrawersID int64

		if o.DrawersIDQueryParameter != nil {
			qrDrawersID = *o.DrawersIDQueryParameter
		}
		qDrawersID := swag.FormatInt64(qrDrawersID)
		if qDrawersID != "" {

			if err := r.SetQueryParam("drawers.id", qDrawersID); err != nil {
				return err
			}
		}
	}

	if o.DrawersPartNumberQueryParameter != nil {

		// query param drawers.part_number
		var qrDrawersPartNumber string

		if o.DrawersPartNumberQueryParameter != nil {
			qrDrawersPartNumber = *o.DrawersPartNumberQueryParameter
		}
		qDrawersPartNumber := qrDrawersPartNumber
		if qDrawersPartNumber != "" {

			if err := r.SetQueryParam("drawers.part_number", qDrawersPartNumber); err != nil {
				return err
			}
		}
	}

	if o.DrawersSerialNumberQueryParameter != nil {

		// query param drawers.serial_number
		var qrDrawersSerialNumber string

		if o.DrawersSerialNumberQueryParameter != nil {
			qrDrawersSerialNumber = *o.DrawersSerialNumberQueryParameter
		}
		qDrawersSerialNumber := qrDrawersSerialNumber
		if qDrawersSerialNumber != "" {

			if err := r.SetQueryParam("drawers.serial_number", qDrawersSerialNumber); err != nil {
				return err
			}
		}
	}

	if o.DrawersStateQueryParameter != nil {

		// query param drawers.state
		var qrDrawersState string

		if o.DrawersStateQueryParameter != nil {
			qrDrawersState = *o.DrawersStateQueryParameter
		}
		qDrawersState := qrDrawersState
		if qDrawersState != "" {

			if err := r.SetQueryParam("drawers.state", qDrawersState); err != nil {
				return err
			}
		}
	}

	if o.ErrorsReasonArgumentsCodeQueryParameter != nil {

		// query param errors.reason.arguments.code
		var qrErrorsReasonArgumentsCode string

		if o.ErrorsReasonArgumentsCodeQueryParameter != nil {
			qrErrorsReasonArgumentsCode = *o.ErrorsReasonArgumentsCodeQueryParameter
		}
		qErrorsReasonArgumentsCode := qrErrorsReasonArgumentsCode
		if qErrorsReasonArgumentsCode != "" {

			if err := r.SetQueryParam("errors.reason.arguments.code", qErrorsReasonArgumentsCode); err != nil {
				return err
			}
		}
	}

	if o.ErrorsReasonArgumentsMessageQueryParameter != nil {

		// query param errors.reason.arguments.message
		var qrErrorsReasonArgumentsMessage string

		if o.ErrorsReasonArgumentsMessageQueryParameter != nil {
			qrErrorsReasonArgumentsMessage = *o.ErrorsReasonArgumentsMessageQueryParameter
		}
		qErrorsReasonArgumentsMessage := qrErrorsReasonArgumentsMessage
		if qErrorsReasonArgumentsMessage != "" {

			if err := r.SetQueryParam("errors.reason.arguments.message", qErrorsReasonArgumentsMessage); err != nil {
				return err
			}
		}
	}

	if o.ErrorsReasonCodeQueryParameter != nil {

		// query param errors.reason.code
		var qrErrorsReasonCode string

		if o.ErrorsReasonCodeQueryParameter != nil {
			qrErrorsReasonCode = *o.ErrorsReasonCodeQueryParameter
		}
		qErrorsReasonCode := qrErrorsReasonCode
		if qErrorsReasonCode != "" {

			if err := r.SetQueryParam("errors.reason.code", qErrorsReasonCode); err != nil {
				return err
			}
		}
	}

	if o.ErrorsReasonMessageQueryParameter != nil {

		// query param errors.reason.message
		var qrErrorsReasonMessage string

		if o.ErrorsReasonMessageQueryParameter != nil {
			qrErrorsReasonMessage = *o.ErrorsReasonMessageQueryParameter
		}
		qErrorsReasonMessage := qrErrorsReasonMessage
		if qErrorsReasonMessage != "" {

			if err := r.SetQueryParam("errors.reason.message", qErrorsReasonMessage); err != nil {
				return err
			}
		}
	}

	if o.ErrorsReasonTargetQueryParameter != nil {

		// query param errors.reason.target
		var qrErrorsReasonTarget string

		if o.ErrorsReasonTargetQueryParameter != nil {
			qrErrorsReasonTarget = *o.ErrorsReasonTargetQueryParameter
		}
		qErrorsReasonTarget := qrErrorsReasonTarget
		if qErrorsReasonTarget != "" {

			if err := r.SetQueryParam("errors.reason.target", qErrorsReasonTarget); err != nil {
				return err
			}
		}
	}

	if o.FansIDQueryParameter != nil {

		// query param fans.id
		var qrFansID int64

		if o.FansIDQueryParameter != nil {
			qrFansID = *o.FansIDQueryParameter
		}
		qFansID := swag.FormatInt64(qrFansID)
		if qFansID != "" {

			if err := r.SetQueryParam("fans.id", qFansID); err != nil {
				return err
			}
		}
	}

	if o.FansLocationQueryParameter != nil {

		// query param fans.location
		var qrFansLocation string

		if o.FansLocationQueryParameter != nil {
			qrFansLocation = *o.FansLocationQueryParameter
		}
		qFansLocation := qrFansLocation
		if qFansLocation != "" {

			if err := r.SetQueryParam("fans.location", qFansLocation); err != nil {
				return err
			}
		}
	}

	if o.FansRpmQueryParameter != nil {

		// query param fans.rpm
		var qrFansRpm int64

		if o.FansRpmQueryParameter != nil {
			qrFansRpm = *o.FansRpmQueryParameter
		}
		qFansRpm := swag.FormatInt64(qrFansRpm)
		if qFansRpm != "" {

			if err := r.SetQueryParam("fans.rpm", qFansRpm); err != nil {
				return err
			}
		}
	}

	if o.FansStateQueryParameter != nil {

		// query param fans.state
		var qrFansState string

		if o.FansStateQueryParameter != nil {
			qrFansState = *o.FansStateQueryParameter
		}
		qFansState := qrFansState
		if qFansState != "" {

			if err := r.SetQueryParam("fans.state", qFansState); err != nil {
				return err
			}
		}
	}

	if o.FieldsQueryParameter != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.FrusFirmwareVersionQueryParameter != nil {

		// query param frus.firmware_version
		var qrFrusFirmwareVersion string

		if o.FrusFirmwareVersionQueryParameter != nil {
			qrFrusFirmwareVersion = *o.FrusFirmwareVersionQueryParameter
		}
		qFrusFirmwareVersion := qrFrusFirmwareVersion
		if qFrusFirmwareVersion != "" {

			if err := r.SetQueryParam("frus.firmware_version", qFrusFirmwareVersion); err != nil {
				return err
			}
		}
	}

	if o.FrusIDQueryParameter != nil {

		// query param frus.id
		var qrFrusID int64

		if o.FrusIDQueryParameter != nil {
			qrFrusID = *o.FrusIDQueryParameter
		}
		qFrusID := swag.FormatInt64(qrFrusID)
		if qFrusID != "" {

			if err := r.SetQueryParam("frus.id", qFrusID); err != nil {
				return err
			}
		}
	}

	if o.FrusInstalledQueryParameter != nil {

		// query param frus.installed
		var qrFrusInstalled bool

		if o.FrusInstalledQueryParameter != nil {
			qrFrusInstalled = *o.FrusInstalledQueryParameter
		}
		qFrusInstalled := swag.FormatBool(qrFrusInstalled)
		if qFrusInstalled != "" {

			if err := r.SetQueryParam("frus.installed", qFrusInstalled); err != nil {
				return err
			}
		}
	}

	if o.FrusPartNumberQueryParameter != nil {

		// query param frus.part_number
		var qrFrusPartNumber string

		if o.FrusPartNumberQueryParameter != nil {
			qrFrusPartNumber = *o.FrusPartNumberQueryParameter
		}
		qFrusPartNumber := qrFrusPartNumber
		if qFrusPartNumber != "" {

			if err := r.SetQueryParam("frus.part_number", qFrusPartNumber); err != nil {
				return err
			}
		}
	}

	if o.FrusPsuCrestFactorQueryParameter != nil {

		// query param frus.psu.crest_factor
		var qrFrusPsuCrestFactor int64

		if o.FrusPsuCrestFactorQueryParameter != nil {
			qrFrusPsuCrestFactor = *o.FrusPsuCrestFactorQueryParameter
		}
		qFrusPsuCrestFactor := swag.FormatInt64(qrFrusPsuCrestFactor)
		if qFrusPsuCrestFactor != "" {

			if err := r.SetQueryParam("frus.psu.crest_factor", qFrusPsuCrestFactor); err != nil {
				return err
			}
		}
	}

	if o.FrusPsuModelQueryParameter != nil {

		// query param frus.psu.model
		var qrFrusPsuModel string

		if o.FrusPsuModelQueryParameter != nil {
			qrFrusPsuModel = *o.FrusPsuModelQueryParameter
		}
		qFrusPsuModel := qrFrusPsuModel
		if qFrusPsuModel != "" {

			if err := r.SetQueryParam("frus.psu.model", qFrusPsuModel); err != nil {
				return err
			}
		}
	}

	if o.FrusPsuPowerDrawnQueryParameter != nil {

		// query param frus.psu.power_drawn
		var qrFrusPsuPowerDrawn int64

		if o.FrusPsuPowerDrawnQueryParameter != nil {
			qrFrusPsuPowerDrawn = *o.FrusPsuPowerDrawnQueryParameter
		}
		qFrusPsuPowerDrawn := swag.FormatInt64(qrFrusPsuPowerDrawn)
		if qFrusPsuPowerDrawn != "" {

			if err := r.SetQueryParam("frus.psu.power_drawn", qFrusPsuPowerDrawn); err != nil {
				return err
			}
		}
	}

	if o.FrusPsuPowerRatingQueryParameter != nil {

		// query param frus.psu.power_rating
		var qrFrusPsuPowerRating int64

		if o.FrusPsuPowerRatingQueryParameter != nil {
			qrFrusPsuPowerRating = *o.FrusPsuPowerRatingQueryParameter
		}
		qFrusPsuPowerRating := swag.FormatInt64(qrFrusPsuPowerRating)
		if qFrusPsuPowerRating != "" {

			if err := r.SetQueryParam("frus.psu.power_rating", qFrusPsuPowerRating); err != nil {
				return err
			}
		}
	}

	if o.FrusSerialNumberQueryParameter != nil {

		// query param frus.serial_number
		var qrFrusSerialNumber string

		if o.FrusSerialNumberQueryParameter != nil {
			qrFrusSerialNumber = *o.FrusSerialNumberQueryParameter
		}
		qFrusSerialNumber := qrFrusSerialNumber
		if qFrusSerialNumber != "" {

			if err := r.SetQueryParam("frus.serial_number", qFrusSerialNumber); err != nil {
				return err
			}
		}
	}

	if o.FrusStateQueryParameter != nil {

		// query param frus.state
		var qrFrusState string

		if o.FrusStateQueryParameter != nil {
			qrFrusState = *o.FrusStateQueryParameter
		}
		qFrusState := qrFrusState
		if qFrusState != "" {

			if err := r.SetQueryParam("frus.state", qFrusState); err != nil {
				return err
			}
		}
	}

	if o.FrusTypeQueryParameter != nil {

		// query param frus.type
		var qrFrusType string

		if o.FrusTypeQueryParameter != nil {
			qrFrusType = *o.FrusTypeQueryParameter
		}
		qFrusType := qrFrusType
		if qFrusType != "" {

			if err := r.SetQueryParam("frus.type", qFrusType); err != nil {
				return err
			}
		}
	}

	if o.IDQueryParameter != nil {

		// query param id
		var qrID string

		if o.IDQueryParameter != nil {
			qrID = *o.IDQueryParameter
		}
		qID := qrID
		if qID != "" {

			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}
	}

	if o.InternalQueryParameter != nil {

		// query param internal
		var qrInternal bool

		if o.InternalQueryParameter != nil {
			qrInternal = *o.InternalQueryParameter
		}
		qInternal := swag.FormatBool(qrInternal)
		if qInternal != "" {

			if err := r.SetQueryParam("internal", qInternal); err != nil {
				return err
			}
		}
	}

	if o.LocalQueryParameter != nil {

		// query param local
		var qrLocal bool

		if o.LocalQueryParameter != nil {
			qrLocal = *o.LocalQueryParameter
		}
		qLocal := swag.FormatBool(qrLocal)
		if qLocal != "" {

			if err := r.SetQueryParam("local", qLocal); err != nil {
				return err
			}
		}
	}

	if o.LocationLedQueryParameter != nil {

		// query param location_led
		var qrLocationLed string

		if o.LocationLedQueryParameter != nil {
			qrLocationLed = *o.LocationLedQueryParameter
		}
		qLocationLed := qrLocationLed
		if qLocationLed != "" {

			if err := r.SetQueryParam("location_led", qLocationLed); err != nil {
				return err
			}
		}
	}

	if o.ManufacturerNameQueryParameter != nil {

		// query param manufacturer.name
		var qrManufacturerName string

		if o.ManufacturerNameQueryParameter != nil {
			qrManufacturerName = *o.ManufacturerNameQueryParameter
		}
		qManufacturerName := qrManufacturerName
		if qManufacturerName != "" {

			if err := r.SetQueryParam("manufacturer.name", qManufacturerName); err != nil {
				return err
			}
		}
	}

	if o.MaxRecordsQueryParameter != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecordsQueryParameter != nil {
			qrMaxRecords = *o.MaxRecordsQueryParameter
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.ModelQueryParameter != nil {

		// query param model
		var qrModel string

		if o.ModelQueryParameter != nil {
			qrModel = *o.ModelQueryParameter
		}
		qModel := qrModel
		if qModel != "" {

			if err := r.SetQueryParam("model", qModel); err != nil {
				return err
			}
		}
	}

	if o.ModuleTypeQueryParameter != nil {

		// query param module_type
		var qrModuleType string

		if o.ModuleTypeQueryParameter != nil {
			qrModuleType = *o.ModuleTypeQueryParameter
		}
		qModuleType := qrModuleType
		if qModuleType != "" {

			if err := r.SetQueryParam("module_type", qModuleType); err != nil {
				return err
			}
		}
	}

	if o.NameQueryParameter != nil {

		// query param name
		var qrName string

		if o.NameQueryParameter != nil {
			qrName = *o.NameQueryParameter
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.OrderByQueryParameter != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.PathsNameQueryParameter != nil {

		// query param paths.name
		var qrPathsName string

		if o.PathsNameQueryParameter != nil {
			qrPathsName = *o.PathsNameQueryParameter
		}
		qPathsName := qrPathsName
		if qPathsName != "" {

			if err := r.SetQueryParam("paths.name", qPathsName); err != nil {
				return err
			}
		}
	}

	if o.PathsNodeNameQueryParameter != nil {

		// query param paths.node.name
		var qrPathsNodeName string

		if o.PathsNodeNameQueryParameter != nil {
			qrPathsNodeName = *o.PathsNodeNameQueryParameter
		}
		qPathsNodeName := qrPathsNodeName
		if qPathsNodeName != "" {

			if err := r.SetQueryParam("paths.node.name", qPathsNodeName); err != nil {
				return err
			}
		}
	}

	if o.PathsNodeUUIDQueryParameter != nil {

		// query param paths.node.uuid
		var qrPathsNodeUUID string

		if o.PathsNodeUUIDQueryParameter != nil {
			qrPathsNodeUUID = *o.PathsNodeUUIDQueryParameter
		}
		qPathsNodeUUID := qrPathsNodeUUID
		if qPathsNodeUUID != "" {

			if err := r.SetQueryParam("paths.node.uuid", qPathsNodeUUID); err != nil {
				return err
			}
		}
	}

	if o.PortsCableIDentifierQueryParameter != nil {

		// query param ports.cable.identifier
		var qrPortsCableIdentifier string

		if o.PortsCableIDentifierQueryParameter != nil {
			qrPortsCableIdentifier = *o.PortsCableIDentifierQueryParameter
		}
		qPortsCableIdentifier := qrPortsCableIdentifier
		if qPortsCableIdentifier != "" {

			if err := r.SetQueryParam("ports.cable.identifier", qPortsCableIdentifier); err != nil {
				return err
			}
		}
	}

	if o.PortsCableLengthQueryParameter != nil {

		// query param ports.cable.length
		var qrPortsCableLength string

		if o.PortsCableLengthQueryParameter != nil {
			qrPortsCableLength = *o.PortsCableLengthQueryParameter
		}
		qPortsCableLength := qrPortsCableLength
		if qPortsCableLength != "" {

			if err := r.SetQueryParam("ports.cable.length", qPortsCableLength); err != nil {
				return err
			}
		}
	}

	if o.PortsCablePartNumberQueryParameter != nil {

		// query param ports.cable.part_number
		var qrPortsCablePartNumber string

		if o.PortsCablePartNumberQueryParameter != nil {
			qrPortsCablePartNumber = *o.PortsCablePartNumberQueryParameter
		}
		qPortsCablePartNumber := qrPortsCablePartNumber
		if qPortsCablePartNumber != "" {

			if err := r.SetQueryParam("ports.cable.part_number", qPortsCablePartNumber); err != nil {
				return err
			}
		}
	}

	if o.PortsCableSerialNumberQueryParameter != nil {

		// query param ports.cable.serial_number
		var qrPortsCableSerialNumber string

		if o.PortsCableSerialNumberQueryParameter != nil {
			qrPortsCableSerialNumber = *o.PortsCableSerialNumberQueryParameter
		}
		qPortsCableSerialNumber := qrPortsCableSerialNumber
		if qPortsCableSerialNumber != "" {

			if err := r.SetQueryParam("ports.cable.serial_number", qPortsCableSerialNumber); err != nil {
				return err
			}
		}
	}

	if o.PortsDesignatorQueryParameter != nil {

		// query param ports.designator
		var qrPortsDesignator string

		if o.PortsDesignatorQueryParameter != nil {
			qrPortsDesignator = *o.PortsDesignatorQueryParameter
		}
		qPortsDesignator := qrPortsDesignator
		if qPortsDesignator != "" {

			if err := r.SetQueryParam("ports.designator", qPortsDesignator); err != nil {
				return err
			}
		}
	}

	if o.PortsIDQueryParameter != nil {

		// query param ports.id
		var qrPortsID int64

		if o.PortsIDQueryParameter != nil {
			qrPortsID = *o.PortsIDQueryParameter
		}
		qPortsID := swag.FormatInt64(qrPortsID)
		if qPortsID != "" {

			if err := r.SetQueryParam("ports.id", qPortsID); err != nil {
				return err
			}
		}
	}

	if o.PortsInternalQueryParameter != nil {

		// query param ports.internal
		var qrPortsInternal bool

		if o.PortsInternalQueryParameter != nil {
			qrPortsInternal = *o.PortsInternalQueryParameter
		}
		qPortsInternal := swag.FormatBool(qrPortsInternal)
		if qPortsInternal != "" {

			if err := r.SetQueryParam("ports.internal", qPortsInternal); err != nil {
				return err
			}
		}
	}

	if o.PortsMacAddressQueryParameter != nil {

		// query param ports.mac_address
		var qrPortsMacAddress string

		if o.PortsMacAddressQueryParameter != nil {
			qrPortsMacAddress = *o.PortsMacAddressQueryParameter
		}
		qPortsMacAddress := qrPortsMacAddress
		if qPortsMacAddress != "" {

			if err := r.SetQueryParam("ports.mac_address", qPortsMacAddress); err != nil {
				return err
			}
		}
	}

	if o.PortsModuleIDQueryParameter != nil {

		// query param ports.module_id
		var qrPortsModuleID string

		if o.PortsModuleIDQueryParameter != nil {
			qrPortsModuleID = *o.PortsModuleIDQueryParameter
		}
		qPortsModuleID := qrPortsModuleID
		if qPortsModuleID != "" {

			if err := r.SetQueryParam("ports.module_id", qPortsModuleID); err != nil {
				return err
			}
		}
	}

	if o.PortsRemoteChassisQueryParameter != nil {

		// query param ports.remote.chassis
		var qrPortsRemoteChassis string

		if o.PortsRemoteChassisQueryParameter != nil {
			qrPortsRemoteChassis = *o.PortsRemoteChassisQueryParameter
		}
		qPortsRemoteChassis := qrPortsRemoteChassis
		if qPortsRemoteChassis != "" {

			if err := r.SetQueryParam("ports.remote.chassis", qPortsRemoteChassis); err != nil {
				return err
			}
		}
	}

	if o.PortsRemoteDeviceQueryParameter != nil {

		// query param ports.remote.device
		var qrPortsRemoteDevice string

		if o.PortsRemoteDeviceQueryParameter != nil {
			qrPortsRemoteDevice = *o.PortsRemoteDeviceQueryParameter
		}
		qPortsRemoteDevice := qrPortsRemoteDevice
		if qPortsRemoteDevice != "" {

			if err := r.SetQueryParam("ports.remote.device", qPortsRemoteDevice); err != nil {
				return err
			}
		}
	}

	if o.PortsRemoteMacAddressQueryParameter != nil {

		// query param ports.remote.mac_address
		var qrPortsRemoteMacAddress string

		if o.PortsRemoteMacAddressQueryParameter != nil {
			qrPortsRemoteMacAddress = *o.PortsRemoteMacAddressQueryParameter
		}
		qPortsRemoteMacAddress := qrPortsRemoteMacAddress
		if qPortsRemoteMacAddress != "" {

			if err := r.SetQueryParam("ports.remote.mac_address", qPortsRemoteMacAddress); err != nil {
				return err
			}
		}
	}

	if o.PortsRemotePhyQueryParameter != nil {

		// query param ports.remote.phy
		var qrPortsRemotePhy string

		if o.PortsRemotePhyQueryParameter != nil {
			qrPortsRemotePhy = *o.PortsRemotePhyQueryParameter
		}
		qPortsRemotePhy := qrPortsRemotePhy
		if qPortsRemotePhy != "" {

			if err := r.SetQueryParam("ports.remote.phy", qPortsRemotePhy); err != nil {
				return err
			}
		}
	}

	if o.PortsRemotePortQueryParameter != nil {

		// query param ports.remote.port
		var qrPortsRemotePort string

		if o.PortsRemotePortQueryParameter != nil {
			qrPortsRemotePort = *o.PortsRemotePortQueryParameter
		}
		qPortsRemotePort := qrPortsRemotePort
		if qPortsRemotePort != "" {

			if err := r.SetQueryParam("ports.remote.port", qPortsRemotePort); err != nil {
				return err
			}
		}
	}

	if o.PortsRemoteWwnQueryParameter != nil {

		// query param ports.remote.wwn
		var qrPortsRemoteWwn string

		if o.PortsRemoteWwnQueryParameter != nil {
			qrPortsRemoteWwn = *o.PortsRemoteWwnQueryParameter
		}
		qPortsRemoteWwn := qrPortsRemoteWwn
		if qPortsRemoteWwn != "" {

			if err := r.SetQueryParam("ports.remote.wwn", qPortsRemoteWwn); err != nil {
				return err
			}
		}
	}

	if o.PortsStateQueryParameter != nil {

		// query param ports.state
		var qrPortsState string

		if o.PortsStateQueryParameter != nil {
			qrPortsState = *o.PortsStateQueryParameter
		}
		qPortsState := qrPortsState
		if qPortsState != "" {

			if err := r.SetQueryParam("ports.state", qPortsState); err != nil {
				return err
			}
		}
	}

	if o.PortsWwnQueryParameter != nil {

		// query param ports.wwn
		var qrPortsWwn string

		if o.PortsWwnQueryParameter != nil {
			qrPortsWwn = *o.PortsWwnQueryParameter
		}
		qPortsWwn := qrPortsWwn
		if qPortsWwn != "" {

			if err := r.SetQueryParam("ports.wwn", qPortsWwn); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecordsQueryParameter != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecordsQueryParameter != nil {
			qrReturnRecords = *o.ReturnRecordsQueryParameter
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeoutQueryParameter != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeoutQueryParameter != nil {
			qrReturnTimeout = *o.ReturnTimeoutQueryParameter
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.SerialNumberQueryParameter != nil {

		// query param serial_number
		var qrSerialNumber string

		if o.SerialNumberQueryParameter != nil {
			qrSerialNumber = *o.SerialNumberQueryParameter
		}
		qSerialNumber := qrSerialNumber
		if qSerialNumber != "" {

			if err := r.SetQueryParam("serial_number", qSerialNumber); err != nil {
				return err
			}
		}
	}

	if o.StateQueryParameter != nil {

		// query param state
		var qrState string

		if o.StateQueryParameter != nil {
			qrState = *o.StateQueryParameter
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if o.TemperatureSensorsAmbientQueryParameter != nil {

		// query param temperature_sensors.ambient
		var qrTemperatureSensorsAmbient bool

		if o.TemperatureSensorsAmbientQueryParameter != nil {
			qrTemperatureSensorsAmbient = *o.TemperatureSensorsAmbientQueryParameter
		}
		qTemperatureSensorsAmbient := swag.FormatBool(qrTemperatureSensorsAmbient)
		if qTemperatureSensorsAmbient != "" {

			if err := r.SetQueryParam("temperature_sensors.ambient", qTemperatureSensorsAmbient); err != nil {
				return err
			}
		}
	}

	if o.TemperatureSensorsIDQueryParameter != nil {

		// query param temperature_sensors.id
		var qrTemperatureSensorsID int64

		if o.TemperatureSensorsIDQueryParameter != nil {
			qrTemperatureSensorsID = *o.TemperatureSensorsIDQueryParameter
		}
		qTemperatureSensorsID := swag.FormatInt64(qrTemperatureSensorsID)
		if qTemperatureSensorsID != "" {

			if err := r.SetQueryParam("temperature_sensors.id", qTemperatureSensorsID); err != nil {
				return err
			}
		}
	}

	if o.TemperatureSensorsLocationQueryParameter != nil {

		// query param temperature_sensors.location
		var qrTemperatureSensorsLocation string

		if o.TemperatureSensorsLocationQueryParameter != nil {
			qrTemperatureSensorsLocation = *o.TemperatureSensorsLocationQueryParameter
		}
		qTemperatureSensorsLocation := qrTemperatureSensorsLocation
		if qTemperatureSensorsLocation != "" {

			if err := r.SetQueryParam("temperature_sensors.location", qTemperatureSensorsLocation); err != nil {
				return err
			}
		}
	}

	if o.TemperatureSensorsStateQueryParameter != nil {

		// query param temperature_sensors.state
		var qrTemperatureSensorsState string

		if o.TemperatureSensorsStateQueryParameter != nil {
			qrTemperatureSensorsState = *o.TemperatureSensorsStateQueryParameter
		}
		qTemperatureSensorsState := qrTemperatureSensorsState
		if qTemperatureSensorsState != "" {

			if err := r.SetQueryParam("temperature_sensors.state", qTemperatureSensorsState); err != nil {
				return err
			}
		}
	}

	if o.TemperatureSensorsTemperatureQueryParameter != nil {

		// query param temperature_sensors.temperature
		var qrTemperatureSensorsTemperature int64

		if o.TemperatureSensorsTemperatureQueryParameter != nil {
			qrTemperatureSensorsTemperature = *o.TemperatureSensorsTemperatureQueryParameter
		}
		qTemperatureSensorsTemperature := swag.FormatInt64(qrTemperatureSensorsTemperature)
		if qTemperatureSensorsTemperature != "" {

			if err := r.SetQueryParam("temperature_sensors.temperature", qTemperatureSensorsTemperature); err != nil {
				return err
			}
		}
	}

	if o.TemperatureSensorsThresholdHighCriticalQueryParameter != nil {

		// query param temperature_sensors.threshold.high.critical
		var qrTemperatureSensorsThresholdHighCritical int64

		if o.TemperatureSensorsThresholdHighCriticalQueryParameter != nil {
			qrTemperatureSensorsThresholdHighCritical = *o.TemperatureSensorsThresholdHighCriticalQueryParameter
		}
		qTemperatureSensorsThresholdHighCritical := swag.FormatInt64(qrTemperatureSensorsThresholdHighCritical)
		if qTemperatureSensorsThresholdHighCritical != "" {

			if err := r.SetQueryParam("temperature_sensors.threshold.high.critical", qTemperatureSensorsThresholdHighCritical); err != nil {
				return err
			}
		}
	}

	if o.TemperatureSensorsThresholdHighWarningQueryParameter != nil {

		// query param temperature_sensors.threshold.high.warning
		var qrTemperatureSensorsThresholdHighWarning int64

		if o.TemperatureSensorsThresholdHighWarningQueryParameter != nil {
			qrTemperatureSensorsThresholdHighWarning = *o.TemperatureSensorsThresholdHighWarningQueryParameter
		}
		qTemperatureSensorsThresholdHighWarning := swag.FormatInt64(qrTemperatureSensorsThresholdHighWarning)
		if qTemperatureSensorsThresholdHighWarning != "" {

			if err := r.SetQueryParam("temperature_sensors.threshold.high.warning", qTemperatureSensorsThresholdHighWarning); err != nil {
				return err
			}
		}
	}

	if o.TemperatureSensorsThresholdLowCriticalQueryParameter != nil {

		// query param temperature_sensors.threshold.low.critical
		var qrTemperatureSensorsThresholdLowCritical int64

		if o.TemperatureSensorsThresholdLowCriticalQueryParameter != nil {
			qrTemperatureSensorsThresholdLowCritical = *o.TemperatureSensorsThresholdLowCriticalQueryParameter
		}
		qTemperatureSensorsThresholdLowCritical := swag.FormatInt64(qrTemperatureSensorsThresholdLowCritical)
		if qTemperatureSensorsThresholdLowCritical != "" {

			if err := r.SetQueryParam("temperature_sensors.threshold.low.critical", qTemperatureSensorsThresholdLowCritical); err != nil {
				return err
			}
		}
	}

	if o.TemperatureSensorsThresholdLowWarningQueryParameter != nil {

		// query param temperature_sensors.threshold.low.warning
		var qrTemperatureSensorsThresholdLowWarning int64

		if o.TemperatureSensorsThresholdLowWarningQueryParameter != nil {
			qrTemperatureSensorsThresholdLowWarning = *o.TemperatureSensorsThresholdLowWarningQueryParameter
		}
		qTemperatureSensorsThresholdLowWarning := swag.FormatInt64(qrTemperatureSensorsThresholdLowWarning)
		if qTemperatureSensorsThresholdLowWarning != "" {

			if err := r.SetQueryParam("temperature_sensors.threshold.low.warning", qTemperatureSensorsThresholdLowWarning); err != nil {
				return err
			}
		}
	}

	if o.UIDQueryParameter != nil {

		// query param uid
		var qrUID string

		if o.UIDQueryParameter != nil {
			qrUID = *o.UIDQueryParameter
		}
		qUID := qrUID
		if qUID != "" {

			if err := r.SetQueryParam("uid", qUID); err != nil {
				return err
			}
		}
	}

	if o.VendorManufacturerQueryParameter != nil {

		// query param vendor.manufacturer
		var qrVendorManufacturer string

		if o.VendorManufacturerQueryParameter != nil {
			qrVendorManufacturer = *o.VendorManufacturerQueryParameter
		}
		qVendorManufacturer := qrVendorManufacturer
		if qVendorManufacturer != "" {

			if err := r.SetQueryParam("vendor.manufacturer", qVendorManufacturer); err != nil {
				return err
			}
		}
	}

	if o.VendorNameQueryParameter != nil {

		// query param vendor.name
		var qrVendorName string

		if o.VendorNameQueryParameter != nil {
			qrVendorName = *o.VendorNameQueryParameter
		}
		qVendorName := qrVendorName
		if qVendorName != "" {

			if err := r.SetQueryParam("vendor.name", qVendorName); err != nil {
				return err
			}
		}
	}

	if o.VendorPartNumberQueryParameter != nil {

		// query param vendor.part_number
		var qrVendorPartNumber string

		if o.VendorPartNumberQueryParameter != nil {
			qrVendorPartNumber = *o.VendorPartNumberQueryParameter
		}
		qVendorPartNumber := qrVendorPartNumber
		if qVendorPartNumber != "" {

			if err := r.SetQueryParam("vendor.part_number", qVendorPartNumber); err != nil {
				return err
			}
		}
	}

	if o.VendorProductQueryParameter != nil {

		// query param vendor.product
		var qrVendorProduct string

		if o.VendorProductQueryParameter != nil {
			qrVendorProduct = *o.VendorProductQueryParameter
		}
		qVendorProduct := qrVendorProduct
		if qVendorProduct != "" {

			if err := r.SetQueryParam("vendor.product", qVendorProduct); err != nil {
				return err
			}
		}
	}

	if o.VendorSerialNumberQueryParameter != nil {

		// query param vendor.serial_number
		var qrVendorSerialNumber string

		if o.VendorSerialNumberQueryParameter != nil {
			qrVendorSerialNumber = *o.VendorSerialNumberQueryParameter
		}
		qVendorSerialNumber := qrVendorSerialNumber
		if qVendorSerialNumber != "" {

			if err := r.SetQueryParam("vendor.serial_number", qVendorSerialNumber); err != nil {
				return err
			}
		}
	}

	if o.VoltageSensorsIDQueryParameter != nil {

		// query param voltage_sensors.id
		var qrVoltageSensorsID int64

		if o.VoltageSensorsIDQueryParameter != nil {
			qrVoltageSensorsID = *o.VoltageSensorsIDQueryParameter
		}
		qVoltageSensorsID := swag.FormatInt64(qrVoltageSensorsID)
		if qVoltageSensorsID != "" {

			if err := r.SetQueryParam("voltage_sensors.id", qVoltageSensorsID); err != nil {
				return err
			}
		}
	}

	if o.VoltageSensorsLocationQueryParameter != nil {

		// query param voltage_sensors.location
		var qrVoltageSensorsLocation string

		if o.VoltageSensorsLocationQueryParameter != nil {
			qrVoltageSensorsLocation = *o.VoltageSensorsLocationQueryParameter
		}
		qVoltageSensorsLocation := qrVoltageSensorsLocation
		if qVoltageSensorsLocation != "" {

			if err := r.SetQueryParam("voltage_sensors.location", qVoltageSensorsLocation); err != nil {
				return err
			}
		}
	}

	if o.VoltageSensorsStateQueryParameter != nil {

		// query param voltage_sensors.state
		var qrVoltageSensorsState string

		if o.VoltageSensorsStateQueryParameter != nil {
			qrVoltageSensorsState = *o.VoltageSensorsStateQueryParameter
		}
		qVoltageSensorsState := qrVoltageSensorsState
		if qVoltageSensorsState != "" {

			if err := r.SetQueryParam("voltage_sensors.state", qVoltageSensorsState); err != nil {
				return err
			}
		}
	}

	if o.VoltageSensorsVoltageQueryParameter != nil {

		// query param voltage_sensors.voltage
		var qrVoltageSensorsVoltage float64

		if o.VoltageSensorsVoltageQueryParameter != nil {
			qrVoltageSensorsVoltage = *o.VoltageSensorsVoltageQueryParameter
		}
		qVoltageSensorsVoltage := swag.FormatFloat64(qrVoltageSensorsVoltage)
		if qVoltageSensorsVoltage != "" {

			if err := r.SetQueryParam("voltage_sensors.voltage", qVoltageSensorsVoltage); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamShelfCollectionGet binds the parameter fields
func (o *ShelfCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.FieldsQueryParameter

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamShelfCollectionGet binds the parameter order_by
func (o *ShelfCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderByQueryParameter

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
