// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewFileInfoCreateParams creates a new FileInfoCreateParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewFileInfoCreateParams() *FileInfoCreateParams {
	return &FileInfoCreateParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewFileInfoCreateParamsWithTimeout creates a new FileInfoCreateParams object
// with the ability to set a timeout on a request.
func NewFileInfoCreateParamsWithTimeout(timeout time.Duration) *FileInfoCreateParams {
	return &FileInfoCreateParams{
		timeout: timeout,
	}
}

// NewFileInfoCreateParamsWithContext creates a new FileInfoCreateParams object
// with the ability to set a context for a request.
func NewFileInfoCreateParamsWithContext(ctx context.Context) *FileInfoCreateParams {
	return &FileInfoCreateParams{
		Context: ctx,
	}
}

// NewFileInfoCreateParamsWithHTTPClient creates a new FileInfoCreateParams object
// with the ability to set a custom HTTPClient for a request.
func NewFileInfoCreateParamsWithHTTPClient(client *http.Client) *FileInfoCreateParams {
	return &FileInfoCreateParams{
		HTTPClient: client,
	}
}

/* FileInfoCreateParams contains all the parameters to send to the API endpoint
   for the file info create operation.

   Typically these are written to a http.Request.
*/
type FileInfoCreateParams struct {

	/* ByteOffset.

	   How many bytes into the file to begin writing. Use -1 to append (default).
	*/
	ByteOffsetQueryParameter *int64

	/* Data.

	   Data to write to the file.
	*/
	Data *string

	/* Overwrite.

	   If false, and the file exists, the write will fail. Default is false.
	*/
	OverwriteQueryParameter *bool

	/* Path.

	   Relative path of a new file, directory or symlink. The path field requires using "%2E" to represent "." and "%2F" to represent "/" for the path provided.
	*/
	PathPathParameter string

	/* StreamName.

	   Name of stream associated with the file to write data to.
	*/
	StreamNameQueryParameter *string

	/* VolumeUUID.

	   Volume UUID
	*/
	VolumeUUIDPathParameter string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the file info create params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FileInfoCreateParams) WithDefaults() *FileInfoCreateParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the file info create params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FileInfoCreateParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the file info create params
func (o *FileInfoCreateParams) WithTimeout(timeout time.Duration) *FileInfoCreateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the file info create params
func (o *FileInfoCreateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the file info create params
func (o *FileInfoCreateParams) WithContext(ctx context.Context) *FileInfoCreateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the file info create params
func (o *FileInfoCreateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the file info create params
func (o *FileInfoCreateParams) WithHTTPClient(client *http.Client) *FileInfoCreateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the file info create params
func (o *FileInfoCreateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithByteOffsetQueryParameter adds the byteOffset to the file info create params
func (o *FileInfoCreateParams) WithByteOffsetQueryParameter(byteOffset *int64) *FileInfoCreateParams {
	o.SetByteOffsetQueryParameter(byteOffset)
	return o
}

// SetByteOffsetQueryParameter adds the byteOffset to the file info create params
func (o *FileInfoCreateParams) SetByteOffsetQueryParameter(byteOffset *int64) {
	o.ByteOffsetQueryParameter = byteOffset
}

// WithData adds the data to the file info create params
func (o *FileInfoCreateParams) WithData(data *string) *FileInfoCreateParams {
	o.SetData(data)
	return o
}

// SetData adds the data to the file info create params
func (o *FileInfoCreateParams) SetData(data *string) {
	o.Data = data
}

// WithOverwriteQueryParameter adds the overwrite to the file info create params
func (o *FileInfoCreateParams) WithOverwriteQueryParameter(overwrite *bool) *FileInfoCreateParams {
	o.SetOverwriteQueryParameter(overwrite)
	return o
}

// SetOverwriteQueryParameter adds the overwrite to the file info create params
func (o *FileInfoCreateParams) SetOverwriteQueryParameter(overwrite *bool) {
	o.OverwriteQueryParameter = overwrite
}

// WithPathPathParameter adds the path to the file info create params
func (o *FileInfoCreateParams) WithPathPathParameter(path string) *FileInfoCreateParams {
	o.SetPathPathParameter(path)
	return o
}

// SetPathPathParameter adds the path to the file info create params
func (o *FileInfoCreateParams) SetPathPathParameter(path string) {
	o.PathPathParameter = path
}

// WithStreamNameQueryParameter adds the streamName to the file info create params
func (o *FileInfoCreateParams) WithStreamNameQueryParameter(streamName *string) *FileInfoCreateParams {
	o.SetStreamNameQueryParameter(streamName)
	return o
}

// SetStreamNameQueryParameter adds the streamName to the file info create params
func (o *FileInfoCreateParams) SetStreamNameQueryParameter(streamName *string) {
	o.StreamNameQueryParameter = streamName
}

// WithVolumeUUIDPathParameter adds the volumeUUID to the file info create params
func (o *FileInfoCreateParams) WithVolumeUUIDPathParameter(volumeUUID string) *FileInfoCreateParams {
	o.SetVolumeUUIDPathParameter(volumeUUID)
	return o
}

// SetVolumeUUIDPathParameter adds the volumeUuid to the file info create params
func (o *FileInfoCreateParams) SetVolumeUUIDPathParameter(volumeUUID string) {
	o.VolumeUUIDPathParameter = volumeUUID
}

// WriteToRequest writes these params to a swagger request
func (o *FileInfoCreateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ByteOffsetQueryParameter != nil {

		// query param byte_offset
		var qrByteOffset int64

		if o.ByteOffsetQueryParameter != nil {
			qrByteOffset = *o.ByteOffsetQueryParameter
		}
		qByteOffset := swag.FormatInt64(qrByteOffset)
		if qByteOffset != "" {

			if err := r.SetQueryParam("byte_offset", qByteOffset); err != nil {
				return err
			}
		}
	}

	if o.Data != nil {

		// form param data
		var frData string
		if o.Data != nil {
			frData = *o.Data
		}
		fData := frData
		if fData != "" {
			if err := r.SetFormParam("data", fData); err != nil {
				return err
			}
		}
	}

	if o.OverwriteQueryParameter != nil {

		// query param overwrite
		var qrOverwrite bool

		if o.OverwriteQueryParameter != nil {
			qrOverwrite = *o.OverwriteQueryParameter
		}
		qOverwrite := swag.FormatBool(qrOverwrite)
		if qOverwrite != "" {

			if err := r.SetQueryParam("overwrite", qOverwrite); err != nil {
				return err
			}
		}
	}

	// path param path
	if err := r.SetPathParam("path", o.PathPathParameter); err != nil {
		return err
	}

	if o.StreamNameQueryParameter != nil {

		// query param stream_name
		var qrStreamName string

		if o.StreamNameQueryParameter != nil {
			qrStreamName = *o.StreamNameQueryParameter
		}
		qStreamName := qrStreamName
		if qStreamName != "" {

			if err := r.SetQueryParam("stream_name", qStreamName); err != nil {
				return err
			}
		}
	}

	// path param volume.uuid
	if err := r.SetPathParam("volume.uuid", o.VolumeUUIDPathParameter); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
