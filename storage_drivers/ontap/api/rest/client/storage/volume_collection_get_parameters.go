// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewVolumeCollectionGetParams creates a new VolumeCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewVolumeCollectionGetParams() *VolumeCollectionGetParams {
	return &VolumeCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewVolumeCollectionGetParamsWithTimeout creates a new VolumeCollectionGetParams object
// with the ability to set a timeout on a request.
func NewVolumeCollectionGetParamsWithTimeout(timeout time.Duration) *VolumeCollectionGetParams {
	return &VolumeCollectionGetParams{
		timeout: timeout,
	}
}

// NewVolumeCollectionGetParamsWithContext creates a new VolumeCollectionGetParams object
// with the ability to set a context for a request.
func NewVolumeCollectionGetParamsWithContext(ctx context.Context) *VolumeCollectionGetParams {
	return &VolumeCollectionGetParams{
		Context: ctx,
	}
}

// NewVolumeCollectionGetParamsWithHTTPClient creates a new VolumeCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewVolumeCollectionGetParamsWithHTTPClient(client *http.Client) *VolumeCollectionGetParams {
	return &VolumeCollectionGetParams{
		HTTPClient: client,
	}
}

/* VolumeCollectionGetParams contains all the parameters to send to the API endpoint
   for the volume collection get operation.

   Typically these are written to a http.Request.
*/
type VolumeCollectionGetParams struct {

	/* AggregatesName.

	   Filter by aggregates.name
	*/
	AggregatesNameQueryParameter *string

	/* AggregatesUUID.

	   Filter by aggregates.uuid
	*/
	AggregatesUUIDQueryParameter *string

	/* ApplicationName.

	   Filter by application.name
	*/
	ApplicationNameQueryParameter *string

	/* ApplicationUUID.

	   Filter by application.uuid
	*/
	ApplicationUUIDQueryParameter *string

	/* AutosizeGrowThreshold.

	   Filter by autosize.grow_threshold
	*/
	AutosizeGrowThresholdQueryParameter *int64

	/* AutosizeMaximum.

	   Filter by autosize.maximum
	*/
	AutosizeMaximumQueryParameter *int64

	/* AutosizeMinimum.

	   Filter by autosize.minimum
	*/
	AutosizeMinimumQueryParameter *int64

	/* AutosizeMode.

	   Filter by autosize.mode
	*/
	AutosizeModeQueryParameter *string

	/* AutosizeShrinkThreshold.

	   Filter by autosize.shrink_threshold
	*/
	AutosizeShrinkThresholdQueryParameter *int64

	/* CloneIsFlexclone.

	   Filter by clone.is_flexclone
	*/
	CloneIsFlexcloneQueryParameter *bool

	/* CloneParentSnapshotName.

	   Filter by clone.parent_snapshot.name
	*/
	CloneParentSnapshotNameQueryParameter *string

	/* CloneParentSnapshotUUID.

	   Filter by clone.parent_snapshot.uuid
	*/
	CloneParentSnapshotUUIDQueryParameter *string

	/* CloneParentSvmName.

	   Filter by clone.parent_svm.name
	*/
	CloneParentSVMNameQueryParameter *string

	/* CloneParentSvmUUID.

	   Filter by clone.parent_svm.uuid
	*/
	CloneParentSVMUUIDQueryParameter *string

	/* CloneParentVolumeName.

	   Filter by clone.parent_volume.name
	*/
	CloneParentVolumeNameQueryParameter *string

	/* CloneParentVolumeUUID.

	   Filter by clone.parent_volume.uuid
	*/
	CloneParentVolumeUUIDQueryParameter *string

	/* CloneSplitCompletePercent.

	   Filter by clone.split_complete_percent
	*/
	CloneSplitCompletePercentQueryParameter *int64

	/* CloneSplitEstimate.

	   Filter by clone.split_estimate
	*/
	CloneSplitEstimateQueryParameter *int64

	/* CloneSplitInitiated.

	   Filter by clone.split_initiated
	*/
	CloneSplitInitiatedQueryParameter *bool

	/* Comment.

	   Filter by comment
	*/
	CommentQueryParameter *string

	/* ConsistencyGroupName.

	   Filter by consistency_group.name
	*/
	ConsistencyGroupNameQueryParameter *string

	/* CreateTime.

	   Filter by create_time
	*/
	CreateTimeQueryParameter *string

	/* EfficiencyCompaction.

	   Filter by efficiency.compaction
	*/
	EfficiencyCompactionQueryParameter *string

	/* EfficiencyCompression.

	   Filter by efficiency.compression
	*/
	EfficiencyCompressionQueryParameter *string

	/* EfficiencyCrossVolumeDedupe.

	   Filter by efficiency.cross_volume_dedupe
	*/
	EfficiencyCrossVolumeDedupeQueryParameter *string

	/* EfficiencyDedupe.

	   Filter by efficiency.dedupe
	*/
	EfficiencyDedupeQueryParameter *string

	/* EfficiencyPolicyName.

	   Filter by efficiency.policy.name
	*/
	EfficiencyPolicyNameQueryParameter *string

	/* EncryptionEnabled.

	   Filter by encryption.enabled
	*/
	EncryptionEnabledQueryParameter *bool

	/* EncryptionKeyID.

	   Filter by encryption.key_id
	*/
	EncryptionKeyIDQueryParameter *string

	/* EncryptionRekey.

	   Filter by encryption.rekey
	*/
	EncryptionRekeyQueryParameter *bool

	/* EncryptionState.

	   Filter by encryption.state
	*/
	EncryptionStateQueryParameter *string

	/* EncryptionStatusCode.

	   Filter by encryption.status.code
	*/
	EncryptionStatusCodeQueryParameter *string

	/* EncryptionStatusMessage.

	   Filter by encryption.status.message
	*/
	EncryptionStatusMessageQueryParameter *string

	/* EncryptionType.

	   Filter by encryption.type
	*/
	EncryptionTypeQueryParameter *string

	/* ErrorStateHasBadBlocks.

	   Filter by error_state.has_bad_blocks
	*/
	ErrorStateHasBadBlocksQueryParameter *bool

	/* ErrorStateIsInconsistent.

	   Filter by error_state.is_inconsistent
	*/
	ErrorStateIsInconsistentQueryParameter *bool

	/* Fields.

	   Specify the fields to return.
	*/
	Fields []string

	/* FilesMaximum.

	   Filter by files.maximum
	*/
	FilesMaximumQueryParameter *int64

	/* FilesUsed.

	   Filter by files.used
	*/
	FilesUsedQueryParameter *int64

	/* FlexcacheEndpointType.

	   Filter by flexcache_endpoint_type
	*/
	FlexcacheEndpointTypeQueryParameter *string

	/* GuaranteeHonored.

	   Filter by guarantee.honored
	*/
	GuaranteeHonoredQueryParameter *bool

	/* GuaranteeType.

	   Filter by guarantee.type
	*/
	GuaranteeTypeQueryParameter *string

	/* IsSvmRoot.

	   Filter by is_svm_root
	*/
	IsSVMRootQueryParameter *bool

	/* Language.

	   Filter by language
	*/
	LanguageQueryParameter *string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecords *int64

	/* MetricCloudDuration.

	   Filter by metric.cloud.duration
	*/
	MetricCloudDurationQueryParameter *string

	/* MetricCloudIopsOther.

	   Filter by metric.cloud.iops.other
	*/
	MetricCloudIopsOtherQueryParameter *int64

	/* MetricCloudIopsRead.

	   Filter by metric.cloud.iops.read
	*/
	MetricCloudIopsReadQueryParameter *int64

	/* MetricCloudIopsTotal.

	   Filter by metric.cloud.iops.total
	*/
	MetricCloudIopsTotalQueryParameter *int64

	/* MetricCloudIopsWrite.

	   Filter by metric.cloud.iops.write
	*/
	MetricCloudIopsWriteQueryParameter *int64

	/* MetricCloudLatencyOther.

	   Filter by metric.cloud.latency.other
	*/
	MetricCloudLatencyOtherQueryParameter *int64

	/* MetricCloudLatencyRead.

	   Filter by metric.cloud.latency.read
	*/
	MetricCloudLatencyReadQueryParameter *int64

	/* MetricCloudLatencyTotal.

	   Filter by metric.cloud.latency.total
	*/
	MetricCloudLatencyTotalQueryParameter *int64

	/* MetricCloudLatencyWrite.

	   Filter by metric.cloud.latency.write
	*/
	MetricCloudLatencyWriteQueryParameter *int64

	/* MetricCloudStatus.

	   Filter by metric.cloud.status
	*/
	MetricCloudStatusQueryParameter *string

	/* MetricCloudTimestamp.

	   Filter by metric.cloud.timestamp
	*/
	MetricCloudTimestampQueryParameter *string

	/* MetricDuration.

	   Filter by metric.duration
	*/
	MetricDurationQueryParameter *string

	/* MetricIopsOther.

	   Filter by metric.iops.other
	*/
	MetricIopsOtherQueryParameter *int64

	/* MetricIopsRead.

	   Filter by metric.iops.read
	*/
	MetricIopsReadQueryParameter *int64

	/* MetricIopsTotal.

	   Filter by metric.iops.total
	*/
	MetricIopsTotalQueryParameter *int64

	/* MetricIopsWrite.

	   Filter by metric.iops.write
	*/
	MetricIopsWriteQueryParameter *int64

	/* MetricLatencyOther.

	   Filter by metric.latency.other
	*/
	MetricLatencyOtherQueryParameter *int64

	/* MetricLatencyRead.

	   Filter by metric.latency.read
	*/
	MetricLatencyReadQueryParameter *int64

	/* MetricLatencyTotal.

	   Filter by metric.latency.total
	*/
	MetricLatencyTotalQueryParameter *int64

	/* MetricLatencyWrite.

	   Filter by metric.latency.write
	*/
	MetricLatencyWriteQueryParameter *int64

	/* MetricStatus.

	   Filter by metric.status
	*/
	MetricStatusQueryParameter *string

	/* MetricThroughputOther.

	   Filter by metric.throughput.other
	*/
	MetricThroughputOtherQueryParameter *int64

	/* MetricThroughputRead.

	   Filter by metric.throughput.read
	*/
	MetricThroughputReadQueryParameter *int64

	/* MetricThroughputTotal.

	   Filter by metric.throughput.total
	*/
	MetricThroughputTotalQueryParameter *int64

	/* MetricThroughputWrite.

	   Filter by metric.throughput.write
	*/
	MetricThroughputWriteQueryParameter *int64

	/* MetricTimestamp.

	   Filter by metric.timestamp
	*/
	MetricTimestampQueryParameter *string

	/* MovementCutoverWindow.

	   Filter by movement.cutover_window
	*/
	MovementCutoverWindowQueryParameter *int64

	/* MovementDestinationAggregateName.

	   Filter by movement.destination_aggregate.name
	*/
	MovementDestinationAggregateNameQueryParameter *string

	/* MovementDestinationAggregateUUID.

	   Filter by movement.destination_aggregate.uuid
	*/
	MovementDestinationAggregateUUIDQueryParameter *string

	/* MovementPercentComplete.

	   Filter by movement.percent_complete
	*/
	MovementPercentCompleteQueryParameter *int64

	/* MovementState.

	   Filter by movement.state
	*/
	MovementStateQueryParameter *string

	/* Name.

	   Filter by name
	*/
	NameQueryParameter *string

	/* NasExportPolicyID.

	   Filter by nas.export_policy.id
	*/
	NasExportPolicyIDQueryParameter *int64

	/* NasExportPolicyName.

	   Filter by nas.export_policy.name
	*/
	NasExportPolicyNameQueryParameter *string

	/* NasGid.

	   Filter by nas.gid
	*/
	NasGIDQueryParameter *int64

	/* NasPath.

	   Filter by nas.path
	*/
	NasPathQueryParameter *string

	/* NasSecurityStyle.

	   Filter by nas.security_style
	*/
	NasSecurityStyleQueryParameter *string

	/* NasUID.

	   Filter by nas.uid
	*/
	NasUIDQueryParameter *int64

	/* NasUnixPermissions.

	   Filter by nas.unix_permissions
	*/
	NasUnixPermissionsQueryParameter *int64

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderBy []string

	/* QosPolicyMaxThroughputIops.

	   Filter by qos.policy.max_throughput_iops
	*/
	QosPolicyMaxThroughputIopsQueryParameter *int64

	/* QosPolicyMaxThroughputMbps.

	   Filter by qos.policy.max_throughput_mbps
	*/
	QosPolicyMaxThroughputMbpsQueryParameter *int64

	/* QosPolicyMinThroughputIops.

	   Filter by qos.policy.min_throughput_iops
	*/
	QosPolicyMinThroughputIopsQueryParameter *int64

	/* QosPolicyName.

	   Filter by qos.policy.name
	*/
	QosPolicyNameQueryParameter *string

	/* QosPolicyUUID.

	   Filter by qos.policy.uuid
	*/
	QosPolicyUUIDQueryParameter *string

	/* QuotaState.

	   Filter by quota.state
	*/
	QuotaStateQueryParameter *string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecords *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeout *int64

	/* Size.

	   Filter by size
	*/
	SizeQueryParameter *int64

	/* SnaplockAppendModeEnabled.

	   Filter by snaplock.append_mode_enabled
	*/
	SnaplockAppendModeEnabledQueryParameter *bool

	/* SnaplockAutocommitPeriod.

	   Filter by snaplock.autocommit_period
	*/
	SnaplockAutocommitPeriodQueryParameter *string

	/* SnaplockComplianceClockTime.

	   Filter by snaplock.compliance_clock_time
	*/
	SnaplockComplianceClockTimeQueryParameter *string

	/* SnaplockExpiryTime.

	   Filter by snaplock.expiry_time
	*/
	SnaplockExpiryTimeQueryParameter *string

	/* SnaplockIsAuditLog.

	   Filter by snaplock.is_audit_log
	*/
	SnaplockIsAuditLogQueryParameter *bool

	/* SnaplockLitigationCount.

	   Filter by snaplock.litigation_count
	*/
	SnaplockLitigationCountQueryParameter *int64

	/* SnaplockPrivilegedDelete.

	   Filter by snaplock.privileged_delete
	*/
	SnaplockPrivilegedDeleteQueryParameter *string

	/* SnaplockRetentionDefault.

	   Filter by snaplock.retention.default
	*/
	SnaplockRetentionDefaultQueryParameter *string

	/* SnaplockRetentionMaximum.

	   Filter by snaplock.retention.maximum
	*/
	SnaplockRetentionMaximumQueryParameter *string

	/* SnaplockRetentionMinimum.

	   Filter by snaplock.retention.minimum
	*/
	SnaplockRetentionMinimumQueryParameter *string

	/* SnaplockType.

	   Filter by snaplock.type
	*/
	SnaplockTypeQueryParameter *string

	/* SnapmirrorIsProtected.

	   Filter by snapmirror.is_protected
	*/
	SnapmirrorIsProtectedQueryParameter *bool

	/* SnapshotPolicyName.

	   Filter by snapshot_policy.name
	*/
	SnapshotPolicyNameQueryParameter *string

	/* SnapshotPolicyUUID.

	   Filter by snapshot_policy.uuid
	*/
	SnapshotPolicyUUIDQueryParameter *string

	/* SpaceAvailable.

	   Filter by space.available
	*/
	SpaceAvailableQueryParameter *int64

	/* SpaceBlockStorageInactiveUserData.

	   Filter by space.block_storage_inactive_user_data
	*/
	SpaceBlockStorageInactiveUserDataQueryParameter *int64

	/* SpaceCapacityTierFootprint.

	   Filter by space.capacity_tier_footprint
	*/
	SpaceCapacityTierFootprintQueryParameter *int64

	/* SpaceFootprint.

	   Filter by space.footprint
	*/
	SpaceFootprintQueryParameter *int64

	/* SpaceLogicalSpaceAvailable.

	   Filter by space.logical_space.available
	*/
	SpaceLogicalSpaceAvailableQueryParameter *int64

	/* SpaceLogicalSpaceEnforcement.

	   Filter by space.logical_space.enforcement
	*/
	SpaceLogicalSpaceEnforcementQueryParameter *bool

	/* SpaceLogicalSpaceReporting.

	   Filter by space.logical_space.reporting
	*/
	SpaceLogicalSpaceReportingQueryParameter *bool

	/* SpaceLogicalSpaceUsedByAfs.

	   Filter by space.logical_space.used_by_afs
	*/
	SpaceLogicalSpaceUsedByAfsQueryParameter *int64

	/* SpaceMetadata.

	   Filter by space.metadata
	*/
	SpaceMetadataQueryParameter *int64

	/* SpaceOverProvisioned.

	   Filter by space.over_provisioned
	*/
	SpaceOverProvisionedQueryParameter *int64

	/* SpaceSize.

	   Filter by space.size
	*/
	SpaceSizeQueryParameter *int64

	/* SpaceSnapshotReservePercent.

	   Filter by space.snapshot.reserve_percent
	*/
	SpaceSnapshotReservePercentQueryParameter *int64

	/* SpaceSnapshotUsed.

	   Filter by space.snapshot.used
	*/
	SpaceSnapshotUsedQueryParameter *int64

	/* SpaceUsed.

	   Filter by space.used
	*/
	SpaceUsedQueryParameter *int64

	/* State.

	   Filter by state
	*/
	StateQueryParameter *string

	/* StatisticsCloudIopsRawOther.

	   Filter by statistics.cloud.iops_raw.other
	*/
	StatisticsCloudIopsRawOtherQueryParameter *int64

	/* StatisticsCloudIopsRawRead.

	   Filter by statistics.cloud.iops_raw.read
	*/
	StatisticsCloudIopsRawReadQueryParameter *int64

	/* StatisticsCloudIopsRawTotal.

	   Filter by statistics.cloud.iops_raw.total
	*/
	StatisticsCloudIopsRawTotalQueryParameter *int64

	/* StatisticsCloudIopsRawWrite.

	   Filter by statistics.cloud.iops_raw.write
	*/
	StatisticsCloudIopsRawWriteQueryParameter *int64

	/* StatisticsCloudLatencyRawOther.

	   Filter by statistics.cloud.latency_raw.other
	*/
	StatisticsCloudLatencyRawOtherQueryParameter *int64

	/* StatisticsCloudLatencyRawRead.

	   Filter by statistics.cloud.latency_raw.read
	*/
	StatisticsCloudLatencyRawReadQueryParameter *int64

	/* StatisticsCloudLatencyRawTotal.

	   Filter by statistics.cloud.latency_raw.total
	*/
	StatisticsCloudLatencyRawTotalQueryParameter *int64

	/* StatisticsCloudLatencyRawWrite.

	   Filter by statistics.cloud.latency_raw.write
	*/
	StatisticsCloudLatencyRawWriteQueryParameter *int64

	/* StatisticsCloudStatus.

	   Filter by statistics.cloud.status
	*/
	StatisticsCloudStatusQueryParameter *string

	/* StatisticsCloudTimestamp.

	   Filter by statistics.cloud.timestamp
	*/
	StatisticsCloudTimestampQueryParameter *string

	/* StatisticsIopsRawOther.

	   Filter by statistics.iops_raw.other
	*/
	StatisticsIopsRawOtherQueryParameter *int64

	/* StatisticsIopsRawRead.

	   Filter by statistics.iops_raw.read
	*/
	StatisticsIopsRawReadQueryParameter *int64

	/* StatisticsIopsRawTotal.

	   Filter by statistics.iops_raw.total
	*/
	StatisticsIopsRawTotalQueryParameter *int64

	/* StatisticsIopsRawWrite.

	   Filter by statistics.iops_raw.write
	*/
	StatisticsIopsRawWriteQueryParameter *int64

	/* StatisticsLatencyRawOther.

	   Filter by statistics.latency_raw.other
	*/
	StatisticsLatencyRawOtherQueryParameter *int64

	/* StatisticsLatencyRawRead.

	   Filter by statistics.latency_raw.read
	*/
	StatisticsLatencyRawReadQueryParameter *int64

	/* StatisticsLatencyRawTotal.

	   Filter by statistics.latency_raw.total
	*/
	StatisticsLatencyRawTotalQueryParameter *int64

	/* StatisticsLatencyRawWrite.

	   Filter by statistics.latency_raw.write
	*/
	StatisticsLatencyRawWriteQueryParameter *int64

	/* StatisticsStatus.

	   Filter by statistics.status
	*/
	StatisticsStatusQueryParameter *string

	/* StatisticsThroughputRawOther.

	   Filter by statistics.throughput_raw.other
	*/
	StatisticsThroughputRawOtherQueryParameter *int64

	/* StatisticsThroughputRawRead.

	   Filter by statistics.throughput_raw.read
	*/
	StatisticsThroughputRawReadQueryParameter *int64

	/* StatisticsThroughputRawTotal.

	   Filter by statistics.throughput_raw.total
	*/
	StatisticsThroughputRawTotalQueryParameter *int64

	/* StatisticsThroughputRawWrite.

	   Filter by statistics.throughput_raw.write
	*/
	StatisticsThroughputRawWriteQueryParameter *int64

	/* StatisticsTimestamp.

	   Filter by statistics.timestamp
	*/
	StatisticsTimestampQueryParameter *string

	/* Style.

	   Filter by style
	*/
	StyleQueryParameter *string

	/* SvmName.

	   Filter by svm.name
	*/
	SVMNameQueryParameter *string

	/* SvmUUID.

	   Filter by svm.uuid
	*/
	SVMUUIDQueryParameter *string

	/* TieringPolicy.

	   Filter by tiering.policy
	*/
	TieringPolicyQueryParameter *string

	/* Type.

	   Filter by type
	*/
	TypeQueryParameter *string

	/* UUID.

	   Filter by uuid
	*/
	UUIDQueryParameter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the volume collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *VolumeCollectionGetParams) WithDefaults() *VolumeCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the volume collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *VolumeCollectionGetParams) SetDefaults() {
	var (
		returnRecordsDefault = bool(true)

		returnTimeoutDefault = int64(15)
	)

	val := VolumeCollectionGetParams{
		ReturnRecords: &returnRecordsDefault,
		ReturnTimeout: &returnTimeoutDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the volume collection get params
func (o *VolumeCollectionGetParams) WithTimeout(timeout time.Duration) *VolumeCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the volume collection get params
func (o *VolumeCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the volume collection get params
func (o *VolumeCollectionGetParams) WithContext(ctx context.Context) *VolumeCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the volume collection get params
func (o *VolumeCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the volume collection get params
func (o *VolumeCollectionGetParams) WithHTTPClient(client *http.Client) *VolumeCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the volume collection get params
func (o *VolumeCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAggregatesNameQueryParameter adds the aggregatesName to the volume collection get params
func (o *VolumeCollectionGetParams) WithAggregatesNameQueryParameter(aggregatesName *string) *VolumeCollectionGetParams {
	o.SetAggregatesNameQueryParameter(aggregatesName)
	return o
}

// SetAggregatesNameQueryParameter adds the aggregatesName to the volume collection get params
func (o *VolumeCollectionGetParams) SetAggregatesNameQueryParameter(aggregatesName *string) {
	o.AggregatesNameQueryParameter = aggregatesName
}

// WithAggregatesUUIDQueryParameter adds the aggregatesUUID to the volume collection get params
func (o *VolumeCollectionGetParams) WithAggregatesUUIDQueryParameter(aggregatesUUID *string) *VolumeCollectionGetParams {
	o.SetAggregatesUUIDQueryParameter(aggregatesUUID)
	return o
}

// SetAggregatesUUIDQueryParameter adds the aggregatesUuid to the volume collection get params
func (o *VolumeCollectionGetParams) SetAggregatesUUIDQueryParameter(aggregatesUUID *string) {
	o.AggregatesUUIDQueryParameter = aggregatesUUID
}

// WithApplicationNameQueryParameter adds the applicationName to the volume collection get params
func (o *VolumeCollectionGetParams) WithApplicationNameQueryParameter(applicationName *string) *VolumeCollectionGetParams {
	o.SetApplicationNameQueryParameter(applicationName)
	return o
}

// SetApplicationNameQueryParameter adds the applicationName to the volume collection get params
func (o *VolumeCollectionGetParams) SetApplicationNameQueryParameter(applicationName *string) {
	o.ApplicationNameQueryParameter = applicationName
}

// WithApplicationUUIDQueryParameter adds the applicationUUID to the volume collection get params
func (o *VolumeCollectionGetParams) WithApplicationUUIDQueryParameter(applicationUUID *string) *VolumeCollectionGetParams {
	o.SetApplicationUUIDQueryParameter(applicationUUID)
	return o
}

// SetApplicationUUIDQueryParameter adds the applicationUuid to the volume collection get params
func (o *VolumeCollectionGetParams) SetApplicationUUIDQueryParameter(applicationUUID *string) {
	o.ApplicationUUIDQueryParameter = applicationUUID
}

// WithAutosizeGrowThresholdQueryParameter adds the autosizeGrowThreshold to the volume collection get params
func (o *VolumeCollectionGetParams) WithAutosizeGrowThresholdQueryParameter(autosizeGrowThreshold *int64) *VolumeCollectionGetParams {
	o.SetAutosizeGrowThresholdQueryParameter(autosizeGrowThreshold)
	return o
}

// SetAutosizeGrowThresholdQueryParameter adds the autosizeGrowThreshold to the volume collection get params
func (o *VolumeCollectionGetParams) SetAutosizeGrowThresholdQueryParameter(autosizeGrowThreshold *int64) {
	o.AutosizeGrowThresholdQueryParameter = autosizeGrowThreshold
}

// WithAutosizeMaximumQueryParameter adds the autosizeMaximum to the volume collection get params
func (o *VolumeCollectionGetParams) WithAutosizeMaximumQueryParameter(autosizeMaximum *int64) *VolumeCollectionGetParams {
	o.SetAutosizeMaximumQueryParameter(autosizeMaximum)
	return o
}

// SetAutosizeMaximumQueryParameter adds the autosizeMaximum to the volume collection get params
func (o *VolumeCollectionGetParams) SetAutosizeMaximumQueryParameter(autosizeMaximum *int64) {
	o.AutosizeMaximumQueryParameter = autosizeMaximum
}

// WithAutosizeMinimumQueryParameter adds the autosizeMinimum to the volume collection get params
func (o *VolumeCollectionGetParams) WithAutosizeMinimumQueryParameter(autosizeMinimum *int64) *VolumeCollectionGetParams {
	o.SetAutosizeMinimumQueryParameter(autosizeMinimum)
	return o
}

// SetAutosizeMinimumQueryParameter adds the autosizeMinimum to the volume collection get params
func (o *VolumeCollectionGetParams) SetAutosizeMinimumQueryParameter(autosizeMinimum *int64) {
	o.AutosizeMinimumQueryParameter = autosizeMinimum
}

// WithAutosizeModeQueryParameter adds the autosizeMode to the volume collection get params
func (o *VolumeCollectionGetParams) WithAutosizeModeQueryParameter(autosizeMode *string) *VolumeCollectionGetParams {
	o.SetAutosizeModeQueryParameter(autosizeMode)
	return o
}

// SetAutosizeModeQueryParameter adds the autosizeMode to the volume collection get params
func (o *VolumeCollectionGetParams) SetAutosizeModeQueryParameter(autosizeMode *string) {
	o.AutosizeModeQueryParameter = autosizeMode
}

// WithAutosizeShrinkThresholdQueryParameter adds the autosizeShrinkThreshold to the volume collection get params
func (o *VolumeCollectionGetParams) WithAutosizeShrinkThresholdQueryParameter(autosizeShrinkThreshold *int64) *VolumeCollectionGetParams {
	o.SetAutosizeShrinkThresholdQueryParameter(autosizeShrinkThreshold)
	return o
}

// SetAutosizeShrinkThresholdQueryParameter adds the autosizeShrinkThreshold to the volume collection get params
func (o *VolumeCollectionGetParams) SetAutosizeShrinkThresholdQueryParameter(autosizeShrinkThreshold *int64) {
	o.AutosizeShrinkThresholdQueryParameter = autosizeShrinkThreshold
}

// WithCloneIsFlexcloneQueryParameter adds the cloneIsFlexclone to the volume collection get params
func (o *VolumeCollectionGetParams) WithCloneIsFlexcloneQueryParameter(cloneIsFlexclone *bool) *VolumeCollectionGetParams {
	o.SetCloneIsFlexcloneQueryParameter(cloneIsFlexclone)
	return o
}

// SetCloneIsFlexcloneQueryParameter adds the cloneIsFlexclone to the volume collection get params
func (o *VolumeCollectionGetParams) SetCloneIsFlexcloneQueryParameter(cloneIsFlexclone *bool) {
	o.CloneIsFlexcloneQueryParameter = cloneIsFlexclone
}

// WithCloneParentSnapshotNameQueryParameter adds the cloneParentSnapshotName to the volume collection get params
func (o *VolumeCollectionGetParams) WithCloneParentSnapshotNameQueryParameter(cloneParentSnapshotName *string) *VolumeCollectionGetParams {
	o.SetCloneParentSnapshotNameQueryParameter(cloneParentSnapshotName)
	return o
}

// SetCloneParentSnapshotNameQueryParameter adds the cloneParentSnapshotName to the volume collection get params
func (o *VolumeCollectionGetParams) SetCloneParentSnapshotNameQueryParameter(cloneParentSnapshotName *string) {
	o.CloneParentSnapshotNameQueryParameter = cloneParentSnapshotName
}

// WithCloneParentSnapshotUUIDQueryParameter adds the cloneParentSnapshotUUID to the volume collection get params
func (o *VolumeCollectionGetParams) WithCloneParentSnapshotUUIDQueryParameter(cloneParentSnapshotUUID *string) *VolumeCollectionGetParams {
	o.SetCloneParentSnapshotUUIDQueryParameter(cloneParentSnapshotUUID)
	return o
}

// SetCloneParentSnapshotUUIDQueryParameter adds the cloneParentSnapshotUuid to the volume collection get params
func (o *VolumeCollectionGetParams) SetCloneParentSnapshotUUIDQueryParameter(cloneParentSnapshotUUID *string) {
	o.CloneParentSnapshotUUIDQueryParameter = cloneParentSnapshotUUID
}

// WithCloneParentSVMNameQueryParameter adds the cloneParentSvmName to the volume collection get params
func (o *VolumeCollectionGetParams) WithCloneParentSVMNameQueryParameter(cloneParentSvmName *string) *VolumeCollectionGetParams {
	o.SetCloneParentSVMNameQueryParameter(cloneParentSvmName)
	return o
}

// SetCloneParentSVMNameQueryParameter adds the cloneParentSvmName to the volume collection get params
func (o *VolumeCollectionGetParams) SetCloneParentSVMNameQueryParameter(cloneParentSvmName *string) {
	o.CloneParentSVMNameQueryParameter = cloneParentSvmName
}

// WithCloneParentSVMUUIDQueryParameter adds the cloneParentSvmUUID to the volume collection get params
func (o *VolumeCollectionGetParams) WithCloneParentSVMUUIDQueryParameter(cloneParentSvmUUID *string) *VolumeCollectionGetParams {
	o.SetCloneParentSVMUUIDQueryParameter(cloneParentSvmUUID)
	return o
}

// SetCloneParentSVMUUIDQueryParameter adds the cloneParentSvmUuid to the volume collection get params
func (o *VolumeCollectionGetParams) SetCloneParentSVMUUIDQueryParameter(cloneParentSvmUUID *string) {
	o.CloneParentSVMUUIDQueryParameter = cloneParentSvmUUID
}

// WithCloneParentVolumeNameQueryParameter adds the cloneParentVolumeName to the volume collection get params
func (o *VolumeCollectionGetParams) WithCloneParentVolumeNameQueryParameter(cloneParentVolumeName *string) *VolumeCollectionGetParams {
	o.SetCloneParentVolumeNameQueryParameter(cloneParentVolumeName)
	return o
}

// SetCloneParentVolumeNameQueryParameter adds the cloneParentVolumeName to the volume collection get params
func (o *VolumeCollectionGetParams) SetCloneParentVolumeNameQueryParameter(cloneParentVolumeName *string) {
	o.CloneParentVolumeNameQueryParameter = cloneParentVolumeName
}

// WithCloneParentVolumeUUIDQueryParameter adds the cloneParentVolumeUUID to the volume collection get params
func (o *VolumeCollectionGetParams) WithCloneParentVolumeUUIDQueryParameter(cloneParentVolumeUUID *string) *VolumeCollectionGetParams {
	o.SetCloneParentVolumeUUIDQueryParameter(cloneParentVolumeUUID)
	return o
}

// SetCloneParentVolumeUUIDQueryParameter adds the cloneParentVolumeUuid to the volume collection get params
func (o *VolumeCollectionGetParams) SetCloneParentVolumeUUIDQueryParameter(cloneParentVolumeUUID *string) {
	o.CloneParentVolumeUUIDQueryParameter = cloneParentVolumeUUID
}

// WithCloneSplitCompletePercentQueryParameter adds the cloneSplitCompletePercent to the volume collection get params
func (o *VolumeCollectionGetParams) WithCloneSplitCompletePercentQueryParameter(cloneSplitCompletePercent *int64) *VolumeCollectionGetParams {
	o.SetCloneSplitCompletePercentQueryParameter(cloneSplitCompletePercent)
	return o
}

// SetCloneSplitCompletePercentQueryParameter adds the cloneSplitCompletePercent to the volume collection get params
func (o *VolumeCollectionGetParams) SetCloneSplitCompletePercentQueryParameter(cloneSplitCompletePercent *int64) {
	o.CloneSplitCompletePercentQueryParameter = cloneSplitCompletePercent
}

// WithCloneSplitEstimateQueryParameter adds the cloneSplitEstimate to the volume collection get params
func (o *VolumeCollectionGetParams) WithCloneSplitEstimateQueryParameter(cloneSplitEstimate *int64) *VolumeCollectionGetParams {
	o.SetCloneSplitEstimateQueryParameter(cloneSplitEstimate)
	return o
}

// SetCloneSplitEstimateQueryParameter adds the cloneSplitEstimate to the volume collection get params
func (o *VolumeCollectionGetParams) SetCloneSplitEstimateQueryParameter(cloneSplitEstimate *int64) {
	o.CloneSplitEstimateQueryParameter = cloneSplitEstimate
}

// WithCloneSplitInitiatedQueryParameter adds the cloneSplitInitiated to the volume collection get params
func (o *VolumeCollectionGetParams) WithCloneSplitInitiatedQueryParameter(cloneSplitInitiated *bool) *VolumeCollectionGetParams {
	o.SetCloneSplitInitiatedQueryParameter(cloneSplitInitiated)
	return o
}

// SetCloneSplitInitiatedQueryParameter adds the cloneSplitInitiated to the volume collection get params
func (o *VolumeCollectionGetParams) SetCloneSplitInitiatedQueryParameter(cloneSplitInitiated *bool) {
	o.CloneSplitInitiatedQueryParameter = cloneSplitInitiated
}

// WithCommentQueryParameter adds the comment to the volume collection get params
func (o *VolumeCollectionGetParams) WithCommentQueryParameter(comment *string) *VolumeCollectionGetParams {
	o.SetCommentQueryParameter(comment)
	return o
}

// SetCommentQueryParameter adds the comment to the volume collection get params
func (o *VolumeCollectionGetParams) SetCommentQueryParameter(comment *string) {
	o.CommentQueryParameter = comment
}

// WithConsistencyGroupNameQueryParameter adds the consistencyGroupName to the volume collection get params
func (o *VolumeCollectionGetParams) WithConsistencyGroupNameQueryParameter(consistencyGroupName *string) *VolumeCollectionGetParams {
	o.SetConsistencyGroupNameQueryParameter(consistencyGroupName)
	return o
}

// SetConsistencyGroupNameQueryParameter adds the consistencyGroupName to the volume collection get params
func (o *VolumeCollectionGetParams) SetConsistencyGroupNameQueryParameter(consistencyGroupName *string) {
	o.ConsistencyGroupNameQueryParameter = consistencyGroupName
}

// WithCreateTimeQueryParameter adds the createTime to the volume collection get params
func (o *VolumeCollectionGetParams) WithCreateTimeQueryParameter(createTime *string) *VolumeCollectionGetParams {
	o.SetCreateTimeQueryParameter(createTime)
	return o
}

// SetCreateTimeQueryParameter adds the createTime to the volume collection get params
func (o *VolumeCollectionGetParams) SetCreateTimeQueryParameter(createTime *string) {
	o.CreateTimeQueryParameter = createTime
}

// WithEfficiencyCompactionQueryParameter adds the efficiencyCompaction to the volume collection get params
func (o *VolumeCollectionGetParams) WithEfficiencyCompactionQueryParameter(efficiencyCompaction *string) *VolumeCollectionGetParams {
	o.SetEfficiencyCompactionQueryParameter(efficiencyCompaction)
	return o
}

// SetEfficiencyCompactionQueryParameter adds the efficiencyCompaction to the volume collection get params
func (o *VolumeCollectionGetParams) SetEfficiencyCompactionQueryParameter(efficiencyCompaction *string) {
	o.EfficiencyCompactionQueryParameter = efficiencyCompaction
}

// WithEfficiencyCompressionQueryParameter adds the efficiencyCompression to the volume collection get params
func (o *VolumeCollectionGetParams) WithEfficiencyCompressionQueryParameter(efficiencyCompression *string) *VolumeCollectionGetParams {
	o.SetEfficiencyCompressionQueryParameter(efficiencyCompression)
	return o
}

// SetEfficiencyCompressionQueryParameter adds the efficiencyCompression to the volume collection get params
func (o *VolumeCollectionGetParams) SetEfficiencyCompressionQueryParameter(efficiencyCompression *string) {
	o.EfficiencyCompressionQueryParameter = efficiencyCompression
}

// WithEfficiencyCrossVolumeDedupeQueryParameter adds the efficiencyCrossVolumeDedupe to the volume collection get params
func (o *VolumeCollectionGetParams) WithEfficiencyCrossVolumeDedupeQueryParameter(efficiencyCrossVolumeDedupe *string) *VolumeCollectionGetParams {
	o.SetEfficiencyCrossVolumeDedupeQueryParameter(efficiencyCrossVolumeDedupe)
	return o
}

// SetEfficiencyCrossVolumeDedupeQueryParameter adds the efficiencyCrossVolumeDedupe to the volume collection get params
func (o *VolumeCollectionGetParams) SetEfficiencyCrossVolumeDedupeQueryParameter(efficiencyCrossVolumeDedupe *string) {
	o.EfficiencyCrossVolumeDedupeQueryParameter = efficiencyCrossVolumeDedupe
}

// WithEfficiencyDedupeQueryParameter adds the efficiencyDedupe to the volume collection get params
func (o *VolumeCollectionGetParams) WithEfficiencyDedupeQueryParameter(efficiencyDedupe *string) *VolumeCollectionGetParams {
	o.SetEfficiencyDedupeQueryParameter(efficiencyDedupe)
	return o
}

// SetEfficiencyDedupeQueryParameter adds the efficiencyDedupe to the volume collection get params
func (o *VolumeCollectionGetParams) SetEfficiencyDedupeQueryParameter(efficiencyDedupe *string) {
	o.EfficiencyDedupeQueryParameter = efficiencyDedupe
}

// WithEfficiencyPolicyNameQueryParameter adds the efficiencyPolicyName to the volume collection get params
func (o *VolumeCollectionGetParams) WithEfficiencyPolicyNameQueryParameter(efficiencyPolicyName *string) *VolumeCollectionGetParams {
	o.SetEfficiencyPolicyNameQueryParameter(efficiencyPolicyName)
	return o
}

// SetEfficiencyPolicyNameQueryParameter adds the efficiencyPolicyName to the volume collection get params
func (o *VolumeCollectionGetParams) SetEfficiencyPolicyNameQueryParameter(efficiencyPolicyName *string) {
	o.EfficiencyPolicyNameQueryParameter = efficiencyPolicyName
}

// WithEncryptionEnabledQueryParameter adds the encryptionEnabled to the volume collection get params
func (o *VolumeCollectionGetParams) WithEncryptionEnabledQueryParameter(encryptionEnabled *bool) *VolumeCollectionGetParams {
	o.SetEncryptionEnabledQueryParameter(encryptionEnabled)
	return o
}

// SetEncryptionEnabledQueryParameter adds the encryptionEnabled to the volume collection get params
func (o *VolumeCollectionGetParams) SetEncryptionEnabledQueryParameter(encryptionEnabled *bool) {
	o.EncryptionEnabledQueryParameter = encryptionEnabled
}

// WithEncryptionKeyIDQueryParameter adds the encryptionKeyID to the volume collection get params
func (o *VolumeCollectionGetParams) WithEncryptionKeyIDQueryParameter(encryptionKeyID *string) *VolumeCollectionGetParams {
	o.SetEncryptionKeyIDQueryParameter(encryptionKeyID)
	return o
}

// SetEncryptionKeyIDQueryParameter adds the encryptionKeyId to the volume collection get params
func (o *VolumeCollectionGetParams) SetEncryptionKeyIDQueryParameter(encryptionKeyID *string) {
	o.EncryptionKeyIDQueryParameter = encryptionKeyID
}

// WithEncryptionRekeyQueryParameter adds the encryptionRekey to the volume collection get params
func (o *VolumeCollectionGetParams) WithEncryptionRekeyQueryParameter(encryptionRekey *bool) *VolumeCollectionGetParams {
	o.SetEncryptionRekeyQueryParameter(encryptionRekey)
	return o
}

// SetEncryptionRekeyQueryParameter adds the encryptionRekey to the volume collection get params
func (o *VolumeCollectionGetParams) SetEncryptionRekeyQueryParameter(encryptionRekey *bool) {
	o.EncryptionRekeyQueryParameter = encryptionRekey
}

// WithEncryptionStateQueryParameter adds the encryptionState to the volume collection get params
func (o *VolumeCollectionGetParams) WithEncryptionStateQueryParameter(encryptionState *string) *VolumeCollectionGetParams {
	o.SetEncryptionStateQueryParameter(encryptionState)
	return o
}

// SetEncryptionStateQueryParameter adds the encryptionState to the volume collection get params
func (o *VolumeCollectionGetParams) SetEncryptionStateQueryParameter(encryptionState *string) {
	o.EncryptionStateQueryParameter = encryptionState
}

// WithEncryptionStatusCodeQueryParameter adds the encryptionStatusCode to the volume collection get params
func (o *VolumeCollectionGetParams) WithEncryptionStatusCodeQueryParameter(encryptionStatusCode *string) *VolumeCollectionGetParams {
	o.SetEncryptionStatusCodeQueryParameter(encryptionStatusCode)
	return o
}

// SetEncryptionStatusCodeQueryParameter adds the encryptionStatusCode to the volume collection get params
func (o *VolumeCollectionGetParams) SetEncryptionStatusCodeQueryParameter(encryptionStatusCode *string) {
	o.EncryptionStatusCodeQueryParameter = encryptionStatusCode
}

// WithEncryptionStatusMessageQueryParameter adds the encryptionStatusMessage to the volume collection get params
func (o *VolumeCollectionGetParams) WithEncryptionStatusMessageQueryParameter(encryptionStatusMessage *string) *VolumeCollectionGetParams {
	o.SetEncryptionStatusMessageQueryParameter(encryptionStatusMessage)
	return o
}

// SetEncryptionStatusMessageQueryParameter adds the encryptionStatusMessage to the volume collection get params
func (o *VolumeCollectionGetParams) SetEncryptionStatusMessageQueryParameter(encryptionStatusMessage *string) {
	o.EncryptionStatusMessageQueryParameter = encryptionStatusMessage
}

// WithEncryptionTypeQueryParameter adds the encryptionType to the volume collection get params
func (o *VolumeCollectionGetParams) WithEncryptionTypeQueryParameter(encryptionType *string) *VolumeCollectionGetParams {
	o.SetEncryptionTypeQueryParameter(encryptionType)
	return o
}

// SetEncryptionTypeQueryParameter adds the encryptionType to the volume collection get params
func (o *VolumeCollectionGetParams) SetEncryptionTypeQueryParameter(encryptionType *string) {
	o.EncryptionTypeQueryParameter = encryptionType
}

// WithErrorStateHasBadBlocksQueryParameter adds the errorStateHasBadBlocks to the volume collection get params
func (o *VolumeCollectionGetParams) WithErrorStateHasBadBlocksQueryParameter(errorStateHasBadBlocks *bool) *VolumeCollectionGetParams {
	o.SetErrorStateHasBadBlocksQueryParameter(errorStateHasBadBlocks)
	return o
}

// SetErrorStateHasBadBlocksQueryParameter adds the errorStateHasBadBlocks to the volume collection get params
func (o *VolumeCollectionGetParams) SetErrorStateHasBadBlocksQueryParameter(errorStateHasBadBlocks *bool) {
	o.ErrorStateHasBadBlocksQueryParameter = errorStateHasBadBlocks
}

// WithErrorStateIsInconsistentQueryParameter adds the errorStateIsInconsistent to the volume collection get params
func (o *VolumeCollectionGetParams) WithErrorStateIsInconsistentQueryParameter(errorStateIsInconsistent *bool) *VolumeCollectionGetParams {
	o.SetErrorStateIsInconsistentQueryParameter(errorStateIsInconsistent)
	return o
}

// SetErrorStateIsInconsistentQueryParameter adds the errorStateIsInconsistent to the volume collection get params
func (o *VolumeCollectionGetParams) SetErrorStateIsInconsistentQueryParameter(errorStateIsInconsistent *bool) {
	o.ErrorStateIsInconsistentQueryParameter = errorStateIsInconsistent
}

// WithFields adds the fields to the volume collection get params
func (o *VolumeCollectionGetParams) WithFields(fields []string) *VolumeCollectionGetParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the volume collection get params
func (o *VolumeCollectionGetParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithFilesMaximumQueryParameter adds the filesMaximum to the volume collection get params
func (o *VolumeCollectionGetParams) WithFilesMaximumQueryParameter(filesMaximum *int64) *VolumeCollectionGetParams {
	o.SetFilesMaximumQueryParameter(filesMaximum)
	return o
}

// SetFilesMaximumQueryParameter adds the filesMaximum to the volume collection get params
func (o *VolumeCollectionGetParams) SetFilesMaximumQueryParameter(filesMaximum *int64) {
	o.FilesMaximumQueryParameter = filesMaximum
}

// WithFilesUsedQueryParameter adds the filesUsed to the volume collection get params
func (o *VolumeCollectionGetParams) WithFilesUsedQueryParameter(filesUsed *int64) *VolumeCollectionGetParams {
	o.SetFilesUsedQueryParameter(filesUsed)
	return o
}

// SetFilesUsedQueryParameter adds the filesUsed to the volume collection get params
func (o *VolumeCollectionGetParams) SetFilesUsedQueryParameter(filesUsed *int64) {
	o.FilesUsedQueryParameter = filesUsed
}

// WithFlexcacheEndpointTypeQueryParameter adds the flexcacheEndpointType to the volume collection get params
func (o *VolumeCollectionGetParams) WithFlexcacheEndpointTypeQueryParameter(flexcacheEndpointType *string) *VolumeCollectionGetParams {
	o.SetFlexcacheEndpointTypeQueryParameter(flexcacheEndpointType)
	return o
}

// SetFlexcacheEndpointTypeQueryParameter adds the flexcacheEndpointType to the volume collection get params
func (o *VolumeCollectionGetParams) SetFlexcacheEndpointTypeQueryParameter(flexcacheEndpointType *string) {
	o.FlexcacheEndpointTypeQueryParameter = flexcacheEndpointType
}

// WithGuaranteeHonoredQueryParameter adds the guaranteeHonored to the volume collection get params
func (o *VolumeCollectionGetParams) WithGuaranteeHonoredQueryParameter(guaranteeHonored *bool) *VolumeCollectionGetParams {
	o.SetGuaranteeHonoredQueryParameter(guaranteeHonored)
	return o
}

// SetGuaranteeHonoredQueryParameter adds the guaranteeHonored to the volume collection get params
func (o *VolumeCollectionGetParams) SetGuaranteeHonoredQueryParameter(guaranteeHonored *bool) {
	o.GuaranteeHonoredQueryParameter = guaranteeHonored
}

// WithGuaranteeTypeQueryParameter adds the guaranteeType to the volume collection get params
func (o *VolumeCollectionGetParams) WithGuaranteeTypeQueryParameter(guaranteeType *string) *VolumeCollectionGetParams {
	o.SetGuaranteeTypeQueryParameter(guaranteeType)
	return o
}

// SetGuaranteeTypeQueryParameter adds the guaranteeType to the volume collection get params
func (o *VolumeCollectionGetParams) SetGuaranteeTypeQueryParameter(guaranteeType *string) {
	o.GuaranteeTypeQueryParameter = guaranteeType
}

// WithIsSVMRootQueryParameter adds the isSvmRoot to the volume collection get params
func (o *VolumeCollectionGetParams) WithIsSVMRootQueryParameter(isSvmRoot *bool) *VolumeCollectionGetParams {
	o.SetIsSVMRootQueryParameter(isSvmRoot)
	return o
}

// SetIsSVMRootQueryParameter adds the isSvmRoot to the volume collection get params
func (o *VolumeCollectionGetParams) SetIsSVMRootQueryParameter(isSvmRoot *bool) {
	o.IsSVMRootQueryParameter = isSvmRoot
}

// WithLanguageQueryParameter adds the language to the volume collection get params
func (o *VolumeCollectionGetParams) WithLanguageQueryParameter(language *string) *VolumeCollectionGetParams {
	o.SetLanguageQueryParameter(language)
	return o
}

// SetLanguageQueryParameter adds the language to the volume collection get params
func (o *VolumeCollectionGetParams) SetLanguageQueryParameter(language *string) {
	o.LanguageQueryParameter = language
}

// WithMaxRecords adds the maxRecords to the volume collection get params
func (o *VolumeCollectionGetParams) WithMaxRecords(maxRecords *int64) *VolumeCollectionGetParams {
	o.SetMaxRecords(maxRecords)
	return o
}

// SetMaxRecords adds the maxRecords to the volume collection get params
func (o *VolumeCollectionGetParams) SetMaxRecords(maxRecords *int64) {
	o.MaxRecords = maxRecords
}

// WithMetricCloudDurationQueryParameter adds the metricCloudDuration to the volume collection get params
func (o *VolumeCollectionGetParams) WithMetricCloudDurationQueryParameter(metricCloudDuration *string) *VolumeCollectionGetParams {
	o.SetMetricCloudDurationQueryParameter(metricCloudDuration)
	return o
}

// SetMetricCloudDurationQueryParameter adds the metricCloudDuration to the volume collection get params
func (o *VolumeCollectionGetParams) SetMetricCloudDurationQueryParameter(metricCloudDuration *string) {
	o.MetricCloudDurationQueryParameter = metricCloudDuration
}

// WithMetricCloudIopsOtherQueryParameter adds the metricCloudIopsOther to the volume collection get params
func (o *VolumeCollectionGetParams) WithMetricCloudIopsOtherQueryParameter(metricCloudIopsOther *int64) *VolumeCollectionGetParams {
	o.SetMetricCloudIopsOtherQueryParameter(metricCloudIopsOther)
	return o
}

// SetMetricCloudIopsOtherQueryParameter adds the metricCloudIopsOther to the volume collection get params
func (o *VolumeCollectionGetParams) SetMetricCloudIopsOtherQueryParameter(metricCloudIopsOther *int64) {
	o.MetricCloudIopsOtherQueryParameter = metricCloudIopsOther
}

// WithMetricCloudIopsReadQueryParameter adds the metricCloudIopsRead to the volume collection get params
func (o *VolumeCollectionGetParams) WithMetricCloudIopsReadQueryParameter(metricCloudIopsRead *int64) *VolumeCollectionGetParams {
	o.SetMetricCloudIopsReadQueryParameter(metricCloudIopsRead)
	return o
}

// SetMetricCloudIopsReadQueryParameter adds the metricCloudIopsRead to the volume collection get params
func (o *VolumeCollectionGetParams) SetMetricCloudIopsReadQueryParameter(metricCloudIopsRead *int64) {
	o.MetricCloudIopsReadQueryParameter = metricCloudIopsRead
}

// WithMetricCloudIopsTotalQueryParameter adds the metricCloudIopsTotal to the volume collection get params
func (o *VolumeCollectionGetParams) WithMetricCloudIopsTotalQueryParameter(metricCloudIopsTotal *int64) *VolumeCollectionGetParams {
	o.SetMetricCloudIopsTotalQueryParameter(metricCloudIopsTotal)
	return o
}

// SetMetricCloudIopsTotalQueryParameter adds the metricCloudIopsTotal to the volume collection get params
func (o *VolumeCollectionGetParams) SetMetricCloudIopsTotalQueryParameter(metricCloudIopsTotal *int64) {
	o.MetricCloudIopsTotalQueryParameter = metricCloudIopsTotal
}

// WithMetricCloudIopsWriteQueryParameter adds the metricCloudIopsWrite to the volume collection get params
func (o *VolumeCollectionGetParams) WithMetricCloudIopsWriteQueryParameter(metricCloudIopsWrite *int64) *VolumeCollectionGetParams {
	o.SetMetricCloudIopsWriteQueryParameter(metricCloudIopsWrite)
	return o
}

// SetMetricCloudIopsWriteQueryParameter adds the metricCloudIopsWrite to the volume collection get params
func (o *VolumeCollectionGetParams) SetMetricCloudIopsWriteQueryParameter(metricCloudIopsWrite *int64) {
	o.MetricCloudIopsWriteQueryParameter = metricCloudIopsWrite
}

// WithMetricCloudLatencyOtherQueryParameter adds the metricCloudLatencyOther to the volume collection get params
func (o *VolumeCollectionGetParams) WithMetricCloudLatencyOtherQueryParameter(metricCloudLatencyOther *int64) *VolumeCollectionGetParams {
	o.SetMetricCloudLatencyOtherQueryParameter(metricCloudLatencyOther)
	return o
}

// SetMetricCloudLatencyOtherQueryParameter adds the metricCloudLatencyOther to the volume collection get params
func (o *VolumeCollectionGetParams) SetMetricCloudLatencyOtherQueryParameter(metricCloudLatencyOther *int64) {
	o.MetricCloudLatencyOtherQueryParameter = metricCloudLatencyOther
}

// WithMetricCloudLatencyReadQueryParameter adds the metricCloudLatencyRead to the volume collection get params
func (o *VolumeCollectionGetParams) WithMetricCloudLatencyReadQueryParameter(metricCloudLatencyRead *int64) *VolumeCollectionGetParams {
	o.SetMetricCloudLatencyReadQueryParameter(metricCloudLatencyRead)
	return o
}

// SetMetricCloudLatencyReadQueryParameter adds the metricCloudLatencyRead to the volume collection get params
func (o *VolumeCollectionGetParams) SetMetricCloudLatencyReadQueryParameter(metricCloudLatencyRead *int64) {
	o.MetricCloudLatencyReadQueryParameter = metricCloudLatencyRead
}

// WithMetricCloudLatencyTotalQueryParameter adds the metricCloudLatencyTotal to the volume collection get params
func (o *VolumeCollectionGetParams) WithMetricCloudLatencyTotalQueryParameter(metricCloudLatencyTotal *int64) *VolumeCollectionGetParams {
	o.SetMetricCloudLatencyTotalQueryParameter(metricCloudLatencyTotal)
	return o
}

// SetMetricCloudLatencyTotalQueryParameter adds the metricCloudLatencyTotal to the volume collection get params
func (o *VolumeCollectionGetParams) SetMetricCloudLatencyTotalQueryParameter(metricCloudLatencyTotal *int64) {
	o.MetricCloudLatencyTotalQueryParameter = metricCloudLatencyTotal
}

// WithMetricCloudLatencyWriteQueryParameter adds the metricCloudLatencyWrite to the volume collection get params
func (o *VolumeCollectionGetParams) WithMetricCloudLatencyWriteQueryParameter(metricCloudLatencyWrite *int64) *VolumeCollectionGetParams {
	o.SetMetricCloudLatencyWriteQueryParameter(metricCloudLatencyWrite)
	return o
}

// SetMetricCloudLatencyWriteQueryParameter adds the metricCloudLatencyWrite to the volume collection get params
func (o *VolumeCollectionGetParams) SetMetricCloudLatencyWriteQueryParameter(metricCloudLatencyWrite *int64) {
	o.MetricCloudLatencyWriteQueryParameter = metricCloudLatencyWrite
}

// WithMetricCloudStatusQueryParameter adds the metricCloudStatus to the volume collection get params
func (o *VolumeCollectionGetParams) WithMetricCloudStatusQueryParameter(metricCloudStatus *string) *VolumeCollectionGetParams {
	o.SetMetricCloudStatusQueryParameter(metricCloudStatus)
	return o
}

// SetMetricCloudStatusQueryParameter adds the metricCloudStatus to the volume collection get params
func (o *VolumeCollectionGetParams) SetMetricCloudStatusQueryParameter(metricCloudStatus *string) {
	o.MetricCloudStatusQueryParameter = metricCloudStatus
}

// WithMetricCloudTimestampQueryParameter adds the metricCloudTimestamp to the volume collection get params
func (o *VolumeCollectionGetParams) WithMetricCloudTimestampQueryParameter(metricCloudTimestamp *string) *VolumeCollectionGetParams {
	o.SetMetricCloudTimestampQueryParameter(metricCloudTimestamp)
	return o
}

// SetMetricCloudTimestampQueryParameter adds the metricCloudTimestamp to the volume collection get params
func (o *VolumeCollectionGetParams) SetMetricCloudTimestampQueryParameter(metricCloudTimestamp *string) {
	o.MetricCloudTimestampQueryParameter = metricCloudTimestamp
}

// WithMetricDurationQueryParameter adds the metricDuration to the volume collection get params
func (o *VolumeCollectionGetParams) WithMetricDurationQueryParameter(metricDuration *string) *VolumeCollectionGetParams {
	o.SetMetricDurationQueryParameter(metricDuration)
	return o
}

// SetMetricDurationQueryParameter adds the metricDuration to the volume collection get params
func (o *VolumeCollectionGetParams) SetMetricDurationQueryParameter(metricDuration *string) {
	o.MetricDurationQueryParameter = metricDuration
}

// WithMetricIopsOtherQueryParameter adds the metricIopsOther to the volume collection get params
func (o *VolumeCollectionGetParams) WithMetricIopsOtherQueryParameter(metricIopsOther *int64) *VolumeCollectionGetParams {
	o.SetMetricIopsOtherQueryParameter(metricIopsOther)
	return o
}

// SetMetricIopsOtherQueryParameter adds the metricIopsOther to the volume collection get params
func (o *VolumeCollectionGetParams) SetMetricIopsOtherQueryParameter(metricIopsOther *int64) {
	o.MetricIopsOtherQueryParameter = metricIopsOther
}

// WithMetricIopsReadQueryParameter adds the metricIopsRead to the volume collection get params
func (o *VolumeCollectionGetParams) WithMetricIopsReadQueryParameter(metricIopsRead *int64) *VolumeCollectionGetParams {
	o.SetMetricIopsReadQueryParameter(metricIopsRead)
	return o
}

// SetMetricIopsReadQueryParameter adds the metricIopsRead to the volume collection get params
func (o *VolumeCollectionGetParams) SetMetricIopsReadQueryParameter(metricIopsRead *int64) {
	o.MetricIopsReadQueryParameter = metricIopsRead
}

// WithMetricIopsTotalQueryParameter adds the metricIopsTotal to the volume collection get params
func (o *VolumeCollectionGetParams) WithMetricIopsTotalQueryParameter(metricIopsTotal *int64) *VolumeCollectionGetParams {
	o.SetMetricIopsTotalQueryParameter(metricIopsTotal)
	return o
}

// SetMetricIopsTotalQueryParameter adds the metricIopsTotal to the volume collection get params
func (o *VolumeCollectionGetParams) SetMetricIopsTotalQueryParameter(metricIopsTotal *int64) {
	o.MetricIopsTotalQueryParameter = metricIopsTotal
}

// WithMetricIopsWriteQueryParameter adds the metricIopsWrite to the volume collection get params
func (o *VolumeCollectionGetParams) WithMetricIopsWriteQueryParameter(metricIopsWrite *int64) *VolumeCollectionGetParams {
	o.SetMetricIopsWriteQueryParameter(metricIopsWrite)
	return o
}

// SetMetricIopsWriteQueryParameter adds the metricIopsWrite to the volume collection get params
func (o *VolumeCollectionGetParams) SetMetricIopsWriteQueryParameter(metricIopsWrite *int64) {
	o.MetricIopsWriteQueryParameter = metricIopsWrite
}

// WithMetricLatencyOtherQueryParameter adds the metricLatencyOther to the volume collection get params
func (o *VolumeCollectionGetParams) WithMetricLatencyOtherQueryParameter(metricLatencyOther *int64) *VolumeCollectionGetParams {
	o.SetMetricLatencyOtherQueryParameter(metricLatencyOther)
	return o
}

// SetMetricLatencyOtherQueryParameter adds the metricLatencyOther to the volume collection get params
func (o *VolumeCollectionGetParams) SetMetricLatencyOtherQueryParameter(metricLatencyOther *int64) {
	o.MetricLatencyOtherQueryParameter = metricLatencyOther
}

// WithMetricLatencyReadQueryParameter adds the metricLatencyRead to the volume collection get params
func (o *VolumeCollectionGetParams) WithMetricLatencyReadQueryParameter(metricLatencyRead *int64) *VolumeCollectionGetParams {
	o.SetMetricLatencyReadQueryParameter(metricLatencyRead)
	return o
}

// SetMetricLatencyReadQueryParameter adds the metricLatencyRead to the volume collection get params
func (o *VolumeCollectionGetParams) SetMetricLatencyReadQueryParameter(metricLatencyRead *int64) {
	o.MetricLatencyReadQueryParameter = metricLatencyRead
}

// WithMetricLatencyTotalQueryParameter adds the metricLatencyTotal to the volume collection get params
func (o *VolumeCollectionGetParams) WithMetricLatencyTotalQueryParameter(metricLatencyTotal *int64) *VolumeCollectionGetParams {
	o.SetMetricLatencyTotalQueryParameter(metricLatencyTotal)
	return o
}

// SetMetricLatencyTotalQueryParameter adds the metricLatencyTotal to the volume collection get params
func (o *VolumeCollectionGetParams) SetMetricLatencyTotalQueryParameter(metricLatencyTotal *int64) {
	o.MetricLatencyTotalQueryParameter = metricLatencyTotal
}

// WithMetricLatencyWriteQueryParameter adds the metricLatencyWrite to the volume collection get params
func (o *VolumeCollectionGetParams) WithMetricLatencyWriteQueryParameter(metricLatencyWrite *int64) *VolumeCollectionGetParams {
	o.SetMetricLatencyWriteQueryParameter(metricLatencyWrite)
	return o
}

// SetMetricLatencyWriteQueryParameter adds the metricLatencyWrite to the volume collection get params
func (o *VolumeCollectionGetParams) SetMetricLatencyWriteQueryParameter(metricLatencyWrite *int64) {
	o.MetricLatencyWriteQueryParameter = metricLatencyWrite
}

// WithMetricStatusQueryParameter adds the metricStatus to the volume collection get params
func (o *VolumeCollectionGetParams) WithMetricStatusQueryParameter(metricStatus *string) *VolumeCollectionGetParams {
	o.SetMetricStatusQueryParameter(metricStatus)
	return o
}

// SetMetricStatusQueryParameter adds the metricStatus to the volume collection get params
func (o *VolumeCollectionGetParams) SetMetricStatusQueryParameter(metricStatus *string) {
	o.MetricStatusQueryParameter = metricStatus
}

// WithMetricThroughputOtherQueryParameter adds the metricThroughputOther to the volume collection get params
func (o *VolumeCollectionGetParams) WithMetricThroughputOtherQueryParameter(metricThroughputOther *int64) *VolumeCollectionGetParams {
	o.SetMetricThroughputOtherQueryParameter(metricThroughputOther)
	return o
}

// SetMetricThroughputOtherQueryParameter adds the metricThroughputOther to the volume collection get params
func (o *VolumeCollectionGetParams) SetMetricThroughputOtherQueryParameter(metricThroughputOther *int64) {
	o.MetricThroughputOtherQueryParameter = metricThroughputOther
}

// WithMetricThroughputReadQueryParameter adds the metricThroughputRead to the volume collection get params
func (o *VolumeCollectionGetParams) WithMetricThroughputReadQueryParameter(metricThroughputRead *int64) *VolumeCollectionGetParams {
	o.SetMetricThroughputReadQueryParameter(metricThroughputRead)
	return o
}

// SetMetricThroughputReadQueryParameter adds the metricThroughputRead to the volume collection get params
func (o *VolumeCollectionGetParams) SetMetricThroughputReadQueryParameter(metricThroughputRead *int64) {
	o.MetricThroughputReadQueryParameter = metricThroughputRead
}

// WithMetricThroughputTotalQueryParameter adds the metricThroughputTotal to the volume collection get params
func (o *VolumeCollectionGetParams) WithMetricThroughputTotalQueryParameter(metricThroughputTotal *int64) *VolumeCollectionGetParams {
	o.SetMetricThroughputTotalQueryParameter(metricThroughputTotal)
	return o
}

// SetMetricThroughputTotalQueryParameter adds the metricThroughputTotal to the volume collection get params
func (o *VolumeCollectionGetParams) SetMetricThroughputTotalQueryParameter(metricThroughputTotal *int64) {
	o.MetricThroughputTotalQueryParameter = metricThroughputTotal
}

// WithMetricThroughputWriteQueryParameter adds the metricThroughputWrite to the volume collection get params
func (o *VolumeCollectionGetParams) WithMetricThroughputWriteQueryParameter(metricThroughputWrite *int64) *VolumeCollectionGetParams {
	o.SetMetricThroughputWriteQueryParameter(metricThroughputWrite)
	return o
}

// SetMetricThroughputWriteQueryParameter adds the metricThroughputWrite to the volume collection get params
func (o *VolumeCollectionGetParams) SetMetricThroughputWriteQueryParameter(metricThroughputWrite *int64) {
	o.MetricThroughputWriteQueryParameter = metricThroughputWrite
}

// WithMetricTimestampQueryParameter adds the metricTimestamp to the volume collection get params
func (o *VolumeCollectionGetParams) WithMetricTimestampQueryParameter(metricTimestamp *string) *VolumeCollectionGetParams {
	o.SetMetricTimestampQueryParameter(metricTimestamp)
	return o
}

// SetMetricTimestampQueryParameter adds the metricTimestamp to the volume collection get params
func (o *VolumeCollectionGetParams) SetMetricTimestampQueryParameter(metricTimestamp *string) {
	o.MetricTimestampQueryParameter = metricTimestamp
}

// WithMovementCutoverWindowQueryParameter adds the movementCutoverWindow to the volume collection get params
func (o *VolumeCollectionGetParams) WithMovementCutoverWindowQueryParameter(movementCutoverWindow *int64) *VolumeCollectionGetParams {
	o.SetMovementCutoverWindowQueryParameter(movementCutoverWindow)
	return o
}

// SetMovementCutoverWindowQueryParameter adds the movementCutoverWindow to the volume collection get params
func (o *VolumeCollectionGetParams) SetMovementCutoverWindowQueryParameter(movementCutoverWindow *int64) {
	o.MovementCutoverWindowQueryParameter = movementCutoverWindow
}

// WithMovementDestinationAggregateNameQueryParameter adds the movementDestinationAggregateName to the volume collection get params
func (o *VolumeCollectionGetParams) WithMovementDestinationAggregateNameQueryParameter(movementDestinationAggregateName *string) *VolumeCollectionGetParams {
	o.SetMovementDestinationAggregateNameQueryParameter(movementDestinationAggregateName)
	return o
}

// SetMovementDestinationAggregateNameQueryParameter adds the movementDestinationAggregateName to the volume collection get params
func (o *VolumeCollectionGetParams) SetMovementDestinationAggregateNameQueryParameter(movementDestinationAggregateName *string) {
	o.MovementDestinationAggregateNameQueryParameter = movementDestinationAggregateName
}

// WithMovementDestinationAggregateUUIDQueryParameter adds the movementDestinationAggregateUUID to the volume collection get params
func (o *VolumeCollectionGetParams) WithMovementDestinationAggregateUUIDQueryParameter(movementDestinationAggregateUUID *string) *VolumeCollectionGetParams {
	o.SetMovementDestinationAggregateUUIDQueryParameter(movementDestinationAggregateUUID)
	return o
}

// SetMovementDestinationAggregateUUIDQueryParameter adds the movementDestinationAggregateUuid to the volume collection get params
func (o *VolumeCollectionGetParams) SetMovementDestinationAggregateUUIDQueryParameter(movementDestinationAggregateUUID *string) {
	o.MovementDestinationAggregateUUIDQueryParameter = movementDestinationAggregateUUID
}

// WithMovementPercentCompleteQueryParameter adds the movementPercentComplete to the volume collection get params
func (o *VolumeCollectionGetParams) WithMovementPercentCompleteQueryParameter(movementPercentComplete *int64) *VolumeCollectionGetParams {
	o.SetMovementPercentCompleteQueryParameter(movementPercentComplete)
	return o
}

// SetMovementPercentCompleteQueryParameter adds the movementPercentComplete to the volume collection get params
func (o *VolumeCollectionGetParams) SetMovementPercentCompleteQueryParameter(movementPercentComplete *int64) {
	o.MovementPercentCompleteQueryParameter = movementPercentComplete
}

// WithMovementStateQueryParameter adds the movementState to the volume collection get params
func (o *VolumeCollectionGetParams) WithMovementStateQueryParameter(movementState *string) *VolumeCollectionGetParams {
	o.SetMovementStateQueryParameter(movementState)
	return o
}

// SetMovementStateQueryParameter adds the movementState to the volume collection get params
func (o *VolumeCollectionGetParams) SetMovementStateQueryParameter(movementState *string) {
	o.MovementStateQueryParameter = movementState
}

// WithNameQueryParameter adds the name to the volume collection get params
func (o *VolumeCollectionGetParams) WithNameQueryParameter(name *string) *VolumeCollectionGetParams {
	o.SetNameQueryParameter(name)
	return o
}

// SetNameQueryParameter adds the name to the volume collection get params
func (o *VolumeCollectionGetParams) SetNameQueryParameter(name *string) {
	o.NameQueryParameter = name
}

// WithNasExportPolicyIDQueryParameter adds the nasExportPolicyID to the volume collection get params
func (o *VolumeCollectionGetParams) WithNasExportPolicyIDQueryParameter(nasExportPolicyID *int64) *VolumeCollectionGetParams {
	o.SetNasExportPolicyIDQueryParameter(nasExportPolicyID)
	return o
}

// SetNasExportPolicyIDQueryParameter adds the nasExportPolicyId to the volume collection get params
func (o *VolumeCollectionGetParams) SetNasExportPolicyIDQueryParameter(nasExportPolicyID *int64) {
	o.NasExportPolicyIDQueryParameter = nasExportPolicyID
}

// WithNasExportPolicyNameQueryParameter adds the nasExportPolicyName to the volume collection get params
func (o *VolumeCollectionGetParams) WithNasExportPolicyNameQueryParameter(nasExportPolicyName *string) *VolumeCollectionGetParams {
	o.SetNasExportPolicyNameQueryParameter(nasExportPolicyName)
	return o
}

// SetNasExportPolicyNameQueryParameter adds the nasExportPolicyName to the volume collection get params
func (o *VolumeCollectionGetParams) SetNasExportPolicyNameQueryParameter(nasExportPolicyName *string) {
	o.NasExportPolicyNameQueryParameter = nasExportPolicyName
}

// WithNasGIDQueryParameter adds the nasGid to the volume collection get params
func (o *VolumeCollectionGetParams) WithNasGIDQueryParameter(nasGid *int64) *VolumeCollectionGetParams {
	o.SetNasGIDQueryParameter(nasGid)
	return o
}

// SetNasGIDQueryParameter adds the nasGid to the volume collection get params
func (o *VolumeCollectionGetParams) SetNasGIDQueryParameter(nasGid *int64) {
	o.NasGIDQueryParameter = nasGid
}

// WithNasPathQueryParameter adds the nasPath to the volume collection get params
func (o *VolumeCollectionGetParams) WithNasPathQueryParameter(nasPath *string) *VolumeCollectionGetParams {
	o.SetNasPathQueryParameter(nasPath)
	return o
}

// SetNasPathQueryParameter adds the nasPath to the volume collection get params
func (o *VolumeCollectionGetParams) SetNasPathQueryParameter(nasPath *string) {
	o.NasPathQueryParameter = nasPath
}

// WithNasSecurityStyleQueryParameter adds the nasSecurityStyle to the volume collection get params
func (o *VolumeCollectionGetParams) WithNasSecurityStyleQueryParameter(nasSecurityStyle *string) *VolumeCollectionGetParams {
	o.SetNasSecurityStyleQueryParameter(nasSecurityStyle)
	return o
}

// SetNasSecurityStyleQueryParameter adds the nasSecurityStyle to the volume collection get params
func (o *VolumeCollectionGetParams) SetNasSecurityStyleQueryParameter(nasSecurityStyle *string) {
	o.NasSecurityStyleQueryParameter = nasSecurityStyle
}

// WithNasUIDQueryParameter adds the nasUID to the volume collection get params
func (o *VolumeCollectionGetParams) WithNasUIDQueryParameter(nasUID *int64) *VolumeCollectionGetParams {
	o.SetNasUIDQueryParameter(nasUID)
	return o
}

// SetNasUIDQueryParameter adds the nasUid to the volume collection get params
func (o *VolumeCollectionGetParams) SetNasUIDQueryParameter(nasUID *int64) {
	o.NasUIDQueryParameter = nasUID
}

// WithNasUnixPermissionsQueryParameter adds the nasUnixPermissions to the volume collection get params
func (o *VolumeCollectionGetParams) WithNasUnixPermissionsQueryParameter(nasUnixPermissions *int64) *VolumeCollectionGetParams {
	o.SetNasUnixPermissionsQueryParameter(nasUnixPermissions)
	return o
}

// SetNasUnixPermissionsQueryParameter adds the nasUnixPermissions to the volume collection get params
func (o *VolumeCollectionGetParams) SetNasUnixPermissionsQueryParameter(nasUnixPermissions *int64) {
	o.NasUnixPermissionsQueryParameter = nasUnixPermissions
}

// WithOrderBy adds the orderBy to the volume collection get params
func (o *VolumeCollectionGetParams) WithOrderBy(orderBy []string) *VolumeCollectionGetParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the volume collection get params
func (o *VolumeCollectionGetParams) SetOrderBy(orderBy []string) {
	o.OrderBy = orderBy
}

// WithQosPolicyMaxThroughputIopsQueryParameter adds the qosPolicyMaxThroughputIops to the volume collection get params
func (o *VolumeCollectionGetParams) WithQosPolicyMaxThroughputIopsQueryParameter(qosPolicyMaxThroughputIops *int64) *VolumeCollectionGetParams {
	o.SetQosPolicyMaxThroughputIopsQueryParameter(qosPolicyMaxThroughputIops)
	return o
}

// SetQosPolicyMaxThroughputIopsQueryParameter adds the qosPolicyMaxThroughputIops to the volume collection get params
func (o *VolumeCollectionGetParams) SetQosPolicyMaxThroughputIopsQueryParameter(qosPolicyMaxThroughputIops *int64) {
	o.QosPolicyMaxThroughputIopsQueryParameter = qosPolicyMaxThroughputIops
}

// WithQosPolicyMaxThroughputMbpsQueryParameter adds the qosPolicyMaxThroughputMbps to the volume collection get params
func (o *VolumeCollectionGetParams) WithQosPolicyMaxThroughputMbpsQueryParameter(qosPolicyMaxThroughputMbps *int64) *VolumeCollectionGetParams {
	o.SetQosPolicyMaxThroughputMbpsQueryParameter(qosPolicyMaxThroughputMbps)
	return o
}

// SetQosPolicyMaxThroughputMbpsQueryParameter adds the qosPolicyMaxThroughputMbps to the volume collection get params
func (o *VolumeCollectionGetParams) SetQosPolicyMaxThroughputMbpsQueryParameter(qosPolicyMaxThroughputMbps *int64) {
	o.QosPolicyMaxThroughputMbpsQueryParameter = qosPolicyMaxThroughputMbps
}

// WithQosPolicyMinThroughputIopsQueryParameter adds the qosPolicyMinThroughputIops to the volume collection get params
func (o *VolumeCollectionGetParams) WithQosPolicyMinThroughputIopsQueryParameter(qosPolicyMinThroughputIops *int64) *VolumeCollectionGetParams {
	o.SetQosPolicyMinThroughputIopsQueryParameter(qosPolicyMinThroughputIops)
	return o
}

// SetQosPolicyMinThroughputIopsQueryParameter adds the qosPolicyMinThroughputIops to the volume collection get params
func (o *VolumeCollectionGetParams) SetQosPolicyMinThroughputIopsQueryParameter(qosPolicyMinThroughputIops *int64) {
	o.QosPolicyMinThroughputIopsQueryParameter = qosPolicyMinThroughputIops
}

// WithQosPolicyNameQueryParameter adds the qosPolicyName to the volume collection get params
func (o *VolumeCollectionGetParams) WithQosPolicyNameQueryParameter(qosPolicyName *string) *VolumeCollectionGetParams {
	o.SetQosPolicyNameQueryParameter(qosPolicyName)
	return o
}

// SetQosPolicyNameQueryParameter adds the qosPolicyName to the volume collection get params
func (o *VolumeCollectionGetParams) SetQosPolicyNameQueryParameter(qosPolicyName *string) {
	o.QosPolicyNameQueryParameter = qosPolicyName
}

// WithQosPolicyUUIDQueryParameter adds the qosPolicyUUID to the volume collection get params
func (o *VolumeCollectionGetParams) WithQosPolicyUUIDQueryParameter(qosPolicyUUID *string) *VolumeCollectionGetParams {
	o.SetQosPolicyUUIDQueryParameter(qosPolicyUUID)
	return o
}

// SetQosPolicyUUIDQueryParameter adds the qosPolicyUuid to the volume collection get params
func (o *VolumeCollectionGetParams) SetQosPolicyUUIDQueryParameter(qosPolicyUUID *string) {
	o.QosPolicyUUIDQueryParameter = qosPolicyUUID
}

// WithQuotaStateQueryParameter adds the quotaState to the volume collection get params
func (o *VolumeCollectionGetParams) WithQuotaStateQueryParameter(quotaState *string) *VolumeCollectionGetParams {
	o.SetQuotaStateQueryParameter(quotaState)
	return o
}

// SetQuotaStateQueryParameter adds the quotaState to the volume collection get params
func (o *VolumeCollectionGetParams) SetQuotaStateQueryParameter(quotaState *string) {
	o.QuotaStateQueryParameter = quotaState
}

// WithReturnRecords adds the returnRecords to the volume collection get params
func (o *VolumeCollectionGetParams) WithReturnRecords(returnRecords *bool) *VolumeCollectionGetParams {
	o.SetReturnRecords(returnRecords)
	return o
}

// SetReturnRecords adds the returnRecords to the volume collection get params
func (o *VolumeCollectionGetParams) SetReturnRecords(returnRecords *bool) {
	o.ReturnRecords = returnRecords
}

// WithReturnTimeout adds the returnTimeout to the volume collection get params
func (o *VolumeCollectionGetParams) WithReturnTimeout(returnTimeout *int64) *VolumeCollectionGetParams {
	o.SetReturnTimeout(returnTimeout)
	return o
}

// SetReturnTimeout adds the returnTimeout to the volume collection get params
func (o *VolumeCollectionGetParams) SetReturnTimeout(returnTimeout *int64) {
	o.ReturnTimeout = returnTimeout
}

// WithSizeQueryParameter adds the size to the volume collection get params
func (o *VolumeCollectionGetParams) WithSizeQueryParameter(size *int64) *VolumeCollectionGetParams {
	o.SetSizeQueryParameter(size)
	return o
}

// SetSizeQueryParameter adds the size to the volume collection get params
func (o *VolumeCollectionGetParams) SetSizeQueryParameter(size *int64) {
	o.SizeQueryParameter = size
}

// WithSnaplockAppendModeEnabledQueryParameter adds the snaplockAppendModeEnabled to the volume collection get params
func (o *VolumeCollectionGetParams) WithSnaplockAppendModeEnabledQueryParameter(snaplockAppendModeEnabled *bool) *VolumeCollectionGetParams {
	o.SetSnaplockAppendModeEnabledQueryParameter(snaplockAppendModeEnabled)
	return o
}

// SetSnaplockAppendModeEnabledQueryParameter adds the snaplockAppendModeEnabled to the volume collection get params
func (o *VolumeCollectionGetParams) SetSnaplockAppendModeEnabledQueryParameter(snaplockAppendModeEnabled *bool) {
	o.SnaplockAppendModeEnabledQueryParameter = snaplockAppendModeEnabled
}

// WithSnaplockAutocommitPeriodQueryParameter adds the snaplockAutocommitPeriod to the volume collection get params
func (o *VolumeCollectionGetParams) WithSnaplockAutocommitPeriodQueryParameter(snaplockAutocommitPeriod *string) *VolumeCollectionGetParams {
	o.SetSnaplockAutocommitPeriodQueryParameter(snaplockAutocommitPeriod)
	return o
}

// SetSnaplockAutocommitPeriodQueryParameter adds the snaplockAutocommitPeriod to the volume collection get params
func (o *VolumeCollectionGetParams) SetSnaplockAutocommitPeriodQueryParameter(snaplockAutocommitPeriod *string) {
	o.SnaplockAutocommitPeriodQueryParameter = snaplockAutocommitPeriod
}

// WithSnaplockComplianceClockTimeQueryParameter adds the snaplockComplianceClockTime to the volume collection get params
func (o *VolumeCollectionGetParams) WithSnaplockComplianceClockTimeQueryParameter(snaplockComplianceClockTime *string) *VolumeCollectionGetParams {
	o.SetSnaplockComplianceClockTimeQueryParameter(snaplockComplianceClockTime)
	return o
}

// SetSnaplockComplianceClockTimeQueryParameter adds the snaplockComplianceClockTime to the volume collection get params
func (o *VolumeCollectionGetParams) SetSnaplockComplianceClockTimeQueryParameter(snaplockComplianceClockTime *string) {
	o.SnaplockComplianceClockTimeQueryParameter = snaplockComplianceClockTime
}

// WithSnaplockExpiryTimeQueryParameter adds the snaplockExpiryTime to the volume collection get params
func (o *VolumeCollectionGetParams) WithSnaplockExpiryTimeQueryParameter(snaplockExpiryTime *string) *VolumeCollectionGetParams {
	o.SetSnaplockExpiryTimeQueryParameter(snaplockExpiryTime)
	return o
}

// SetSnaplockExpiryTimeQueryParameter adds the snaplockExpiryTime to the volume collection get params
func (o *VolumeCollectionGetParams) SetSnaplockExpiryTimeQueryParameter(snaplockExpiryTime *string) {
	o.SnaplockExpiryTimeQueryParameter = snaplockExpiryTime
}

// WithSnaplockIsAuditLogQueryParameter adds the snaplockIsAuditLog to the volume collection get params
func (o *VolumeCollectionGetParams) WithSnaplockIsAuditLogQueryParameter(snaplockIsAuditLog *bool) *VolumeCollectionGetParams {
	o.SetSnaplockIsAuditLogQueryParameter(snaplockIsAuditLog)
	return o
}

// SetSnaplockIsAuditLogQueryParameter adds the snaplockIsAuditLog to the volume collection get params
func (o *VolumeCollectionGetParams) SetSnaplockIsAuditLogQueryParameter(snaplockIsAuditLog *bool) {
	o.SnaplockIsAuditLogQueryParameter = snaplockIsAuditLog
}

// WithSnaplockLitigationCountQueryParameter adds the snaplockLitigationCount to the volume collection get params
func (o *VolumeCollectionGetParams) WithSnaplockLitigationCountQueryParameter(snaplockLitigationCount *int64) *VolumeCollectionGetParams {
	o.SetSnaplockLitigationCountQueryParameter(snaplockLitigationCount)
	return o
}

// SetSnaplockLitigationCountQueryParameter adds the snaplockLitigationCount to the volume collection get params
func (o *VolumeCollectionGetParams) SetSnaplockLitigationCountQueryParameter(snaplockLitigationCount *int64) {
	o.SnaplockLitigationCountQueryParameter = snaplockLitigationCount
}

// WithSnaplockPrivilegedDeleteQueryParameter adds the snaplockPrivilegedDelete to the volume collection get params
func (o *VolumeCollectionGetParams) WithSnaplockPrivilegedDeleteQueryParameter(snaplockPrivilegedDelete *string) *VolumeCollectionGetParams {
	o.SetSnaplockPrivilegedDeleteQueryParameter(snaplockPrivilegedDelete)
	return o
}

// SetSnaplockPrivilegedDeleteQueryParameter adds the snaplockPrivilegedDelete to the volume collection get params
func (o *VolumeCollectionGetParams) SetSnaplockPrivilegedDeleteQueryParameter(snaplockPrivilegedDelete *string) {
	o.SnaplockPrivilegedDeleteQueryParameter = snaplockPrivilegedDelete
}

// WithSnaplockRetentionDefaultQueryParameter adds the snaplockRetentionDefault to the volume collection get params
func (o *VolumeCollectionGetParams) WithSnaplockRetentionDefaultQueryParameter(snaplockRetentionDefault *string) *VolumeCollectionGetParams {
	o.SetSnaplockRetentionDefaultQueryParameter(snaplockRetentionDefault)
	return o
}

// SetSnaplockRetentionDefaultQueryParameter adds the snaplockRetentionDefault to the volume collection get params
func (o *VolumeCollectionGetParams) SetSnaplockRetentionDefaultQueryParameter(snaplockRetentionDefault *string) {
	o.SnaplockRetentionDefaultQueryParameter = snaplockRetentionDefault
}

// WithSnaplockRetentionMaximumQueryParameter adds the snaplockRetentionMaximum to the volume collection get params
func (o *VolumeCollectionGetParams) WithSnaplockRetentionMaximumQueryParameter(snaplockRetentionMaximum *string) *VolumeCollectionGetParams {
	o.SetSnaplockRetentionMaximumQueryParameter(snaplockRetentionMaximum)
	return o
}

// SetSnaplockRetentionMaximumQueryParameter adds the snaplockRetentionMaximum to the volume collection get params
func (o *VolumeCollectionGetParams) SetSnaplockRetentionMaximumQueryParameter(snaplockRetentionMaximum *string) {
	o.SnaplockRetentionMaximumQueryParameter = snaplockRetentionMaximum
}

// WithSnaplockRetentionMinimumQueryParameter adds the snaplockRetentionMinimum to the volume collection get params
func (o *VolumeCollectionGetParams) WithSnaplockRetentionMinimumQueryParameter(snaplockRetentionMinimum *string) *VolumeCollectionGetParams {
	o.SetSnaplockRetentionMinimumQueryParameter(snaplockRetentionMinimum)
	return o
}

// SetSnaplockRetentionMinimumQueryParameter adds the snaplockRetentionMinimum to the volume collection get params
func (o *VolumeCollectionGetParams) SetSnaplockRetentionMinimumQueryParameter(snaplockRetentionMinimum *string) {
	o.SnaplockRetentionMinimumQueryParameter = snaplockRetentionMinimum
}

// WithSnaplockTypeQueryParameter adds the snaplockType to the volume collection get params
func (o *VolumeCollectionGetParams) WithSnaplockTypeQueryParameter(snaplockType *string) *VolumeCollectionGetParams {
	o.SetSnaplockTypeQueryParameter(snaplockType)
	return o
}

// SetSnaplockTypeQueryParameter adds the snaplockType to the volume collection get params
func (o *VolumeCollectionGetParams) SetSnaplockTypeQueryParameter(snaplockType *string) {
	o.SnaplockTypeQueryParameter = snaplockType
}

// WithSnapmirrorIsProtectedQueryParameter adds the snapmirrorIsProtected to the volume collection get params
func (o *VolumeCollectionGetParams) WithSnapmirrorIsProtectedQueryParameter(snapmirrorIsProtected *bool) *VolumeCollectionGetParams {
	o.SetSnapmirrorIsProtectedQueryParameter(snapmirrorIsProtected)
	return o
}

// SetSnapmirrorIsProtectedQueryParameter adds the snapmirrorIsProtected to the volume collection get params
func (o *VolumeCollectionGetParams) SetSnapmirrorIsProtectedQueryParameter(snapmirrorIsProtected *bool) {
	o.SnapmirrorIsProtectedQueryParameter = snapmirrorIsProtected
}

// WithSnapshotPolicyNameQueryParameter adds the snapshotPolicyName to the volume collection get params
func (o *VolumeCollectionGetParams) WithSnapshotPolicyNameQueryParameter(snapshotPolicyName *string) *VolumeCollectionGetParams {
	o.SetSnapshotPolicyNameQueryParameter(snapshotPolicyName)
	return o
}

// SetSnapshotPolicyNameQueryParameter adds the snapshotPolicyName to the volume collection get params
func (o *VolumeCollectionGetParams) SetSnapshotPolicyNameQueryParameter(snapshotPolicyName *string) {
	o.SnapshotPolicyNameQueryParameter = snapshotPolicyName
}

// WithSnapshotPolicyUUIDQueryParameter adds the snapshotPolicyUUID to the volume collection get params
func (o *VolumeCollectionGetParams) WithSnapshotPolicyUUIDQueryParameter(snapshotPolicyUUID *string) *VolumeCollectionGetParams {
	o.SetSnapshotPolicyUUIDQueryParameter(snapshotPolicyUUID)
	return o
}

// SetSnapshotPolicyUUIDQueryParameter adds the snapshotPolicyUuid to the volume collection get params
func (o *VolumeCollectionGetParams) SetSnapshotPolicyUUIDQueryParameter(snapshotPolicyUUID *string) {
	o.SnapshotPolicyUUIDQueryParameter = snapshotPolicyUUID
}

// WithSpaceAvailableQueryParameter adds the spaceAvailable to the volume collection get params
func (o *VolumeCollectionGetParams) WithSpaceAvailableQueryParameter(spaceAvailable *int64) *VolumeCollectionGetParams {
	o.SetSpaceAvailableQueryParameter(spaceAvailable)
	return o
}

// SetSpaceAvailableQueryParameter adds the spaceAvailable to the volume collection get params
func (o *VolumeCollectionGetParams) SetSpaceAvailableQueryParameter(spaceAvailable *int64) {
	o.SpaceAvailableQueryParameter = spaceAvailable
}

// WithSpaceBlockStorageInactiveUserDataQueryParameter adds the spaceBlockStorageInactiveUserData to the volume collection get params
func (o *VolumeCollectionGetParams) WithSpaceBlockStorageInactiveUserDataQueryParameter(spaceBlockStorageInactiveUserData *int64) *VolumeCollectionGetParams {
	o.SetSpaceBlockStorageInactiveUserDataQueryParameter(spaceBlockStorageInactiveUserData)
	return o
}

// SetSpaceBlockStorageInactiveUserDataQueryParameter adds the spaceBlockStorageInactiveUserData to the volume collection get params
func (o *VolumeCollectionGetParams) SetSpaceBlockStorageInactiveUserDataQueryParameter(spaceBlockStorageInactiveUserData *int64) {
	o.SpaceBlockStorageInactiveUserDataQueryParameter = spaceBlockStorageInactiveUserData
}

// WithSpaceCapacityTierFootprintQueryParameter adds the spaceCapacityTierFootprint to the volume collection get params
func (o *VolumeCollectionGetParams) WithSpaceCapacityTierFootprintQueryParameter(spaceCapacityTierFootprint *int64) *VolumeCollectionGetParams {
	o.SetSpaceCapacityTierFootprintQueryParameter(spaceCapacityTierFootprint)
	return o
}

// SetSpaceCapacityTierFootprintQueryParameter adds the spaceCapacityTierFootprint to the volume collection get params
func (o *VolumeCollectionGetParams) SetSpaceCapacityTierFootprintQueryParameter(spaceCapacityTierFootprint *int64) {
	o.SpaceCapacityTierFootprintQueryParameter = spaceCapacityTierFootprint
}

// WithSpaceFootprintQueryParameter adds the spaceFootprint to the volume collection get params
func (o *VolumeCollectionGetParams) WithSpaceFootprintQueryParameter(spaceFootprint *int64) *VolumeCollectionGetParams {
	o.SetSpaceFootprintQueryParameter(spaceFootprint)
	return o
}

// SetSpaceFootprintQueryParameter adds the spaceFootprint to the volume collection get params
func (o *VolumeCollectionGetParams) SetSpaceFootprintQueryParameter(spaceFootprint *int64) {
	o.SpaceFootprintQueryParameter = spaceFootprint
}

// WithSpaceLogicalSpaceAvailableQueryParameter adds the spaceLogicalSpaceAvailable to the volume collection get params
func (o *VolumeCollectionGetParams) WithSpaceLogicalSpaceAvailableQueryParameter(spaceLogicalSpaceAvailable *int64) *VolumeCollectionGetParams {
	o.SetSpaceLogicalSpaceAvailableQueryParameter(spaceLogicalSpaceAvailable)
	return o
}

// SetSpaceLogicalSpaceAvailableQueryParameter adds the spaceLogicalSpaceAvailable to the volume collection get params
func (o *VolumeCollectionGetParams) SetSpaceLogicalSpaceAvailableQueryParameter(spaceLogicalSpaceAvailable *int64) {
	o.SpaceLogicalSpaceAvailableQueryParameter = spaceLogicalSpaceAvailable
}

// WithSpaceLogicalSpaceEnforcementQueryParameter adds the spaceLogicalSpaceEnforcement to the volume collection get params
func (o *VolumeCollectionGetParams) WithSpaceLogicalSpaceEnforcementQueryParameter(spaceLogicalSpaceEnforcement *bool) *VolumeCollectionGetParams {
	o.SetSpaceLogicalSpaceEnforcementQueryParameter(spaceLogicalSpaceEnforcement)
	return o
}

// SetSpaceLogicalSpaceEnforcementQueryParameter adds the spaceLogicalSpaceEnforcement to the volume collection get params
func (o *VolumeCollectionGetParams) SetSpaceLogicalSpaceEnforcementQueryParameter(spaceLogicalSpaceEnforcement *bool) {
	o.SpaceLogicalSpaceEnforcementQueryParameter = spaceLogicalSpaceEnforcement
}

// WithSpaceLogicalSpaceReportingQueryParameter adds the spaceLogicalSpaceReporting to the volume collection get params
func (o *VolumeCollectionGetParams) WithSpaceLogicalSpaceReportingQueryParameter(spaceLogicalSpaceReporting *bool) *VolumeCollectionGetParams {
	o.SetSpaceLogicalSpaceReportingQueryParameter(spaceLogicalSpaceReporting)
	return o
}

// SetSpaceLogicalSpaceReportingQueryParameter adds the spaceLogicalSpaceReporting to the volume collection get params
func (o *VolumeCollectionGetParams) SetSpaceLogicalSpaceReportingQueryParameter(spaceLogicalSpaceReporting *bool) {
	o.SpaceLogicalSpaceReportingQueryParameter = spaceLogicalSpaceReporting
}

// WithSpaceLogicalSpaceUsedByAfsQueryParameter adds the spaceLogicalSpaceUsedByAfs to the volume collection get params
func (o *VolumeCollectionGetParams) WithSpaceLogicalSpaceUsedByAfsQueryParameter(spaceLogicalSpaceUsedByAfs *int64) *VolumeCollectionGetParams {
	o.SetSpaceLogicalSpaceUsedByAfsQueryParameter(spaceLogicalSpaceUsedByAfs)
	return o
}

// SetSpaceLogicalSpaceUsedByAfsQueryParameter adds the spaceLogicalSpaceUsedByAfs to the volume collection get params
func (o *VolumeCollectionGetParams) SetSpaceLogicalSpaceUsedByAfsQueryParameter(spaceLogicalSpaceUsedByAfs *int64) {
	o.SpaceLogicalSpaceUsedByAfsQueryParameter = spaceLogicalSpaceUsedByAfs
}

// WithSpaceMetadataQueryParameter adds the spaceMetadata to the volume collection get params
func (o *VolumeCollectionGetParams) WithSpaceMetadataQueryParameter(spaceMetadata *int64) *VolumeCollectionGetParams {
	o.SetSpaceMetadataQueryParameter(spaceMetadata)
	return o
}

// SetSpaceMetadataQueryParameter adds the spaceMetadata to the volume collection get params
func (o *VolumeCollectionGetParams) SetSpaceMetadataQueryParameter(spaceMetadata *int64) {
	o.SpaceMetadataQueryParameter = spaceMetadata
}

// WithSpaceOverProvisionedQueryParameter adds the spaceOverProvisioned to the volume collection get params
func (o *VolumeCollectionGetParams) WithSpaceOverProvisionedQueryParameter(spaceOverProvisioned *int64) *VolumeCollectionGetParams {
	o.SetSpaceOverProvisionedQueryParameter(spaceOverProvisioned)
	return o
}

// SetSpaceOverProvisionedQueryParameter adds the spaceOverProvisioned to the volume collection get params
func (o *VolumeCollectionGetParams) SetSpaceOverProvisionedQueryParameter(spaceOverProvisioned *int64) {
	o.SpaceOverProvisionedQueryParameter = spaceOverProvisioned
}

// WithSpaceSizeQueryParameter adds the spaceSize to the volume collection get params
func (o *VolumeCollectionGetParams) WithSpaceSizeQueryParameter(spaceSize *int64) *VolumeCollectionGetParams {
	o.SetSpaceSizeQueryParameter(spaceSize)
	return o
}

// SetSpaceSizeQueryParameter adds the spaceSize to the volume collection get params
func (o *VolumeCollectionGetParams) SetSpaceSizeQueryParameter(spaceSize *int64) {
	o.SpaceSizeQueryParameter = spaceSize
}

// WithSpaceSnapshotReservePercentQueryParameter adds the spaceSnapshotReservePercent to the volume collection get params
func (o *VolumeCollectionGetParams) WithSpaceSnapshotReservePercentQueryParameter(spaceSnapshotReservePercent *int64) *VolumeCollectionGetParams {
	o.SetSpaceSnapshotReservePercentQueryParameter(spaceSnapshotReservePercent)
	return o
}

// SetSpaceSnapshotReservePercentQueryParameter adds the spaceSnapshotReservePercent to the volume collection get params
func (o *VolumeCollectionGetParams) SetSpaceSnapshotReservePercentQueryParameter(spaceSnapshotReservePercent *int64) {
	o.SpaceSnapshotReservePercentQueryParameter = spaceSnapshotReservePercent
}

// WithSpaceSnapshotUsedQueryParameter adds the spaceSnapshotUsed to the volume collection get params
func (o *VolumeCollectionGetParams) WithSpaceSnapshotUsedQueryParameter(spaceSnapshotUsed *int64) *VolumeCollectionGetParams {
	o.SetSpaceSnapshotUsedQueryParameter(spaceSnapshotUsed)
	return o
}

// SetSpaceSnapshotUsedQueryParameter adds the spaceSnapshotUsed to the volume collection get params
func (o *VolumeCollectionGetParams) SetSpaceSnapshotUsedQueryParameter(spaceSnapshotUsed *int64) {
	o.SpaceSnapshotUsedQueryParameter = spaceSnapshotUsed
}

// WithSpaceUsedQueryParameter adds the spaceUsed to the volume collection get params
func (o *VolumeCollectionGetParams) WithSpaceUsedQueryParameter(spaceUsed *int64) *VolumeCollectionGetParams {
	o.SetSpaceUsedQueryParameter(spaceUsed)
	return o
}

// SetSpaceUsedQueryParameter adds the spaceUsed to the volume collection get params
func (o *VolumeCollectionGetParams) SetSpaceUsedQueryParameter(spaceUsed *int64) {
	o.SpaceUsedQueryParameter = spaceUsed
}

// WithStateQueryParameter adds the state to the volume collection get params
func (o *VolumeCollectionGetParams) WithStateQueryParameter(state *string) *VolumeCollectionGetParams {
	o.SetStateQueryParameter(state)
	return o
}

// SetStateQueryParameter adds the state to the volume collection get params
func (o *VolumeCollectionGetParams) SetStateQueryParameter(state *string) {
	o.StateQueryParameter = state
}

// WithStatisticsCloudIopsRawOtherQueryParameter adds the statisticsCloudIopsRawOther to the volume collection get params
func (o *VolumeCollectionGetParams) WithStatisticsCloudIopsRawOtherQueryParameter(statisticsCloudIopsRawOther *int64) *VolumeCollectionGetParams {
	o.SetStatisticsCloudIopsRawOtherQueryParameter(statisticsCloudIopsRawOther)
	return o
}

// SetStatisticsCloudIopsRawOtherQueryParameter adds the statisticsCloudIopsRawOther to the volume collection get params
func (o *VolumeCollectionGetParams) SetStatisticsCloudIopsRawOtherQueryParameter(statisticsCloudIopsRawOther *int64) {
	o.StatisticsCloudIopsRawOtherQueryParameter = statisticsCloudIopsRawOther
}

// WithStatisticsCloudIopsRawReadQueryParameter adds the statisticsCloudIopsRawRead to the volume collection get params
func (o *VolumeCollectionGetParams) WithStatisticsCloudIopsRawReadQueryParameter(statisticsCloudIopsRawRead *int64) *VolumeCollectionGetParams {
	o.SetStatisticsCloudIopsRawReadQueryParameter(statisticsCloudIopsRawRead)
	return o
}

// SetStatisticsCloudIopsRawReadQueryParameter adds the statisticsCloudIopsRawRead to the volume collection get params
func (o *VolumeCollectionGetParams) SetStatisticsCloudIopsRawReadQueryParameter(statisticsCloudIopsRawRead *int64) {
	o.StatisticsCloudIopsRawReadQueryParameter = statisticsCloudIopsRawRead
}

// WithStatisticsCloudIopsRawTotalQueryParameter adds the statisticsCloudIopsRawTotal to the volume collection get params
func (o *VolumeCollectionGetParams) WithStatisticsCloudIopsRawTotalQueryParameter(statisticsCloudIopsRawTotal *int64) *VolumeCollectionGetParams {
	o.SetStatisticsCloudIopsRawTotalQueryParameter(statisticsCloudIopsRawTotal)
	return o
}

// SetStatisticsCloudIopsRawTotalQueryParameter adds the statisticsCloudIopsRawTotal to the volume collection get params
func (o *VolumeCollectionGetParams) SetStatisticsCloudIopsRawTotalQueryParameter(statisticsCloudIopsRawTotal *int64) {
	o.StatisticsCloudIopsRawTotalQueryParameter = statisticsCloudIopsRawTotal
}

// WithStatisticsCloudIopsRawWriteQueryParameter adds the statisticsCloudIopsRawWrite to the volume collection get params
func (o *VolumeCollectionGetParams) WithStatisticsCloudIopsRawWriteQueryParameter(statisticsCloudIopsRawWrite *int64) *VolumeCollectionGetParams {
	o.SetStatisticsCloudIopsRawWriteQueryParameter(statisticsCloudIopsRawWrite)
	return o
}

// SetStatisticsCloudIopsRawWriteQueryParameter adds the statisticsCloudIopsRawWrite to the volume collection get params
func (o *VolumeCollectionGetParams) SetStatisticsCloudIopsRawWriteQueryParameter(statisticsCloudIopsRawWrite *int64) {
	o.StatisticsCloudIopsRawWriteQueryParameter = statisticsCloudIopsRawWrite
}

// WithStatisticsCloudLatencyRawOtherQueryParameter adds the statisticsCloudLatencyRawOther to the volume collection get params
func (o *VolumeCollectionGetParams) WithStatisticsCloudLatencyRawOtherQueryParameter(statisticsCloudLatencyRawOther *int64) *VolumeCollectionGetParams {
	o.SetStatisticsCloudLatencyRawOtherQueryParameter(statisticsCloudLatencyRawOther)
	return o
}

// SetStatisticsCloudLatencyRawOtherQueryParameter adds the statisticsCloudLatencyRawOther to the volume collection get params
func (o *VolumeCollectionGetParams) SetStatisticsCloudLatencyRawOtherQueryParameter(statisticsCloudLatencyRawOther *int64) {
	o.StatisticsCloudLatencyRawOtherQueryParameter = statisticsCloudLatencyRawOther
}

// WithStatisticsCloudLatencyRawReadQueryParameter adds the statisticsCloudLatencyRawRead to the volume collection get params
func (o *VolumeCollectionGetParams) WithStatisticsCloudLatencyRawReadQueryParameter(statisticsCloudLatencyRawRead *int64) *VolumeCollectionGetParams {
	o.SetStatisticsCloudLatencyRawReadQueryParameter(statisticsCloudLatencyRawRead)
	return o
}

// SetStatisticsCloudLatencyRawReadQueryParameter adds the statisticsCloudLatencyRawRead to the volume collection get params
func (o *VolumeCollectionGetParams) SetStatisticsCloudLatencyRawReadQueryParameter(statisticsCloudLatencyRawRead *int64) {
	o.StatisticsCloudLatencyRawReadQueryParameter = statisticsCloudLatencyRawRead
}

// WithStatisticsCloudLatencyRawTotalQueryParameter adds the statisticsCloudLatencyRawTotal to the volume collection get params
func (o *VolumeCollectionGetParams) WithStatisticsCloudLatencyRawTotalQueryParameter(statisticsCloudLatencyRawTotal *int64) *VolumeCollectionGetParams {
	o.SetStatisticsCloudLatencyRawTotalQueryParameter(statisticsCloudLatencyRawTotal)
	return o
}

// SetStatisticsCloudLatencyRawTotalQueryParameter adds the statisticsCloudLatencyRawTotal to the volume collection get params
func (o *VolumeCollectionGetParams) SetStatisticsCloudLatencyRawTotalQueryParameter(statisticsCloudLatencyRawTotal *int64) {
	o.StatisticsCloudLatencyRawTotalQueryParameter = statisticsCloudLatencyRawTotal
}

// WithStatisticsCloudLatencyRawWriteQueryParameter adds the statisticsCloudLatencyRawWrite to the volume collection get params
func (o *VolumeCollectionGetParams) WithStatisticsCloudLatencyRawWriteQueryParameter(statisticsCloudLatencyRawWrite *int64) *VolumeCollectionGetParams {
	o.SetStatisticsCloudLatencyRawWriteQueryParameter(statisticsCloudLatencyRawWrite)
	return o
}

// SetStatisticsCloudLatencyRawWriteQueryParameter adds the statisticsCloudLatencyRawWrite to the volume collection get params
func (o *VolumeCollectionGetParams) SetStatisticsCloudLatencyRawWriteQueryParameter(statisticsCloudLatencyRawWrite *int64) {
	o.StatisticsCloudLatencyRawWriteQueryParameter = statisticsCloudLatencyRawWrite
}

// WithStatisticsCloudStatusQueryParameter adds the statisticsCloudStatus to the volume collection get params
func (o *VolumeCollectionGetParams) WithStatisticsCloudStatusQueryParameter(statisticsCloudStatus *string) *VolumeCollectionGetParams {
	o.SetStatisticsCloudStatusQueryParameter(statisticsCloudStatus)
	return o
}

// SetStatisticsCloudStatusQueryParameter adds the statisticsCloudStatus to the volume collection get params
func (o *VolumeCollectionGetParams) SetStatisticsCloudStatusQueryParameter(statisticsCloudStatus *string) {
	o.StatisticsCloudStatusQueryParameter = statisticsCloudStatus
}

// WithStatisticsCloudTimestampQueryParameter adds the statisticsCloudTimestamp to the volume collection get params
func (o *VolumeCollectionGetParams) WithStatisticsCloudTimestampQueryParameter(statisticsCloudTimestamp *string) *VolumeCollectionGetParams {
	o.SetStatisticsCloudTimestampQueryParameter(statisticsCloudTimestamp)
	return o
}

// SetStatisticsCloudTimestampQueryParameter adds the statisticsCloudTimestamp to the volume collection get params
func (o *VolumeCollectionGetParams) SetStatisticsCloudTimestampQueryParameter(statisticsCloudTimestamp *string) {
	o.StatisticsCloudTimestampQueryParameter = statisticsCloudTimestamp
}

// WithStatisticsIopsRawOtherQueryParameter adds the statisticsIopsRawOther to the volume collection get params
func (o *VolumeCollectionGetParams) WithStatisticsIopsRawOtherQueryParameter(statisticsIopsRawOther *int64) *VolumeCollectionGetParams {
	o.SetStatisticsIopsRawOtherQueryParameter(statisticsIopsRawOther)
	return o
}

// SetStatisticsIopsRawOtherQueryParameter adds the statisticsIopsRawOther to the volume collection get params
func (o *VolumeCollectionGetParams) SetStatisticsIopsRawOtherQueryParameter(statisticsIopsRawOther *int64) {
	o.StatisticsIopsRawOtherQueryParameter = statisticsIopsRawOther
}

// WithStatisticsIopsRawReadQueryParameter adds the statisticsIopsRawRead to the volume collection get params
func (o *VolumeCollectionGetParams) WithStatisticsIopsRawReadQueryParameter(statisticsIopsRawRead *int64) *VolumeCollectionGetParams {
	o.SetStatisticsIopsRawReadQueryParameter(statisticsIopsRawRead)
	return o
}

// SetStatisticsIopsRawReadQueryParameter adds the statisticsIopsRawRead to the volume collection get params
func (o *VolumeCollectionGetParams) SetStatisticsIopsRawReadQueryParameter(statisticsIopsRawRead *int64) {
	o.StatisticsIopsRawReadQueryParameter = statisticsIopsRawRead
}

// WithStatisticsIopsRawTotalQueryParameter adds the statisticsIopsRawTotal to the volume collection get params
func (o *VolumeCollectionGetParams) WithStatisticsIopsRawTotalQueryParameter(statisticsIopsRawTotal *int64) *VolumeCollectionGetParams {
	o.SetStatisticsIopsRawTotalQueryParameter(statisticsIopsRawTotal)
	return o
}

// SetStatisticsIopsRawTotalQueryParameter adds the statisticsIopsRawTotal to the volume collection get params
func (o *VolumeCollectionGetParams) SetStatisticsIopsRawTotalQueryParameter(statisticsIopsRawTotal *int64) {
	o.StatisticsIopsRawTotalQueryParameter = statisticsIopsRawTotal
}

// WithStatisticsIopsRawWriteQueryParameter adds the statisticsIopsRawWrite to the volume collection get params
func (o *VolumeCollectionGetParams) WithStatisticsIopsRawWriteQueryParameter(statisticsIopsRawWrite *int64) *VolumeCollectionGetParams {
	o.SetStatisticsIopsRawWriteQueryParameter(statisticsIopsRawWrite)
	return o
}

// SetStatisticsIopsRawWriteQueryParameter adds the statisticsIopsRawWrite to the volume collection get params
func (o *VolumeCollectionGetParams) SetStatisticsIopsRawWriteQueryParameter(statisticsIopsRawWrite *int64) {
	o.StatisticsIopsRawWriteQueryParameter = statisticsIopsRawWrite
}

// WithStatisticsLatencyRawOtherQueryParameter adds the statisticsLatencyRawOther to the volume collection get params
func (o *VolumeCollectionGetParams) WithStatisticsLatencyRawOtherQueryParameter(statisticsLatencyRawOther *int64) *VolumeCollectionGetParams {
	o.SetStatisticsLatencyRawOtherQueryParameter(statisticsLatencyRawOther)
	return o
}

// SetStatisticsLatencyRawOtherQueryParameter adds the statisticsLatencyRawOther to the volume collection get params
func (o *VolumeCollectionGetParams) SetStatisticsLatencyRawOtherQueryParameter(statisticsLatencyRawOther *int64) {
	o.StatisticsLatencyRawOtherQueryParameter = statisticsLatencyRawOther
}

// WithStatisticsLatencyRawReadQueryParameter adds the statisticsLatencyRawRead to the volume collection get params
func (o *VolumeCollectionGetParams) WithStatisticsLatencyRawReadQueryParameter(statisticsLatencyRawRead *int64) *VolumeCollectionGetParams {
	o.SetStatisticsLatencyRawReadQueryParameter(statisticsLatencyRawRead)
	return o
}

// SetStatisticsLatencyRawReadQueryParameter adds the statisticsLatencyRawRead to the volume collection get params
func (o *VolumeCollectionGetParams) SetStatisticsLatencyRawReadQueryParameter(statisticsLatencyRawRead *int64) {
	o.StatisticsLatencyRawReadQueryParameter = statisticsLatencyRawRead
}

// WithStatisticsLatencyRawTotalQueryParameter adds the statisticsLatencyRawTotal to the volume collection get params
func (o *VolumeCollectionGetParams) WithStatisticsLatencyRawTotalQueryParameter(statisticsLatencyRawTotal *int64) *VolumeCollectionGetParams {
	o.SetStatisticsLatencyRawTotalQueryParameter(statisticsLatencyRawTotal)
	return o
}

// SetStatisticsLatencyRawTotalQueryParameter adds the statisticsLatencyRawTotal to the volume collection get params
func (o *VolumeCollectionGetParams) SetStatisticsLatencyRawTotalQueryParameter(statisticsLatencyRawTotal *int64) {
	o.StatisticsLatencyRawTotalQueryParameter = statisticsLatencyRawTotal
}

// WithStatisticsLatencyRawWriteQueryParameter adds the statisticsLatencyRawWrite to the volume collection get params
func (o *VolumeCollectionGetParams) WithStatisticsLatencyRawWriteQueryParameter(statisticsLatencyRawWrite *int64) *VolumeCollectionGetParams {
	o.SetStatisticsLatencyRawWriteQueryParameter(statisticsLatencyRawWrite)
	return o
}

// SetStatisticsLatencyRawWriteQueryParameter adds the statisticsLatencyRawWrite to the volume collection get params
func (o *VolumeCollectionGetParams) SetStatisticsLatencyRawWriteQueryParameter(statisticsLatencyRawWrite *int64) {
	o.StatisticsLatencyRawWriteQueryParameter = statisticsLatencyRawWrite
}

// WithStatisticsStatusQueryParameter adds the statisticsStatus to the volume collection get params
func (o *VolumeCollectionGetParams) WithStatisticsStatusQueryParameter(statisticsStatus *string) *VolumeCollectionGetParams {
	o.SetStatisticsStatusQueryParameter(statisticsStatus)
	return o
}

// SetStatisticsStatusQueryParameter adds the statisticsStatus to the volume collection get params
func (o *VolumeCollectionGetParams) SetStatisticsStatusQueryParameter(statisticsStatus *string) {
	o.StatisticsStatusQueryParameter = statisticsStatus
}

// WithStatisticsThroughputRawOtherQueryParameter adds the statisticsThroughputRawOther to the volume collection get params
func (o *VolumeCollectionGetParams) WithStatisticsThroughputRawOtherQueryParameter(statisticsThroughputRawOther *int64) *VolumeCollectionGetParams {
	o.SetStatisticsThroughputRawOtherQueryParameter(statisticsThroughputRawOther)
	return o
}

// SetStatisticsThroughputRawOtherQueryParameter adds the statisticsThroughputRawOther to the volume collection get params
func (o *VolumeCollectionGetParams) SetStatisticsThroughputRawOtherQueryParameter(statisticsThroughputRawOther *int64) {
	o.StatisticsThroughputRawOtherQueryParameter = statisticsThroughputRawOther
}

// WithStatisticsThroughputRawReadQueryParameter adds the statisticsThroughputRawRead to the volume collection get params
func (o *VolumeCollectionGetParams) WithStatisticsThroughputRawReadQueryParameter(statisticsThroughputRawRead *int64) *VolumeCollectionGetParams {
	o.SetStatisticsThroughputRawReadQueryParameter(statisticsThroughputRawRead)
	return o
}

// SetStatisticsThroughputRawReadQueryParameter adds the statisticsThroughputRawRead to the volume collection get params
func (o *VolumeCollectionGetParams) SetStatisticsThroughputRawReadQueryParameter(statisticsThroughputRawRead *int64) {
	o.StatisticsThroughputRawReadQueryParameter = statisticsThroughputRawRead
}

// WithStatisticsThroughputRawTotalQueryParameter adds the statisticsThroughputRawTotal to the volume collection get params
func (o *VolumeCollectionGetParams) WithStatisticsThroughputRawTotalQueryParameter(statisticsThroughputRawTotal *int64) *VolumeCollectionGetParams {
	o.SetStatisticsThroughputRawTotalQueryParameter(statisticsThroughputRawTotal)
	return o
}

// SetStatisticsThroughputRawTotalQueryParameter adds the statisticsThroughputRawTotal to the volume collection get params
func (o *VolumeCollectionGetParams) SetStatisticsThroughputRawTotalQueryParameter(statisticsThroughputRawTotal *int64) {
	o.StatisticsThroughputRawTotalQueryParameter = statisticsThroughputRawTotal
}

// WithStatisticsThroughputRawWriteQueryParameter adds the statisticsThroughputRawWrite to the volume collection get params
func (o *VolumeCollectionGetParams) WithStatisticsThroughputRawWriteQueryParameter(statisticsThroughputRawWrite *int64) *VolumeCollectionGetParams {
	o.SetStatisticsThroughputRawWriteQueryParameter(statisticsThroughputRawWrite)
	return o
}

// SetStatisticsThroughputRawWriteQueryParameter adds the statisticsThroughputRawWrite to the volume collection get params
func (o *VolumeCollectionGetParams) SetStatisticsThroughputRawWriteQueryParameter(statisticsThroughputRawWrite *int64) {
	o.StatisticsThroughputRawWriteQueryParameter = statisticsThroughputRawWrite
}

// WithStatisticsTimestampQueryParameter adds the statisticsTimestamp to the volume collection get params
func (o *VolumeCollectionGetParams) WithStatisticsTimestampQueryParameter(statisticsTimestamp *string) *VolumeCollectionGetParams {
	o.SetStatisticsTimestampQueryParameter(statisticsTimestamp)
	return o
}

// SetStatisticsTimestampQueryParameter adds the statisticsTimestamp to the volume collection get params
func (o *VolumeCollectionGetParams) SetStatisticsTimestampQueryParameter(statisticsTimestamp *string) {
	o.StatisticsTimestampQueryParameter = statisticsTimestamp
}

// WithStyleQueryParameter adds the style to the volume collection get params
func (o *VolumeCollectionGetParams) WithStyleQueryParameter(style *string) *VolumeCollectionGetParams {
	o.SetStyleQueryParameter(style)
	return o
}

// SetStyleQueryParameter adds the style to the volume collection get params
func (o *VolumeCollectionGetParams) SetStyleQueryParameter(style *string) {
	o.StyleQueryParameter = style
}

// WithSVMNameQueryParameter adds the svmName to the volume collection get params
func (o *VolumeCollectionGetParams) WithSVMNameQueryParameter(svmName *string) *VolumeCollectionGetParams {
	o.SetSVMNameQueryParameter(svmName)
	return o
}

// SetSVMNameQueryParameter adds the svmName to the volume collection get params
func (o *VolumeCollectionGetParams) SetSVMNameQueryParameter(svmName *string) {
	o.SVMNameQueryParameter = svmName
}

// WithSVMUUIDQueryParameter adds the svmUUID to the volume collection get params
func (o *VolumeCollectionGetParams) WithSVMUUIDQueryParameter(svmUUID *string) *VolumeCollectionGetParams {
	o.SetSVMUUIDQueryParameter(svmUUID)
	return o
}

// SetSVMUUIDQueryParameter adds the svmUuid to the volume collection get params
func (o *VolumeCollectionGetParams) SetSVMUUIDQueryParameter(svmUUID *string) {
	o.SVMUUIDQueryParameter = svmUUID
}

// WithTieringPolicyQueryParameter adds the tieringPolicy to the volume collection get params
func (o *VolumeCollectionGetParams) WithTieringPolicyQueryParameter(tieringPolicy *string) *VolumeCollectionGetParams {
	o.SetTieringPolicyQueryParameter(tieringPolicy)
	return o
}

// SetTieringPolicyQueryParameter adds the tieringPolicy to the volume collection get params
func (o *VolumeCollectionGetParams) SetTieringPolicyQueryParameter(tieringPolicy *string) {
	o.TieringPolicyQueryParameter = tieringPolicy
}

// WithTypeQueryParameter adds the typeVar to the volume collection get params
func (o *VolumeCollectionGetParams) WithTypeQueryParameter(typeVar *string) *VolumeCollectionGetParams {
	o.SetTypeQueryParameter(typeVar)
	return o
}

// SetTypeQueryParameter adds the type to the volume collection get params
func (o *VolumeCollectionGetParams) SetTypeQueryParameter(typeVar *string) {
	o.TypeQueryParameter = typeVar
}

// WithUUIDQueryParameter adds the uuid to the volume collection get params
func (o *VolumeCollectionGetParams) WithUUIDQueryParameter(uuid *string) *VolumeCollectionGetParams {
	o.SetUUIDQueryParameter(uuid)
	return o
}

// SetUUIDQueryParameter adds the uuid to the volume collection get params
func (o *VolumeCollectionGetParams) SetUUIDQueryParameter(uuid *string) {
	o.UUIDQueryParameter = uuid
}

// WriteToRequest writes these params to a swagger request
func (o *VolumeCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AggregatesNameQueryParameter != nil {

		// query param aggregates.name
		var qrAggregatesName string

		if o.AggregatesNameQueryParameter != nil {
			qrAggregatesName = *o.AggregatesNameQueryParameter
		}
		qAggregatesName := qrAggregatesName
		if qAggregatesName != "" {

			if err := r.SetQueryParam("aggregates.name", qAggregatesName); err != nil {
				return err
			}
		}
	}

	if o.AggregatesUUIDQueryParameter != nil {

		// query param aggregates.uuid
		var qrAggregatesUUID string

		if o.AggregatesUUIDQueryParameter != nil {
			qrAggregatesUUID = *o.AggregatesUUIDQueryParameter
		}
		qAggregatesUUID := qrAggregatesUUID
		if qAggregatesUUID != "" {

			if err := r.SetQueryParam("aggregates.uuid", qAggregatesUUID); err != nil {
				return err
			}
		}
	}

	if o.ApplicationNameQueryParameter != nil {

		// query param application.name
		var qrApplicationName string

		if o.ApplicationNameQueryParameter != nil {
			qrApplicationName = *o.ApplicationNameQueryParameter
		}
		qApplicationName := qrApplicationName
		if qApplicationName != "" {

			if err := r.SetQueryParam("application.name", qApplicationName); err != nil {
				return err
			}
		}
	}

	if o.ApplicationUUIDQueryParameter != nil {

		// query param application.uuid
		var qrApplicationUUID string

		if o.ApplicationUUIDQueryParameter != nil {
			qrApplicationUUID = *o.ApplicationUUIDQueryParameter
		}
		qApplicationUUID := qrApplicationUUID
		if qApplicationUUID != "" {

			if err := r.SetQueryParam("application.uuid", qApplicationUUID); err != nil {
				return err
			}
		}
	}

	if o.AutosizeGrowThresholdQueryParameter != nil {

		// query param autosize.grow_threshold
		var qrAutosizeGrowThreshold int64

		if o.AutosizeGrowThresholdQueryParameter != nil {
			qrAutosizeGrowThreshold = *o.AutosizeGrowThresholdQueryParameter
		}
		qAutosizeGrowThreshold := swag.FormatInt64(qrAutosizeGrowThreshold)
		if qAutosizeGrowThreshold != "" {

			if err := r.SetQueryParam("autosize.grow_threshold", qAutosizeGrowThreshold); err != nil {
				return err
			}
		}
	}

	if o.AutosizeMaximumQueryParameter != nil {

		// query param autosize.maximum
		var qrAutosizeMaximum int64

		if o.AutosizeMaximumQueryParameter != nil {
			qrAutosizeMaximum = *o.AutosizeMaximumQueryParameter
		}
		qAutosizeMaximum := swag.FormatInt64(qrAutosizeMaximum)
		if qAutosizeMaximum != "" {

			if err := r.SetQueryParam("autosize.maximum", qAutosizeMaximum); err != nil {
				return err
			}
		}
	}

	if o.AutosizeMinimumQueryParameter != nil {

		// query param autosize.minimum
		var qrAutosizeMinimum int64

		if o.AutosizeMinimumQueryParameter != nil {
			qrAutosizeMinimum = *o.AutosizeMinimumQueryParameter
		}
		qAutosizeMinimum := swag.FormatInt64(qrAutosizeMinimum)
		if qAutosizeMinimum != "" {

			if err := r.SetQueryParam("autosize.minimum", qAutosizeMinimum); err != nil {
				return err
			}
		}
	}

	if o.AutosizeModeQueryParameter != nil {

		// query param autosize.mode
		var qrAutosizeMode string

		if o.AutosizeModeQueryParameter != nil {
			qrAutosizeMode = *o.AutosizeModeQueryParameter
		}
		qAutosizeMode := qrAutosizeMode
		if qAutosizeMode != "" {

			if err := r.SetQueryParam("autosize.mode", qAutosizeMode); err != nil {
				return err
			}
		}
	}

	if o.AutosizeShrinkThresholdQueryParameter != nil {

		// query param autosize.shrink_threshold
		var qrAutosizeShrinkThreshold int64

		if o.AutosizeShrinkThresholdQueryParameter != nil {
			qrAutosizeShrinkThreshold = *o.AutosizeShrinkThresholdQueryParameter
		}
		qAutosizeShrinkThreshold := swag.FormatInt64(qrAutosizeShrinkThreshold)
		if qAutosizeShrinkThreshold != "" {

			if err := r.SetQueryParam("autosize.shrink_threshold", qAutosizeShrinkThreshold); err != nil {
				return err
			}
		}
	}

	if o.CloneIsFlexcloneQueryParameter != nil {

		// query param clone.is_flexclone
		var qrCloneIsFlexclone bool

		if o.CloneIsFlexcloneQueryParameter != nil {
			qrCloneIsFlexclone = *o.CloneIsFlexcloneQueryParameter
		}
		qCloneIsFlexclone := swag.FormatBool(qrCloneIsFlexclone)
		if qCloneIsFlexclone != "" {

			if err := r.SetQueryParam("clone.is_flexclone", qCloneIsFlexclone); err != nil {
				return err
			}
		}
	}

	if o.CloneParentSnapshotNameQueryParameter != nil {

		// query param clone.parent_snapshot.name
		var qrCloneParentSnapshotName string

		if o.CloneParentSnapshotNameQueryParameter != nil {
			qrCloneParentSnapshotName = *o.CloneParentSnapshotNameQueryParameter
		}
		qCloneParentSnapshotName := qrCloneParentSnapshotName
		if qCloneParentSnapshotName != "" {

			if err := r.SetQueryParam("clone.parent_snapshot.name", qCloneParentSnapshotName); err != nil {
				return err
			}
		}
	}

	if o.CloneParentSnapshotUUIDQueryParameter != nil {

		// query param clone.parent_snapshot.uuid
		var qrCloneParentSnapshotUUID string

		if o.CloneParentSnapshotUUIDQueryParameter != nil {
			qrCloneParentSnapshotUUID = *o.CloneParentSnapshotUUIDQueryParameter
		}
		qCloneParentSnapshotUUID := qrCloneParentSnapshotUUID
		if qCloneParentSnapshotUUID != "" {

			if err := r.SetQueryParam("clone.parent_snapshot.uuid", qCloneParentSnapshotUUID); err != nil {
				return err
			}
		}
	}

	if o.CloneParentSVMNameQueryParameter != nil {

		// query param clone.parent_svm.name
		var qrCloneParentSvmName string

		if o.CloneParentSVMNameQueryParameter != nil {
			qrCloneParentSvmName = *o.CloneParentSVMNameQueryParameter
		}
		qCloneParentSvmName := qrCloneParentSvmName
		if qCloneParentSvmName != "" {

			if err := r.SetQueryParam("clone.parent_svm.name", qCloneParentSvmName); err != nil {
				return err
			}
		}
	}

	if o.CloneParentSVMUUIDQueryParameter != nil {

		// query param clone.parent_svm.uuid
		var qrCloneParentSvmUUID string

		if o.CloneParentSVMUUIDQueryParameter != nil {
			qrCloneParentSvmUUID = *o.CloneParentSVMUUIDQueryParameter
		}
		qCloneParentSvmUUID := qrCloneParentSvmUUID
		if qCloneParentSvmUUID != "" {

			if err := r.SetQueryParam("clone.parent_svm.uuid", qCloneParentSvmUUID); err != nil {
				return err
			}
		}
	}

	if o.CloneParentVolumeNameQueryParameter != nil {

		// query param clone.parent_volume.name
		var qrCloneParentVolumeName string

		if o.CloneParentVolumeNameQueryParameter != nil {
			qrCloneParentVolumeName = *o.CloneParentVolumeNameQueryParameter
		}
		qCloneParentVolumeName := qrCloneParentVolumeName
		if qCloneParentVolumeName != "" {

			if err := r.SetQueryParam("clone.parent_volume.name", qCloneParentVolumeName); err != nil {
				return err
			}
		}
	}

	if o.CloneParentVolumeUUIDQueryParameter != nil {

		// query param clone.parent_volume.uuid
		var qrCloneParentVolumeUUID string

		if o.CloneParentVolumeUUIDQueryParameter != nil {
			qrCloneParentVolumeUUID = *o.CloneParentVolumeUUIDQueryParameter
		}
		qCloneParentVolumeUUID := qrCloneParentVolumeUUID
		if qCloneParentVolumeUUID != "" {

			if err := r.SetQueryParam("clone.parent_volume.uuid", qCloneParentVolumeUUID); err != nil {
				return err
			}
		}
	}

	if o.CloneSplitCompletePercentQueryParameter != nil {

		// query param clone.split_complete_percent
		var qrCloneSplitCompletePercent int64

		if o.CloneSplitCompletePercentQueryParameter != nil {
			qrCloneSplitCompletePercent = *o.CloneSplitCompletePercentQueryParameter
		}
		qCloneSplitCompletePercent := swag.FormatInt64(qrCloneSplitCompletePercent)
		if qCloneSplitCompletePercent != "" {

			if err := r.SetQueryParam("clone.split_complete_percent", qCloneSplitCompletePercent); err != nil {
				return err
			}
		}
	}

	if o.CloneSplitEstimateQueryParameter != nil {

		// query param clone.split_estimate
		var qrCloneSplitEstimate int64

		if o.CloneSplitEstimateQueryParameter != nil {
			qrCloneSplitEstimate = *o.CloneSplitEstimateQueryParameter
		}
		qCloneSplitEstimate := swag.FormatInt64(qrCloneSplitEstimate)
		if qCloneSplitEstimate != "" {

			if err := r.SetQueryParam("clone.split_estimate", qCloneSplitEstimate); err != nil {
				return err
			}
		}
	}

	if o.CloneSplitInitiatedQueryParameter != nil {

		// query param clone.split_initiated
		var qrCloneSplitInitiated bool

		if o.CloneSplitInitiatedQueryParameter != nil {
			qrCloneSplitInitiated = *o.CloneSplitInitiatedQueryParameter
		}
		qCloneSplitInitiated := swag.FormatBool(qrCloneSplitInitiated)
		if qCloneSplitInitiated != "" {

			if err := r.SetQueryParam("clone.split_initiated", qCloneSplitInitiated); err != nil {
				return err
			}
		}
	}

	if o.CommentQueryParameter != nil {

		// query param comment
		var qrComment string

		if o.CommentQueryParameter != nil {
			qrComment = *o.CommentQueryParameter
		}
		qComment := qrComment
		if qComment != "" {

			if err := r.SetQueryParam("comment", qComment); err != nil {
				return err
			}
		}
	}

	if o.ConsistencyGroupNameQueryParameter != nil {

		// query param consistency_group.name
		var qrConsistencyGroupName string

		if o.ConsistencyGroupNameQueryParameter != nil {
			qrConsistencyGroupName = *o.ConsistencyGroupNameQueryParameter
		}
		qConsistencyGroupName := qrConsistencyGroupName
		if qConsistencyGroupName != "" {

			if err := r.SetQueryParam("consistency_group.name", qConsistencyGroupName); err != nil {
				return err
			}
		}
	}

	if o.CreateTimeQueryParameter != nil {

		// query param create_time
		var qrCreateTime string

		if o.CreateTimeQueryParameter != nil {
			qrCreateTime = *o.CreateTimeQueryParameter
		}
		qCreateTime := qrCreateTime
		if qCreateTime != "" {

			if err := r.SetQueryParam("create_time", qCreateTime); err != nil {
				return err
			}
		}
	}

	if o.EfficiencyCompactionQueryParameter != nil {

		// query param efficiency.compaction
		var qrEfficiencyCompaction string

		if o.EfficiencyCompactionQueryParameter != nil {
			qrEfficiencyCompaction = *o.EfficiencyCompactionQueryParameter
		}
		qEfficiencyCompaction := qrEfficiencyCompaction
		if qEfficiencyCompaction != "" {

			if err := r.SetQueryParam("efficiency.compaction", qEfficiencyCompaction); err != nil {
				return err
			}
		}
	}

	if o.EfficiencyCompressionQueryParameter != nil {

		// query param efficiency.compression
		var qrEfficiencyCompression string

		if o.EfficiencyCompressionQueryParameter != nil {
			qrEfficiencyCompression = *o.EfficiencyCompressionQueryParameter
		}
		qEfficiencyCompression := qrEfficiencyCompression
		if qEfficiencyCompression != "" {

			if err := r.SetQueryParam("efficiency.compression", qEfficiencyCompression); err != nil {
				return err
			}
		}
	}

	if o.EfficiencyCrossVolumeDedupeQueryParameter != nil {

		// query param efficiency.cross_volume_dedupe
		var qrEfficiencyCrossVolumeDedupe string

		if o.EfficiencyCrossVolumeDedupeQueryParameter != nil {
			qrEfficiencyCrossVolumeDedupe = *o.EfficiencyCrossVolumeDedupeQueryParameter
		}
		qEfficiencyCrossVolumeDedupe := qrEfficiencyCrossVolumeDedupe
		if qEfficiencyCrossVolumeDedupe != "" {

			if err := r.SetQueryParam("efficiency.cross_volume_dedupe", qEfficiencyCrossVolumeDedupe); err != nil {
				return err
			}
		}
	}

	if o.EfficiencyDedupeQueryParameter != nil {

		// query param efficiency.dedupe
		var qrEfficiencyDedupe string

		if o.EfficiencyDedupeQueryParameter != nil {
			qrEfficiencyDedupe = *o.EfficiencyDedupeQueryParameter
		}
		qEfficiencyDedupe := qrEfficiencyDedupe
		if qEfficiencyDedupe != "" {

			if err := r.SetQueryParam("efficiency.dedupe", qEfficiencyDedupe); err != nil {
				return err
			}
		}
	}

	if o.EfficiencyPolicyNameQueryParameter != nil {

		// query param efficiency.policy.name
		var qrEfficiencyPolicyName string

		if o.EfficiencyPolicyNameQueryParameter != nil {
			qrEfficiencyPolicyName = *o.EfficiencyPolicyNameQueryParameter
		}
		qEfficiencyPolicyName := qrEfficiencyPolicyName
		if qEfficiencyPolicyName != "" {

			if err := r.SetQueryParam("efficiency.policy.name", qEfficiencyPolicyName); err != nil {
				return err
			}
		}
	}

	if o.EncryptionEnabledQueryParameter != nil {

		// query param encryption.enabled
		var qrEncryptionEnabled bool

		if o.EncryptionEnabledQueryParameter != nil {
			qrEncryptionEnabled = *o.EncryptionEnabledQueryParameter
		}
		qEncryptionEnabled := swag.FormatBool(qrEncryptionEnabled)
		if qEncryptionEnabled != "" {

			if err := r.SetQueryParam("encryption.enabled", qEncryptionEnabled); err != nil {
				return err
			}
		}
	}

	if o.EncryptionKeyIDQueryParameter != nil {

		// query param encryption.key_id
		var qrEncryptionKeyID string

		if o.EncryptionKeyIDQueryParameter != nil {
			qrEncryptionKeyID = *o.EncryptionKeyIDQueryParameter
		}
		qEncryptionKeyID := qrEncryptionKeyID
		if qEncryptionKeyID != "" {

			if err := r.SetQueryParam("encryption.key_id", qEncryptionKeyID); err != nil {
				return err
			}
		}
	}

	if o.EncryptionRekeyQueryParameter != nil {

		// query param encryption.rekey
		var qrEncryptionRekey bool

		if o.EncryptionRekeyQueryParameter != nil {
			qrEncryptionRekey = *o.EncryptionRekeyQueryParameter
		}
		qEncryptionRekey := swag.FormatBool(qrEncryptionRekey)
		if qEncryptionRekey != "" {

			if err := r.SetQueryParam("encryption.rekey", qEncryptionRekey); err != nil {
				return err
			}
		}
	}

	if o.EncryptionStateQueryParameter != nil {

		// query param encryption.state
		var qrEncryptionState string

		if o.EncryptionStateQueryParameter != nil {
			qrEncryptionState = *o.EncryptionStateQueryParameter
		}
		qEncryptionState := qrEncryptionState
		if qEncryptionState != "" {

			if err := r.SetQueryParam("encryption.state", qEncryptionState); err != nil {
				return err
			}
		}
	}

	if o.EncryptionStatusCodeQueryParameter != nil {

		// query param encryption.status.code
		var qrEncryptionStatusCode string

		if o.EncryptionStatusCodeQueryParameter != nil {
			qrEncryptionStatusCode = *o.EncryptionStatusCodeQueryParameter
		}
		qEncryptionStatusCode := qrEncryptionStatusCode
		if qEncryptionStatusCode != "" {

			if err := r.SetQueryParam("encryption.status.code", qEncryptionStatusCode); err != nil {
				return err
			}
		}
	}

	if o.EncryptionStatusMessageQueryParameter != nil {

		// query param encryption.status.message
		var qrEncryptionStatusMessage string

		if o.EncryptionStatusMessageQueryParameter != nil {
			qrEncryptionStatusMessage = *o.EncryptionStatusMessageQueryParameter
		}
		qEncryptionStatusMessage := qrEncryptionStatusMessage
		if qEncryptionStatusMessage != "" {

			if err := r.SetQueryParam("encryption.status.message", qEncryptionStatusMessage); err != nil {
				return err
			}
		}
	}

	if o.EncryptionTypeQueryParameter != nil {

		// query param encryption.type
		var qrEncryptionType string

		if o.EncryptionTypeQueryParameter != nil {
			qrEncryptionType = *o.EncryptionTypeQueryParameter
		}
		qEncryptionType := qrEncryptionType
		if qEncryptionType != "" {

			if err := r.SetQueryParam("encryption.type", qEncryptionType); err != nil {
				return err
			}
		}
	}

	if o.ErrorStateHasBadBlocksQueryParameter != nil {

		// query param error_state.has_bad_blocks
		var qrErrorStateHasBadBlocks bool

		if o.ErrorStateHasBadBlocksQueryParameter != nil {
			qrErrorStateHasBadBlocks = *o.ErrorStateHasBadBlocksQueryParameter
		}
		qErrorStateHasBadBlocks := swag.FormatBool(qrErrorStateHasBadBlocks)
		if qErrorStateHasBadBlocks != "" {

			if err := r.SetQueryParam("error_state.has_bad_blocks", qErrorStateHasBadBlocks); err != nil {
				return err
			}
		}
	}

	if o.ErrorStateIsInconsistentQueryParameter != nil {

		// query param error_state.is_inconsistent
		var qrErrorStateIsInconsistent bool

		if o.ErrorStateIsInconsistentQueryParameter != nil {
			qrErrorStateIsInconsistent = *o.ErrorStateIsInconsistentQueryParameter
		}
		qErrorStateIsInconsistent := swag.FormatBool(qrErrorStateIsInconsistent)
		if qErrorStateIsInconsistent != "" {

			if err := r.SetQueryParam("error_state.is_inconsistent", qErrorStateIsInconsistent); err != nil {
				return err
			}
		}
	}

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.FilesMaximumQueryParameter != nil {

		// query param files.maximum
		var qrFilesMaximum int64

		if o.FilesMaximumQueryParameter != nil {
			qrFilesMaximum = *o.FilesMaximumQueryParameter
		}
		qFilesMaximum := swag.FormatInt64(qrFilesMaximum)
		if qFilesMaximum != "" {

			if err := r.SetQueryParam("files.maximum", qFilesMaximum); err != nil {
				return err
			}
		}
	}

	if o.FilesUsedQueryParameter != nil {

		// query param files.used
		var qrFilesUsed int64

		if o.FilesUsedQueryParameter != nil {
			qrFilesUsed = *o.FilesUsedQueryParameter
		}
		qFilesUsed := swag.FormatInt64(qrFilesUsed)
		if qFilesUsed != "" {

			if err := r.SetQueryParam("files.used", qFilesUsed); err != nil {
				return err
			}
		}
	}

	if o.FlexcacheEndpointTypeQueryParameter != nil {

		// query param flexcache_endpoint_type
		var qrFlexcacheEndpointType string

		if o.FlexcacheEndpointTypeQueryParameter != nil {
			qrFlexcacheEndpointType = *o.FlexcacheEndpointTypeQueryParameter
		}
		qFlexcacheEndpointType := qrFlexcacheEndpointType
		if qFlexcacheEndpointType != "" {

			if err := r.SetQueryParam("flexcache_endpoint_type", qFlexcacheEndpointType); err != nil {
				return err
			}
		}
	}

	if o.GuaranteeHonoredQueryParameter != nil {

		// query param guarantee.honored
		var qrGuaranteeHonored bool

		if o.GuaranteeHonoredQueryParameter != nil {
			qrGuaranteeHonored = *o.GuaranteeHonoredQueryParameter
		}
		qGuaranteeHonored := swag.FormatBool(qrGuaranteeHonored)
		if qGuaranteeHonored != "" {

			if err := r.SetQueryParam("guarantee.honored", qGuaranteeHonored); err != nil {
				return err
			}
		}
	}

	if o.GuaranteeTypeQueryParameter != nil {

		// query param guarantee.type
		var qrGuaranteeType string

		if o.GuaranteeTypeQueryParameter != nil {
			qrGuaranteeType = *o.GuaranteeTypeQueryParameter
		}
		qGuaranteeType := qrGuaranteeType
		if qGuaranteeType != "" {

			if err := r.SetQueryParam("guarantee.type", qGuaranteeType); err != nil {
				return err
			}
		}
	}

	if o.IsSVMRootQueryParameter != nil {

		// query param is_svm_root
		var qrIsSvmRoot bool

		if o.IsSVMRootQueryParameter != nil {
			qrIsSvmRoot = *o.IsSVMRootQueryParameter
		}
		qIsSvmRoot := swag.FormatBool(qrIsSvmRoot)
		if qIsSvmRoot != "" {

			if err := r.SetQueryParam("is_svm_root", qIsSvmRoot); err != nil {
				return err
			}
		}
	}

	if o.LanguageQueryParameter != nil {

		// query param language
		var qrLanguage string

		if o.LanguageQueryParameter != nil {
			qrLanguage = *o.LanguageQueryParameter
		}
		qLanguage := qrLanguage
		if qLanguage != "" {

			if err := r.SetQueryParam("language", qLanguage); err != nil {
				return err
			}
		}
	}

	if o.MaxRecords != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecords != nil {
			qrMaxRecords = *o.MaxRecords
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.MetricCloudDurationQueryParameter != nil {

		// query param metric.cloud.duration
		var qrMetricCloudDuration string

		if o.MetricCloudDurationQueryParameter != nil {
			qrMetricCloudDuration = *o.MetricCloudDurationQueryParameter
		}
		qMetricCloudDuration := qrMetricCloudDuration
		if qMetricCloudDuration != "" {

			if err := r.SetQueryParam("metric.cloud.duration", qMetricCloudDuration); err != nil {
				return err
			}
		}
	}

	if o.MetricCloudIopsOtherQueryParameter != nil {

		// query param metric.cloud.iops.other
		var qrMetricCloudIopsOther int64

		if o.MetricCloudIopsOtherQueryParameter != nil {
			qrMetricCloudIopsOther = *o.MetricCloudIopsOtherQueryParameter
		}
		qMetricCloudIopsOther := swag.FormatInt64(qrMetricCloudIopsOther)
		if qMetricCloudIopsOther != "" {

			if err := r.SetQueryParam("metric.cloud.iops.other", qMetricCloudIopsOther); err != nil {
				return err
			}
		}
	}

	if o.MetricCloudIopsReadQueryParameter != nil {

		// query param metric.cloud.iops.read
		var qrMetricCloudIopsRead int64

		if o.MetricCloudIopsReadQueryParameter != nil {
			qrMetricCloudIopsRead = *o.MetricCloudIopsReadQueryParameter
		}
		qMetricCloudIopsRead := swag.FormatInt64(qrMetricCloudIopsRead)
		if qMetricCloudIopsRead != "" {

			if err := r.SetQueryParam("metric.cloud.iops.read", qMetricCloudIopsRead); err != nil {
				return err
			}
		}
	}

	if o.MetricCloudIopsTotalQueryParameter != nil {

		// query param metric.cloud.iops.total
		var qrMetricCloudIopsTotal int64

		if o.MetricCloudIopsTotalQueryParameter != nil {
			qrMetricCloudIopsTotal = *o.MetricCloudIopsTotalQueryParameter
		}
		qMetricCloudIopsTotal := swag.FormatInt64(qrMetricCloudIopsTotal)
		if qMetricCloudIopsTotal != "" {

			if err := r.SetQueryParam("metric.cloud.iops.total", qMetricCloudIopsTotal); err != nil {
				return err
			}
		}
	}

	if o.MetricCloudIopsWriteQueryParameter != nil {

		// query param metric.cloud.iops.write
		var qrMetricCloudIopsWrite int64

		if o.MetricCloudIopsWriteQueryParameter != nil {
			qrMetricCloudIopsWrite = *o.MetricCloudIopsWriteQueryParameter
		}
		qMetricCloudIopsWrite := swag.FormatInt64(qrMetricCloudIopsWrite)
		if qMetricCloudIopsWrite != "" {

			if err := r.SetQueryParam("metric.cloud.iops.write", qMetricCloudIopsWrite); err != nil {
				return err
			}
		}
	}

	if o.MetricCloudLatencyOtherQueryParameter != nil {

		// query param metric.cloud.latency.other
		var qrMetricCloudLatencyOther int64

		if o.MetricCloudLatencyOtherQueryParameter != nil {
			qrMetricCloudLatencyOther = *o.MetricCloudLatencyOtherQueryParameter
		}
		qMetricCloudLatencyOther := swag.FormatInt64(qrMetricCloudLatencyOther)
		if qMetricCloudLatencyOther != "" {

			if err := r.SetQueryParam("metric.cloud.latency.other", qMetricCloudLatencyOther); err != nil {
				return err
			}
		}
	}

	if o.MetricCloudLatencyReadQueryParameter != nil {

		// query param metric.cloud.latency.read
		var qrMetricCloudLatencyRead int64

		if o.MetricCloudLatencyReadQueryParameter != nil {
			qrMetricCloudLatencyRead = *o.MetricCloudLatencyReadQueryParameter
		}
		qMetricCloudLatencyRead := swag.FormatInt64(qrMetricCloudLatencyRead)
		if qMetricCloudLatencyRead != "" {

			if err := r.SetQueryParam("metric.cloud.latency.read", qMetricCloudLatencyRead); err != nil {
				return err
			}
		}
	}

	if o.MetricCloudLatencyTotalQueryParameter != nil {

		// query param metric.cloud.latency.total
		var qrMetricCloudLatencyTotal int64

		if o.MetricCloudLatencyTotalQueryParameter != nil {
			qrMetricCloudLatencyTotal = *o.MetricCloudLatencyTotalQueryParameter
		}
		qMetricCloudLatencyTotal := swag.FormatInt64(qrMetricCloudLatencyTotal)
		if qMetricCloudLatencyTotal != "" {

			if err := r.SetQueryParam("metric.cloud.latency.total", qMetricCloudLatencyTotal); err != nil {
				return err
			}
		}
	}

	if o.MetricCloudLatencyWriteQueryParameter != nil {

		// query param metric.cloud.latency.write
		var qrMetricCloudLatencyWrite int64

		if o.MetricCloudLatencyWriteQueryParameter != nil {
			qrMetricCloudLatencyWrite = *o.MetricCloudLatencyWriteQueryParameter
		}
		qMetricCloudLatencyWrite := swag.FormatInt64(qrMetricCloudLatencyWrite)
		if qMetricCloudLatencyWrite != "" {

			if err := r.SetQueryParam("metric.cloud.latency.write", qMetricCloudLatencyWrite); err != nil {
				return err
			}
		}
	}

	if o.MetricCloudStatusQueryParameter != nil {

		// query param metric.cloud.status
		var qrMetricCloudStatus string

		if o.MetricCloudStatusQueryParameter != nil {
			qrMetricCloudStatus = *o.MetricCloudStatusQueryParameter
		}
		qMetricCloudStatus := qrMetricCloudStatus
		if qMetricCloudStatus != "" {

			if err := r.SetQueryParam("metric.cloud.status", qMetricCloudStatus); err != nil {
				return err
			}
		}
	}

	if o.MetricCloudTimestampQueryParameter != nil {

		// query param metric.cloud.timestamp
		var qrMetricCloudTimestamp string

		if o.MetricCloudTimestampQueryParameter != nil {
			qrMetricCloudTimestamp = *o.MetricCloudTimestampQueryParameter
		}
		qMetricCloudTimestamp := qrMetricCloudTimestamp
		if qMetricCloudTimestamp != "" {

			if err := r.SetQueryParam("metric.cloud.timestamp", qMetricCloudTimestamp); err != nil {
				return err
			}
		}
	}

	if o.MetricDurationQueryParameter != nil {

		// query param metric.duration
		var qrMetricDuration string

		if o.MetricDurationQueryParameter != nil {
			qrMetricDuration = *o.MetricDurationQueryParameter
		}
		qMetricDuration := qrMetricDuration
		if qMetricDuration != "" {

			if err := r.SetQueryParam("metric.duration", qMetricDuration); err != nil {
				return err
			}
		}
	}

	if o.MetricIopsOtherQueryParameter != nil {

		// query param metric.iops.other
		var qrMetricIopsOther int64

		if o.MetricIopsOtherQueryParameter != nil {
			qrMetricIopsOther = *o.MetricIopsOtherQueryParameter
		}
		qMetricIopsOther := swag.FormatInt64(qrMetricIopsOther)
		if qMetricIopsOther != "" {

			if err := r.SetQueryParam("metric.iops.other", qMetricIopsOther); err != nil {
				return err
			}
		}
	}

	if o.MetricIopsReadQueryParameter != nil {

		// query param metric.iops.read
		var qrMetricIopsRead int64

		if o.MetricIopsReadQueryParameter != nil {
			qrMetricIopsRead = *o.MetricIopsReadQueryParameter
		}
		qMetricIopsRead := swag.FormatInt64(qrMetricIopsRead)
		if qMetricIopsRead != "" {

			if err := r.SetQueryParam("metric.iops.read", qMetricIopsRead); err != nil {
				return err
			}
		}
	}

	if o.MetricIopsTotalQueryParameter != nil {

		// query param metric.iops.total
		var qrMetricIopsTotal int64

		if o.MetricIopsTotalQueryParameter != nil {
			qrMetricIopsTotal = *o.MetricIopsTotalQueryParameter
		}
		qMetricIopsTotal := swag.FormatInt64(qrMetricIopsTotal)
		if qMetricIopsTotal != "" {

			if err := r.SetQueryParam("metric.iops.total", qMetricIopsTotal); err != nil {
				return err
			}
		}
	}

	if o.MetricIopsWriteQueryParameter != nil {

		// query param metric.iops.write
		var qrMetricIopsWrite int64

		if o.MetricIopsWriteQueryParameter != nil {
			qrMetricIopsWrite = *o.MetricIopsWriteQueryParameter
		}
		qMetricIopsWrite := swag.FormatInt64(qrMetricIopsWrite)
		if qMetricIopsWrite != "" {

			if err := r.SetQueryParam("metric.iops.write", qMetricIopsWrite); err != nil {
				return err
			}
		}
	}

	if o.MetricLatencyOtherQueryParameter != nil {

		// query param metric.latency.other
		var qrMetricLatencyOther int64

		if o.MetricLatencyOtherQueryParameter != nil {
			qrMetricLatencyOther = *o.MetricLatencyOtherQueryParameter
		}
		qMetricLatencyOther := swag.FormatInt64(qrMetricLatencyOther)
		if qMetricLatencyOther != "" {

			if err := r.SetQueryParam("metric.latency.other", qMetricLatencyOther); err != nil {
				return err
			}
		}
	}

	if o.MetricLatencyReadQueryParameter != nil {

		// query param metric.latency.read
		var qrMetricLatencyRead int64

		if o.MetricLatencyReadQueryParameter != nil {
			qrMetricLatencyRead = *o.MetricLatencyReadQueryParameter
		}
		qMetricLatencyRead := swag.FormatInt64(qrMetricLatencyRead)
		if qMetricLatencyRead != "" {

			if err := r.SetQueryParam("metric.latency.read", qMetricLatencyRead); err != nil {
				return err
			}
		}
	}

	if o.MetricLatencyTotalQueryParameter != nil {

		// query param metric.latency.total
		var qrMetricLatencyTotal int64

		if o.MetricLatencyTotalQueryParameter != nil {
			qrMetricLatencyTotal = *o.MetricLatencyTotalQueryParameter
		}
		qMetricLatencyTotal := swag.FormatInt64(qrMetricLatencyTotal)
		if qMetricLatencyTotal != "" {

			if err := r.SetQueryParam("metric.latency.total", qMetricLatencyTotal); err != nil {
				return err
			}
		}
	}

	if o.MetricLatencyWriteQueryParameter != nil {

		// query param metric.latency.write
		var qrMetricLatencyWrite int64

		if o.MetricLatencyWriteQueryParameter != nil {
			qrMetricLatencyWrite = *o.MetricLatencyWriteQueryParameter
		}
		qMetricLatencyWrite := swag.FormatInt64(qrMetricLatencyWrite)
		if qMetricLatencyWrite != "" {

			if err := r.SetQueryParam("metric.latency.write", qMetricLatencyWrite); err != nil {
				return err
			}
		}
	}

	if o.MetricStatusQueryParameter != nil {

		// query param metric.status
		var qrMetricStatus string

		if o.MetricStatusQueryParameter != nil {
			qrMetricStatus = *o.MetricStatusQueryParameter
		}
		qMetricStatus := qrMetricStatus
		if qMetricStatus != "" {

			if err := r.SetQueryParam("metric.status", qMetricStatus); err != nil {
				return err
			}
		}
	}

	if o.MetricThroughputOtherQueryParameter != nil {

		// query param metric.throughput.other
		var qrMetricThroughputOther int64

		if o.MetricThroughputOtherQueryParameter != nil {
			qrMetricThroughputOther = *o.MetricThroughputOtherQueryParameter
		}
		qMetricThroughputOther := swag.FormatInt64(qrMetricThroughputOther)
		if qMetricThroughputOther != "" {

			if err := r.SetQueryParam("metric.throughput.other", qMetricThroughputOther); err != nil {
				return err
			}
		}
	}

	if o.MetricThroughputReadQueryParameter != nil {

		// query param metric.throughput.read
		var qrMetricThroughputRead int64

		if o.MetricThroughputReadQueryParameter != nil {
			qrMetricThroughputRead = *o.MetricThroughputReadQueryParameter
		}
		qMetricThroughputRead := swag.FormatInt64(qrMetricThroughputRead)
		if qMetricThroughputRead != "" {

			if err := r.SetQueryParam("metric.throughput.read", qMetricThroughputRead); err != nil {
				return err
			}
		}
	}

	if o.MetricThroughputTotalQueryParameter != nil {

		// query param metric.throughput.total
		var qrMetricThroughputTotal int64

		if o.MetricThroughputTotalQueryParameter != nil {
			qrMetricThroughputTotal = *o.MetricThroughputTotalQueryParameter
		}
		qMetricThroughputTotal := swag.FormatInt64(qrMetricThroughputTotal)
		if qMetricThroughputTotal != "" {

			if err := r.SetQueryParam("metric.throughput.total", qMetricThroughputTotal); err != nil {
				return err
			}
		}
	}

	if o.MetricThroughputWriteQueryParameter != nil {

		// query param metric.throughput.write
		var qrMetricThroughputWrite int64

		if o.MetricThroughputWriteQueryParameter != nil {
			qrMetricThroughputWrite = *o.MetricThroughputWriteQueryParameter
		}
		qMetricThroughputWrite := swag.FormatInt64(qrMetricThroughputWrite)
		if qMetricThroughputWrite != "" {

			if err := r.SetQueryParam("metric.throughput.write", qMetricThroughputWrite); err != nil {
				return err
			}
		}
	}

	if o.MetricTimestampQueryParameter != nil {

		// query param metric.timestamp
		var qrMetricTimestamp string

		if o.MetricTimestampQueryParameter != nil {
			qrMetricTimestamp = *o.MetricTimestampQueryParameter
		}
		qMetricTimestamp := qrMetricTimestamp
		if qMetricTimestamp != "" {

			if err := r.SetQueryParam("metric.timestamp", qMetricTimestamp); err != nil {
				return err
			}
		}
	}

	if o.MovementCutoverWindowQueryParameter != nil {

		// query param movement.cutover_window
		var qrMovementCutoverWindow int64

		if o.MovementCutoverWindowQueryParameter != nil {
			qrMovementCutoverWindow = *o.MovementCutoverWindowQueryParameter
		}
		qMovementCutoverWindow := swag.FormatInt64(qrMovementCutoverWindow)
		if qMovementCutoverWindow != "" {

			if err := r.SetQueryParam("movement.cutover_window", qMovementCutoverWindow); err != nil {
				return err
			}
		}
	}

	if o.MovementDestinationAggregateNameQueryParameter != nil {

		// query param movement.destination_aggregate.name
		var qrMovementDestinationAggregateName string

		if o.MovementDestinationAggregateNameQueryParameter != nil {
			qrMovementDestinationAggregateName = *o.MovementDestinationAggregateNameQueryParameter
		}
		qMovementDestinationAggregateName := qrMovementDestinationAggregateName
		if qMovementDestinationAggregateName != "" {

			if err := r.SetQueryParam("movement.destination_aggregate.name", qMovementDestinationAggregateName); err != nil {
				return err
			}
		}
	}

	if o.MovementDestinationAggregateUUIDQueryParameter != nil {

		// query param movement.destination_aggregate.uuid
		var qrMovementDestinationAggregateUUID string

		if o.MovementDestinationAggregateUUIDQueryParameter != nil {
			qrMovementDestinationAggregateUUID = *o.MovementDestinationAggregateUUIDQueryParameter
		}
		qMovementDestinationAggregateUUID := qrMovementDestinationAggregateUUID
		if qMovementDestinationAggregateUUID != "" {

			if err := r.SetQueryParam("movement.destination_aggregate.uuid", qMovementDestinationAggregateUUID); err != nil {
				return err
			}
		}
	}

	if o.MovementPercentCompleteQueryParameter != nil {

		// query param movement.percent_complete
		var qrMovementPercentComplete int64

		if o.MovementPercentCompleteQueryParameter != nil {
			qrMovementPercentComplete = *o.MovementPercentCompleteQueryParameter
		}
		qMovementPercentComplete := swag.FormatInt64(qrMovementPercentComplete)
		if qMovementPercentComplete != "" {

			if err := r.SetQueryParam("movement.percent_complete", qMovementPercentComplete); err != nil {
				return err
			}
		}
	}

	if o.MovementStateQueryParameter != nil {

		// query param movement.state
		var qrMovementState string

		if o.MovementStateQueryParameter != nil {
			qrMovementState = *o.MovementStateQueryParameter
		}
		qMovementState := qrMovementState
		if qMovementState != "" {

			if err := r.SetQueryParam("movement.state", qMovementState); err != nil {
				return err
			}
		}
	}

	if o.NameQueryParameter != nil {

		// query param name
		var qrName string

		if o.NameQueryParameter != nil {
			qrName = *o.NameQueryParameter
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.NasExportPolicyIDQueryParameter != nil {

		// query param nas.export_policy.id
		var qrNasExportPolicyID int64

		if o.NasExportPolicyIDQueryParameter != nil {
			qrNasExportPolicyID = *o.NasExportPolicyIDQueryParameter
		}
		qNasExportPolicyID := swag.FormatInt64(qrNasExportPolicyID)
		if qNasExportPolicyID != "" {

			if err := r.SetQueryParam("nas.export_policy.id", qNasExportPolicyID); err != nil {
				return err
			}
		}
	}

	if o.NasExportPolicyNameQueryParameter != nil {

		// query param nas.export_policy.name
		var qrNasExportPolicyName string

		if o.NasExportPolicyNameQueryParameter != nil {
			qrNasExportPolicyName = *o.NasExportPolicyNameQueryParameter
		}
		qNasExportPolicyName := qrNasExportPolicyName
		if qNasExportPolicyName != "" {

			if err := r.SetQueryParam("nas.export_policy.name", qNasExportPolicyName); err != nil {
				return err
			}
		}
	}

	if o.NasGIDQueryParameter != nil {

		// query param nas.gid
		var qrNasGid int64

		if o.NasGIDQueryParameter != nil {
			qrNasGid = *o.NasGIDQueryParameter
		}
		qNasGid := swag.FormatInt64(qrNasGid)
		if qNasGid != "" {

			if err := r.SetQueryParam("nas.gid", qNasGid); err != nil {
				return err
			}
		}
	}

	if o.NasPathQueryParameter != nil {

		// query param nas.path
		var qrNasPath string

		if o.NasPathQueryParameter != nil {
			qrNasPath = *o.NasPathQueryParameter
		}
		qNasPath := qrNasPath
		if qNasPath != "" {

			if err := r.SetQueryParam("nas.path", qNasPath); err != nil {
				return err
			}
		}
	}

	if o.NasSecurityStyleQueryParameter != nil {

		// query param nas.security_style
		var qrNasSecurityStyle string

		if o.NasSecurityStyleQueryParameter != nil {
			qrNasSecurityStyle = *o.NasSecurityStyleQueryParameter
		}
		qNasSecurityStyle := qrNasSecurityStyle
		if qNasSecurityStyle != "" {

			if err := r.SetQueryParam("nas.security_style", qNasSecurityStyle); err != nil {
				return err
			}
		}
	}

	if o.NasUIDQueryParameter != nil {

		// query param nas.uid
		var qrNasUID int64

		if o.NasUIDQueryParameter != nil {
			qrNasUID = *o.NasUIDQueryParameter
		}
		qNasUID := swag.FormatInt64(qrNasUID)
		if qNasUID != "" {

			if err := r.SetQueryParam("nas.uid", qNasUID); err != nil {
				return err
			}
		}
	}

	if o.NasUnixPermissionsQueryParameter != nil {

		// query param nas.unix_permissions
		var qrNasUnixPermissions int64

		if o.NasUnixPermissionsQueryParameter != nil {
			qrNasUnixPermissions = *o.NasUnixPermissionsQueryParameter
		}
		qNasUnixPermissions := swag.FormatInt64(qrNasUnixPermissions)
		if qNasUnixPermissions != "" {

			if err := r.SetQueryParam("nas.unix_permissions", qNasUnixPermissions); err != nil {
				return err
			}
		}
	}

	if o.OrderBy != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.QosPolicyMaxThroughputIopsQueryParameter != nil {

		// query param qos.policy.max_throughput_iops
		var qrQosPolicyMaxThroughputIops int64

		if o.QosPolicyMaxThroughputIopsQueryParameter != nil {
			qrQosPolicyMaxThroughputIops = *o.QosPolicyMaxThroughputIopsQueryParameter
		}
		qQosPolicyMaxThroughputIops := swag.FormatInt64(qrQosPolicyMaxThroughputIops)
		if qQosPolicyMaxThroughputIops != "" {

			if err := r.SetQueryParam("qos.policy.max_throughput_iops", qQosPolicyMaxThroughputIops); err != nil {
				return err
			}
		}
	}

	if o.QosPolicyMaxThroughputMbpsQueryParameter != nil {

		// query param qos.policy.max_throughput_mbps
		var qrQosPolicyMaxThroughputMbps int64

		if o.QosPolicyMaxThroughputMbpsQueryParameter != nil {
			qrQosPolicyMaxThroughputMbps = *o.QosPolicyMaxThroughputMbpsQueryParameter
		}
		qQosPolicyMaxThroughputMbps := swag.FormatInt64(qrQosPolicyMaxThroughputMbps)
		if qQosPolicyMaxThroughputMbps != "" {

			if err := r.SetQueryParam("qos.policy.max_throughput_mbps", qQosPolicyMaxThroughputMbps); err != nil {
				return err
			}
		}
	}

	if o.QosPolicyMinThroughputIopsQueryParameter != nil {

		// query param qos.policy.min_throughput_iops
		var qrQosPolicyMinThroughputIops int64

		if o.QosPolicyMinThroughputIopsQueryParameter != nil {
			qrQosPolicyMinThroughputIops = *o.QosPolicyMinThroughputIopsQueryParameter
		}
		qQosPolicyMinThroughputIops := swag.FormatInt64(qrQosPolicyMinThroughputIops)
		if qQosPolicyMinThroughputIops != "" {

			if err := r.SetQueryParam("qos.policy.min_throughput_iops", qQosPolicyMinThroughputIops); err != nil {
				return err
			}
		}
	}

	if o.QosPolicyNameQueryParameter != nil {

		// query param qos.policy.name
		var qrQosPolicyName string

		if o.QosPolicyNameQueryParameter != nil {
			qrQosPolicyName = *o.QosPolicyNameQueryParameter
		}
		qQosPolicyName := qrQosPolicyName
		if qQosPolicyName != "" {

			if err := r.SetQueryParam("qos.policy.name", qQosPolicyName); err != nil {
				return err
			}
		}
	}

	if o.QosPolicyUUIDQueryParameter != nil {

		// query param qos.policy.uuid
		var qrQosPolicyUUID string

		if o.QosPolicyUUIDQueryParameter != nil {
			qrQosPolicyUUID = *o.QosPolicyUUIDQueryParameter
		}
		qQosPolicyUUID := qrQosPolicyUUID
		if qQosPolicyUUID != "" {

			if err := r.SetQueryParam("qos.policy.uuid", qQosPolicyUUID); err != nil {
				return err
			}
		}
	}

	if o.QuotaStateQueryParameter != nil {

		// query param quota.state
		var qrQuotaState string

		if o.QuotaStateQueryParameter != nil {
			qrQuotaState = *o.QuotaStateQueryParameter
		}
		qQuotaState := qrQuotaState
		if qQuotaState != "" {

			if err := r.SetQueryParam("quota.state", qQuotaState); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecords != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecords != nil {
			qrReturnRecords = *o.ReturnRecords
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeout != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeout != nil {
			qrReturnTimeout = *o.ReturnTimeout
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.SizeQueryParameter != nil {

		// query param size
		var qrSize int64

		if o.SizeQueryParameter != nil {
			qrSize = *o.SizeQueryParameter
		}
		qSize := swag.FormatInt64(qrSize)
		if qSize != "" {

			if err := r.SetQueryParam("size", qSize); err != nil {
				return err
			}
		}
	}

	if o.SnaplockAppendModeEnabledQueryParameter != nil {

		// query param snaplock.append_mode_enabled
		var qrSnaplockAppendModeEnabled bool

		if o.SnaplockAppendModeEnabledQueryParameter != nil {
			qrSnaplockAppendModeEnabled = *o.SnaplockAppendModeEnabledQueryParameter
		}
		qSnaplockAppendModeEnabled := swag.FormatBool(qrSnaplockAppendModeEnabled)
		if qSnaplockAppendModeEnabled != "" {

			if err := r.SetQueryParam("snaplock.append_mode_enabled", qSnaplockAppendModeEnabled); err != nil {
				return err
			}
		}
	}

	if o.SnaplockAutocommitPeriodQueryParameter != nil {

		// query param snaplock.autocommit_period
		var qrSnaplockAutocommitPeriod string

		if o.SnaplockAutocommitPeriodQueryParameter != nil {
			qrSnaplockAutocommitPeriod = *o.SnaplockAutocommitPeriodQueryParameter
		}
		qSnaplockAutocommitPeriod := qrSnaplockAutocommitPeriod
		if qSnaplockAutocommitPeriod != "" {

			if err := r.SetQueryParam("snaplock.autocommit_period", qSnaplockAutocommitPeriod); err != nil {
				return err
			}
		}
	}

	if o.SnaplockComplianceClockTimeQueryParameter != nil {

		// query param snaplock.compliance_clock_time
		var qrSnaplockComplianceClockTime string

		if o.SnaplockComplianceClockTimeQueryParameter != nil {
			qrSnaplockComplianceClockTime = *o.SnaplockComplianceClockTimeQueryParameter
		}
		qSnaplockComplianceClockTime := qrSnaplockComplianceClockTime
		if qSnaplockComplianceClockTime != "" {

			if err := r.SetQueryParam("snaplock.compliance_clock_time", qSnaplockComplianceClockTime); err != nil {
				return err
			}
		}
	}

	if o.SnaplockExpiryTimeQueryParameter != nil {

		// query param snaplock.expiry_time
		var qrSnaplockExpiryTime string

		if o.SnaplockExpiryTimeQueryParameter != nil {
			qrSnaplockExpiryTime = *o.SnaplockExpiryTimeQueryParameter
		}
		qSnaplockExpiryTime := qrSnaplockExpiryTime
		if qSnaplockExpiryTime != "" {

			if err := r.SetQueryParam("snaplock.expiry_time", qSnaplockExpiryTime); err != nil {
				return err
			}
		}
	}

	if o.SnaplockIsAuditLogQueryParameter != nil {

		// query param snaplock.is_audit_log
		var qrSnaplockIsAuditLog bool

		if o.SnaplockIsAuditLogQueryParameter != nil {
			qrSnaplockIsAuditLog = *o.SnaplockIsAuditLogQueryParameter
		}
		qSnaplockIsAuditLog := swag.FormatBool(qrSnaplockIsAuditLog)
		if qSnaplockIsAuditLog != "" {

			if err := r.SetQueryParam("snaplock.is_audit_log", qSnaplockIsAuditLog); err != nil {
				return err
			}
		}
	}

	if o.SnaplockLitigationCountQueryParameter != nil {

		// query param snaplock.litigation_count
		var qrSnaplockLitigationCount int64

		if o.SnaplockLitigationCountQueryParameter != nil {
			qrSnaplockLitigationCount = *o.SnaplockLitigationCountQueryParameter
		}
		qSnaplockLitigationCount := swag.FormatInt64(qrSnaplockLitigationCount)
		if qSnaplockLitigationCount != "" {

			if err := r.SetQueryParam("snaplock.litigation_count", qSnaplockLitigationCount); err != nil {
				return err
			}
		}
	}

	if o.SnaplockPrivilegedDeleteQueryParameter != nil {

		// query param snaplock.privileged_delete
		var qrSnaplockPrivilegedDelete string

		if o.SnaplockPrivilegedDeleteQueryParameter != nil {
			qrSnaplockPrivilegedDelete = *o.SnaplockPrivilegedDeleteQueryParameter
		}
		qSnaplockPrivilegedDelete := qrSnaplockPrivilegedDelete
		if qSnaplockPrivilegedDelete != "" {

			if err := r.SetQueryParam("snaplock.privileged_delete", qSnaplockPrivilegedDelete); err != nil {
				return err
			}
		}
	}

	if o.SnaplockRetentionDefaultQueryParameter != nil {

		// query param snaplock.retention.default
		var qrSnaplockRetentionDefault string

		if o.SnaplockRetentionDefaultQueryParameter != nil {
			qrSnaplockRetentionDefault = *o.SnaplockRetentionDefaultQueryParameter
		}
		qSnaplockRetentionDefault := qrSnaplockRetentionDefault
		if qSnaplockRetentionDefault != "" {

			if err := r.SetQueryParam("snaplock.retention.default", qSnaplockRetentionDefault); err != nil {
				return err
			}
		}
	}

	if o.SnaplockRetentionMaximumQueryParameter != nil {

		// query param snaplock.retention.maximum
		var qrSnaplockRetentionMaximum string

		if o.SnaplockRetentionMaximumQueryParameter != nil {
			qrSnaplockRetentionMaximum = *o.SnaplockRetentionMaximumQueryParameter
		}
		qSnaplockRetentionMaximum := qrSnaplockRetentionMaximum
		if qSnaplockRetentionMaximum != "" {

			if err := r.SetQueryParam("snaplock.retention.maximum", qSnaplockRetentionMaximum); err != nil {
				return err
			}
		}
	}

	if o.SnaplockRetentionMinimumQueryParameter != nil {

		// query param snaplock.retention.minimum
		var qrSnaplockRetentionMinimum string

		if o.SnaplockRetentionMinimumQueryParameter != nil {
			qrSnaplockRetentionMinimum = *o.SnaplockRetentionMinimumQueryParameter
		}
		qSnaplockRetentionMinimum := qrSnaplockRetentionMinimum
		if qSnaplockRetentionMinimum != "" {

			if err := r.SetQueryParam("snaplock.retention.minimum", qSnaplockRetentionMinimum); err != nil {
				return err
			}
		}
	}

	if o.SnaplockTypeQueryParameter != nil {

		// query param snaplock.type
		var qrSnaplockType string

		if o.SnaplockTypeQueryParameter != nil {
			qrSnaplockType = *o.SnaplockTypeQueryParameter
		}
		qSnaplockType := qrSnaplockType
		if qSnaplockType != "" {

			if err := r.SetQueryParam("snaplock.type", qSnaplockType); err != nil {
				return err
			}
		}
	}

	if o.SnapmirrorIsProtectedQueryParameter != nil {

		// query param snapmirror.is_protected
		var qrSnapmirrorIsProtected bool

		if o.SnapmirrorIsProtectedQueryParameter != nil {
			qrSnapmirrorIsProtected = *o.SnapmirrorIsProtectedQueryParameter
		}
		qSnapmirrorIsProtected := swag.FormatBool(qrSnapmirrorIsProtected)
		if qSnapmirrorIsProtected != "" {

			if err := r.SetQueryParam("snapmirror.is_protected", qSnapmirrorIsProtected); err != nil {
				return err
			}
		}
	}

	if o.SnapshotPolicyNameQueryParameter != nil {

		// query param snapshot_policy.name
		var qrSnapshotPolicyName string

		if o.SnapshotPolicyNameQueryParameter != nil {
			qrSnapshotPolicyName = *o.SnapshotPolicyNameQueryParameter
		}
		qSnapshotPolicyName := qrSnapshotPolicyName
		if qSnapshotPolicyName != "" {

			if err := r.SetQueryParam("snapshot_policy.name", qSnapshotPolicyName); err != nil {
				return err
			}
		}
	}

	if o.SnapshotPolicyUUIDQueryParameter != nil {

		// query param snapshot_policy.uuid
		var qrSnapshotPolicyUUID string

		if o.SnapshotPolicyUUIDQueryParameter != nil {
			qrSnapshotPolicyUUID = *o.SnapshotPolicyUUIDQueryParameter
		}
		qSnapshotPolicyUUID := qrSnapshotPolicyUUID
		if qSnapshotPolicyUUID != "" {

			if err := r.SetQueryParam("snapshot_policy.uuid", qSnapshotPolicyUUID); err != nil {
				return err
			}
		}
	}

	if o.SpaceAvailableQueryParameter != nil {

		// query param space.available
		var qrSpaceAvailable int64

		if o.SpaceAvailableQueryParameter != nil {
			qrSpaceAvailable = *o.SpaceAvailableQueryParameter
		}
		qSpaceAvailable := swag.FormatInt64(qrSpaceAvailable)
		if qSpaceAvailable != "" {

			if err := r.SetQueryParam("space.available", qSpaceAvailable); err != nil {
				return err
			}
		}
	}

	if o.SpaceBlockStorageInactiveUserDataQueryParameter != nil {

		// query param space.block_storage_inactive_user_data
		var qrSpaceBlockStorageInactiveUserData int64

		if o.SpaceBlockStorageInactiveUserDataQueryParameter != nil {
			qrSpaceBlockStorageInactiveUserData = *o.SpaceBlockStorageInactiveUserDataQueryParameter
		}
		qSpaceBlockStorageInactiveUserData := swag.FormatInt64(qrSpaceBlockStorageInactiveUserData)
		if qSpaceBlockStorageInactiveUserData != "" {

			if err := r.SetQueryParam("space.block_storage_inactive_user_data", qSpaceBlockStorageInactiveUserData); err != nil {
				return err
			}
		}
	}

	if o.SpaceCapacityTierFootprintQueryParameter != nil {

		// query param space.capacity_tier_footprint
		var qrSpaceCapacityTierFootprint int64

		if o.SpaceCapacityTierFootprintQueryParameter != nil {
			qrSpaceCapacityTierFootprint = *o.SpaceCapacityTierFootprintQueryParameter
		}
		qSpaceCapacityTierFootprint := swag.FormatInt64(qrSpaceCapacityTierFootprint)
		if qSpaceCapacityTierFootprint != "" {

			if err := r.SetQueryParam("space.capacity_tier_footprint", qSpaceCapacityTierFootprint); err != nil {
				return err
			}
		}
	}

	if o.SpaceFootprintQueryParameter != nil {

		// query param space.footprint
		var qrSpaceFootprint int64

		if o.SpaceFootprintQueryParameter != nil {
			qrSpaceFootprint = *o.SpaceFootprintQueryParameter
		}
		qSpaceFootprint := swag.FormatInt64(qrSpaceFootprint)
		if qSpaceFootprint != "" {

			if err := r.SetQueryParam("space.footprint", qSpaceFootprint); err != nil {
				return err
			}
		}
	}

	if o.SpaceLogicalSpaceAvailableQueryParameter != nil {

		// query param space.logical_space.available
		var qrSpaceLogicalSpaceAvailable int64

		if o.SpaceLogicalSpaceAvailableQueryParameter != nil {
			qrSpaceLogicalSpaceAvailable = *o.SpaceLogicalSpaceAvailableQueryParameter
		}
		qSpaceLogicalSpaceAvailable := swag.FormatInt64(qrSpaceLogicalSpaceAvailable)
		if qSpaceLogicalSpaceAvailable != "" {

			if err := r.SetQueryParam("space.logical_space.available", qSpaceLogicalSpaceAvailable); err != nil {
				return err
			}
		}
	}

	if o.SpaceLogicalSpaceEnforcementQueryParameter != nil {

		// query param space.logical_space.enforcement
		var qrSpaceLogicalSpaceEnforcement bool

		if o.SpaceLogicalSpaceEnforcementQueryParameter != nil {
			qrSpaceLogicalSpaceEnforcement = *o.SpaceLogicalSpaceEnforcementQueryParameter
		}
		qSpaceLogicalSpaceEnforcement := swag.FormatBool(qrSpaceLogicalSpaceEnforcement)
		if qSpaceLogicalSpaceEnforcement != "" {

			if err := r.SetQueryParam("space.logical_space.enforcement", qSpaceLogicalSpaceEnforcement); err != nil {
				return err
			}
		}
	}

	if o.SpaceLogicalSpaceReportingQueryParameter != nil {

		// query param space.logical_space.reporting
		var qrSpaceLogicalSpaceReporting bool

		if o.SpaceLogicalSpaceReportingQueryParameter != nil {
			qrSpaceLogicalSpaceReporting = *o.SpaceLogicalSpaceReportingQueryParameter
		}
		qSpaceLogicalSpaceReporting := swag.FormatBool(qrSpaceLogicalSpaceReporting)
		if qSpaceLogicalSpaceReporting != "" {

			if err := r.SetQueryParam("space.logical_space.reporting", qSpaceLogicalSpaceReporting); err != nil {
				return err
			}
		}
	}

	if o.SpaceLogicalSpaceUsedByAfsQueryParameter != nil {

		// query param space.logical_space.used_by_afs
		var qrSpaceLogicalSpaceUsedByAfs int64

		if o.SpaceLogicalSpaceUsedByAfsQueryParameter != nil {
			qrSpaceLogicalSpaceUsedByAfs = *o.SpaceLogicalSpaceUsedByAfsQueryParameter
		}
		qSpaceLogicalSpaceUsedByAfs := swag.FormatInt64(qrSpaceLogicalSpaceUsedByAfs)
		if qSpaceLogicalSpaceUsedByAfs != "" {

			if err := r.SetQueryParam("space.logical_space.used_by_afs", qSpaceLogicalSpaceUsedByAfs); err != nil {
				return err
			}
		}
	}

	if o.SpaceMetadataQueryParameter != nil {

		// query param space.metadata
		var qrSpaceMetadata int64

		if o.SpaceMetadataQueryParameter != nil {
			qrSpaceMetadata = *o.SpaceMetadataQueryParameter
		}
		qSpaceMetadata := swag.FormatInt64(qrSpaceMetadata)
		if qSpaceMetadata != "" {

			if err := r.SetQueryParam("space.metadata", qSpaceMetadata); err != nil {
				return err
			}
		}
	}

	if o.SpaceOverProvisionedQueryParameter != nil {

		// query param space.over_provisioned
		var qrSpaceOverProvisioned int64

		if o.SpaceOverProvisionedQueryParameter != nil {
			qrSpaceOverProvisioned = *o.SpaceOverProvisionedQueryParameter
		}
		qSpaceOverProvisioned := swag.FormatInt64(qrSpaceOverProvisioned)
		if qSpaceOverProvisioned != "" {

			if err := r.SetQueryParam("space.over_provisioned", qSpaceOverProvisioned); err != nil {
				return err
			}
		}
	}

	if o.SpaceSizeQueryParameter != nil {

		// query param space.size
		var qrSpaceSize int64

		if o.SpaceSizeQueryParameter != nil {
			qrSpaceSize = *o.SpaceSizeQueryParameter
		}
		qSpaceSize := swag.FormatInt64(qrSpaceSize)
		if qSpaceSize != "" {

			if err := r.SetQueryParam("space.size", qSpaceSize); err != nil {
				return err
			}
		}
	}

	if o.SpaceSnapshotReservePercentQueryParameter != nil {

		// query param space.snapshot.reserve_percent
		var qrSpaceSnapshotReservePercent int64

		if o.SpaceSnapshotReservePercentQueryParameter != nil {
			qrSpaceSnapshotReservePercent = *o.SpaceSnapshotReservePercentQueryParameter
		}
		qSpaceSnapshotReservePercent := swag.FormatInt64(qrSpaceSnapshotReservePercent)
		if qSpaceSnapshotReservePercent != "" {

			if err := r.SetQueryParam("space.snapshot.reserve_percent", qSpaceSnapshotReservePercent); err != nil {
				return err
			}
		}
	}

	if o.SpaceSnapshotUsedQueryParameter != nil {

		// query param space.snapshot.used
		var qrSpaceSnapshotUsed int64

		if o.SpaceSnapshotUsedQueryParameter != nil {
			qrSpaceSnapshotUsed = *o.SpaceSnapshotUsedQueryParameter
		}
		qSpaceSnapshotUsed := swag.FormatInt64(qrSpaceSnapshotUsed)
		if qSpaceSnapshotUsed != "" {

			if err := r.SetQueryParam("space.snapshot.used", qSpaceSnapshotUsed); err != nil {
				return err
			}
		}
	}

	if o.SpaceUsedQueryParameter != nil {

		// query param space.used
		var qrSpaceUsed int64

		if o.SpaceUsedQueryParameter != nil {
			qrSpaceUsed = *o.SpaceUsedQueryParameter
		}
		qSpaceUsed := swag.FormatInt64(qrSpaceUsed)
		if qSpaceUsed != "" {

			if err := r.SetQueryParam("space.used", qSpaceUsed); err != nil {
				return err
			}
		}
	}

	if o.StateQueryParameter != nil {

		// query param state
		var qrState string

		if o.StateQueryParameter != nil {
			qrState = *o.StateQueryParameter
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if o.StatisticsCloudIopsRawOtherQueryParameter != nil {

		// query param statistics.cloud.iops_raw.other
		var qrStatisticsCloudIopsRawOther int64

		if o.StatisticsCloudIopsRawOtherQueryParameter != nil {
			qrStatisticsCloudIopsRawOther = *o.StatisticsCloudIopsRawOtherQueryParameter
		}
		qStatisticsCloudIopsRawOther := swag.FormatInt64(qrStatisticsCloudIopsRawOther)
		if qStatisticsCloudIopsRawOther != "" {

			if err := r.SetQueryParam("statistics.cloud.iops_raw.other", qStatisticsCloudIopsRawOther); err != nil {
				return err
			}
		}
	}

	if o.StatisticsCloudIopsRawReadQueryParameter != nil {

		// query param statistics.cloud.iops_raw.read
		var qrStatisticsCloudIopsRawRead int64

		if o.StatisticsCloudIopsRawReadQueryParameter != nil {
			qrStatisticsCloudIopsRawRead = *o.StatisticsCloudIopsRawReadQueryParameter
		}
		qStatisticsCloudIopsRawRead := swag.FormatInt64(qrStatisticsCloudIopsRawRead)
		if qStatisticsCloudIopsRawRead != "" {

			if err := r.SetQueryParam("statistics.cloud.iops_raw.read", qStatisticsCloudIopsRawRead); err != nil {
				return err
			}
		}
	}

	if o.StatisticsCloudIopsRawTotalQueryParameter != nil {

		// query param statistics.cloud.iops_raw.total
		var qrStatisticsCloudIopsRawTotal int64

		if o.StatisticsCloudIopsRawTotalQueryParameter != nil {
			qrStatisticsCloudIopsRawTotal = *o.StatisticsCloudIopsRawTotalQueryParameter
		}
		qStatisticsCloudIopsRawTotal := swag.FormatInt64(qrStatisticsCloudIopsRawTotal)
		if qStatisticsCloudIopsRawTotal != "" {

			if err := r.SetQueryParam("statistics.cloud.iops_raw.total", qStatisticsCloudIopsRawTotal); err != nil {
				return err
			}
		}
	}

	if o.StatisticsCloudIopsRawWriteQueryParameter != nil {

		// query param statistics.cloud.iops_raw.write
		var qrStatisticsCloudIopsRawWrite int64

		if o.StatisticsCloudIopsRawWriteQueryParameter != nil {
			qrStatisticsCloudIopsRawWrite = *o.StatisticsCloudIopsRawWriteQueryParameter
		}
		qStatisticsCloudIopsRawWrite := swag.FormatInt64(qrStatisticsCloudIopsRawWrite)
		if qStatisticsCloudIopsRawWrite != "" {

			if err := r.SetQueryParam("statistics.cloud.iops_raw.write", qStatisticsCloudIopsRawWrite); err != nil {
				return err
			}
		}
	}

	if o.StatisticsCloudLatencyRawOtherQueryParameter != nil {

		// query param statistics.cloud.latency_raw.other
		var qrStatisticsCloudLatencyRawOther int64

		if o.StatisticsCloudLatencyRawOtherQueryParameter != nil {
			qrStatisticsCloudLatencyRawOther = *o.StatisticsCloudLatencyRawOtherQueryParameter
		}
		qStatisticsCloudLatencyRawOther := swag.FormatInt64(qrStatisticsCloudLatencyRawOther)
		if qStatisticsCloudLatencyRawOther != "" {

			if err := r.SetQueryParam("statistics.cloud.latency_raw.other", qStatisticsCloudLatencyRawOther); err != nil {
				return err
			}
		}
	}

	if o.StatisticsCloudLatencyRawReadQueryParameter != nil {

		// query param statistics.cloud.latency_raw.read
		var qrStatisticsCloudLatencyRawRead int64

		if o.StatisticsCloudLatencyRawReadQueryParameter != nil {
			qrStatisticsCloudLatencyRawRead = *o.StatisticsCloudLatencyRawReadQueryParameter
		}
		qStatisticsCloudLatencyRawRead := swag.FormatInt64(qrStatisticsCloudLatencyRawRead)
		if qStatisticsCloudLatencyRawRead != "" {

			if err := r.SetQueryParam("statistics.cloud.latency_raw.read", qStatisticsCloudLatencyRawRead); err != nil {
				return err
			}
		}
	}

	if o.StatisticsCloudLatencyRawTotalQueryParameter != nil {

		// query param statistics.cloud.latency_raw.total
		var qrStatisticsCloudLatencyRawTotal int64

		if o.StatisticsCloudLatencyRawTotalQueryParameter != nil {
			qrStatisticsCloudLatencyRawTotal = *o.StatisticsCloudLatencyRawTotalQueryParameter
		}
		qStatisticsCloudLatencyRawTotal := swag.FormatInt64(qrStatisticsCloudLatencyRawTotal)
		if qStatisticsCloudLatencyRawTotal != "" {

			if err := r.SetQueryParam("statistics.cloud.latency_raw.total", qStatisticsCloudLatencyRawTotal); err != nil {
				return err
			}
		}
	}

	if o.StatisticsCloudLatencyRawWriteQueryParameter != nil {

		// query param statistics.cloud.latency_raw.write
		var qrStatisticsCloudLatencyRawWrite int64

		if o.StatisticsCloudLatencyRawWriteQueryParameter != nil {
			qrStatisticsCloudLatencyRawWrite = *o.StatisticsCloudLatencyRawWriteQueryParameter
		}
		qStatisticsCloudLatencyRawWrite := swag.FormatInt64(qrStatisticsCloudLatencyRawWrite)
		if qStatisticsCloudLatencyRawWrite != "" {

			if err := r.SetQueryParam("statistics.cloud.latency_raw.write", qStatisticsCloudLatencyRawWrite); err != nil {
				return err
			}
		}
	}

	if o.StatisticsCloudStatusQueryParameter != nil {

		// query param statistics.cloud.status
		var qrStatisticsCloudStatus string

		if o.StatisticsCloudStatusQueryParameter != nil {
			qrStatisticsCloudStatus = *o.StatisticsCloudStatusQueryParameter
		}
		qStatisticsCloudStatus := qrStatisticsCloudStatus
		if qStatisticsCloudStatus != "" {

			if err := r.SetQueryParam("statistics.cloud.status", qStatisticsCloudStatus); err != nil {
				return err
			}
		}
	}

	if o.StatisticsCloudTimestampQueryParameter != nil {

		// query param statistics.cloud.timestamp
		var qrStatisticsCloudTimestamp string

		if o.StatisticsCloudTimestampQueryParameter != nil {
			qrStatisticsCloudTimestamp = *o.StatisticsCloudTimestampQueryParameter
		}
		qStatisticsCloudTimestamp := qrStatisticsCloudTimestamp
		if qStatisticsCloudTimestamp != "" {

			if err := r.SetQueryParam("statistics.cloud.timestamp", qStatisticsCloudTimestamp); err != nil {
				return err
			}
		}
	}

	if o.StatisticsIopsRawOtherQueryParameter != nil {

		// query param statistics.iops_raw.other
		var qrStatisticsIopsRawOther int64

		if o.StatisticsIopsRawOtherQueryParameter != nil {
			qrStatisticsIopsRawOther = *o.StatisticsIopsRawOtherQueryParameter
		}
		qStatisticsIopsRawOther := swag.FormatInt64(qrStatisticsIopsRawOther)
		if qStatisticsIopsRawOther != "" {

			if err := r.SetQueryParam("statistics.iops_raw.other", qStatisticsIopsRawOther); err != nil {
				return err
			}
		}
	}

	if o.StatisticsIopsRawReadQueryParameter != nil {

		// query param statistics.iops_raw.read
		var qrStatisticsIopsRawRead int64

		if o.StatisticsIopsRawReadQueryParameter != nil {
			qrStatisticsIopsRawRead = *o.StatisticsIopsRawReadQueryParameter
		}
		qStatisticsIopsRawRead := swag.FormatInt64(qrStatisticsIopsRawRead)
		if qStatisticsIopsRawRead != "" {

			if err := r.SetQueryParam("statistics.iops_raw.read", qStatisticsIopsRawRead); err != nil {
				return err
			}
		}
	}

	if o.StatisticsIopsRawTotalQueryParameter != nil {

		// query param statistics.iops_raw.total
		var qrStatisticsIopsRawTotal int64

		if o.StatisticsIopsRawTotalQueryParameter != nil {
			qrStatisticsIopsRawTotal = *o.StatisticsIopsRawTotalQueryParameter
		}
		qStatisticsIopsRawTotal := swag.FormatInt64(qrStatisticsIopsRawTotal)
		if qStatisticsIopsRawTotal != "" {

			if err := r.SetQueryParam("statistics.iops_raw.total", qStatisticsIopsRawTotal); err != nil {
				return err
			}
		}
	}

	if o.StatisticsIopsRawWriteQueryParameter != nil {

		// query param statistics.iops_raw.write
		var qrStatisticsIopsRawWrite int64

		if o.StatisticsIopsRawWriteQueryParameter != nil {
			qrStatisticsIopsRawWrite = *o.StatisticsIopsRawWriteQueryParameter
		}
		qStatisticsIopsRawWrite := swag.FormatInt64(qrStatisticsIopsRawWrite)
		if qStatisticsIopsRawWrite != "" {

			if err := r.SetQueryParam("statistics.iops_raw.write", qStatisticsIopsRawWrite); err != nil {
				return err
			}
		}
	}

	if o.StatisticsLatencyRawOtherQueryParameter != nil {

		// query param statistics.latency_raw.other
		var qrStatisticsLatencyRawOther int64

		if o.StatisticsLatencyRawOtherQueryParameter != nil {
			qrStatisticsLatencyRawOther = *o.StatisticsLatencyRawOtherQueryParameter
		}
		qStatisticsLatencyRawOther := swag.FormatInt64(qrStatisticsLatencyRawOther)
		if qStatisticsLatencyRawOther != "" {

			if err := r.SetQueryParam("statistics.latency_raw.other", qStatisticsLatencyRawOther); err != nil {
				return err
			}
		}
	}

	if o.StatisticsLatencyRawReadQueryParameter != nil {

		// query param statistics.latency_raw.read
		var qrStatisticsLatencyRawRead int64

		if o.StatisticsLatencyRawReadQueryParameter != nil {
			qrStatisticsLatencyRawRead = *o.StatisticsLatencyRawReadQueryParameter
		}
		qStatisticsLatencyRawRead := swag.FormatInt64(qrStatisticsLatencyRawRead)
		if qStatisticsLatencyRawRead != "" {

			if err := r.SetQueryParam("statistics.latency_raw.read", qStatisticsLatencyRawRead); err != nil {
				return err
			}
		}
	}

	if o.StatisticsLatencyRawTotalQueryParameter != nil {

		// query param statistics.latency_raw.total
		var qrStatisticsLatencyRawTotal int64

		if o.StatisticsLatencyRawTotalQueryParameter != nil {
			qrStatisticsLatencyRawTotal = *o.StatisticsLatencyRawTotalQueryParameter
		}
		qStatisticsLatencyRawTotal := swag.FormatInt64(qrStatisticsLatencyRawTotal)
		if qStatisticsLatencyRawTotal != "" {

			if err := r.SetQueryParam("statistics.latency_raw.total", qStatisticsLatencyRawTotal); err != nil {
				return err
			}
		}
	}

	if o.StatisticsLatencyRawWriteQueryParameter != nil {

		// query param statistics.latency_raw.write
		var qrStatisticsLatencyRawWrite int64

		if o.StatisticsLatencyRawWriteQueryParameter != nil {
			qrStatisticsLatencyRawWrite = *o.StatisticsLatencyRawWriteQueryParameter
		}
		qStatisticsLatencyRawWrite := swag.FormatInt64(qrStatisticsLatencyRawWrite)
		if qStatisticsLatencyRawWrite != "" {

			if err := r.SetQueryParam("statistics.latency_raw.write", qStatisticsLatencyRawWrite); err != nil {
				return err
			}
		}
	}

	if o.StatisticsStatusQueryParameter != nil {

		// query param statistics.status
		var qrStatisticsStatus string

		if o.StatisticsStatusQueryParameter != nil {
			qrStatisticsStatus = *o.StatisticsStatusQueryParameter
		}
		qStatisticsStatus := qrStatisticsStatus
		if qStatisticsStatus != "" {

			if err := r.SetQueryParam("statistics.status", qStatisticsStatus); err != nil {
				return err
			}
		}
	}

	if o.StatisticsThroughputRawOtherQueryParameter != nil {

		// query param statistics.throughput_raw.other
		var qrStatisticsThroughputRawOther int64

		if o.StatisticsThroughputRawOtherQueryParameter != nil {
			qrStatisticsThroughputRawOther = *o.StatisticsThroughputRawOtherQueryParameter
		}
		qStatisticsThroughputRawOther := swag.FormatInt64(qrStatisticsThroughputRawOther)
		if qStatisticsThroughputRawOther != "" {

			if err := r.SetQueryParam("statistics.throughput_raw.other", qStatisticsThroughputRawOther); err != nil {
				return err
			}
		}
	}

	if o.StatisticsThroughputRawReadQueryParameter != nil {

		// query param statistics.throughput_raw.read
		var qrStatisticsThroughputRawRead int64

		if o.StatisticsThroughputRawReadQueryParameter != nil {
			qrStatisticsThroughputRawRead = *o.StatisticsThroughputRawReadQueryParameter
		}
		qStatisticsThroughputRawRead := swag.FormatInt64(qrStatisticsThroughputRawRead)
		if qStatisticsThroughputRawRead != "" {

			if err := r.SetQueryParam("statistics.throughput_raw.read", qStatisticsThroughputRawRead); err != nil {
				return err
			}
		}
	}

	if o.StatisticsThroughputRawTotalQueryParameter != nil {

		// query param statistics.throughput_raw.total
		var qrStatisticsThroughputRawTotal int64

		if o.StatisticsThroughputRawTotalQueryParameter != nil {
			qrStatisticsThroughputRawTotal = *o.StatisticsThroughputRawTotalQueryParameter
		}
		qStatisticsThroughputRawTotal := swag.FormatInt64(qrStatisticsThroughputRawTotal)
		if qStatisticsThroughputRawTotal != "" {

			if err := r.SetQueryParam("statistics.throughput_raw.total", qStatisticsThroughputRawTotal); err != nil {
				return err
			}
		}
	}

	if o.StatisticsThroughputRawWriteQueryParameter != nil {

		// query param statistics.throughput_raw.write
		var qrStatisticsThroughputRawWrite int64

		if o.StatisticsThroughputRawWriteQueryParameter != nil {
			qrStatisticsThroughputRawWrite = *o.StatisticsThroughputRawWriteQueryParameter
		}
		qStatisticsThroughputRawWrite := swag.FormatInt64(qrStatisticsThroughputRawWrite)
		if qStatisticsThroughputRawWrite != "" {

			if err := r.SetQueryParam("statistics.throughput_raw.write", qStatisticsThroughputRawWrite); err != nil {
				return err
			}
		}
	}

	if o.StatisticsTimestampQueryParameter != nil {

		// query param statistics.timestamp
		var qrStatisticsTimestamp string

		if o.StatisticsTimestampQueryParameter != nil {
			qrStatisticsTimestamp = *o.StatisticsTimestampQueryParameter
		}
		qStatisticsTimestamp := qrStatisticsTimestamp
		if qStatisticsTimestamp != "" {

			if err := r.SetQueryParam("statistics.timestamp", qStatisticsTimestamp); err != nil {
				return err
			}
		}
	}

	if o.StyleQueryParameter != nil {

		// query param style
		var qrStyle string

		if o.StyleQueryParameter != nil {
			qrStyle = *o.StyleQueryParameter
		}
		qStyle := qrStyle
		if qStyle != "" {

			if err := r.SetQueryParam("style", qStyle); err != nil {
				return err
			}
		}
	}

	if o.SVMNameQueryParameter != nil {

		// query param svm.name
		var qrSvmName string

		if o.SVMNameQueryParameter != nil {
			qrSvmName = *o.SVMNameQueryParameter
		}
		qSvmName := qrSvmName
		if qSvmName != "" {

			if err := r.SetQueryParam("svm.name", qSvmName); err != nil {
				return err
			}
		}
	}

	if o.SVMUUIDQueryParameter != nil {

		// query param svm.uuid
		var qrSvmUUID string

		if o.SVMUUIDQueryParameter != nil {
			qrSvmUUID = *o.SVMUUIDQueryParameter
		}
		qSvmUUID := qrSvmUUID
		if qSvmUUID != "" {

			if err := r.SetQueryParam("svm.uuid", qSvmUUID); err != nil {
				return err
			}
		}
	}

	if o.TieringPolicyQueryParameter != nil {

		// query param tiering.policy
		var qrTieringPolicy string

		if o.TieringPolicyQueryParameter != nil {
			qrTieringPolicy = *o.TieringPolicyQueryParameter
		}
		qTieringPolicy := qrTieringPolicy
		if qTieringPolicy != "" {

			if err := r.SetQueryParam("tiering.policy", qTieringPolicy); err != nil {
				return err
			}
		}
	}

	if o.TypeQueryParameter != nil {

		// query param type
		var qrType string

		if o.TypeQueryParameter != nil {
			qrType = *o.TypeQueryParameter
		}
		qType := qrType
		if qType != "" {

			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}
	}

	if o.UUIDQueryParameter != nil {

		// query param uuid
		var qrUUID string

		if o.UUIDQueryParameter != nil {
			qrUUID = *o.UUIDQueryParameter
		}
		qUUID := qrUUID
		if qUUID != "" {

			if err := r.SetQueryParam("uuid", qUUID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamVolumeCollectionGet binds the parameter fields
func (o *VolumeCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamVolumeCollectionGet binds the parameter order_by
func (o *VolumeCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderBy

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
