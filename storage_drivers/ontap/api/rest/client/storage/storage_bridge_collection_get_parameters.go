// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewStorageBridgeCollectionGetParams creates a new StorageBridgeCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewStorageBridgeCollectionGetParams() *StorageBridgeCollectionGetParams {
	return &StorageBridgeCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewStorageBridgeCollectionGetParamsWithTimeout creates a new StorageBridgeCollectionGetParams object
// with the ability to set a timeout on a request.
func NewStorageBridgeCollectionGetParamsWithTimeout(timeout time.Duration) *StorageBridgeCollectionGetParams {
	return &StorageBridgeCollectionGetParams{
		timeout: timeout,
	}
}

// NewStorageBridgeCollectionGetParamsWithContext creates a new StorageBridgeCollectionGetParams object
// with the ability to set a context for a request.
func NewStorageBridgeCollectionGetParamsWithContext(ctx context.Context) *StorageBridgeCollectionGetParams {
	return &StorageBridgeCollectionGetParams{
		Context: ctx,
	}
}

// NewStorageBridgeCollectionGetParamsWithHTTPClient creates a new StorageBridgeCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewStorageBridgeCollectionGetParamsWithHTTPClient(client *http.Client) *StorageBridgeCollectionGetParams {
	return &StorageBridgeCollectionGetParams{
		HTTPClient: client,
	}
}

/* StorageBridgeCollectionGetParams contains all the parameters to send to the API endpoint
   for the storage bridge collection get operation.

   Typically these are written to a http.Request.
*/
type StorageBridgeCollectionGetParams struct {

	/* ChassisThroughputState.

	   Filter by chassis_throughput_state
	*/
	ChassisThroughputStateQueryParameter *string

	/* DramSingleBitErrorCount.

	   Filter by dram_single_bit_error_count
	*/
	DramSingleBitErrorCountQueryParameter *int64

	/* ErrorsComponentID.

	   Filter by errors.component.id
	*/
	ErrorsComponentIDQueryParameter *int64

	/* ErrorsComponentName.

	   Filter by errors.component.name
	*/
	ErrorsComponentNameQueryParameter *string

	/* ErrorsComponentUniqueID.

	   Filter by errors.component.unique_id
	*/
	ErrorsComponentUniqueIDQueryParameter *string

	/* ErrorsReasonArgumentsCode.

	   Filter by errors.reason.arguments.code
	*/
	ErrorsReasonArgumentsCodeQueryParameter *string

	/* ErrorsReasonArgumentsMessage.

	   Filter by errors.reason.arguments.message
	*/
	ErrorsReasonArgumentsMessageQueryParameter *string

	/* ErrorsReasonCode.

	   Filter by errors.reason.code
	*/
	ErrorsReasonCodeQueryParameter *string

	/* ErrorsReasonMessage.

	   Filter by errors.reason.message
	*/
	ErrorsReasonMessageQueryParameter *string

	/* ErrorsReasonTarget.

	   Filter by errors.reason.target
	*/
	ErrorsReasonTargetQueryParameter *string

	/* ErrorsSeverity.

	   Filter by errors.severity
	*/
	ErrorsSeverityQueryParameter *string

	/* ErrorsType.

	   Filter by errors.type
	*/
	ErrorsTypeQueryParameter *string

	/* FcPortsConfiguredDataRate.

	   Filter by fc_ports.configured_data_rate
	*/
	FcPortsConfiguredDataRateQueryParameter *float64

	/* FcPortsConnectionMode.

	   Filter by fc_ports.connection_mode
	*/
	FcPortsConnectionModeQueryParameter *string

	/* FcPortsDataRateCapability.

	   Filter by fc_ports.data_rate_capability
	*/
	FcPortsDataRateCapabilityQueryParameter *float64

	/* FcPortsEnabled.

	   Filter by fc_ports.enabled
	*/
	FcPortsEnabledQueryParameter *bool

	/* FcPortsID.

	   Filter by fc_ports.id
	*/
	FcPortsIDQueryParameter *int64

	/* FcPortsNegotiatedDataRate.

	   Filter by fc_ports.negotiated_data_rate
	*/
	FcPortsNegotiatedDataRateQueryParameter *float64

	/* FcPortsPeerWwn.

	   Filter by fc_ports.peer_wwn
	*/
	FcPortsPeerWwnQueryParameter *string

	/* FcPortsSfpDataRateCapability.

	   Filter by fc_ports.sfp.data_rate_capability
	*/
	FcPortsSfpDataRateCapabilityQueryParameter *float64

	/* FcPortsSfpPartNumber.

	   Filter by fc_ports.sfp.part_number
	*/
	FcPortsSfpPartNumberQueryParameter *string

	/* FcPortsSfpSerialNumber.

	   Filter by fc_ports.sfp.serial_number
	*/
	FcPortsSfpSerialNumberQueryParameter *string

	/* FcPortsSfpVendor.

	   Filter by fc_ports.sfp.vendor
	*/
	FcPortsSfpVendorQueryParameter *string

	/* FcPortsState.

	   Filter by fc_ports.state
	*/
	FcPortsStateQueryParameter *string

	/* FcPortsWwn.

	   Filter by fc_ports.wwn
	*/
	FcPortsWwnQueryParameter *string

	/* Fields.

	   Specify the fields to return.
	*/
	FieldsQueryParameter []string

	/* FirmwareVersion.

	   Filter by firmware_version
	*/
	FirmwareVersionQueryParameter *string

	/* IPAddress.

	   Filter by ip_address
	*/
	IPAddressQueryParameter *string

	/* LastRebootReasonArgumentsCode.

	   Filter by last_reboot.reason.arguments.code
	*/
	LastRebootReasonArgumentsCodeQueryParameter *string

	/* LastRebootReasonArgumentsMessage.

	   Filter by last_reboot.reason.arguments.message
	*/
	LastRebootReasonArgumentsMessageQueryParameter *string

	/* LastRebootReasonCode.

	   Filter by last_reboot.reason.code
	*/
	LastRebootReasonCodeQueryParameter *string

	/* LastRebootReasonMessage.

	   Filter by last_reboot.reason.message
	*/
	LastRebootReasonMessageQueryParameter *string

	/* LastRebootReasonTarget.

	   Filter by last_reboot.reason.target
	*/
	LastRebootReasonTargetQueryParameter *string

	/* LastRebootTime.

	   Filter by last_reboot.time
	*/
	LastRebootTimeQueryParameter *string

	/* ManagedBy.

	   Filter by managed_by
	*/
	ManagedByQueryParameter *string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecordsQueryParameter *int64

	/* Model.

	   Filter by model
	*/
	ModelQueryParameter *string

	/* MonitoringEnabled.

	   Filter by monitoring_enabled
	*/
	MonitoringEnabledQueryParameter *bool

	/* Name.

	   Filter by name
	*/
	NameQueryParameter *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderByQueryParameter []string

	/* PathsName.

	   Filter by paths.name
	*/
	PathsNameQueryParameter *string

	/* PathsNodeName.

	   Filter by paths.node.name
	*/
	PathsNodeNameQueryParameter *string

	/* PathsNodeUUID.

	   Filter by paths.node.uuid
	*/
	PathsNodeUUIDQueryParameter *string

	/* PathsSourcePortID.

	   Filter by paths.source_port.id
	*/
	PathsSourcePortIDQueryParameter *string

	/* PathsSourcePortName.

	   Filter by paths.source_port.name
	*/
	PathsSourcePortNameQueryParameter *string

	/* PathsTargetPortID.

	   Filter by paths.target_port.id
	*/
	PathsTargetPortIDQueryParameter *string

	/* PathsTargetPortName.

	   Filter by paths.target_port.name
	*/
	PathsTargetPortNameQueryParameter *string

	/* PathsTargetPortWwn.

	   Filter by paths.target_port.wwn
	*/
	PathsTargetPortWwnQueryParameter *string

	/* PowerSupplyUnitsName.

	   Filter by power_supply_units.name
	*/
	PowerSupplyUnitsNameQueryParameter *string

	/* PowerSupplyUnitsState.

	   Filter by power_supply_units.state
	*/
	PowerSupplyUnitsStateQueryParameter *string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecordsQueryParameter *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeoutQueryParameter *int64

	/* SasPortsCablePartNumber.

	   Filter by sas_ports.cable.part_number
	*/
	SasPortsCablePartNumberQueryParameter *string

	/* SasPortsCableSerialNumber.

	   Filter by sas_ports.cable.serial_number
	*/
	SasPortsCableSerialNumberQueryParameter *string

	/* SasPortsCableTechnology.

	   Filter by sas_ports.cable.technology
	*/
	SasPortsCableTechnologyQueryParameter *string

	/* SasPortsCableVendor.

	   Filter by sas_ports.cable.vendor
	*/
	SasPortsCableVendorQueryParameter *string

	/* SasPortsDataRateCapability.

	   Filter by sas_ports.data_rate_capability
	*/
	SasPortsDataRateCapabilityQueryParameter *float64

	/* SasPortsEnabled.

	   Filter by sas_ports.enabled
	*/
	SasPortsEnabledQueryParameter *bool

	/* SasPortsID.

	   Filter by sas_ports.id
	*/
	SasPortsIDQueryParameter *int64

	/* SasPortsNegotiatedDataRate.

	   Filter by sas_ports.negotiated_data_rate
	*/
	SasPortsNegotiatedDataRateQueryParameter *float64

	/* SasPortsPhy1State.

	   Filter by sas_ports.phy_1.state
	*/
	SasPortsPhy1StateQueryParameter *string

	/* SasPortsPhy2State.

	   Filter by sas_ports.phy_2.state
	*/
	SasPortsPhy2StateQueryParameter *string

	/* SasPortsPhy3State.

	   Filter by sas_ports.phy_3.state
	*/
	SasPortsPhy3StateQueryParameter *string

	/* SasPortsPhy4State.

	   Filter by sas_ports.phy_4.state
	*/
	SasPortsPhy4StateQueryParameter *string

	/* SasPortsState.

	   Filter by sas_ports.state
	*/
	SasPortsStateQueryParameter *string

	/* SasPortsWwn.

	   Filter by sas_ports.wwn
	*/
	SasPortsWwnQueryParameter *string

	/* SecurityEnabled.

	   Filter by security_enabled
	*/
	SecurityEnabledQueryParameter *bool

	/* SerialNumber.

	   Filter by serial_number
	*/
	SerialNumberQueryParameter *string

	/* State.

	   Filter by state
	*/
	StateQueryParameter *string

	/* SymbolicName.

	   Filter by symbolic_name
	*/
	SymbolicNameQueryParameter *string

	/* TemperatureSensorMaximum.

	   Filter by temperature_sensor.maximum
	*/
	TemperatureSensorMaximumQueryParameter *int64

	/* TemperatureSensorMinimum.

	   Filter by temperature_sensor.minimum
	*/
	TemperatureSensorMinimumQueryParameter *int64

	/* TemperatureSensorName.

	   Filter by temperature_sensor.name
	*/
	TemperatureSensorNameQueryParameter *string

	/* TemperatureSensorReading.

	   Filter by temperature_sensor.reading
	*/
	TemperatureSensorReadingQueryParameter *int64

	/* TemperatureSensorState.

	   Filter by temperature_sensor.state
	*/
	TemperatureSensorStateQueryParameter *string

	/* Vendor.

	   Filter by vendor
	*/
	VendorQueryParameter *string

	/* Wwn.

	   Filter by wwn
	*/
	WwnQueryParameter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the storage bridge collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *StorageBridgeCollectionGetParams) WithDefaults() *StorageBridgeCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the storage bridge collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *StorageBridgeCollectionGetParams) SetDefaults() {
	var (
		returnRecordsQueryParameterDefault = bool(true)

		returnTimeoutQueryParameterDefault = int64(15)
	)

	val := StorageBridgeCollectionGetParams{
		ReturnRecordsQueryParameter: &returnRecordsQueryParameterDefault,
		ReturnTimeoutQueryParameter: &returnTimeoutQueryParameterDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithTimeout(timeout time.Duration) *StorageBridgeCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithContext(ctx context.Context) *StorageBridgeCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithHTTPClient(client *http.Client) *StorageBridgeCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithChassisThroughputStateQueryParameter adds the chassisThroughputState to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithChassisThroughputStateQueryParameter(chassisThroughputState *string) *StorageBridgeCollectionGetParams {
	o.SetChassisThroughputStateQueryParameter(chassisThroughputState)
	return o
}

// SetChassisThroughputStateQueryParameter adds the chassisThroughputState to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetChassisThroughputStateQueryParameter(chassisThroughputState *string) {
	o.ChassisThroughputStateQueryParameter = chassisThroughputState
}

// WithDramSingleBitErrorCountQueryParameter adds the dramSingleBitErrorCount to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithDramSingleBitErrorCountQueryParameter(dramSingleBitErrorCount *int64) *StorageBridgeCollectionGetParams {
	o.SetDramSingleBitErrorCountQueryParameter(dramSingleBitErrorCount)
	return o
}

// SetDramSingleBitErrorCountQueryParameter adds the dramSingleBitErrorCount to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetDramSingleBitErrorCountQueryParameter(dramSingleBitErrorCount *int64) {
	o.DramSingleBitErrorCountQueryParameter = dramSingleBitErrorCount
}

// WithErrorsComponentIDQueryParameter adds the errorsComponentID to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithErrorsComponentIDQueryParameter(errorsComponentID *int64) *StorageBridgeCollectionGetParams {
	o.SetErrorsComponentIDQueryParameter(errorsComponentID)
	return o
}

// SetErrorsComponentIDQueryParameter adds the errorsComponentId to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetErrorsComponentIDQueryParameter(errorsComponentID *int64) {
	o.ErrorsComponentIDQueryParameter = errorsComponentID
}

// WithErrorsComponentNameQueryParameter adds the errorsComponentName to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithErrorsComponentNameQueryParameter(errorsComponentName *string) *StorageBridgeCollectionGetParams {
	o.SetErrorsComponentNameQueryParameter(errorsComponentName)
	return o
}

// SetErrorsComponentNameQueryParameter adds the errorsComponentName to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetErrorsComponentNameQueryParameter(errorsComponentName *string) {
	o.ErrorsComponentNameQueryParameter = errorsComponentName
}

// WithErrorsComponentUniqueIDQueryParameter adds the errorsComponentUniqueID to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithErrorsComponentUniqueIDQueryParameter(errorsComponentUniqueID *string) *StorageBridgeCollectionGetParams {
	o.SetErrorsComponentUniqueIDQueryParameter(errorsComponentUniqueID)
	return o
}

// SetErrorsComponentUniqueIDQueryParameter adds the errorsComponentUniqueId to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetErrorsComponentUniqueIDQueryParameter(errorsComponentUniqueID *string) {
	o.ErrorsComponentUniqueIDQueryParameter = errorsComponentUniqueID
}

// WithErrorsReasonArgumentsCodeQueryParameter adds the errorsReasonArgumentsCode to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithErrorsReasonArgumentsCodeQueryParameter(errorsReasonArgumentsCode *string) *StorageBridgeCollectionGetParams {
	o.SetErrorsReasonArgumentsCodeQueryParameter(errorsReasonArgumentsCode)
	return o
}

// SetErrorsReasonArgumentsCodeQueryParameter adds the errorsReasonArgumentsCode to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetErrorsReasonArgumentsCodeQueryParameter(errorsReasonArgumentsCode *string) {
	o.ErrorsReasonArgumentsCodeQueryParameter = errorsReasonArgumentsCode
}

// WithErrorsReasonArgumentsMessageQueryParameter adds the errorsReasonArgumentsMessage to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithErrorsReasonArgumentsMessageQueryParameter(errorsReasonArgumentsMessage *string) *StorageBridgeCollectionGetParams {
	o.SetErrorsReasonArgumentsMessageQueryParameter(errorsReasonArgumentsMessage)
	return o
}

// SetErrorsReasonArgumentsMessageQueryParameter adds the errorsReasonArgumentsMessage to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetErrorsReasonArgumentsMessageQueryParameter(errorsReasonArgumentsMessage *string) {
	o.ErrorsReasonArgumentsMessageQueryParameter = errorsReasonArgumentsMessage
}

// WithErrorsReasonCodeQueryParameter adds the errorsReasonCode to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithErrorsReasonCodeQueryParameter(errorsReasonCode *string) *StorageBridgeCollectionGetParams {
	o.SetErrorsReasonCodeQueryParameter(errorsReasonCode)
	return o
}

// SetErrorsReasonCodeQueryParameter adds the errorsReasonCode to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetErrorsReasonCodeQueryParameter(errorsReasonCode *string) {
	o.ErrorsReasonCodeQueryParameter = errorsReasonCode
}

// WithErrorsReasonMessageQueryParameter adds the errorsReasonMessage to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithErrorsReasonMessageQueryParameter(errorsReasonMessage *string) *StorageBridgeCollectionGetParams {
	o.SetErrorsReasonMessageQueryParameter(errorsReasonMessage)
	return o
}

// SetErrorsReasonMessageQueryParameter adds the errorsReasonMessage to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetErrorsReasonMessageQueryParameter(errorsReasonMessage *string) {
	o.ErrorsReasonMessageQueryParameter = errorsReasonMessage
}

// WithErrorsReasonTargetQueryParameter adds the errorsReasonTarget to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithErrorsReasonTargetQueryParameter(errorsReasonTarget *string) *StorageBridgeCollectionGetParams {
	o.SetErrorsReasonTargetQueryParameter(errorsReasonTarget)
	return o
}

// SetErrorsReasonTargetQueryParameter adds the errorsReasonTarget to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetErrorsReasonTargetQueryParameter(errorsReasonTarget *string) {
	o.ErrorsReasonTargetQueryParameter = errorsReasonTarget
}

// WithErrorsSeverityQueryParameter adds the errorsSeverity to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithErrorsSeverityQueryParameter(errorsSeverity *string) *StorageBridgeCollectionGetParams {
	o.SetErrorsSeverityQueryParameter(errorsSeverity)
	return o
}

// SetErrorsSeverityQueryParameter adds the errorsSeverity to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetErrorsSeverityQueryParameter(errorsSeverity *string) {
	o.ErrorsSeverityQueryParameter = errorsSeverity
}

// WithErrorsTypeQueryParameter adds the errorsType to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithErrorsTypeQueryParameter(errorsType *string) *StorageBridgeCollectionGetParams {
	o.SetErrorsTypeQueryParameter(errorsType)
	return o
}

// SetErrorsTypeQueryParameter adds the errorsType to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetErrorsTypeQueryParameter(errorsType *string) {
	o.ErrorsTypeQueryParameter = errorsType
}

// WithFcPortsConfiguredDataRateQueryParameter adds the fcPortsConfiguredDataRate to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithFcPortsConfiguredDataRateQueryParameter(fcPortsConfiguredDataRate *float64) *StorageBridgeCollectionGetParams {
	o.SetFcPortsConfiguredDataRateQueryParameter(fcPortsConfiguredDataRate)
	return o
}

// SetFcPortsConfiguredDataRateQueryParameter adds the fcPortsConfiguredDataRate to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetFcPortsConfiguredDataRateQueryParameter(fcPortsConfiguredDataRate *float64) {
	o.FcPortsConfiguredDataRateQueryParameter = fcPortsConfiguredDataRate
}

// WithFcPortsConnectionModeQueryParameter adds the fcPortsConnectionMode to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithFcPortsConnectionModeQueryParameter(fcPortsConnectionMode *string) *StorageBridgeCollectionGetParams {
	o.SetFcPortsConnectionModeQueryParameter(fcPortsConnectionMode)
	return o
}

// SetFcPortsConnectionModeQueryParameter adds the fcPortsConnectionMode to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetFcPortsConnectionModeQueryParameter(fcPortsConnectionMode *string) {
	o.FcPortsConnectionModeQueryParameter = fcPortsConnectionMode
}

// WithFcPortsDataRateCapabilityQueryParameter adds the fcPortsDataRateCapability to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithFcPortsDataRateCapabilityQueryParameter(fcPortsDataRateCapability *float64) *StorageBridgeCollectionGetParams {
	o.SetFcPortsDataRateCapabilityQueryParameter(fcPortsDataRateCapability)
	return o
}

// SetFcPortsDataRateCapabilityQueryParameter adds the fcPortsDataRateCapability to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetFcPortsDataRateCapabilityQueryParameter(fcPortsDataRateCapability *float64) {
	o.FcPortsDataRateCapabilityQueryParameter = fcPortsDataRateCapability
}

// WithFcPortsEnabledQueryParameter adds the fcPortsEnabled to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithFcPortsEnabledQueryParameter(fcPortsEnabled *bool) *StorageBridgeCollectionGetParams {
	o.SetFcPortsEnabledQueryParameter(fcPortsEnabled)
	return o
}

// SetFcPortsEnabledQueryParameter adds the fcPortsEnabled to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetFcPortsEnabledQueryParameter(fcPortsEnabled *bool) {
	o.FcPortsEnabledQueryParameter = fcPortsEnabled
}

// WithFcPortsIDQueryParameter adds the fcPortsID to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithFcPortsIDQueryParameter(fcPortsID *int64) *StorageBridgeCollectionGetParams {
	o.SetFcPortsIDQueryParameter(fcPortsID)
	return o
}

// SetFcPortsIDQueryParameter adds the fcPortsId to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetFcPortsIDQueryParameter(fcPortsID *int64) {
	o.FcPortsIDQueryParameter = fcPortsID
}

// WithFcPortsNegotiatedDataRateQueryParameter adds the fcPortsNegotiatedDataRate to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithFcPortsNegotiatedDataRateQueryParameter(fcPortsNegotiatedDataRate *float64) *StorageBridgeCollectionGetParams {
	o.SetFcPortsNegotiatedDataRateQueryParameter(fcPortsNegotiatedDataRate)
	return o
}

// SetFcPortsNegotiatedDataRateQueryParameter adds the fcPortsNegotiatedDataRate to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetFcPortsNegotiatedDataRateQueryParameter(fcPortsNegotiatedDataRate *float64) {
	o.FcPortsNegotiatedDataRateQueryParameter = fcPortsNegotiatedDataRate
}

// WithFcPortsPeerWwnQueryParameter adds the fcPortsPeerWwn to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithFcPortsPeerWwnQueryParameter(fcPortsPeerWwn *string) *StorageBridgeCollectionGetParams {
	o.SetFcPortsPeerWwnQueryParameter(fcPortsPeerWwn)
	return o
}

// SetFcPortsPeerWwnQueryParameter adds the fcPortsPeerWwn to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetFcPortsPeerWwnQueryParameter(fcPortsPeerWwn *string) {
	o.FcPortsPeerWwnQueryParameter = fcPortsPeerWwn
}

// WithFcPortsSfpDataRateCapabilityQueryParameter adds the fcPortsSfpDataRateCapability to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithFcPortsSfpDataRateCapabilityQueryParameter(fcPortsSfpDataRateCapability *float64) *StorageBridgeCollectionGetParams {
	o.SetFcPortsSfpDataRateCapabilityQueryParameter(fcPortsSfpDataRateCapability)
	return o
}

// SetFcPortsSfpDataRateCapabilityQueryParameter adds the fcPortsSfpDataRateCapability to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetFcPortsSfpDataRateCapabilityQueryParameter(fcPortsSfpDataRateCapability *float64) {
	o.FcPortsSfpDataRateCapabilityQueryParameter = fcPortsSfpDataRateCapability
}

// WithFcPortsSfpPartNumberQueryParameter adds the fcPortsSfpPartNumber to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithFcPortsSfpPartNumberQueryParameter(fcPortsSfpPartNumber *string) *StorageBridgeCollectionGetParams {
	o.SetFcPortsSfpPartNumberQueryParameter(fcPortsSfpPartNumber)
	return o
}

// SetFcPortsSfpPartNumberQueryParameter adds the fcPortsSfpPartNumber to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetFcPortsSfpPartNumberQueryParameter(fcPortsSfpPartNumber *string) {
	o.FcPortsSfpPartNumberQueryParameter = fcPortsSfpPartNumber
}

// WithFcPortsSfpSerialNumberQueryParameter adds the fcPortsSfpSerialNumber to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithFcPortsSfpSerialNumberQueryParameter(fcPortsSfpSerialNumber *string) *StorageBridgeCollectionGetParams {
	o.SetFcPortsSfpSerialNumberQueryParameter(fcPortsSfpSerialNumber)
	return o
}

// SetFcPortsSfpSerialNumberQueryParameter adds the fcPortsSfpSerialNumber to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetFcPortsSfpSerialNumberQueryParameter(fcPortsSfpSerialNumber *string) {
	o.FcPortsSfpSerialNumberQueryParameter = fcPortsSfpSerialNumber
}

// WithFcPortsSfpVendorQueryParameter adds the fcPortsSfpVendor to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithFcPortsSfpVendorQueryParameter(fcPortsSfpVendor *string) *StorageBridgeCollectionGetParams {
	o.SetFcPortsSfpVendorQueryParameter(fcPortsSfpVendor)
	return o
}

// SetFcPortsSfpVendorQueryParameter adds the fcPortsSfpVendor to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetFcPortsSfpVendorQueryParameter(fcPortsSfpVendor *string) {
	o.FcPortsSfpVendorQueryParameter = fcPortsSfpVendor
}

// WithFcPortsStateQueryParameter adds the fcPortsState to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithFcPortsStateQueryParameter(fcPortsState *string) *StorageBridgeCollectionGetParams {
	o.SetFcPortsStateQueryParameter(fcPortsState)
	return o
}

// SetFcPortsStateQueryParameter adds the fcPortsState to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetFcPortsStateQueryParameter(fcPortsState *string) {
	o.FcPortsStateQueryParameter = fcPortsState
}

// WithFcPortsWwnQueryParameter adds the fcPortsWwn to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithFcPortsWwnQueryParameter(fcPortsWwn *string) *StorageBridgeCollectionGetParams {
	o.SetFcPortsWwnQueryParameter(fcPortsWwn)
	return o
}

// SetFcPortsWwnQueryParameter adds the fcPortsWwn to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetFcPortsWwnQueryParameter(fcPortsWwn *string) {
	o.FcPortsWwnQueryParameter = fcPortsWwn
}

// WithFieldsQueryParameter adds the fields to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithFieldsQueryParameter(fields []string) *StorageBridgeCollectionGetParams {
	o.SetFieldsQueryParameter(fields)
	return o
}

// SetFieldsQueryParameter adds the fields to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetFieldsQueryParameter(fields []string) {
	o.FieldsQueryParameter = fields
}

// WithFirmwareVersionQueryParameter adds the firmwareVersion to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithFirmwareVersionQueryParameter(firmwareVersion *string) *StorageBridgeCollectionGetParams {
	o.SetFirmwareVersionQueryParameter(firmwareVersion)
	return o
}

// SetFirmwareVersionQueryParameter adds the firmwareVersion to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetFirmwareVersionQueryParameter(firmwareVersion *string) {
	o.FirmwareVersionQueryParameter = firmwareVersion
}

// WithIPAddressQueryParameter adds the iPAddress to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithIPAddressQueryParameter(iPAddress *string) *StorageBridgeCollectionGetParams {
	o.SetIPAddressQueryParameter(iPAddress)
	return o
}

// SetIPAddressQueryParameter adds the ipAddress to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetIPAddressQueryParameter(iPAddress *string) {
	o.IPAddressQueryParameter = iPAddress
}

// WithLastRebootReasonArgumentsCodeQueryParameter adds the lastRebootReasonArgumentsCode to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithLastRebootReasonArgumentsCodeQueryParameter(lastRebootReasonArgumentsCode *string) *StorageBridgeCollectionGetParams {
	o.SetLastRebootReasonArgumentsCodeQueryParameter(lastRebootReasonArgumentsCode)
	return o
}

// SetLastRebootReasonArgumentsCodeQueryParameter adds the lastRebootReasonArgumentsCode to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetLastRebootReasonArgumentsCodeQueryParameter(lastRebootReasonArgumentsCode *string) {
	o.LastRebootReasonArgumentsCodeQueryParameter = lastRebootReasonArgumentsCode
}

// WithLastRebootReasonArgumentsMessageQueryParameter adds the lastRebootReasonArgumentsMessage to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithLastRebootReasonArgumentsMessageQueryParameter(lastRebootReasonArgumentsMessage *string) *StorageBridgeCollectionGetParams {
	o.SetLastRebootReasonArgumentsMessageQueryParameter(lastRebootReasonArgumentsMessage)
	return o
}

// SetLastRebootReasonArgumentsMessageQueryParameter adds the lastRebootReasonArgumentsMessage to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetLastRebootReasonArgumentsMessageQueryParameter(lastRebootReasonArgumentsMessage *string) {
	o.LastRebootReasonArgumentsMessageQueryParameter = lastRebootReasonArgumentsMessage
}

// WithLastRebootReasonCodeQueryParameter adds the lastRebootReasonCode to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithLastRebootReasonCodeQueryParameter(lastRebootReasonCode *string) *StorageBridgeCollectionGetParams {
	o.SetLastRebootReasonCodeQueryParameter(lastRebootReasonCode)
	return o
}

// SetLastRebootReasonCodeQueryParameter adds the lastRebootReasonCode to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetLastRebootReasonCodeQueryParameter(lastRebootReasonCode *string) {
	o.LastRebootReasonCodeQueryParameter = lastRebootReasonCode
}

// WithLastRebootReasonMessageQueryParameter adds the lastRebootReasonMessage to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithLastRebootReasonMessageQueryParameter(lastRebootReasonMessage *string) *StorageBridgeCollectionGetParams {
	o.SetLastRebootReasonMessageQueryParameter(lastRebootReasonMessage)
	return o
}

// SetLastRebootReasonMessageQueryParameter adds the lastRebootReasonMessage to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetLastRebootReasonMessageQueryParameter(lastRebootReasonMessage *string) {
	o.LastRebootReasonMessageQueryParameter = lastRebootReasonMessage
}

// WithLastRebootReasonTargetQueryParameter adds the lastRebootReasonTarget to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithLastRebootReasonTargetQueryParameter(lastRebootReasonTarget *string) *StorageBridgeCollectionGetParams {
	o.SetLastRebootReasonTargetQueryParameter(lastRebootReasonTarget)
	return o
}

// SetLastRebootReasonTargetQueryParameter adds the lastRebootReasonTarget to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetLastRebootReasonTargetQueryParameter(lastRebootReasonTarget *string) {
	o.LastRebootReasonTargetQueryParameter = lastRebootReasonTarget
}

// WithLastRebootTimeQueryParameter adds the lastRebootTime to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithLastRebootTimeQueryParameter(lastRebootTime *string) *StorageBridgeCollectionGetParams {
	o.SetLastRebootTimeQueryParameter(lastRebootTime)
	return o
}

// SetLastRebootTimeQueryParameter adds the lastRebootTime to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetLastRebootTimeQueryParameter(lastRebootTime *string) {
	o.LastRebootTimeQueryParameter = lastRebootTime
}

// WithManagedByQueryParameter adds the managedBy to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithManagedByQueryParameter(managedBy *string) *StorageBridgeCollectionGetParams {
	o.SetManagedByQueryParameter(managedBy)
	return o
}

// SetManagedByQueryParameter adds the managedBy to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetManagedByQueryParameter(managedBy *string) {
	o.ManagedByQueryParameter = managedBy
}

// WithMaxRecordsQueryParameter adds the maxRecords to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithMaxRecordsQueryParameter(maxRecords *int64) *StorageBridgeCollectionGetParams {
	o.SetMaxRecordsQueryParameter(maxRecords)
	return o
}

// SetMaxRecordsQueryParameter adds the maxRecords to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetMaxRecordsQueryParameter(maxRecords *int64) {
	o.MaxRecordsQueryParameter = maxRecords
}

// WithModelQueryParameter adds the model to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithModelQueryParameter(model *string) *StorageBridgeCollectionGetParams {
	o.SetModelQueryParameter(model)
	return o
}

// SetModelQueryParameter adds the model to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetModelQueryParameter(model *string) {
	o.ModelQueryParameter = model
}

// WithMonitoringEnabledQueryParameter adds the monitoringEnabled to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithMonitoringEnabledQueryParameter(monitoringEnabled *bool) *StorageBridgeCollectionGetParams {
	o.SetMonitoringEnabledQueryParameter(monitoringEnabled)
	return o
}

// SetMonitoringEnabledQueryParameter adds the monitoringEnabled to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetMonitoringEnabledQueryParameter(monitoringEnabled *bool) {
	o.MonitoringEnabledQueryParameter = monitoringEnabled
}

// WithNameQueryParameter adds the name to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithNameQueryParameter(name *string) *StorageBridgeCollectionGetParams {
	o.SetNameQueryParameter(name)
	return o
}

// SetNameQueryParameter adds the name to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetNameQueryParameter(name *string) {
	o.NameQueryParameter = name
}

// WithOrderByQueryParameter adds the orderBy to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithOrderByQueryParameter(orderBy []string) *StorageBridgeCollectionGetParams {
	o.SetOrderByQueryParameter(orderBy)
	return o
}

// SetOrderByQueryParameter adds the orderBy to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetOrderByQueryParameter(orderBy []string) {
	o.OrderByQueryParameter = orderBy
}

// WithPathsNameQueryParameter adds the pathsName to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithPathsNameQueryParameter(pathsName *string) *StorageBridgeCollectionGetParams {
	o.SetPathsNameQueryParameter(pathsName)
	return o
}

// SetPathsNameQueryParameter adds the pathsName to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetPathsNameQueryParameter(pathsName *string) {
	o.PathsNameQueryParameter = pathsName
}

// WithPathsNodeNameQueryParameter adds the pathsNodeName to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithPathsNodeNameQueryParameter(pathsNodeName *string) *StorageBridgeCollectionGetParams {
	o.SetPathsNodeNameQueryParameter(pathsNodeName)
	return o
}

// SetPathsNodeNameQueryParameter adds the pathsNodeName to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetPathsNodeNameQueryParameter(pathsNodeName *string) {
	o.PathsNodeNameQueryParameter = pathsNodeName
}

// WithPathsNodeUUIDQueryParameter adds the pathsNodeUUID to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithPathsNodeUUIDQueryParameter(pathsNodeUUID *string) *StorageBridgeCollectionGetParams {
	o.SetPathsNodeUUIDQueryParameter(pathsNodeUUID)
	return o
}

// SetPathsNodeUUIDQueryParameter adds the pathsNodeUuid to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetPathsNodeUUIDQueryParameter(pathsNodeUUID *string) {
	o.PathsNodeUUIDQueryParameter = pathsNodeUUID
}

// WithPathsSourcePortIDQueryParameter adds the pathsSourcePortID to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithPathsSourcePortIDQueryParameter(pathsSourcePortID *string) *StorageBridgeCollectionGetParams {
	o.SetPathsSourcePortIDQueryParameter(pathsSourcePortID)
	return o
}

// SetPathsSourcePortIDQueryParameter adds the pathsSourcePortId to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetPathsSourcePortIDQueryParameter(pathsSourcePortID *string) {
	o.PathsSourcePortIDQueryParameter = pathsSourcePortID
}

// WithPathsSourcePortNameQueryParameter adds the pathsSourcePortName to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithPathsSourcePortNameQueryParameter(pathsSourcePortName *string) *StorageBridgeCollectionGetParams {
	o.SetPathsSourcePortNameQueryParameter(pathsSourcePortName)
	return o
}

// SetPathsSourcePortNameQueryParameter adds the pathsSourcePortName to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetPathsSourcePortNameQueryParameter(pathsSourcePortName *string) {
	o.PathsSourcePortNameQueryParameter = pathsSourcePortName
}

// WithPathsTargetPortIDQueryParameter adds the pathsTargetPortID to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithPathsTargetPortIDQueryParameter(pathsTargetPortID *string) *StorageBridgeCollectionGetParams {
	o.SetPathsTargetPortIDQueryParameter(pathsTargetPortID)
	return o
}

// SetPathsTargetPortIDQueryParameter adds the pathsTargetPortId to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetPathsTargetPortIDQueryParameter(pathsTargetPortID *string) {
	o.PathsTargetPortIDQueryParameter = pathsTargetPortID
}

// WithPathsTargetPortNameQueryParameter adds the pathsTargetPortName to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithPathsTargetPortNameQueryParameter(pathsTargetPortName *string) *StorageBridgeCollectionGetParams {
	o.SetPathsTargetPortNameQueryParameter(pathsTargetPortName)
	return o
}

// SetPathsTargetPortNameQueryParameter adds the pathsTargetPortName to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetPathsTargetPortNameQueryParameter(pathsTargetPortName *string) {
	o.PathsTargetPortNameQueryParameter = pathsTargetPortName
}

// WithPathsTargetPortWwnQueryParameter adds the pathsTargetPortWwn to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithPathsTargetPortWwnQueryParameter(pathsTargetPortWwn *string) *StorageBridgeCollectionGetParams {
	o.SetPathsTargetPortWwnQueryParameter(pathsTargetPortWwn)
	return o
}

// SetPathsTargetPortWwnQueryParameter adds the pathsTargetPortWwn to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetPathsTargetPortWwnQueryParameter(pathsTargetPortWwn *string) {
	o.PathsTargetPortWwnQueryParameter = pathsTargetPortWwn
}

// WithPowerSupplyUnitsNameQueryParameter adds the powerSupplyUnitsName to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithPowerSupplyUnitsNameQueryParameter(powerSupplyUnitsName *string) *StorageBridgeCollectionGetParams {
	o.SetPowerSupplyUnitsNameQueryParameter(powerSupplyUnitsName)
	return o
}

// SetPowerSupplyUnitsNameQueryParameter adds the powerSupplyUnitsName to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetPowerSupplyUnitsNameQueryParameter(powerSupplyUnitsName *string) {
	o.PowerSupplyUnitsNameQueryParameter = powerSupplyUnitsName
}

// WithPowerSupplyUnitsStateQueryParameter adds the powerSupplyUnitsState to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithPowerSupplyUnitsStateQueryParameter(powerSupplyUnitsState *string) *StorageBridgeCollectionGetParams {
	o.SetPowerSupplyUnitsStateQueryParameter(powerSupplyUnitsState)
	return o
}

// SetPowerSupplyUnitsStateQueryParameter adds the powerSupplyUnitsState to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetPowerSupplyUnitsStateQueryParameter(powerSupplyUnitsState *string) {
	o.PowerSupplyUnitsStateQueryParameter = powerSupplyUnitsState
}

// WithReturnRecordsQueryParameter adds the returnRecords to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithReturnRecordsQueryParameter(returnRecords *bool) *StorageBridgeCollectionGetParams {
	o.SetReturnRecordsQueryParameter(returnRecords)
	return o
}

// SetReturnRecordsQueryParameter adds the returnRecords to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetReturnRecordsQueryParameter(returnRecords *bool) {
	o.ReturnRecordsQueryParameter = returnRecords
}

// WithReturnTimeoutQueryParameter adds the returnTimeout to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithReturnTimeoutQueryParameter(returnTimeout *int64) *StorageBridgeCollectionGetParams {
	o.SetReturnTimeoutQueryParameter(returnTimeout)
	return o
}

// SetReturnTimeoutQueryParameter adds the returnTimeout to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetReturnTimeoutQueryParameter(returnTimeout *int64) {
	o.ReturnTimeoutQueryParameter = returnTimeout
}

// WithSasPortsCablePartNumberQueryParameter adds the sasPortsCablePartNumber to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithSasPortsCablePartNumberQueryParameter(sasPortsCablePartNumber *string) *StorageBridgeCollectionGetParams {
	o.SetSasPortsCablePartNumberQueryParameter(sasPortsCablePartNumber)
	return o
}

// SetSasPortsCablePartNumberQueryParameter adds the sasPortsCablePartNumber to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetSasPortsCablePartNumberQueryParameter(sasPortsCablePartNumber *string) {
	o.SasPortsCablePartNumberQueryParameter = sasPortsCablePartNumber
}

// WithSasPortsCableSerialNumberQueryParameter adds the sasPortsCableSerialNumber to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithSasPortsCableSerialNumberQueryParameter(sasPortsCableSerialNumber *string) *StorageBridgeCollectionGetParams {
	o.SetSasPortsCableSerialNumberQueryParameter(sasPortsCableSerialNumber)
	return o
}

// SetSasPortsCableSerialNumberQueryParameter adds the sasPortsCableSerialNumber to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetSasPortsCableSerialNumberQueryParameter(sasPortsCableSerialNumber *string) {
	o.SasPortsCableSerialNumberQueryParameter = sasPortsCableSerialNumber
}

// WithSasPortsCableTechnologyQueryParameter adds the sasPortsCableTechnology to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithSasPortsCableTechnologyQueryParameter(sasPortsCableTechnology *string) *StorageBridgeCollectionGetParams {
	o.SetSasPortsCableTechnologyQueryParameter(sasPortsCableTechnology)
	return o
}

// SetSasPortsCableTechnologyQueryParameter adds the sasPortsCableTechnology to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetSasPortsCableTechnologyQueryParameter(sasPortsCableTechnology *string) {
	o.SasPortsCableTechnologyQueryParameter = sasPortsCableTechnology
}

// WithSasPortsCableVendorQueryParameter adds the sasPortsCableVendor to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithSasPortsCableVendorQueryParameter(sasPortsCableVendor *string) *StorageBridgeCollectionGetParams {
	o.SetSasPortsCableVendorQueryParameter(sasPortsCableVendor)
	return o
}

// SetSasPortsCableVendorQueryParameter adds the sasPortsCableVendor to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetSasPortsCableVendorQueryParameter(sasPortsCableVendor *string) {
	o.SasPortsCableVendorQueryParameter = sasPortsCableVendor
}

// WithSasPortsDataRateCapabilityQueryParameter adds the sasPortsDataRateCapability to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithSasPortsDataRateCapabilityQueryParameter(sasPortsDataRateCapability *float64) *StorageBridgeCollectionGetParams {
	o.SetSasPortsDataRateCapabilityQueryParameter(sasPortsDataRateCapability)
	return o
}

// SetSasPortsDataRateCapabilityQueryParameter adds the sasPortsDataRateCapability to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetSasPortsDataRateCapabilityQueryParameter(sasPortsDataRateCapability *float64) {
	o.SasPortsDataRateCapabilityQueryParameter = sasPortsDataRateCapability
}

// WithSasPortsEnabledQueryParameter adds the sasPortsEnabled to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithSasPortsEnabledQueryParameter(sasPortsEnabled *bool) *StorageBridgeCollectionGetParams {
	o.SetSasPortsEnabledQueryParameter(sasPortsEnabled)
	return o
}

// SetSasPortsEnabledQueryParameter adds the sasPortsEnabled to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetSasPortsEnabledQueryParameter(sasPortsEnabled *bool) {
	o.SasPortsEnabledQueryParameter = sasPortsEnabled
}

// WithSasPortsIDQueryParameter adds the sasPortsID to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithSasPortsIDQueryParameter(sasPortsID *int64) *StorageBridgeCollectionGetParams {
	o.SetSasPortsIDQueryParameter(sasPortsID)
	return o
}

// SetSasPortsIDQueryParameter adds the sasPortsId to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetSasPortsIDQueryParameter(sasPortsID *int64) {
	o.SasPortsIDQueryParameter = sasPortsID
}

// WithSasPortsNegotiatedDataRateQueryParameter adds the sasPortsNegotiatedDataRate to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithSasPortsNegotiatedDataRateQueryParameter(sasPortsNegotiatedDataRate *float64) *StorageBridgeCollectionGetParams {
	o.SetSasPortsNegotiatedDataRateQueryParameter(sasPortsNegotiatedDataRate)
	return o
}

// SetSasPortsNegotiatedDataRateQueryParameter adds the sasPortsNegotiatedDataRate to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetSasPortsNegotiatedDataRateQueryParameter(sasPortsNegotiatedDataRate *float64) {
	o.SasPortsNegotiatedDataRateQueryParameter = sasPortsNegotiatedDataRate
}

// WithSasPortsPhy1StateQueryParameter adds the sasPortsPhy1State to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithSasPortsPhy1StateQueryParameter(sasPortsPhy1State *string) *StorageBridgeCollectionGetParams {
	o.SetSasPortsPhy1StateQueryParameter(sasPortsPhy1State)
	return o
}

// SetSasPortsPhy1StateQueryParameter adds the sasPortsPhy1State to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetSasPortsPhy1StateQueryParameter(sasPortsPhy1State *string) {
	o.SasPortsPhy1StateQueryParameter = sasPortsPhy1State
}

// WithSasPortsPhy2StateQueryParameter adds the sasPortsPhy2State to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithSasPortsPhy2StateQueryParameter(sasPortsPhy2State *string) *StorageBridgeCollectionGetParams {
	o.SetSasPortsPhy2StateQueryParameter(sasPortsPhy2State)
	return o
}

// SetSasPortsPhy2StateQueryParameter adds the sasPortsPhy2State to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetSasPortsPhy2StateQueryParameter(sasPortsPhy2State *string) {
	o.SasPortsPhy2StateQueryParameter = sasPortsPhy2State
}

// WithSasPortsPhy3StateQueryParameter adds the sasPortsPhy3State to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithSasPortsPhy3StateQueryParameter(sasPortsPhy3State *string) *StorageBridgeCollectionGetParams {
	o.SetSasPortsPhy3StateQueryParameter(sasPortsPhy3State)
	return o
}

// SetSasPortsPhy3StateQueryParameter adds the sasPortsPhy3State to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetSasPortsPhy3StateQueryParameter(sasPortsPhy3State *string) {
	o.SasPortsPhy3StateQueryParameter = sasPortsPhy3State
}

// WithSasPortsPhy4StateQueryParameter adds the sasPortsPhy4State to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithSasPortsPhy4StateQueryParameter(sasPortsPhy4State *string) *StorageBridgeCollectionGetParams {
	o.SetSasPortsPhy4StateQueryParameter(sasPortsPhy4State)
	return o
}

// SetSasPortsPhy4StateQueryParameter adds the sasPortsPhy4State to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetSasPortsPhy4StateQueryParameter(sasPortsPhy4State *string) {
	o.SasPortsPhy4StateQueryParameter = sasPortsPhy4State
}

// WithSasPortsStateQueryParameter adds the sasPortsState to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithSasPortsStateQueryParameter(sasPortsState *string) *StorageBridgeCollectionGetParams {
	o.SetSasPortsStateQueryParameter(sasPortsState)
	return o
}

// SetSasPortsStateQueryParameter adds the sasPortsState to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetSasPortsStateQueryParameter(sasPortsState *string) {
	o.SasPortsStateQueryParameter = sasPortsState
}

// WithSasPortsWwnQueryParameter adds the sasPortsWwn to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithSasPortsWwnQueryParameter(sasPortsWwn *string) *StorageBridgeCollectionGetParams {
	o.SetSasPortsWwnQueryParameter(sasPortsWwn)
	return o
}

// SetSasPortsWwnQueryParameter adds the sasPortsWwn to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetSasPortsWwnQueryParameter(sasPortsWwn *string) {
	o.SasPortsWwnQueryParameter = sasPortsWwn
}

// WithSecurityEnabledQueryParameter adds the securityEnabled to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithSecurityEnabledQueryParameter(securityEnabled *bool) *StorageBridgeCollectionGetParams {
	o.SetSecurityEnabledQueryParameter(securityEnabled)
	return o
}

// SetSecurityEnabledQueryParameter adds the securityEnabled to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetSecurityEnabledQueryParameter(securityEnabled *bool) {
	o.SecurityEnabledQueryParameter = securityEnabled
}

// WithSerialNumberQueryParameter adds the serialNumber to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithSerialNumberQueryParameter(serialNumber *string) *StorageBridgeCollectionGetParams {
	o.SetSerialNumberQueryParameter(serialNumber)
	return o
}

// SetSerialNumberQueryParameter adds the serialNumber to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetSerialNumberQueryParameter(serialNumber *string) {
	o.SerialNumberQueryParameter = serialNumber
}

// WithStateQueryParameter adds the state to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithStateQueryParameter(state *string) *StorageBridgeCollectionGetParams {
	o.SetStateQueryParameter(state)
	return o
}

// SetStateQueryParameter adds the state to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetStateQueryParameter(state *string) {
	o.StateQueryParameter = state
}

// WithSymbolicNameQueryParameter adds the symbolicName to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithSymbolicNameQueryParameter(symbolicName *string) *StorageBridgeCollectionGetParams {
	o.SetSymbolicNameQueryParameter(symbolicName)
	return o
}

// SetSymbolicNameQueryParameter adds the symbolicName to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetSymbolicNameQueryParameter(symbolicName *string) {
	o.SymbolicNameQueryParameter = symbolicName
}

// WithTemperatureSensorMaximumQueryParameter adds the temperatureSensorMaximum to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithTemperatureSensorMaximumQueryParameter(temperatureSensorMaximum *int64) *StorageBridgeCollectionGetParams {
	o.SetTemperatureSensorMaximumQueryParameter(temperatureSensorMaximum)
	return o
}

// SetTemperatureSensorMaximumQueryParameter adds the temperatureSensorMaximum to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetTemperatureSensorMaximumQueryParameter(temperatureSensorMaximum *int64) {
	o.TemperatureSensorMaximumQueryParameter = temperatureSensorMaximum
}

// WithTemperatureSensorMinimumQueryParameter adds the temperatureSensorMinimum to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithTemperatureSensorMinimumQueryParameter(temperatureSensorMinimum *int64) *StorageBridgeCollectionGetParams {
	o.SetTemperatureSensorMinimumQueryParameter(temperatureSensorMinimum)
	return o
}

// SetTemperatureSensorMinimumQueryParameter adds the temperatureSensorMinimum to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetTemperatureSensorMinimumQueryParameter(temperatureSensorMinimum *int64) {
	o.TemperatureSensorMinimumQueryParameter = temperatureSensorMinimum
}

// WithTemperatureSensorNameQueryParameter adds the temperatureSensorName to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithTemperatureSensorNameQueryParameter(temperatureSensorName *string) *StorageBridgeCollectionGetParams {
	o.SetTemperatureSensorNameQueryParameter(temperatureSensorName)
	return o
}

// SetTemperatureSensorNameQueryParameter adds the temperatureSensorName to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetTemperatureSensorNameQueryParameter(temperatureSensorName *string) {
	o.TemperatureSensorNameQueryParameter = temperatureSensorName
}

// WithTemperatureSensorReadingQueryParameter adds the temperatureSensorReading to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithTemperatureSensorReadingQueryParameter(temperatureSensorReading *int64) *StorageBridgeCollectionGetParams {
	o.SetTemperatureSensorReadingQueryParameter(temperatureSensorReading)
	return o
}

// SetTemperatureSensorReadingQueryParameter adds the temperatureSensorReading to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetTemperatureSensorReadingQueryParameter(temperatureSensorReading *int64) {
	o.TemperatureSensorReadingQueryParameter = temperatureSensorReading
}

// WithTemperatureSensorStateQueryParameter adds the temperatureSensorState to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithTemperatureSensorStateQueryParameter(temperatureSensorState *string) *StorageBridgeCollectionGetParams {
	o.SetTemperatureSensorStateQueryParameter(temperatureSensorState)
	return o
}

// SetTemperatureSensorStateQueryParameter adds the temperatureSensorState to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetTemperatureSensorStateQueryParameter(temperatureSensorState *string) {
	o.TemperatureSensorStateQueryParameter = temperatureSensorState
}

// WithVendorQueryParameter adds the vendor to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithVendorQueryParameter(vendor *string) *StorageBridgeCollectionGetParams {
	o.SetVendorQueryParameter(vendor)
	return o
}

// SetVendorQueryParameter adds the vendor to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetVendorQueryParameter(vendor *string) {
	o.VendorQueryParameter = vendor
}

// WithWwnQueryParameter adds the wwn to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) WithWwnQueryParameter(wwn *string) *StorageBridgeCollectionGetParams {
	o.SetWwnQueryParameter(wwn)
	return o
}

// SetWwnQueryParameter adds the wwn to the storage bridge collection get params
func (o *StorageBridgeCollectionGetParams) SetWwnQueryParameter(wwn *string) {
	o.WwnQueryParameter = wwn
}

// WriteToRequest writes these params to a swagger request
func (o *StorageBridgeCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ChassisThroughputStateQueryParameter != nil {

		// query param chassis_throughput_state
		var qrChassisThroughputState string

		if o.ChassisThroughputStateQueryParameter != nil {
			qrChassisThroughputState = *o.ChassisThroughputStateQueryParameter
		}
		qChassisThroughputState := qrChassisThroughputState
		if qChassisThroughputState != "" {

			if err := r.SetQueryParam("chassis_throughput_state", qChassisThroughputState); err != nil {
				return err
			}
		}
	}

	if o.DramSingleBitErrorCountQueryParameter != nil {

		// query param dram_single_bit_error_count
		var qrDramSingleBitErrorCount int64

		if o.DramSingleBitErrorCountQueryParameter != nil {
			qrDramSingleBitErrorCount = *o.DramSingleBitErrorCountQueryParameter
		}
		qDramSingleBitErrorCount := swag.FormatInt64(qrDramSingleBitErrorCount)
		if qDramSingleBitErrorCount != "" {

			if err := r.SetQueryParam("dram_single_bit_error_count", qDramSingleBitErrorCount); err != nil {
				return err
			}
		}
	}

	if o.ErrorsComponentIDQueryParameter != nil {

		// query param errors.component.id
		var qrErrorsComponentID int64

		if o.ErrorsComponentIDQueryParameter != nil {
			qrErrorsComponentID = *o.ErrorsComponentIDQueryParameter
		}
		qErrorsComponentID := swag.FormatInt64(qrErrorsComponentID)
		if qErrorsComponentID != "" {

			if err := r.SetQueryParam("errors.component.id", qErrorsComponentID); err != nil {
				return err
			}
		}
	}

	if o.ErrorsComponentNameQueryParameter != nil {

		// query param errors.component.name
		var qrErrorsComponentName string

		if o.ErrorsComponentNameQueryParameter != nil {
			qrErrorsComponentName = *o.ErrorsComponentNameQueryParameter
		}
		qErrorsComponentName := qrErrorsComponentName
		if qErrorsComponentName != "" {

			if err := r.SetQueryParam("errors.component.name", qErrorsComponentName); err != nil {
				return err
			}
		}
	}

	if o.ErrorsComponentUniqueIDQueryParameter != nil {

		// query param errors.component.unique_id
		var qrErrorsComponentUniqueID string

		if o.ErrorsComponentUniqueIDQueryParameter != nil {
			qrErrorsComponentUniqueID = *o.ErrorsComponentUniqueIDQueryParameter
		}
		qErrorsComponentUniqueID := qrErrorsComponentUniqueID
		if qErrorsComponentUniqueID != "" {

			if err := r.SetQueryParam("errors.component.unique_id", qErrorsComponentUniqueID); err != nil {
				return err
			}
		}
	}

	if o.ErrorsReasonArgumentsCodeQueryParameter != nil {

		// query param errors.reason.arguments.code
		var qrErrorsReasonArgumentsCode string

		if o.ErrorsReasonArgumentsCodeQueryParameter != nil {
			qrErrorsReasonArgumentsCode = *o.ErrorsReasonArgumentsCodeQueryParameter
		}
		qErrorsReasonArgumentsCode := qrErrorsReasonArgumentsCode
		if qErrorsReasonArgumentsCode != "" {

			if err := r.SetQueryParam("errors.reason.arguments.code", qErrorsReasonArgumentsCode); err != nil {
				return err
			}
		}
	}

	if o.ErrorsReasonArgumentsMessageQueryParameter != nil {

		// query param errors.reason.arguments.message
		var qrErrorsReasonArgumentsMessage string

		if o.ErrorsReasonArgumentsMessageQueryParameter != nil {
			qrErrorsReasonArgumentsMessage = *o.ErrorsReasonArgumentsMessageQueryParameter
		}
		qErrorsReasonArgumentsMessage := qrErrorsReasonArgumentsMessage
		if qErrorsReasonArgumentsMessage != "" {

			if err := r.SetQueryParam("errors.reason.arguments.message", qErrorsReasonArgumentsMessage); err != nil {
				return err
			}
		}
	}

	if o.ErrorsReasonCodeQueryParameter != nil {

		// query param errors.reason.code
		var qrErrorsReasonCode string

		if o.ErrorsReasonCodeQueryParameter != nil {
			qrErrorsReasonCode = *o.ErrorsReasonCodeQueryParameter
		}
		qErrorsReasonCode := qrErrorsReasonCode
		if qErrorsReasonCode != "" {

			if err := r.SetQueryParam("errors.reason.code", qErrorsReasonCode); err != nil {
				return err
			}
		}
	}

	if o.ErrorsReasonMessageQueryParameter != nil {

		// query param errors.reason.message
		var qrErrorsReasonMessage string

		if o.ErrorsReasonMessageQueryParameter != nil {
			qrErrorsReasonMessage = *o.ErrorsReasonMessageQueryParameter
		}
		qErrorsReasonMessage := qrErrorsReasonMessage
		if qErrorsReasonMessage != "" {

			if err := r.SetQueryParam("errors.reason.message", qErrorsReasonMessage); err != nil {
				return err
			}
		}
	}

	if o.ErrorsReasonTargetQueryParameter != nil {

		// query param errors.reason.target
		var qrErrorsReasonTarget string

		if o.ErrorsReasonTargetQueryParameter != nil {
			qrErrorsReasonTarget = *o.ErrorsReasonTargetQueryParameter
		}
		qErrorsReasonTarget := qrErrorsReasonTarget
		if qErrorsReasonTarget != "" {

			if err := r.SetQueryParam("errors.reason.target", qErrorsReasonTarget); err != nil {
				return err
			}
		}
	}

	if o.ErrorsSeverityQueryParameter != nil {

		// query param errors.severity
		var qrErrorsSeverity string

		if o.ErrorsSeverityQueryParameter != nil {
			qrErrorsSeverity = *o.ErrorsSeverityQueryParameter
		}
		qErrorsSeverity := qrErrorsSeverity
		if qErrorsSeverity != "" {

			if err := r.SetQueryParam("errors.severity", qErrorsSeverity); err != nil {
				return err
			}
		}
	}

	if o.ErrorsTypeQueryParameter != nil {

		// query param errors.type
		var qrErrorsType string

		if o.ErrorsTypeQueryParameter != nil {
			qrErrorsType = *o.ErrorsTypeQueryParameter
		}
		qErrorsType := qrErrorsType
		if qErrorsType != "" {

			if err := r.SetQueryParam("errors.type", qErrorsType); err != nil {
				return err
			}
		}
	}

	if o.FcPortsConfiguredDataRateQueryParameter != nil {

		// query param fc_ports.configured_data_rate
		var qrFcPortsConfiguredDataRate float64

		if o.FcPortsConfiguredDataRateQueryParameter != nil {
			qrFcPortsConfiguredDataRate = *o.FcPortsConfiguredDataRateQueryParameter
		}
		qFcPortsConfiguredDataRate := swag.FormatFloat64(qrFcPortsConfiguredDataRate)
		if qFcPortsConfiguredDataRate != "" {

			if err := r.SetQueryParam("fc_ports.configured_data_rate", qFcPortsConfiguredDataRate); err != nil {
				return err
			}
		}
	}

	if o.FcPortsConnectionModeQueryParameter != nil {

		// query param fc_ports.connection_mode
		var qrFcPortsConnectionMode string

		if o.FcPortsConnectionModeQueryParameter != nil {
			qrFcPortsConnectionMode = *o.FcPortsConnectionModeQueryParameter
		}
		qFcPortsConnectionMode := qrFcPortsConnectionMode
		if qFcPortsConnectionMode != "" {

			if err := r.SetQueryParam("fc_ports.connection_mode", qFcPortsConnectionMode); err != nil {
				return err
			}
		}
	}

	if o.FcPortsDataRateCapabilityQueryParameter != nil {

		// query param fc_ports.data_rate_capability
		var qrFcPortsDataRateCapability float64

		if o.FcPortsDataRateCapabilityQueryParameter != nil {
			qrFcPortsDataRateCapability = *o.FcPortsDataRateCapabilityQueryParameter
		}
		qFcPortsDataRateCapability := swag.FormatFloat64(qrFcPortsDataRateCapability)
		if qFcPortsDataRateCapability != "" {

			if err := r.SetQueryParam("fc_ports.data_rate_capability", qFcPortsDataRateCapability); err != nil {
				return err
			}
		}
	}

	if o.FcPortsEnabledQueryParameter != nil {

		// query param fc_ports.enabled
		var qrFcPortsEnabled bool

		if o.FcPortsEnabledQueryParameter != nil {
			qrFcPortsEnabled = *o.FcPortsEnabledQueryParameter
		}
		qFcPortsEnabled := swag.FormatBool(qrFcPortsEnabled)
		if qFcPortsEnabled != "" {

			if err := r.SetQueryParam("fc_ports.enabled", qFcPortsEnabled); err != nil {
				return err
			}
		}
	}

	if o.FcPortsIDQueryParameter != nil {

		// query param fc_ports.id
		var qrFcPortsID int64

		if o.FcPortsIDQueryParameter != nil {
			qrFcPortsID = *o.FcPortsIDQueryParameter
		}
		qFcPortsID := swag.FormatInt64(qrFcPortsID)
		if qFcPortsID != "" {

			if err := r.SetQueryParam("fc_ports.id", qFcPortsID); err != nil {
				return err
			}
		}
	}

	if o.FcPortsNegotiatedDataRateQueryParameter != nil {

		// query param fc_ports.negotiated_data_rate
		var qrFcPortsNegotiatedDataRate float64

		if o.FcPortsNegotiatedDataRateQueryParameter != nil {
			qrFcPortsNegotiatedDataRate = *o.FcPortsNegotiatedDataRateQueryParameter
		}
		qFcPortsNegotiatedDataRate := swag.FormatFloat64(qrFcPortsNegotiatedDataRate)
		if qFcPortsNegotiatedDataRate != "" {

			if err := r.SetQueryParam("fc_ports.negotiated_data_rate", qFcPortsNegotiatedDataRate); err != nil {
				return err
			}
		}
	}

	if o.FcPortsPeerWwnQueryParameter != nil {

		// query param fc_ports.peer_wwn
		var qrFcPortsPeerWwn string

		if o.FcPortsPeerWwnQueryParameter != nil {
			qrFcPortsPeerWwn = *o.FcPortsPeerWwnQueryParameter
		}
		qFcPortsPeerWwn := qrFcPortsPeerWwn
		if qFcPortsPeerWwn != "" {

			if err := r.SetQueryParam("fc_ports.peer_wwn", qFcPortsPeerWwn); err != nil {
				return err
			}
		}
	}

	if o.FcPortsSfpDataRateCapabilityQueryParameter != nil {

		// query param fc_ports.sfp.data_rate_capability
		var qrFcPortsSfpDataRateCapability float64

		if o.FcPortsSfpDataRateCapabilityQueryParameter != nil {
			qrFcPortsSfpDataRateCapability = *o.FcPortsSfpDataRateCapabilityQueryParameter
		}
		qFcPortsSfpDataRateCapability := swag.FormatFloat64(qrFcPortsSfpDataRateCapability)
		if qFcPortsSfpDataRateCapability != "" {

			if err := r.SetQueryParam("fc_ports.sfp.data_rate_capability", qFcPortsSfpDataRateCapability); err != nil {
				return err
			}
		}
	}

	if o.FcPortsSfpPartNumberQueryParameter != nil {

		// query param fc_ports.sfp.part_number
		var qrFcPortsSfpPartNumber string

		if o.FcPortsSfpPartNumberQueryParameter != nil {
			qrFcPortsSfpPartNumber = *o.FcPortsSfpPartNumberQueryParameter
		}
		qFcPortsSfpPartNumber := qrFcPortsSfpPartNumber
		if qFcPortsSfpPartNumber != "" {

			if err := r.SetQueryParam("fc_ports.sfp.part_number", qFcPortsSfpPartNumber); err != nil {
				return err
			}
		}
	}

	if o.FcPortsSfpSerialNumberQueryParameter != nil {

		// query param fc_ports.sfp.serial_number
		var qrFcPortsSfpSerialNumber string

		if o.FcPortsSfpSerialNumberQueryParameter != nil {
			qrFcPortsSfpSerialNumber = *o.FcPortsSfpSerialNumberQueryParameter
		}
		qFcPortsSfpSerialNumber := qrFcPortsSfpSerialNumber
		if qFcPortsSfpSerialNumber != "" {

			if err := r.SetQueryParam("fc_ports.sfp.serial_number", qFcPortsSfpSerialNumber); err != nil {
				return err
			}
		}
	}

	if o.FcPortsSfpVendorQueryParameter != nil {

		// query param fc_ports.sfp.vendor
		var qrFcPortsSfpVendor string

		if o.FcPortsSfpVendorQueryParameter != nil {
			qrFcPortsSfpVendor = *o.FcPortsSfpVendorQueryParameter
		}
		qFcPortsSfpVendor := qrFcPortsSfpVendor
		if qFcPortsSfpVendor != "" {

			if err := r.SetQueryParam("fc_ports.sfp.vendor", qFcPortsSfpVendor); err != nil {
				return err
			}
		}
	}

	if o.FcPortsStateQueryParameter != nil {

		// query param fc_ports.state
		var qrFcPortsState string

		if o.FcPortsStateQueryParameter != nil {
			qrFcPortsState = *o.FcPortsStateQueryParameter
		}
		qFcPortsState := qrFcPortsState
		if qFcPortsState != "" {

			if err := r.SetQueryParam("fc_ports.state", qFcPortsState); err != nil {
				return err
			}
		}
	}

	if o.FcPortsWwnQueryParameter != nil {

		// query param fc_ports.wwn
		var qrFcPortsWwn string

		if o.FcPortsWwnQueryParameter != nil {
			qrFcPortsWwn = *o.FcPortsWwnQueryParameter
		}
		qFcPortsWwn := qrFcPortsWwn
		if qFcPortsWwn != "" {

			if err := r.SetQueryParam("fc_ports.wwn", qFcPortsWwn); err != nil {
				return err
			}
		}
	}

	if o.FieldsQueryParameter != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.FirmwareVersionQueryParameter != nil {

		// query param firmware_version
		var qrFirmwareVersion string

		if o.FirmwareVersionQueryParameter != nil {
			qrFirmwareVersion = *o.FirmwareVersionQueryParameter
		}
		qFirmwareVersion := qrFirmwareVersion
		if qFirmwareVersion != "" {

			if err := r.SetQueryParam("firmware_version", qFirmwareVersion); err != nil {
				return err
			}
		}
	}

	if o.IPAddressQueryParameter != nil {

		// query param ip_address
		var qrIPAddress string

		if o.IPAddressQueryParameter != nil {
			qrIPAddress = *o.IPAddressQueryParameter
		}
		qIPAddress := qrIPAddress
		if qIPAddress != "" {

			if err := r.SetQueryParam("ip_address", qIPAddress); err != nil {
				return err
			}
		}
	}

	if o.LastRebootReasonArgumentsCodeQueryParameter != nil {

		// query param last_reboot.reason.arguments.code
		var qrLastRebootReasonArgumentsCode string

		if o.LastRebootReasonArgumentsCodeQueryParameter != nil {
			qrLastRebootReasonArgumentsCode = *o.LastRebootReasonArgumentsCodeQueryParameter
		}
		qLastRebootReasonArgumentsCode := qrLastRebootReasonArgumentsCode
		if qLastRebootReasonArgumentsCode != "" {

			if err := r.SetQueryParam("last_reboot.reason.arguments.code", qLastRebootReasonArgumentsCode); err != nil {
				return err
			}
		}
	}

	if o.LastRebootReasonArgumentsMessageQueryParameter != nil {

		// query param last_reboot.reason.arguments.message
		var qrLastRebootReasonArgumentsMessage string

		if o.LastRebootReasonArgumentsMessageQueryParameter != nil {
			qrLastRebootReasonArgumentsMessage = *o.LastRebootReasonArgumentsMessageQueryParameter
		}
		qLastRebootReasonArgumentsMessage := qrLastRebootReasonArgumentsMessage
		if qLastRebootReasonArgumentsMessage != "" {

			if err := r.SetQueryParam("last_reboot.reason.arguments.message", qLastRebootReasonArgumentsMessage); err != nil {
				return err
			}
		}
	}

	if o.LastRebootReasonCodeQueryParameter != nil {

		// query param last_reboot.reason.code
		var qrLastRebootReasonCode string

		if o.LastRebootReasonCodeQueryParameter != nil {
			qrLastRebootReasonCode = *o.LastRebootReasonCodeQueryParameter
		}
		qLastRebootReasonCode := qrLastRebootReasonCode
		if qLastRebootReasonCode != "" {

			if err := r.SetQueryParam("last_reboot.reason.code", qLastRebootReasonCode); err != nil {
				return err
			}
		}
	}

	if o.LastRebootReasonMessageQueryParameter != nil {

		// query param last_reboot.reason.message
		var qrLastRebootReasonMessage string

		if o.LastRebootReasonMessageQueryParameter != nil {
			qrLastRebootReasonMessage = *o.LastRebootReasonMessageQueryParameter
		}
		qLastRebootReasonMessage := qrLastRebootReasonMessage
		if qLastRebootReasonMessage != "" {

			if err := r.SetQueryParam("last_reboot.reason.message", qLastRebootReasonMessage); err != nil {
				return err
			}
		}
	}

	if o.LastRebootReasonTargetQueryParameter != nil {

		// query param last_reboot.reason.target
		var qrLastRebootReasonTarget string

		if o.LastRebootReasonTargetQueryParameter != nil {
			qrLastRebootReasonTarget = *o.LastRebootReasonTargetQueryParameter
		}
		qLastRebootReasonTarget := qrLastRebootReasonTarget
		if qLastRebootReasonTarget != "" {

			if err := r.SetQueryParam("last_reboot.reason.target", qLastRebootReasonTarget); err != nil {
				return err
			}
		}
	}

	if o.LastRebootTimeQueryParameter != nil {

		// query param last_reboot.time
		var qrLastRebootTime string

		if o.LastRebootTimeQueryParameter != nil {
			qrLastRebootTime = *o.LastRebootTimeQueryParameter
		}
		qLastRebootTime := qrLastRebootTime
		if qLastRebootTime != "" {

			if err := r.SetQueryParam("last_reboot.time", qLastRebootTime); err != nil {
				return err
			}
		}
	}

	if o.ManagedByQueryParameter != nil {

		// query param managed_by
		var qrManagedBy string

		if o.ManagedByQueryParameter != nil {
			qrManagedBy = *o.ManagedByQueryParameter
		}
		qManagedBy := qrManagedBy
		if qManagedBy != "" {

			if err := r.SetQueryParam("managed_by", qManagedBy); err != nil {
				return err
			}
		}
	}

	if o.MaxRecordsQueryParameter != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecordsQueryParameter != nil {
			qrMaxRecords = *o.MaxRecordsQueryParameter
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.ModelQueryParameter != nil {

		// query param model
		var qrModel string

		if o.ModelQueryParameter != nil {
			qrModel = *o.ModelQueryParameter
		}
		qModel := qrModel
		if qModel != "" {

			if err := r.SetQueryParam("model", qModel); err != nil {
				return err
			}
		}
	}

	if o.MonitoringEnabledQueryParameter != nil {

		// query param monitoring_enabled
		var qrMonitoringEnabled bool

		if o.MonitoringEnabledQueryParameter != nil {
			qrMonitoringEnabled = *o.MonitoringEnabledQueryParameter
		}
		qMonitoringEnabled := swag.FormatBool(qrMonitoringEnabled)
		if qMonitoringEnabled != "" {

			if err := r.SetQueryParam("monitoring_enabled", qMonitoringEnabled); err != nil {
				return err
			}
		}
	}

	if o.NameQueryParameter != nil {

		// query param name
		var qrName string

		if o.NameQueryParameter != nil {
			qrName = *o.NameQueryParameter
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.OrderByQueryParameter != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.PathsNameQueryParameter != nil {

		// query param paths.name
		var qrPathsName string

		if o.PathsNameQueryParameter != nil {
			qrPathsName = *o.PathsNameQueryParameter
		}
		qPathsName := qrPathsName
		if qPathsName != "" {

			if err := r.SetQueryParam("paths.name", qPathsName); err != nil {
				return err
			}
		}
	}

	if o.PathsNodeNameQueryParameter != nil {

		// query param paths.node.name
		var qrPathsNodeName string

		if o.PathsNodeNameQueryParameter != nil {
			qrPathsNodeName = *o.PathsNodeNameQueryParameter
		}
		qPathsNodeName := qrPathsNodeName
		if qPathsNodeName != "" {

			if err := r.SetQueryParam("paths.node.name", qPathsNodeName); err != nil {
				return err
			}
		}
	}

	if o.PathsNodeUUIDQueryParameter != nil {

		// query param paths.node.uuid
		var qrPathsNodeUUID string

		if o.PathsNodeUUIDQueryParameter != nil {
			qrPathsNodeUUID = *o.PathsNodeUUIDQueryParameter
		}
		qPathsNodeUUID := qrPathsNodeUUID
		if qPathsNodeUUID != "" {

			if err := r.SetQueryParam("paths.node.uuid", qPathsNodeUUID); err != nil {
				return err
			}
		}
	}

	if o.PathsSourcePortIDQueryParameter != nil {

		// query param paths.source_port.id
		var qrPathsSourcePortID string

		if o.PathsSourcePortIDQueryParameter != nil {
			qrPathsSourcePortID = *o.PathsSourcePortIDQueryParameter
		}
		qPathsSourcePortID := qrPathsSourcePortID
		if qPathsSourcePortID != "" {

			if err := r.SetQueryParam("paths.source_port.id", qPathsSourcePortID); err != nil {
				return err
			}
		}
	}

	if o.PathsSourcePortNameQueryParameter != nil {

		// query param paths.source_port.name
		var qrPathsSourcePortName string

		if o.PathsSourcePortNameQueryParameter != nil {
			qrPathsSourcePortName = *o.PathsSourcePortNameQueryParameter
		}
		qPathsSourcePortName := qrPathsSourcePortName
		if qPathsSourcePortName != "" {

			if err := r.SetQueryParam("paths.source_port.name", qPathsSourcePortName); err != nil {
				return err
			}
		}
	}

	if o.PathsTargetPortIDQueryParameter != nil {

		// query param paths.target_port.id
		var qrPathsTargetPortID string

		if o.PathsTargetPortIDQueryParameter != nil {
			qrPathsTargetPortID = *o.PathsTargetPortIDQueryParameter
		}
		qPathsTargetPortID := qrPathsTargetPortID
		if qPathsTargetPortID != "" {

			if err := r.SetQueryParam("paths.target_port.id", qPathsTargetPortID); err != nil {
				return err
			}
		}
	}

	if o.PathsTargetPortNameQueryParameter != nil {

		// query param paths.target_port.name
		var qrPathsTargetPortName string

		if o.PathsTargetPortNameQueryParameter != nil {
			qrPathsTargetPortName = *o.PathsTargetPortNameQueryParameter
		}
		qPathsTargetPortName := qrPathsTargetPortName
		if qPathsTargetPortName != "" {

			if err := r.SetQueryParam("paths.target_port.name", qPathsTargetPortName); err != nil {
				return err
			}
		}
	}

	if o.PathsTargetPortWwnQueryParameter != nil {

		// query param paths.target_port.wwn
		var qrPathsTargetPortWwn string

		if o.PathsTargetPortWwnQueryParameter != nil {
			qrPathsTargetPortWwn = *o.PathsTargetPortWwnQueryParameter
		}
		qPathsTargetPortWwn := qrPathsTargetPortWwn
		if qPathsTargetPortWwn != "" {

			if err := r.SetQueryParam("paths.target_port.wwn", qPathsTargetPortWwn); err != nil {
				return err
			}
		}
	}

	if o.PowerSupplyUnitsNameQueryParameter != nil {

		// query param power_supply_units.name
		var qrPowerSupplyUnitsName string

		if o.PowerSupplyUnitsNameQueryParameter != nil {
			qrPowerSupplyUnitsName = *o.PowerSupplyUnitsNameQueryParameter
		}
		qPowerSupplyUnitsName := qrPowerSupplyUnitsName
		if qPowerSupplyUnitsName != "" {

			if err := r.SetQueryParam("power_supply_units.name", qPowerSupplyUnitsName); err != nil {
				return err
			}
		}
	}

	if o.PowerSupplyUnitsStateQueryParameter != nil {

		// query param power_supply_units.state
		var qrPowerSupplyUnitsState string

		if o.PowerSupplyUnitsStateQueryParameter != nil {
			qrPowerSupplyUnitsState = *o.PowerSupplyUnitsStateQueryParameter
		}
		qPowerSupplyUnitsState := qrPowerSupplyUnitsState
		if qPowerSupplyUnitsState != "" {

			if err := r.SetQueryParam("power_supply_units.state", qPowerSupplyUnitsState); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecordsQueryParameter != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecordsQueryParameter != nil {
			qrReturnRecords = *o.ReturnRecordsQueryParameter
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeoutQueryParameter != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeoutQueryParameter != nil {
			qrReturnTimeout = *o.ReturnTimeoutQueryParameter
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.SasPortsCablePartNumberQueryParameter != nil {

		// query param sas_ports.cable.part_number
		var qrSasPortsCablePartNumber string

		if o.SasPortsCablePartNumberQueryParameter != nil {
			qrSasPortsCablePartNumber = *o.SasPortsCablePartNumberQueryParameter
		}
		qSasPortsCablePartNumber := qrSasPortsCablePartNumber
		if qSasPortsCablePartNumber != "" {

			if err := r.SetQueryParam("sas_ports.cable.part_number", qSasPortsCablePartNumber); err != nil {
				return err
			}
		}
	}

	if o.SasPortsCableSerialNumberQueryParameter != nil {

		// query param sas_ports.cable.serial_number
		var qrSasPortsCableSerialNumber string

		if o.SasPortsCableSerialNumberQueryParameter != nil {
			qrSasPortsCableSerialNumber = *o.SasPortsCableSerialNumberQueryParameter
		}
		qSasPortsCableSerialNumber := qrSasPortsCableSerialNumber
		if qSasPortsCableSerialNumber != "" {

			if err := r.SetQueryParam("sas_ports.cable.serial_number", qSasPortsCableSerialNumber); err != nil {
				return err
			}
		}
	}

	if o.SasPortsCableTechnologyQueryParameter != nil {

		// query param sas_ports.cable.technology
		var qrSasPortsCableTechnology string

		if o.SasPortsCableTechnologyQueryParameter != nil {
			qrSasPortsCableTechnology = *o.SasPortsCableTechnologyQueryParameter
		}
		qSasPortsCableTechnology := qrSasPortsCableTechnology
		if qSasPortsCableTechnology != "" {

			if err := r.SetQueryParam("sas_ports.cable.technology", qSasPortsCableTechnology); err != nil {
				return err
			}
		}
	}

	if o.SasPortsCableVendorQueryParameter != nil {

		// query param sas_ports.cable.vendor
		var qrSasPortsCableVendor string

		if o.SasPortsCableVendorQueryParameter != nil {
			qrSasPortsCableVendor = *o.SasPortsCableVendorQueryParameter
		}
		qSasPortsCableVendor := qrSasPortsCableVendor
		if qSasPortsCableVendor != "" {

			if err := r.SetQueryParam("sas_ports.cable.vendor", qSasPortsCableVendor); err != nil {
				return err
			}
		}
	}

	if o.SasPortsDataRateCapabilityQueryParameter != nil {

		// query param sas_ports.data_rate_capability
		var qrSasPortsDataRateCapability float64

		if o.SasPortsDataRateCapabilityQueryParameter != nil {
			qrSasPortsDataRateCapability = *o.SasPortsDataRateCapabilityQueryParameter
		}
		qSasPortsDataRateCapability := swag.FormatFloat64(qrSasPortsDataRateCapability)
		if qSasPortsDataRateCapability != "" {

			if err := r.SetQueryParam("sas_ports.data_rate_capability", qSasPortsDataRateCapability); err != nil {
				return err
			}
		}
	}

	if o.SasPortsEnabledQueryParameter != nil {

		// query param sas_ports.enabled
		var qrSasPortsEnabled bool

		if o.SasPortsEnabledQueryParameter != nil {
			qrSasPortsEnabled = *o.SasPortsEnabledQueryParameter
		}
		qSasPortsEnabled := swag.FormatBool(qrSasPortsEnabled)
		if qSasPortsEnabled != "" {

			if err := r.SetQueryParam("sas_ports.enabled", qSasPortsEnabled); err != nil {
				return err
			}
		}
	}

	if o.SasPortsIDQueryParameter != nil {

		// query param sas_ports.id
		var qrSasPortsID int64

		if o.SasPortsIDQueryParameter != nil {
			qrSasPortsID = *o.SasPortsIDQueryParameter
		}
		qSasPortsID := swag.FormatInt64(qrSasPortsID)
		if qSasPortsID != "" {

			if err := r.SetQueryParam("sas_ports.id", qSasPortsID); err != nil {
				return err
			}
		}
	}

	if o.SasPortsNegotiatedDataRateQueryParameter != nil {

		// query param sas_ports.negotiated_data_rate
		var qrSasPortsNegotiatedDataRate float64

		if o.SasPortsNegotiatedDataRateQueryParameter != nil {
			qrSasPortsNegotiatedDataRate = *o.SasPortsNegotiatedDataRateQueryParameter
		}
		qSasPortsNegotiatedDataRate := swag.FormatFloat64(qrSasPortsNegotiatedDataRate)
		if qSasPortsNegotiatedDataRate != "" {

			if err := r.SetQueryParam("sas_ports.negotiated_data_rate", qSasPortsNegotiatedDataRate); err != nil {
				return err
			}
		}
	}

	if o.SasPortsPhy1StateQueryParameter != nil {

		// query param sas_ports.phy_1.state
		var qrSasPortsPhy1State string

		if o.SasPortsPhy1StateQueryParameter != nil {
			qrSasPortsPhy1State = *o.SasPortsPhy1StateQueryParameter
		}
		qSasPortsPhy1State := qrSasPortsPhy1State
		if qSasPortsPhy1State != "" {

			if err := r.SetQueryParam("sas_ports.phy_1.state", qSasPortsPhy1State); err != nil {
				return err
			}
		}
	}

	if o.SasPortsPhy2StateQueryParameter != nil {

		// query param sas_ports.phy_2.state
		var qrSasPortsPhy2State string

		if o.SasPortsPhy2StateQueryParameter != nil {
			qrSasPortsPhy2State = *o.SasPortsPhy2StateQueryParameter
		}
		qSasPortsPhy2State := qrSasPortsPhy2State
		if qSasPortsPhy2State != "" {

			if err := r.SetQueryParam("sas_ports.phy_2.state", qSasPortsPhy2State); err != nil {
				return err
			}
		}
	}

	if o.SasPortsPhy3StateQueryParameter != nil {

		// query param sas_ports.phy_3.state
		var qrSasPortsPhy3State string

		if o.SasPortsPhy3StateQueryParameter != nil {
			qrSasPortsPhy3State = *o.SasPortsPhy3StateQueryParameter
		}
		qSasPortsPhy3State := qrSasPortsPhy3State
		if qSasPortsPhy3State != "" {

			if err := r.SetQueryParam("sas_ports.phy_3.state", qSasPortsPhy3State); err != nil {
				return err
			}
		}
	}

	if o.SasPortsPhy4StateQueryParameter != nil {

		// query param sas_ports.phy_4.state
		var qrSasPortsPhy4State string

		if o.SasPortsPhy4StateQueryParameter != nil {
			qrSasPortsPhy4State = *o.SasPortsPhy4StateQueryParameter
		}
		qSasPortsPhy4State := qrSasPortsPhy4State
		if qSasPortsPhy4State != "" {

			if err := r.SetQueryParam("sas_ports.phy_4.state", qSasPortsPhy4State); err != nil {
				return err
			}
		}
	}

	if o.SasPortsStateQueryParameter != nil {

		// query param sas_ports.state
		var qrSasPortsState string

		if o.SasPortsStateQueryParameter != nil {
			qrSasPortsState = *o.SasPortsStateQueryParameter
		}
		qSasPortsState := qrSasPortsState
		if qSasPortsState != "" {

			if err := r.SetQueryParam("sas_ports.state", qSasPortsState); err != nil {
				return err
			}
		}
	}

	if o.SasPortsWwnQueryParameter != nil {

		// query param sas_ports.wwn
		var qrSasPortsWwn string

		if o.SasPortsWwnQueryParameter != nil {
			qrSasPortsWwn = *o.SasPortsWwnQueryParameter
		}
		qSasPortsWwn := qrSasPortsWwn
		if qSasPortsWwn != "" {

			if err := r.SetQueryParam("sas_ports.wwn", qSasPortsWwn); err != nil {
				return err
			}
		}
	}

	if o.SecurityEnabledQueryParameter != nil {

		// query param security_enabled
		var qrSecurityEnabled bool

		if o.SecurityEnabledQueryParameter != nil {
			qrSecurityEnabled = *o.SecurityEnabledQueryParameter
		}
		qSecurityEnabled := swag.FormatBool(qrSecurityEnabled)
		if qSecurityEnabled != "" {

			if err := r.SetQueryParam("security_enabled", qSecurityEnabled); err != nil {
				return err
			}
		}
	}

	if o.SerialNumberQueryParameter != nil {

		// query param serial_number
		var qrSerialNumber string

		if o.SerialNumberQueryParameter != nil {
			qrSerialNumber = *o.SerialNumberQueryParameter
		}
		qSerialNumber := qrSerialNumber
		if qSerialNumber != "" {

			if err := r.SetQueryParam("serial_number", qSerialNumber); err != nil {
				return err
			}
		}
	}

	if o.StateQueryParameter != nil {

		// query param state
		var qrState string

		if o.StateQueryParameter != nil {
			qrState = *o.StateQueryParameter
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if o.SymbolicNameQueryParameter != nil {

		// query param symbolic_name
		var qrSymbolicName string

		if o.SymbolicNameQueryParameter != nil {
			qrSymbolicName = *o.SymbolicNameQueryParameter
		}
		qSymbolicName := qrSymbolicName
		if qSymbolicName != "" {

			if err := r.SetQueryParam("symbolic_name", qSymbolicName); err != nil {
				return err
			}
		}
	}

	if o.TemperatureSensorMaximumQueryParameter != nil {

		// query param temperature_sensor.maximum
		var qrTemperatureSensorMaximum int64

		if o.TemperatureSensorMaximumQueryParameter != nil {
			qrTemperatureSensorMaximum = *o.TemperatureSensorMaximumQueryParameter
		}
		qTemperatureSensorMaximum := swag.FormatInt64(qrTemperatureSensorMaximum)
		if qTemperatureSensorMaximum != "" {

			if err := r.SetQueryParam("temperature_sensor.maximum", qTemperatureSensorMaximum); err != nil {
				return err
			}
		}
	}

	if o.TemperatureSensorMinimumQueryParameter != nil {

		// query param temperature_sensor.minimum
		var qrTemperatureSensorMinimum int64

		if o.TemperatureSensorMinimumQueryParameter != nil {
			qrTemperatureSensorMinimum = *o.TemperatureSensorMinimumQueryParameter
		}
		qTemperatureSensorMinimum := swag.FormatInt64(qrTemperatureSensorMinimum)
		if qTemperatureSensorMinimum != "" {

			if err := r.SetQueryParam("temperature_sensor.minimum", qTemperatureSensorMinimum); err != nil {
				return err
			}
		}
	}

	if o.TemperatureSensorNameQueryParameter != nil {

		// query param temperature_sensor.name
		var qrTemperatureSensorName string

		if o.TemperatureSensorNameQueryParameter != nil {
			qrTemperatureSensorName = *o.TemperatureSensorNameQueryParameter
		}
		qTemperatureSensorName := qrTemperatureSensorName
		if qTemperatureSensorName != "" {

			if err := r.SetQueryParam("temperature_sensor.name", qTemperatureSensorName); err != nil {
				return err
			}
		}
	}

	if o.TemperatureSensorReadingQueryParameter != nil {

		// query param temperature_sensor.reading
		var qrTemperatureSensorReading int64

		if o.TemperatureSensorReadingQueryParameter != nil {
			qrTemperatureSensorReading = *o.TemperatureSensorReadingQueryParameter
		}
		qTemperatureSensorReading := swag.FormatInt64(qrTemperatureSensorReading)
		if qTemperatureSensorReading != "" {

			if err := r.SetQueryParam("temperature_sensor.reading", qTemperatureSensorReading); err != nil {
				return err
			}
		}
	}

	if o.TemperatureSensorStateQueryParameter != nil {

		// query param temperature_sensor.state
		var qrTemperatureSensorState string

		if o.TemperatureSensorStateQueryParameter != nil {
			qrTemperatureSensorState = *o.TemperatureSensorStateQueryParameter
		}
		qTemperatureSensorState := qrTemperatureSensorState
		if qTemperatureSensorState != "" {

			if err := r.SetQueryParam("temperature_sensor.state", qTemperatureSensorState); err != nil {
				return err
			}
		}
	}

	if o.VendorQueryParameter != nil {

		// query param vendor
		var qrVendor string

		if o.VendorQueryParameter != nil {
			qrVendor = *o.VendorQueryParameter
		}
		qVendor := qrVendor
		if qVendor != "" {

			if err := r.SetQueryParam("vendor", qVendor); err != nil {
				return err
			}
		}
	}

	if o.WwnQueryParameter != nil {

		// query param wwn
		var qrWwn string

		if o.WwnQueryParameter != nil {
			qrWwn = *o.WwnQueryParameter
		}
		qWwn := qrWwn
		if qWwn != "" {

			if err := r.SetQueryParam("wwn", qWwn); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamStorageBridgeCollectionGet binds the parameter fields
func (o *StorageBridgeCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.FieldsQueryParameter

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamStorageBridgeCollectionGet binds the parameter order_by
func (o *StorageBridgeCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderByQueryParameter

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
