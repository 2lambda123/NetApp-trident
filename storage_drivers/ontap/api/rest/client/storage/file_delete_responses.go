// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/netapp/trident/storage_drivers/ontap/api/rest/models"
)

// FileDeleteReader is a Reader for the FileDelete structure.
type FileDeleteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FileDeleteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFileDeleteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewFileDeleteAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewFileDeleteDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewFileDeleteOK creates a FileDeleteOK with default headers values
func NewFileDeleteOK() *FileDeleteOK {
	return &FileDeleteOK{}
}

/* FileDeleteOK describes a response with status code 200, with default header values.

OK
*/
type FileDeleteOK struct {
}

func (o *FileDeleteOK) Error() string {
	return fmt.Sprintf("[DELETE /storage/volumes/{volume.uuid}/files/{path}][%d] fileDeleteOK ", 200)
}

func (o *FileDeleteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFileDeleteAccepted creates a FileDeleteAccepted with default headers values
func NewFileDeleteAccepted() *FileDeleteAccepted {
	return &FileDeleteAccepted{}
}

/* FileDeleteAccepted describes a response with status code 202, with default header values.

Accepted
*/
type FileDeleteAccepted struct {
	Payload *models.JobLinkResponse
}

func (o *FileDeleteAccepted) Error() string {
	return fmt.Sprintf("[DELETE /storage/volumes/{volume.uuid}/files/{path}][%d] fileDeleteAccepted  %+v", 202, o.Payload)
}
func (o *FileDeleteAccepted) GetPayload() *models.JobLinkResponse {
	return o.Payload
}

func (o *FileDeleteAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.JobLinkResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFileDeleteDefault creates a FileDeleteDefault with default headers values
func NewFileDeleteDefault(code int) *FileDeleteDefault {
	return &FileDeleteDefault{
		_statusCode: code,
	}
}

/* FileDeleteDefault describes a response with status code -1, with default header values.

 ONTAP Error Response Codes
| Error Code | Description |
| ---------- | ----------- |
| 131074 | No such file or directory. |
| 131102 | Read-only file system. |
| 131138 | Directory not empty. |
| 918235 | A volume with UUID {volume.uuid} was not found. |
| 6488081 | The {field} field is not supported for DELETE operations. |

*/
type FileDeleteDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the file delete default response
func (o *FileDeleteDefault) Code() int {
	return o._statusCode
}

func (o *FileDeleteDefault) Error() string {
	return fmt.Sprintf("[DELETE /storage/volumes/{volume.uuid}/files/{path}][%d] file_delete default  %+v", o._statusCode, o.Payload)
}
func (o *FileDeleteDefault) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *FileDeleteDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
