// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewQtreeCollectionGetParams creates a new QtreeCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewQtreeCollectionGetParams() *QtreeCollectionGetParams {
	return &QtreeCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewQtreeCollectionGetParamsWithTimeout creates a new QtreeCollectionGetParams object
// with the ability to set a timeout on a request.
func NewQtreeCollectionGetParamsWithTimeout(timeout time.Duration) *QtreeCollectionGetParams {
	return &QtreeCollectionGetParams{
		timeout: timeout,
	}
}

// NewQtreeCollectionGetParamsWithContext creates a new QtreeCollectionGetParams object
// with the ability to set a context for a request.
func NewQtreeCollectionGetParamsWithContext(ctx context.Context) *QtreeCollectionGetParams {
	return &QtreeCollectionGetParams{
		Context: ctx,
	}
}

// NewQtreeCollectionGetParamsWithHTTPClient creates a new QtreeCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewQtreeCollectionGetParamsWithHTTPClient(client *http.Client) *QtreeCollectionGetParams {
	return &QtreeCollectionGetParams{
		HTTPClient: client,
	}
}

/* QtreeCollectionGetParams contains all the parameters to send to the API endpoint
   for the qtree collection get operation.

   Typically these are written to a http.Request.
*/
type QtreeCollectionGetParams struct {

	/* ExportPolicyID.

	   Filter by export_policy.id
	*/
	ExportPolicyIDQueryParameter *int64

	/* ExportPolicyName.

	   Filter by export_policy.name
	*/
	ExportPolicyNameQueryParameter *string

	/* Fields.

	   Specify the fields to return.
	*/
	Fields []string

	/* ID.

	   Filter by id
	*/
	IDQueryParameter *int64

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecords *int64

	/* Name.

	   Filter by name
	*/
	NameQueryParameter *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderBy []string

	/* Path.

	   Filter by path
	*/
	PathQueryParameter *string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecords *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeout *int64

	/* SecurityStyle.

	   Filter by security_style
	*/
	SecurityStyleQueryParameter *string

	/* SvmName.

	   Filter by svm.name
	*/
	SVMNameQueryParameter *string

	/* SvmUUID.

	   Filter by svm.uuid
	*/
	SVMUUIDQueryParameter *string

	/* UnixPermissions.

	   Filter by unix_permissions
	*/
	UnixPermissionsQueryParameter *int64

	/* VolumeName.

	   Filter by volume.name
	*/
	VolumeNameQueryParameter *string

	/* VolumeUUID.

	   Filter by volume.uuid
	*/
	VolumeUUIDQueryParameter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the qtree collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *QtreeCollectionGetParams) WithDefaults() *QtreeCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the qtree collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *QtreeCollectionGetParams) SetDefaults() {
	var (
		returnRecordsDefault = bool(true)

		returnTimeoutDefault = int64(15)
	)

	val := QtreeCollectionGetParams{
		ReturnRecords: &returnRecordsDefault,
		ReturnTimeout: &returnTimeoutDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the qtree collection get params
func (o *QtreeCollectionGetParams) WithTimeout(timeout time.Duration) *QtreeCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the qtree collection get params
func (o *QtreeCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the qtree collection get params
func (o *QtreeCollectionGetParams) WithContext(ctx context.Context) *QtreeCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the qtree collection get params
func (o *QtreeCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the qtree collection get params
func (o *QtreeCollectionGetParams) WithHTTPClient(client *http.Client) *QtreeCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the qtree collection get params
func (o *QtreeCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithExportPolicyIDQueryParameter adds the exportPolicyID to the qtree collection get params
func (o *QtreeCollectionGetParams) WithExportPolicyIDQueryParameter(exportPolicyID *int64) *QtreeCollectionGetParams {
	o.SetExportPolicyIDQueryParameter(exportPolicyID)
	return o
}

// SetExportPolicyIDQueryParameter adds the exportPolicyId to the qtree collection get params
func (o *QtreeCollectionGetParams) SetExportPolicyIDQueryParameter(exportPolicyID *int64) {
	o.ExportPolicyIDQueryParameter = exportPolicyID
}

// WithExportPolicyNameQueryParameter adds the exportPolicyName to the qtree collection get params
func (o *QtreeCollectionGetParams) WithExportPolicyNameQueryParameter(exportPolicyName *string) *QtreeCollectionGetParams {
	o.SetExportPolicyNameQueryParameter(exportPolicyName)
	return o
}

// SetExportPolicyNameQueryParameter adds the exportPolicyName to the qtree collection get params
func (o *QtreeCollectionGetParams) SetExportPolicyNameQueryParameter(exportPolicyName *string) {
	o.ExportPolicyNameQueryParameter = exportPolicyName
}

// WithFields adds the fields to the qtree collection get params
func (o *QtreeCollectionGetParams) WithFields(fields []string) *QtreeCollectionGetParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the qtree collection get params
func (o *QtreeCollectionGetParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithIDQueryParameter adds the id to the qtree collection get params
func (o *QtreeCollectionGetParams) WithIDQueryParameter(id *int64) *QtreeCollectionGetParams {
	o.SetIDQueryParameter(id)
	return o
}

// SetIDQueryParameter adds the id to the qtree collection get params
func (o *QtreeCollectionGetParams) SetIDQueryParameter(id *int64) {
	o.IDQueryParameter = id
}

// WithMaxRecords adds the maxRecords to the qtree collection get params
func (o *QtreeCollectionGetParams) WithMaxRecords(maxRecords *int64) *QtreeCollectionGetParams {
	o.SetMaxRecords(maxRecords)
	return o
}

// SetMaxRecords adds the maxRecords to the qtree collection get params
func (o *QtreeCollectionGetParams) SetMaxRecords(maxRecords *int64) {
	o.MaxRecords = maxRecords
}

// WithNameQueryParameter adds the name to the qtree collection get params
func (o *QtreeCollectionGetParams) WithNameQueryParameter(name *string) *QtreeCollectionGetParams {
	o.SetNameQueryParameter(name)
	return o
}

// SetNameQueryParameter adds the name to the qtree collection get params
func (o *QtreeCollectionGetParams) SetNameQueryParameter(name *string) {
	o.NameQueryParameter = name
}

// WithOrderBy adds the orderBy to the qtree collection get params
func (o *QtreeCollectionGetParams) WithOrderBy(orderBy []string) *QtreeCollectionGetParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the qtree collection get params
func (o *QtreeCollectionGetParams) SetOrderBy(orderBy []string) {
	o.OrderBy = orderBy
}

// WithPathQueryParameter adds the path to the qtree collection get params
func (o *QtreeCollectionGetParams) WithPathQueryParameter(path *string) *QtreeCollectionGetParams {
	o.SetPathQueryParameter(path)
	return o
}

// SetPathQueryParameter adds the path to the qtree collection get params
func (o *QtreeCollectionGetParams) SetPathQueryParameter(path *string) {
	o.PathQueryParameter = path
}

// WithReturnRecords adds the returnRecords to the qtree collection get params
func (o *QtreeCollectionGetParams) WithReturnRecords(returnRecords *bool) *QtreeCollectionGetParams {
	o.SetReturnRecords(returnRecords)
	return o
}

// SetReturnRecords adds the returnRecords to the qtree collection get params
func (o *QtreeCollectionGetParams) SetReturnRecords(returnRecords *bool) {
	o.ReturnRecords = returnRecords
}

// WithReturnTimeout adds the returnTimeout to the qtree collection get params
func (o *QtreeCollectionGetParams) WithReturnTimeout(returnTimeout *int64) *QtreeCollectionGetParams {
	o.SetReturnTimeout(returnTimeout)
	return o
}

// SetReturnTimeout adds the returnTimeout to the qtree collection get params
func (o *QtreeCollectionGetParams) SetReturnTimeout(returnTimeout *int64) {
	o.ReturnTimeout = returnTimeout
}

// WithSecurityStyleQueryParameter adds the securityStyle to the qtree collection get params
func (o *QtreeCollectionGetParams) WithSecurityStyleQueryParameter(securityStyle *string) *QtreeCollectionGetParams {
	o.SetSecurityStyleQueryParameter(securityStyle)
	return o
}

// SetSecurityStyleQueryParameter adds the securityStyle to the qtree collection get params
func (o *QtreeCollectionGetParams) SetSecurityStyleQueryParameter(securityStyle *string) {
	o.SecurityStyleQueryParameter = securityStyle
}

// WithSVMNameQueryParameter adds the svmName to the qtree collection get params
func (o *QtreeCollectionGetParams) WithSVMNameQueryParameter(svmName *string) *QtreeCollectionGetParams {
	o.SetSVMNameQueryParameter(svmName)
	return o
}

// SetSVMNameQueryParameter adds the svmName to the qtree collection get params
func (o *QtreeCollectionGetParams) SetSVMNameQueryParameter(svmName *string) {
	o.SVMNameQueryParameter = svmName
}

// WithSVMUUIDQueryParameter adds the svmUUID to the qtree collection get params
func (o *QtreeCollectionGetParams) WithSVMUUIDQueryParameter(svmUUID *string) *QtreeCollectionGetParams {
	o.SetSVMUUIDQueryParameter(svmUUID)
	return o
}

// SetSVMUUIDQueryParameter adds the svmUuid to the qtree collection get params
func (o *QtreeCollectionGetParams) SetSVMUUIDQueryParameter(svmUUID *string) {
	o.SVMUUIDQueryParameter = svmUUID
}

// WithUnixPermissionsQueryParameter adds the unixPermissions to the qtree collection get params
func (o *QtreeCollectionGetParams) WithUnixPermissionsQueryParameter(unixPermissions *int64) *QtreeCollectionGetParams {
	o.SetUnixPermissionsQueryParameter(unixPermissions)
	return o
}

// SetUnixPermissionsQueryParameter adds the unixPermissions to the qtree collection get params
func (o *QtreeCollectionGetParams) SetUnixPermissionsQueryParameter(unixPermissions *int64) {
	o.UnixPermissionsQueryParameter = unixPermissions
}

// WithVolumeNameQueryParameter adds the volumeName to the qtree collection get params
func (o *QtreeCollectionGetParams) WithVolumeNameQueryParameter(volumeName *string) *QtreeCollectionGetParams {
	o.SetVolumeNameQueryParameter(volumeName)
	return o
}

// SetVolumeNameQueryParameter adds the volumeName to the qtree collection get params
func (o *QtreeCollectionGetParams) SetVolumeNameQueryParameter(volumeName *string) {
	o.VolumeNameQueryParameter = volumeName
}

// WithVolumeUUIDQueryParameter adds the volumeUUID to the qtree collection get params
func (o *QtreeCollectionGetParams) WithVolumeUUIDQueryParameter(volumeUUID *string) *QtreeCollectionGetParams {
	o.SetVolumeUUIDQueryParameter(volumeUUID)
	return o
}

// SetVolumeUUIDQueryParameter adds the volumeUuid to the qtree collection get params
func (o *QtreeCollectionGetParams) SetVolumeUUIDQueryParameter(volumeUUID *string) {
	o.VolumeUUIDQueryParameter = volumeUUID
}

// WriteToRequest writes these params to a swagger request
func (o *QtreeCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ExportPolicyIDQueryParameter != nil {

		// query param export_policy.id
		var qrExportPolicyID int64

		if o.ExportPolicyIDQueryParameter != nil {
			qrExportPolicyID = *o.ExportPolicyIDQueryParameter
		}
		qExportPolicyID := swag.FormatInt64(qrExportPolicyID)
		if qExportPolicyID != "" {

			if err := r.SetQueryParam("export_policy.id", qExportPolicyID); err != nil {
				return err
			}
		}
	}

	if o.ExportPolicyNameQueryParameter != nil {

		// query param export_policy.name
		var qrExportPolicyName string

		if o.ExportPolicyNameQueryParameter != nil {
			qrExportPolicyName = *o.ExportPolicyNameQueryParameter
		}
		qExportPolicyName := qrExportPolicyName
		if qExportPolicyName != "" {

			if err := r.SetQueryParam("export_policy.name", qExportPolicyName); err != nil {
				return err
			}
		}
	}

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.IDQueryParameter != nil {

		// query param id
		var qrID int64

		if o.IDQueryParameter != nil {
			qrID = *o.IDQueryParameter
		}
		qID := swag.FormatInt64(qrID)
		if qID != "" {

			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}
	}

	if o.MaxRecords != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecords != nil {
			qrMaxRecords = *o.MaxRecords
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.NameQueryParameter != nil {

		// query param name
		var qrName string

		if o.NameQueryParameter != nil {
			qrName = *o.NameQueryParameter
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.OrderBy != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.PathQueryParameter != nil {

		// query param path
		var qrPath string

		if o.PathQueryParameter != nil {
			qrPath = *o.PathQueryParameter
		}
		qPath := qrPath
		if qPath != "" {

			if err := r.SetQueryParam("path", qPath); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecords != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecords != nil {
			qrReturnRecords = *o.ReturnRecords
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeout != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeout != nil {
			qrReturnTimeout = *o.ReturnTimeout
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.SecurityStyleQueryParameter != nil {

		// query param security_style
		var qrSecurityStyle string

		if o.SecurityStyleQueryParameter != nil {
			qrSecurityStyle = *o.SecurityStyleQueryParameter
		}
		qSecurityStyle := qrSecurityStyle
		if qSecurityStyle != "" {

			if err := r.SetQueryParam("security_style", qSecurityStyle); err != nil {
				return err
			}
		}
	}

	if o.SVMNameQueryParameter != nil {

		// query param svm.name
		var qrSvmName string

		if o.SVMNameQueryParameter != nil {
			qrSvmName = *o.SVMNameQueryParameter
		}
		qSvmName := qrSvmName
		if qSvmName != "" {

			if err := r.SetQueryParam("svm.name", qSvmName); err != nil {
				return err
			}
		}
	}

	if o.SVMUUIDQueryParameter != nil {

		// query param svm.uuid
		var qrSvmUUID string

		if o.SVMUUIDQueryParameter != nil {
			qrSvmUUID = *o.SVMUUIDQueryParameter
		}
		qSvmUUID := qrSvmUUID
		if qSvmUUID != "" {

			if err := r.SetQueryParam("svm.uuid", qSvmUUID); err != nil {
				return err
			}
		}
	}

	if o.UnixPermissionsQueryParameter != nil {

		// query param unix_permissions
		var qrUnixPermissions int64

		if o.UnixPermissionsQueryParameter != nil {
			qrUnixPermissions = *o.UnixPermissionsQueryParameter
		}
		qUnixPermissions := swag.FormatInt64(qrUnixPermissions)
		if qUnixPermissions != "" {

			if err := r.SetQueryParam("unix_permissions", qUnixPermissions); err != nil {
				return err
			}
		}
	}

	if o.VolumeNameQueryParameter != nil {

		// query param volume.name
		var qrVolumeName string

		if o.VolumeNameQueryParameter != nil {
			qrVolumeName = *o.VolumeNameQueryParameter
		}
		qVolumeName := qrVolumeName
		if qVolumeName != "" {

			if err := r.SetQueryParam("volume.name", qVolumeName); err != nil {
				return err
			}
		}
	}

	if o.VolumeUUIDQueryParameter != nil {

		// query param volume.uuid
		var qrVolumeUUID string

		if o.VolumeUUIDQueryParameter != nil {
			qrVolumeUUID = *o.VolumeUUIDQueryParameter
		}
		qVolumeUUID := qrVolumeUUID
		if qVolumeUUID != "" {

			if err := r.SetQueryParam("volume.uuid", qVolumeUUID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamQtreeCollectionGet binds the parameter fields
func (o *QtreeCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamQtreeCollectionGet binds the parameter order_by
func (o *QtreeCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderBy

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
