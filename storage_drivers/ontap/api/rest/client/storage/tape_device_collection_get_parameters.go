// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewTapeDeviceCollectionGetParams creates a new TapeDeviceCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewTapeDeviceCollectionGetParams() *TapeDeviceCollectionGetParams {
	return &TapeDeviceCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewTapeDeviceCollectionGetParamsWithTimeout creates a new TapeDeviceCollectionGetParams object
// with the ability to set a timeout on a request.
func NewTapeDeviceCollectionGetParamsWithTimeout(timeout time.Duration) *TapeDeviceCollectionGetParams {
	return &TapeDeviceCollectionGetParams{
		timeout: timeout,
	}
}

// NewTapeDeviceCollectionGetParamsWithContext creates a new TapeDeviceCollectionGetParams object
// with the ability to set a context for a request.
func NewTapeDeviceCollectionGetParamsWithContext(ctx context.Context) *TapeDeviceCollectionGetParams {
	return &TapeDeviceCollectionGetParams{
		Context: ctx,
	}
}

// NewTapeDeviceCollectionGetParamsWithHTTPClient creates a new TapeDeviceCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewTapeDeviceCollectionGetParamsWithHTTPClient(client *http.Client) *TapeDeviceCollectionGetParams {
	return &TapeDeviceCollectionGetParams{
		HTTPClient: client,
	}
}

/*
TapeDeviceCollectionGetParams contains all the parameters to send to the API endpoint

	for the tape device collection get operation.

	Typically these are written to a http.Request.
*/
type TapeDeviceCollectionGetParams struct {

	/* AliasMapping.

	   Filter by alias.mapping
	*/
	AliasMappingQueryParameter *string

	/* AliasName.

	   Filter by alias.name
	*/
	AliasNameQueryParameter *string

	/* AliasesMapping.

	   Filter by aliases.mapping
	*/
	AliasesMappingQueryParameter *string

	/* AliasesName.

	   Filter by aliases.name
	*/
	AliasesNameQueryParameter *string

	/* BlockNumber.

	   Filter by block_number
	*/
	BlockNumberQueryParameter *int64

	/* Density.

	   Filter by density
	*/
	DensityQueryParameter *string

	/* Description.

	   Filter by description
	*/
	DescriptionQueryParameter *string

	/* DeviceID.

	   Filter by device_id
	*/
	DeviceIDQueryParameter *string

	/* DeviceNamesNoRewindDevice.

	   Filter by device_names.no_rewind_device
	*/
	DeviceNamesNoRewindDeviceQueryParameter *string

	/* DeviceNamesRewindDevice.

	   Filter by device_names.rewind_device
	*/
	DeviceNamesRewindDeviceQueryParameter *string

	/* DeviceNamesUnloadReloadDevice.

	   Filter by device_names.unload_reload_device
	*/
	DeviceNamesUnloadReloadDeviceQueryParameter *string

	/* DeviceState.

	   Filter by device_state
	*/
	DeviceStateQueryParameter *string

	/* Fields.

	   Specify the fields to return.
	*/
	FieldsQueryParameter []string

	/* FileNumber.

	   Filter by file_number
	*/
	FileNumberQueryParameter *int64

	/* Formats.

	   Filter by formats
	*/
	FormatsQueryParameter *string

	/* Interface.

	   Filter by interface
	*/
	InterfaceQueryParameter *string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecordsQueryParameter *int64

	/* NodeName.

	   Filter by node.name
	*/
	NodeNameQueryParameter *string

	/* NodeUUID.

	   Filter by node.uuid
	*/
	NodeUUIDQueryParameter *string

	/* Online.

	   Filter by online
	*/
	OnlineQueryParameter *bool

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderByQueryParameter []string

	/* ReservationType.

	   Filter by reservation_type
	*/
	ReservationTypeQueryParameter *string

	/* ResidualCount.

	   Filter by residual_count
	*/
	ResidualCountQueryParameter *int64

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecordsQueryParameter *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeoutQueryParameter *int64

	/* SerialNumber.

	   Filter by serial_number
	*/
	SerialNumberQueryParameter *string

	/* StoragePortName.

	   Filter by storage_port.name
	*/
	StoragePortNameQueryParameter *string

	/* Type.

	   Filter by type
	*/
	TypeQueryParameter *string

	/* Wwnn.

	   Filter by wwnn
	*/
	WwnnQueryParameter *string

	/* Wwpn.

	   Filter by wwpn
	*/
	WwpnQueryParameter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the tape device collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *TapeDeviceCollectionGetParams) WithDefaults() *TapeDeviceCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the tape device collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *TapeDeviceCollectionGetParams) SetDefaults() {
	var (
		returnRecordsQueryParameterDefault = bool(true)

		returnTimeoutQueryParameterDefault = int64(15)
	)

	val := TapeDeviceCollectionGetParams{
		ReturnRecordsQueryParameter: &returnRecordsQueryParameterDefault,
		ReturnTimeoutQueryParameter: &returnTimeoutQueryParameterDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) WithTimeout(timeout time.Duration) *TapeDeviceCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) WithContext(ctx context.Context) *TapeDeviceCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) WithHTTPClient(client *http.Client) *TapeDeviceCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAliasMappingQueryParameter adds the aliasMapping to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) WithAliasMappingQueryParameter(aliasMapping *string) *TapeDeviceCollectionGetParams {
	o.SetAliasMappingQueryParameter(aliasMapping)
	return o
}

// SetAliasMappingQueryParameter adds the aliasMapping to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) SetAliasMappingQueryParameter(aliasMapping *string) {
	o.AliasMappingQueryParameter = aliasMapping
}

// WithAliasNameQueryParameter adds the aliasName to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) WithAliasNameQueryParameter(aliasName *string) *TapeDeviceCollectionGetParams {
	o.SetAliasNameQueryParameter(aliasName)
	return o
}

// SetAliasNameQueryParameter adds the aliasName to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) SetAliasNameQueryParameter(aliasName *string) {
	o.AliasNameQueryParameter = aliasName
}

// WithAliasesMappingQueryParameter adds the aliasesMapping to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) WithAliasesMappingQueryParameter(aliasesMapping *string) *TapeDeviceCollectionGetParams {
	o.SetAliasesMappingQueryParameter(aliasesMapping)
	return o
}

// SetAliasesMappingQueryParameter adds the aliasesMapping to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) SetAliasesMappingQueryParameter(aliasesMapping *string) {
	o.AliasesMappingQueryParameter = aliasesMapping
}

// WithAliasesNameQueryParameter adds the aliasesName to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) WithAliasesNameQueryParameter(aliasesName *string) *TapeDeviceCollectionGetParams {
	o.SetAliasesNameQueryParameter(aliasesName)
	return o
}

// SetAliasesNameQueryParameter adds the aliasesName to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) SetAliasesNameQueryParameter(aliasesName *string) {
	o.AliasesNameQueryParameter = aliasesName
}

// WithBlockNumberQueryParameter adds the blockNumber to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) WithBlockNumberQueryParameter(blockNumber *int64) *TapeDeviceCollectionGetParams {
	o.SetBlockNumberQueryParameter(blockNumber)
	return o
}

// SetBlockNumberQueryParameter adds the blockNumber to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) SetBlockNumberQueryParameter(blockNumber *int64) {
	o.BlockNumberQueryParameter = blockNumber
}

// WithDensityQueryParameter adds the density to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) WithDensityQueryParameter(density *string) *TapeDeviceCollectionGetParams {
	o.SetDensityQueryParameter(density)
	return o
}

// SetDensityQueryParameter adds the density to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) SetDensityQueryParameter(density *string) {
	o.DensityQueryParameter = density
}

// WithDescriptionQueryParameter adds the description to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) WithDescriptionQueryParameter(description *string) *TapeDeviceCollectionGetParams {
	o.SetDescriptionQueryParameter(description)
	return o
}

// SetDescriptionQueryParameter adds the description to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) SetDescriptionQueryParameter(description *string) {
	o.DescriptionQueryParameter = description
}

// WithDeviceIDQueryParameter adds the deviceID to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) WithDeviceIDQueryParameter(deviceID *string) *TapeDeviceCollectionGetParams {
	o.SetDeviceIDQueryParameter(deviceID)
	return o
}

// SetDeviceIDQueryParameter adds the deviceId to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) SetDeviceIDQueryParameter(deviceID *string) {
	o.DeviceIDQueryParameter = deviceID
}

// WithDeviceNamesNoRewindDeviceQueryParameter adds the deviceNamesNoRewindDevice to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) WithDeviceNamesNoRewindDeviceQueryParameter(deviceNamesNoRewindDevice *string) *TapeDeviceCollectionGetParams {
	o.SetDeviceNamesNoRewindDeviceQueryParameter(deviceNamesNoRewindDevice)
	return o
}

// SetDeviceNamesNoRewindDeviceQueryParameter adds the deviceNamesNoRewindDevice to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) SetDeviceNamesNoRewindDeviceQueryParameter(deviceNamesNoRewindDevice *string) {
	o.DeviceNamesNoRewindDeviceQueryParameter = deviceNamesNoRewindDevice
}

// WithDeviceNamesRewindDeviceQueryParameter adds the deviceNamesRewindDevice to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) WithDeviceNamesRewindDeviceQueryParameter(deviceNamesRewindDevice *string) *TapeDeviceCollectionGetParams {
	o.SetDeviceNamesRewindDeviceQueryParameter(deviceNamesRewindDevice)
	return o
}

// SetDeviceNamesRewindDeviceQueryParameter adds the deviceNamesRewindDevice to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) SetDeviceNamesRewindDeviceQueryParameter(deviceNamesRewindDevice *string) {
	o.DeviceNamesRewindDeviceQueryParameter = deviceNamesRewindDevice
}

// WithDeviceNamesUnloadReloadDeviceQueryParameter adds the deviceNamesUnloadReloadDevice to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) WithDeviceNamesUnloadReloadDeviceQueryParameter(deviceNamesUnloadReloadDevice *string) *TapeDeviceCollectionGetParams {
	o.SetDeviceNamesUnloadReloadDeviceQueryParameter(deviceNamesUnloadReloadDevice)
	return o
}

// SetDeviceNamesUnloadReloadDeviceQueryParameter adds the deviceNamesUnloadReloadDevice to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) SetDeviceNamesUnloadReloadDeviceQueryParameter(deviceNamesUnloadReloadDevice *string) {
	o.DeviceNamesUnloadReloadDeviceQueryParameter = deviceNamesUnloadReloadDevice
}

// WithDeviceStateQueryParameter adds the deviceState to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) WithDeviceStateQueryParameter(deviceState *string) *TapeDeviceCollectionGetParams {
	o.SetDeviceStateQueryParameter(deviceState)
	return o
}

// SetDeviceStateQueryParameter adds the deviceState to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) SetDeviceStateQueryParameter(deviceState *string) {
	o.DeviceStateQueryParameter = deviceState
}

// WithFieldsQueryParameter adds the fields to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) WithFieldsQueryParameter(fields []string) *TapeDeviceCollectionGetParams {
	o.SetFieldsQueryParameter(fields)
	return o
}

// SetFieldsQueryParameter adds the fields to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) SetFieldsQueryParameter(fields []string) {
	o.FieldsQueryParameter = fields
}

// WithFileNumberQueryParameter adds the fileNumber to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) WithFileNumberQueryParameter(fileNumber *int64) *TapeDeviceCollectionGetParams {
	o.SetFileNumberQueryParameter(fileNumber)
	return o
}

// SetFileNumberQueryParameter adds the fileNumber to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) SetFileNumberQueryParameter(fileNumber *int64) {
	o.FileNumberQueryParameter = fileNumber
}

// WithFormatsQueryParameter adds the formats to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) WithFormatsQueryParameter(formats *string) *TapeDeviceCollectionGetParams {
	o.SetFormatsQueryParameter(formats)
	return o
}

// SetFormatsQueryParameter adds the formats to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) SetFormatsQueryParameter(formats *string) {
	o.FormatsQueryParameter = formats
}

// WithInterfaceQueryParameter adds the interfaceVar to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) WithInterfaceQueryParameter(interfaceVar *string) *TapeDeviceCollectionGetParams {
	o.SetInterfaceQueryParameter(interfaceVar)
	return o
}

// SetInterfaceQueryParameter adds the interface to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) SetInterfaceQueryParameter(interfaceVar *string) {
	o.InterfaceQueryParameter = interfaceVar
}

// WithMaxRecordsQueryParameter adds the maxRecords to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) WithMaxRecordsQueryParameter(maxRecords *int64) *TapeDeviceCollectionGetParams {
	o.SetMaxRecordsQueryParameter(maxRecords)
	return o
}

// SetMaxRecordsQueryParameter adds the maxRecords to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) SetMaxRecordsQueryParameter(maxRecords *int64) {
	o.MaxRecordsQueryParameter = maxRecords
}

// WithNodeNameQueryParameter adds the nodeName to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) WithNodeNameQueryParameter(nodeName *string) *TapeDeviceCollectionGetParams {
	o.SetNodeNameQueryParameter(nodeName)
	return o
}

// SetNodeNameQueryParameter adds the nodeName to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) SetNodeNameQueryParameter(nodeName *string) {
	o.NodeNameQueryParameter = nodeName
}

// WithNodeUUIDQueryParameter adds the nodeUUID to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) WithNodeUUIDQueryParameter(nodeUUID *string) *TapeDeviceCollectionGetParams {
	o.SetNodeUUIDQueryParameter(nodeUUID)
	return o
}

// SetNodeUUIDQueryParameter adds the nodeUuid to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) SetNodeUUIDQueryParameter(nodeUUID *string) {
	o.NodeUUIDQueryParameter = nodeUUID
}

// WithOnlineQueryParameter adds the online to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) WithOnlineQueryParameter(online *bool) *TapeDeviceCollectionGetParams {
	o.SetOnlineQueryParameter(online)
	return o
}

// SetOnlineQueryParameter adds the online to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) SetOnlineQueryParameter(online *bool) {
	o.OnlineQueryParameter = online
}

// WithOrderByQueryParameter adds the orderBy to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) WithOrderByQueryParameter(orderBy []string) *TapeDeviceCollectionGetParams {
	o.SetOrderByQueryParameter(orderBy)
	return o
}

// SetOrderByQueryParameter adds the orderBy to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) SetOrderByQueryParameter(orderBy []string) {
	o.OrderByQueryParameter = orderBy
}

// WithReservationTypeQueryParameter adds the reservationType to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) WithReservationTypeQueryParameter(reservationType *string) *TapeDeviceCollectionGetParams {
	o.SetReservationTypeQueryParameter(reservationType)
	return o
}

// SetReservationTypeQueryParameter adds the reservationType to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) SetReservationTypeQueryParameter(reservationType *string) {
	o.ReservationTypeQueryParameter = reservationType
}

// WithResidualCountQueryParameter adds the residualCount to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) WithResidualCountQueryParameter(residualCount *int64) *TapeDeviceCollectionGetParams {
	o.SetResidualCountQueryParameter(residualCount)
	return o
}

// SetResidualCountQueryParameter adds the residualCount to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) SetResidualCountQueryParameter(residualCount *int64) {
	o.ResidualCountQueryParameter = residualCount
}

// WithReturnRecordsQueryParameter adds the returnRecords to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) WithReturnRecordsQueryParameter(returnRecords *bool) *TapeDeviceCollectionGetParams {
	o.SetReturnRecordsQueryParameter(returnRecords)
	return o
}

// SetReturnRecordsQueryParameter adds the returnRecords to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) SetReturnRecordsQueryParameter(returnRecords *bool) {
	o.ReturnRecordsQueryParameter = returnRecords
}

// WithReturnTimeoutQueryParameter adds the returnTimeout to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) WithReturnTimeoutQueryParameter(returnTimeout *int64) *TapeDeviceCollectionGetParams {
	o.SetReturnTimeoutQueryParameter(returnTimeout)
	return o
}

// SetReturnTimeoutQueryParameter adds the returnTimeout to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) SetReturnTimeoutQueryParameter(returnTimeout *int64) {
	o.ReturnTimeoutQueryParameter = returnTimeout
}

// WithSerialNumberQueryParameter adds the serialNumber to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) WithSerialNumberQueryParameter(serialNumber *string) *TapeDeviceCollectionGetParams {
	o.SetSerialNumberQueryParameter(serialNumber)
	return o
}

// SetSerialNumberQueryParameter adds the serialNumber to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) SetSerialNumberQueryParameter(serialNumber *string) {
	o.SerialNumberQueryParameter = serialNumber
}

// WithStoragePortNameQueryParameter adds the storagePortName to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) WithStoragePortNameQueryParameter(storagePortName *string) *TapeDeviceCollectionGetParams {
	o.SetStoragePortNameQueryParameter(storagePortName)
	return o
}

// SetStoragePortNameQueryParameter adds the storagePortName to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) SetStoragePortNameQueryParameter(storagePortName *string) {
	o.StoragePortNameQueryParameter = storagePortName
}

// WithTypeQueryParameter adds the typeVar to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) WithTypeQueryParameter(typeVar *string) *TapeDeviceCollectionGetParams {
	o.SetTypeQueryParameter(typeVar)
	return o
}

// SetTypeQueryParameter adds the type to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) SetTypeQueryParameter(typeVar *string) {
	o.TypeQueryParameter = typeVar
}

// WithWwnnQueryParameter adds the wwnn to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) WithWwnnQueryParameter(wwnn *string) *TapeDeviceCollectionGetParams {
	o.SetWwnnQueryParameter(wwnn)
	return o
}

// SetWwnnQueryParameter adds the wwnn to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) SetWwnnQueryParameter(wwnn *string) {
	o.WwnnQueryParameter = wwnn
}

// WithWwpnQueryParameter adds the wwpn to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) WithWwpnQueryParameter(wwpn *string) *TapeDeviceCollectionGetParams {
	o.SetWwpnQueryParameter(wwpn)
	return o
}

// SetWwpnQueryParameter adds the wwpn to the tape device collection get params
func (o *TapeDeviceCollectionGetParams) SetWwpnQueryParameter(wwpn *string) {
	o.WwpnQueryParameter = wwpn
}

// WriteToRequest writes these params to a swagger request
func (o *TapeDeviceCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AliasMappingQueryParameter != nil {

		// query param alias.mapping
		var qrAliasMapping string

		if o.AliasMappingQueryParameter != nil {
			qrAliasMapping = *o.AliasMappingQueryParameter
		}
		qAliasMapping := qrAliasMapping
		if qAliasMapping != "" {

			if err := r.SetQueryParam("alias.mapping", qAliasMapping); err != nil {
				return err
			}
		}
	}

	if o.AliasNameQueryParameter != nil {

		// query param alias.name
		var qrAliasName string

		if o.AliasNameQueryParameter != nil {
			qrAliasName = *o.AliasNameQueryParameter
		}
		qAliasName := qrAliasName
		if qAliasName != "" {

			if err := r.SetQueryParam("alias.name", qAliasName); err != nil {
				return err
			}
		}
	}

	if o.AliasesMappingQueryParameter != nil {

		// query param aliases.mapping
		var qrAliasesMapping string

		if o.AliasesMappingQueryParameter != nil {
			qrAliasesMapping = *o.AliasesMappingQueryParameter
		}
		qAliasesMapping := qrAliasesMapping
		if qAliasesMapping != "" {

			if err := r.SetQueryParam("aliases.mapping", qAliasesMapping); err != nil {
				return err
			}
		}
	}

	if o.AliasesNameQueryParameter != nil {

		// query param aliases.name
		var qrAliasesName string

		if o.AliasesNameQueryParameter != nil {
			qrAliasesName = *o.AliasesNameQueryParameter
		}
		qAliasesName := qrAliasesName
		if qAliasesName != "" {

			if err := r.SetQueryParam("aliases.name", qAliasesName); err != nil {
				return err
			}
		}
	}

	if o.BlockNumberQueryParameter != nil {

		// query param block_number
		var qrBlockNumber int64

		if o.BlockNumberQueryParameter != nil {
			qrBlockNumber = *o.BlockNumberQueryParameter
		}
		qBlockNumber := swag.FormatInt64(qrBlockNumber)
		if qBlockNumber != "" {

			if err := r.SetQueryParam("block_number", qBlockNumber); err != nil {
				return err
			}
		}
	}

	if o.DensityQueryParameter != nil {

		// query param density
		var qrDensity string

		if o.DensityQueryParameter != nil {
			qrDensity = *o.DensityQueryParameter
		}
		qDensity := qrDensity
		if qDensity != "" {

			if err := r.SetQueryParam("density", qDensity); err != nil {
				return err
			}
		}
	}

	if o.DescriptionQueryParameter != nil {

		// query param description
		var qrDescription string

		if o.DescriptionQueryParameter != nil {
			qrDescription = *o.DescriptionQueryParameter
		}
		qDescription := qrDescription
		if qDescription != "" {

			if err := r.SetQueryParam("description", qDescription); err != nil {
				return err
			}
		}
	}

	if o.DeviceIDQueryParameter != nil {

		// query param device_id
		var qrDeviceID string

		if o.DeviceIDQueryParameter != nil {
			qrDeviceID = *o.DeviceIDQueryParameter
		}
		qDeviceID := qrDeviceID
		if qDeviceID != "" {

			if err := r.SetQueryParam("device_id", qDeviceID); err != nil {
				return err
			}
		}
	}

	if o.DeviceNamesNoRewindDeviceQueryParameter != nil {

		// query param device_names.no_rewind_device
		var qrDeviceNamesNoRewindDevice string

		if o.DeviceNamesNoRewindDeviceQueryParameter != nil {
			qrDeviceNamesNoRewindDevice = *o.DeviceNamesNoRewindDeviceQueryParameter
		}
		qDeviceNamesNoRewindDevice := qrDeviceNamesNoRewindDevice
		if qDeviceNamesNoRewindDevice != "" {

			if err := r.SetQueryParam("device_names.no_rewind_device", qDeviceNamesNoRewindDevice); err != nil {
				return err
			}
		}
	}

	if o.DeviceNamesRewindDeviceQueryParameter != nil {

		// query param device_names.rewind_device
		var qrDeviceNamesRewindDevice string

		if o.DeviceNamesRewindDeviceQueryParameter != nil {
			qrDeviceNamesRewindDevice = *o.DeviceNamesRewindDeviceQueryParameter
		}
		qDeviceNamesRewindDevice := qrDeviceNamesRewindDevice
		if qDeviceNamesRewindDevice != "" {

			if err := r.SetQueryParam("device_names.rewind_device", qDeviceNamesRewindDevice); err != nil {
				return err
			}
		}
	}

	if o.DeviceNamesUnloadReloadDeviceQueryParameter != nil {

		// query param device_names.unload_reload_device
		var qrDeviceNamesUnloadReloadDevice string

		if o.DeviceNamesUnloadReloadDeviceQueryParameter != nil {
			qrDeviceNamesUnloadReloadDevice = *o.DeviceNamesUnloadReloadDeviceQueryParameter
		}
		qDeviceNamesUnloadReloadDevice := qrDeviceNamesUnloadReloadDevice
		if qDeviceNamesUnloadReloadDevice != "" {

			if err := r.SetQueryParam("device_names.unload_reload_device", qDeviceNamesUnloadReloadDevice); err != nil {
				return err
			}
		}
	}

	if o.DeviceStateQueryParameter != nil {

		// query param device_state
		var qrDeviceState string

		if o.DeviceStateQueryParameter != nil {
			qrDeviceState = *o.DeviceStateQueryParameter
		}
		qDeviceState := qrDeviceState
		if qDeviceState != "" {

			if err := r.SetQueryParam("device_state", qDeviceState); err != nil {
				return err
			}
		}
	}

	if o.FieldsQueryParameter != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.FileNumberQueryParameter != nil {

		// query param file_number
		var qrFileNumber int64

		if o.FileNumberQueryParameter != nil {
			qrFileNumber = *o.FileNumberQueryParameter
		}
		qFileNumber := swag.FormatInt64(qrFileNumber)
		if qFileNumber != "" {

			if err := r.SetQueryParam("file_number", qFileNumber); err != nil {
				return err
			}
		}
	}

	if o.FormatsQueryParameter != nil {

		// query param formats
		var qrFormats string

		if o.FormatsQueryParameter != nil {
			qrFormats = *o.FormatsQueryParameter
		}
		qFormats := qrFormats
		if qFormats != "" {

			if err := r.SetQueryParam("formats", qFormats); err != nil {
				return err
			}
		}
	}

	if o.InterfaceQueryParameter != nil {

		// query param interface
		var qrInterface string

		if o.InterfaceQueryParameter != nil {
			qrInterface = *o.InterfaceQueryParameter
		}
		qInterface := qrInterface
		if qInterface != "" {

			if err := r.SetQueryParam("interface", qInterface); err != nil {
				return err
			}
		}
	}

	if o.MaxRecordsQueryParameter != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecordsQueryParameter != nil {
			qrMaxRecords = *o.MaxRecordsQueryParameter
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.NodeNameQueryParameter != nil {

		// query param node.name
		var qrNodeName string

		if o.NodeNameQueryParameter != nil {
			qrNodeName = *o.NodeNameQueryParameter
		}
		qNodeName := qrNodeName
		if qNodeName != "" {

			if err := r.SetQueryParam("node.name", qNodeName); err != nil {
				return err
			}
		}
	}

	if o.NodeUUIDQueryParameter != nil {

		// query param node.uuid
		var qrNodeUUID string

		if o.NodeUUIDQueryParameter != nil {
			qrNodeUUID = *o.NodeUUIDQueryParameter
		}
		qNodeUUID := qrNodeUUID
		if qNodeUUID != "" {

			if err := r.SetQueryParam("node.uuid", qNodeUUID); err != nil {
				return err
			}
		}
	}

	if o.OnlineQueryParameter != nil {

		// query param online
		var qrOnline bool

		if o.OnlineQueryParameter != nil {
			qrOnline = *o.OnlineQueryParameter
		}
		qOnline := swag.FormatBool(qrOnline)
		if qOnline != "" {

			if err := r.SetQueryParam("online", qOnline); err != nil {
				return err
			}
		}
	}

	if o.OrderByQueryParameter != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.ReservationTypeQueryParameter != nil {

		// query param reservation_type
		var qrReservationType string

		if o.ReservationTypeQueryParameter != nil {
			qrReservationType = *o.ReservationTypeQueryParameter
		}
		qReservationType := qrReservationType
		if qReservationType != "" {

			if err := r.SetQueryParam("reservation_type", qReservationType); err != nil {
				return err
			}
		}
	}

	if o.ResidualCountQueryParameter != nil {

		// query param residual_count
		var qrResidualCount int64

		if o.ResidualCountQueryParameter != nil {
			qrResidualCount = *o.ResidualCountQueryParameter
		}
		qResidualCount := swag.FormatInt64(qrResidualCount)
		if qResidualCount != "" {

			if err := r.SetQueryParam("residual_count", qResidualCount); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecordsQueryParameter != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecordsQueryParameter != nil {
			qrReturnRecords = *o.ReturnRecordsQueryParameter
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeoutQueryParameter != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeoutQueryParameter != nil {
			qrReturnTimeout = *o.ReturnTimeoutQueryParameter
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.SerialNumberQueryParameter != nil {

		// query param serial_number
		var qrSerialNumber string

		if o.SerialNumberQueryParameter != nil {
			qrSerialNumber = *o.SerialNumberQueryParameter
		}
		qSerialNumber := qrSerialNumber
		if qSerialNumber != "" {

			if err := r.SetQueryParam("serial_number", qSerialNumber); err != nil {
				return err
			}
		}
	}

	if o.StoragePortNameQueryParameter != nil {

		// query param storage_port.name
		var qrStoragePortName string

		if o.StoragePortNameQueryParameter != nil {
			qrStoragePortName = *o.StoragePortNameQueryParameter
		}
		qStoragePortName := qrStoragePortName
		if qStoragePortName != "" {

			if err := r.SetQueryParam("storage_port.name", qStoragePortName); err != nil {
				return err
			}
		}
	}

	if o.TypeQueryParameter != nil {

		// query param type
		var qrType string

		if o.TypeQueryParameter != nil {
			qrType = *o.TypeQueryParameter
		}
		qType := qrType
		if qType != "" {

			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}
	}

	if o.WwnnQueryParameter != nil {

		// query param wwnn
		var qrWwnn string

		if o.WwnnQueryParameter != nil {
			qrWwnn = *o.WwnnQueryParameter
		}
		qWwnn := qrWwnn
		if qWwnn != "" {

			if err := r.SetQueryParam("wwnn", qWwnn); err != nil {
				return err
			}
		}
	}

	if o.WwpnQueryParameter != nil {

		// query param wwpn
		var qrWwpn string

		if o.WwpnQueryParameter != nil {
			qrWwpn = *o.WwpnQueryParameter
		}
		qWwpn := qrWwpn
		if qWwpn != "" {

			if err := r.SetQueryParam("wwpn", qWwpn); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamTapeDeviceCollectionGet binds the parameter fields
func (o *TapeDeviceCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.FieldsQueryParameter

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamTapeDeviceCollectionGet binds the parameter order_by
func (o *TapeDeviceCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderByQueryParameter

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
