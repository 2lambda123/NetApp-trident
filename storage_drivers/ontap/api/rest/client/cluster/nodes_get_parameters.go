// Code generated by go-swagger; DO NOT EDIT.

package cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewNodesGetParams creates a new NodesGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewNodesGetParams() *NodesGetParams {
	return &NodesGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewNodesGetParamsWithTimeout creates a new NodesGetParams object
// with the ability to set a timeout on a request.
func NewNodesGetParamsWithTimeout(timeout time.Duration) *NodesGetParams {
	return &NodesGetParams{
		timeout: timeout,
	}
}

// NewNodesGetParamsWithContext creates a new NodesGetParams object
// with the ability to set a context for a request.
func NewNodesGetParamsWithContext(ctx context.Context) *NodesGetParams {
	return &NodesGetParams{
		Context: ctx,
	}
}

// NewNodesGetParamsWithHTTPClient creates a new NodesGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewNodesGetParamsWithHTTPClient(client *http.Client) *NodesGetParams {
	return &NodesGetParams{
		HTTPClient: client,
	}
}

/* NodesGetParams contains all the parameters to send to the API endpoint
   for the nodes get operation.

   Typically these are written to a http.Request.
*/
type NodesGetParams struct {

	/* ClusterInterfacesIPAddress.

	   Filter by cluster_interfaces.ip.address
	*/
	ClusterInterfacesIPAddressQueryParameter *string

	/* ClusterInterfacesName.

	   Filter by cluster_interfaces.name
	*/
	ClusterInterfacesNameQueryParameter *string

	/* ClusterInterfacesUUID.

	   Filter by cluster_interfaces.uuid
	*/
	ClusterInterfacesUUIDQueryParameter *string

	/* ControllerBoard.

	   Filter by controller.board
	*/
	ControllerBoardQueryParameter *string

	/* ControllerCPUCount.

	   Filter by controller.cpu.count
	*/
	ControllerCPUCountQueryParameter *int64

	/* ControllerCPUFirmwareRelease.

	   Filter by controller.cpu.firmware_release
	*/
	ControllerCPUFirmwareReleaseQueryParameter *string

	/* ControllerCPUProcessor.

	   Filter by controller.cpu.processor
	*/
	ControllerCPUProcessorQueryParameter *string

	/* ControllerFailedFanCount.

	   Filter by controller.failed_fan.count
	*/
	ControllerFailedFanCountQueryParameter *int64

	/* ControllerFailedFanMessageCode.

	   Filter by controller.failed_fan.message.code
	*/
	ControllerFailedFanMessageCodeQueryParameter *string

	/* ControllerFailedFanMessageMessage.

	   Filter by controller.failed_fan.message.message
	*/
	ControllerFailedFanMessageMessageQueryParameter *string

	/* ControllerFailedPowerSupplyCount.

	   Filter by controller.failed_power_supply.count
	*/
	ControllerFailedPowerSupplyCountQueryParameter *int64

	/* ControllerFailedPowerSupplyMessageCode.

	   Filter by controller.failed_power_supply.message.code
	*/
	ControllerFailedPowerSupplyMessageCodeQueryParameter *string

	/* ControllerFailedPowerSupplyMessageMessage.

	   Filter by controller.failed_power_supply.message.message
	*/
	ControllerFailedPowerSupplyMessageMessageQueryParameter *string

	/* ControllerFlashCacheCapacity.

	   Filter by controller.flash_cache.capacity
	*/
	ControllerFlashCacheCapacityQueryParameter *int64

	/* ControllerFlashCacheDeviceID.

	   Filter by controller.flash_cache.device_id
	*/
	ControllerFlashCacheDeviceIDQueryParameter *int64

	/* ControllerFlashCacheFirmwareFile.

	   Filter by controller.flash_cache.firmware_file
	*/
	ControllerFlashCacheFirmwareFileQueryParameter *string

	/* ControllerFlashCacheFirmwareVersion.

	   Filter by controller.flash_cache.firmware_version
	*/
	ControllerFlashCacheFirmwareVersionQueryParameter *string

	/* ControllerFlashCacheHardwareRevision.

	   Filter by controller.flash_cache.hardware_revision
	*/
	ControllerFlashCacheHardwareRevisionQueryParameter *string

	/* ControllerFlashCacheModel.

	   Filter by controller.flash_cache.model
	*/
	ControllerFlashCacheModelQueryParameter *string

	/* ControllerFlashCachePartNumber.

	   Filter by controller.flash_cache.part_number
	*/
	ControllerFlashCachePartNumberQueryParameter *string

	/* ControllerFlashCacheSerialNumber.

	   Filter by controller.flash_cache.serial_number
	*/
	ControllerFlashCacheSerialNumberQueryParameter *string

	/* ControllerFlashCacheSlot.

	   Filter by controller.flash_cache.slot
	*/
	ControllerFlashCacheSlotQueryParameter *string

	/* ControllerFlashCacheState.

	   Filter by controller.flash_cache.state
	*/
	ControllerFlashCacheStateQueryParameter *string

	/* ControllerFrusID.

	   Filter by controller.frus.id
	*/
	ControllerFrusIDQueryParameter *string

	/* ControllerFrusState.

	   Filter by controller.frus.state
	*/
	ControllerFrusStateQueryParameter *string

	/* ControllerFrusType.

	   Filter by controller.frus.type
	*/
	ControllerFrusTypeQueryParameter *string

	/* ControllerMemorySize.

	   Filter by controller.memory_size
	*/
	ControllerMemorySizeQueryParameter *int64

	/* ControllerOverTemperature.

	   Filter by controller.over_temperature
	*/
	ControllerOverTemperatureQueryParameter *string

	/* Date.

	   Filter by date
	*/
	DateQueryParameter *string

	/* ExternalCacheIsEnabled.

	   Filter by external_cache.is_enabled
	*/
	ExternalCacheIsEnabledQueryParameter *bool

	/* ExternalCacheIsHyaEnabled.

	   Filter by external_cache.is_hya_enabled
	*/
	ExternalCacheIsHyaEnabledQueryParameter *bool

	/* ExternalCacheIsRewarmEnabled.

	   Filter by external_cache.is_rewarm_enabled
	*/
	ExternalCacheIsRewarmEnabledQueryParameter *bool

	/* ExternalCachePcsSize.

	   Filter by external_cache.pcs_size
	*/
	ExternalCachePcsSizeQueryParameter *int64

	/* Fields.

	   Specify the fields to return.
	*/
	FieldsQueryParameter []string

	/* HaAutoGiveback.

	   Filter by ha.auto_giveback
	*/
	HaAutoGivebackQueryParameter *bool

	/* HaEnabled.

	   Filter by ha.enabled
	*/
	HaEnabledQueryParameter *bool

	/* HaGivebackFailureCode.

	   Filter by ha.giveback.failure.code
	*/
	HaGivebackFailureCodeQueryParameter *int64

	/* HaGivebackFailureMessage.

	   Filter by ha.giveback.failure.message
	*/
	HaGivebackFailureMessageQueryParameter *string

	/* HaGivebackState.

	   Filter by ha.giveback.state
	*/
	HaGivebackStateQueryParameter *string

	/* HaGivebackStatusAggregateName.

	   Filter by ha.giveback.status.aggregate.name
	*/
	HaGivebackStatusAggregateNameQueryParameter *string

	/* HaGivebackStatusAggregateUUID.

	   Filter by ha.giveback.status.aggregate.uuid
	*/
	HaGivebackStatusAggregateUUIDQueryParameter *string

	/* HaGivebackStatusErrorCode.

	   Filter by ha.giveback.status.error.code
	*/
	HaGivebackStatusErrorCodeQueryParameter *string

	/* HaGivebackStatusErrorMessage.

	   Filter by ha.giveback.status.error.message
	*/
	HaGivebackStatusErrorMessageQueryParameter *string

	/* HaGivebackStatusState.

	   Filter by ha.giveback.status.state
	*/
	HaGivebackStatusStateQueryParameter *string

	/* HaInterconnectAdapter.

	   Filter by ha.interconnect.adapter
	*/
	HaInterconnectAdapterQueryParameter *string

	/* HaInterconnectState.

	   Filter by ha.interconnect.state
	*/
	HaInterconnectStateQueryParameter *string

	/* HaPartnersName.

	   Filter by ha.partners.name
	*/
	HaPartnersNameQueryParameter *string

	/* HaPartnersUUID.

	   Filter by ha.partners.uuid
	*/
	HaPartnersUUIDQueryParameter *string

	/* HaPortsNumber.

	   Filter by ha.ports.number
	*/
	HaPortsNumberQueryParameter *int64

	/* HaPortsState.

	   Filter by ha.ports.state
	*/
	HaPortsStateQueryParameter *string

	/* HaTakeoverFailureCode.

	   Filter by ha.takeover.failure.code
	*/
	HaTakeoverFailureCodeQueryParameter *int64

	/* HaTakeoverFailureMessage.

	   Filter by ha.takeover.failure.message
	*/
	HaTakeoverFailureMessageQueryParameter *string

	/* HaTakeoverState.

	   Filter by ha.takeover.state
	*/
	HaTakeoverStateQueryParameter *string

	/* HwAssistStatusEnabled.

	   Filter by hw_assist.status.enabled
	*/
	HwAssistStatusEnabledQueryParameter *bool

	/* HwAssistStatusLocalIP.

	   Filter by hw_assist.status.local.ip
	*/
	HwAssistStatusLocalIPQueryParameter *string

	/* HwAssistStatusLocalPort.

	   Filter by hw_assist.status.local.port
	*/
	HwAssistStatusLocalPortQueryParameter *int64

	/* HwAssistStatusLocalState.

	   Filter by hw_assist.status.local.state
	*/
	HwAssistStatusLocalStateQueryParameter *string

	/* HwAssistStatusPartnerIP.

	   Filter by hw_assist.status.partner.ip
	*/
	HwAssistStatusPartnerIPQueryParameter *string

	/* HwAssistStatusPartnerPort.

	   Filter by hw_assist.status.partner.port
	*/
	HwAssistStatusPartnerPortQueryParameter *int64

	/* HwAssistStatusPartnerState.

	   Filter by hw_assist.status.partner.state
	*/
	HwAssistStatusPartnerStateQueryParameter *string

	/* IsAllFlashOptimized.

	   Filter by is_all_flash_optimized
	*/
	IsAllFlashOptimizedQueryParameter *bool

	/* IsAllFlashSelectOptimized.

	   Filter by is_all_flash_select_optimized
	*/
	IsAllFlashSelectOptimizedQueryParameter *bool

	/* IsCapacityOptimized.

	   Filter by is_capacity_optimized
	*/
	IsCapacityOptimizedQueryParameter *bool

	/* IsPerformanceOptimized.

	   Filter by is_performance_optimized
	*/
	IsPerformanceOptimizedQueryParameter *bool

	/* IsSparesLow.

	   Filter by is_spares_low
	*/
	IsSparesLowQueryParameter *bool

	/* Location.

	   Filter by location
	*/
	LocationQueryParameter *string

	/* ManagementInterfacesIPAddress.

	   Filter by management_interfaces.ip.address
	*/
	ManagementInterfacesIPAddressQueryParameter *string

	/* ManagementInterfacesName.

	   Filter by management_interfaces.name
	*/
	ManagementInterfacesNameQueryParameter *string

	/* ManagementInterfacesUUID.

	   Filter by management_interfaces.uuid
	*/
	ManagementInterfacesUUIDQueryParameter *string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecordsQueryParameter *int64

	/* Membership.

	   Filter by membership
	*/
	MembershIPQueryParameter *string

	/* MetricDuration.

	   Filter by metric.duration
	*/
	MetricDurationQueryParameter *string

	/* MetricProcessorUtilization.

	   Filter by metric.processor_utilization
	*/
	MetricProcessorUtilizationQueryParameter *int64

	/* MetricStatus.

	   Filter by metric.status
	*/
	MetricStatusQueryParameter *string

	/* MetricTimestamp.

	   Filter by metric.timestamp
	*/
	MetricTimestampQueryParameter *string

	/* MetricUUID.

	   Filter by metric.uuid
	*/
	MetricUUIDQueryParameter *string

	/* MetroclusterCustomVlanCapable.

	   Filter by metrocluster.custom_vlan_capable
	*/
	MetroclusterCustomVlanCapableQueryParameter *bool

	/* MetroclusterPortsName.

	   Filter by metrocluster.ports.name
	*/
	MetroclusterPortsNameQueryParameter *string

	/* MetroclusterType.

	   Filter by metrocluster.type
	*/
	MetroclusterTypeQueryParameter *string

	/* Model.

	   Filter by model
	*/
	ModelQueryParameter *string

	/* Name.

	   Filter by name
	*/
	NameQueryParameter *string

	/* NvramBatteryState.

	   Filter by nvram.battery_state
	*/
	NvramBatteryStateQueryParameter *string

	/* NvramID.

	   Filter by nvram.id
	*/
	NvramIDQueryParameter *int64

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderByQueryParameter []string

	/* Owner.

	   Filter by owner
	*/
	OwnerQueryParameter *string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecordsQueryParameter *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeoutQueryParameter *int64

	/* SerialNumber.

	   Filter by serial_number
	*/
	SerialNumberQueryParameter *string

	/* ServiceProcessorAPIServiceEnabled.

	   Filter by service_processor.api_service.enabled
	*/
	ServiceProcessorAPIServiceEnabledQueryParameter *bool

	/* ServiceProcessorAPIServiceLimitAccess.

	   Filter by service_processor.api_service.limit_access
	*/
	ServiceProcessorAPIServiceLimitAccessQueryParameter *bool

	/* ServiceProcessorAPIServicePort.

	   Filter by service_processor.api_service.port
	*/
	ServiceProcessorAPIServicePortQueryParameter *int64

	/* ServiceProcessorAutoConfigIPV4Subnet.

	   Filter by service_processor.auto_config.ipv4_subnet
	*/
	ServiceProcessorAutoConfigIPV4SubnetQueryParameter *string

	/* ServiceProcessorAutoConfigIPV6Subnet.

	   Filter by service_processor.auto_config.ipv6_subnet
	*/
	ServiceProcessorAutoConfigIPV6SubnetQueryParameter *string

	/* ServiceProcessorAutoupdateEnabled.

	   Filter by service_processor.autoupdate_enabled
	*/
	ServiceProcessorAutoupdateEnabledQueryParameter *bool

	/* ServiceProcessorBackupIsCurrent.

	   Filter by service_processor.backup.is_current
	*/
	ServiceProcessorBackupIsCurrentQueryParameter *bool

	/* ServiceProcessorBackupState.

	   Filter by service_processor.backup.state
	*/
	ServiceProcessorBackupStateQueryParameter *string

	/* ServiceProcessorBackupVersion.

	   Filter by service_processor.backup.version
	*/
	ServiceProcessorBackupVersionQueryParameter *string

	/* ServiceProcessorDhcpEnabled.

	   Filter by service_processor.dhcp_enabled
	*/
	ServiceProcessorDhcpEnabledQueryParameter *bool

	/* ServiceProcessorFirmwareVersion.

	   Filter by service_processor.firmware_version
	*/
	ServiceProcessorFirmwareVersionQueryParameter *string

	/* ServiceProcessorIPV4InterfaceAddress.

	   Filter by service_processor.ipv4_interface.address
	*/
	ServiceProcessorIPV4InterfaceAddressQueryParameter *string

	/* ServiceProcessorIPV4InterfaceGateway.

	   Filter by service_processor.ipv4_interface.gateway
	*/
	ServiceProcessorIPV4InterfaceGatewayQueryParameter *string

	/* ServiceProcessorIPV4InterfaceNetmask.

	   Filter by service_processor.ipv4_interface.netmask
	*/
	ServiceProcessorIPV4InterfaceNetmaskQueryParameter *string

	/* ServiceProcessorIPV6InterfaceAddress.

	   Filter by service_processor.ipv6_interface.address
	*/
	ServiceProcessorIPV6InterfaceAddressQueryParameter *string

	/* ServiceProcessorIPV6InterfaceGateway.

	   Filter by service_processor.ipv6_interface.gateway
	*/
	ServiceProcessorIPV6InterfaceGatewayQueryParameter *string

	/* ServiceProcessorIPV6InterfaceNetmask.

	   Filter by service_processor.ipv6_interface.netmask
	*/
	ServiceProcessorIPV6InterfaceNetmaskQueryParameter *int64

	/* ServiceProcessorIsIPConfigured.

	   Filter by service_processor.is_ip_configured
	*/
	ServiceProcessorIsIPConfiguredQueryParameter *bool

	/* ServiceProcessorLastUpdateState.

	   Filter by service_processor.last_update_state
	*/
	ServiceProcessorLastUpdateStateQueryParameter *string

	/* ServiceProcessorLinkStatus.

	   Filter by service_processor.link_status
	*/
	ServiceProcessorLinkStatusQueryParameter *string

	/* ServiceProcessorMacAddress.

	   Filter by service_processor.mac_address
	*/
	ServiceProcessorMacAddressQueryParameter *string

	/* ServiceProcessorPrimaryIsCurrent.

	   Filter by service_processor.primary.is_current
	*/
	ServiceProcessorPrimaryIsCurrentQueryParameter *bool

	/* ServiceProcessorPrimaryState.

	   Filter by service_processor.primary.state
	*/
	ServiceProcessorPrimaryStateQueryParameter *string

	/* ServiceProcessorPrimaryVersion.

	   Filter by service_processor.primary.version
	*/
	ServiceProcessorPrimaryVersionQueryParameter *string

	/* ServiceProcessorSSHInfoAllowedAddresses.

	   Filter by service_processor.ssh_info.allowed_addresses
	*/
	ServiceProcessorSSHInfoAllowedAddressesQueryParameter *string

	/* ServiceProcessorState.

	   Filter by service_processor.state
	*/
	ServiceProcessorStateQueryParameter *string

	/* ServiceProcessorType.

	   Filter by service_processor.type
	*/
	ServiceProcessorTypeQueryParameter *string

	/* State.

	   Filter by state
	*/
	StateQueryParameter *string

	/* StatisticsProcessorUtilizationBase.

	   Filter by statistics.processor_utilization_base
	*/
	StatisticsProcessorUtilizationBaseQueryParameter *int64

	/* StatisticsProcessorUtilizationRaw.

	   Filter by statistics.processor_utilization_raw
	*/
	StatisticsProcessorUtilizationRawQueryParameter *int64

	/* StatisticsStatus.

	   Filter by statistics.status
	*/
	StatisticsStatusQueryParameter *string

	/* StatisticsTimestamp.

	   Filter by statistics.timestamp
	*/
	StatisticsTimestampQueryParameter *string

	/* StorageConfiguration.

	   Filter by storage_configuration
	*/
	StorageConfigurationQueryParameter *string

	/* SystemID.

	   Filter by system_id
	*/
	SystemIDQueryParameter *string

	/* SystemMachineType.

	   Filter by system_machine_type
	*/
	SystemMachineTypeQueryParameter *string

	/* Uptime.

	   Filter by uptime
	*/
	UptimeQueryParameter *int64

	/* UUID.

	   Filter by uuid
	*/
	UUIDQueryParameter *string

	/* VendorSerialNumber.

	   Filter by vendor_serial_number
	*/
	VendorSerialNumberQueryParameter *string

	/* VersionFull.

	   Filter by version.full
	*/
	VersionFullQueryParameter *string

	/* VersionGeneration.

	   Filter by version.generation
	*/
	VersionGenerationQueryParameter *int64

	/* VersionMajor.

	   Filter by version.major
	*/
	VersionMajorQueryParameter *int64

	/* VersionMinor.

	   Filter by version.minor
	*/
	VersionMinorQueryParameter *int64

	/* VersionPatch.

	   Filter by version.patch
	*/
	VersionPatchQueryParameter *string

	/* VMAccountID.

	   Filter by vm.account_id
	*/
	VMAccountIDQueryParameter *string

	/* VMDeploymentID.

	   Filter by vm.deployment_id
	*/
	VMDeploymentIDQueryParameter *string

	/* VMFaultDomain.

	   Filter by vm.fault_domain
	*/
	VMFaultDomainQueryParameter *string

	/* VMInstanceID.

	   Filter by vm.instance_id
	*/
	VMInstanceIDQueryParameter *string

	/* VMPrimaryIP.

	   Filter by vm.primary_ip
	*/
	VMPrimaryIPQueryParameter *string

	/* VMProviderType.

	   Filter by vm.provider_type
	*/
	VMProviderTypeQueryParameter *string

	/* VMUpdateDomain.

	   Filter by vm.update_domain
	*/
	VMUpdateDomainQueryParameter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the nodes get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NodesGetParams) WithDefaults() *NodesGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the nodes get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NodesGetParams) SetDefaults() {
	var (
		returnRecordsQueryParameterDefault = bool(true)

		returnTimeoutQueryParameterDefault = int64(15)
	)

	val := NodesGetParams{
		ReturnRecordsQueryParameter: &returnRecordsQueryParameterDefault,
		ReturnTimeoutQueryParameter: &returnTimeoutQueryParameterDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the nodes get params
func (o *NodesGetParams) WithTimeout(timeout time.Duration) *NodesGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the nodes get params
func (o *NodesGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the nodes get params
func (o *NodesGetParams) WithContext(ctx context.Context) *NodesGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the nodes get params
func (o *NodesGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the nodes get params
func (o *NodesGetParams) WithHTTPClient(client *http.Client) *NodesGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the nodes get params
func (o *NodesGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterInterfacesIPAddressQueryParameter adds the clusterInterfacesIPAddress to the nodes get params
func (o *NodesGetParams) WithClusterInterfacesIPAddressQueryParameter(clusterInterfacesIPAddress *string) *NodesGetParams {
	o.SetClusterInterfacesIPAddressQueryParameter(clusterInterfacesIPAddress)
	return o
}

// SetClusterInterfacesIPAddressQueryParameter adds the clusterInterfacesIpAddress to the nodes get params
func (o *NodesGetParams) SetClusterInterfacesIPAddressQueryParameter(clusterInterfacesIPAddress *string) {
	o.ClusterInterfacesIPAddressQueryParameter = clusterInterfacesIPAddress
}

// WithClusterInterfacesNameQueryParameter adds the clusterInterfacesName to the nodes get params
func (o *NodesGetParams) WithClusterInterfacesNameQueryParameter(clusterInterfacesName *string) *NodesGetParams {
	o.SetClusterInterfacesNameQueryParameter(clusterInterfacesName)
	return o
}

// SetClusterInterfacesNameQueryParameter adds the clusterInterfacesName to the nodes get params
func (o *NodesGetParams) SetClusterInterfacesNameQueryParameter(clusterInterfacesName *string) {
	o.ClusterInterfacesNameQueryParameter = clusterInterfacesName
}

// WithClusterInterfacesUUIDQueryParameter adds the clusterInterfacesUUID to the nodes get params
func (o *NodesGetParams) WithClusterInterfacesUUIDQueryParameter(clusterInterfacesUUID *string) *NodesGetParams {
	o.SetClusterInterfacesUUIDQueryParameter(clusterInterfacesUUID)
	return o
}

// SetClusterInterfacesUUIDQueryParameter adds the clusterInterfacesUuid to the nodes get params
func (o *NodesGetParams) SetClusterInterfacesUUIDQueryParameter(clusterInterfacesUUID *string) {
	o.ClusterInterfacesUUIDQueryParameter = clusterInterfacesUUID
}

// WithControllerBoardQueryParameter adds the controllerBoard to the nodes get params
func (o *NodesGetParams) WithControllerBoardQueryParameter(controllerBoard *string) *NodesGetParams {
	o.SetControllerBoardQueryParameter(controllerBoard)
	return o
}

// SetControllerBoardQueryParameter adds the controllerBoard to the nodes get params
func (o *NodesGetParams) SetControllerBoardQueryParameter(controllerBoard *string) {
	o.ControllerBoardQueryParameter = controllerBoard
}

// WithControllerCPUCountQueryParameter adds the controllerCPUCount to the nodes get params
func (o *NodesGetParams) WithControllerCPUCountQueryParameter(controllerCPUCount *int64) *NodesGetParams {
	o.SetControllerCPUCountQueryParameter(controllerCPUCount)
	return o
}

// SetControllerCPUCountQueryParameter adds the controllerCpuCount to the nodes get params
func (o *NodesGetParams) SetControllerCPUCountQueryParameter(controllerCPUCount *int64) {
	o.ControllerCPUCountQueryParameter = controllerCPUCount
}

// WithControllerCPUFirmwareReleaseQueryParameter adds the controllerCPUFirmwareRelease to the nodes get params
func (o *NodesGetParams) WithControllerCPUFirmwareReleaseQueryParameter(controllerCPUFirmwareRelease *string) *NodesGetParams {
	o.SetControllerCPUFirmwareReleaseQueryParameter(controllerCPUFirmwareRelease)
	return o
}

// SetControllerCPUFirmwareReleaseQueryParameter adds the controllerCpuFirmwareRelease to the nodes get params
func (o *NodesGetParams) SetControllerCPUFirmwareReleaseQueryParameter(controllerCPUFirmwareRelease *string) {
	o.ControllerCPUFirmwareReleaseQueryParameter = controllerCPUFirmwareRelease
}

// WithControllerCPUProcessorQueryParameter adds the controllerCPUProcessor to the nodes get params
func (o *NodesGetParams) WithControllerCPUProcessorQueryParameter(controllerCPUProcessor *string) *NodesGetParams {
	o.SetControllerCPUProcessorQueryParameter(controllerCPUProcessor)
	return o
}

// SetControllerCPUProcessorQueryParameter adds the controllerCpuProcessor to the nodes get params
func (o *NodesGetParams) SetControllerCPUProcessorQueryParameter(controllerCPUProcessor *string) {
	o.ControllerCPUProcessorQueryParameter = controllerCPUProcessor
}

// WithControllerFailedFanCountQueryParameter adds the controllerFailedFanCount to the nodes get params
func (o *NodesGetParams) WithControllerFailedFanCountQueryParameter(controllerFailedFanCount *int64) *NodesGetParams {
	o.SetControllerFailedFanCountQueryParameter(controllerFailedFanCount)
	return o
}

// SetControllerFailedFanCountQueryParameter adds the controllerFailedFanCount to the nodes get params
func (o *NodesGetParams) SetControllerFailedFanCountQueryParameter(controllerFailedFanCount *int64) {
	o.ControllerFailedFanCountQueryParameter = controllerFailedFanCount
}

// WithControllerFailedFanMessageCodeQueryParameter adds the controllerFailedFanMessageCode to the nodes get params
func (o *NodesGetParams) WithControllerFailedFanMessageCodeQueryParameter(controllerFailedFanMessageCode *string) *NodesGetParams {
	o.SetControllerFailedFanMessageCodeQueryParameter(controllerFailedFanMessageCode)
	return o
}

// SetControllerFailedFanMessageCodeQueryParameter adds the controllerFailedFanMessageCode to the nodes get params
func (o *NodesGetParams) SetControllerFailedFanMessageCodeQueryParameter(controllerFailedFanMessageCode *string) {
	o.ControllerFailedFanMessageCodeQueryParameter = controllerFailedFanMessageCode
}

// WithControllerFailedFanMessageMessageQueryParameter adds the controllerFailedFanMessageMessage to the nodes get params
func (o *NodesGetParams) WithControllerFailedFanMessageMessageQueryParameter(controllerFailedFanMessageMessage *string) *NodesGetParams {
	o.SetControllerFailedFanMessageMessageQueryParameter(controllerFailedFanMessageMessage)
	return o
}

// SetControllerFailedFanMessageMessageQueryParameter adds the controllerFailedFanMessageMessage to the nodes get params
func (o *NodesGetParams) SetControllerFailedFanMessageMessageQueryParameter(controllerFailedFanMessageMessage *string) {
	o.ControllerFailedFanMessageMessageQueryParameter = controllerFailedFanMessageMessage
}

// WithControllerFailedPowerSupplyCountQueryParameter adds the controllerFailedPowerSupplyCount to the nodes get params
func (o *NodesGetParams) WithControllerFailedPowerSupplyCountQueryParameter(controllerFailedPowerSupplyCount *int64) *NodesGetParams {
	o.SetControllerFailedPowerSupplyCountQueryParameter(controllerFailedPowerSupplyCount)
	return o
}

// SetControllerFailedPowerSupplyCountQueryParameter adds the controllerFailedPowerSupplyCount to the nodes get params
func (o *NodesGetParams) SetControllerFailedPowerSupplyCountQueryParameter(controllerFailedPowerSupplyCount *int64) {
	o.ControllerFailedPowerSupplyCountQueryParameter = controllerFailedPowerSupplyCount
}

// WithControllerFailedPowerSupplyMessageCodeQueryParameter adds the controllerFailedPowerSupplyMessageCode to the nodes get params
func (o *NodesGetParams) WithControllerFailedPowerSupplyMessageCodeQueryParameter(controllerFailedPowerSupplyMessageCode *string) *NodesGetParams {
	o.SetControllerFailedPowerSupplyMessageCodeQueryParameter(controllerFailedPowerSupplyMessageCode)
	return o
}

// SetControllerFailedPowerSupplyMessageCodeQueryParameter adds the controllerFailedPowerSupplyMessageCode to the nodes get params
func (o *NodesGetParams) SetControllerFailedPowerSupplyMessageCodeQueryParameter(controllerFailedPowerSupplyMessageCode *string) {
	o.ControllerFailedPowerSupplyMessageCodeQueryParameter = controllerFailedPowerSupplyMessageCode
}

// WithControllerFailedPowerSupplyMessageMessageQueryParameter adds the controllerFailedPowerSupplyMessageMessage to the nodes get params
func (o *NodesGetParams) WithControllerFailedPowerSupplyMessageMessageQueryParameter(controllerFailedPowerSupplyMessageMessage *string) *NodesGetParams {
	o.SetControllerFailedPowerSupplyMessageMessageQueryParameter(controllerFailedPowerSupplyMessageMessage)
	return o
}

// SetControllerFailedPowerSupplyMessageMessageQueryParameter adds the controllerFailedPowerSupplyMessageMessage to the nodes get params
func (o *NodesGetParams) SetControllerFailedPowerSupplyMessageMessageQueryParameter(controllerFailedPowerSupplyMessageMessage *string) {
	o.ControllerFailedPowerSupplyMessageMessageQueryParameter = controllerFailedPowerSupplyMessageMessage
}

// WithControllerFlashCacheCapacityQueryParameter adds the controllerFlashCacheCapacity to the nodes get params
func (o *NodesGetParams) WithControllerFlashCacheCapacityQueryParameter(controllerFlashCacheCapacity *int64) *NodesGetParams {
	o.SetControllerFlashCacheCapacityQueryParameter(controllerFlashCacheCapacity)
	return o
}

// SetControllerFlashCacheCapacityQueryParameter adds the controllerFlashCacheCapacity to the nodes get params
func (o *NodesGetParams) SetControllerFlashCacheCapacityQueryParameter(controllerFlashCacheCapacity *int64) {
	o.ControllerFlashCacheCapacityQueryParameter = controllerFlashCacheCapacity
}

// WithControllerFlashCacheDeviceIDQueryParameter adds the controllerFlashCacheDeviceID to the nodes get params
func (o *NodesGetParams) WithControllerFlashCacheDeviceIDQueryParameter(controllerFlashCacheDeviceID *int64) *NodesGetParams {
	o.SetControllerFlashCacheDeviceIDQueryParameter(controllerFlashCacheDeviceID)
	return o
}

// SetControllerFlashCacheDeviceIDQueryParameter adds the controllerFlashCacheDeviceId to the nodes get params
func (o *NodesGetParams) SetControllerFlashCacheDeviceIDQueryParameter(controllerFlashCacheDeviceID *int64) {
	o.ControllerFlashCacheDeviceIDQueryParameter = controllerFlashCacheDeviceID
}

// WithControllerFlashCacheFirmwareFileQueryParameter adds the controllerFlashCacheFirmwareFile to the nodes get params
func (o *NodesGetParams) WithControllerFlashCacheFirmwareFileQueryParameter(controllerFlashCacheFirmwareFile *string) *NodesGetParams {
	o.SetControllerFlashCacheFirmwareFileQueryParameter(controllerFlashCacheFirmwareFile)
	return o
}

// SetControllerFlashCacheFirmwareFileQueryParameter adds the controllerFlashCacheFirmwareFile to the nodes get params
func (o *NodesGetParams) SetControllerFlashCacheFirmwareFileQueryParameter(controllerFlashCacheFirmwareFile *string) {
	o.ControllerFlashCacheFirmwareFileQueryParameter = controllerFlashCacheFirmwareFile
}

// WithControllerFlashCacheFirmwareVersionQueryParameter adds the controllerFlashCacheFirmwareVersion to the nodes get params
func (o *NodesGetParams) WithControllerFlashCacheFirmwareVersionQueryParameter(controllerFlashCacheFirmwareVersion *string) *NodesGetParams {
	o.SetControllerFlashCacheFirmwareVersionQueryParameter(controllerFlashCacheFirmwareVersion)
	return o
}

// SetControllerFlashCacheFirmwareVersionQueryParameter adds the controllerFlashCacheFirmwareVersion to the nodes get params
func (o *NodesGetParams) SetControllerFlashCacheFirmwareVersionQueryParameter(controllerFlashCacheFirmwareVersion *string) {
	o.ControllerFlashCacheFirmwareVersionQueryParameter = controllerFlashCacheFirmwareVersion
}

// WithControllerFlashCacheHardwareRevisionQueryParameter adds the controllerFlashCacheHardwareRevision to the nodes get params
func (o *NodesGetParams) WithControllerFlashCacheHardwareRevisionQueryParameter(controllerFlashCacheHardwareRevision *string) *NodesGetParams {
	o.SetControllerFlashCacheHardwareRevisionQueryParameter(controllerFlashCacheHardwareRevision)
	return o
}

// SetControllerFlashCacheHardwareRevisionQueryParameter adds the controllerFlashCacheHardwareRevision to the nodes get params
func (o *NodesGetParams) SetControllerFlashCacheHardwareRevisionQueryParameter(controllerFlashCacheHardwareRevision *string) {
	o.ControllerFlashCacheHardwareRevisionQueryParameter = controllerFlashCacheHardwareRevision
}

// WithControllerFlashCacheModelQueryParameter adds the controllerFlashCacheModel to the nodes get params
func (o *NodesGetParams) WithControllerFlashCacheModelQueryParameter(controllerFlashCacheModel *string) *NodesGetParams {
	o.SetControllerFlashCacheModelQueryParameter(controllerFlashCacheModel)
	return o
}

// SetControllerFlashCacheModelQueryParameter adds the controllerFlashCacheModel to the nodes get params
func (o *NodesGetParams) SetControllerFlashCacheModelQueryParameter(controllerFlashCacheModel *string) {
	o.ControllerFlashCacheModelQueryParameter = controllerFlashCacheModel
}

// WithControllerFlashCachePartNumberQueryParameter adds the controllerFlashCachePartNumber to the nodes get params
func (o *NodesGetParams) WithControllerFlashCachePartNumberQueryParameter(controllerFlashCachePartNumber *string) *NodesGetParams {
	o.SetControllerFlashCachePartNumberQueryParameter(controllerFlashCachePartNumber)
	return o
}

// SetControllerFlashCachePartNumberQueryParameter adds the controllerFlashCachePartNumber to the nodes get params
func (o *NodesGetParams) SetControllerFlashCachePartNumberQueryParameter(controllerFlashCachePartNumber *string) {
	o.ControllerFlashCachePartNumberQueryParameter = controllerFlashCachePartNumber
}

// WithControllerFlashCacheSerialNumberQueryParameter adds the controllerFlashCacheSerialNumber to the nodes get params
func (o *NodesGetParams) WithControllerFlashCacheSerialNumberQueryParameter(controllerFlashCacheSerialNumber *string) *NodesGetParams {
	o.SetControllerFlashCacheSerialNumberQueryParameter(controllerFlashCacheSerialNumber)
	return o
}

// SetControllerFlashCacheSerialNumberQueryParameter adds the controllerFlashCacheSerialNumber to the nodes get params
func (o *NodesGetParams) SetControllerFlashCacheSerialNumberQueryParameter(controllerFlashCacheSerialNumber *string) {
	o.ControllerFlashCacheSerialNumberQueryParameter = controllerFlashCacheSerialNumber
}

// WithControllerFlashCacheSlotQueryParameter adds the controllerFlashCacheSlot to the nodes get params
func (o *NodesGetParams) WithControllerFlashCacheSlotQueryParameter(controllerFlashCacheSlot *string) *NodesGetParams {
	o.SetControllerFlashCacheSlotQueryParameter(controllerFlashCacheSlot)
	return o
}

// SetControllerFlashCacheSlotQueryParameter adds the controllerFlashCacheSlot to the nodes get params
func (o *NodesGetParams) SetControllerFlashCacheSlotQueryParameter(controllerFlashCacheSlot *string) {
	o.ControllerFlashCacheSlotQueryParameter = controllerFlashCacheSlot
}

// WithControllerFlashCacheStateQueryParameter adds the controllerFlashCacheState to the nodes get params
func (o *NodesGetParams) WithControllerFlashCacheStateQueryParameter(controllerFlashCacheState *string) *NodesGetParams {
	o.SetControllerFlashCacheStateQueryParameter(controllerFlashCacheState)
	return o
}

// SetControllerFlashCacheStateQueryParameter adds the controllerFlashCacheState to the nodes get params
func (o *NodesGetParams) SetControllerFlashCacheStateQueryParameter(controllerFlashCacheState *string) {
	o.ControllerFlashCacheStateQueryParameter = controllerFlashCacheState
}

// WithControllerFrusIDQueryParameter adds the controllerFrusID to the nodes get params
func (o *NodesGetParams) WithControllerFrusIDQueryParameter(controllerFrusID *string) *NodesGetParams {
	o.SetControllerFrusIDQueryParameter(controllerFrusID)
	return o
}

// SetControllerFrusIDQueryParameter adds the controllerFrusId to the nodes get params
func (o *NodesGetParams) SetControllerFrusIDQueryParameter(controllerFrusID *string) {
	o.ControllerFrusIDQueryParameter = controllerFrusID
}

// WithControllerFrusStateQueryParameter adds the controllerFrusState to the nodes get params
func (o *NodesGetParams) WithControllerFrusStateQueryParameter(controllerFrusState *string) *NodesGetParams {
	o.SetControllerFrusStateQueryParameter(controllerFrusState)
	return o
}

// SetControllerFrusStateQueryParameter adds the controllerFrusState to the nodes get params
func (o *NodesGetParams) SetControllerFrusStateQueryParameter(controllerFrusState *string) {
	o.ControllerFrusStateQueryParameter = controllerFrusState
}

// WithControllerFrusTypeQueryParameter adds the controllerFrusType to the nodes get params
func (o *NodesGetParams) WithControllerFrusTypeQueryParameter(controllerFrusType *string) *NodesGetParams {
	o.SetControllerFrusTypeQueryParameter(controllerFrusType)
	return o
}

// SetControllerFrusTypeQueryParameter adds the controllerFrusType to the nodes get params
func (o *NodesGetParams) SetControllerFrusTypeQueryParameter(controllerFrusType *string) {
	o.ControllerFrusTypeQueryParameter = controllerFrusType
}

// WithControllerMemorySizeQueryParameter adds the controllerMemorySize to the nodes get params
func (o *NodesGetParams) WithControllerMemorySizeQueryParameter(controllerMemorySize *int64) *NodesGetParams {
	o.SetControllerMemorySizeQueryParameter(controllerMemorySize)
	return o
}

// SetControllerMemorySizeQueryParameter adds the controllerMemorySize to the nodes get params
func (o *NodesGetParams) SetControllerMemorySizeQueryParameter(controllerMemorySize *int64) {
	o.ControllerMemorySizeQueryParameter = controllerMemorySize
}

// WithControllerOverTemperatureQueryParameter adds the controllerOverTemperature to the nodes get params
func (o *NodesGetParams) WithControllerOverTemperatureQueryParameter(controllerOverTemperature *string) *NodesGetParams {
	o.SetControllerOverTemperatureQueryParameter(controllerOverTemperature)
	return o
}

// SetControllerOverTemperatureQueryParameter adds the controllerOverTemperature to the nodes get params
func (o *NodesGetParams) SetControllerOverTemperatureQueryParameter(controllerOverTemperature *string) {
	o.ControllerOverTemperatureQueryParameter = controllerOverTemperature
}

// WithDateQueryParameter adds the date to the nodes get params
func (o *NodesGetParams) WithDateQueryParameter(date *string) *NodesGetParams {
	o.SetDateQueryParameter(date)
	return o
}

// SetDateQueryParameter adds the date to the nodes get params
func (o *NodesGetParams) SetDateQueryParameter(date *string) {
	o.DateQueryParameter = date
}

// WithExternalCacheIsEnabledQueryParameter adds the externalCacheIsEnabled to the nodes get params
func (o *NodesGetParams) WithExternalCacheIsEnabledQueryParameter(externalCacheIsEnabled *bool) *NodesGetParams {
	o.SetExternalCacheIsEnabledQueryParameter(externalCacheIsEnabled)
	return o
}

// SetExternalCacheIsEnabledQueryParameter adds the externalCacheIsEnabled to the nodes get params
func (o *NodesGetParams) SetExternalCacheIsEnabledQueryParameter(externalCacheIsEnabled *bool) {
	o.ExternalCacheIsEnabledQueryParameter = externalCacheIsEnabled
}

// WithExternalCacheIsHyaEnabledQueryParameter adds the externalCacheIsHyaEnabled to the nodes get params
func (o *NodesGetParams) WithExternalCacheIsHyaEnabledQueryParameter(externalCacheIsHyaEnabled *bool) *NodesGetParams {
	o.SetExternalCacheIsHyaEnabledQueryParameter(externalCacheIsHyaEnabled)
	return o
}

// SetExternalCacheIsHyaEnabledQueryParameter adds the externalCacheIsHyaEnabled to the nodes get params
func (o *NodesGetParams) SetExternalCacheIsHyaEnabledQueryParameter(externalCacheIsHyaEnabled *bool) {
	o.ExternalCacheIsHyaEnabledQueryParameter = externalCacheIsHyaEnabled
}

// WithExternalCacheIsRewarmEnabledQueryParameter adds the externalCacheIsRewarmEnabled to the nodes get params
func (o *NodesGetParams) WithExternalCacheIsRewarmEnabledQueryParameter(externalCacheIsRewarmEnabled *bool) *NodesGetParams {
	o.SetExternalCacheIsRewarmEnabledQueryParameter(externalCacheIsRewarmEnabled)
	return o
}

// SetExternalCacheIsRewarmEnabledQueryParameter adds the externalCacheIsRewarmEnabled to the nodes get params
func (o *NodesGetParams) SetExternalCacheIsRewarmEnabledQueryParameter(externalCacheIsRewarmEnabled *bool) {
	o.ExternalCacheIsRewarmEnabledQueryParameter = externalCacheIsRewarmEnabled
}

// WithExternalCachePcsSizeQueryParameter adds the externalCachePcsSize to the nodes get params
func (o *NodesGetParams) WithExternalCachePcsSizeQueryParameter(externalCachePcsSize *int64) *NodesGetParams {
	o.SetExternalCachePcsSizeQueryParameter(externalCachePcsSize)
	return o
}

// SetExternalCachePcsSizeQueryParameter adds the externalCachePcsSize to the nodes get params
func (o *NodesGetParams) SetExternalCachePcsSizeQueryParameter(externalCachePcsSize *int64) {
	o.ExternalCachePcsSizeQueryParameter = externalCachePcsSize
}

// WithFieldsQueryParameter adds the fields to the nodes get params
func (o *NodesGetParams) WithFieldsQueryParameter(fields []string) *NodesGetParams {
	o.SetFieldsQueryParameter(fields)
	return o
}

// SetFieldsQueryParameter adds the fields to the nodes get params
func (o *NodesGetParams) SetFieldsQueryParameter(fields []string) {
	o.FieldsQueryParameter = fields
}

// WithHaAutoGivebackQueryParameter adds the haAutoGiveback to the nodes get params
func (o *NodesGetParams) WithHaAutoGivebackQueryParameter(haAutoGiveback *bool) *NodesGetParams {
	o.SetHaAutoGivebackQueryParameter(haAutoGiveback)
	return o
}

// SetHaAutoGivebackQueryParameter adds the haAutoGiveback to the nodes get params
func (o *NodesGetParams) SetHaAutoGivebackQueryParameter(haAutoGiveback *bool) {
	o.HaAutoGivebackQueryParameter = haAutoGiveback
}

// WithHaEnabledQueryParameter adds the haEnabled to the nodes get params
func (o *NodesGetParams) WithHaEnabledQueryParameter(haEnabled *bool) *NodesGetParams {
	o.SetHaEnabledQueryParameter(haEnabled)
	return o
}

// SetHaEnabledQueryParameter adds the haEnabled to the nodes get params
func (o *NodesGetParams) SetHaEnabledQueryParameter(haEnabled *bool) {
	o.HaEnabledQueryParameter = haEnabled
}

// WithHaGivebackFailureCodeQueryParameter adds the haGivebackFailureCode to the nodes get params
func (o *NodesGetParams) WithHaGivebackFailureCodeQueryParameter(haGivebackFailureCode *int64) *NodesGetParams {
	o.SetHaGivebackFailureCodeQueryParameter(haGivebackFailureCode)
	return o
}

// SetHaGivebackFailureCodeQueryParameter adds the haGivebackFailureCode to the nodes get params
func (o *NodesGetParams) SetHaGivebackFailureCodeQueryParameter(haGivebackFailureCode *int64) {
	o.HaGivebackFailureCodeQueryParameter = haGivebackFailureCode
}

// WithHaGivebackFailureMessageQueryParameter adds the haGivebackFailureMessage to the nodes get params
func (o *NodesGetParams) WithHaGivebackFailureMessageQueryParameter(haGivebackFailureMessage *string) *NodesGetParams {
	o.SetHaGivebackFailureMessageQueryParameter(haGivebackFailureMessage)
	return o
}

// SetHaGivebackFailureMessageQueryParameter adds the haGivebackFailureMessage to the nodes get params
func (o *NodesGetParams) SetHaGivebackFailureMessageQueryParameter(haGivebackFailureMessage *string) {
	o.HaGivebackFailureMessageQueryParameter = haGivebackFailureMessage
}

// WithHaGivebackStateQueryParameter adds the haGivebackState to the nodes get params
func (o *NodesGetParams) WithHaGivebackStateQueryParameter(haGivebackState *string) *NodesGetParams {
	o.SetHaGivebackStateQueryParameter(haGivebackState)
	return o
}

// SetHaGivebackStateQueryParameter adds the haGivebackState to the nodes get params
func (o *NodesGetParams) SetHaGivebackStateQueryParameter(haGivebackState *string) {
	o.HaGivebackStateQueryParameter = haGivebackState
}

// WithHaGivebackStatusAggregateNameQueryParameter adds the haGivebackStatusAggregateName to the nodes get params
func (o *NodesGetParams) WithHaGivebackStatusAggregateNameQueryParameter(haGivebackStatusAggregateName *string) *NodesGetParams {
	o.SetHaGivebackStatusAggregateNameQueryParameter(haGivebackStatusAggregateName)
	return o
}

// SetHaGivebackStatusAggregateNameQueryParameter adds the haGivebackStatusAggregateName to the nodes get params
func (o *NodesGetParams) SetHaGivebackStatusAggregateNameQueryParameter(haGivebackStatusAggregateName *string) {
	o.HaGivebackStatusAggregateNameQueryParameter = haGivebackStatusAggregateName
}

// WithHaGivebackStatusAggregateUUIDQueryParameter adds the haGivebackStatusAggregateUUID to the nodes get params
func (o *NodesGetParams) WithHaGivebackStatusAggregateUUIDQueryParameter(haGivebackStatusAggregateUUID *string) *NodesGetParams {
	o.SetHaGivebackStatusAggregateUUIDQueryParameter(haGivebackStatusAggregateUUID)
	return o
}

// SetHaGivebackStatusAggregateUUIDQueryParameter adds the haGivebackStatusAggregateUuid to the nodes get params
func (o *NodesGetParams) SetHaGivebackStatusAggregateUUIDQueryParameter(haGivebackStatusAggregateUUID *string) {
	o.HaGivebackStatusAggregateUUIDQueryParameter = haGivebackStatusAggregateUUID
}

// WithHaGivebackStatusErrorCodeQueryParameter adds the haGivebackStatusErrorCode to the nodes get params
func (o *NodesGetParams) WithHaGivebackStatusErrorCodeQueryParameter(haGivebackStatusErrorCode *string) *NodesGetParams {
	o.SetHaGivebackStatusErrorCodeQueryParameter(haGivebackStatusErrorCode)
	return o
}

// SetHaGivebackStatusErrorCodeQueryParameter adds the haGivebackStatusErrorCode to the nodes get params
func (o *NodesGetParams) SetHaGivebackStatusErrorCodeQueryParameter(haGivebackStatusErrorCode *string) {
	o.HaGivebackStatusErrorCodeQueryParameter = haGivebackStatusErrorCode
}

// WithHaGivebackStatusErrorMessageQueryParameter adds the haGivebackStatusErrorMessage to the nodes get params
func (o *NodesGetParams) WithHaGivebackStatusErrorMessageQueryParameter(haGivebackStatusErrorMessage *string) *NodesGetParams {
	o.SetHaGivebackStatusErrorMessageQueryParameter(haGivebackStatusErrorMessage)
	return o
}

// SetHaGivebackStatusErrorMessageQueryParameter adds the haGivebackStatusErrorMessage to the nodes get params
func (o *NodesGetParams) SetHaGivebackStatusErrorMessageQueryParameter(haGivebackStatusErrorMessage *string) {
	o.HaGivebackStatusErrorMessageQueryParameter = haGivebackStatusErrorMessage
}

// WithHaGivebackStatusStateQueryParameter adds the haGivebackStatusState to the nodes get params
func (o *NodesGetParams) WithHaGivebackStatusStateQueryParameter(haGivebackStatusState *string) *NodesGetParams {
	o.SetHaGivebackStatusStateQueryParameter(haGivebackStatusState)
	return o
}

// SetHaGivebackStatusStateQueryParameter adds the haGivebackStatusState to the nodes get params
func (o *NodesGetParams) SetHaGivebackStatusStateQueryParameter(haGivebackStatusState *string) {
	o.HaGivebackStatusStateQueryParameter = haGivebackStatusState
}

// WithHaInterconnectAdapterQueryParameter adds the haInterconnectAdapter to the nodes get params
func (o *NodesGetParams) WithHaInterconnectAdapterQueryParameter(haInterconnectAdapter *string) *NodesGetParams {
	o.SetHaInterconnectAdapterQueryParameter(haInterconnectAdapter)
	return o
}

// SetHaInterconnectAdapterQueryParameter adds the haInterconnectAdapter to the nodes get params
func (o *NodesGetParams) SetHaInterconnectAdapterQueryParameter(haInterconnectAdapter *string) {
	o.HaInterconnectAdapterQueryParameter = haInterconnectAdapter
}

// WithHaInterconnectStateQueryParameter adds the haInterconnectState to the nodes get params
func (o *NodesGetParams) WithHaInterconnectStateQueryParameter(haInterconnectState *string) *NodesGetParams {
	o.SetHaInterconnectStateQueryParameter(haInterconnectState)
	return o
}

// SetHaInterconnectStateQueryParameter adds the haInterconnectState to the nodes get params
func (o *NodesGetParams) SetHaInterconnectStateQueryParameter(haInterconnectState *string) {
	o.HaInterconnectStateQueryParameter = haInterconnectState
}

// WithHaPartnersNameQueryParameter adds the haPartnersName to the nodes get params
func (o *NodesGetParams) WithHaPartnersNameQueryParameter(haPartnersName *string) *NodesGetParams {
	o.SetHaPartnersNameQueryParameter(haPartnersName)
	return o
}

// SetHaPartnersNameQueryParameter adds the haPartnersName to the nodes get params
func (o *NodesGetParams) SetHaPartnersNameQueryParameter(haPartnersName *string) {
	o.HaPartnersNameQueryParameter = haPartnersName
}

// WithHaPartnersUUIDQueryParameter adds the haPartnersUUID to the nodes get params
func (o *NodesGetParams) WithHaPartnersUUIDQueryParameter(haPartnersUUID *string) *NodesGetParams {
	o.SetHaPartnersUUIDQueryParameter(haPartnersUUID)
	return o
}

// SetHaPartnersUUIDQueryParameter adds the haPartnersUuid to the nodes get params
func (o *NodesGetParams) SetHaPartnersUUIDQueryParameter(haPartnersUUID *string) {
	o.HaPartnersUUIDQueryParameter = haPartnersUUID
}

// WithHaPortsNumberQueryParameter adds the haPortsNumber to the nodes get params
func (o *NodesGetParams) WithHaPortsNumberQueryParameter(haPortsNumber *int64) *NodesGetParams {
	o.SetHaPortsNumberQueryParameter(haPortsNumber)
	return o
}

// SetHaPortsNumberQueryParameter adds the haPortsNumber to the nodes get params
func (o *NodesGetParams) SetHaPortsNumberQueryParameter(haPortsNumber *int64) {
	o.HaPortsNumberQueryParameter = haPortsNumber
}

// WithHaPortsStateQueryParameter adds the haPortsState to the nodes get params
func (o *NodesGetParams) WithHaPortsStateQueryParameter(haPortsState *string) *NodesGetParams {
	o.SetHaPortsStateQueryParameter(haPortsState)
	return o
}

// SetHaPortsStateQueryParameter adds the haPortsState to the nodes get params
func (o *NodesGetParams) SetHaPortsStateQueryParameter(haPortsState *string) {
	o.HaPortsStateQueryParameter = haPortsState
}

// WithHaTakeoverFailureCodeQueryParameter adds the haTakeoverFailureCode to the nodes get params
func (o *NodesGetParams) WithHaTakeoverFailureCodeQueryParameter(haTakeoverFailureCode *int64) *NodesGetParams {
	o.SetHaTakeoverFailureCodeQueryParameter(haTakeoverFailureCode)
	return o
}

// SetHaTakeoverFailureCodeQueryParameter adds the haTakeoverFailureCode to the nodes get params
func (o *NodesGetParams) SetHaTakeoverFailureCodeQueryParameter(haTakeoverFailureCode *int64) {
	o.HaTakeoverFailureCodeQueryParameter = haTakeoverFailureCode
}

// WithHaTakeoverFailureMessageQueryParameter adds the haTakeoverFailureMessage to the nodes get params
func (o *NodesGetParams) WithHaTakeoverFailureMessageQueryParameter(haTakeoverFailureMessage *string) *NodesGetParams {
	o.SetHaTakeoverFailureMessageQueryParameter(haTakeoverFailureMessage)
	return o
}

// SetHaTakeoverFailureMessageQueryParameter adds the haTakeoverFailureMessage to the nodes get params
func (o *NodesGetParams) SetHaTakeoverFailureMessageQueryParameter(haTakeoverFailureMessage *string) {
	o.HaTakeoverFailureMessageQueryParameter = haTakeoverFailureMessage
}

// WithHaTakeoverStateQueryParameter adds the haTakeoverState to the nodes get params
func (o *NodesGetParams) WithHaTakeoverStateQueryParameter(haTakeoverState *string) *NodesGetParams {
	o.SetHaTakeoverStateQueryParameter(haTakeoverState)
	return o
}

// SetHaTakeoverStateQueryParameter adds the haTakeoverState to the nodes get params
func (o *NodesGetParams) SetHaTakeoverStateQueryParameter(haTakeoverState *string) {
	o.HaTakeoverStateQueryParameter = haTakeoverState
}

// WithHwAssistStatusEnabledQueryParameter adds the hwAssistStatusEnabled to the nodes get params
func (o *NodesGetParams) WithHwAssistStatusEnabledQueryParameter(hwAssistStatusEnabled *bool) *NodesGetParams {
	o.SetHwAssistStatusEnabledQueryParameter(hwAssistStatusEnabled)
	return o
}

// SetHwAssistStatusEnabledQueryParameter adds the hwAssistStatusEnabled to the nodes get params
func (o *NodesGetParams) SetHwAssistStatusEnabledQueryParameter(hwAssistStatusEnabled *bool) {
	o.HwAssistStatusEnabledQueryParameter = hwAssistStatusEnabled
}

// WithHwAssistStatusLocalIPQueryParameter adds the hwAssistStatusLocalIP to the nodes get params
func (o *NodesGetParams) WithHwAssistStatusLocalIPQueryParameter(hwAssistStatusLocalIP *string) *NodesGetParams {
	o.SetHwAssistStatusLocalIPQueryParameter(hwAssistStatusLocalIP)
	return o
}

// SetHwAssistStatusLocalIPQueryParameter adds the hwAssistStatusLocalIp to the nodes get params
func (o *NodesGetParams) SetHwAssistStatusLocalIPQueryParameter(hwAssistStatusLocalIP *string) {
	o.HwAssistStatusLocalIPQueryParameter = hwAssistStatusLocalIP
}

// WithHwAssistStatusLocalPortQueryParameter adds the hwAssistStatusLocalPort to the nodes get params
func (o *NodesGetParams) WithHwAssistStatusLocalPortQueryParameter(hwAssistStatusLocalPort *int64) *NodesGetParams {
	o.SetHwAssistStatusLocalPortQueryParameter(hwAssistStatusLocalPort)
	return o
}

// SetHwAssistStatusLocalPortQueryParameter adds the hwAssistStatusLocalPort to the nodes get params
func (o *NodesGetParams) SetHwAssistStatusLocalPortQueryParameter(hwAssistStatusLocalPort *int64) {
	o.HwAssistStatusLocalPortQueryParameter = hwAssistStatusLocalPort
}

// WithHwAssistStatusLocalStateQueryParameter adds the hwAssistStatusLocalState to the nodes get params
func (o *NodesGetParams) WithHwAssistStatusLocalStateQueryParameter(hwAssistStatusLocalState *string) *NodesGetParams {
	o.SetHwAssistStatusLocalStateQueryParameter(hwAssistStatusLocalState)
	return o
}

// SetHwAssistStatusLocalStateQueryParameter adds the hwAssistStatusLocalState to the nodes get params
func (o *NodesGetParams) SetHwAssistStatusLocalStateQueryParameter(hwAssistStatusLocalState *string) {
	o.HwAssistStatusLocalStateQueryParameter = hwAssistStatusLocalState
}

// WithHwAssistStatusPartnerIPQueryParameter adds the hwAssistStatusPartnerIP to the nodes get params
func (o *NodesGetParams) WithHwAssistStatusPartnerIPQueryParameter(hwAssistStatusPartnerIP *string) *NodesGetParams {
	o.SetHwAssistStatusPartnerIPQueryParameter(hwAssistStatusPartnerIP)
	return o
}

// SetHwAssistStatusPartnerIPQueryParameter adds the hwAssistStatusPartnerIp to the nodes get params
func (o *NodesGetParams) SetHwAssistStatusPartnerIPQueryParameter(hwAssistStatusPartnerIP *string) {
	o.HwAssistStatusPartnerIPQueryParameter = hwAssistStatusPartnerIP
}

// WithHwAssistStatusPartnerPortQueryParameter adds the hwAssistStatusPartnerPort to the nodes get params
func (o *NodesGetParams) WithHwAssistStatusPartnerPortQueryParameter(hwAssistStatusPartnerPort *int64) *NodesGetParams {
	o.SetHwAssistStatusPartnerPortQueryParameter(hwAssistStatusPartnerPort)
	return o
}

// SetHwAssistStatusPartnerPortQueryParameter adds the hwAssistStatusPartnerPort to the nodes get params
func (o *NodesGetParams) SetHwAssistStatusPartnerPortQueryParameter(hwAssistStatusPartnerPort *int64) {
	o.HwAssistStatusPartnerPortQueryParameter = hwAssistStatusPartnerPort
}

// WithHwAssistStatusPartnerStateQueryParameter adds the hwAssistStatusPartnerState to the nodes get params
func (o *NodesGetParams) WithHwAssistStatusPartnerStateQueryParameter(hwAssistStatusPartnerState *string) *NodesGetParams {
	o.SetHwAssistStatusPartnerStateQueryParameter(hwAssistStatusPartnerState)
	return o
}

// SetHwAssistStatusPartnerStateQueryParameter adds the hwAssistStatusPartnerState to the nodes get params
func (o *NodesGetParams) SetHwAssistStatusPartnerStateQueryParameter(hwAssistStatusPartnerState *string) {
	o.HwAssistStatusPartnerStateQueryParameter = hwAssistStatusPartnerState
}

// WithIsAllFlashOptimizedQueryParameter adds the isAllFlashOptimized to the nodes get params
func (o *NodesGetParams) WithIsAllFlashOptimizedQueryParameter(isAllFlashOptimized *bool) *NodesGetParams {
	o.SetIsAllFlashOptimizedQueryParameter(isAllFlashOptimized)
	return o
}

// SetIsAllFlashOptimizedQueryParameter adds the isAllFlashOptimized to the nodes get params
func (o *NodesGetParams) SetIsAllFlashOptimizedQueryParameter(isAllFlashOptimized *bool) {
	o.IsAllFlashOptimizedQueryParameter = isAllFlashOptimized
}

// WithIsAllFlashSelectOptimizedQueryParameter adds the isAllFlashSelectOptimized to the nodes get params
func (o *NodesGetParams) WithIsAllFlashSelectOptimizedQueryParameter(isAllFlashSelectOptimized *bool) *NodesGetParams {
	o.SetIsAllFlashSelectOptimizedQueryParameter(isAllFlashSelectOptimized)
	return o
}

// SetIsAllFlashSelectOptimizedQueryParameter adds the isAllFlashSelectOptimized to the nodes get params
func (o *NodesGetParams) SetIsAllFlashSelectOptimizedQueryParameter(isAllFlashSelectOptimized *bool) {
	o.IsAllFlashSelectOptimizedQueryParameter = isAllFlashSelectOptimized
}

// WithIsCapacityOptimizedQueryParameter adds the isCapacityOptimized to the nodes get params
func (o *NodesGetParams) WithIsCapacityOptimizedQueryParameter(isCapacityOptimized *bool) *NodesGetParams {
	o.SetIsCapacityOptimizedQueryParameter(isCapacityOptimized)
	return o
}

// SetIsCapacityOptimizedQueryParameter adds the isCapacityOptimized to the nodes get params
func (o *NodesGetParams) SetIsCapacityOptimizedQueryParameter(isCapacityOptimized *bool) {
	o.IsCapacityOptimizedQueryParameter = isCapacityOptimized
}

// WithIsPerformanceOptimizedQueryParameter adds the isPerformanceOptimized to the nodes get params
func (o *NodesGetParams) WithIsPerformanceOptimizedQueryParameter(isPerformanceOptimized *bool) *NodesGetParams {
	o.SetIsPerformanceOptimizedQueryParameter(isPerformanceOptimized)
	return o
}

// SetIsPerformanceOptimizedQueryParameter adds the isPerformanceOptimized to the nodes get params
func (o *NodesGetParams) SetIsPerformanceOptimizedQueryParameter(isPerformanceOptimized *bool) {
	o.IsPerformanceOptimizedQueryParameter = isPerformanceOptimized
}

// WithIsSparesLowQueryParameter adds the isSparesLow to the nodes get params
func (o *NodesGetParams) WithIsSparesLowQueryParameter(isSparesLow *bool) *NodesGetParams {
	o.SetIsSparesLowQueryParameter(isSparesLow)
	return o
}

// SetIsSparesLowQueryParameter adds the isSparesLow to the nodes get params
func (o *NodesGetParams) SetIsSparesLowQueryParameter(isSparesLow *bool) {
	o.IsSparesLowQueryParameter = isSparesLow
}

// WithLocationQueryParameter adds the location to the nodes get params
func (o *NodesGetParams) WithLocationQueryParameter(location *string) *NodesGetParams {
	o.SetLocationQueryParameter(location)
	return o
}

// SetLocationQueryParameter adds the location to the nodes get params
func (o *NodesGetParams) SetLocationQueryParameter(location *string) {
	o.LocationQueryParameter = location
}

// WithManagementInterfacesIPAddressQueryParameter adds the managementInterfacesIPAddress to the nodes get params
func (o *NodesGetParams) WithManagementInterfacesIPAddressQueryParameter(managementInterfacesIPAddress *string) *NodesGetParams {
	o.SetManagementInterfacesIPAddressQueryParameter(managementInterfacesIPAddress)
	return o
}

// SetManagementInterfacesIPAddressQueryParameter adds the managementInterfacesIpAddress to the nodes get params
func (o *NodesGetParams) SetManagementInterfacesIPAddressQueryParameter(managementInterfacesIPAddress *string) {
	o.ManagementInterfacesIPAddressQueryParameter = managementInterfacesIPAddress
}

// WithManagementInterfacesNameQueryParameter adds the managementInterfacesName to the nodes get params
func (o *NodesGetParams) WithManagementInterfacesNameQueryParameter(managementInterfacesName *string) *NodesGetParams {
	o.SetManagementInterfacesNameQueryParameter(managementInterfacesName)
	return o
}

// SetManagementInterfacesNameQueryParameter adds the managementInterfacesName to the nodes get params
func (o *NodesGetParams) SetManagementInterfacesNameQueryParameter(managementInterfacesName *string) {
	o.ManagementInterfacesNameQueryParameter = managementInterfacesName
}

// WithManagementInterfacesUUIDQueryParameter adds the managementInterfacesUUID to the nodes get params
func (o *NodesGetParams) WithManagementInterfacesUUIDQueryParameter(managementInterfacesUUID *string) *NodesGetParams {
	o.SetManagementInterfacesUUIDQueryParameter(managementInterfacesUUID)
	return o
}

// SetManagementInterfacesUUIDQueryParameter adds the managementInterfacesUuid to the nodes get params
func (o *NodesGetParams) SetManagementInterfacesUUIDQueryParameter(managementInterfacesUUID *string) {
	o.ManagementInterfacesUUIDQueryParameter = managementInterfacesUUID
}

// WithMaxRecordsQueryParameter adds the maxRecords to the nodes get params
func (o *NodesGetParams) WithMaxRecordsQueryParameter(maxRecords *int64) *NodesGetParams {
	o.SetMaxRecordsQueryParameter(maxRecords)
	return o
}

// SetMaxRecordsQueryParameter adds the maxRecords to the nodes get params
func (o *NodesGetParams) SetMaxRecordsQueryParameter(maxRecords *int64) {
	o.MaxRecordsQueryParameter = maxRecords
}

// WithMembershIPQueryParameter adds the membership to the nodes get params
func (o *NodesGetParams) WithMembershIPQueryParameter(membership *string) *NodesGetParams {
	o.SetMembershIPQueryParameter(membership)
	return o
}

// SetMembershIPQueryParameter adds the membership to the nodes get params
func (o *NodesGetParams) SetMembershIPQueryParameter(membership *string) {
	o.MembershIPQueryParameter = membership
}

// WithMetricDurationQueryParameter adds the metricDuration to the nodes get params
func (o *NodesGetParams) WithMetricDurationQueryParameter(metricDuration *string) *NodesGetParams {
	o.SetMetricDurationQueryParameter(metricDuration)
	return o
}

// SetMetricDurationQueryParameter adds the metricDuration to the nodes get params
func (o *NodesGetParams) SetMetricDurationQueryParameter(metricDuration *string) {
	o.MetricDurationQueryParameter = metricDuration
}

// WithMetricProcessorUtilizationQueryParameter adds the metricProcessorUtilization to the nodes get params
func (o *NodesGetParams) WithMetricProcessorUtilizationQueryParameter(metricProcessorUtilization *int64) *NodesGetParams {
	o.SetMetricProcessorUtilizationQueryParameter(metricProcessorUtilization)
	return o
}

// SetMetricProcessorUtilizationQueryParameter adds the metricProcessorUtilization to the nodes get params
func (o *NodesGetParams) SetMetricProcessorUtilizationQueryParameter(metricProcessorUtilization *int64) {
	o.MetricProcessorUtilizationQueryParameter = metricProcessorUtilization
}

// WithMetricStatusQueryParameter adds the metricStatus to the nodes get params
func (o *NodesGetParams) WithMetricStatusQueryParameter(metricStatus *string) *NodesGetParams {
	o.SetMetricStatusQueryParameter(metricStatus)
	return o
}

// SetMetricStatusQueryParameter adds the metricStatus to the nodes get params
func (o *NodesGetParams) SetMetricStatusQueryParameter(metricStatus *string) {
	o.MetricStatusQueryParameter = metricStatus
}

// WithMetricTimestampQueryParameter adds the metricTimestamp to the nodes get params
func (o *NodesGetParams) WithMetricTimestampQueryParameter(metricTimestamp *string) *NodesGetParams {
	o.SetMetricTimestampQueryParameter(metricTimestamp)
	return o
}

// SetMetricTimestampQueryParameter adds the metricTimestamp to the nodes get params
func (o *NodesGetParams) SetMetricTimestampQueryParameter(metricTimestamp *string) {
	o.MetricTimestampQueryParameter = metricTimestamp
}

// WithMetricUUIDQueryParameter adds the metricUUID to the nodes get params
func (o *NodesGetParams) WithMetricUUIDQueryParameter(metricUUID *string) *NodesGetParams {
	o.SetMetricUUIDQueryParameter(metricUUID)
	return o
}

// SetMetricUUIDQueryParameter adds the metricUuid to the nodes get params
func (o *NodesGetParams) SetMetricUUIDQueryParameter(metricUUID *string) {
	o.MetricUUIDQueryParameter = metricUUID
}

// WithMetroclusterCustomVlanCapableQueryParameter adds the metroclusterCustomVlanCapable to the nodes get params
func (o *NodesGetParams) WithMetroclusterCustomVlanCapableQueryParameter(metroclusterCustomVlanCapable *bool) *NodesGetParams {
	o.SetMetroclusterCustomVlanCapableQueryParameter(metroclusterCustomVlanCapable)
	return o
}

// SetMetroclusterCustomVlanCapableQueryParameter adds the metroclusterCustomVlanCapable to the nodes get params
func (o *NodesGetParams) SetMetroclusterCustomVlanCapableQueryParameter(metroclusterCustomVlanCapable *bool) {
	o.MetroclusterCustomVlanCapableQueryParameter = metroclusterCustomVlanCapable
}

// WithMetroclusterPortsNameQueryParameter adds the metroclusterPortsName to the nodes get params
func (o *NodesGetParams) WithMetroclusterPortsNameQueryParameter(metroclusterPortsName *string) *NodesGetParams {
	o.SetMetroclusterPortsNameQueryParameter(metroclusterPortsName)
	return o
}

// SetMetroclusterPortsNameQueryParameter adds the metroclusterPortsName to the nodes get params
func (o *NodesGetParams) SetMetroclusterPortsNameQueryParameter(metroclusterPortsName *string) {
	o.MetroclusterPortsNameQueryParameter = metroclusterPortsName
}

// WithMetroclusterTypeQueryParameter adds the metroclusterType to the nodes get params
func (o *NodesGetParams) WithMetroclusterTypeQueryParameter(metroclusterType *string) *NodesGetParams {
	o.SetMetroclusterTypeQueryParameter(metroclusterType)
	return o
}

// SetMetroclusterTypeQueryParameter adds the metroclusterType to the nodes get params
func (o *NodesGetParams) SetMetroclusterTypeQueryParameter(metroclusterType *string) {
	o.MetroclusterTypeQueryParameter = metroclusterType
}

// WithModelQueryParameter adds the model to the nodes get params
func (o *NodesGetParams) WithModelQueryParameter(model *string) *NodesGetParams {
	o.SetModelQueryParameter(model)
	return o
}

// SetModelQueryParameter adds the model to the nodes get params
func (o *NodesGetParams) SetModelQueryParameter(model *string) {
	o.ModelQueryParameter = model
}

// WithNameQueryParameter adds the name to the nodes get params
func (o *NodesGetParams) WithNameQueryParameter(name *string) *NodesGetParams {
	o.SetNameQueryParameter(name)
	return o
}

// SetNameQueryParameter adds the name to the nodes get params
func (o *NodesGetParams) SetNameQueryParameter(name *string) {
	o.NameQueryParameter = name
}

// WithNvramBatteryStateQueryParameter adds the nvramBatteryState to the nodes get params
func (o *NodesGetParams) WithNvramBatteryStateQueryParameter(nvramBatteryState *string) *NodesGetParams {
	o.SetNvramBatteryStateQueryParameter(nvramBatteryState)
	return o
}

// SetNvramBatteryStateQueryParameter adds the nvramBatteryState to the nodes get params
func (o *NodesGetParams) SetNvramBatteryStateQueryParameter(nvramBatteryState *string) {
	o.NvramBatteryStateQueryParameter = nvramBatteryState
}

// WithNvramIDQueryParameter adds the nvramID to the nodes get params
func (o *NodesGetParams) WithNvramIDQueryParameter(nvramID *int64) *NodesGetParams {
	o.SetNvramIDQueryParameter(nvramID)
	return o
}

// SetNvramIDQueryParameter adds the nvramId to the nodes get params
func (o *NodesGetParams) SetNvramIDQueryParameter(nvramID *int64) {
	o.NvramIDQueryParameter = nvramID
}

// WithOrderByQueryParameter adds the orderBy to the nodes get params
func (o *NodesGetParams) WithOrderByQueryParameter(orderBy []string) *NodesGetParams {
	o.SetOrderByQueryParameter(orderBy)
	return o
}

// SetOrderByQueryParameter adds the orderBy to the nodes get params
func (o *NodesGetParams) SetOrderByQueryParameter(orderBy []string) {
	o.OrderByQueryParameter = orderBy
}

// WithOwnerQueryParameter adds the owner to the nodes get params
func (o *NodesGetParams) WithOwnerQueryParameter(owner *string) *NodesGetParams {
	o.SetOwnerQueryParameter(owner)
	return o
}

// SetOwnerQueryParameter adds the owner to the nodes get params
func (o *NodesGetParams) SetOwnerQueryParameter(owner *string) {
	o.OwnerQueryParameter = owner
}

// WithReturnRecordsQueryParameter adds the returnRecords to the nodes get params
func (o *NodesGetParams) WithReturnRecordsQueryParameter(returnRecords *bool) *NodesGetParams {
	o.SetReturnRecordsQueryParameter(returnRecords)
	return o
}

// SetReturnRecordsQueryParameter adds the returnRecords to the nodes get params
func (o *NodesGetParams) SetReturnRecordsQueryParameter(returnRecords *bool) {
	o.ReturnRecordsQueryParameter = returnRecords
}

// WithReturnTimeoutQueryParameter adds the returnTimeout to the nodes get params
func (o *NodesGetParams) WithReturnTimeoutQueryParameter(returnTimeout *int64) *NodesGetParams {
	o.SetReturnTimeoutQueryParameter(returnTimeout)
	return o
}

// SetReturnTimeoutQueryParameter adds the returnTimeout to the nodes get params
func (o *NodesGetParams) SetReturnTimeoutQueryParameter(returnTimeout *int64) {
	o.ReturnTimeoutQueryParameter = returnTimeout
}

// WithSerialNumberQueryParameter adds the serialNumber to the nodes get params
func (o *NodesGetParams) WithSerialNumberQueryParameter(serialNumber *string) *NodesGetParams {
	o.SetSerialNumberQueryParameter(serialNumber)
	return o
}

// SetSerialNumberQueryParameter adds the serialNumber to the nodes get params
func (o *NodesGetParams) SetSerialNumberQueryParameter(serialNumber *string) {
	o.SerialNumberQueryParameter = serialNumber
}

// WithServiceProcessorAPIServiceEnabledQueryParameter adds the serviceProcessorAPIServiceEnabled to the nodes get params
func (o *NodesGetParams) WithServiceProcessorAPIServiceEnabledQueryParameter(serviceProcessorAPIServiceEnabled *bool) *NodesGetParams {
	o.SetServiceProcessorAPIServiceEnabledQueryParameter(serviceProcessorAPIServiceEnabled)
	return o
}

// SetServiceProcessorAPIServiceEnabledQueryParameter adds the serviceProcessorApiServiceEnabled to the nodes get params
func (o *NodesGetParams) SetServiceProcessorAPIServiceEnabledQueryParameter(serviceProcessorAPIServiceEnabled *bool) {
	o.ServiceProcessorAPIServiceEnabledQueryParameter = serviceProcessorAPIServiceEnabled
}

// WithServiceProcessorAPIServiceLimitAccessQueryParameter adds the serviceProcessorAPIServiceLimitAccess to the nodes get params
func (o *NodesGetParams) WithServiceProcessorAPIServiceLimitAccessQueryParameter(serviceProcessorAPIServiceLimitAccess *bool) *NodesGetParams {
	o.SetServiceProcessorAPIServiceLimitAccessQueryParameter(serviceProcessorAPIServiceLimitAccess)
	return o
}

// SetServiceProcessorAPIServiceLimitAccessQueryParameter adds the serviceProcessorApiServiceLimitAccess to the nodes get params
func (o *NodesGetParams) SetServiceProcessorAPIServiceLimitAccessQueryParameter(serviceProcessorAPIServiceLimitAccess *bool) {
	o.ServiceProcessorAPIServiceLimitAccessQueryParameter = serviceProcessorAPIServiceLimitAccess
}

// WithServiceProcessorAPIServicePortQueryParameter adds the serviceProcessorAPIServicePort to the nodes get params
func (o *NodesGetParams) WithServiceProcessorAPIServicePortQueryParameter(serviceProcessorAPIServicePort *int64) *NodesGetParams {
	o.SetServiceProcessorAPIServicePortQueryParameter(serviceProcessorAPIServicePort)
	return o
}

// SetServiceProcessorAPIServicePortQueryParameter adds the serviceProcessorApiServicePort to the nodes get params
func (o *NodesGetParams) SetServiceProcessorAPIServicePortQueryParameter(serviceProcessorAPIServicePort *int64) {
	o.ServiceProcessorAPIServicePortQueryParameter = serviceProcessorAPIServicePort
}

// WithServiceProcessorAutoConfigIPV4SubnetQueryParameter adds the serviceProcessorAutoConfigIPV4Subnet to the nodes get params
func (o *NodesGetParams) WithServiceProcessorAutoConfigIPV4SubnetQueryParameter(serviceProcessorAutoConfigIPV4Subnet *string) *NodesGetParams {
	o.SetServiceProcessorAutoConfigIPV4SubnetQueryParameter(serviceProcessorAutoConfigIPV4Subnet)
	return o
}

// SetServiceProcessorAutoConfigIPV4SubnetQueryParameter adds the serviceProcessorAutoConfigIpv4Subnet to the nodes get params
func (o *NodesGetParams) SetServiceProcessorAutoConfigIPV4SubnetQueryParameter(serviceProcessorAutoConfigIPV4Subnet *string) {
	o.ServiceProcessorAutoConfigIPV4SubnetQueryParameter = serviceProcessorAutoConfigIPV4Subnet
}

// WithServiceProcessorAutoConfigIPV6SubnetQueryParameter adds the serviceProcessorAutoConfigIPV6Subnet to the nodes get params
func (o *NodesGetParams) WithServiceProcessorAutoConfigIPV6SubnetQueryParameter(serviceProcessorAutoConfigIPV6Subnet *string) *NodesGetParams {
	o.SetServiceProcessorAutoConfigIPV6SubnetQueryParameter(serviceProcessorAutoConfigIPV6Subnet)
	return o
}

// SetServiceProcessorAutoConfigIPV6SubnetQueryParameter adds the serviceProcessorAutoConfigIpv6Subnet to the nodes get params
func (o *NodesGetParams) SetServiceProcessorAutoConfigIPV6SubnetQueryParameter(serviceProcessorAutoConfigIPV6Subnet *string) {
	o.ServiceProcessorAutoConfigIPV6SubnetQueryParameter = serviceProcessorAutoConfigIPV6Subnet
}

// WithServiceProcessorAutoupdateEnabledQueryParameter adds the serviceProcessorAutoupdateEnabled to the nodes get params
func (o *NodesGetParams) WithServiceProcessorAutoupdateEnabledQueryParameter(serviceProcessorAutoupdateEnabled *bool) *NodesGetParams {
	o.SetServiceProcessorAutoupdateEnabledQueryParameter(serviceProcessorAutoupdateEnabled)
	return o
}

// SetServiceProcessorAutoupdateEnabledQueryParameter adds the serviceProcessorAutoupdateEnabled to the nodes get params
func (o *NodesGetParams) SetServiceProcessorAutoupdateEnabledQueryParameter(serviceProcessorAutoupdateEnabled *bool) {
	o.ServiceProcessorAutoupdateEnabledQueryParameter = serviceProcessorAutoupdateEnabled
}

// WithServiceProcessorBackupIsCurrentQueryParameter adds the serviceProcessorBackupIsCurrent to the nodes get params
func (o *NodesGetParams) WithServiceProcessorBackupIsCurrentQueryParameter(serviceProcessorBackupIsCurrent *bool) *NodesGetParams {
	o.SetServiceProcessorBackupIsCurrentQueryParameter(serviceProcessorBackupIsCurrent)
	return o
}

// SetServiceProcessorBackupIsCurrentQueryParameter adds the serviceProcessorBackupIsCurrent to the nodes get params
func (o *NodesGetParams) SetServiceProcessorBackupIsCurrentQueryParameter(serviceProcessorBackupIsCurrent *bool) {
	o.ServiceProcessorBackupIsCurrentQueryParameter = serviceProcessorBackupIsCurrent
}

// WithServiceProcessorBackupStateQueryParameter adds the serviceProcessorBackupState to the nodes get params
func (o *NodesGetParams) WithServiceProcessorBackupStateQueryParameter(serviceProcessorBackupState *string) *NodesGetParams {
	o.SetServiceProcessorBackupStateQueryParameter(serviceProcessorBackupState)
	return o
}

// SetServiceProcessorBackupStateQueryParameter adds the serviceProcessorBackupState to the nodes get params
func (o *NodesGetParams) SetServiceProcessorBackupStateQueryParameter(serviceProcessorBackupState *string) {
	o.ServiceProcessorBackupStateQueryParameter = serviceProcessorBackupState
}

// WithServiceProcessorBackupVersionQueryParameter adds the serviceProcessorBackupVersion to the nodes get params
func (o *NodesGetParams) WithServiceProcessorBackupVersionQueryParameter(serviceProcessorBackupVersion *string) *NodesGetParams {
	o.SetServiceProcessorBackupVersionQueryParameter(serviceProcessorBackupVersion)
	return o
}

// SetServiceProcessorBackupVersionQueryParameter adds the serviceProcessorBackupVersion to the nodes get params
func (o *NodesGetParams) SetServiceProcessorBackupVersionQueryParameter(serviceProcessorBackupVersion *string) {
	o.ServiceProcessorBackupVersionQueryParameter = serviceProcessorBackupVersion
}

// WithServiceProcessorDhcpEnabledQueryParameter adds the serviceProcessorDhcpEnabled to the nodes get params
func (o *NodesGetParams) WithServiceProcessorDhcpEnabledQueryParameter(serviceProcessorDhcpEnabled *bool) *NodesGetParams {
	o.SetServiceProcessorDhcpEnabledQueryParameter(serviceProcessorDhcpEnabled)
	return o
}

// SetServiceProcessorDhcpEnabledQueryParameter adds the serviceProcessorDhcpEnabled to the nodes get params
func (o *NodesGetParams) SetServiceProcessorDhcpEnabledQueryParameter(serviceProcessorDhcpEnabled *bool) {
	o.ServiceProcessorDhcpEnabledQueryParameter = serviceProcessorDhcpEnabled
}

// WithServiceProcessorFirmwareVersionQueryParameter adds the serviceProcessorFirmwareVersion to the nodes get params
func (o *NodesGetParams) WithServiceProcessorFirmwareVersionQueryParameter(serviceProcessorFirmwareVersion *string) *NodesGetParams {
	o.SetServiceProcessorFirmwareVersionQueryParameter(serviceProcessorFirmwareVersion)
	return o
}

// SetServiceProcessorFirmwareVersionQueryParameter adds the serviceProcessorFirmwareVersion to the nodes get params
func (o *NodesGetParams) SetServiceProcessorFirmwareVersionQueryParameter(serviceProcessorFirmwareVersion *string) {
	o.ServiceProcessorFirmwareVersionQueryParameter = serviceProcessorFirmwareVersion
}

// WithServiceProcessorIPV4InterfaceAddressQueryParameter adds the serviceProcessorIPV4InterfaceAddress to the nodes get params
func (o *NodesGetParams) WithServiceProcessorIPV4InterfaceAddressQueryParameter(serviceProcessorIPV4InterfaceAddress *string) *NodesGetParams {
	o.SetServiceProcessorIPV4InterfaceAddressQueryParameter(serviceProcessorIPV4InterfaceAddress)
	return o
}

// SetServiceProcessorIPV4InterfaceAddressQueryParameter adds the serviceProcessorIpv4InterfaceAddress to the nodes get params
func (o *NodesGetParams) SetServiceProcessorIPV4InterfaceAddressQueryParameter(serviceProcessorIPV4InterfaceAddress *string) {
	o.ServiceProcessorIPV4InterfaceAddressQueryParameter = serviceProcessorIPV4InterfaceAddress
}

// WithServiceProcessorIPV4InterfaceGatewayQueryParameter adds the serviceProcessorIPV4InterfaceGateway to the nodes get params
func (o *NodesGetParams) WithServiceProcessorIPV4InterfaceGatewayQueryParameter(serviceProcessorIPV4InterfaceGateway *string) *NodesGetParams {
	o.SetServiceProcessorIPV4InterfaceGatewayQueryParameter(serviceProcessorIPV4InterfaceGateway)
	return o
}

// SetServiceProcessorIPV4InterfaceGatewayQueryParameter adds the serviceProcessorIpv4InterfaceGateway to the nodes get params
func (o *NodesGetParams) SetServiceProcessorIPV4InterfaceGatewayQueryParameter(serviceProcessorIPV4InterfaceGateway *string) {
	o.ServiceProcessorIPV4InterfaceGatewayQueryParameter = serviceProcessorIPV4InterfaceGateway
}

// WithServiceProcessorIPV4InterfaceNetmaskQueryParameter adds the serviceProcessorIPV4InterfaceNetmask to the nodes get params
func (o *NodesGetParams) WithServiceProcessorIPV4InterfaceNetmaskQueryParameter(serviceProcessorIPV4InterfaceNetmask *string) *NodesGetParams {
	o.SetServiceProcessorIPV4InterfaceNetmaskQueryParameter(serviceProcessorIPV4InterfaceNetmask)
	return o
}

// SetServiceProcessorIPV4InterfaceNetmaskQueryParameter adds the serviceProcessorIpv4InterfaceNetmask to the nodes get params
func (o *NodesGetParams) SetServiceProcessorIPV4InterfaceNetmaskQueryParameter(serviceProcessorIPV4InterfaceNetmask *string) {
	o.ServiceProcessorIPV4InterfaceNetmaskQueryParameter = serviceProcessorIPV4InterfaceNetmask
}

// WithServiceProcessorIPV6InterfaceAddressQueryParameter adds the serviceProcessorIPV6InterfaceAddress to the nodes get params
func (o *NodesGetParams) WithServiceProcessorIPV6InterfaceAddressQueryParameter(serviceProcessorIPV6InterfaceAddress *string) *NodesGetParams {
	o.SetServiceProcessorIPV6InterfaceAddressQueryParameter(serviceProcessorIPV6InterfaceAddress)
	return o
}

// SetServiceProcessorIPV6InterfaceAddressQueryParameter adds the serviceProcessorIpv6InterfaceAddress to the nodes get params
func (o *NodesGetParams) SetServiceProcessorIPV6InterfaceAddressQueryParameter(serviceProcessorIPV6InterfaceAddress *string) {
	o.ServiceProcessorIPV6InterfaceAddressQueryParameter = serviceProcessorIPV6InterfaceAddress
}

// WithServiceProcessorIPV6InterfaceGatewayQueryParameter adds the serviceProcessorIPV6InterfaceGateway to the nodes get params
func (o *NodesGetParams) WithServiceProcessorIPV6InterfaceGatewayQueryParameter(serviceProcessorIPV6InterfaceGateway *string) *NodesGetParams {
	o.SetServiceProcessorIPV6InterfaceGatewayQueryParameter(serviceProcessorIPV6InterfaceGateway)
	return o
}

// SetServiceProcessorIPV6InterfaceGatewayQueryParameter adds the serviceProcessorIpv6InterfaceGateway to the nodes get params
func (o *NodesGetParams) SetServiceProcessorIPV6InterfaceGatewayQueryParameter(serviceProcessorIPV6InterfaceGateway *string) {
	o.ServiceProcessorIPV6InterfaceGatewayQueryParameter = serviceProcessorIPV6InterfaceGateway
}

// WithServiceProcessorIPV6InterfaceNetmaskQueryParameter adds the serviceProcessorIPV6InterfaceNetmask to the nodes get params
func (o *NodesGetParams) WithServiceProcessorIPV6InterfaceNetmaskQueryParameter(serviceProcessorIPV6InterfaceNetmask *int64) *NodesGetParams {
	o.SetServiceProcessorIPV6InterfaceNetmaskQueryParameter(serviceProcessorIPV6InterfaceNetmask)
	return o
}

// SetServiceProcessorIPV6InterfaceNetmaskQueryParameter adds the serviceProcessorIpv6InterfaceNetmask to the nodes get params
func (o *NodesGetParams) SetServiceProcessorIPV6InterfaceNetmaskQueryParameter(serviceProcessorIPV6InterfaceNetmask *int64) {
	o.ServiceProcessorIPV6InterfaceNetmaskQueryParameter = serviceProcessorIPV6InterfaceNetmask
}

// WithServiceProcessorIsIPConfiguredQueryParameter adds the serviceProcessorIsIPConfigured to the nodes get params
func (o *NodesGetParams) WithServiceProcessorIsIPConfiguredQueryParameter(serviceProcessorIsIPConfigured *bool) *NodesGetParams {
	o.SetServiceProcessorIsIPConfiguredQueryParameter(serviceProcessorIsIPConfigured)
	return o
}

// SetServiceProcessorIsIPConfiguredQueryParameter adds the serviceProcessorIsIpConfigured to the nodes get params
func (o *NodesGetParams) SetServiceProcessorIsIPConfiguredQueryParameter(serviceProcessorIsIPConfigured *bool) {
	o.ServiceProcessorIsIPConfiguredQueryParameter = serviceProcessorIsIPConfigured
}

// WithServiceProcessorLastUpdateStateQueryParameter adds the serviceProcessorLastUpdateState to the nodes get params
func (o *NodesGetParams) WithServiceProcessorLastUpdateStateQueryParameter(serviceProcessorLastUpdateState *string) *NodesGetParams {
	o.SetServiceProcessorLastUpdateStateQueryParameter(serviceProcessorLastUpdateState)
	return o
}

// SetServiceProcessorLastUpdateStateQueryParameter adds the serviceProcessorLastUpdateState to the nodes get params
func (o *NodesGetParams) SetServiceProcessorLastUpdateStateQueryParameter(serviceProcessorLastUpdateState *string) {
	o.ServiceProcessorLastUpdateStateQueryParameter = serviceProcessorLastUpdateState
}

// WithServiceProcessorLinkStatusQueryParameter adds the serviceProcessorLinkStatus to the nodes get params
func (o *NodesGetParams) WithServiceProcessorLinkStatusQueryParameter(serviceProcessorLinkStatus *string) *NodesGetParams {
	o.SetServiceProcessorLinkStatusQueryParameter(serviceProcessorLinkStatus)
	return o
}

// SetServiceProcessorLinkStatusQueryParameter adds the serviceProcessorLinkStatus to the nodes get params
func (o *NodesGetParams) SetServiceProcessorLinkStatusQueryParameter(serviceProcessorLinkStatus *string) {
	o.ServiceProcessorLinkStatusQueryParameter = serviceProcessorLinkStatus
}

// WithServiceProcessorMacAddressQueryParameter adds the serviceProcessorMacAddress to the nodes get params
func (o *NodesGetParams) WithServiceProcessorMacAddressQueryParameter(serviceProcessorMacAddress *string) *NodesGetParams {
	o.SetServiceProcessorMacAddressQueryParameter(serviceProcessorMacAddress)
	return o
}

// SetServiceProcessorMacAddressQueryParameter adds the serviceProcessorMacAddress to the nodes get params
func (o *NodesGetParams) SetServiceProcessorMacAddressQueryParameter(serviceProcessorMacAddress *string) {
	o.ServiceProcessorMacAddressQueryParameter = serviceProcessorMacAddress
}

// WithServiceProcessorPrimaryIsCurrentQueryParameter adds the serviceProcessorPrimaryIsCurrent to the nodes get params
func (o *NodesGetParams) WithServiceProcessorPrimaryIsCurrentQueryParameter(serviceProcessorPrimaryIsCurrent *bool) *NodesGetParams {
	o.SetServiceProcessorPrimaryIsCurrentQueryParameter(serviceProcessorPrimaryIsCurrent)
	return o
}

// SetServiceProcessorPrimaryIsCurrentQueryParameter adds the serviceProcessorPrimaryIsCurrent to the nodes get params
func (o *NodesGetParams) SetServiceProcessorPrimaryIsCurrentQueryParameter(serviceProcessorPrimaryIsCurrent *bool) {
	o.ServiceProcessorPrimaryIsCurrentQueryParameter = serviceProcessorPrimaryIsCurrent
}

// WithServiceProcessorPrimaryStateQueryParameter adds the serviceProcessorPrimaryState to the nodes get params
func (o *NodesGetParams) WithServiceProcessorPrimaryStateQueryParameter(serviceProcessorPrimaryState *string) *NodesGetParams {
	o.SetServiceProcessorPrimaryStateQueryParameter(serviceProcessorPrimaryState)
	return o
}

// SetServiceProcessorPrimaryStateQueryParameter adds the serviceProcessorPrimaryState to the nodes get params
func (o *NodesGetParams) SetServiceProcessorPrimaryStateQueryParameter(serviceProcessorPrimaryState *string) {
	o.ServiceProcessorPrimaryStateQueryParameter = serviceProcessorPrimaryState
}

// WithServiceProcessorPrimaryVersionQueryParameter adds the serviceProcessorPrimaryVersion to the nodes get params
func (o *NodesGetParams) WithServiceProcessorPrimaryVersionQueryParameter(serviceProcessorPrimaryVersion *string) *NodesGetParams {
	o.SetServiceProcessorPrimaryVersionQueryParameter(serviceProcessorPrimaryVersion)
	return o
}

// SetServiceProcessorPrimaryVersionQueryParameter adds the serviceProcessorPrimaryVersion to the nodes get params
func (o *NodesGetParams) SetServiceProcessorPrimaryVersionQueryParameter(serviceProcessorPrimaryVersion *string) {
	o.ServiceProcessorPrimaryVersionQueryParameter = serviceProcessorPrimaryVersion
}

// WithServiceProcessorSSHInfoAllowedAddressesQueryParameter adds the serviceProcessorSSHInfoAllowedAddresses to the nodes get params
func (o *NodesGetParams) WithServiceProcessorSSHInfoAllowedAddressesQueryParameter(serviceProcessorSSHInfoAllowedAddresses *string) *NodesGetParams {
	o.SetServiceProcessorSSHInfoAllowedAddressesQueryParameter(serviceProcessorSSHInfoAllowedAddresses)
	return o
}

// SetServiceProcessorSSHInfoAllowedAddressesQueryParameter adds the serviceProcessorSshInfoAllowedAddresses to the nodes get params
func (o *NodesGetParams) SetServiceProcessorSSHInfoAllowedAddressesQueryParameter(serviceProcessorSSHInfoAllowedAddresses *string) {
	o.ServiceProcessorSSHInfoAllowedAddressesQueryParameter = serviceProcessorSSHInfoAllowedAddresses
}

// WithServiceProcessorStateQueryParameter adds the serviceProcessorState to the nodes get params
func (o *NodesGetParams) WithServiceProcessorStateQueryParameter(serviceProcessorState *string) *NodesGetParams {
	o.SetServiceProcessorStateQueryParameter(serviceProcessorState)
	return o
}

// SetServiceProcessorStateQueryParameter adds the serviceProcessorState to the nodes get params
func (o *NodesGetParams) SetServiceProcessorStateQueryParameter(serviceProcessorState *string) {
	o.ServiceProcessorStateQueryParameter = serviceProcessorState
}

// WithServiceProcessorTypeQueryParameter adds the serviceProcessorType to the nodes get params
func (o *NodesGetParams) WithServiceProcessorTypeQueryParameter(serviceProcessorType *string) *NodesGetParams {
	o.SetServiceProcessorTypeQueryParameter(serviceProcessorType)
	return o
}

// SetServiceProcessorTypeQueryParameter adds the serviceProcessorType to the nodes get params
func (o *NodesGetParams) SetServiceProcessorTypeQueryParameter(serviceProcessorType *string) {
	o.ServiceProcessorTypeQueryParameter = serviceProcessorType
}

// WithStateQueryParameter adds the state to the nodes get params
func (o *NodesGetParams) WithStateQueryParameter(state *string) *NodesGetParams {
	o.SetStateQueryParameter(state)
	return o
}

// SetStateQueryParameter adds the state to the nodes get params
func (o *NodesGetParams) SetStateQueryParameter(state *string) {
	o.StateQueryParameter = state
}

// WithStatisticsProcessorUtilizationBaseQueryParameter adds the statisticsProcessorUtilizationBase to the nodes get params
func (o *NodesGetParams) WithStatisticsProcessorUtilizationBaseQueryParameter(statisticsProcessorUtilizationBase *int64) *NodesGetParams {
	o.SetStatisticsProcessorUtilizationBaseQueryParameter(statisticsProcessorUtilizationBase)
	return o
}

// SetStatisticsProcessorUtilizationBaseQueryParameter adds the statisticsProcessorUtilizationBase to the nodes get params
func (o *NodesGetParams) SetStatisticsProcessorUtilizationBaseQueryParameter(statisticsProcessorUtilizationBase *int64) {
	o.StatisticsProcessorUtilizationBaseQueryParameter = statisticsProcessorUtilizationBase
}

// WithStatisticsProcessorUtilizationRawQueryParameter adds the statisticsProcessorUtilizationRaw to the nodes get params
func (o *NodesGetParams) WithStatisticsProcessorUtilizationRawQueryParameter(statisticsProcessorUtilizationRaw *int64) *NodesGetParams {
	o.SetStatisticsProcessorUtilizationRawQueryParameter(statisticsProcessorUtilizationRaw)
	return o
}

// SetStatisticsProcessorUtilizationRawQueryParameter adds the statisticsProcessorUtilizationRaw to the nodes get params
func (o *NodesGetParams) SetStatisticsProcessorUtilizationRawQueryParameter(statisticsProcessorUtilizationRaw *int64) {
	o.StatisticsProcessorUtilizationRawQueryParameter = statisticsProcessorUtilizationRaw
}

// WithStatisticsStatusQueryParameter adds the statisticsStatus to the nodes get params
func (o *NodesGetParams) WithStatisticsStatusQueryParameter(statisticsStatus *string) *NodesGetParams {
	o.SetStatisticsStatusQueryParameter(statisticsStatus)
	return o
}

// SetStatisticsStatusQueryParameter adds the statisticsStatus to the nodes get params
func (o *NodesGetParams) SetStatisticsStatusQueryParameter(statisticsStatus *string) {
	o.StatisticsStatusQueryParameter = statisticsStatus
}

// WithStatisticsTimestampQueryParameter adds the statisticsTimestamp to the nodes get params
func (o *NodesGetParams) WithStatisticsTimestampQueryParameter(statisticsTimestamp *string) *NodesGetParams {
	o.SetStatisticsTimestampQueryParameter(statisticsTimestamp)
	return o
}

// SetStatisticsTimestampQueryParameter adds the statisticsTimestamp to the nodes get params
func (o *NodesGetParams) SetStatisticsTimestampQueryParameter(statisticsTimestamp *string) {
	o.StatisticsTimestampQueryParameter = statisticsTimestamp
}

// WithStorageConfigurationQueryParameter adds the storageConfiguration to the nodes get params
func (o *NodesGetParams) WithStorageConfigurationQueryParameter(storageConfiguration *string) *NodesGetParams {
	o.SetStorageConfigurationQueryParameter(storageConfiguration)
	return o
}

// SetStorageConfigurationQueryParameter adds the storageConfiguration to the nodes get params
func (o *NodesGetParams) SetStorageConfigurationQueryParameter(storageConfiguration *string) {
	o.StorageConfigurationQueryParameter = storageConfiguration
}

// WithSystemIDQueryParameter adds the systemID to the nodes get params
func (o *NodesGetParams) WithSystemIDQueryParameter(systemID *string) *NodesGetParams {
	o.SetSystemIDQueryParameter(systemID)
	return o
}

// SetSystemIDQueryParameter adds the systemId to the nodes get params
func (o *NodesGetParams) SetSystemIDQueryParameter(systemID *string) {
	o.SystemIDQueryParameter = systemID
}

// WithSystemMachineTypeQueryParameter adds the systemMachineType to the nodes get params
func (o *NodesGetParams) WithSystemMachineTypeQueryParameter(systemMachineType *string) *NodesGetParams {
	o.SetSystemMachineTypeQueryParameter(systemMachineType)
	return o
}

// SetSystemMachineTypeQueryParameter adds the systemMachineType to the nodes get params
func (o *NodesGetParams) SetSystemMachineTypeQueryParameter(systemMachineType *string) {
	o.SystemMachineTypeQueryParameter = systemMachineType
}

// WithUptimeQueryParameter adds the uptime to the nodes get params
func (o *NodesGetParams) WithUptimeQueryParameter(uptime *int64) *NodesGetParams {
	o.SetUptimeQueryParameter(uptime)
	return o
}

// SetUptimeQueryParameter adds the uptime to the nodes get params
func (o *NodesGetParams) SetUptimeQueryParameter(uptime *int64) {
	o.UptimeQueryParameter = uptime
}

// WithUUIDQueryParameter adds the uuid to the nodes get params
func (o *NodesGetParams) WithUUIDQueryParameter(uuid *string) *NodesGetParams {
	o.SetUUIDQueryParameter(uuid)
	return o
}

// SetUUIDQueryParameter adds the uuid to the nodes get params
func (o *NodesGetParams) SetUUIDQueryParameter(uuid *string) {
	o.UUIDQueryParameter = uuid
}

// WithVendorSerialNumberQueryParameter adds the vendorSerialNumber to the nodes get params
func (o *NodesGetParams) WithVendorSerialNumberQueryParameter(vendorSerialNumber *string) *NodesGetParams {
	o.SetVendorSerialNumberQueryParameter(vendorSerialNumber)
	return o
}

// SetVendorSerialNumberQueryParameter adds the vendorSerialNumber to the nodes get params
func (o *NodesGetParams) SetVendorSerialNumberQueryParameter(vendorSerialNumber *string) {
	o.VendorSerialNumberQueryParameter = vendorSerialNumber
}

// WithVersionFullQueryParameter adds the versionFull to the nodes get params
func (o *NodesGetParams) WithVersionFullQueryParameter(versionFull *string) *NodesGetParams {
	o.SetVersionFullQueryParameter(versionFull)
	return o
}

// SetVersionFullQueryParameter adds the versionFull to the nodes get params
func (o *NodesGetParams) SetVersionFullQueryParameter(versionFull *string) {
	o.VersionFullQueryParameter = versionFull
}

// WithVersionGenerationQueryParameter adds the versionGeneration to the nodes get params
func (o *NodesGetParams) WithVersionGenerationQueryParameter(versionGeneration *int64) *NodesGetParams {
	o.SetVersionGenerationQueryParameter(versionGeneration)
	return o
}

// SetVersionGenerationQueryParameter adds the versionGeneration to the nodes get params
func (o *NodesGetParams) SetVersionGenerationQueryParameter(versionGeneration *int64) {
	o.VersionGenerationQueryParameter = versionGeneration
}

// WithVersionMajorQueryParameter adds the versionMajor to the nodes get params
func (o *NodesGetParams) WithVersionMajorQueryParameter(versionMajor *int64) *NodesGetParams {
	o.SetVersionMajorQueryParameter(versionMajor)
	return o
}

// SetVersionMajorQueryParameter adds the versionMajor to the nodes get params
func (o *NodesGetParams) SetVersionMajorQueryParameter(versionMajor *int64) {
	o.VersionMajorQueryParameter = versionMajor
}

// WithVersionMinorQueryParameter adds the versionMinor to the nodes get params
func (o *NodesGetParams) WithVersionMinorQueryParameter(versionMinor *int64) *NodesGetParams {
	o.SetVersionMinorQueryParameter(versionMinor)
	return o
}

// SetVersionMinorQueryParameter adds the versionMinor to the nodes get params
func (o *NodesGetParams) SetVersionMinorQueryParameter(versionMinor *int64) {
	o.VersionMinorQueryParameter = versionMinor
}

// WithVersionPatchQueryParameter adds the versionPatch to the nodes get params
func (o *NodesGetParams) WithVersionPatchQueryParameter(versionPatch *string) *NodesGetParams {
	o.SetVersionPatchQueryParameter(versionPatch)
	return o
}

// SetVersionPatchQueryParameter adds the versionPatch to the nodes get params
func (o *NodesGetParams) SetVersionPatchQueryParameter(versionPatch *string) {
	o.VersionPatchQueryParameter = versionPatch
}

// WithVMAccountIDQueryParameter adds the vMAccountID to the nodes get params
func (o *NodesGetParams) WithVMAccountIDQueryParameter(vMAccountID *string) *NodesGetParams {
	o.SetVMAccountIDQueryParameter(vMAccountID)
	return o
}

// SetVMAccountIDQueryParameter adds the vmAccountId to the nodes get params
func (o *NodesGetParams) SetVMAccountIDQueryParameter(vMAccountID *string) {
	o.VMAccountIDQueryParameter = vMAccountID
}

// WithVMDeploymentIDQueryParameter adds the vMDeploymentID to the nodes get params
func (o *NodesGetParams) WithVMDeploymentIDQueryParameter(vMDeploymentID *string) *NodesGetParams {
	o.SetVMDeploymentIDQueryParameter(vMDeploymentID)
	return o
}

// SetVMDeploymentIDQueryParameter adds the vmDeploymentId to the nodes get params
func (o *NodesGetParams) SetVMDeploymentIDQueryParameter(vMDeploymentID *string) {
	o.VMDeploymentIDQueryParameter = vMDeploymentID
}

// WithVMFaultDomainQueryParameter adds the vMFaultDomain to the nodes get params
func (o *NodesGetParams) WithVMFaultDomainQueryParameter(vMFaultDomain *string) *NodesGetParams {
	o.SetVMFaultDomainQueryParameter(vMFaultDomain)
	return o
}

// SetVMFaultDomainQueryParameter adds the vmFaultDomain to the nodes get params
func (o *NodesGetParams) SetVMFaultDomainQueryParameter(vMFaultDomain *string) {
	o.VMFaultDomainQueryParameter = vMFaultDomain
}

// WithVMInstanceIDQueryParameter adds the vMInstanceID to the nodes get params
func (o *NodesGetParams) WithVMInstanceIDQueryParameter(vMInstanceID *string) *NodesGetParams {
	o.SetVMInstanceIDQueryParameter(vMInstanceID)
	return o
}

// SetVMInstanceIDQueryParameter adds the vmInstanceId to the nodes get params
func (o *NodesGetParams) SetVMInstanceIDQueryParameter(vMInstanceID *string) {
	o.VMInstanceIDQueryParameter = vMInstanceID
}

// WithVMPrimaryIPQueryParameter adds the vMPrimaryIP to the nodes get params
func (o *NodesGetParams) WithVMPrimaryIPQueryParameter(vMPrimaryIP *string) *NodesGetParams {
	o.SetVMPrimaryIPQueryParameter(vMPrimaryIP)
	return o
}

// SetVMPrimaryIPQueryParameter adds the vmPrimaryIp to the nodes get params
func (o *NodesGetParams) SetVMPrimaryIPQueryParameter(vMPrimaryIP *string) {
	o.VMPrimaryIPQueryParameter = vMPrimaryIP
}

// WithVMProviderTypeQueryParameter adds the vMProviderType to the nodes get params
func (o *NodesGetParams) WithVMProviderTypeQueryParameter(vMProviderType *string) *NodesGetParams {
	o.SetVMProviderTypeQueryParameter(vMProviderType)
	return o
}

// SetVMProviderTypeQueryParameter adds the vmProviderType to the nodes get params
func (o *NodesGetParams) SetVMProviderTypeQueryParameter(vMProviderType *string) {
	o.VMProviderTypeQueryParameter = vMProviderType
}

// WithVMUpdateDomainQueryParameter adds the vMUpdateDomain to the nodes get params
func (o *NodesGetParams) WithVMUpdateDomainQueryParameter(vMUpdateDomain *string) *NodesGetParams {
	o.SetVMUpdateDomainQueryParameter(vMUpdateDomain)
	return o
}

// SetVMUpdateDomainQueryParameter adds the vmUpdateDomain to the nodes get params
func (o *NodesGetParams) SetVMUpdateDomainQueryParameter(vMUpdateDomain *string) {
	o.VMUpdateDomainQueryParameter = vMUpdateDomain
}

// WriteToRequest writes these params to a swagger request
func (o *NodesGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ClusterInterfacesIPAddressQueryParameter != nil {

		// query param cluster_interfaces.ip.address
		var qrClusterInterfacesIPAddress string

		if o.ClusterInterfacesIPAddressQueryParameter != nil {
			qrClusterInterfacesIPAddress = *o.ClusterInterfacesIPAddressQueryParameter
		}
		qClusterInterfacesIPAddress := qrClusterInterfacesIPAddress
		if qClusterInterfacesIPAddress != "" {

			if err := r.SetQueryParam("cluster_interfaces.ip.address", qClusterInterfacesIPAddress); err != nil {
				return err
			}
		}
	}

	if o.ClusterInterfacesNameQueryParameter != nil {

		// query param cluster_interfaces.name
		var qrClusterInterfacesName string

		if o.ClusterInterfacesNameQueryParameter != nil {
			qrClusterInterfacesName = *o.ClusterInterfacesNameQueryParameter
		}
		qClusterInterfacesName := qrClusterInterfacesName
		if qClusterInterfacesName != "" {

			if err := r.SetQueryParam("cluster_interfaces.name", qClusterInterfacesName); err != nil {
				return err
			}
		}
	}

	if o.ClusterInterfacesUUIDQueryParameter != nil {

		// query param cluster_interfaces.uuid
		var qrClusterInterfacesUUID string

		if o.ClusterInterfacesUUIDQueryParameter != nil {
			qrClusterInterfacesUUID = *o.ClusterInterfacesUUIDQueryParameter
		}
		qClusterInterfacesUUID := qrClusterInterfacesUUID
		if qClusterInterfacesUUID != "" {

			if err := r.SetQueryParam("cluster_interfaces.uuid", qClusterInterfacesUUID); err != nil {
				return err
			}
		}
	}

	if o.ControllerBoardQueryParameter != nil {

		// query param controller.board
		var qrControllerBoard string

		if o.ControllerBoardQueryParameter != nil {
			qrControllerBoard = *o.ControllerBoardQueryParameter
		}
		qControllerBoard := qrControllerBoard
		if qControllerBoard != "" {

			if err := r.SetQueryParam("controller.board", qControllerBoard); err != nil {
				return err
			}
		}
	}

	if o.ControllerCPUCountQueryParameter != nil {

		// query param controller.cpu.count
		var qrControllerCPUCount int64

		if o.ControllerCPUCountQueryParameter != nil {
			qrControllerCPUCount = *o.ControllerCPUCountQueryParameter
		}
		qControllerCPUCount := swag.FormatInt64(qrControllerCPUCount)
		if qControllerCPUCount != "" {

			if err := r.SetQueryParam("controller.cpu.count", qControllerCPUCount); err != nil {
				return err
			}
		}
	}

	if o.ControllerCPUFirmwareReleaseQueryParameter != nil {

		// query param controller.cpu.firmware_release
		var qrControllerCPUFirmwareRelease string

		if o.ControllerCPUFirmwareReleaseQueryParameter != nil {
			qrControllerCPUFirmwareRelease = *o.ControllerCPUFirmwareReleaseQueryParameter
		}
		qControllerCPUFirmwareRelease := qrControllerCPUFirmwareRelease
		if qControllerCPUFirmwareRelease != "" {

			if err := r.SetQueryParam("controller.cpu.firmware_release", qControllerCPUFirmwareRelease); err != nil {
				return err
			}
		}
	}

	if o.ControllerCPUProcessorQueryParameter != nil {

		// query param controller.cpu.processor
		var qrControllerCPUProcessor string

		if o.ControllerCPUProcessorQueryParameter != nil {
			qrControllerCPUProcessor = *o.ControllerCPUProcessorQueryParameter
		}
		qControllerCPUProcessor := qrControllerCPUProcessor
		if qControllerCPUProcessor != "" {

			if err := r.SetQueryParam("controller.cpu.processor", qControllerCPUProcessor); err != nil {
				return err
			}
		}
	}

	if o.ControllerFailedFanCountQueryParameter != nil {

		// query param controller.failed_fan.count
		var qrControllerFailedFanCount int64

		if o.ControllerFailedFanCountQueryParameter != nil {
			qrControllerFailedFanCount = *o.ControllerFailedFanCountQueryParameter
		}
		qControllerFailedFanCount := swag.FormatInt64(qrControllerFailedFanCount)
		if qControllerFailedFanCount != "" {

			if err := r.SetQueryParam("controller.failed_fan.count", qControllerFailedFanCount); err != nil {
				return err
			}
		}
	}

	if o.ControllerFailedFanMessageCodeQueryParameter != nil {

		// query param controller.failed_fan.message.code
		var qrControllerFailedFanMessageCode string

		if o.ControllerFailedFanMessageCodeQueryParameter != nil {
			qrControllerFailedFanMessageCode = *o.ControllerFailedFanMessageCodeQueryParameter
		}
		qControllerFailedFanMessageCode := qrControllerFailedFanMessageCode
		if qControllerFailedFanMessageCode != "" {

			if err := r.SetQueryParam("controller.failed_fan.message.code", qControllerFailedFanMessageCode); err != nil {
				return err
			}
		}
	}

	if o.ControllerFailedFanMessageMessageQueryParameter != nil {

		// query param controller.failed_fan.message.message
		var qrControllerFailedFanMessageMessage string

		if o.ControllerFailedFanMessageMessageQueryParameter != nil {
			qrControllerFailedFanMessageMessage = *o.ControllerFailedFanMessageMessageQueryParameter
		}
		qControllerFailedFanMessageMessage := qrControllerFailedFanMessageMessage
		if qControllerFailedFanMessageMessage != "" {

			if err := r.SetQueryParam("controller.failed_fan.message.message", qControllerFailedFanMessageMessage); err != nil {
				return err
			}
		}
	}

	if o.ControllerFailedPowerSupplyCountQueryParameter != nil {

		// query param controller.failed_power_supply.count
		var qrControllerFailedPowerSupplyCount int64

		if o.ControllerFailedPowerSupplyCountQueryParameter != nil {
			qrControllerFailedPowerSupplyCount = *o.ControllerFailedPowerSupplyCountQueryParameter
		}
		qControllerFailedPowerSupplyCount := swag.FormatInt64(qrControllerFailedPowerSupplyCount)
		if qControllerFailedPowerSupplyCount != "" {

			if err := r.SetQueryParam("controller.failed_power_supply.count", qControllerFailedPowerSupplyCount); err != nil {
				return err
			}
		}
	}

	if o.ControllerFailedPowerSupplyMessageCodeQueryParameter != nil {

		// query param controller.failed_power_supply.message.code
		var qrControllerFailedPowerSupplyMessageCode string

		if o.ControllerFailedPowerSupplyMessageCodeQueryParameter != nil {
			qrControllerFailedPowerSupplyMessageCode = *o.ControllerFailedPowerSupplyMessageCodeQueryParameter
		}
		qControllerFailedPowerSupplyMessageCode := qrControllerFailedPowerSupplyMessageCode
		if qControllerFailedPowerSupplyMessageCode != "" {

			if err := r.SetQueryParam("controller.failed_power_supply.message.code", qControllerFailedPowerSupplyMessageCode); err != nil {
				return err
			}
		}
	}

	if o.ControllerFailedPowerSupplyMessageMessageQueryParameter != nil {

		// query param controller.failed_power_supply.message.message
		var qrControllerFailedPowerSupplyMessageMessage string

		if o.ControllerFailedPowerSupplyMessageMessageQueryParameter != nil {
			qrControllerFailedPowerSupplyMessageMessage = *o.ControllerFailedPowerSupplyMessageMessageQueryParameter
		}
		qControllerFailedPowerSupplyMessageMessage := qrControllerFailedPowerSupplyMessageMessage
		if qControllerFailedPowerSupplyMessageMessage != "" {

			if err := r.SetQueryParam("controller.failed_power_supply.message.message", qControllerFailedPowerSupplyMessageMessage); err != nil {
				return err
			}
		}
	}

	if o.ControllerFlashCacheCapacityQueryParameter != nil {

		// query param controller.flash_cache.capacity
		var qrControllerFlashCacheCapacity int64

		if o.ControllerFlashCacheCapacityQueryParameter != nil {
			qrControllerFlashCacheCapacity = *o.ControllerFlashCacheCapacityQueryParameter
		}
		qControllerFlashCacheCapacity := swag.FormatInt64(qrControllerFlashCacheCapacity)
		if qControllerFlashCacheCapacity != "" {

			if err := r.SetQueryParam("controller.flash_cache.capacity", qControllerFlashCacheCapacity); err != nil {
				return err
			}
		}
	}

	if o.ControllerFlashCacheDeviceIDQueryParameter != nil {

		// query param controller.flash_cache.device_id
		var qrControllerFlashCacheDeviceID int64

		if o.ControllerFlashCacheDeviceIDQueryParameter != nil {
			qrControllerFlashCacheDeviceID = *o.ControllerFlashCacheDeviceIDQueryParameter
		}
		qControllerFlashCacheDeviceID := swag.FormatInt64(qrControllerFlashCacheDeviceID)
		if qControllerFlashCacheDeviceID != "" {

			if err := r.SetQueryParam("controller.flash_cache.device_id", qControllerFlashCacheDeviceID); err != nil {
				return err
			}
		}
	}

	if o.ControllerFlashCacheFirmwareFileQueryParameter != nil {

		// query param controller.flash_cache.firmware_file
		var qrControllerFlashCacheFirmwareFile string

		if o.ControllerFlashCacheFirmwareFileQueryParameter != nil {
			qrControllerFlashCacheFirmwareFile = *o.ControllerFlashCacheFirmwareFileQueryParameter
		}
		qControllerFlashCacheFirmwareFile := qrControllerFlashCacheFirmwareFile
		if qControllerFlashCacheFirmwareFile != "" {

			if err := r.SetQueryParam("controller.flash_cache.firmware_file", qControllerFlashCacheFirmwareFile); err != nil {
				return err
			}
		}
	}

	if o.ControllerFlashCacheFirmwareVersionQueryParameter != nil {

		// query param controller.flash_cache.firmware_version
		var qrControllerFlashCacheFirmwareVersion string

		if o.ControllerFlashCacheFirmwareVersionQueryParameter != nil {
			qrControllerFlashCacheFirmwareVersion = *o.ControllerFlashCacheFirmwareVersionQueryParameter
		}
		qControllerFlashCacheFirmwareVersion := qrControllerFlashCacheFirmwareVersion
		if qControllerFlashCacheFirmwareVersion != "" {

			if err := r.SetQueryParam("controller.flash_cache.firmware_version", qControllerFlashCacheFirmwareVersion); err != nil {
				return err
			}
		}
	}

	if o.ControllerFlashCacheHardwareRevisionQueryParameter != nil {

		// query param controller.flash_cache.hardware_revision
		var qrControllerFlashCacheHardwareRevision string

		if o.ControllerFlashCacheHardwareRevisionQueryParameter != nil {
			qrControllerFlashCacheHardwareRevision = *o.ControllerFlashCacheHardwareRevisionQueryParameter
		}
		qControllerFlashCacheHardwareRevision := qrControllerFlashCacheHardwareRevision
		if qControllerFlashCacheHardwareRevision != "" {

			if err := r.SetQueryParam("controller.flash_cache.hardware_revision", qControllerFlashCacheHardwareRevision); err != nil {
				return err
			}
		}
	}

	if o.ControllerFlashCacheModelQueryParameter != nil {

		// query param controller.flash_cache.model
		var qrControllerFlashCacheModel string

		if o.ControllerFlashCacheModelQueryParameter != nil {
			qrControllerFlashCacheModel = *o.ControllerFlashCacheModelQueryParameter
		}
		qControllerFlashCacheModel := qrControllerFlashCacheModel
		if qControllerFlashCacheModel != "" {

			if err := r.SetQueryParam("controller.flash_cache.model", qControllerFlashCacheModel); err != nil {
				return err
			}
		}
	}

	if o.ControllerFlashCachePartNumberQueryParameter != nil {

		// query param controller.flash_cache.part_number
		var qrControllerFlashCachePartNumber string

		if o.ControllerFlashCachePartNumberQueryParameter != nil {
			qrControllerFlashCachePartNumber = *o.ControllerFlashCachePartNumberQueryParameter
		}
		qControllerFlashCachePartNumber := qrControllerFlashCachePartNumber
		if qControllerFlashCachePartNumber != "" {

			if err := r.SetQueryParam("controller.flash_cache.part_number", qControllerFlashCachePartNumber); err != nil {
				return err
			}
		}
	}

	if o.ControllerFlashCacheSerialNumberQueryParameter != nil {

		// query param controller.flash_cache.serial_number
		var qrControllerFlashCacheSerialNumber string

		if o.ControllerFlashCacheSerialNumberQueryParameter != nil {
			qrControllerFlashCacheSerialNumber = *o.ControllerFlashCacheSerialNumberQueryParameter
		}
		qControllerFlashCacheSerialNumber := qrControllerFlashCacheSerialNumber
		if qControllerFlashCacheSerialNumber != "" {

			if err := r.SetQueryParam("controller.flash_cache.serial_number", qControllerFlashCacheSerialNumber); err != nil {
				return err
			}
		}
	}

	if o.ControllerFlashCacheSlotQueryParameter != nil {

		// query param controller.flash_cache.slot
		var qrControllerFlashCacheSlot string

		if o.ControllerFlashCacheSlotQueryParameter != nil {
			qrControllerFlashCacheSlot = *o.ControllerFlashCacheSlotQueryParameter
		}
		qControllerFlashCacheSlot := qrControllerFlashCacheSlot
		if qControllerFlashCacheSlot != "" {

			if err := r.SetQueryParam("controller.flash_cache.slot", qControllerFlashCacheSlot); err != nil {
				return err
			}
		}
	}

	if o.ControllerFlashCacheStateQueryParameter != nil {

		// query param controller.flash_cache.state
		var qrControllerFlashCacheState string

		if o.ControllerFlashCacheStateQueryParameter != nil {
			qrControllerFlashCacheState = *o.ControllerFlashCacheStateQueryParameter
		}
		qControllerFlashCacheState := qrControllerFlashCacheState
		if qControllerFlashCacheState != "" {

			if err := r.SetQueryParam("controller.flash_cache.state", qControllerFlashCacheState); err != nil {
				return err
			}
		}
	}

	if o.ControllerFrusIDQueryParameter != nil {

		// query param controller.frus.id
		var qrControllerFrusID string

		if o.ControllerFrusIDQueryParameter != nil {
			qrControllerFrusID = *o.ControllerFrusIDQueryParameter
		}
		qControllerFrusID := qrControllerFrusID
		if qControllerFrusID != "" {

			if err := r.SetQueryParam("controller.frus.id", qControllerFrusID); err != nil {
				return err
			}
		}
	}

	if o.ControllerFrusStateQueryParameter != nil {

		// query param controller.frus.state
		var qrControllerFrusState string

		if o.ControllerFrusStateQueryParameter != nil {
			qrControllerFrusState = *o.ControllerFrusStateQueryParameter
		}
		qControllerFrusState := qrControllerFrusState
		if qControllerFrusState != "" {

			if err := r.SetQueryParam("controller.frus.state", qControllerFrusState); err != nil {
				return err
			}
		}
	}

	if o.ControllerFrusTypeQueryParameter != nil {

		// query param controller.frus.type
		var qrControllerFrusType string

		if o.ControllerFrusTypeQueryParameter != nil {
			qrControllerFrusType = *o.ControllerFrusTypeQueryParameter
		}
		qControllerFrusType := qrControllerFrusType
		if qControllerFrusType != "" {

			if err := r.SetQueryParam("controller.frus.type", qControllerFrusType); err != nil {
				return err
			}
		}
	}

	if o.ControllerMemorySizeQueryParameter != nil {

		// query param controller.memory_size
		var qrControllerMemorySize int64

		if o.ControllerMemorySizeQueryParameter != nil {
			qrControllerMemorySize = *o.ControllerMemorySizeQueryParameter
		}
		qControllerMemorySize := swag.FormatInt64(qrControllerMemorySize)
		if qControllerMemorySize != "" {

			if err := r.SetQueryParam("controller.memory_size", qControllerMemorySize); err != nil {
				return err
			}
		}
	}

	if o.ControllerOverTemperatureQueryParameter != nil {

		// query param controller.over_temperature
		var qrControllerOverTemperature string

		if o.ControllerOverTemperatureQueryParameter != nil {
			qrControllerOverTemperature = *o.ControllerOverTemperatureQueryParameter
		}
		qControllerOverTemperature := qrControllerOverTemperature
		if qControllerOverTemperature != "" {

			if err := r.SetQueryParam("controller.over_temperature", qControllerOverTemperature); err != nil {
				return err
			}
		}
	}

	if o.DateQueryParameter != nil {

		// query param date
		var qrDate string

		if o.DateQueryParameter != nil {
			qrDate = *o.DateQueryParameter
		}
		qDate := qrDate
		if qDate != "" {

			if err := r.SetQueryParam("date", qDate); err != nil {
				return err
			}
		}
	}

	if o.ExternalCacheIsEnabledQueryParameter != nil {

		// query param external_cache.is_enabled
		var qrExternalCacheIsEnabled bool

		if o.ExternalCacheIsEnabledQueryParameter != nil {
			qrExternalCacheIsEnabled = *o.ExternalCacheIsEnabledQueryParameter
		}
		qExternalCacheIsEnabled := swag.FormatBool(qrExternalCacheIsEnabled)
		if qExternalCacheIsEnabled != "" {

			if err := r.SetQueryParam("external_cache.is_enabled", qExternalCacheIsEnabled); err != nil {
				return err
			}
		}
	}

	if o.ExternalCacheIsHyaEnabledQueryParameter != nil {

		// query param external_cache.is_hya_enabled
		var qrExternalCacheIsHyaEnabled bool

		if o.ExternalCacheIsHyaEnabledQueryParameter != nil {
			qrExternalCacheIsHyaEnabled = *o.ExternalCacheIsHyaEnabledQueryParameter
		}
		qExternalCacheIsHyaEnabled := swag.FormatBool(qrExternalCacheIsHyaEnabled)
		if qExternalCacheIsHyaEnabled != "" {

			if err := r.SetQueryParam("external_cache.is_hya_enabled", qExternalCacheIsHyaEnabled); err != nil {
				return err
			}
		}
	}

	if o.ExternalCacheIsRewarmEnabledQueryParameter != nil {

		// query param external_cache.is_rewarm_enabled
		var qrExternalCacheIsRewarmEnabled bool

		if o.ExternalCacheIsRewarmEnabledQueryParameter != nil {
			qrExternalCacheIsRewarmEnabled = *o.ExternalCacheIsRewarmEnabledQueryParameter
		}
		qExternalCacheIsRewarmEnabled := swag.FormatBool(qrExternalCacheIsRewarmEnabled)
		if qExternalCacheIsRewarmEnabled != "" {

			if err := r.SetQueryParam("external_cache.is_rewarm_enabled", qExternalCacheIsRewarmEnabled); err != nil {
				return err
			}
		}
	}

	if o.ExternalCachePcsSizeQueryParameter != nil {

		// query param external_cache.pcs_size
		var qrExternalCachePcsSize int64

		if o.ExternalCachePcsSizeQueryParameter != nil {
			qrExternalCachePcsSize = *o.ExternalCachePcsSizeQueryParameter
		}
		qExternalCachePcsSize := swag.FormatInt64(qrExternalCachePcsSize)
		if qExternalCachePcsSize != "" {

			if err := r.SetQueryParam("external_cache.pcs_size", qExternalCachePcsSize); err != nil {
				return err
			}
		}
	}

	if o.FieldsQueryParameter != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.HaAutoGivebackQueryParameter != nil {

		// query param ha.auto_giveback
		var qrHaAutoGiveback bool

		if o.HaAutoGivebackQueryParameter != nil {
			qrHaAutoGiveback = *o.HaAutoGivebackQueryParameter
		}
		qHaAutoGiveback := swag.FormatBool(qrHaAutoGiveback)
		if qHaAutoGiveback != "" {

			if err := r.SetQueryParam("ha.auto_giveback", qHaAutoGiveback); err != nil {
				return err
			}
		}
	}

	if o.HaEnabledQueryParameter != nil {

		// query param ha.enabled
		var qrHaEnabled bool

		if o.HaEnabledQueryParameter != nil {
			qrHaEnabled = *o.HaEnabledQueryParameter
		}
		qHaEnabled := swag.FormatBool(qrHaEnabled)
		if qHaEnabled != "" {

			if err := r.SetQueryParam("ha.enabled", qHaEnabled); err != nil {
				return err
			}
		}
	}

	if o.HaGivebackFailureCodeQueryParameter != nil {

		// query param ha.giveback.failure.code
		var qrHaGivebackFailureCode int64

		if o.HaGivebackFailureCodeQueryParameter != nil {
			qrHaGivebackFailureCode = *o.HaGivebackFailureCodeQueryParameter
		}
		qHaGivebackFailureCode := swag.FormatInt64(qrHaGivebackFailureCode)
		if qHaGivebackFailureCode != "" {

			if err := r.SetQueryParam("ha.giveback.failure.code", qHaGivebackFailureCode); err != nil {
				return err
			}
		}
	}

	if o.HaGivebackFailureMessageQueryParameter != nil {

		// query param ha.giveback.failure.message
		var qrHaGivebackFailureMessage string

		if o.HaGivebackFailureMessageQueryParameter != nil {
			qrHaGivebackFailureMessage = *o.HaGivebackFailureMessageQueryParameter
		}
		qHaGivebackFailureMessage := qrHaGivebackFailureMessage
		if qHaGivebackFailureMessage != "" {

			if err := r.SetQueryParam("ha.giveback.failure.message", qHaGivebackFailureMessage); err != nil {
				return err
			}
		}
	}

	if o.HaGivebackStateQueryParameter != nil {

		// query param ha.giveback.state
		var qrHaGivebackState string

		if o.HaGivebackStateQueryParameter != nil {
			qrHaGivebackState = *o.HaGivebackStateQueryParameter
		}
		qHaGivebackState := qrHaGivebackState
		if qHaGivebackState != "" {

			if err := r.SetQueryParam("ha.giveback.state", qHaGivebackState); err != nil {
				return err
			}
		}
	}

	if o.HaGivebackStatusAggregateNameQueryParameter != nil {

		// query param ha.giveback.status.aggregate.name
		var qrHaGivebackStatusAggregateName string

		if o.HaGivebackStatusAggregateNameQueryParameter != nil {
			qrHaGivebackStatusAggregateName = *o.HaGivebackStatusAggregateNameQueryParameter
		}
		qHaGivebackStatusAggregateName := qrHaGivebackStatusAggregateName
		if qHaGivebackStatusAggregateName != "" {

			if err := r.SetQueryParam("ha.giveback.status.aggregate.name", qHaGivebackStatusAggregateName); err != nil {
				return err
			}
		}
	}

	if o.HaGivebackStatusAggregateUUIDQueryParameter != nil {

		// query param ha.giveback.status.aggregate.uuid
		var qrHaGivebackStatusAggregateUUID string

		if o.HaGivebackStatusAggregateUUIDQueryParameter != nil {
			qrHaGivebackStatusAggregateUUID = *o.HaGivebackStatusAggregateUUIDQueryParameter
		}
		qHaGivebackStatusAggregateUUID := qrHaGivebackStatusAggregateUUID
		if qHaGivebackStatusAggregateUUID != "" {

			if err := r.SetQueryParam("ha.giveback.status.aggregate.uuid", qHaGivebackStatusAggregateUUID); err != nil {
				return err
			}
		}
	}

	if o.HaGivebackStatusErrorCodeQueryParameter != nil {

		// query param ha.giveback.status.error.code
		var qrHaGivebackStatusErrorCode string

		if o.HaGivebackStatusErrorCodeQueryParameter != nil {
			qrHaGivebackStatusErrorCode = *o.HaGivebackStatusErrorCodeQueryParameter
		}
		qHaGivebackStatusErrorCode := qrHaGivebackStatusErrorCode
		if qHaGivebackStatusErrorCode != "" {

			if err := r.SetQueryParam("ha.giveback.status.error.code", qHaGivebackStatusErrorCode); err != nil {
				return err
			}
		}
	}

	if o.HaGivebackStatusErrorMessageQueryParameter != nil {

		// query param ha.giveback.status.error.message
		var qrHaGivebackStatusErrorMessage string

		if o.HaGivebackStatusErrorMessageQueryParameter != nil {
			qrHaGivebackStatusErrorMessage = *o.HaGivebackStatusErrorMessageQueryParameter
		}
		qHaGivebackStatusErrorMessage := qrHaGivebackStatusErrorMessage
		if qHaGivebackStatusErrorMessage != "" {

			if err := r.SetQueryParam("ha.giveback.status.error.message", qHaGivebackStatusErrorMessage); err != nil {
				return err
			}
		}
	}

	if o.HaGivebackStatusStateQueryParameter != nil {

		// query param ha.giveback.status.state
		var qrHaGivebackStatusState string

		if o.HaGivebackStatusStateQueryParameter != nil {
			qrHaGivebackStatusState = *o.HaGivebackStatusStateQueryParameter
		}
		qHaGivebackStatusState := qrHaGivebackStatusState
		if qHaGivebackStatusState != "" {

			if err := r.SetQueryParam("ha.giveback.status.state", qHaGivebackStatusState); err != nil {
				return err
			}
		}
	}

	if o.HaInterconnectAdapterQueryParameter != nil {

		// query param ha.interconnect.adapter
		var qrHaInterconnectAdapter string

		if o.HaInterconnectAdapterQueryParameter != nil {
			qrHaInterconnectAdapter = *o.HaInterconnectAdapterQueryParameter
		}
		qHaInterconnectAdapter := qrHaInterconnectAdapter
		if qHaInterconnectAdapter != "" {

			if err := r.SetQueryParam("ha.interconnect.adapter", qHaInterconnectAdapter); err != nil {
				return err
			}
		}
	}

	if o.HaInterconnectStateQueryParameter != nil {

		// query param ha.interconnect.state
		var qrHaInterconnectState string

		if o.HaInterconnectStateQueryParameter != nil {
			qrHaInterconnectState = *o.HaInterconnectStateQueryParameter
		}
		qHaInterconnectState := qrHaInterconnectState
		if qHaInterconnectState != "" {

			if err := r.SetQueryParam("ha.interconnect.state", qHaInterconnectState); err != nil {
				return err
			}
		}
	}

	if o.HaPartnersNameQueryParameter != nil {

		// query param ha.partners.name
		var qrHaPartnersName string

		if o.HaPartnersNameQueryParameter != nil {
			qrHaPartnersName = *o.HaPartnersNameQueryParameter
		}
		qHaPartnersName := qrHaPartnersName
		if qHaPartnersName != "" {

			if err := r.SetQueryParam("ha.partners.name", qHaPartnersName); err != nil {
				return err
			}
		}
	}

	if o.HaPartnersUUIDQueryParameter != nil {

		// query param ha.partners.uuid
		var qrHaPartnersUUID string

		if o.HaPartnersUUIDQueryParameter != nil {
			qrHaPartnersUUID = *o.HaPartnersUUIDQueryParameter
		}
		qHaPartnersUUID := qrHaPartnersUUID
		if qHaPartnersUUID != "" {

			if err := r.SetQueryParam("ha.partners.uuid", qHaPartnersUUID); err != nil {
				return err
			}
		}
	}

	if o.HaPortsNumberQueryParameter != nil {

		// query param ha.ports.number
		var qrHaPortsNumber int64

		if o.HaPortsNumberQueryParameter != nil {
			qrHaPortsNumber = *o.HaPortsNumberQueryParameter
		}
		qHaPortsNumber := swag.FormatInt64(qrHaPortsNumber)
		if qHaPortsNumber != "" {

			if err := r.SetQueryParam("ha.ports.number", qHaPortsNumber); err != nil {
				return err
			}
		}
	}

	if o.HaPortsStateQueryParameter != nil {

		// query param ha.ports.state
		var qrHaPortsState string

		if o.HaPortsStateQueryParameter != nil {
			qrHaPortsState = *o.HaPortsStateQueryParameter
		}
		qHaPortsState := qrHaPortsState
		if qHaPortsState != "" {

			if err := r.SetQueryParam("ha.ports.state", qHaPortsState); err != nil {
				return err
			}
		}
	}

	if o.HaTakeoverFailureCodeQueryParameter != nil {

		// query param ha.takeover.failure.code
		var qrHaTakeoverFailureCode int64

		if o.HaTakeoverFailureCodeQueryParameter != nil {
			qrHaTakeoverFailureCode = *o.HaTakeoverFailureCodeQueryParameter
		}
		qHaTakeoverFailureCode := swag.FormatInt64(qrHaTakeoverFailureCode)
		if qHaTakeoverFailureCode != "" {

			if err := r.SetQueryParam("ha.takeover.failure.code", qHaTakeoverFailureCode); err != nil {
				return err
			}
		}
	}

	if o.HaTakeoverFailureMessageQueryParameter != nil {

		// query param ha.takeover.failure.message
		var qrHaTakeoverFailureMessage string

		if o.HaTakeoverFailureMessageQueryParameter != nil {
			qrHaTakeoverFailureMessage = *o.HaTakeoverFailureMessageQueryParameter
		}
		qHaTakeoverFailureMessage := qrHaTakeoverFailureMessage
		if qHaTakeoverFailureMessage != "" {

			if err := r.SetQueryParam("ha.takeover.failure.message", qHaTakeoverFailureMessage); err != nil {
				return err
			}
		}
	}

	if o.HaTakeoverStateQueryParameter != nil {

		// query param ha.takeover.state
		var qrHaTakeoverState string

		if o.HaTakeoverStateQueryParameter != nil {
			qrHaTakeoverState = *o.HaTakeoverStateQueryParameter
		}
		qHaTakeoverState := qrHaTakeoverState
		if qHaTakeoverState != "" {

			if err := r.SetQueryParam("ha.takeover.state", qHaTakeoverState); err != nil {
				return err
			}
		}
	}

	if o.HwAssistStatusEnabledQueryParameter != nil {

		// query param hw_assist.status.enabled
		var qrHwAssistStatusEnabled bool

		if o.HwAssistStatusEnabledQueryParameter != nil {
			qrHwAssistStatusEnabled = *o.HwAssistStatusEnabledQueryParameter
		}
		qHwAssistStatusEnabled := swag.FormatBool(qrHwAssistStatusEnabled)
		if qHwAssistStatusEnabled != "" {

			if err := r.SetQueryParam("hw_assist.status.enabled", qHwAssistStatusEnabled); err != nil {
				return err
			}
		}
	}

	if o.HwAssistStatusLocalIPQueryParameter != nil {

		// query param hw_assist.status.local.ip
		var qrHwAssistStatusLocalIP string

		if o.HwAssistStatusLocalIPQueryParameter != nil {
			qrHwAssistStatusLocalIP = *o.HwAssistStatusLocalIPQueryParameter
		}
		qHwAssistStatusLocalIP := qrHwAssistStatusLocalIP
		if qHwAssistStatusLocalIP != "" {

			if err := r.SetQueryParam("hw_assist.status.local.ip", qHwAssistStatusLocalIP); err != nil {
				return err
			}
		}
	}

	if o.HwAssistStatusLocalPortQueryParameter != nil {

		// query param hw_assist.status.local.port
		var qrHwAssistStatusLocalPort int64

		if o.HwAssistStatusLocalPortQueryParameter != nil {
			qrHwAssistStatusLocalPort = *o.HwAssistStatusLocalPortQueryParameter
		}
		qHwAssistStatusLocalPort := swag.FormatInt64(qrHwAssistStatusLocalPort)
		if qHwAssistStatusLocalPort != "" {

			if err := r.SetQueryParam("hw_assist.status.local.port", qHwAssistStatusLocalPort); err != nil {
				return err
			}
		}
	}

	if o.HwAssistStatusLocalStateQueryParameter != nil {

		// query param hw_assist.status.local.state
		var qrHwAssistStatusLocalState string

		if o.HwAssistStatusLocalStateQueryParameter != nil {
			qrHwAssistStatusLocalState = *o.HwAssistStatusLocalStateQueryParameter
		}
		qHwAssistStatusLocalState := qrHwAssistStatusLocalState
		if qHwAssistStatusLocalState != "" {

			if err := r.SetQueryParam("hw_assist.status.local.state", qHwAssistStatusLocalState); err != nil {
				return err
			}
		}
	}

	if o.HwAssistStatusPartnerIPQueryParameter != nil {

		// query param hw_assist.status.partner.ip
		var qrHwAssistStatusPartnerIP string

		if o.HwAssistStatusPartnerIPQueryParameter != nil {
			qrHwAssistStatusPartnerIP = *o.HwAssistStatusPartnerIPQueryParameter
		}
		qHwAssistStatusPartnerIP := qrHwAssistStatusPartnerIP
		if qHwAssistStatusPartnerIP != "" {

			if err := r.SetQueryParam("hw_assist.status.partner.ip", qHwAssistStatusPartnerIP); err != nil {
				return err
			}
		}
	}

	if o.HwAssistStatusPartnerPortQueryParameter != nil {

		// query param hw_assist.status.partner.port
		var qrHwAssistStatusPartnerPort int64

		if o.HwAssistStatusPartnerPortQueryParameter != nil {
			qrHwAssistStatusPartnerPort = *o.HwAssistStatusPartnerPortQueryParameter
		}
		qHwAssistStatusPartnerPort := swag.FormatInt64(qrHwAssistStatusPartnerPort)
		if qHwAssistStatusPartnerPort != "" {

			if err := r.SetQueryParam("hw_assist.status.partner.port", qHwAssistStatusPartnerPort); err != nil {
				return err
			}
		}
	}

	if o.HwAssistStatusPartnerStateQueryParameter != nil {

		// query param hw_assist.status.partner.state
		var qrHwAssistStatusPartnerState string

		if o.HwAssistStatusPartnerStateQueryParameter != nil {
			qrHwAssistStatusPartnerState = *o.HwAssistStatusPartnerStateQueryParameter
		}
		qHwAssistStatusPartnerState := qrHwAssistStatusPartnerState
		if qHwAssistStatusPartnerState != "" {

			if err := r.SetQueryParam("hw_assist.status.partner.state", qHwAssistStatusPartnerState); err != nil {
				return err
			}
		}
	}

	if o.IsAllFlashOptimizedQueryParameter != nil {

		// query param is_all_flash_optimized
		var qrIsAllFlashOptimized bool

		if o.IsAllFlashOptimizedQueryParameter != nil {
			qrIsAllFlashOptimized = *o.IsAllFlashOptimizedQueryParameter
		}
		qIsAllFlashOptimized := swag.FormatBool(qrIsAllFlashOptimized)
		if qIsAllFlashOptimized != "" {

			if err := r.SetQueryParam("is_all_flash_optimized", qIsAllFlashOptimized); err != nil {
				return err
			}
		}
	}

	if o.IsAllFlashSelectOptimizedQueryParameter != nil {

		// query param is_all_flash_select_optimized
		var qrIsAllFlashSelectOptimized bool

		if o.IsAllFlashSelectOptimizedQueryParameter != nil {
			qrIsAllFlashSelectOptimized = *o.IsAllFlashSelectOptimizedQueryParameter
		}
		qIsAllFlashSelectOptimized := swag.FormatBool(qrIsAllFlashSelectOptimized)
		if qIsAllFlashSelectOptimized != "" {

			if err := r.SetQueryParam("is_all_flash_select_optimized", qIsAllFlashSelectOptimized); err != nil {
				return err
			}
		}
	}

	if o.IsCapacityOptimizedQueryParameter != nil {

		// query param is_capacity_optimized
		var qrIsCapacityOptimized bool

		if o.IsCapacityOptimizedQueryParameter != nil {
			qrIsCapacityOptimized = *o.IsCapacityOptimizedQueryParameter
		}
		qIsCapacityOptimized := swag.FormatBool(qrIsCapacityOptimized)
		if qIsCapacityOptimized != "" {

			if err := r.SetQueryParam("is_capacity_optimized", qIsCapacityOptimized); err != nil {
				return err
			}
		}
	}

	if o.IsPerformanceOptimizedQueryParameter != nil {

		// query param is_performance_optimized
		var qrIsPerformanceOptimized bool

		if o.IsPerformanceOptimizedQueryParameter != nil {
			qrIsPerformanceOptimized = *o.IsPerformanceOptimizedQueryParameter
		}
		qIsPerformanceOptimized := swag.FormatBool(qrIsPerformanceOptimized)
		if qIsPerformanceOptimized != "" {

			if err := r.SetQueryParam("is_performance_optimized", qIsPerformanceOptimized); err != nil {
				return err
			}
		}
	}

	if o.IsSparesLowQueryParameter != nil {

		// query param is_spares_low
		var qrIsSparesLow bool

		if o.IsSparesLowQueryParameter != nil {
			qrIsSparesLow = *o.IsSparesLowQueryParameter
		}
		qIsSparesLow := swag.FormatBool(qrIsSparesLow)
		if qIsSparesLow != "" {

			if err := r.SetQueryParam("is_spares_low", qIsSparesLow); err != nil {
				return err
			}
		}
	}

	if o.LocationQueryParameter != nil {

		// query param location
		var qrLocation string

		if o.LocationQueryParameter != nil {
			qrLocation = *o.LocationQueryParameter
		}
		qLocation := qrLocation
		if qLocation != "" {

			if err := r.SetQueryParam("location", qLocation); err != nil {
				return err
			}
		}
	}

	if o.ManagementInterfacesIPAddressQueryParameter != nil {

		// query param management_interfaces.ip.address
		var qrManagementInterfacesIPAddress string

		if o.ManagementInterfacesIPAddressQueryParameter != nil {
			qrManagementInterfacesIPAddress = *o.ManagementInterfacesIPAddressQueryParameter
		}
		qManagementInterfacesIPAddress := qrManagementInterfacesIPAddress
		if qManagementInterfacesIPAddress != "" {

			if err := r.SetQueryParam("management_interfaces.ip.address", qManagementInterfacesIPAddress); err != nil {
				return err
			}
		}
	}

	if o.ManagementInterfacesNameQueryParameter != nil {

		// query param management_interfaces.name
		var qrManagementInterfacesName string

		if o.ManagementInterfacesNameQueryParameter != nil {
			qrManagementInterfacesName = *o.ManagementInterfacesNameQueryParameter
		}
		qManagementInterfacesName := qrManagementInterfacesName
		if qManagementInterfacesName != "" {

			if err := r.SetQueryParam("management_interfaces.name", qManagementInterfacesName); err != nil {
				return err
			}
		}
	}

	if o.ManagementInterfacesUUIDQueryParameter != nil {

		// query param management_interfaces.uuid
		var qrManagementInterfacesUUID string

		if o.ManagementInterfacesUUIDQueryParameter != nil {
			qrManagementInterfacesUUID = *o.ManagementInterfacesUUIDQueryParameter
		}
		qManagementInterfacesUUID := qrManagementInterfacesUUID
		if qManagementInterfacesUUID != "" {

			if err := r.SetQueryParam("management_interfaces.uuid", qManagementInterfacesUUID); err != nil {
				return err
			}
		}
	}

	if o.MaxRecordsQueryParameter != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecordsQueryParameter != nil {
			qrMaxRecords = *o.MaxRecordsQueryParameter
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.MembershIPQueryParameter != nil {

		// query param membership
		var qrMembership string

		if o.MembershIPQueryParameter != nil {
			qrMembership = *o.MembershIPQueryParameter
		}
		qMembership := qrMembership
		if qMembership != "" {

			if err := r.SetQueryParam("membership", qMembership); err != nil {
				return err
			}
		}
	}

	if o.MetricDurationQueryParameter != nil {

		// query param metric.duration
		var qrMetricDuration string

		if o.MetricDurationQueryParameter != nil {
			qrMetricDuration = *o.MetricDurationQueryParameter
		}
		qMetricDuration := qrMetricDuration
		if qMetricDuration != "" {

			if err := r.SetQueryParam("metric.duration", qMetricDuration); err != nil {
				return err
			}
		}
	}

	if o.MetricProcessorUtilizationQueryParameter != nil {

		// query param metric.processor_utilization
		var qrMetricProcessorUtilization int64

		if o.MetricProcessorUtilizationQueryParameter != nil {
			qrMetricProcessorUtilization = *o.MetricProcessorUtilizationQueryParameter
		}
		qMetricProcessorUtilization := swag.FormatInt64(qrMetricProcessorUtilization)
		if qMetricProcessorUtilization != "" {

			if err := r.SetQueryParam("metric.processor_utilization", qMetricProcessorUtilization); err != nil {
				return err
			}
		}
	}

	if o.MetricStatusQueryParameter != nil {

		// query param metric.status
		var qrMetricStatus string

		if o.MetricStatusQueryParameter != nil {
			qrMetricStatus = *o.MetricStatusQueryParameter
		}
		qMetricStatus := qrMetricStatus
		if qMetricStatus != "" {

			if err := r.SetQueryParam("metric.status", qMetricStatus); err != nil {
				return err
			}
		}
	}

	if o.MetricTimestampQueryParameter != nil {

		// query param metric.timestamp
		var qrMetricTimestamp string

		if o.MetricTimestampQueryParameter != nil {
			qrMetricTimestamp = *o.MetricTimestampQueryParameter
		}
		qMetricTimestamp := qrMetricTimestamp
		if qMetricTimestamp != "" {

			if err := r.SetQueryParam("metric.timestamp", qMetricTimestamp); err != nil {
				return err
			}
		}
	}

	if o.MetricUUIDQueryParameter != nil {

		// query param metric.uuid
		var qrMetricUUID string

		if o.MetricUUIDQueryParameter != nil {
			qrMetricUUID = *o.MetricUUIDQueryParameter
		}
		qMetricUUID := qrMetricUUID
		if qMetricUUID != "" {

			if err := r.SetQueryParam("metric.uuid", qMetricUUID); err != nil {
				return err
			}
		}
	}

	if o.MetroclusterCustomVlanCapableQueryParameter != nil {

		// query param metrocluster.custom_vlan_capable
		var qrMetroclusterCustomVlanCapable bool

		if o.MetroclusterCustomVlanCapableQueryParameter != nil {
			qrMetroclusterCustomVlanCapable = *o.MetroclusterCustomVlanCapableQueryParameter
		}
		qMetroclusterCustomVlanCapable := swag.FormatBool(qrMetroclusterCustomVlanCapable)
		if qMetroclusterCustomVlanCapable != "" {

			if err := r.SetQueryParam("metrocluster.custom_vlan_capable", qMetroclusterCustomVlanCapable); err != nil {
				return err
			}
		}
	}

	if o.MetroclusterPortsNameQueryParameter != nil {

		// query param metrocluster.ports.name
		var qrMetroclusterPortsName string

		if o.MetroclusterPortsNameQueryParameter != nil {
			qrMetroclusterPortsName = *o.MetroclusterPortsNameQueryParameter
		}
		qMetroclusterPortsName := qrMetroclusterPortsName
		if qMetroclusterPortsName != "" {

			if err := r.SetQueryParam("metrocluster.ports.name", qMetroclusterPortsName); err != nil {
				return err
			}
		}
	}

	if o.MetroclusterTypeQueryParameter != nil {

		// query param metrocluster.type
		var qrMetroclusterType string

		if o.MetroclusterTypeQueryParameter != nil {
			qrMetroclusterType = *o.MetroclusterTypeQueryParameter
		}
		qMetroclusterType := qrMetroclusterType
		if qMetroclusterType != "" {

			if err := r.SetQueryParam("metrocluster.type", qMetroclusterType); err != nil {
				return err
			}
		}
	}

	if o.ModelQueryParameter != nil {

		// query param model
		var qrModel string

		if o.ModelQueryParameter != nil {
			qrModel = *o.ModelQueryParameter
		}
		qModel := qrModel
		if qModel != "" {

			if err := r.SetQueryParam("model", qModel); err != nil {
				return err
			}
		}
	}

	if o.NameQueryParameter != nil {

		// query param name
		var qrName string

		if o.NameQueryParameter != nil {
			qrName = *o.NameQueryParameter
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.NvramBatteryStateQueryParameter != nil {

		// query param nvram.battery_state
		var qrNvramBatteryState string

		if o.NvramBatteryStateQueryParameter != nil {
			qrNvramBatteryState = *o.NvramBatteryStateQueryParameter
		}
		qNvramBatteryState := qrNvramBatteryState
		if qNvramBatteryState != "" {

			if err := r.SetQueryParam("nvram.battery_state", qNvramBatteryState); err != nil {
				return err
			}
		}
	}

	if o.NvramIDQueryParameter != nil {

		// query param nvram.id
		var qrNvramID int64

		if o.NvramIDQueryParameter != nil {
			qrNvramID = *o.NvramIDQueryParameter
		}
		qNvramID := swag.FormatInt64(qrNvramID)
		if qNvramID != "" {

			if err := r.SetQueryParam("nvram.id", qNvramID); err != nil {
				return err
			}
		}
	}

	if o.OrderByQueryParameter != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.OwnerQueryParameter != nil {

		// query param owner
		var qrOwner string

		if o.OwnerQueryParameter != nil {
			qrOwner = *o.OwnerQueryParameter
		}
		qOwner := qrOwner
		if qOwner != "" {

			if err := r.SetQueryParam("owner", qOwner); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecordsQueryParameter != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecordsQueryParameter != nil {
			qrReturnRecords = *o.ReturnRecordsQueryParameter
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeoutQueryParameter != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeoutQueryParameter != nil {
			qrReturnTimeout = *o.ReturnTimeoutQueryParameter
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.SerialNumberQueryParameter != nil {

		// query param serial_number
		var qrSerialNumber string

		if o.SerialNumberQueryParameter != nil {
			qrSerialNumber = *o.SerialNumberQueryParameter
		}
		qSerialNumber := qrSerialNumber
		if qSerialNumber != "" {

			if err := r.SetQueryParam("serial_number", qSerialNumber); err != nil {
				return err
			}
		}
	}

	if o.ServiceProcessorAPIServiceEnabledQueryParameter != nil {

		// query param service_processor.api_service.enabled
		var qrServiceProcessorAPIServiceEnabled bool

		if o.ServiceProcessorAPIServiceEnabledQueryParameter != nil {
			qrServiceProcessorAPIServiceEnabled = *o.ServiceProcessorAPIServiceEnabledQueryParameter
		}
		qServiceProcessorAPIServiceEnabled := swag.FormatBool(qrServiceProcessorAPIServiceEnabled)
		if qServiceProcessorAPIServiceEnabled != "" {

			if err := r.SetQueryParam("service_processor.api_service.enabled", qServiceProcessorAPIServiceEnabled); err != nil {
				return err
			}
		}
	}

	if o.ServiceProcessorAPIServiceLimitAccessQueryParameter != nil {

		// query param service_processor.api_service.limit_access
		var qrServiceProcessorAPIServiceLimitAccess bool

		if o.ServiceProcessorAPIServiceLimitAccessQueryParameter != nil {
			qrServiceProcessorAPIServiceLimitAccess = *o.ServiceProcessorAPIServiceLimitAccessQueryParameter
		}
		qServiceProcessorAPIServiceLimitAccess := swag.FormatBool(qrServiceProcessorAPIServiceLimitAccess)
		if qServiceProcessorAPIServiceLimitAccess != "" {

			if err := r.SetQueryParam("service_processor.api_service.limit_access", qServiceProcessorAPIServiceLimitAccess); err != nil {
				return err
			}
		}
	}

	if o.ServiceProcessorAPIServicePortQueryParameter != nil {

		// query param service_processor.api_service.port
		var qrServiceProcessorAPIServicePort int64

		if o.ServiceProcessorAPIServicePortQueryParameter != nil {
			qrServiceProcessorAPIServicePort = *o.ServiceProcessorAPIServicePortQueryParameter
		}
		qServiceProcessorAPIServicePort := swag.FormatInt64(qrServiceProcessorAPIServicePort)
		if qServiceProcessorAPIServicePort != "" {

			if err := r.SetQueryParam("service_processor.api_service.port", qServiceProcessorAPIServicePort); err != nil {
				return err
			}
		}
	}

	if o.ServiceProcessorAutoConfigIPV4SubnetQueryParameter != nil {

		// query param service_processor.auto_config.ipv4_subnet
		var qrServiceProcessorAutoConfigIPV4Subnet string

		if o.ServiceProcessorAutoConfigIPV4SubnetQueryParameter != nil {
			qrServiceProcessorAutoConfigIPV4Subnet = *o.ServiceProcessorAutoConfigIPV4SubnetQueryParameter
		}
		qServiceProcessorAutoConfigIPV4Subnet := qrServiceProcessorAutoConfigIPV4Subnet
		if qServiceProcessorAutoConfigIPV4Subnet != "" {

			if err := r.SetQueryParam("service_processor.auto_config.ipv4_subnet", qServiceProcessorAutoConfigIPV4Subnet); err != nil {
				return err
			}
		}
	}

	if o.ServiceProcessorAutoConfigIPV6SubnetQueryParameter != nil {

		// query param service_processor.auto_config.ipv6_subnet
		var qrServiceProcessorAutoConfigIPV6Subnet string

		if o.ServiceProcessorAutoConfigIPV6SubnetQueryParameter != nil {
			qrServiceProcessorAutoConfigIPV6Subnet = *o.ServiceProcessorAutoConfigIPV6SubnetQueryParameter
		}
		qServiceProcessorAutoConfigIPV6Subnet := qrServiceProcessorAutoConfigIPV6Subnet
		if qServiceProcessorAutoConfigIPV6Subnet != "" {

			if err := r.SetQueryParam("service_processor.auto_config.ipv6_subnet", qServiceProcessorAutoConfigIPV6Subnet); err != nil {
				return err
			}
		}
	}

	if o.ServiceProcessorAutoupdateEnabledQueryParameter != nil {

		// query param service_processor.autoupdate_enabled
		var qrServiceProcessorAutoupdateEnabled bool

		if o.ServiceProcessorAutoupdateEnabledQueryParameter != nil {
			qrServiceProcessorAutoupdateEnabled = *o.ServiceProcessorAutoupdateEnabledQueryParameter
		}
		qServiceProcessorAutoupdateEnabled := swag.FormatBool(qrServiceProcessorAutoupdateEnabled)
		if qServiceProcessorAutoupdateEnabled != "" {

			if err := r.SetQueryParam("service_processor.autoupdate_enabled", qServiceProcessorAutoupdateEnabled); err != nil {
				return err
			}
		}
	}

	if o.ServiceProcessorBackupIsCurrentQueryParameter != nil {

		// query param service_processor.backup.is_current
		var qrServiceProcessorBackupIsCurrent bool

		if o.ServiceProcessorBackupIsCurrentQueryParameter != nil {
			qrServiceProcessorBackupIsCurrent = *o.ServiceProcessorBackupIsCurrentQueryParameter
		}
		qServiceProcessorBackupIsCurrent := swag.FormatBool(qrServiceProcessorBackupIsCurrent)
		if qServiceProcessorBackupIsCurrent != "" {

			if err := r.SetQueryParam("service_processor.backup.is_current", qServiceProcessorBackupIsCurrent); err != nil {
				return err
			}
		}
	}

	if o.ServiceProcessorBackupStateQueryParameter != nil {

		// query param service_processor.backup.state
		var qrServiceProcessorBackupState string

		if o.ServiceProcessorBackupStateQueryParameter != nil {
			qrServiceProcessorBackupState = *o.ServiceProcessorBackupStateQueryParameter
		}
		qServiceProcessorBackupState := qrServiceProcessorBackupState
		if qServiceProcessorBackupState != "" {

			if err := r.SetQueryParam("service_processor.backup.state", qServiceProcessorBackupState); err != nil {
				return err
			}
		}
	}

	if o.ServiceProcessorBackupVersionQueryParameter != nil {

		// query param service_processor.backup.version
		var qrServiceProcessorBackupVersion string

		if o.ServiceProcessorBackupVersionQueryParameter != nil {
			qrServiceProcessorBackupVersion = *o.ServiceProcessorBackupVersionQueryParameter
		}
		qServiceProcessorBackupVersion := qrServiceProcessorBackupVersion
		if qServiceProcessorBackupVersion != "" {

			if err := r.SetQueryParam("service_processor.backup.version", qServiceProcessorBackupVersion); err != nil {
				return err
			}
		}
	}

	if o.ServiceProcessorDhcpEnabledQueryParameter != nil {

		// query param service_processor.dhcp_enabled
		var qrServiceProcessorDhcpEnabled bool

		if o.ServiceProcessorDhcpEnabledQueryParameter != nil {
			qrServiceProcessorDhcpEnabled = *o.ServiceProcessorDhcpEnabledQueryParameter
		}
		qServiceProcessorDhcpEnabled := swag.FormatBool(qrServiceProcessorDhcpEnabled)
		if qServiceProcessorDhcpEnabled != "" {

			if err := r.SetQueryParam("service_processor.dhcp_enabled", qServiceProcessorDhcpEnabled); err != nil {
				return err
			}
		}
	}

	if o.ServiceProcessorFirmwareVersionQueryParameter != nil {

		// query param service_processor.firmware_version
		var qrServiceProcessorFirmwareVersion string

		if o.ServiceProcessorFirmwareVersionQueryParameter != nil {
			qrServiceProcessorFirmwareVersion = *o.ServiceProcessorFirmwareVersionQueryParameter
		}
		qServiceProcessorFirmwareVersion := qrServiceProcessorFirmwareVersion
		if qServiceProcessorFirmwareVersion != "" {

			if err := r.SetQueryParam("service_processor.firmware_version", qServiceProcessorFirmwareVersion); err != nil {
				return err
			}
		}
	}

	if o.ServiceProcessorIPV4InterfaceAddressQueryParameter != nil {

		// query param service_processor.ipv4_interface.address
		var qrServiceProcessorIPV4InterfaceAddress string

		if o.ServiceProcessorIPV4InterfaceAddressQueryParameter != nil {
			qrServiceProcessorIPV4InterfaceAddress = *o.ServiceProcessorIPV4InterfaceAddressQueryParameter
		}
		qServiceProcessorIPV4InterfaceAddress := qrServiceProcessorIPV4InterfaceAddress
		if qServiceProcessorIPV4InterfaceAddress != "" {

			if err := r.SetQueryParam("service_processor.ipv4_interface.address", qServiceProcessorIPV4InterfaceAddress); err != nil {
				return err
			}
		}
	}

	if o.ServiceProcessorIPV4InterfaceGatewayQueryParameter != nil {

		// query param service_processor.ipv4_interface.gateway
		var qrServiceProcessorIPV4InterfaceGateway string

		if o.ServiceProcessorIPV4InterfaceGatewayQueryParameter != nil {
			qrServiceProcessorIPV4InterfaceGateway = *o.ServiceProcessorIPV4InterfaceGatewayQueryParameter
		}
		qServiceProcessorIPV4InterfaceGateway := qrServiceProcessorIPV4InterfaceGateway
		if qServiceProcessorIPV4InterfaceGateway != "" {

			if err := r.SetQueryParam("service_processor.ipv4_interface.gateway", qServiceProcessorIPV4InterfaceGateway); err != nil {
				return err
			}
		}
	}

	if o.ServiceProcessorIPV4InterfaceNetmaskQueryParameter != nil {

		// query param service_processor.ipv4_interface.netmask
		var qrServiceProcessorIPV4InterfaceNetmask string

		if o.ServiceProcessorIPV4InterfaceNetmaskQueryParameter != nil {
			qrServiceProcessorIPV4InterfaceNetmask = *o.ServiceProcessorIPV4InterfaceNetmaskQueryParameter
		}
		qServiceProcessorIPV4InterfaceNetmask := qrServiceProcessorIPV4InterfaceNetmask
		if qServiceProcessorIPV4InterfaceNetmask != "" {

			if err := r.SetQueryParam("service_processor.ipv4_interface.netmask", qServiceProcessorIPV4InterfaceNetmask); err != nil {
				return err
			}
		}
	}

	if o.ServiceProcessorIPV6InterfaceAddressQueryParameter != nil {

		// query param service_processor.ipv6_interface.address
		var qrServiceProcessorIPV6InterfaceAddress string

		if o.ServiceProcessorIPV6InterfaceAddressQueryParameter != nil {
			qrServiceProcessorIPV6InterfaceAddress = *o.ServiceProcessorIPV6InterfaceAddressQueryParameter
		}
		qServiceProcessorIPV6InterfaceAddress := qrServiceProcessorIPV6InterfaceAddress
		if qServiceProcessorIPV6InterfaceAddress != "" {

			if err := r.SetQueryParam("service_processor.ipv6_interface.address", qServiceProcessorIPV6InterfaceAddress); err != nil {
				return err
			}
		}
	}

	if o.ServiceProcessorIPV6InterfaceGatewayQueryParameter != nil {

		// query param service_processor.ipv6_interface.gateway
		var qrServiceProcessorIPV6InterfaceGateway string

		if o.ServiceProcessorIPV6InterfaceGatewayQueryParameter != nil {
			qrServiceProcessorIPV6InterfaceGateway = *o.ServiceProcessorIPV6InterfaceGatewayQueryParameter
		}
		qServiceProcessorIPV6InterfaceGateway := qrServiceProcessorIPV6InterfaceGateway
		if qServiceProcessorIPV6InterfaceGateway != "" {

			if err := r.SetQueryParam("service_processor.ipv6_interface.gateway", qServiceProcessorIPV6InterfaceGateway); err != nil {
				return err
			}
		}
	}

	if o.ServiceProcessorIPV6InterfaceNetmaskQueryParameter != nil {

		// query param service_processor.ipv6_interface.netmask
		var qrServiceProcessorIPV6InterfaceNetmask int64

		if o.ServiceProcessorIPV6InterfaceNetmaskQueryParameter != nil {
			qrServiceProcessorIPV6InterfaceNetmask = *o.ServiceProcessorIPV6InterfaceNetmaskQueryParameter
		}
		qServiceProcessorIPV6InterfaceNetmask := swag.FormatInt64(qrServiceProcessorIPV6InterfaceNetmask)
		if qServiceProcessorIPV6InterfaceNetmask != "" {

			if err := r.SetQueryParam("service_processor.ipv6_interface.netmask", qServiceProcessorIPV6InterfaceNetmask); err != nil {
				return err
			}
		}
	}

	if o.ServiceProcessorIsIPConfiguredQueryParameter != nil {

		// query param service_processor.is_ip_configured
		var qrServiceProcessorIsIPConfigured bool

		if o.ServiceProcessorIsIPConfiguredQueryParameter != nil {
			qrServiceProcessorIsIPConfigured = *o.ServiceProcessorIsIPConfiguredQueryParameter
		}
		qServiceProcessorIsIPConfigured := swag.FormatBool(qrServiceProcessorIsIPConfigured)
		if qServiceProcessorIsIPConfigured != "" {

			if err := r.SetQueryParam("service_processor.is_ip_configured", qServiceProcessorIsIPConfigured); err != nil {
				return err
			}
		}
	}

	if o.ServiceProcessorLastUpdateStateQueryParameter != nil {

		// query param service_processor.last_update_state
		var qrServiceProcessorLastUpdateState string

		if o.ServiceProcessorLastUpdateStateQueryParameter != nil {
			qrServiceProcessorLastUpdateState = *o.ServiceProcessorLastUpdateStateQueryParameter
		}
		qServiceProcessorLastUpdateState := qrServiceProcessorLastUpdateState
		if qServiceProcessorLastUpdateState != "" {

			if err := r.SetQueryParam("service_processor.last_update_state", qServiceProcessorLastUpdateState); err != nil {
				return err
			}
		}
	}

	if o.ServiceProcessorLinkStatusQueryParameter != nil {

		// query param service_processor.link_status
		var qrServiceProcessorLinkStatus string

		if o.ServiceProcessorLinkStatusQueryParameter != nil {
			qrServiceProcessorLinkStatus = *o.ServiceProcessorLinkStatusQueryParameter
		}
		qServiceProcessorLinkStatus := qrServiceProcessorLinkStatus
		if qServiceProcessorLinkStatus != "" {

			if err := r.SetQueryParam("service_processor.link_status", qServiceProcessorLinkStatus); err != nil {
				return err
			}
		}
	}

	if o.ServiceProcessorMacAddressQueryParameter != nil {

		// query param service_processor.mac_address
		var qrServiceProcessorMacAddress string

		if o.ServiceProcessorMacAddressQueryParameter != nil {
			qrServiceProcessorMacAddress = *o.ServiceProcessorMacAddressQueryParameter
		}
		qServiceProcessorMacAddress := qrServiceProcessorMacAddress
		if qServiceProcessorMacAddress != "" {

			if err := r.SetQueryParam("service_processor.mac_address", qServiceProcessorMacAddress); err != nil {
				return err
			}
		}
	}

	if o.ServiceProcessorPrimaryIsCurrentQueryParameter != nil {

		// query param service_processor.primary.is_current
		var qrServiceProcessorPrimaryIsCurrent bool

		if o.ServiceProcessorPrimaryIsCurrentQueryParameter != nil {
			qrServiceProcessorPrimaryIsCurrent = *o.ServiceProcessorPrimaryIsCurrentQueryParameter
		}
		qServiceProcessorPrimaryIsCurrent := swag.FormatBool(qrServiceProcessorPrimaryIsCurrent)
		if qServiceProcessorPrimaryIsCurrent != "" {

			if err := r.SetQueryParam("service_processor.primary.is_current", qServiceProcessorPrimaryIsCurrent); err != nil {
				return err
			}
		}
	}

	if o.ServiceProcessorPrimaryStateQueryParameter != nil {

		// query param service_processor.primary.state
		var qrServiceProcessorPrimaryState string

		if o.ServiceProcessorPrimaryStateQueryParameter != nil {
			qrServiceProcessorPrimaryState = *o.ServiceProcessorPrimaryStateQueryParameter
		}
		qServiceProcessorPrimaryState := qrServiceProcessorPrimaryState
		if qServiceProcessorPrimaryState != "" {

			if err := r.SetQueryParam("service_processor.primary.state", qServiceProcessorPrimaryState); err != nil {
				return err
			}
		}
	}

	if o.ServiceProcessorPrimaryVersionQueryParameter != nil {

		// query param service_processor.primary.version
		var qrServiceProcessorPrimaryVersion string

		if o.ServiceProcessorPrimaryVersionQueryParameter != nil {
			qrServiceProcessorPrimaryVersion = *o.ServiceProcessorPrimaryVersionQueryParameter
		}
		qServiceProcessorPrimaryVersion := qrServiceProcessorPrimaryVersion
		if qServiceProcessorPrimaryVersion != "" {

			if err := r.SetQueryParam("service_processor.primary.version", qServiceProcessorPrimaryVersion); err != nil {
				return err
			}
		}
	}

	if o.ServiceProcessorSSHInfoAllowedAddressesQueryParameter != nil {

		// query param service_processor.ssh_info.allowed_addresses
		var qrServiceProcessorSSHInfoAllowedAddresses string

		if o.ServiceProcessorSSHInfoAllowedAddressesQueryParameter != nil {
			qrServiceProcessorSSHInfoAllowedAddresses = *o.ServiceProcessorSSHInfoAllowedAddressesQueryParameter
		}
		qServiceProcessorSSHInfoAllowedAddresses := qrServiceProcessorSSHInfoAllowedAddresses
		if qServiceProcessorSSHInfoAllowedAddresses != "" {

			if err := r.SetQueryParam("service_processor.ssh_info.allowed_addresses", qServiceProcessorSSHInfoAllowedAddresses); err != nil {
				return err
			}
		}
	}

	if o.ServiceProcessorStateQueryParameter != nil {

		// query param service_processor.state
		var qrServiceProcessorState string

		if o.ServiceProcessorStateQueryParameter != nil {
			qrServiceProcessorState = *o.ServiceProcessorStateQueryParameter
		}
		qServiceProcessorState := qrServiceProcessorState
		if qServiceProcessorState != "" {

			if err := r.SetQueryParam("service_processor.state", qServiceProcessorState); err != nil {
				return err
			}
		}
	}

	if o.ServiceProcessorTypeQueryParameter != nil {

		// query param service_processor.type
		var qrServiceProcessorType string

		if o.ServiceProcessorTypeQueryParameter != nil {
			qrServiceProcessorType = *o.ServiceProcessorTypeQueryParameter
		}
		qServiceProcessorType := qrServiceProcessorType
		if qServiceProcessorType != "" {

			if err := r.SetQueryParam("service_processor.type", qServiceProcessorType); err != nil {
				return err
			}
		}
	}

	if o.StateQueryParameter != nil {

		// query param state
		var qrState string

		if o.StateQueryParameter != nil {
			qrState = *o.StateQueryParameter
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if o.StatisticsProcessorUtilizationBaseQueryParameter != nil {

		// query param statistics.processor_utilization_base
		var qrStatisticsProcessorUtilizationBase int64

		if o.StatisticsProcessorUtilizationBaseQueryParameter != nil {
			qrStatisticsProcessorUtilizationBase = *o.StatisticsProcessorUtilizationBaseQueryParameter
		}
		qStatisticsProcessorUtilizationBase := swag.FormatInt64(qrStatisticsProcessorUtilizationBase)
		if qStatisticsProcessorUtilizationBase != "" {

			if err := r.SetQueryParam("statistics.processor_utilization_base", qStatisticsProcessorUtilizationBase); err != nil {
				return err
			}
		}
	}

	if o.StatisticsProcessorUtilizationRawQueryParameter != nil {

		// query param statistics.processor_utilization_raw
		var qrStatisticsProcessorUtilizationRaw int64

		if o.StatisticsProcessorUtilizationRawQueryParameter != nil {
			qrStatisticsProcessorUtilizationRaw = *o.StatisticsProcessorUtilizationRawQueryParameter
		}
		qStatisticsProcessorUtilizationRaw := swag.FormatInt64(qrStatisticsProcessorUtilizationRaw)
		if qStatisticsProcessorUtilizationRaw != "" {

			if err := r.SetQueryParam("statistics.processor_utilization_raw", qStatisticsProcessorUtilizationRaw); err != nil {
				return err
			}
		}
	}

	if o.StatisticsStatusQueryParameter != nil {

		// query param statistics.status
		var qrStatisticsStatus string

		if o.StatisticsStatusQueryParameter != nil {
			qrStatisticsStatus = *o.StatisticsStatusQueryParameter
		}
		qStatisticsStatus := qrStatisticsStatus
		if qStatisticsStatus != "" {

			if err := r.SetQueryParam("statistics.status", qStatisticsStatus); err != nil {
				return err
			}
		}
	}

	if o.StatisticsTimestampQueryParameter != nil {

		// query param statistics.timestamp
		var qrStatisticsTimestamp string

		if o.StatisticsTimestampQueryParameter != nil {
			qrStatisticsTimestamp = *o.StatisticsTimestampQueryParameter
		}
		qStatisticsTimestamp := qrStatisticsTimestamp
		if qStatisticsTimestamp != "" {

			if err := r.SetQueryParam("statistics.timestamp", qStatisticsTimestamp); err != nil {
				return err
			}
		}
	}

	if o.StorageConfigurationQueryParameter != nil {

		// query param storage_configuration
		var qrStorageConfiguration string

		if o.StorageConfigurationQueryParameter != nil {
			qrStorageConfiguration = *o.StorageConfigurationQueryParameter
		}
		qStorageConfiguration := qrStorageConfiguration
		if qStorageConfiguration != "" {

			if err := r.SetQueryParam("storage_configuration", qStorageConfiguration); err != nil {
				return err
			}
		}
	}

	if o.SystemIDQueryParameter != nil {

		// query param system_id
		var qrSystemID string

		if o.SystemIDQueryParameter != nil {
			qrSystemID = *o.SystemIDQueryParameter
		}
		qSystemID := qrSystemID
		if qSystemID != "" {

			if err := r.SetQueryParam("system_id", qSystemID); err != nil {
				return err
			}
		}
	}

	if o.SystemMachineTypeQueryParameter != nil {

		// query param system_machine_type
		var qrSystemMachineType string

		if o.SystemMachineTypeQueryParameter != nil {
			qrSystemMachineType = *o.SystemMachineTypeQueryParameter
		}
		qSystemMachineType := qrSystemMachineType
		if qSystemMachineType != "" {

			if err := r.SetQueryParam("system_machine_type", qSystemMachineType); err != nil {
				return err
			}
		}
	}

	if o.UptimeQueryParameter != nil {

		// query param uptime
		var qrUptime int64

		if o.UptimeQueryParameter != nil {
			qrUptime = *o.UptimeQueryParameter
		}
		qUptime := swag.FormatInt64(qrUptime)
		if qUptime != "" {

			if err := r.SetQueryParam("uptime", qUptime); err != nil {
				return err
			}
		}
	}

	if o.UUIDQueryParameter != nil {

		// query param uuid
		var qrUUID string

		if o.UUIDQueryParameter != nil {
			qrUUID = *o.UUIDQueryParameter
		}
		qUUID := qrUUID
		if qUUID != "" {

			if err := r.SetQueryParam("uuid", qUUID); err != nil {
				return err
			}
		}
	}

	if o.VendorSerialNumberQueryParameter != nil {

		// query param vendor_serial_number
		var qrVendorSerialNumber string

		if o.VendorSerialNumberQueryParameter != nil {
			qrVendorSerialNumber = *o.VendorSerialNumberQueryParameter
		}
		qVendorSerialNumber := qrVendorSerialNumber
		if qVendorSerialNumber != "" {

			if err := r.SetQueryParam("vendor_serial_number", qVendorSerialNumber); err != nil {
				return err
			}
		}
	}

	if o.VersionFullQueryParameter != nil {

		// query param version.full
		var qrVersionFull string

		if o.VersionFullQueryParameter != nil {
			qrVersionFull = *o.VersionFullQueryParameter
		}
		qVersionFull := qrVersionFull
		if qVersionFull != "" {

			if err := r.SetQueryParam("version.full", qVersionFull); err != nil {
				return err
			}
		}
	}

	if o.VersionGenerationQueryParameter != nil {

		// query param version.generation
		var qrVersionGeneration int64

		if o.VersionGenerationQueryParameter != nil {
			qrVersionGeneration = *o.VersionGenerationQueryParameter
		}
		qVersionGeneration := swag.FormatInt64(qrVersionGeneration)
		if qVersionGeneration != "" {

			if err := r.SetQueryParam("version.generation", qVersionGeneration); err != nil {
				return err
			}
		}
	}

	if o.VersionMajorQueryParameter != nil {

		// query param version.major
		var qrVersionMajor int64

		if o.VersionMajorQueryParameter != nil {
			qrVersionMajor = *o.VersionMajorQueryParameter
		}
		qVersionMajor := swag.FormatInt64(qrVersionMajor)
		if qVersionMajor != "" {

			if err := r.SetQueryParam("version.major", qVersionMajor); err != nil {
				return err
			}
		}
	}

	if o.VersionMinorQueryParameter != nil {

		// query param version.minor
		var qrVersionMinor int64

		if o.VersionMinorQueryParameter != nil {
			qrVersionMinor = *o.VersionMinorQueryParameter
		}
		qVersionMinor := swag.FormatInt64(qrVersionMinor)
		if qVersionMinor != "" {

			if err := r.SetQueryParam("version.minor", qVersionMinor); err != nil {
				return err
			}
		}
	}

	if o.VersionPatchQueryParameter != nil {

		// query param version.patch
		var qrVersionPatch string

		if o.VersionPatchQueryParameter != nil {
			qrVersionPatch = *o.VersionPatchQueryParameter
		}
		qVersionPatch := qrVersionPatch
		if qVersionPatch != "" {

			if err := r.SetQueryParam("version.patch", qVersionPatch); err != nil {
				return err
			}
		}
	}

	if o.VMAccountIDQueryParameter != nil {

		// query param vm.account_id
		var qrVMAccountID string

		if o.VMAccountIDQueryParameter != nil {
			qrVMAccountID = *o.VMAccountIDQueryParameter
		}
		qVMAccountID := qrVMAccountID
		if qVMAccountID != "" {

			if err := r.SetQueryParam("vm.account_id", qVMAccountID); err != nil {
				return err
			}
		}
	}

	if o.VMDeploymentIDQueryParameter != nil {

		// query param vm.deployment_id
		var qrVMDeploymentID string

		if o.VMDeploymentIDQueryParameter != nil {
			qrVMDeploymentID = *o.VMDeploymentIDQueryParameter
		}
		qVMDeploymentID := qrVMDeploymentID
		if qVMDeploymentID != "" {

			if err := r.SetQueryParam("vm.deployment_id", qVMDeploymentID); err != nil {
				return err
			}
		}
	}

	if o.VMFaultDomainQueryParameter != nil {

		// query param vm.fault_domain
		var qrVMFaultDomain string

		if o.VMFaultDomainQueryParameter != nil {
			qrVMFaultDomain = *o.VMFaultDomainQueryParameter
		}
		qVMFaultDomain := qrVMFaultDomain
		if qVMFaultDomain != "" {

			if err := r.SetQueryParam("vm.fault_domain", qVMFaultDomain); err != nil {
				return err
			}
		}
	}

	if o.VMInstanceIDQueryParameter != nil {

		// query param vm.instance_id
		var qrVMInstanceID string

		if o.VMInstanceIDQueryParameter != nil {
			qrVMInstanceID = *o.VMInstanceIDQueryParameter
		}
		qVMInstanceID := qrVMInstanceID
		if qVMInstanceID != "" {

			if err := r.SetQueryParam("vm.instance_id", qVMInstanceID); err != nil {
				return err
			}
		}
	}

	if o.VMPrimaryIPQueryParameter != nil {

		// query param vm.primary_ip
		var qrVMPrimaryIP string

		if o.VMPrimaryIPQueryParameter != nil {
			qrVMPrimaryIP = *o.VMPrimaryIPQueryParameter
		}
		qVMPrimaryIP := qrVMPrimaryIP
		if qVMPrimaryIP != "" {

			if err := r.SetQueryParam("vm.primary_ip", qVMPrimaryIP); err != nil {
				return err
			}
		}
	}

	if o.VMProviderTypeQueryParameter != nil {

		// query param vm.provider_type
		var qrVMProviderType string

		if o.VMProviderTypeQueryParameter != nil {
			qrVMProviderType = *o.VMProviderTypeQueryParameter
		}
		qVMProviderType := qrVMProviderType
		if qVMProviderType != "" {

			if err := r.SetQueryParam("vm.provider_type", qVMProviderType); err != nil {
				return err
			}
		}
	}

	if o.VMUpdateDomainQueryParameter != nil {

		// query param vm.update_domain
		var qrVMUpdateDomain string

		if o.VMUpdateDomainQueryParameter != nil {
			qrVMUpdateDomain = *o.VMUpdateDomainQueryParameter
		}
		qVMUpdateDomain := qrVMUpdateDomain
		if qVMUpdateDomain != "" {

			if err := r.SetQueryParam("vm.update_domain", qVMUpdateDomain); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamNodesGet binds the parameter fields
func (o *NodesGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.FieldsQueryParameter

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamNodesGet binds the parameter order_by
func (o *NodesGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderByQueryParameter

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
