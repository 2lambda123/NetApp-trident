// Code generated by go-swagger; DO NOT EDIT.

package cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewNodesGetParams creates a new NodesGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewNodesGetParams() *NodesGetParams {
	return &NodesGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewNodesGetParamsWithTimeout creates a new NodesGetParams object
// with the ability to set a timeout on a request.
func NewNodesGetParamsWithTimeout(timeout time.Duration) *NodesGetParams {
	return &NodesGetParams{
		timeout: timeout,
	}
}

// NewNodesGetParamsWithContext creates a new NodesGetParams object
// with the ability to set a context for a request.
func NewNodesGetParamsWithContext(ctx context.Context) *NodesGetParams {
	return &NodesGetParams{
		Context: ctx,
	}
}

// NewNodesGetParamsWithHTTPClient creates a new NodesGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewNodesGetParamsWithHTTPClient(client *http.Client) *NodesGetParams {
	return &NodesGetParams{
		HTTPClient: client,
	}
}

/* NodesGetParams contains all the parameters to send to the API endpoint
   for the nodes get operation.

   Typically these are written to a http.Request.
*/
type NodesGetParams struct {

	/* ClusterInterfacesIPAddress.

	   Filter by cluster_interfaces.ip.address
	*/
	ClusterInterfacesIPAddressQueryParameter *string

	/* ClusterInterfacesName.

	   Filter by cluster_interfaces.name
	*/
	ClusterInterfacesNameQueryParameter *string

	/* ClusterInterfacesUUID.

	   Filter by cluster_interfaces.uuid
	*/
	ClusterInterfacesUUIDQueryParameter *string

	/* ControllerFlashCacheCapacity.

	   Filter by controller.flash_cache.capacity
	*/
	ControllerFlashCacheCapacityQueryParameter *int64

	/* ControllerFlashCacheFirmwareVersion.

	   Filter by controller.flash_cache.firmware_version
	*/
	ControllerFlashCacheFirmwareVersionQueryParameter *string

	/* ControllerFlashCacheHardwareRevision.

	   Filter by controller.flash_cache.hardware_revision
	*/
	ControllerFlashCacheHardwareRevisionQueryParameter *string

	/* ControllerFlashCacheModel.

	   Filter by controller.flash_cache.model
	*/
	ControllerFlashCacheModelQueryParameter *string

	/* ControllerFlashCachePartNumber.

	   Filter by controller.flash_cache.part_number
	*/
	ControllerFlashCachePartNumberQueryParameter *string

	/* ControllerFlashCacheSerialNumber.

	   Filter by controller.flash_cache.serial_number
	*/
	ControllerFlashCacheSerialNumberQueryParameter *string

	/* ControllerFlashCacheSlot.

	   Filter by controller.flash_cache.slot
	*/
	ControllerFlashCacheSlotQueryParameter *string

	/* ControllerFlashCacheState.

	   Filter by controller.flash_cache.state
	*/
	ControllerFlashCacheStateQueryParameter *string

	/* ControllerFrusID.

	   Filter by controller.frus.id
	*/
	ControllerFrusIDQueryParameter *int64

	/* ControllerFrusState.

	   Filter by controller.frus.state
	*/
	ControllerFrusStateQueryParameter *string

	/* ControllerFrusType.

	   Filter by controller.frus.type
	*/
	ControllerFrusTypeQueryParameter *string

	/* ControllerOverTemperature.

	   Filter by controller.over_temperature
	*/
	ControllerOverTemperatureQueryParameter *string

	/* Date.

	   Filter by date
	*/
	DateQueryParameter *string

	/* Fields.

	   Specify the fields to return.
	*/
	Fields []string

	/* HaAutoGiveback.

	   Filter by ha.auto_giveback
	*/
	HaAutoGivebackQueryParameter *bool

	/* HaEnabled.

	   Filter by ha.enabled
	*/
	HaEnabledQueryParameter *bool

	/* HaGivebackFailureCode.

	   Filter by ha.giveback.failure.code
	*/
	HaGivebackFailureCodeQueryParameter *int64

	/* HaGivebackFailureMessage.

	   Filter by ha.giveback.failure.message
	*/
	HaGivebackFailureMessageQueryParameter *string

	/* HaGivebackState.

	   Filter by ha.giveback.state
	*/
	HaGivebackStateQueryParameter *string

	/* HaPartnersName.

	   Filter by ha.partners.name
	*/
	HaPartnersNameQueryParameter *string

	/* HaPartnersUUID.

	   Filter by ha.partners.uuid
	*/
	HaPartnersUUIDQueryParameter *string

	/* HaPortsNumber.

	   Filter by ha.ports.number
	*/
	HaPortsNumberQueryParameter *int64

	/* HaPortsState.

	   Filter by ha.ports.state
	*/
	HaPortsStateQueryParameter *string

	/* HaTakeoverFailureCode.

	   Filter by ha.takeover.failure.code
	*/
	HaTakeoverFailureCodeQueryParameter *int64

	/* HaTakeoverFailureMessage.

	   Filter by ha.takeover.failure.message
	*/
	HaTakeoverFailureMessageQueryParameter *string

	/* HaTakeoverState.

	   Filter by ha.takeover.state
	*/
	HaTakeoverStateQueryParameter *string

	/* Location.

	   Filter by location
	*/
	LocationQueryParameter *string

	/* ManagementInterfacesIPAddress.

	   Filter by management_interfaces.ip.address
	*/
	ManagementInterfacesIPAddressQueryParameter *string

	/* ManagementInterfacesName.

	   Filter by management_interfaces.name
	*/
	ManagementInterfacesNameQueryParameter *string

	/* ManagementInterfacesUUID.

	   Filter by management_interfaces.uuid
	*/
	ManagementInterfacesUUIDQueryParameter *string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecords *int64

	/* Membership.

	   Filter by membership
	*/
	MembershIPQueryParameter *string

	/* Model.

	   Filter by model
	*/
	ModelQueryParameter *string

	/* Name.

	   Filter by name
	*/
	NameQueryParameter *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderBy []string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecords *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeout *int64

	/* SerialNumber.

	   Filter by serial_number
	*/
	SerialNumberQueryParameter *string

	/* ServiceProcessorDhcpEnabled.

	   Filter by service_processor.dhcp_enabled
	*/
	ServiceProcessorDhcpEnabledQueryParameter *bool

	/* ServiceProcessorFirmwareVersion.

	   Filter by service_processor.firmware_version
	*/
	ServiceProcessorFirmwareVersionQueryParameter *string

	/* ServiceProcessorIPV4InterfaceAddress.

	   Filter by service_processor.ipv4_interface.address
	*/
	ServiceProcessorIPV4InterfaceAddressQueryParameter *string

	/* ServiceProcessorIPV4InterfaceGateway.

	   Filter by service_processor.ipv4_interface.gateway
	*/
	ServiceProcessorIPV4InterfaceGatewayQueryParameter *string

	/* ServiceProcessorIPV4InterfaceNetmask.

	   Filter by service_processor.ipv4_interface.netmask
	*/
	ServiceProcessorIPV4InterfaceNetmaskQueryParameter *string

	/* ServiceProcessorIPV6InterfaceAddress.

	   Filter by service_processor.ipv6_interface.address
	*/
	ServiceProcessorIPV6InterfaceAddressQueryParameter *string

	/* ServiceProcessorIPV6InterfaceGateway.

	   Filter by service_processor.ipv6_interface.gateway
	*/
	ServiceProcessorIPV6InterfaceGatewayQueryParameter *string

	/* ServiceProcessorIPV6InterfaceNetmask.

	   Filter by service_processor.ipv6_interface.netmask
	*/
	ServiceProcessorIPV6InterfaceNetmaskQueryParameter *string

	/* ServiceProcessorLinkStatus.

	   Filter by service_processor.link_status
	*/
	ServiceProcessorLinkStatusQueryParameter *string

	/* ServiceProcessorMacAddress.

	   Filter by service_processor.mac_address
	*/
	ServiceProcessorMacAddressQueryParameter *string

	/* ServiceProcessorState.

	   Filter by service_processor.state
	*/
	ServiceProcessorStateQueryParameter *string

	/* State.

	   Filter by state
	*/
	StateQueryParameter *string

	/* SystemID.

	   Filter by system_id
	*/
	SystemIDQueryParameter *string

	/* SystemMachineType.

	   Filter by system_machine_type
	*/
	SystemMachineTypeQueryParameter *string

	/* Uptime.

	   Filter by uptime
	*/
	UptimeQueryParameter *int64

	/* UUID.

	   Filter by uuid
	*/
	UUIDQueryParameter *string

	/* VendorSerialNumber.

	   Filter by vendor_serial_number
	*/
	VendorSerialNumberQueryParameter *string

	/* VersionFull.

	   Filter by version.full
	*/
	VersionFullQueryParameter *string

	/* VersionGeneration.

	   Filter by version.generation
	*/
	VersionGenerationQueryParameter *int64

	/* VersionMajor.

	   Filter by version.major
	*/
	VersionMajorQueryParameter *int64

	/* VersionMinor.

	   Filter by version.minor
	*/
	VersionMinorQueryParameter *int64

	/* VMProviderType.

	   Filter by vm.provider_type
	*/
	VMProviderTypeQueryParameter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the nodes get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NodesGetParams) WithDefaults() *NodesGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the nodes get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NodesGetParams) SetDefaults() {
	var (
		returnRecordsDefault = bool(true)

		returnTimeoutDefault = int64(15)
	)

	val := NodesGetParams{
		ReturnRecords: &returnRecordsDefault,
		ReturnTimeout: &returnTimeoutDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the nodes get params
func (o *NodesGetParams) WithTimeout(timeout time.Duration) *NodesGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the nodes get params
func (o *NodesGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the nodes get params
func (o *NodesGetParams) WithContext(ctx context.Context) *NodesGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the nodes get params
func (o *NodesGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the nodes get params
func (o *NodesGetParams) WithHTTPClient(client *http.Client) *NodesGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the nodes get params
func (o *NodesGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterInterfacesIPAddressQueryParameter adds the clusterInterfacesIPAddress to the nodes get params
func (o *NodesGetParams) WithClusterInterfacesIPAddressQueryParameter(clusterInterfacesIPAddress *string) *NodesGetParams {
	o.SetClusterInterfacesIPAddressQueryParameter(clusterInterfacesIPAddress)
	return o
}

// SetClusterInterfacesIPAddressQueryParameter adds the clusterInterfacesIpAddress to the nodes get params
func (o *NodesGetParams) SetClusterInterfacesIPAddressQueryParameter(clusterInterfacesIPAddress *string) {
	o.ClusterInterfacesIPAddressQueryParameter = clusterInterfacesIPAddress
}

// WithClusterInterfacesNameQueryParameter adds the clusterInterfacesName to the nodes get params
func (o *NodesGetParams) WithClusterInterfacesNameQueryParameter(clusterInterfacesName *string) *NodesGetParams {
	o.SetClusterInterfacesNameQueryParameter(clusterInterfacesName)
	return o
}

// SetClusterInterfacesNameQueryParameter adds the clusterInterfacesName to the nodes get params
func (o *NodesGetParams) SetClusterInterfacesNameQueryParameter(clusterInterfacesName *string) {
	o.ClusterInterfacesNameQueryParameter = clusterInterfacesName
}

// WithClusterInterfacesUUIDQueryParameter adds the clusterInterfacesUUID to the nodes get params
func (o *NodesGetParams) WithClusterInterfacesUUIDQueryParameter(clusterInterfacesUUID *string) *NodesGetParams {
	o.SetClusterInterfacesUUIDQueryParameter(clusterInterfacesUUID)
	return o
}

// SetClusterInterfacesUUIDQueryParameter adds the clusterInterfacesUuid to the nodes get params
func (o *NodesGetParams) SetClusterInterfacesUUIDQueryParameter(clusterInterfacesUUID *string) {
	o.ClusterInterfacesUUIDQueryParameter = clusterInterfacesUUID
}

// WithControllerFlashCacheCapacityQueryParameter adds the controllerFlashCacheCapacity to the nodes get params
func (o *NodesGetParams) WithControllerFlashCacheCapacityQueryParameter(controllerFlashCacheCapacity *int64) *NodesGetParams {
	o.SetControllerFlashCacheCapacityQueryParameter(controllerFlashCacheCapacity)
	return o
}

// SetControllerFlashCacheCapacityQueryParameter adds the controllerFlashCacheCapacity to the nodes get params
func (o *NodesGetParams) SetControllerFlashCacheCapacityQueryParameter(controllerFlashCacheCapacity *int64) {
	o.ControllerFlashCacheCapacityQueryParameter = controllerFlashCacheCapacity
}

// WithControllerFlashCacheFirmwareVersionQueryParameter adds the controllerFlashCacheFirmwareVersion to the nodes get params
func (o *NodesGetParams) WithControllerFlashCacheFirmwareVersionQueryParameter(controllerFlashCacheFirmwareVersion *string) *NodesGetParams {
	o.SetControllerFlashCacheFirmwareVersionQueryParameter(controllerFlashCacheFirmwareVersion)
	return o
}

// SetControllerFlashCacheFirmwareVersionQueryParameter adds the controllerFlashCacheFirmwareVersion to the nodes get params
func (o *NodesGetParams) SetControllerFlashCacheFirmwareVersionQueryParameter(controllerFlashCacheFirmwareVersion *string) {
	o.ControllerFlashCacheFirmwareVersionQueryParameter = controllerFlashCacheFirmwareVersion
}

// WithControllerFlashCacheHardwareRevisionQueryParameter adds the controllerFlashCacheHardwareRevision to the nodes get params
func (o *NodesGetParams) WithControllerFlashCacheHardwareRevisionQueryParameter(controllerFlashCacheHardwareRevision *string) *NodesGetParams {
	o.SetControllerFlashCacheHardwareRevisionQueryParameter(controllerFlashCacheHardwareRevision)
	return o
}

// SetControllerFlashCacheHardwareRevisionQueryParameter adds the controllerFlashCacheHardwareRevision to the nodes get params
func (o *NodesGetParams) SetControllerFlashCacheHardwareRevisionQueryParameter(controllerFlashCacheHardwareRevision *string) {
	o.ControllerFlashCacheHardwareRevisionQueryParameter = controllerFlashCacheHardwareRevision
}

// WithControllerFlashCacheModelQueryParameter adds the controllerFlashCacheModel to the nodes get params
func (o *NodesGetParams) WithControllerFlashCacheModelQueryParameter(controllerFlashCacheModel *string) *NodesGetParams {
	o.SetControllerFlashCacheModelQueryParameter(controllerFlashCacheModel)
	return o
}

// SetControllerFlashCacheModelQueryParameter adds the controllerFlashCacheModel to the nodes get params
func (o *NodesGetParams) SetControllerFlashCacheModelQueryParameter(controllerFlashCacheModel *string) {
	o.ControllerFlashCacheModelQueryParameter = controllerFlashCacheModel
}

// WithControllerFlashCachePartNumberQueryParameter adds the controllerFlashCachePartNumber to the nodes get params
func (o *NodesGetParams) WithControllerFlashCachePartNumberQueryParameter(controllerFlashCachePartNumber *string) *NodesGetParams {
	o.SetControllerFlashCachePartNumberQueryParameter(controllerFlashCachePartNumber)
	return o
}

// SetControllerFlashCachePartNumberQueryParameter adds the controllerFlashCachePartNumber to the nodes get params
func (o *NodesGetParams) SetControllerFlashCachePartNumberQueryParameter(controllerFlashCachePartNumber *string) {
	o.ControllerFlashCachePartNumberQueryParameter = controllerFlashCachePartNumber
}

// WithControllerFlashCacheSerialNumberQueryParameter adds the controllerFlashCacheSerialNumber to the nodes get params
func (o *NodesGetParams) WithControllerFlashCacheSerialNumberQueryParameter(controllerFlashCacheSerialNumber *string) *NodesGetParams {
	o.SetControllerFlashCacheSerialNumberQueryParameter(controllerFlashCacheSerialNumber)
	return o
}

// SetControllerFlashCacheSerialNumberQueryParameter adds the controllerFlashCacheSerialNumber to the nodes get params
func (o *NodesGetParams) SetControllerFlashCacheSerialNumberQueryParameter(controllerFlashCacheSerialNumber *string) {
	o.ControllerFlashCacheSerialNumberQueryParameter = controllerFlashCacheSerialNumber
}

// WithControllerFlashCacheSlotQueryParameter adds the controllerFlashCacheSlot to the nodes get params
func (o *NodesGetParams) WithControllerFlashCacheSlotQueryParameter(controllerFlashCacheSlot *string) *NodesGetParams {
	o.SetControllerFlashCacheSlotQueryParameter(controllerFlashCacheSlot)
	return o
}

// SetControllerFlashCacheSlotQueryParameter adds the controllerFlashCacheSlot to the nodes get params
func (o *NodesGetParams) SetControllerFlashCacheSlotQueryParameter(controllerFlashCacheSlot *string) {
	o.ControllerFlashCacheSlotQueryParameter = controllerFlashCacheSlot
}

// WithControllerFlashCacheStateQueryParameter adds the controllerFlashCacheState to the nodes get params
func (o *NodesGetParams) WithControllerFlashCacheStateQueryParameter(controllerFlashCacheState *string) *NodesGetParams {
	o.SetControllerFlashCacheStateQueryParameter(controllerFlashCacheState)
	return o
}

// SetControllerFlashCacheStateQueryParameter adds the controllerFlashCacheState to the nodes get params
func (o *NodesGetParams) SetControllerFlashCacheStateQueryParameter(controllerFlashCacheState *string) {
	o.ControllerFlashCacheStateQueryParameter = controllerFlashCacheState
}

// WithControllerFrusIDQueryParameter adds the controllerFrusID to the nodes get params
func (o *NodesGetParams) WithControllerFrusIDQueryParameter(controllerFrusID *int64) *NodesGetParams {
	o.SetControllerFrusIDQueryParameter(controllerFrusID)
	return o
}

// SetControllerFrusIDQueryParameter adds the controllerFrusId to the nodes get params
func (o *NodesGetParams) SetControllerFrusIDQueryParameter(controllerFrusID *int64) {
	o.ControllerFrusIDQueryParameter = controllerFrusID
}

// WithControllerFrusStateQueryParameter adds the controllerFrusState to the nodes get params
func (o *NodesGetParams) WithControllerFrusStateQueryParameter(controllerFrusState *string) *NodesGetParams {
	o.SetControllerFrusStateQueryParameter(controllerFrusState)
	return o
}

// SetControllerFrusStateQueryParameter adds the controllerFrusState to the nodes get params
func (o *NodesGetParams) SetControllerFrusStateQueryParameter(controllerFrusState *string) {
	o.ControllerFrusStateQueryParameter = controllerFrusState
}

// WithControllerFrusTypeQueryParameter adds the controllerFrusType to the nodes get params
func (o *NodesGetParams) WithControllerFrusTypeQueryParameter(controllerFrusType *string) *NodesGetParams {
	o.SetControllerFrusTypeQueryParameter(controllerFrusType)
	return o
}

// SetControllerFrusTypeQueryParameter adds the controllerFrusType to the nodes get params
func (o *NodesGetParams) SetControllerFrusTypeQueryParameter(controllerFrusType *string) {
	o.ControllerFrusTypeQueryParameter = controllerFrusType
}

// WithControllerOverTemperatureQueryParameter adds the controllerOverTemperature to the nodes get params
func (o *NodesGetParams) WithControllerOverTemperatureQueryParameter(controllerOverTemperature *string) *NodesGetParams {
	o.SetControllerOverTemperatureQueryParameter(controllerOverTemperature)
	return o
}

// SetControllerOverTemperatureQueryParameter adds the controllerOverTemperature to the nodes get params
func (o *NodesGetParams) SetControllerOverTemperatureQueryParameter(controllerOverTemperature *string) {
	o.ControllerOverTemperatureQueryParameter = controllerOverTemperature
}

// WithDateQueryParameter adds the date to the nodes get params
func (o *NodesGetParams) WithDateQueryParameter(date *string) *NodesGetParams {
	o.SetDateQueryParameter(date)
	return o
}

// SetDateQueryParameter adds the date to the nodes get params
func (o *NodesGetParams) SetDateQueryParameter(date *string) {
	o.DateQueryParameter = date
}

// WithFields adds the fields to the nodes get params
func (o *NodesGetParams) WithFields(fields []string) *NodesGetParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the nodes get params
func (o *NodesGetParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithHaAutoGivebackQueryParameter adds the haAutoGiveback to the nodes get params
func (o *NodesGetParams) WithHaAutoGivebackQueryParameter(haAutoGiveback *bool) *NodesGetParams {
	o.SetHaAutoGivebackQueryParameter(haAutoGiveback)
	return o
}

// SetHaAutoGivebackQueryParameter adds the haAutoGiveback to the nodes get params
func (o *NodesGetParams) SetHaAutoGivebackQueryParameter(haAutoGiveback *bool) {
	o.HaAutoGivebackQueryParameter = haAutoGiveback
}

// WithHaEnabledQueryParameter adds the haEnabled to the nodes get params
func (o *NodesGetParams) WithHaEnabledQueryParameter(haEnabled *bool) *NodesGetParams {
	o.SetHaEnabledQueryParameter(haEnabled)
	return o
}

// SetHaEnabledQueryParameter adds the haEnabled to the nodes get params
func (o *NodesGetParams) SetHaEnabledQueryParameter(haEnabled *bool) {
	o.HaEnabledQueryParameter = haEnabled
}

// WithHaGivebackFailureCodeQueryParameter adds the haGivebackFailureCode to the nodes get params
func (o *NodesGetParams) WithHaGivebackFailureCodeQueryParameter(haGivebackFailureCode *int64) *NodesGetParams {
	o.SetHaGivebackFailureCodeQueryParameter(haGivebackFailureCode)
	return o
}

// SetHaGivebackFailureCodeQueryParameter adds the haGivebackFailureCode to the nodes get params
func (o *NodesGetParams) SetHaGivebackFailureCodeQueryParameter(haGivebackFailureCode *int64) {
	o.HaGivebackFailureCodeQueryParameter = haGivebackFailureCode
}

// WithHaGivebackFailureMessageQueryParameter adds the haGivebackFailureMessage to the nodes get params
func (o *NodesGetParams) WithHaGivebackFailureMessageQueryParameter(haGivebackFailureMessage *string) *NodesGetParams {
	o.SetHaGivebackFailureMessageQueryParameter(haGivebackFailureMessage)
	return o
}

// SetHaGivebackFailureMessageQueryParameter adds the haGivebackFailureMessage to the nodes get params
func (o *NodesGetParams) SetHaGivebackFailureMessageQueryParameter(haGivebackFailureMessage *string) {
	o.HaGivebackFailureMessageQueryParameter = haGivebackFailureMessage
}

// WithHaGivebackStateQueryParameter adds the haGivebackState to the nodes get params
func (o *NodesGetParams) WithHaGivebackStateQueryParameter(haGivebackState *string) *NodesGetParams {
	o.SetHaGivebackStateQueryParameter(haGivebackState)
	return o
}

// SetHaGivebackStateQueryParameter adds the haGivebackState to the nodes get params
func (o *NodesGetParams) SetHaGivebackStateQueryParameter(haGivebackState *string) {
	o.HaGivebackStateQueryParameter = haGivebackState
}

// WithHaPartnersNameQueryParameter adds the haPartnersName to the nodes get params
func (o *NodesGetParams) WithHaPartnersNameQueryParameter(haPartnersName *string) *NodesGetParams {
	o.SetHaPartnersNameQueryParameter(haPartnersName)
	return o
}

// SetHaPartnersNameQueryParameter adds the haPartnersName to the nodes get params
func (o *NodesGetParams) SetHaPartnersNameQueryParameter(haPartnersName *string) {
	o.HaPartnersNameQueryParameter = haPartnersName
}

// WithHaPartnersUUIDQueryParameter adds the haPartnersUUID to the nodes get params
func (o *NodesGetParams) WithHaPartnersUUIDQueryParameter(haPartnersUUID *string) *NodesGetParams {
	o.SetHaPartnersUUIDQueryParameter(haPartnersUUID)
	return o
}

// SetHaPartnersUUIDQueryParameter adds the haPartnersUuid to the nodes get params
func (o *NodesGetParams) SetHaPartnersUUIDQueryParameter(haPartnersUUID *string) {
	o.HaPartnersUUIDQueryParameter = haPartnersUUID
}

// WithHaPortsNumberQueryParameter adds the haPortsNumber to the nodes get params
func (o *NodesGetParams) WithHaPortsNumberQueryParameter(haPortsNumber *int64) *NodesGetParams {
	o.SetHaPortsNumberQueryParameter(haPortsNumber)
	return o
}

// SetHaPortsNumberQueryParameter adds the haPortsNumber to the nodes get params
func (o *NodesGetParams) SetHaPortsNumberQueryParameter(haPortsNumber *int64) {
	o.HaPortsNumberQueryParameter = haPortsNumber
}

// WithHaPortsStateQueryParameter adds the haPortsState to the nodes get params
func (o *NodesGetParams) WithHaPortsStateQueryParameter(haPortsState *string) *NodesGetParams {
	o.SetHaPortsStateQueryParameter(haPortsState)
	return o
}

// SetHaPortsStateQueryParameter adds the haPortsState to the nodes get params
func (o *NodesGetParams) SetHaPortsStateQueryParameter(haPortsState *string) {
	o.HaPortsStateQueryParameter = haPortsState
}

// WithHaTakeoverFailureCodeQueryParameter adds the haTakeoverFailureCode to the nodes get params
func (o *NodesGetParams) WithHaTakeoverFailureCodeQueryParameter(haTakeoverFailureCode *int64) *NodesGetParams {
	o.SetHaTakeoverFailureCodeQueryParameter(haTakeoverFailureCode)
	return o
}

// SetHaTakeoverFailureCodeQueryParameter adds the haTakeoverFailureCode to the nodes get params
func (o *NodesGetParams) SetHaTakeoverFailureCodeQueryParameter(haTakeoverFailureCode *int64) {
	o.HaTakeoverFailureCodeQueryParameter = haTakeoverFailureCode
}

// WithHaTakeoverFailureMessageQueryParameter adds the haTakeoverFailureMessage to the nodes get params
func (o *NodesGetParams) WithHaTakeoverFailureMessageQueryParameter(haTakeoverFailureMessage *string) *NodesGetParams {
	o.SetHaTakeoverFailureMessageQueryParameter(haTakeoverFailureMessage)
	return o
}

// SetHaTakeoverFailureMessageQueryParameter adds the haTakeoverFailureMessage to the nodes get params
func (o *NodesGetParams) SetHaTakeoverFailureMessageQueryParameter(haTakeoverFailureMessage *string) {
	o.HaTakeoverFailureMessageQueryParameter = haTakeoverFailureMessage
}

// WithHaTakeoverStateQueryParameter adds the haTakeoverState to the nodes get params
func (o *NodesGetParams) WithHaTakeoverStateQueryParameter(haTakeoverState *string) *NodesGetParams {
	o.SetHaTakeoverStateQueryParameter(haTakeoverState)
	return o
}

// SetHaTakeoverStateQueryParameter adds the haTakeoverState to the nodes get params
func (o *NodesGetParams) SetHaTakeoverStateQueryParameter(haTakeoverState *string) {
	o.HaTakeoverStateQueryParameter = haTakeoverState
}

// WithLocationQueryParameter adds the location to the nodes get params
func (o *NodesGetParams) WithLocationQueryParameter(location *string) *NodesGetParams {
	o.SetLocationQueryParameter(location)
	return o
}

// SetLocationQueryParameter adds the location to the nodes get params
func (o *NodesGetParams) SetLocationQueryParameter(location *string) {
	o.LocationQueryParameter = location
}

// WithManagementInterfacesIPAddressQueryParameter adds the managementInterfacesIPAddress to the nodes get params
func (o *NodesGetParams) WithManagementInterfacesIPAddressQueryParameter(managementInterfacesIPAddress *string) *NodesGetParams {
	o.SetManagementInterfacesIPAddressQueryParameter(managementInterfacesIPAddress)
	return o
}

// SetManagementInterfacesIPAddressQueryParameter adds the managementInterfacesIpAddress to the nodes get params
func (o *NodesGetParams) SetManagementInterfacesIPAddressQueryParameter(managementInterfacesIPAddress *string) {
	o.ManagementInterfacesIPAddressQueryParameter = managementInterfacesIPAddress
}

// WithManagementInterfacesNameQueryParameter adds the managementInterfacesName to the nodes get params
func (o *NodesGetParams) WithManagementInterfacesNameQueryParameter(managementInterfacesName *string) *NodesGetParams {
	o.SetManagementInterfacesNameQueryParameter(managementInterfacesName)
	return o
}

// SetManagementInterfacesNameQueryParameter adds the managementInterfacesName to the nodes get params
func (o *NodesGetParams) SetManagementInterfacesNameQueryParameter(managementInterfacesName *string) {
	o.ManagementInterfacesNameQueryParameter = managementInterfacesName
}

// WithManagementInterfacesUUIDQueryParameter adds the managementInterfacesUUID to the nodes get params
func (o *NodesGetParams) WithManagementInterfacesUUIDQueryParameter(managementInterfacesUUID *string) *NodesGetParams {
	o.SetManagementInterfacesUUIDQueryParameter(managementInterfacesUUID)
	return o
}

// SetManagementInterfacesUUIDQueryParameter adds the managementInterfacesUuid to the nodes get params
func (o *NodesGetParams) SetManagementInterfacesUUIDQueryParameter(managementInterfacesUUID *string) {
	o.ManagementInterfacesUUIDQueryParameter = managementInterfacesUUID
}

// WithMaxRecords adds the maxRecords to the nodes get params
func (o *NodesGetParams) WithMaxRecords(maxRecords *int64) *NodesGetParams {
	o.SetMaxRecords(maxRecords)
	return o
}

// SetMaxRecords adds the maxRecords to the nodes get params
func (o *NodesGetParams) SetMaxRecords(maxRecords *int64) {
	o.MaxRecords = maxRecords
}

// WithMembershIPQueryParameter adds the membership to the nodes get params
func (o *NodesGetParams) WithMembershIPQueryParameter(membership *string) *NodesGetParams {
	o.SetMembershIPQueryParameter(membership)
	return o
}

// SetMembershIPQueryParameter adds the membership to the nodes get params
func (o *NodesGetParams) SetMembershIPQueryParameter(membership *string) {
	o.MembershIPQueryParameter = membership
}

// WithModelQueryParameter adds the model to the nodes get params
func (o *NodesGetParams) WithModelQueryParameter(model *string) *NodesGetParams {
	o.SetModelQueryParameter(model)
	return o
}

// SetModelQueryParameter adds the model to the nodes get params
func (o *NodesGetParams) SetModelQueryParameter(model *string) {
	o.ModelQueryParameter = model
}

// WithNameQueryParameter adds the name to the nodes get params
func (o *NodesGetParams) WithNameQueryParameter(name *string) *NodesGetParams {
	o.SetNameQueryParameter(name)
	return o
}

// SetNameQueryParameter adds the name to the nodes get params
func (o *NodesGetParams) SetNameQueryParameter(name *string) {
	o.NameQueryParameter = name
}

// WithOrderBy adds the orderBy to the nodes get params
func (o *NodesGetParams) WithOrderBy(orderBy []string) *NodesGetParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the nodes get params
func (o *NodesGetParams) SetOrderBy(orderBy []string) {
	o.OrderBy = orderBy
}

// WithReturnRecords adds the returnRecords to the nodes get params
func (o *NodesGetParams) WithReturnRecords(returnRecords *bool) *NodesGetParams {
	o.SetReturnRecords(returnRecords)
	return o
}

// SetReturnRecords adds the returnRecords to the nodes get params
func (o *NodesGetParams) SetReturnRecords(returnRecords *bool) {
	o.ReturnRecords = returnRecords
}

// WithReturnTimeout adds the returnTimeout to the nodes get params
func (o *NodesGetParams) WithReturnTimeout(returnTimeout *int64) *NodesGetParams {
	o.SetReturnTimeout(returnTimeout)
	return o
}

// SetReturnTimeout adds the returnTimeout to the nodes get params
func (o *NodesGetParams) SetReturnTimeout(returnTimeout *int64) {
	o.ReturnTimeout = returnTimeout
}

// WithSerialNumberQueryParameter adds the serialNumber to the nodes get params
func (o *NodesGetParams) WithSerialNumberQueryParameter(serialNumber *string) *NodesGetParams {
	o.SetSerialNumberQueryParameter(serialNumber)
	return o
}

// SetSerialNumberQueryParameter adds the serialNumber to the nodes get params
func (o *NodesGetParams) SetSerialNumberQueryParameter(serialNumber *string) {
	o.SerialNumberQueryParameter = serialNumber
}

// WithServiceProcessorDhcpEnabledQueryParameter adds the serviceProcessorDhcpEnabled to the nodes get params
func (o *NodesGetParams) WithServiceProcessorDhcpEnabledQueryParameter(serviceProcessorDhcpEnabled *bool) *NodesGetParams {
	o.SetServiceProcessorDhcpEnabledQueryParameter(serviceProcessorDhcpEnabled)
	return o
}

// SetServiceProcessorDhcpEnabledQueryParameter adds the serviceProcessorDhcpEnabled to the nodes get params
func (o *NodesGetParams) SetServiceProcessorDhcpEnabledQueryParameter(serviceProcessorDhcpEnabled *bool) {
	o.ServiceProcessorDhcpEnabledQueryParameter = serviceProcessorDhcpEnabled
}

// WithServiceProcessorFirmwareVersionQueryParameter adds the serviceProcessorFirmwareVersion to the nodes get params
func (o *NodesGetParams) WithServiceProcessorFirmwareVersionQueryParameter(serviceProcessorFirmwareVersion *string) *NodesGetParams {
	o.SetServiceProcessorFirmwareVersionQueryParameter(serviceProcessorFirmwareVersion)
	return o
}

// SetServiceProcessorFirmwareVersionQueryParameter adds the serviceProcessorFirmwareVersion to the nodes get params
func (o *NodesGetParams) SetServiceProcessorFirmwareVersionQueryParameter(serviceProcessorFirmwareVersion *string) {
	o.ServiceProcessorFirmwareVersionQueryParameter = serviceProcessorFirmwareVersion
}

// WithServiceProcessorIPV4InterfaceAddressQueryParameter adds the serviceProcessorIPV4InterfaceAddress to the nodes get params
func (o *NodesGetParams) WithServiceProcessorIPV4InterfaceAddressQueryParameter(serviceProcessorIPV4InterfaceAddress *string) *NodesGetParams {
	o.SetServiceProcessorIPV4InterfaceAddressQueryParameter(serviceProcessorIPV4InterfaceAddress)
	return o
}

// SetServiceProcessorIPV4InterfaceAddressQueryParameter adds the serviceProcessorIpv4InterfaceAddress to the nodes get params
func (o *NodesGetParams) SetServiceProcessorIPV4InterfaceAddressQueryParameter(serviceProcessorIPV4InterfaceAddress *string) {
	o.ServiceProcessorIPV4InterfaceAddressQueryParameter = serviceProcessorIPV4InterfaceAddress
}

// WithServiceProcessorIPV4InterfaceGatewayQueryParameter adds the serviceProcessorIPV4InterfaceGateway to the nodes get params
func (o *NodesGetParams) WithServiceProcessorIPV4InterfaceGatewayQueryParameter(serviceProcessorIPV4InterfaceGateway *string) *NodesGetParams {
	o.SetServiceProcessorIPV4InterfaceGatewayQueryParameter(serviceProcessorIPV4InterfaceGateway)
	return o
}

// SetServiceProcessorIPV4InterfaceGatewayQueryParameter adds the serviceProcessorIpv4InterfaceGateway to the nodes get params
func (o *NodesGetParams) SetServiceProcessorIPV4InterfaceGatewayQueryParameter(serviceProcessorIPV4InterfaceGateway *string) {
	o.ServiceProcessorIPV4InterfaceGatewayQueryParameter = serviceProcessorIPV4InterfaceGateway
}

// WithServiceProcessorIPV4InterfaceNetmaskQueryParameter adds the serviceProcessorIPV4InterfaceNetmask to the nodes get params
func (o *NodesGetParams) WithServiceProcessorIPV4InterfaceNetmaskQueryParameter(serviceProcessorIPV4InterfaceNetmask *string) *NodesGetParams {
	o.SetServiceProcessorIPV4InterfaceNetmaskQueryParameter(serviceProcessorIPV4InterfaceNetmask)
	return o
}

// SetServiceProcessorIPV4InterfaceNetmaskQueryParameter adds the serviceProcessorIpv4InterfaceNetmask to the nodes get params
func (o *NodesGetParams) SetServiceProcessorIPV4InterfaceNetmaskQueryParameter(serviceProcessorIPV4InterfaceNetmask *string) {
	o.ServiceProcessorIPV4InterfaceNetmaskQueryParameter = serviceProcessorIPV4InterfaceNetmask
}

// WithServiceProcessorIPV6InterfaceAddressQueryParameter adds the serviceProcessorIPV6InterfaceAddress to the nodes get params
func (o *NodesGetParams) WithServiceProcessorIPV6InterfaceAddressQueryParameter(serviceProcessorIPV6InterfaceAddress *string) *NodesGetParams {
	o.SetServiceProcessorIPV6InterfaceAddressQueryParameter(serviceProcessorIPV6InterfaceAddress)
	return o
}

// SetServiceProcessorIPV6InterfaceAddressQueryParameter adds the serviceProcessorIpv6InterfaceAddress to the nodes get params
func (o *NodesGetParams) SetServiceProcessorIPV6InterfaceAddressQueryParameter(serviceProcessorIPV6InterfaceAddress *string) {
	o.ServiceProcessorIPV6InterfaceAddressQueryParameter = serviceProcessorIPV6InterfaceAddress
}

// WithServiceProcessorIPV6InterfaceGatewayQueryParameter adds the serviceProcessorIPV6InterfaceGateway to the nodes get params
func (o *NodesGetParams) WithServiceProcessorIPV6InterfaceGatewayQueryParameter(serviceProcessorIPV6InterfaceGateway *string) *NodesGetParams {
	o.SetServiceProcessorIPV6InterfaceGatewayQueryParameter(serviceProcessorIPV6InterfaceGateway)
	return o
}

// SetServiceProcessorIPV6InterfaceGatewayQueryParameter adds the serviceProcessorIpv6InterfaceGateway to the nodes get params
func (o *NodesGetParams) SetServiceProcessorIPV6InterfaceGatewayQueryParameter(serviceProcessorIPV6InterfaceGateway *string) {
	o.ServiceProcessorIPV6InterfaceGatewayQueryParameter = serviceProcessorIPV6InterfaceGateway
}

// WithServiceProcessorIPV6InterfaceNetmaskQueryParameter adds the serviceProcessorIPV6InterfaceNetmask to the nodes get params
func (o *NodesGetParams) WithServiceProcessorIPV6InterfaceNetmaskQueryParameter(serviceProcessorIPV6InterfaceNetmask *string) *NodesGetParams {
	o.SetServiceProcessorIPV6InterfaceNetmaskQueryParameter(serviceProcessorIPV6InterfaceNetmask)
	return o
}

// SetServiceProcessorIPV6InterfaceNetmaskQueryParameter adds the serviceProcessorIpv6InterfaceNetmask to the nodes get params
func (o *NodesGetParams) SetServiceProcessorIPV6InterfaceNetmaskQueryParameter(serviceProcessorIPV6InterfaceNetmask *string) {
	o.ServiceProcessorIPV6InterfaceNetmaskQueryParameter = serviceProcessorIPV6InterfaceNetmask
}

// WithServiceProcessorLinkStatusQueryParameter adds the serviceProcessorLinkStatus to the nodes get params
func (o *NodesGetParams) WithServiceProcessorLinkStatusQueryParameter(serviceProcessorLinkStatus *string) *NodesGetParams {
	o.SetServiceProcessorLinkStatusQueryParameter(serviceProcessorLinkStatus)
	return o
}

// SetServiceProcessorLinkStatusQueryParameter adds the serviceProcessorLinkStatus to the nodes get params
func (o *NodesGetParams) SetServiceProcessorLinkStatusQueryParameter(serviceProcessorLinkStatus *string) {
	o.ServiceProcessorLinkStatusQueryParameter = serviceProcessorLinkStatus
}

// WithServiceProcessorMacAddressQueryParameter adds the serviceProcessorMacAddress to the nodes get params
func (o *NodesGetParams) WithServiceProcessorMacAddressQueryParameter(serviceProcessorMacAddress *string) *NodesGetParams {
	o.SetServiceProcessorMacAddressQueryParameter(serviceProcessorMacAddress)
	return o
}

// SetServiceProcessorMacAddressQueryParameter adds the serviceProcessorMacAddress to the nodes get params
func (o *NodesGetParams) SetServiceProcessorMacAddressQueryParameter(serviceProcessorMacAddress *string) {
	o.ServiceProcessorMacAddressQueryParameter = serviceProcessorMacAddress
}

// WithServiceProcessorStateQueryParameter adds the serviceProcessorState to the nodes get params
func (o *NodesGetParams) WithServiceProcessorStateQueryParameter(serviceProcessorState *string) *NodesGetParams {
	o.SetServiceProcessorStateQueryParameter(serviceProcessorState)
	return o
}

// SetServiceProcessorStateQueryParameter adds the serviceProcessorState to the nodes get params
func (o *NodesGetParams) SetServiceProcessorStateQueryParameter(serviceProcessorState *string) {
	o.ServiceProcessorStateQueryParameter = serviceProcessorState
}

// WithStateQueryParameter adds the state to the nodes get params
func (o *NodesGetParams) WithStateQueryParameter(state *string) *NodesGetParams {
	o.SetStateQueryParameter(state)
	return o
}

// SetStateQueryParameter adds the state to the nodes get params
func (o *NodesGetParams) SetStateQueryParameter(state *string) {
	o.StateQueryParameter = state
}

// WithSystemIDQueryParameter adds the systemID to the nodes get params
func (o *NodesGetParams) WithSystemIDQueryParameter(systemID *string) *NodesGetParams {
	o.SetSystemIDQueryParameter(systemID)
	return o
}

// SetSystemIDQueryParameter adds the systemId to the nodes get params
func (o *NodesGetParams) SetSystemIDQueryParameter(systemID *string) {
	o.SystemIDQueryParameter = systemID
}

// WithSystemMachineTypeQueryParameter adds the systemMachineType to the nodes get params
func (o *NodesGetParams) WithSystemMachineTypeQueryParameter(systemMachineType *string) *NodesGetParams {
	o.SetSystemMachineTypeQueryParameter(systemMachineType)
	return o
}

// SetSystemMachineTypeQueryParameter adds the systemMachineType to the nodes get params
func (o *NodesGetParams) SetSystemMachineTypeQueryParameter(systemMachineType *string) {
	o.SystemMachineTypeQueryParameter = systemMachineType
}

// WithUptimeQueryParameter adds the uptime to the nodes get params
func (o *NodesGetParams) WithUptimeQueryParameter(uptime *int64) *NodesGetParams {
	o.SetUptimeQueryParameter(uptime)
	return o
}

// SetUptimeQueryParameter adds the uptime to the nodes get params
func (o *NodesGetParams) SetUptimeQueryParameter(uptime *int64) {
	o.UptimeQueryParameter = uptime
}

// WithUUIDQueryParameter adds the uuid to the nodes get params
func (o *NodesGetParams) WithUUIDQueryParameter(uuid *string) *NodesGetParams {
	o.SetUUIDQueryParameter(uuid)
	return o
}

// SetUUIDQueryParameter adds the uuid to the nodes get params
func (o *NodesGetParams) SetUUIDQueryParameter(uuid *string) {
	o.UUIDQueryParameter = uuid
}

// WithVendorSerialNumberQueryParameter adds the vendorSerialNumber to the nodes get params
func (o *NodesGetParams) WithVendorSerialNumberQueryParameter(vendorSerialNumber *string) *NodesGetParams {
	o.SetVendorSerialNumberQueryParameter(vendorSerialNumber)
	return o
}

// SetVendorSerialNumberQueryParameter adds the vendorSerialNumber to the nodes get params
func (o *NodesGetParams) SetVendorSerialNumberQueryParameter(vendorSerialNumber *string) {
	o.VendorSerialNumberQueryParameter = vendorSerialNumber
}

// WithVersionFullQueryParameter adds the versionFull to the nodes get params
func (o *NodesGetParams) WithVersionFullQueryParameter(versionFull *string) *NodesGetParams {
	o.SetVersionFullQueryParameter(versionFull)
	return o
}

// SetVersionFullQueryParameter adds the versionFull to the nodes get params
func (o *NodesGetParams) SetVersionFullQueryParameter(versionFull *string) {
	o.VersionFullQueryParameter = versionFull
}

// WithVersionGenerationQueryParameter adds the versionGeneration to the nodes get params
func (o *NodesGetParams) WithVersionGenerationQueryParameter(versionGeneration *int64) *NodesGetParams {
	o.SetVersionGenerationQueryParameter(versionGeneration)
	return o
}

// SetVersionGenerationQueryParameter adds the versionGeneration to the nodes get params
func (o *NodesGetParams) SetVersionGenerationQueryParameter(versionGeneration *int64) {
	o.VersionGenerationQueryParameter = versionGeneration
}

// WithVersionMajorQueryParameter adds the versionMajor to the nodes get params
func (o *NodesGetParams) WithVersionMajorQueryParameter(versionMajor *int64) *NodesGetParams {
	o.SetVersionMajorQueryParameter(versionMajor)
	return o
}

// SetVersionMajorQueryParameter adds the versionMajor to the nodes get params
func (o *NodesGetParams) SetVersionMajorQueryParameter(versionMajor *int64) {
	o.VersionMajorQueryParameter = versionMajor
}

// WithVersionMinorQueryParameter adds the versionMinor to the nodes get params
func (o *NodesGetParams) WithVersionMinorQueryParameter(versionMinor *int64) *NodesGetParams {
	o.SetVersionMinorQueryParameter(versionMinor)
	return o
}

// SetVersionMinorQueryParameter adds the versionMinor to the nodes get params
func (o *NodesGetParams) SetVersionMinorQueryParameter(versionMinor *int64) {
	o.VersionMinorQueryParameter = versionMinor
}

// WithVMProviderTypeQueryParameter adds the vMProviderType to the nodes get params
func (o *NodesGetParams) WithVMProviderTypeQueryParameter(vMProviderType *string) *NodesGetParams {
	o.SetVMProviderTypeQueryParameter(vMProviderType)
	return o
}

// SetVMProviderTypeQueryParameter adds the vmProviderType to the nodes get params
func (o *NodesGetParams) SetVMProviderTypeQueryParameter(vMProviderType *string) {
	o.VMProviderTypeQueryParameter = vMProviderType
}

// WriteToRequest writes these params to a swagger request
func (o *NodesGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ClusterInterfacesIPAddressQueryParameter != nil {

		// query param cluster_interfaces.ip.address
		var qrClusterInterfacesIPAddress string

		if o.ClusterInterfacesIPAddressQueryParameter != nil {
			qrClusterInterfacesIPAddress = *o.ClusterInterfacesIPAddressQueryParameter
		}
		qClusterInterfacesIPAddress := qrClusterInterfacesIPAddress
		if qClusterInterfacesIPAddress != "" {

			if err := r.SetQueryParam("cluster_interfaces.ip.address", qClusterInterfacesIPAddress); err != nil {
				return err
			}
		}
	}

	if o.ClusterInterfacesNameQueryParameter != nil {

		// query param cluster_interfaces.name
		var qrClusterInterfacesName string

		if o.ClusterInterfacesNameQueryParameter != nil {
			qrClusterInterfacesName = *o.ClusterInterfacesNameQueryParameter
		}
		qClusterInterfacesName := qrClusterInterfacesName
		if qClusterInterfacesName != "" {

			if err := r.SetQueryParam("cluster_interfaces.name", qClusterInterfacesName); err != nil {
				return err
			}
		}
	}

	if o.ClusterInterfacesUUIDQueryParameter != nil {

		// query param cluster_interfaces.uuid
		var qrClusterInterfacesUUID string

		if o.ClusterInterfacesUUIDQueryParameter != nil {
			qrClusterInterfacesUUID = *o.ClusterInterfacesUUIDQueryParameter
		}
		qClusterInterfacesUUID := qrClusterInterfacesUUID
		if qClusterInterfacesUUID != "" {

			if err := r.SetQueryParam("cluster_interfaces.uuid", qClusterInterfacesUUID); err != nil {
				return err
			}
		}
	}

	if o.ControllerFlashCacheCapacityQueryParameter != nil {

		// query param controller.flash_cache.capacity
		var qrControllerFlashCacheCapacity int64

		if o.ControllerFlashCacheCapacityQueryParameter != nil {
			qrControllerFlashCacheCapacity = *o.ControllerFlashCacheCapacityQueryParameter
		}
		qControllerFlashCacheCapacity := swag.FormatInt64(qrControllerFlashCacheCapacity)
		if qControllerFlashCacheCapacity != "" {

			if err := r.SetQueryParam("controller.flash_cache.capacity", qControllerFlashCacheCapacity); err != nil {
				return err
			}
		}
	}

	if o.ControllerFlashCacheFirmwareVersionQueryParameter != nil {

		// query param controller.flash_cache.firmware_version
		var qrControllerFlashCacheFirmwareVersion string

		if o.ControllerFlashCacheFirmwareVersionQueryParameter != nil {
			qrControllerFlashCacheFirmwareVersion = *o.ControllerFlashCacheFirmwareVersionQueryParameter
		}
		qControllerFlashCacheFirmwareVersion := qrControllerFlashCacheFirmwareVersion
		if qControllerFlashCacheFirmwareVersion != "" {

			if err := r.SetQueryParam("controller.flash_cache.firmware_version", qControllerFlashCacheFirmwareVersion); err != nil {
				return err
			}
		}
	}

	if o.ControllerFlashCacheHardwareRevisionQueryParameter != nil {

		// query param controller.flash_cache.hardware_revision
		var qrControllerFlashCacheHardwareRevision string

		if o.ControllerFlashCacheHardwareRevisionQueryParameter != nil {
			qrControllerFlashCacheHardwareRevision = *o.ControllerFlashCacheHardwareRevisionQueryParameter
		}
		qControllerFlashCacheHardwareRevision := qrControllerFlashCacheHardwareRevision
		if qControllerFlashCacheHardwareRevision != "" {

			if err := r.SetQueryParam("controller.flash_cache.hardware_revision", qControllerFlashCacheHardwareRevision); err != nil {
				return err
			}
		}
	}

	if o.ControllerFlashCacheModelQueryParameter != nil {

		// query param controller.flash_cache.model
		var qrControllerFlashCacheModel string

		if o.ControllerFlashCacheModelQueryParameter != nil {
			qrControllerFlashCacheModel = *o.ControllerFlashCacheModelQueryParameter
		}
		qControllerFlashCacheModel := qrControllerFlashCacheModel
		if qControllerFlashCacheModel != "" {

			if err := r.SetQueryParam("controller.flash_cache.model", qControllerFlashCacheModel); err != nil {
				return err
			}
		}
	}

	if o.ControllerFlashCachePartNumberQueryParameter != nil {

		// query param controller.flash_cache.part_number
		var qrControllerFlashCachePartNumber string

		if o.ControllerFlashCachePartNumberQueryParameter != nil {
			qrControllerFlashCachePartNumber = *o.ControllerFlashCachePartNumberQueryParameter
		}
		qControllerFlashCachePartNumber := qrControllerFlashCachePartNumber
		if qControllerFlashCachePartNumber != "" {

			if err := r.SetQueryParam("controller.flash_cache.part_number", qControllerFlashCachePartNumber); err != nil {
				return err
			}
		}
	}

	if o.ControllerFlashCacheSerialNumberQueryParameter != nil {

		// query param controller.flash_cache.serial_number
		var qrControllerFlashCacheSerialNumber string

		if o.ControllerFlashCacheSerialNumberQueryParameter != nil {
			qrControllerFlashCacheSerialNumber = *o.ControllerFlashCacheSerialNumberQueryParameter
		}
		qControllerFlashCacheSerialNumber := qrControllerFlashCacheSerialNumber
		if qControllerFlashCacheSerialNumber != "" {

			if err := r.SetQueryParam("controller.flash_cache.serial_number", qControllerFlashCacheSerialNumber); err != nil {
				return err
			}
		}
	}

	if o.ControllerFlashCacheSlotQueryParameter != nil {

		// query param controller.flash_cache.slot
		var qrControllerFlashCacheSlot string

		if o.ControllerFlashCacheSlotQueryParameter != nil {
			qrControllerFlashCacheSlot = *o.ControllerFlashCacheSlotQueryParameter
		}
		qControllerFlashCacheSlot := qrControllerFlashCacheSlot
		if qControllerFlashCacheSlot != "" {

			if err := r.SetQueryParam("controller.flash_cache.slot", qControllerFlashCacheSlot); err != nil {
				return err
			}
		}
	}

	if o.ControllerFlashCacheStateQueryParameter != nil {

		// query param controller.flash_cache.state
		var qrControllerFlashCacheState string

		if o.ControllerFlashCacheStateQueryParameter != nil {
			qrControllerFlashCacheState = *o.ControllerFlashCacheStateQueryParameter
		}
		qControllerFlashCacheState := qrControllerFlashCacheState
		if qControllerFlashCacheState != "" {

			if err := r.SetQueryParam("controller.flash_cache.state", qControllerFlashCacheState); err != nil {
				return err
			}
		}
	}

	if o.ControllerFrusIDQueryParameter != nil {

		// query param controller.frus.id
		var qrControllerFrusID int64

		if o.ControllerFrusIDQueryParameter != nil {
			qrControllerFrusID = *o.ControllerFrusIDQueryParameter
		}
		qControllerFrusID := swag.FormatInt64(qrControllerFrusID)
		if qControllerFrusID != "" {

			if err := r.SetQueryParam("controller.frus.id", qControllerFrusID); err != nil {
				return err
			}
		}
	}

	if o.ControllerFrusStateQueryParameter != nil {

		// query param controller.frus.state
		var qrControllerFrusState string

		if o.ControllerFrusStateQueryParameter != nil {
			qrControllerFrusState = *o.ControllerFrusStateQueryParameter
		}
		qControllerFrusState := qrControllerFrusState
		if qControllerFrusState != "" {

			if err := r.SetQueryParam("controller.frus.state", qControllerFrusState); err != nil {
				return err
			}
		}
	}

	if o.ControllerFrusTypeQueryParameter != nil {

		// query param controller.frus.type
		var qrControllerFrusType string

		if o.ControllerFrusTypeQueryParameter != nil {
			qrControllerFrusType = *o.ControllerFrusTypeQueryParameter
		}
		qControllerFrusType := qrControllerFrusType
		if qControllerFrusType != "" {

			if err := r.SetQueryParam("controller.frus.type", qControllerFrusType); err != nil {
				return err
			}
		}
	}

	if o.ControllerOverTemperatureQueryParameter != nil {

		// query param controller.over_temperature
		var qrControllerOverTemperature string

		if o.ControllerOverTemperatureQueryParameter != nil {
			qrControllerOverTemperature = *o.ControllerOverTemperatureQueryParameter
		}
		qControllerOverTemperature := qrControllerOverTemperature
		if qControllerOverTemperature != "" {

			if err := r.SetQueryParam("controller.over_temperature", qControllerOverTemperature); err != nil {
				return err
			}
		}
	}

	if o.DateQueryParameter != nil {

		// query param date
		var qrDate string

		if o.DateQueryParameter != nil {
			qrDate = *o.DateQueryParameter
		}
		qDate := qrDate
		if qDate != "" {

			if err := r.SetQueryParam("date", qDate); err != nil {
				return err
			}
		}
	}

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.HaAutoGivebackQueryParameter != nil {

		// query param ha.auto_giveback
		var qrHaAutoGiveback bool

		if o.HaAutoGivebackQueryParameter != nil {
			qrHaAutoGiveback = *o.HaAutoGivebackQueryParameter
		}
		qHaAutoGiveback := swag.FormatBool(qrHaAutoGiveback)
		if qHaAutoGiveback != "" {

			if err := r.SetQueryParam("ha.auto_giveback", qHaAutoGiveback); err != nil {
				return err
			}
		}
	}

	if o.HaEnabledQueryParameter != nil {

		// query param ha.enabled
		var qrHaEnabled bool

		if o.HaEnabledQueryParameter != nil {
			qrHaEnabled = *o.HaEnabledQueryParameter
		}
		qHaEnabled := swag.FormatBool(qrHaEnabled)
		if qHaEnabled != "" {

			if err := r.SetQueryParam("ha.enabled", qHaEnabled); err != nil {
				return err
			}
		}
	}

	if o.HaGivebackFailureCodeQueryParameter != nil {

		// query param ha.giveback.failure.code
		var qrHaGivebackFailureCode int64

		if o.HaGivebackFailureCodeQueryParameter != nil {
			qrHaGivebackFailureCode = *o.HaGivebackFailureCodeQueryParameter
		}
		qHaGivebackFailureCode := swag.FormatInt64(qrHaGivebackFailureCode)
		if qHaGivebackFailureCode != "" {

			if err := r.SetQueryParam("ha.giveback.failure.code", qHaGivebackFailureCode); err != nil {
				return err
			}
		}
	}

	if o.HaGivebackFailureMessageQueryParameter != nil {

		// query param ha.giveback.failure.message
		var qrHaGivebackFailureMessage string

		if o.HaGivebackFailureMessageQueryParameter != nil {
			qrHaGivebackFailureMessage = *o.HaGivebackFailureMessageQueryParameter
		}
		qHaGivebackFailureMessage := qrHaGivebackFailureMessage
		if qHaGivebackFailureMessage != "" {

			if err := r.SetQueryParam("ha.giveback.failure.message", qHaGivebackFailureMessage); err != nil {
				return err
			}
		}
	}

	if o.HaGivebackStateQueryParameter != nil {

		// query param ha.giveback.state
		var qrHaGivebackState string

		if o.HaGivebackStateQueryParameter != nil {
			qrHaGivebackState = *o.HaGivebackStateQueryParameter
		}
		qHaGivebackState := qrHaGivebackState
		if qHaGivebackState != "" {

			if err := r.SetQueryParam("ha.giveback.state", qHaGivebackState); err != nil {
				return err
			}
		}
	}

	if o.HaPartnersNameQueryParameter != nil {

		// query param ha.partners.name
		var qrHaPartnersName string

		if o.HaPartnersNameQueryParameter != nil {
			qrHaPartnersName = *o.HaPartnersNameQueryParameter
		}
		qHaPartnersName := qrHaPartnersName
		if qHaPartnersName != "" {

			if err := r.SetQueryParam("ha.partners.name", qHaPartnersName); err != nil {
				return err
			}
		}
	}

	if o.HaPartnersUUIDQueryParameter != nil {

		// query param ha.partners.uuid
		var qrHaPartnersUUID string

		if o.HaPartnersUUIDQueryParameter != nil {
			qrHaPartnersUUID = *o.HaPartnersUUIDQueryParameter
		}
		qHaPartnersUUID := qrHaPartnersUUID
		if qHaPartnersUUID != "" {

			if err := r.SetQueryParam("ha.partners.uuid", qHaPartnersUUID); err != nil {
				return err
			}
		}
	}

	if o.HaPortsNumberQueryParameter != nil {

		// query param ha.ports.number
		var qrHaPortsNumber int64

		if o.HaPortsNumberQueryParameter != nil {
			qrHaPortsNumber = *o.HaPortsNumberQueryParameter
		}
		qHaPortsNumber := swag.FormatInt64(qrHaPortsNumber)
		if qHaPortsNumber != "" {

			if err := r.SetQueryParam("ha.ports.number", qHaPortsNumber); err != nil {
				return err
			}
		}
	}

	if o.HaPortsStateQueryParameter != nil {

		// query param ha.ports.state
		var qrHaPortsState string

		if o.HaPortsStateQueryParameter != nil {
			qrHaPortsState = *o.HaPortsStateQueryParameter
		}
		qHaPortsState := qrHaPortsState
		if qHaPortsState != "" {

			if err := r.SetQueryParam("ha.ports.state", qHaPortsState); err != nil {
				return err
			}
		}
	}

	if o.HaTakeoverFailureCodeQueryParameter != nil {

		// query param ha.takeover.failure.code
		var qrHaTakeoverFailureCode int64

		if o.HaTakeoverFailureCodeQueryParameter != nil {
			qrHaTakeoverFailureCode = *o.HaTakeoverFailureCodeQueryParameter
		}
		qHaTakeoverFailureCode := swag.FormatInt64(qrHaTakeoverFailureCode)
		if qHaTakeoverFailureCode != "" {

			if err := r.SetQueryParam("ha.takeover.failure.code", qHaTakeoverFailureCode); err != nil {
				return err
			}
		}
	}

	if o.HaTakeoverFailureMessageQueryParameter != nil {

		// query param ha.takeover.failure.message
		var qrHaTakeoverFailureMessage string

		if o.HaTakeoverFailureMessageQueryParameter != nil {
			qrHaTakeoverFailureMessage = *o.HaTakeoverFailureMessageQueryParameter
		}
		qHaTakeoverFailureMessage := qrHaTakeoverFailureMessage
		if qHaTakeoverFailureMessage != "" {

			if err := r.SetQueryParam("ha.takeover.failure.message", qHaTakeoverFailureMessage); err != nil {
				return err
			}
		}
	}

	if o.HaTakeoverStateQueryParameter != nil {

		// query param ha.takeover.state
		var qrHaTakeoverState string

		if o.HaTakeoverStateQueryParameter != nil {
			qrHaTakeoverState = *o.HaTakeoverStateQueryParameter
		}
		qHaTakeoverState := qrHaTakeoverState
		if qHaTakeoverState != "" {

			if err := r.SetQueryParam("ha.takeover.state", qHaTakeoverState); err != nil {
				return err
			}
		}
	}

	if o.LocationQueryParameter != nil {

		// query param location
		var qrLocation string

		if o.LocationQueryParameter != nil {
			qrLocation = *o.LocationQueryParameter
		}
		qLocation := qrLocation
		if qLocation != "" {

			if err := r.SetQueryParam("location", qLocation); err != nil {
				return err
			}
		}
	}

	if o.ManagementInterfacesIPAddressQueryParameter != nil {

		// query param management_interfaces.ip.address
		var qrManagementInterfacesIPAddress string

		if o.ManagementInterfacesIPAddressQueryParameter != nil {
			qrManagementInterfacesIPAddress = *o.ManagementInterfacesIPAddressQueryParameter
		}
		qManagementInterfacesIPAddress := qrManagementInterfacesIPAddress
		if qManagementInterfacesIPAddress != "" {

			if err := r.SetQueryParam("management_interfaces.ip.address", qManagementInterfacesIPAddress); err != nil {
				return err
			}
		}
	}

	if o.ManagementInterfacesNameQueryParameter != nil {

		// query param management_interfaces.name
		var qrManagementInterfacesName string

		if o.ManagementInterfacesNameQueryParameter != nil {
			qrManagementInterfacesName = *o.ManagementInterfacesNameQueryParameter
		}
		qManagementInterfacesName := qrManagementInterfacesName
		if qManagementInterfacesName != "" {

			if err := r.SetQueryParam("management_interfaces.name", qManagementInterfacesName); err != nil {
				return err
			}
		}
	}

	if o.ManagementInterfacesUUIDQueryParameter != nil {

		// query param management_interfaces.uuid
		var qrManagementInterfacesUUID string

		if o.ManagementInterfacesUUIDQueryParameter != nil {
			qrManagementInterfacesUUID = *o.ManagementInterfacesUUIDQueryParameter
		}
		qManagementInterfacesUUID := qrManagementInterfacesUUID
		if qManagementInterfacesUUID != "" {

			if err := r.SetQueryParam("management_interfaces.uuid", qManagementInterfacesUUID); err != nil {
				return err
			}
		}
	}

	if o.MaxRecords != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecords != nil {
			qrMaxRecords = *o.MaxRecords
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.MembershIPQueryParameter != nil {

		// query param membership
		var qrMembership string

		if o.MembershIPQueryParameter != nil {
			qrMembership = *o.MembershIPQueryParameter
		}
		qMembership := qrMembership
		if qMembership != "" {

			if err := r.SetQueryParam("membership", qMembership); err != nil {
				return err
			}
		}
	}

	if o.ModelQueryParameter != nil {

		// query param model
		var qrModel string

		if o.ModelQueryParameter != nil {
			qrModel = *o.ModelQueryParameter
		}
		qModel := qrModel
		if qModel != "" {

			if err := r.SetQueryParam("model", qModel); err != nil {
				return err
			}
		}
	}

	if o.NameQueryParameter != nil {

		// query param name
		var qrName string

		if o.NameQueryParameter != nil {
			qrName = *o.NameQueryParameter
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.OrderBy != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.ReturnRecords != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecords != nil {
			qrReturnRecords = *o.ReturnRecords
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeout != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeout != nil {
			qrReturnTimeout = *o.ReturnTimeout
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.SerialNumberQueryParameter != nil {

		// query param serial_number
		var qrSerialNumber string

		if o.SerialNumberQueryParameter != nil {
			qrSerialNumber = *o.SerialNumberQueryParameter
		}
		qSerialNumber := qrSerialNumber
		if qSerialNumber != "" {

			if err := r.SetQueryParam("serial_number", qSerialNumber); err != nil {
				return err
			}
		}
	}

	if o.ServiceProcessorDhcpEnabledQueryParameter != nil {

		// query param service_processor.dhcp_enabled
		var qrServiceProcessorDhcpEnabled bool

		if o.ServiceProcessorDhcpEnabledQueryParameter != nil {
			qrServiceProcessorDhcpEnabled = *o.ServiceProcessorDhcpEnabledQueryParameter
		}
		qServiceProcessorDhcpEnabled := swag.FormatBool(qrServiceProcessorDhcpEnabled)
		if qServiceProcessorDhcpEnabled != "" {

			if err := r.SetQueryParam("service_processor.dhcp_enabled", qServiceProcessorDhcpEnabled); err != nil {
				return err
			}
		}
	}

	if o.ServiceProcessorFirmwareVersionQueryParameter != nil {

		// query param service_processor.firmware_version
		var qrServiceProcessorFirmwareVersion string

		if o.ServiceProcessorFirmwareVersionQueryParameter != nil {
			qrServiceProcessorFirmwareVersion = *o.ServiceProcessorFirmwareVersionQueryParameter
		}
		qServiceProcessorFirmwareVersion := qrServiceProcessorFirmwareVersion
		if qServiceProcessorFirmwareVersion != "" {

			if err := r.SetQueryParam("service_processor.firmware_version", qServiceProcessorFirmwareVersion); err != nil {
				return err
			}
		}
	}

	if o.ServiceProcessorIPV4InterfaceAddressQueryParameter != nil {

		// query param service_processor.ipv4_interface.address
		var qrServiceProcessorIPV4InterfaceAddress string

		if o.ServiceProcessorIPV4InterfaceAddressQueryParameter != nil {
			qrServiceProcessorIPV4InterfaceAddress = *o.ServiceProcessorIPV4InterfaceAddressQueryParameter
		}
		qServiceProcessorIPV4InterfaceAddress := qrServiceProcessorIPV4InterfaceAddress
		if qServiceProcessorIPV4InterfaceAddress != "" {

			if err := r.SetQueryParam("service_processor.ipv4_interface.address", qServiceProcessorIPV4InterfaceAddress); err != nil {
				return err
			}
		}
	}

	if o.ServiceProcessorIPV4InterfaceGatewayQueryParameter != nil {

		// query param service_processor.ipv4_interface.gateway
		var qrServiceProcessorIPV4InterfaceGateway string

		if o.ServiceProcessorIPV4InterfaceGatewayQueryParameter != nil {
			qrServiceProcessorIPV4InterfaceGateway = *o.ServiceProcessorIPV4InterfaceGatewayQueryParameter
		}
		qServiceProcessorIPV4InterfaceGateway := qrServiceProcessorIPV4InterfaceGateway
		if qServiceProcessorIPV4InterfaceGateway != "" {

			if err := r.SetQueryParam("service_processor.ipv4_interface.gateway", qServiceProcessorIPV4InterfaceGateway); err != nil {
				return err
			}
		}
	}

	if o.ServiceProcessorIPV4InterfaceNetmaskQueryParameter != nil {

		// query param service_processor.ipv4_interface.netmask
		var qrServiceProcessorIPV4InterfaceNetmask string

		if o.ServiceProcessorIPV4InterfaceNetmaskQueryParameter != nil {
			qrServiceProcessorIPV4InterfaceNetmask = *o.ServiceProcessorIPV4InterfaceNetmaskQueryParameter
		}
		qServiceProcessorIPV4InterfaceNetmask := qrServiceProcessorIPV4InterfaceNetmask
		if qServiceProcessorIPV4InterfaceNetmask != "" {

			if err := r.SetQueryParam("service_processor.ipv4_interface.netmask", qServiceProcessorIPV4InterfaceNetmask); err != nil {
				return err
			}
		}
	}

	if o.ServiceProcessorIPV6InterfaceAddressQueryParameter != nil {

		// query param service_processor.ipv6_interface.address
		var qrServiceProcessorIPV6InterfaceAddress string

		if o.ServiceProcessorIPV6InterfaceAddressQueryParameter != nil {
			qrServiceProcessorIPV6InterfaceAddress = *o.ServiceProcessorIPV6InterfaceAddressQueryParameter
		}
		qServiceProcessorIPV6InterfaceAddress := qrServiceProcessorIPV6InterfaceAddress
		if qServiceProcessorIPV6InterfaceAddress != "" {

			if err := r.SetQueryParam("service_processor.ipv6_interface.address", qServiceProcessorIPV6InterfaceAddress); err != nil {
				return err
			}
		}
	}

	if o.ServiceProcessorIPV6InterfaceGatewayQueryParameter != nil {

		// query param service_processor.ipv6_interface.gateway
		var qrServiceProcessorIPV6InterfaceGateway string

		if o.ServiceProcessorIPV6InterfaceGatewayQueryParameter != nil {
			qrServiceProcessorIPV6InterfaceGateway = *o.ServiceProcessorIPV6InterfaceGatewayQueryParameter
		}
		qServiceProcessorIPV6InterfaceGateway := qrServiceProcessorIPV6InterfaceGateway
		if qServiceProcessorIPV6InterfaceGateway != "" {

			if err := r.SetQueryParam("service_processor.ipv6_interface.gateway", qServiceProcessorIPV6InterfaceGateway); err != nil {
				return err
			}
		}
	}

	if o.ServiceProcessorIPV6InterfaceNetmaskQueryParameter != nil {

		// query param service_processor.ipv6_interface.netmask
		var qrServiceProcessorIPV6InterfaceNetmask string

		if o.ServiceProcessorIPV6InterfaceNetmaskQueryParameter != nil {
			qrServiceProcessorIPV6InterfaceNetmask = *o.ServiceProcessorIPV6InterfaceNetmaskQueryParameter
		}
		qServiceProcessorIPV6InterfaceNetmask := qrServiceProcessorIPV6InterfaceNetmask
		if qServiceProcessorIPV6InterfaceNetmask != "" {

			if err := r.SetQueryParam("service_processor.ipv6_interface.netmask", qServiceProcessorIPV6InterfaceNetmask); err != nil {
				return err
			}
		}
	}

	if o.ServiceProcessorLinkStatusQueryParameter != nil {

		// query param service_processor.link_status
		var qrServiceProcessorLinkStatus string

		if o.ServiceProcessorLinkStatusQueryParameter != nil {
			qrServiceProcessorLinkStatus = *o.ServiceProcessorLinkStatusQueryParameter
		}
		qServiceProcessorLinkStatus := qrServiceProcessorLinkStatus
		if qServiceProcessorLinkStatus != "" {

			if err := r.SetQueryParam("service_processor.link_status", qServiceProcessorLinkStatus); err != nil {
				return err
			}
		}
	}

	if o.ServiceProcessorMacAddressQueryParameter != nil {

		// query param service_processor.mac_address
		var qrServiceProcessorMacAddress string

		if o.ServiceProcessorMacAddressQueryParameter != nil {
			qrServiceProcessorMacAddress = *o.ServiceProcessorMacAddressQueryParameter
		}
		qServiceProcessorMacAddress := qrServiceProcessorMacAddress
		if qServiceProcessorMacAddress != "" {

			if err := r.SetQueryParam("service_processor.mac_address", qServiceProcessorMacAddress); err != nil {
				return err
			}
		}
	}

	if o.ServiceProcessorStateQueryParameter != nil {

		// query param service_processor.state
		var qrServiceProcessorState string

		if o.ServiceProcessorStateQueryParameter != nil {
			qrServiceProcessorState = *o.ServiceProcessorStateQueryParameter
		}
		qServiceProcessorState := qrServiceProcessorState
		if qServiceProcessorState != "" {

			if err := r.SetQueryParam("service_processor.state", qServiceProcessorState); err != nil {
				return err
			}
		}
	}

	if o.StateQueryParameter != nil {

		// query param state
		var qrState string

		if o.StateQueryParameter != nil {
			qrState = *o.StateQueryParameter
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if o.SystemIDQueryParameter != nil {

		// query param system_id
		var qrSystemID string

		if o.SystemIDQueryParameter != nil {
			qrSystemID = *o.SystemIDQueryParameter
		}
		qSystemID := qrSystemID
		if qSystemID != "" {

			if err := r.SetQueryParam("system_id", qSystemID); err != nil {
				return err
			}
		}
	}

	if o.SystemMachineTypeQueryParameter != nil {

		// query param system_machine_type
		var qrSystemMachineType string

		if o.SystemMachineTypeQueryParameter != nil {
			qrSystemMachineType = *o.SystemMachineTypeQueryParameter
		}
		qSystemMachineType := qrSystemMachineType
		if qSystemMachineType != "" {

			if err := r.SetQueryParam("system_machine_type", qSystemMachineType); err != nil {
				return err
			}
		}
	}

	if o.UptimeQueryParameter != nil {

		// query param uptime
		var qrUptime int64

		if o.UptimeQueryParameter != nil {
			qrUptime = *o.UptimeQueryParameter
		}
		qUptime := swag.FormatInt64(qrUptime)
		if qUptime != "" {

			if err := r.SetQueryParam("uptime", qUptime); err != nil {
				return err
			}
		}
	}

	if o.UUIDQueryParameter != nil {

		// query param uuid
		var qrUUID string

		if o.UUIDQueryParameter != nil {
			qrUUID = *o.UUIDQueryParameter
		}
		qUUID := qrUUID
		if qUUID != "" {

			if err := r.SetQueryParam("uuid", qUUID); err != nil {
				return err
			}
		}
	}

	if o.VendorSerialNumberQueryParameter != nil {

		// query param vendor_serial_number
		var qrVendorSerialNumber string

		if o.VendorSerialNumberQueryParameter != nil {
			qrVendorSerialNumber = *o.VendorSerialNumberQueryParameter
		}
		qVendorSerialNumber := qrVendorSerialNumber
		if qVendorSerialNumber != "" {

			if err := r.SetQueryParam("vendor_serial_number", qVendorSerialNumber); err != nil {
				return err
			}
		}
	}

	if o.VersionFullQueryParameter != nil {

		// query param version.full
		var qrVersionFull string

		if o.VersionFullQueryParameter != nil {
			qrVersionFull = *o.VersionFullQueryParameter
		}
		qVersionFull := qrVersionFull
		if qVersionFull != "" {

			if err := r.SetQueryParam("version.full", qVersionFull); err != nil {
				return err
			}
		}
	}

	if o.VersionGenerationQueryParameter != nil {

		// query param version.generation
		var qrVersionGeneration int64

		if o.VersionGenerationQueryParameter != nil {
			qrVersionGeneration = *o.VersionGenerationQueryParameter
		}
		qVersionGeneration := swag.FormatInt64(qrVersionGeneration)
		if qVersionGeneration != "" {

			if err := r.SetQueryParam("version.generation", qVersionGeneration); err != nil {
				return err
			}
		}
	}

	if o.VersionMajorQueryParameter != nil {

		// query param version.major
		var qrVersionMajor int64

		if o.VersionMajorQueryParameter != nil {
			qrVersionMajor = *o.VersionMajorQueryParameter
		}
		qVersionMajor := swag.FormatInt64(qrVersionMajor)
		if qVersionMajor != "" {

			if err := r.SetQueryParam("version.major", qVersionMajor); err != nil {
				return err
			}
		}
	}

	if o.VersionMinorQueryParameter != nil {

		// query param version.minor
		var qrVersionMinor int64

		if o.VersionMinorQueryParameter != nil {
			qrVersionMinor = *o.VersionMinorQueryParameter
		}
		qVersionMinor := swag.FormatInt64(qrVersionMinor)
		if qVersionMinor != "" {

			if err := r.SetQueryParam("version.minor", qVersionMinor); err != nil {
				return err
			}
		}
	}

	if o.VMProviderTypeQueryParameter != nil {

		// query param vm.provider_type
		var qrVMProviderType string

		if o.VMProviderTypeQueryParameter != nil {
			qrVMProviderType = *o.VMProviderTypeQueryParameter
		}
		qVMProviderType := qrVMProviderType
		if qVMProviderType != "" {

			if err := r.SetQueryParam("vm.provider_type", qVMProviderType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamNodesGet binds the parameter fields
func (o *NodesGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamNodesGet binds the parameter order_by
func (o *NodesGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderBy

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
