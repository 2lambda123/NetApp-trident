// Code generated by go-swagger; DO NOT EDIT.

package cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCounterRowCollectionGetParams creates a new CounterRowCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCounterRowCollectionGetParams() *CounterRowCollectionGetParams {
	return &CounterRowCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCounterRowCollectionGetParamsWithTimeout creates a new CounterRowCollectionGetParams object
// with the ability to set a timeout on a request.
func NewCounterRowCollectionGetParamsWithTimeout(timeout time.Duration) *CounterRowCollectionGetParams {
	return &CounterRowCollectionGetParams{
		timeout: timeout,
	}
}

// NewCounterRowCollectionGetParamsWithContext creates a new CounterRowCollectionGetParams object
// with the ability to set a context for a request.
func NewCounterRowCollectionGetParamsWithContext(ctx context.Context) *CounterRowCollectionGetParams {
	return &CounterRowCollectionGetParams{
		Context: ctx,
	}
}

// NewCounterRowCollectionGetParamsWithHTTPClient creates a new CounterRowCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewCounterRowCollectionGetParamsWithHTTPClient(client *http.Client) *CounterRowCollectionGetParams {
	return &CounterRowCollectionGetParams{
		HTTPClient: client,
	}
}

/*
CounterRowCollectionGetParams contains all the parameters to send to the API endpoint

	for the counter row collection get operation.

	Typically these are written to a http.Request.
*/
type CounterRowCollectionGetParams struct {

	/* AggregationComplete.

	   Filter by aggregation.complete
	*/
	AggregationCompleteQueryParameter *bool

	/* AggregationCount.

	   Filter by aggregation.count
	*/
	AggregationCountQueryParameter *int64

	/* CounterTableName.

	   Counter table name.
	*/
	CounterTableNamePathParameter string

	/* CountersCountersLabel.

	   Filter by counters.counters.label
	*/
	CountersCountersLabelQueryParameter *string

	/* CountersCountersValues.

	   Filter by counters.counters.values
	*/
	CountersCountersValuesQueryParameter *int64

	/* CountersLabels.

	   Filter by counters.labels
	*/
	CountersLabelsQueryParameter *string

	/* CountersName.

	   Filter by counters.name
	*/
	CountersNameQueryParameter *string

	/* CountersValue.

	   Filter by counters.value
	*/
	CountersValueQueryParameter *int64

	/* CountersValues.

	   Filter by counters.values
	*/
	CountersValuesQueryParameter *int64

	/* Fields.

	   Specify the fields to return.
	*/
	FieldsQueryParameter []string

	/* ID.

	   Filter by id
	*/
	IDQueryParameter *string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecordsQueryParameter *int64

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderByQueryParameter []string

	/* PropertiesName.

	   Filter by properties.name
	*/
	PropertiesNameQueryParameter *string

	/* PropertiesValue.

	   Filter by properties.value
	*/
	PropertiesValueQueryParameter *string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecordsQueryParameter *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeoutQueryParameter *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the counter row collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CounterRowCollectionGetParams) WithDefaults() *CounterRowCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the counter row collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CounterRowCollectionGetParams) SetDefaults() {
	var (
		returnRecordsQueryParameterDefault = bool(true)

		returnTimeoutQueryParameterDefault = int64(15)
	)

	val := CounterRowCollectionGetParams{
		ReturnRecordsQueryParameter: &returnRecordsQueryParameterDefault,
		ReturnTimeoutQueryParameter: &returnTimeoutQueryParameterDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the counter row collection get params
func (o *CounterRowCollectionGetParams) WithTimeout(timeout time.Duration) *CounterRowCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the counter row collection get params
func (o *CounterRowCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the counter row collection get params
func (o *CounterRowCollectionGetParams) WithContext(ctx context.Context) *CounterRowCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the counter row collection get params
func (o *CounterRowCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the counter row collection get params
func (o *CounterRowCollectionGetParams) WithHTTPClient(client *http.Client) *CounterRowCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the counter row collection get params
func (o *CounterRowCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAggregationCompleteQueryParameter adds the aggregationComplete to the counter row collection get params
func (o *CounterRowCollectionGetParams) WithAggregationCompleteQueryParameter(aggregationComplete *bool) *CounterRowCollectionGetParams {
	o.SetAggregationCompleteQueryParameter(aggregationComplete)
	return o
}

// SetAggregationCompleteQueryParameter adds the aggregationComplete to the counter row collection get params
func (o *CounterRowCollectionGetParams) SetAggregationCompleteQueryParameter(aggregationComplete *bool) {
	o.AggregationCompleteQueryParameter = aggregationComplete
}

// WithAggregationCountQueryParameter adds the aggregationCount to the counter row collection get params
func (o *CounterRowCollectionGetParams) WithAggregationCountQueryParameter(aggregationCount *int64) *CounterRowCollectionGetParams {
	o.SetAggregationCountQueryParameter(aggregationCount)
	return o
}

// SetAggregationCountQueryParameter adds the aggregationCount to the counter row collection get params
func (o *CounterRowCollectionGetParams) SetAggregationCountQueryParameter(aggregationCount *int64) {
	o.AggregationCountQueryParameter = aggregationCount
}

// WithCounterTableNamePathParameter adds the counterTableName to the counter row collection get params
func (o *CounterRowCollectionGetParams) WithCounterTableNamePathParameter(counterTableName string) *CounterRowCollectionGetParams {
	o.SetCounterTableNamePathParameter(counterTableName)
	return o
}

// SetCounterTableNamePathParameter adds the counterTableName to the counter row collection get params
func (o *CounterRowCollectionGetParams) SetCounterTableNamePathParameter(counterTableName string) {
	o.CounterTableNamePathParameter = counterTableName
}

// WithCountersCountersLabelQueryParameter adds the countersCountersLabel to the counter row collection get params
func (o *CounterRowCollectionGetParams) WithCountersCountersLabelQueryParameter(countersCountersLabel *string) *CounterRowCollectionGetParams {
	o.SetCountersCountersLabelQueryParameter(countersCountersLabel)
	return o
}

// SetCountersCountersLabelQueryParameter adds the countersCountersLabel to the counter row collection get params
func (o *CounterRowCollectionGetParams) SetCountersCountersLabelQueryParameter(countersCountersLabel *string) {
	o.CountersCountersLabelQueryParameter = countersCountersLabel
}

// WithCountersCountersValuesQueryParameter adds the countersCountersValues to the counter row collection get params
func (o *CounterRowCollectionGetParams) WithCountersCountersValuesQueryParameter(countersCountersValues *int64) *CounterRowCollectionGetParams {
	o.SetCountersCountersValuesQueryParameter(countersCountersValues)
	return o
}

// SetCountersCountersValuesQueryParameter adds the countersCountersValues to the counter row collection get params
func (o *CounterRowCollectionGetParams) SetCountersCountersValuesQueryParameter(countersCountersValues *int64) {
	o.CountersCountersValuesQueryParameter = countersCountersValues
}

// WithCountersLabelsQueryParameter adds the countersLabels to the counter row collection get params
func (o *CounterRowCollectionGetParams) WithCountersLabelsQueryParameter(countersLabels *string) *CounterRowCollectionGetParams {
	o.SetCountersLabelsQueryParameter(countersLabels)
	return o
}

// SetCountersLabelsQueryParameter adds the countersLabels to the counter row collection get params
func (o *CounterRowCollectionGetParams) SetCountersLabelsQueryParameter(countersLabels *string) {
	o.CountersLabelsQueryParameter = countersLabels
}

// WithCountersNameQueryParameter adds the countersName to the counter row collection get params
func (o *CounterRowCollectionGetParams) WithCountersNameQueryParameter(countersName *string) *CounterRowCollectionGetParams {
	o.SetCountersNameQueryParameter(countersName)
	return o
}

// SetCountersNameQueryParameter adds the countersName to the counter row collection get params
func (o *CounterRowCollectionGetParams) SetCountersNameQueryParameter(countersName *string) {
	o.CountersNameQueryParameter = countersName
}

// WithCountersValueQueryParameter adds the countersValue to the counter row collection get params
func (o *CounterRowCollectionGetParams) WithCountersValueQueryParameter(countersValue *int64) *CounterRowCollectionGetParams {
	o.SetCountersValueQueryParameter(countersValue)
	return o
}

// SetCountersValueQueryParameter adds the countersValue to the counter row collection get params
func (o *CounterRowCollectionGetParams) SetCountersValueQueryParameter(countersValue *int64) {
	o.CountersValueQueryParameter = countersValue
}

// WithCountersValuesQueryParameter adds the countersValues to the counter row collection get params
func (o *CounterRowCollectionGetParams) WithCountersValuesQueryParameter(countersValues *int64) *CounterRowCollectionGetParams {
	o.SetCountersValuesQueryParameter(countersValues)
	return o
}

// SetCountersValuesQueryParameter adds the countersValues to the counter row collection get params
func (o *CounterRowCollectionGetParams) SetCountersValuesQueryParameter(countersValues *int64) {
	o.CountersValuesQueryParameter = countersValues
}

// WithFieldsQueryParameter adds the fields to the counter row collection get params
func (o *CounterRowCollectionGetParams) WithFieldsQueryParameter(fields []string) *CounterRowCollectionGetParams {
	o.SetFieldsQueryParameter(fields)
	return o
}

// SetFieldsQueryParameter adds the fields to the counter row collection get params
func (o *CounterRowCollectionGetParams) SetFieldsQueryParameter(fields []string) {
	o.FieldsQueryParameter = fields
}

// WithIDQueryParameter adds the id to the counter row collection get params
func (o *CounterRowCollectionGetParams) WithIDQueryParameter(id *string) *CounterRowCollectionGetParams {
	o.SetIDQueryParameter(id)
	return o
}

// SetIDQueryParameter adds the id to the counter row collection get params
func (o *CounterRowCollectionGetParams) SetIDQueryParameter(id *string) {
	o.IDQueryParameter = id
}

// WithMaxRecordsQueryParameter adds the maxRecords to the counter row collection get params
func (o *CounterRowCollectionGetParams) WithMaxRecordsQueryParameter(maxRecords *int64) *CounterRowCollectionGetParams {
	o.SetMaxRecordsQueryParameter(maxRecords)
	return o
}

// SetMaxRecordsQueryParameter adds the maxRecords to the counter row collection get params
func (o *CounterRowCollectionGetParams) SetMaxRecordsQueryParameter(maxRecords *int64) {
	o.MaxRecordsQueryParameter = maxRecords
}

// WithOrderByQueryParameter adds the orderBy to the counter row collection get params
func (o *CounterRowCollectionGetParams) WithOrderByQueryParameter(orderBy []string) *CounterRowCollectionGetParams {
	o.SetOrderByQueryParameter(orderBy)
	return o
}

// SetOrderByQueryParameter adds the orderBy to the counter row collection get params
func (o *CounterRowCollectionGetParams) SetOrderByQueryParameter(orderBy []string) {
	o.OrderByQueryParameter = orderBy
}

// WithPropertiesNameQueryParameter adds the propertiesName to the counter row collection get params
func (o *CounterRowCollectionGetParams) WithPropertiesNameQueryParameter(propertiesName *string) *CounterRowCollectionGetParams {
	o.SetPropertiesNameQueryParameter(propertiesName)
	return o
}

// SetPropertiesNameQueryParameter adds the propertiesName to the counter row collection get params
func (o *CounterRowCollectionGetParams) SetPropertiesNameQueryParameter(propertiesName *string) {
	o.PropertiesNameQueryParameter = propertiesName
}

// WithPropertiesValueQueryParameter adds the propertiesValue to the counter row collection get params
func (o *CounterRowCollectionGetParams) WithPropertiesValueQueryParameter(propertiesValue *string) *CounterRowCollectionGetParams {
	o.SetPropertiesValueQueryParameter(propertiesValue)
	return o
}

// SetPropertiesValueQueryParameter adds the propertiesValue to the counter row collection get params
func (o *CounterRowCollectionGetParams) SetPropertiesValueQueryParameter(propertiesValue *string) {
	o.PropertiesValueQueryParameter = propertiesValue
}

// WithReturnRecordsQueryParameter adds the returnRecords to the counter row collection get params
func (o *CounterRowCollectionGetParams) WithReturnRecordsQueryParameter(returnRecords *bool) *CounterRowCollectionGetParams {
	o.SetReturnRecordsQueryParameter(returnRecords)
	return o
}

// SetReturnRecordsQueryParameter adds the returnRecords to the counter row collection get params
func (o *CounterRowCollectionGetParams) SetReturnRecordsQueryParameter(returnRecords *bool) {
	o.ReturnRecordsQueryParameter = returnRecords
}

// WithReturnTimeoutQueryParameter adds the returnTimeout to the counter row collection get params
func (o *CounterRowCollectionGetParams) WithReturnTimeoutQueryParameter(returnTimeout *int64) *CounterRowCollectionGetParams {
	o.SetReturnTimeoutQueryParameter(returnTimeout)
	return o
}

// SetReturnTimeoutQueryParameter adds the returnTimeout to the counter row collection get params
func (o *CounterRowCollectionGetParams) SetReturnTimeoutQueryParameter(returnTimeout *int64) {
	o.ReturnTimeoutQueryParameter = returnTimeout
}

// WriteToRequest writes these params to a swagger request
func (o *CounterRowCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AggregationCompleteQueryParameter != nil {

		// query param aggregation.complete
		var qrAggregationComplete bool

		if o.AggregationCompleteQueryParameter != nil {
			qrAggregationComplete = *o.AggregationCompleteQueryParameter
		}
		qAggregationComplete := swag.FormatBool(qrAggregationComplete)
		if qAggregationComplete != "" {

			if err := r.SetQueryParam("aggregation.complete", qAggregationComplete); err != nil {
				return err
			}
		}
	}

	if o.AggregationCountQueryParameter != nil {

		// query param aggregation.count
		var qrAggregationCount int64

		if o.AggregationCountQueryParameter != nil {
			qrAggregationCount = *o.AggregationCountQueryParameter
		}
		qAggregationCount := swag.FormatInt64(qrAggregationCount)
		if qAggregationCount != "" {

			if err := r.SetQueryParam("aggregation.count", qAggregationCount); err != nil {
				return err
			}
		}
	}

	// path param counter_table.name
	if err := r.SetPathParam("counter_table.name", o.CounterTableNamePathParameter); err != nil {
		return err
	}

	if o.CountersCountersLabelQueryParameter != nil {

		// query param counters.counters.label
		var qrCountersCountersLabel string

		if o.CountersCountersLabelQueryParameter != nil {
			qrCountersCountersLabel = *o.CountersCountersLabelQueryParameter
		}
		qCountersCountersLabel := qrCountersCountersLabel
		if qCountersCountersLabel != "" {

			if err := r.SetQueryParam("counters.counters.label", qCountersCountersLabel); err != nil {
				return err
			}
		}
	}

	if o.CountersCountersValuesQueryParameter != nil {

		// query param counters.counters.values
		var qrCountersCountersValues int64

		if o.CountersCountersValuesQueryParameter != nil {
			qrCountersCountersValues = *o.CountersCountersValuesQueryParameter
		}
		qCountersCountersValues := swag.FormatInt64(qrCountersCountersValues)
		if qCountersCountersValues != "" {

			if err := r.SetQueryParam("counters.counters.values", qCountersCountersValues); err != nil {
				return err
			}
		}
	}

	if o.CountersLabelsQueryParameter != nil {

		// query param counters.labels
		var qrCountersLabels string

		if o.CountersLabelsQueryParameter != nil {
			qrCountersLabels = *o.CountersLabelsQueryParameter
		}
		qCountersLabels := qrCountersLabels
		if qCountersLabels != "" {

			if err := r.SetQueryParam("counters.labels", qCountersLabels); err != nil {
				return err
			}
		}
	}

	if o.CountersNameQueryParameter != nil {

		// query param counters.name
		var qrCountersName string

		if o.CountersNameQueryParameter != nil {
			qrCountersName = *o.CountersNameQueryParameter
		}
		qCountersName := qrCountersName
		if qCountersName != "" {

			if err := r.SetQueryParam("counters.name", qCountersName); err != nil {
				return err
			}
		}
	}

	if o.CountersValueQueryParameter != nil {

		// query param counters.value
		var qrCountersValue int64

		if o.CountersValueQueryParameter != nil {
			qrCountersValue = *o.CountersValueQueryParameter
		}
		qCountersValue := swag.FormatInt64(qrCountersValue)
		if qCountersValue != "" {

			if err := r.SetQueryParam("counters.value", qCountersValue); err != nil {
				return err
			}
		}
	}

	if o.CountersValuesQueryParameter != nil {

		// query param counters.values
		var qrCountersValues int64

		if o.CountersValuesQueryParameter != nil {
			qrCountersValues = *o.CountersValuesQueryParameter
		}
		qCountersValues := swag.FormatInt64(qrCountersValues)
		if qCountersValues != "" {

			if err := r.SetQueryParam("counters.values", qCountersValues); err != nil {
				return err
			}
		}
	}

	if o.FieldsQueryParameter != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.IDQueryParameter != nil {

		// query param id
		var qrID string

		if o.IDQueryParameter != nil {
			qrID = *o.IDQueryParameter
		}
		qID := qrID
		if qID != "" {

			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}
	}

	if o.MaxRecordsQueryParameter != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecordsQueryParameter != nil {
			qrMaxRecords = *o.MaxRecordsQueryParameter
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.OrderByQueryParameter != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.PropertiesNameQueryParameter != nil {

		// query param properties.name
		var qrPropertiesName string

		if o.PropertiesNameQueryParameter != nil {
			qrPropertiesName = *o.PropertiesNameQueryParameter
		}
		qPropertiesName := qrPropertiesName
		if qPropertiesName != "" {

			if err := r.SetQueryParam("properties.name", qPropertiesName); err != nil {
				return err
			}
		}
	}

	if o.PropertiesValueQueryParameter != nil {

		// query param properties.value
		var qrPropertiesValue string

		if o.PropertiesValueQueryParameter != nil {
			qrPropertiesValue = *o.PropertiesValueQueryParameter
		}
		qPropertiesValue := qrPropertiesValue
		if qPropertiesValue != "" {

			if err := r.SetQueryParam("properties.value", qPropertiesValue); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecordsQueryParameter != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecordsQueryParameter != nil {
			qrReturnRecords = *o.ReturnRecordsQueryParameter
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeoutQueryParameter != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeoutQueryParameter != nil {
			qrReturnTimeout = *o.ReturnTimeoutQueryParameter
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamCounterRowCollectionGet binds the parameter fields
func (o *CounterRowCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.FieldsQueryParameter

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamCounterRowCollectionGet binds the parameter order_by
func (o *CounterRowCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderByQueryParameter

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
