// Code generated by go-swagger; DO NOT EDIT.

package cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewLicensesGetParams creates a new LicensesGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewLicensesGetParams() *LicensesGetParams {
	return &LicensesGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewLicensesGetParamsWithTimeout creates a new LicensesGetParams object
// with the ability to set a timeout on a request.
func NewLicensesGetParamsWithTimeout(timeout time.Duration) *LicensesGetParams {
	return &LicensesGetParams{
		timeout: timeout,
	}
}

// NewLicensesGetParamsWithContext creates a new LicensesGetParams object
// with the ability to set a context for a request.
func NewLicensesGetParamsWithContext(ctx context.Context) *LicensesGetParams {
	return &LicensesGetParams{
		Context: ctx,
	}
}

// NewLicensesGetParamsWithHTTPClient creates a new LicensesGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewLicensesGetParamsWithHTTPClient(client *http.Client) *LicensesGetParams {
	return &LicensesGetParams{
		HTTPClient: client,
	}
}

/* LicensesGetParams contains all the parameters to send to the API endpoint
   for the licenses get operation.

   Typically these are written to a http.Request.
*/
type LicensesGetParams struct {

	/* Fields.

	   Specify the fields to return.
	*/
	Fields []string

	/* LicensesActive.

	   Filter by licenses.active
	*/
	LicensesActiveQueryParameter *bool

	/* LicensesCapacityMaximumSize.

	   Filter by licenses.capacity.maximum_size
	*/
	LicensesCapacityMaximumSizeQueryParameter *int64

	/* LicensesCapacityUsedSize.

	   Filter by licenses.capacity.used_size
	*/
	LicensesCapacityUsedSizeQueryParameter *int64

	/* LicensesComplianceState.

	   Filter by licenses.compliance.state
	*/
	LicensesComplianceStateQueryParameter *string

	/* LicensesEvaluation.

	   Filter by licenses.evaluation
	*/
	LicensesEvaluationQueryParameter *bool

	/* LicensesExpiryTime.

	   Filter by licenses.expiry_time
	*/
	LicensesExpiryTimeQueryParameter *string

	/* LicensesOwner.

	   Filter by licenses.owner
	*/
	LicensesOwnerQueryParameter *string

	/* LicensesSerialNumber.

	   Filter by licenses.serial_number
	*/
	LicensesSerialNumberQueryParameter *string

	/* LicensesStartTime.

	   Filter by licenses.start_time
	*/
	LicensesStartTimeQueryParameter *string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecords *int64

	/* Name.

	   Filter by name
	*/
	NameQueryParameter *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderBy []string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecords *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeout *int64

	/* Scope.

	   Filter by scope
	*/
	ScopeQueryParameter *string

	/* State.

	   Filter by state
	*/
	StateQueryParameter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the licenses get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *LicensesGetParams) WithDefaults() *LicensesGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the licenses get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *LicensesGetParams) SetDefaults() {
	var (
		returnRecordsDefault = bool(true)

		returnTimeoutDefault = int64(15)
	)

	val := LicensesGetParams{
		ReturnRecords: &returnRecordsDefault,
		ReturnTimeout: &returnTimeoutDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the licenses get params
func (o *LicensesGetParams) WithTimeout(timeout time.Duration) *LicensesGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the licenses get params
func (o *LicensesGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the licenses get params
func (o *LicensesGetParams) WithContext(ctx context.Context) *LicensesGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the licenses get params
func (o *LicensesGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the licenses get params
func (o *LicensesGetParams) WithHTTPClient(client *http.Client) *LicensesGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the licenses get params
func (o *LicensesGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFields adds the fields to the licenses get params
func (o *LicensesGetParams) WithFields(fields []string) *LicensesGetParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the licenses get params
func (o *LicensesGetParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithLicensesActiveQueryParameter adds the licensesActive to the licenses get params
func (o *LicensesGetParams) WithLicensesActiveQueryParameter(licensesActive *bool) *LicensesGetParams {
	o.SetLicensesActiveQueryParameter(licensesActive)
	return o
}

// SetLicensesActiveQueryParameter adds the licensesActive to the licenses get params
func (o *LicensesGetParams) SetLicensesActiveQueryParameter(licensesActive *bool) {
	o.LicensesActiveQueryParameter = licensesActive
}

// WithLicensesCapacityMaximumSizeQueryParameter adds the licensesCapacityMaximumSize to the licenses get params
func (o *LicensesGetParams) WithLicensesCapacityMaximumSizeQueryParameter(licensesCapacityMaximumSize *int64) *LicensesGetParams {
	o.SetLicensesCapacityMaximumSizeQueryParameter(licensesCapacityMaximumSize)
	return o
}

// SetLicensesCapacityMaximumSizeQueryParameter adds the licensesCapacityMaximumSize to the licenses get params
func (o *LicensesGetParams) SetLicensesCapacityMaximumSizeQueryParameter(licensesCapacityMaximumSize *int64) {
	o.LicensesCapacityMaximumSizeQueryParameter = licensesCapacityMaximumSize
}

// WithLicensesCapacityUsedSizeQueryParameter adds the licensesCapacityUsedSize to the licenses get params
func (o *LicensesGetParams) WithLicensesCapacityUsedSizeQueryParameter(licensesCapacityUsedSize *int64) *LicensesGetParams {
	o.SetLicensesCapacityUsedSizeQueryParameter(licensesCapacityUsedSize)
	return o
}

// SetLicensesCapacityUsedSizeQueryParameter adds the licensesCapacityUsedSize to the licenses get params
func (o *LicensesGetParams) SetLicensesCapacityUsedSizeQueryParameter(licensesCapacityUsedSize *int64) {
	o.LicensesCapacityUsedSizeQueryParameter = licensesCapacityUsedSize
}

// WithLicensesComplianceStateQueryParameter adds the licensesComplianceState to the licenses get params
func (o *LicensesGetParams) WithLicensesComplianceStateQueryParameter(licensesComplianceState *string) *LicensesGetParams {
	o.SetLicensesComplianceStateQueryParameter(licensesComplianceState)
	return o
}

// SetLicensesComplianceStateQueryParameter adds the licensesComplianceState to the licenses get params
func (o *LicensesGetParams) SetLicensesComplianceStateQueryParameter(licensesComplianceState *string) {
	o.LicensesComplianceStateQueryParameter = licensesComplianceState
}

// WithLicensesEvaluationQueryParameter adds the licensesEvaluation to the licenses get params
func (o *LicensesGetParams) WithLicensesEvaluationQueryParameter(licensesEvaluation *bool) *LicensesGetParams {
	o.SetLicensesEvaluationQueryParameter(licensesEvaluation)
	return o
}

// SetLicensesEvaluationQueryParameter adds the licensesEvaluation to the licenses get params
func (o *LicensesGetParams) SetLicensesEvaluationQueryParameter(licensesEvaluation *bool) {
	o.LicensesEvaluationQueryParameter = licensesEvaluation
}

// WithLicensesExpiryTimeQueryParameter adds the licensesExpiryTime to the licenses get params
func (o *LicensesGetParams) WithLicensesExpiryTimeQueryParameter(licensesExpiryTime *string) *LicensesGetParams {
	o.SetLicensesExpiryTimeQueryParameter(licensesExpiryTime)
	return o
}

// SetLicensesExpiryTimeQueryParameter adds the licensesExpiryTime to the licenses get params
func (o *LicensesGetParams) SetLicensesExpiryTimeQueryParameter(licensesExpiryTime *string) {
	o.LicensesExpiryTimeQueryParameter = licensesExpiryTime
}

// WithLicensesOwnerQueryParameter adds the licensesOwner to the licenses get params
func (o *LicensesGetParams) WithLicensesOwnerQueryParameter(licensesOwner *string) *LicensesGetParams {
	o.SetLicensesOwnerQueryParameter(licensesOwner)
	return o
}

// SetLicensesOwnerQueryParameter adds the licensesOwner to the licenses get params
func (o *LicensesGetParams) SetLicensesOwnerQueryParameter(licensesOwner *string) {
	o.LicensesOwnerQueryParameter = licensesOwner
}

// WithLicensesSerialNumberQueryParameter adds the licensesSerialNumber to the licenses get params
func (o *LicensesGetParams) WithLicensesSerialNumberQueryParameter(licensesSerialNumber *string) *LicensesGetParams {
	o.SetLicensesSerialNumberQueryParameter(licensesSerialNumber)
	return o
}

// SetLicensesSerialNumberQueryParameter adds the licensesSerialNumber to the licenses get params
func (o *LicensesGetParams) SetLicensesSerialNumberQueryParameter(licensesSerialNumber *string) {
	o.LicensesSerialNumberQueryParameter = licensesSerialNumber
}

// WithLicensesStartTimeQueryParameter adds the licensesStartTime to the licenses get params
func (o *LicensesGetParams) WithLicensesStartTimeQueryParameter(licensesStartTime *string) *LicensesGetParams {
	o.SetLicensesStartTimeQueryParameter(licensesStartTime)
	return o
}

// SetLicensesStartTimeQueryParameter adds the licensesStartTime to the licenses get params
func (o *LicensesGetParams) SetLicensesStartTimeQueryParameter(licensesStartTime *string) {
	o.LicensesStartTimeQueryParameter = licensesStartTime
}

// WithMaxRecords adds the maxRecords to the licenses get params
func (o *LicensesGetParams) WithMaxRecords(maxRecords *int64) *LicensesGetParams {
	o.SetMaxRecords(maxRecords)
	return o
}

// SetMaxRecords adds the maxRecords to the licenses get params
func (o *LicensesGetParams) SetMaxRecords(maxRecords *int64) {
	o.MaxRecords = maxRecords
}

// WithNameQueryParameter adds the name to the licenses get params
func (o *LicensesGetParams) WithNameQueryParameter(name *string) *LicensesGetParams {
	o.SetNameQueryParameter(name)
	return o
}

// SetNameQueryParameter adds the name to the licenses get params
func (o *LicensesGetParams) SetNameQueryParameter(name *string) {
	o.NameQueryParameter = name
}

// WithOrderBy adds the orderBy to the licenses get params
func (o *LicensesGetParams) WithOrderBy(orderBy []string) *LicensesGetParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the licenses get params
func (o *LicensesGetParams) SetOrderBy(orderBy []string) {
	o.OrderBy = orderBy
}

// WithReturnRecords adds the returnRecords to the licenses get params
func (o *LicensesGetParams) WithReturnRecords(returnRecords *bool) *LicensesGetParams {
	o.SetReturnRecords(returnRecords)
	return o
}

// SetReturnRecords adds the returnRecords to the licenses get params
func (o *LicensesGetParams) SetReturnRecords(returnRecords *bool) {
	o.ReturnRecords = returnRecords
}

// WithReturnTimeout adds the returnTimeout to the licenses get params
func (o *LicensesGetParams) WithReturnTimeout(returnTimeout *int64) *LicensesGetParams {
	o.SetReturnTimeout(returnTimeout)
	return o
}

// SetReturnTimeout adds the returnTimeout to the licenses get params
func (o *LicensesGetParams) SetReturnTimeout(returnTimeout *int64) {
	o.ReturnTimeout = returnTimeout
}

// WithScopeQueryParameter adds the scope to the licenses get params
func (o *LicensesGetParams) WithScopeQueryParameter(scope *string) *LicensesGetParams {
	o.SetScopeQueryParameter(scope)
	return o
}

// SetScopeQueryParameter adds the scope to the licenses get params
func (o *LicensesGetParams) SetScopeQueryParameter(scope *string) {
	o.ScopeQueryParameter = scope
}

// WithStateQueryParameter adds the state to the licenses get params
func (o *LicensesGetParams) WithStateQueryParameter(state *string) *LicensesGetParams {
	o.SetStateQueryParameter(state)
	return o
}

// SetStateQueryParameter adds the state to the licenses get params
func (o *LicensesGetParams) SetStateQueryParameter(state *string) {
	o.StateQueryParameter = state
}

// WriteToRequest writes these params to a swagger request
func (o *LicensesGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.LicensesActiveQueryParameter != nil {

		// query param licenses.active
		var qrLicensesActive bool

		if o.LicensesActiveQueryParameter != nil {
			qrLicensesActive = *o.LicensesActiveQueryParameter
		}
		qLicensesActive := swag.FormatBool(qrLicensesActive)
		if qLicensesActive != "" {

			if err := r.SetQueryParam("licenses.active", qLicensesActive); err != nil {
				return err
			}
		}
	}

	if o.LicensesCapacityMaximumSizeQueryParameter != nil {

		// query param licenses.capacity.maximum_size
		var qrLicensesCapacityMaximumSize int64

		if o.LicensesCapacityMaximumSizeQueryParameter != nil {
			qrLicensesCapacityMaximumSize = *o.LicensesCapacityMaximumSizeQueryParameter
		}
		qLicensesCapacityMaximumSize := swag.FormatInt64(qrLicensesCapacityMaximumSize)
		if qLicensesCapacityMaximumSize != "" {

			if err := r.SetQueryParam("licenses.capacity.maximum_size", qLicensesCapacityMaximumSize); err != nil {
				return err
			}
		}
	}

	if o.LicensesCapacityUsedSizeQueryParameter != nil {

		// query param licenses.capacity.used_size
		var qrLicensesCapacityUsedSize int64

		if o.LicensesCapacityUsedSizeQueryParameter != nil {
			qrLicensesCapacityUsedSize = *o.LicensesCapacityUsedSizeQueryParameter
		}
		qLicensesCapacityUsedSize := swag.FormatInt64(qrLicensesCapacityUsedSize)
		if qLicensesCapacityUsedSize != "" {

			if err := r.SetQueryParam("licenses.capacity.used_size", qLicensesCapacityUsedSize); err != nil {
				return err
			}
		}
	}

	if o.LicensesComplianceStateQueryParameter != nil {

		// query param licenses.compliance.state
		var qrLicensesComplianceState string

		if o.LicensesComplianceStateQueryParameter != nil {
			qrLicensesComplianceState = *o.LicensesComplianceStateQueryParameter
		}
		qLicensesComplianceState := qrLicensesComplianceState
		if qLicensesComplianceState != "" {

			if err := r.SetQueryParam("licenses.compliance.state", qLicensesComplianceState); err != nil {
				return err
			}
		}
	}

	if o.LicensesEvaluationQueryParameter != nil {

		// query param licenses.evaluation
		var qrLicensesEvaluation bool

		if o.LicensesEvaluationQueryParameter != nil {
			qrLicensesEvaluation = *o.LicensesEvaluationQueryParameter
		}
		qLicensesEvaluation := swag.FormatBool(qrLicensesEvaluation)
		if qLicensesEvaluation != "" {

			if err := r.SetQueryParam("licenses.evaluation", qLicensesEvaluation); err != nil {
				return err
			}
		}
	}

	if o.LicensesExpiryTimeQueryParameter != nil {

		// query param licenses.expiry_time
		var qrLicensesExpiryTime string

		if o.LicensesExpiryTimeQueryParameter != nil {
			qrLicensesExpiryTime = *o.LicensesExpiryTimeQueryParameter
		}
		qLicensesExpiryTime := qrLicensesExpiryTime
		if qLicensesExpiryTime != "" {

			if err := r.SetQueryParam("licenses.expiry_time", qLicensesExpiryTime); err != nil {
				return err
			}
		}
	}

	if o.LicensesOwnerQueryParameter != nil {

		// query param licenses.owner
		var qrLicensesOwner string

		if o.LicensesOwnerQueryParameter != nil {
			qrLicensesOwner = *o.LicensesOwnerQueryParameter
		}
		qLicensesOwner := qrLicensesOwner
		if qLicensesOwner != "" {

			if err := r.SetQueryParam("licenses.owner", qLicensesOwner); err != nil {
				return err
			}
		}
	}

	if o.LicensesSerialNumberQueryParameter != nil {

		// query param licenses.serial_number
		var qrLicensesSerialNumber string

		if o.LicensesSerialNumberQueryParameter != nil {
			qrLicensesSerialNumber = *o.LicensesSerialNumberQueryParameter
		}
		qLicensesSerialNumber := qrLicensesSerialNumber
		if qLicensesSerialNumber != "" {

			if err := r.SetQueryParam("licenses.serial_number", qLicensesSerialNumber); err != nil {
				return err
			}
		}
	}

	if o.LicensesStartTimeQueryParameter != nil {

		// query param licenses.start_time
		var qrLicensesStartTime string

		if o.LicensesStartTimeQueryParameter != nil {
			qrLicensesStartTime = *o.LicensesStartTimeQueryParameter
		}
		qLicensesStartTime := qrLicensesStartTime
		if qLicensesStartTime != "" {

			if err := r.SetQueryParam("licenses.start_time", qLicensesStartTime); err != nil {
				return err
			}
		}
	}

	if o.MaxRecords != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecords != nil {
			qrMaxRecords = *o.MaxRecords
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.NameQueryParameter != nil {

		// query param name
		var qrName string

		if o.NameQueryParameter != nil {
			qrName = *o.NameQueryParameter
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.OrderBy != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.ReturnRecords != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecords != nil {
			qrReturnRecords = *o.ReturnRecords
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeout != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeout != nil {
			qrReturnTimeout = *o.ReturnTimeout
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.ScopeQueryParameter != nil {

		// query param scope
		var qrScope string

		if o.ScopeQueryParameter != nil {
			qrScope = *o.ScopeQueryParameter
		}
		qScope := qrScope
		if qScope != "" {

			if err := r.SetQueryParam("scope", qScope); err != nil {
				return err
			}
		}
	}

	if o.StateQueryParameter != nil {

		// query param state
		var qrState string

		if o.StateQueryParameter != nil {
			qrState = *o.StateQueryParameter
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamLicensesGet binds the parameter fields
func (o *LicensesGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamLicensesGet binds the parameter order_by
func (o *LicensesGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderBy

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
