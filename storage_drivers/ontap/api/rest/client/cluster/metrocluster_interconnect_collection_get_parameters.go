// Code generated by go-swagger; DO NOT EDIT.

package cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewMetroclusterInterconnectCollectionGetParams creates a new MetroclusterInterconnectCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewMetroclusterInterconnectCollectionGetParams() *MetroclusterInterconnectCollectionGetParams {
	return &MetroclusterInterconnectCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewMetroclusterInterconnectCollectionGetParamsWithTimeout creates a new MetroclusterInterconnectCollectionGetParams object
// with the ability to set a timeout on a request.
func NewMetroclusterInterconnectCollectionGetParamsWithTimeout(timeout time.Duration) *MetroclusterInterconnectCollectionGetParams {
	return &MetroclusterInterconnectCollectionGetParams{
		timeout: timeout,
	}
}

// NewMetroclusterInterconnectCollectionGetParamsWithContext creates a new MetroclusterInterconnectCollectionGetParams object
// with the ability to set a context for a request.
func NewMetroclusterInterconnectCollectionGetParamsWithContext(ctx context.Context) *MetroclusterInterconnectCollectionGetParams {
	return &MetroclusterInterconnectCollectionGetParams{
		Context: ctx,
	}
}

// NewMetroclusterInterconnectCollectionGetParamsWithHTTPClient creates a new MetroclusterInterconnectCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewMetroclusterInterconnectCollectionGetParamsWithHTTPClient(client *http.Client) *MetroclusterInterconnectCollectionGetParams {
	return &MetroclusterInterconnectCollectionGetParams{
		HTTPClient: client,
	}
}

/* MetroclusterInterconnectCollectionGetParams contains all the parameters to send to the API endpoint
   for the metrocluster interconnect collection get operation.

   Typically these are written to a http.Request.
*/
type MetroclusterInterconnectCollectionGetParams struct {

	/* Adapter.

	   Filter by adapter
	*/
	AdapterQueryParameter *string

	/* Fields.

	   Specify the fields to return.
	*/
	FieldsQueryParameter []string

	/* InterfacesAddress.

	   Filter by interfaces.address
	*/
	InterfacesAddressQueryParameter *string

	/* InterfacesGateway.

	   Filter by interfaces.gateway
	*/
	InterfacesGatewayQueryParameter *string

	/* InterfacesNetmask.

	   Filter by interfaces.netmask
	*/
	InterfacesNetmaskQueryParameter *string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecordsQueryParameter *int64

	/* MirrorEnabled.

	   Filter by mirror.enabled
	*/
	MirrorEnabledQueryParameter *bool

	/* MirrorState.

	   Filter by mirror.state
	*/
	MirrorStateQueryParameter *string

	/* MultipathPolicy.

	   Filter by multipath_policy
	*/
	MultipathPolicyQueryParameter *string

	/* NodeName.

	   Filter by node.name
	*/
	NodeNameQueryParameter *string

	/* NodeUUID.

	   Filter by node.uuid
	*/
	NodeUUIDQueryParameter *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderByQueryParameter []string

	/* PartnerType.

	   Filter by partner_type
	*/
	PartnerTypeQueryParameter *string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecordsQueryParameter *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeoutQueryParameter *int64

	/* State.

	   Filter by state
	*/
	StateQueryParameter *string

	/* Type.

	   Filter by type
	*/
	TypeQueryParameter *string

	/* VlanID.

	   Filter by vlan_id
	*/
	VlanIDQueryParameter *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the metrocluster interconnect collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *MetroclusterInterconnectCollectionGetParams) WithDefaults() *MetroclusterInterconnectCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the metrocluster interconnect collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *MetroclusterInterconnectCollectionGetParams) SetDefaults() {
	var (
		returnRecordsQueryParameterDefault = bool(true)

		returnTimeoutQueryParameterDefault = int64(15)
	)

	val := MetroclusterInterconnectCollectionGetParams{
		ReturnRecordsQueryParameter: &returnRecordsQueryParameterDefault,
		ReturnTimeoutQueryParameter: &returnTimeoutQueryParameterDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the metrocluster interconnect collection get params
func (o *MetroclusterInterconnectCollectionGetParams) WithTimeout(timeout time.Duration) *MetroclusterInterconnectCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the metrocluster interconnect collection get params
func (o *MetroclusterInterconnectCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the metrocluster interconnect collection get params
func (o *MetroclusterInterconnectCollectionGetParams) WithContext(ctx context.Context) *MetroclusterInterconnectCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the metrocluster interconnect collection get params
func (o *MetroclusterInterconnectCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the metrocluster interconnect collection get params
func (o *MetroclusterInterconnectCollectionGetParams) WithHTTPClient(client *http.Client) *MetroclusterInterconnectCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the metrocluster interconnect collection get params
func (o *MetroclusterInterconnectCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAdapterQueryParameter adds the adapter to the metrocluster interconnect collection get params
func (o *MetroclusterInterconnectCollectionGetParams) WithAdapterQueryParameter(adapter *string) *MetroclusterInterconnectCollectionGetParams {
	o.SetAdapterQueryParameter(adapter)
	return o
}

// SetAdapterQueryParameter adds the adapter to the metrocluster interconnect collection get params
func (o *MetroclusterInterconnectCollectionGetParams) SetAdapterQueryParameter(adapter *string) {
	o.AdapterQueryParameter = adapter
}

// WithFieldsQueryParameter adds the fields to the metrocluster interconnect collection get params
func (o *MetroclusterInterconnectCollectionGetParams) WithFieldsQueryParameter(fields []string) *MetroclusterInterconnectCollectionGetParams {
	o.SetFieldsQueryParameter(fields)
	return o
}

// SetFieldsQueryParameter adds the fields to the metrocluster interconnect collection get params
func (o *MetroclusterInterconnectCollectionGetParams) SetFieldsQueryParameter(fields []string) {
	o.FieldsQueryParameter = fields
}

// WithInterfacesAddressQueryParameter adds the interfacesAddress to the metrocluster interconnect collection get params
func (o *MetroclusterInterconnectCollectionGetParams) WithInterfacesAddressQueryParameter(interfacesAddress *string) *MetroclusterInterconnectCollectionGetParams {
	o.SetInterfacesAddressQueryParameter(interfacesAddress)
	return o
}

// SetInterfacesAddressQueryParameter adds the interfacesAddress to the metrocluster interconnect collection get params
func (o *MetroclusterInterconnectCollectionGetParams) SetInterfacesAddressQueryParameter(interfacesAddress *string) {
	o.InterfacesAddressQueryParameter = interfacesAddress
}

// WithInterfacesGatewayQueryParameter adds the interfacesGateway to the metrocluster interconnect collection get params
func (o *MetroclusterInterconnectCollectionGetParams) WithInterfacesGatewayQueryParameter(interfacesGateway *string) *MetroclusterInterconnectCollectionGetParams {
	o.SetInterfacesGatewayQueryParameter(interfacesGateway)
	return o
}

// SetInterfacesGatewayQueryParameter adds the interfacesGateway to the metrocluster interconnect collection get params
func (o *MetroclusterInterconnectCollectionGetParams) SetInterfacesGatewayQueryParameter(interfacesGateway *string) {
	o.InterfacesGatewayQueryParameter = interfacesGateway
}

// WithInterfacesNetmaskQueryParameter adds the interfacesNetmask to the metrocluster interconnect collection get params
func (o *MetroclusterInterconnectCollectionGetParams) WithInterfacesNetmaskQueryParameter(interfacesNetmask *string) *MetroclusterInterconnectCollectionGetParams {
	o.SetInterfacesNetmaskQueryParameter(interfacesNetmask)
	return o
}

// SetInterfacesNetmaskQueryParameter adds the interfacesNetmask to the metrocluster interconnect collection get params
func (o *MetroclusterInterconnectCollectionGetParams) SetInterfacesNetmaskQueryParameter(interfacesNetmask *string) {
	o.InterfacesNetmaskQueryParameter = interfacesNetmask
}

// WithMaxRecordsQueryParameter adds the maxRecords to the metrocluster interconnect collection get params
func (o *MetroclusterInterconnectCollectionGetParams) WithMaxRecordsQueryParameter(maxRecords *int64) *MetroclusterInterconnectCollectionGetParams {
	o.SetMaxRecordsQueryParameter(maxRecords)
	return o
}

// SetMaxRecordsQueryParameter adds the maxRecords to the metrocluster interconnect collection get params
func (o *MetroclusterInterconnectCollectionGetParams) SetMaxRecordsQueryParameter(maxRecords *int64) {
	o.MaxRecordsQueryParameter = maxRecords
}

// WithMirrorEnabledQueryParameter adds the mirrorEnabled to the metrocluster interconnect collection get params
func (o *MetroclusterInterconnectCollectionGetParams) WithMirrorEnabledQueryParameter(mirrorEnabled *bool) *MetroclusterInterconnectCollectionGetParams {
	o.SetMirrorEnabledQueryParameter(mirrorEnabled)
	return o
}

// SetMirrorEnabledQueryParameter adds the mirrorEnabled to the metrocluster interconnect collection get params
func (o *MetroclusterInterconnectCollectionGetParams) SetMirrorEnabledQueryParameter(mirrorEnabled *bool) {
	o.MirrorEnabledQueryParameter = mirrorEnabled
}

// WithMirrorStateQueryParameter adds the mirrorState to the metrocluster interconnect collection get params
func (o *MetroclusterInterconnectCollectionGetParams) WithMirrorStateQueryParameter(mirrorState *string) *MetroclusterInterconnectCollectionGetParams {
	o.SetMirrorStateQueryParameter(mirrorState)
	return o
}

// SetMirrorStateQueryParameter adds the mirrorState to the metrocluster interconnect collection get params
func (o *MetroclusterInterconnectCollectionGetParams) SetMirrorStateQueryParameter(mirrorState *string) {
	o.MirrorStateQueryParameter = mirrorState
}

// WithMultipathPolicyQueryParameter adds the multipathPolicy to the metrocluster interconnect collection get params
func (o *MetroclusterInterconnectCollectionGetParams) WithMultipathPolicyQueryParameter(multipathPolicy *string) *MetroclusterInterconnectCollectionGetParams {
	o.SetMultipathPolicyQueryParameter(multipathPolicy)
	return o
}

// SetMultipathPolicyQueryParameter adds the multipathPolicy to the metrocluster interconnect collection get params
func (o *MetroclusterInterconnectCollectionGetParams) SetMultipathPolicyQueryParameter(multipathPolicy *string) {
	o.MultipathPolicyQueryParameter = multipathPolicy
}

// WithNodeNameQueryParameter adds the nodeName to the metrocluster interconnect collection get params
func (o *MetroclusterInterconnectCollectionGetParams) WithNodeNameQueryParameter(nodeName *string) *MetroclusterInterconnectCollectionGetParams {
	o.SetNodeNameQueryParameter(nodeName)
	return o
}

// SetNodeNameQueryParameter adds the nodeName to the metrocluster interconnect collection get params
func (o *MetroclusterInterconnectCollectionGetParams) SetNodeNameQueryParameter(nodeName *string) {
	o.NodeNameQueryParameter = nodeName
}

// WithNodeUUIDQueryParameter adds the nodeUUID to the metrocluster interconnect collection get params
func (o *MetroclusterInterconnectCollectionGetParams) WithNodeUUIDQueryParameter(nodeUUID *string) *MetroclusterInterconnectCollectionGetParams {
	o.SetNodeUUIDQueryParameter(nodeUUID)
	return o
}

// SetNodeUUIDQueryParameter adds the nodeUuid to the metrocluster interconnect collection get params
func (o *MetroclusterInterconnectCollectionGetParams) SetNodeUUIDQueryParameter(nodeUUID *string) {
	o.NodeUUIDQueryParameter = nodeUUID
}

// WithOrderByQueryParameter adds the orderBy to the metrocluster interconnect collection get params
func (o *MetroclusterInterconnectCollectionGetParams) WithOrderByQueryParameter(orderBy []string) *MetroclusterInterconnectCollectionGetParams {
	o.SetOrderByQueryParameter(orderBy)
	return o
}

// SetOrderByQueryParameter adds the orderBy to the metrocluster interconnect collection get params
func (o *MetroclusterInterconnectCollectionGetParams) SetOrderByQueryParameter(orderBy []string) {
	o.OrderByQueryParameter = orderBy
}

// WithPartnerTypeQueryParameter adds the partnerType to the metrocluster interconnect collection get params
func (o *MetroclusterInterconnectCollectionGetParams) WithPartnerTypeQueryParameter(partnerType *string) *MetroclusterInterconnectCollectionGetParams {
	o.SetPartnerTypeQueryParameter(partnerType)
	return o
}

// SetPartnerTypeQueryParameter adds the partnerType to the metrocluster interconnect collection get params
func (o *MetroclusterInterconnectCollectionGetParams) SetPartnerTypeQueryParameter(partnerType *string) {
	o.PartnerTypeQueryParameter = partnerType
}

// WithReturnRecordsQueryParameter adds the returnRecords to the metrocluster interconnect collection get params
func (o *MetroclusterInterconnectCollectionGetParams) WithReturnRecordsQueryParameter(returnRecords *bool) *MetroclusterInterconnectCollectionGetParams {
	o.SetReturnRecordsQueryParameter(returnRecords)
	return o
}

// SetReturnRecordsQueryParameter adds the returnRecords to the metrocluster interconnect collection get params
func (o *MetroclusterInterconnectCollectionGetParams) SetReturnRecordsQueryParameter(returnRecords *bool) {
	o.ReturnRecordsQueryParameter = returnRecords
}

// WithReturnTimeoutQueryParameter adds the returnTimeout to the metrocluster interconnect collection get params
func (o *MetroclusterInterconnectCollectionGetParams) WithReturnTimeoutQueryParameter(returnTimeout *int64) *MetroclusterInterconnectCollectionGetParams {
	o.SetReturnTimeoutQueryParameter(returnTimeout)
	return o
}

// SetReturnTimeoutQueryParameter adds the returnTimeout to the metrocluster interconnect collection get params
func (o *MetroclusterInterconnectCollectionGetParams) SetReturnTimeoutQueryParameter(returnTimeout *int64) {
	o.ReturnTimeoutQueryParameter = returnTimeout
}

// WithStateQueryParameter adds the state to the metrocluster interconnect collection get params
func (o *MetroclusterInterconnectCollectionGetParams) WithStateQueryParameter(state *string) *MetroclusterInterconnectCollectionGetParams {
	o.SetStateQueryParameter(state)
	return o
}

// SetStateQueryParameter adds the state to the metrocluster interconnect collection get params
func (o *MetroclusterInterconnectCollectionGetParams) SetStateQueryParameter(state *string) {
	o.StateQueryParameter = state
}

// WithTypeQueryParameter adds the typeVar to the metrocluster interconnect collection get params
func (o *MetroclusterInterconnectCollectionGetParams) WithTypeQueryParameter(typeVar *string) *MetroclusterInterconnectCollectionGetParams {
	o.SetTypeQueryParameter(typeVar)
	return o
}

// SetTypeQueryParameter adds the type to the metrocluster interconnect collection get params
func (o *MetroclusterInterconnectCollectionGetParams) SetTypeQueryParameter(typeVar *string) {
	o.TypeQueryParameter = typeVar
}

// WithVlanIDQueryParameter adds the vlanID to the metrocluster interconnect collection get params
func (o *MetroclusterInterconnectCollectionGetParams) WithVlanIDQueryParameter(vlanID *int64) *MetroclusterInterconnectCollectionGetParams {
	o.SetVlanIDQueryParameter(vlanID)
	return o
}

// SetVlanIDQueryParameter adds the vlanId to the metrocluster interconnect collection get params
func (o *MetroclusterInterconnectCollectionGetParams) SetVlanIDQueryParameter(vlanID *int64) {
	o.VlanIDQueryParameter = vlanID
}

// WriteToRequest writes these params to a swagger request
func (o *MetroclusterInterconnectCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AdapterQueryParameter != nil {

		// query param adapter
		var qrAdapter string

		if o.AdapterQueryParameter != nil {
			qrAdapter = *o.AdapterQueryParameter
		}
		qAdapter := qrAdapter
		if qAdapter != "" {

			if err := r.SetQueryParam("adapter", qAdapter); err != nil {
				return err
			}
		}
	}

	if o.FieldsQueryParameter != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.InterfacesAddressQueryParameter != nil {

		// query param interfaces.address
		var qrInterfacesAddress string

		if o.InterfacesAddressQueryParameter != nil {
			qrInterfacesAddress = *o.InterfacesAddressQueryParameter
		}
		qInterfacesAddress := qrInterfacesAddress
		if qInterfacesAddress != "" {

			if err := r.SetQueryParam("interfaces.address", qInterfacesAddress); err != nil {
				return err
			}
		}
	}

	if o.InterfacesGatewayQueryParameter != nil {

		// query param interfaces.gateway
		var qrInterfacesGateway string

		if o.InterfacesGatewayQueryParameter != nil {
			qrInterfacesGateway = *o.InterfacesGatewayQueryParameter
		}
		qInterfacesGateway := qrInterfacesGateway
		if qInterfacesGateway != "" {

			if err := r.SetQueryParam("interfaces.gateway", qInterfacesGateway); err != nil {
				return err
			}
		}
	}

	if o.InterfacesNetmaskQueryParameter != nil {

		// query param interfaces.netmask
		var qrInterfacesNetmask string

		if o.InterfacesNetmaskQueryParameter != nil {
			qrInterfacesNetmask = *o.InterfacesNetmaskQueryParameter
		}
		qInterfacesNetmask := qrInterfacesNetmask
		if qInterfacesNetmask != "" {

			if err := r.SetQueryParam("interfaces.netmask", qInterfacesNetmask); err != nil {
				return err
			}
		}
	}

	if o.MaxRecordsQueryParameter != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecordsQueryParameter != nil {
			qrMaxRecords = *o.MaxRecordsQueryParameter
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.MirrorEnabledQueryParameter != nil {

		// query param mirror.enabled
		var qrMirrorEnabled bool

		if o.MirrorEnabledQueryParameter != nil {
			qrMirrorEnabled = *o.MirrorEnabledQueryParameter
		}
		qMirrorEnabled := swag.FormatBool(qrMirrorEnabled)
		if qMirrorEnabled != "" {

			if err := r.SetQueryParam("mirror.enabled", qMirrorEnabled); err != nil {
				return err
			}
		}
	}

	if o.MirrorStateQueryParameter != nil {

		// query param mirror.state
		var qrMirrorState string

		if o.MirrorStateQueryParameter != nil {
			qrMirrorState = *o.MirrorStateQueryParameter
		}
		qMirrorState := qrMirrorState
		if qMirrorState != "" {

			if err := r.SetQueryParam("mirror.state", qMirrorState); err != nil {
				return err
			}
		}
	}

	if o.MultipathPolicyQueryParameter != nil {

		// query param multipath_policy
		var qrMultipathPolicy string

		if o.MultipathPolicyQueryParameter != nil {
			qrMultipathPolicy = *o.MultipathPolicyQueryParameter
		}
		qMultipathPolicy := qrMultipathPolicy
		if qMultipathPolicy != "" {

			if err := r.SetQueryParam("multipath_policy", qMultipathPolicy); err != nil {
				return err
			}
		}
	}

	if o.NodeNameQueryParameter != nil {

		// query param node.name
		var qrNodeName string

		if o.NodeNameQueryParameter != nil {
			qrNodeName = *o.NodeNameQueryParameter
		}
		qNodeName := qrNodeName
		if qNodeName != "" {

			if err := r.SetQueryParam("node.name", qNodeName); err != nil {
				return err
			}
		}
	}

	if o.NodeUUIDQueryParameter != nil {

		// query param node.uuid
		var qrNodeUUID string

		if o.NodeUUIDQueryParameter != nil {
			qrNodeUUID = *o.NodeUUIDQueryParameter
		}
		qNodeUUID := qrNodeUUID
		if qNodeUUID != "" {

			if err := r.SetQueryParam("node.uuid", qNodeUUID); err != nil {
				return err
			}
		}
	}

	if o.OrderByQueryParameter != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.PartnerTypeQueryParameter != nil {

		// query param partner_type
		var qrPartnerType string

		if o.PartnerTypeQueryParameter != nil {
			qrPartnerType = *o.PartnerTypeQueryParameter
		}
		qPartnerType := qrPartnerType
		if qPartnerType != "" {

			if err := r.SetQueryParam("partner_type", qPartnerType); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecordsQueryParameter != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecordsQueryParameter != nil {
			qrReturnRecords = *o.ReturnRecordsQueryParameter
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeoutQueryParameter != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeoutQueryParameter != nil {
			qrReturnTimeout = *o.ReturnTimeoutQueryParameter
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.StateQueryParameter != nil {

		// query param state
		var qrState string

		if o.StateQueryParameter != nil {
			qrState = *o.StateQueryParameter
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if o.TypeQueryParameter != nil {

		// query param type
		var qrType string

		if o.TypeQueryParameter != nil {
			qrType = *o.TypeQueryParameter
		}
		qType := qrType
		if qType != "" {

			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}
	}

	if o.VlanIDQueryParameter != nil {

		// query param vlan_id
		var qrVlanID int64

		if o.VlanIDQueryParameter != nil {
			qrVlanID = *o.VlanIDQueryParameter
		}
		qVlanID := swag.FormatInt64(qrVlanID)
		if qVlanID != "" {

			if err := r.SetQueryParam("vlan_id", qVlanID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamMetroclusterInterconnectCollectionGet binds the parameter fields
func (o *MetroclusterInterconnectCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.FieldsQueryParameter

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamMetroclusterInterconnectCollectionGet binds the parameter order_by
func (o *MetroclusterInterconnectCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderByQueryParameter

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
