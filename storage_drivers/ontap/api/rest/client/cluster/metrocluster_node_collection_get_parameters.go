// Code generated by go-swagger; DO NOT EDIT.

package cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewMetroclusterNodeCollectionGetParams creates a new MetroclusterNodeCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewMetroclusterNodeCollectionGetParams() *MetroclusterNodeCollectionGetParams {
	return &MetroclusterNodeCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewMetroclusterNodeCollectionGetParamsWithTimeout creates a new MetroclusterNodeCollectionGetParams object
// with the ability to set a timeout on a request.
func NewMetroclusterNodeCollectionGetParamsWithTimeout(timeout time.Duration) *MetroclusterNodeCollectionGetParams {
	return &MetroclusterNodeCollectionGetParams{
		timeout: timeout,
	}
}

// NewMetroclusterNodeCollectionGetParamsWithContext creates a new MetroclusterNodeCollectionGetParams object
// with the ability to set a context for a request.
func NewMetroclusterNodeCollectionGetParamsWithContext(ctx context.Context) *MetroclusterNodeCollectionGetParams {
	return &MetroclusterNodeCollectionGetParams{
		Context: ctx,
	}
}

// NewMetroclusterNodeCollectionGetParamsWithHTTPClient creates a new MetroclusterNodeCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewMetroclusterNodeCollectionGetParamsWithHTTPClient(client *http.Client) *MetroclusterNodeCollectionGetParams {
	return &MetroclusterNodeCollectionGetParams{
		HTTPClient: client,
	}
}

/* MetroclusterNodeCollectionGetParams contains all the parameters to send to the API endpoint
   for the metrocluster node collection get operation.

   Typically these are written to a http.Request.
*/
type MetroclusterNodeCollectionGetParams struct {

	/* AutomaticUso.

	   Filter by automatic_uso
	*/
	AutomaticUsoQueryParameter *bool

	/* ClusterName.

	   Filter by cluster.name
	*/
	ClusterNameQueryParameter *string

	/* ClusterUUID.

	   Filter by cluster.uuid
	*/
	ClusterUUIDQueryParameter *string

	/* ConfigurationState.

	   Filter by configuration_state
	*/
	ConfigurationStateQueryParameter *string

	/* DrGroupID.

	   Filter by dr_group_id
	*/
	DrGroupIDQueryParameter *int64

	/* DrMirroringState.

	   Filter by dr_mirroring_state
	*/
	DrMirroringStateQueryParameter *string

	/* DrOperationState.

	   Filter by dr_operation_state
	*/
	DrOperationStateQueryParameter *string

	/* Fields.

	   Specify the fields to return.
	*/
	FieldsQueryParameter []string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecordsQueryParameter *int64

	/* NodeName.

	   Filter by node.name
	*/
	NodeNameQueryParameter *string

	/* NodeUUID.

	   Filter by node.uuid
	*/
	NodeUUIDQueryParameter *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderByQueryParameter []string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecordsQueryParameter *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeoutQueryParameter *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the metrocluster node collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *MetroclusterNodeCollectionGetParams) WithDefaults() *MetroclusterNodeCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the metrocluster node collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *MetroclusterNodeCollectionGetParams) SetDefaults() {
	var (
		returnRecordsQueryParameterDefault = bool(true)

		returnTimeoutQueryParameterDefault = int64(15)
	)

	val := MetroclusterNodeCollectionGetParams{
		ReturnRecordsQueryParameter: &returnRecordsQueryParameterDefault,
		ReturnTimeoutQueryParameter: &returnTimeoutQueryParameterDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the metrocluster node collection get params
func (o *MetroclusterNodeCollectionGetParams) WithTimeout(timeout time.Duration) *MetroclusterNodeCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the metrocluster node collection get params
func (o *MetroclusterNodeCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the metrocluster node collection get params
func (o *MetroclusterNodeCollectionGetParams) WithContext(ctx context.Context) *MetroclusterNodeCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the metrocluster node collection get params
func (o *MetroclusterNodeCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the metrocluster node collection get params
func (o *MetroclusterNodeCollectionGetParams) WithHTTPClient(client *http.Client) *MetroclusterNodeCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the metrocluster node collection get params
func (o *MetroclusterNodeCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAutomaticUsoQueryParameter adds the automaticUso to the metrocluster node collection get params
func (o *MetroclusterNodeCollectionGetParams) WithAutomaticUsoQueryParameter(automaticUso *bool) *MetroclusterNodeCollectionGetParams {
	o.SetAutomaticUsoQueryParameter(automaticUso)
	return o
}

// SetAutomaticUsoQueryParameter adds the automaticUso to the metrocluster node collection get params
func (o *MetroclusterNodeCollectionGetParams) SetAutomaticUsoQueryParameter(automaticUso *bool) {
	o.AutomaticUsoQueryParameter = automaticUso
}

// WithClusterNameQueryParameter adds the clusterName to the metrocluster node collection get params
func (o *MetroclusterNodeCollectionGetParams) WithClusterNameQueryParameter(clusterName *string) *MetroclusterNodeCollectionGetParams {
	o.SetClusterNameQueryParameter(clusterName)
	return o
}

// SetClusterNameQueryParameter adds the clusterName to the metrocluster node collection get params
func (o *MetroclusterNodeCollectionGetParams) SetClusterNameQueryParameter(clusterName *string) {
	o.ClusterNameQueryParameter = clusterName
}

// WithClusterUUIDQueryParameter adds the clusterUUID to the metrocluster node collection get params
func (o *MetroclusterNodeCollectionGetParams) WithClusterUUIDQueryParameter(clusterUUID *string) *MetroclusterNodeCollectionGetParams {
	o.SetClusterUUIDQueryParameter(clusterUUID)
	return o
}

// SetClusterUUIDQueryParameter adds the clusterUuid to the metrocluster node collection get params
func (o *MetroclusterNodeCollectionGetParams) SetClusterUUIDQueryParameter(clusterUUID *string) {
	o.ClusterUUIDQueryParameter = clusterUUID
}

// WithConfigurationStateQueryParameter adds the configurationState to the metrocluster node collection get params
func (o *MetroclusterNodeCollectionGetParams) WithConfigurationStateQueryParameter(configurationState *string) *MetroclusterNodeCollectionGetParams {
	o.SetConfigurationStateQueryParameter(configurationState)
	return o
}

// SetConfigurationStateQueryParameter adds the configurationState to the metrocluster node collection get params
func (o *MetroclusterNodeCollectionGetParams) SetConfigurationStateQueryParameter(configurationState *string) {
	o.ConfigurationStateQueryParameter = configurationState
}

// WithDrGroupIDQueryParameter adds the drGroupID to the metrocluster node collection get params
func (o *MetroclusterNodeCollectionGetParams) WithDrGroupIDQueryParameter(drGroupID *int64) *MetroclusterNodeCollectionGetParams {
	o.SetDrGroupIDQueryParameter(drGroupID)
	return o
}

// SetDrGroupIDQueryParameter adds the drGroupId to the metrocluster node collection get params
func (o *MetroclusterNodeCollectionGetParams) SetDrGroupIDQueryParameter(drGroupID *int64) {
	o.DrGroupIDQueryParameter = drGroupID
}

// WithDrMirroringStateQueryParameter adds the drMirroringState to the metrocluster node collection get params
func (o *MetroclusterNodeCollectionGetParams) WithDrMirroringStateQueryParameter(drMirroringState *string) *MetroclusterNodeCollectionGetParams {
	o.SetDrMirroringStateQueryParameter(drMirroringState)
	return o
}

// SetDrMirroringStateQueryParameter adds the drMirroringState to the metrocluster node collection get params
func (o *MetroclusterNodeCollectionGetParams) SetDrMirroringStateQueryParameter(drMirroringState *string) {
	o.DrMirroringStateQueryParameter = drMirroringState
}

// WithDrOperationStateQueryParameter adds the drOperationState to the metrocluster node collection get params
func (o *MetroclusterNodeCollectionGetParams) WithDrOperationStateQueryParameter(drOperationState *string) *MetroclusterNodeCollectionGetParams {
	o.SetDrOperationStateQueryParameter(drOperationState)
	return o
}

// SetDrOperationStateQueryParameter adds the drOperationState to the metrocluster node collection get params
func (o *MetroclusterNodeCollectionGetParams) SetDrOperationStateQueryParameter(drOperationState *string) {
	o.DrOperationStateQueryParameter = drOperationState
}

// WithFieldsQueryParameter adds the fields to the metrocluster node collection get params
func (o *MetroclusterNodeCollectionGetParams) WithFieldsQueryParameter(fields []string) *MetroclusterNodeCollectionGetParams {
	o.SetFieldsQueryParameter(fields)
	return o
}

// SetFieldsQueryParameter adds the fields to the metrocluster node collection get params
func (o *MetroclusterNodeCollectionGetParams) SetFieldsQueryParameter(fields []string) {
	o.FieldsQueryParameter = fields
}

// WithMaxRecordsQueryParameter adds the maxRecords to the metrocluster node collection get params
func (o *MetroclusterNodeCollectionGetParams) WithMaxRecordsQueryParameter(maxRecords *int64) *MetroclusterNodeCollectionGetParams {
	o.SetMaxRecordsQueryParameter(maxRecords)
	return o
}

// SetMaxRecordsQueryParameter adds the maxRecords to the metrocluster node collection get params
func (o *MetroclusterNodeCollectionGetParams) SetMaxRecordsQueryParameter(maxRecords *int64) {
	o.MaxRecordsQueryParameter = maxRecords
}

// WithNodeNameQueryParameter adds the nodeName to the metrocluster node collection get params
func (o *MetroclusterNodeCollectionGetParams) WithNodeNameQueryParameter(nodeName *string) *MetroclusterNodeCollectionGetParams {
	o.SetNodeNameQueryParameter(nodeName)
	return o
}

// SetNodeNameQueryParameter adds the nodeName to the metrocluster node collection get params
func (o *MetroclusterNodeCollectionGetParams) SetNodeNameQueryParameter(nodeName *string) {
	o.NodeNameQueryParameter = nodeName
}

// WithNodeUUIDQueryParameter adds the nodeUUID to the metrocluster node collection get params
func (o *MetroclusterNodeCollectionGetParams) WithNodeUUIDQueryParameter(nodeUUID *string) *MetroclusterNodeCollectionGetParams {
	o.SetNodeUUIDQueryParameter(nodeUUID)
	return o
}

// SetNodeUUIDQueryParameter adds the nodeUuid to the metrocluster node collection get params
func (o *MetroclusterNodeCollectionGetParams) SetNodeUUIDQueryParameter(nodeUUID *string) {
	o.NodeUUIDQueryParameter = nodeUUID
}

// WithOrderByQueryParameter adds the orderBy to the metrocluster node collection get params
func (o *MetroclusterNodeCollectionGetParams) WithOrderByQueryParameter(orderBy []string) *MetroclusterNodeCollectionGetParams {
	o.SetOrderByQueryParameter(orderBy)
	return o
}

// SetOrderByQueryParameter adds the orderBy to the metrocluster node collection get params
func (o *MetroclusterNodeCollectionGetParams) SetOrderByQueryParameter(orderBy []string) {
	o.OrderByQueryParameter = orderBy
}

// WithReturnRecordsQueryParameter adds the returnRecords to the metrocluster node collection get params
func (o *MetroclusterNodeCollectionGetParams) WithReturnRecordsQueryParameter(returnRecords *bool) *MetroclusterNodeCollectionGetParams {
	o.SetReturnRecordsQueryParameter(returnRecords)
	return o
}

// SetReturnRecordsQueryParameter adds the returnRecords to the metrocluster node collection get params
func (o *MetroclusterNodeCollectionGetParams) SetReturnRecordsQueryParameter(returnRecords *bool) {
	o.ReturnRecordsQueryParameter = returnRecords
}

// WithReturnTimeoutQueryParameter adds the returnTimeout to the metrocluster node collection get params
func (o *MetroclusterNodeCollectionGetParams) WithReturnTimeoutQueryParameter(returnTimeout *int64) *MetroclusterNodeCollectionGetParams {
	o.SetReturnTimeoutQueryParameter(returnTimeout)
	return o
}

// SetReturnTimeoutQueryParameter adds the returnTimeout to the metrocluster node collection get params
func (o *MetroclusterNodeCollectionGetParams) SetReturnTimeoutQueryParameter(returnTimeout *int64) {
	o.ReturnTimeoutQueryParameter = returnTimeout
}

// WriteToRequest writes these params to a swagger request
func (o *MetroclusterNodeCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AutomaticUsoQueryParameter != nil {

		// query param automatic_uso
		var qrAutomaticUso bool

		if o.AutomaticUsoQueryParameter != nil {
			qrAutomaticUso = *o.AutomaticUsoQueryParameter
		}
		qAutomaticUso := swag.FormatBool(qrAutomaticUso)
		if qAutomaticUso != "" {

			if err := r.SetQueryParam("automatic_uso", qAutomaticUso); err != nil {
				return err
			}
		}
	}

	if o.ClusterNameQueryParameter != nil {

		// query param cluster.name
		var qrClusterName string

		if o.ClusterNameQueryParameter != nil {
			qrClusterName = *o.ClusterNameQueryParameter
		}
		qClusterName := qrClusterName
		if qClusterName != "" {

			if err := r.SetQueryParam("cluster.name", qClusterName); err != nil {
				return err
			}
		}
	}

	if o.ClusterUUIDQueryParameter != nil {

		// query param cluster.uuid
		var qrClusterUUID string

		if o.ClusterUUIDQueryParameter != nil {
			qrClusterUUID = *o.ClusterUUIDQueryParameter
		}
		qClusterUUID := qrClusterUUID
		if qClusterUUID != "" {

			if err := r.SetQueryParam("cluster.uuid", qClusterUUID); err != nil {
				return err
			}
		}
	}

	if o.ConfigurationStateQueryParameter != nil {

		// query param configuration_state
		var qrConfigurationState string

		if o.ConfigurationStateQueryParameter != nil {
			qrConfigurationState = *o.ConfigurationStateQueryParameter
		}
		qConfigurationState := qrConfigurationState
		if qConfigurationState != "" {

			if err := r.SetQueryParam("configuration_state", qConfigurationState); err != nil {
				return err
			}
		}
	}

	if o.DrGroupIDQueryParameter != nil {

		// query param dr_group_id
		var qrDrGroupID int64

		if o.DrGroupIDQueryParameter != nil {
			qrDrGroupID = *o.DrGroupIDQueryParameter
		}
		qDrGroupID := swag.FormatInt64(qrDrGroupID)
		if qDrGroupID != "" {

			if err := r.SetQueryParam("dr_group_id", qDrGroupID); err != nil {
				return err
			}
		}
	}

	if o.DrMirroringStateQueryParameter != nil {

		// query param dr_mirroring_state
		var qrDrMirroringState string

		if o.DrMirroringStateQueryParameter != nil {
			qrDrMirroringState = *o.DrMirroringStateQueryParameter
		}
		qDrMirroringState := qrDrMirroringState
		if qDrMirroringState != "" {

			if err := r.SetQueryParam("dr_mirroring_state", qDrMirroringState); err != nil {
				return err
			}
		}
	}

	if o.DrOperationStateQueryParameter != nil {

		// query param dr_operation_state
		var qrDrOperationState string

		if o.DrOperationStateQueryParameter != nil {
			qrDrOperationState = *o.DrOperationStateQueryParameter
		}
		qDrOperationState := qrDrOperationState
		if qDrOperationState != "" {

			if err := r.SetQueryParam("dr_operation_state", qDrOperationState); err != nil {
				return err
			}
		}
	}

	if o.FieldsQueryParameter != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.MaxRecordsQueryParameter != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecordsQueryParameter != nil {
			qrMaxRecords = *o.MaxRecordsQueryParameter
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.NodeNameQueryParameter != nil {

		// query param node.name
		var qrNodeName string

		if o.NodeNameQueryParameter != nil {
			qrNodeName = *o.NodeNameQueryParameter
		}
		qNodeName := qrNodeName
		if qNodeName != "" {

			if err := r.SetQueryParam("node.name", qNodeName); err != nil {
				return err
			}
		}
	}

	if o.NodeUUIDQueryParameter != nil {

		// query param node.uuid
		var qrNodeUUID string

		if o.NodeUUIDQueryParameter != nil {
			qrNodeUUID = *o.NodeUUIDQueryParameter
		}
		qNodeUUID := qrNodeUUID
		if qNodeUUID != "" {

			if err := r.SetQueryParam("node.uuid", qNodeUUID); err != nil {
				return err
			}
		}
	}

	if o.OrderByQueryParameter != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.ReturnRecordsQueryParameter != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecordsQueryParameter != nil {
			qrReturnRecords = *o.ReturnRecordsQueryParameter
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeoutQueryParameter != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeoutQueryParameter != nil {
			qrReturnTimeout = *o.ReturnTimeoutQueryParameter
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamMetroclusterNodeCollectionGet binds the parameter fields
func (o *MetroclusterNodeCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.FieldsQueryParameter

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamMetroclusterNodeCollectionGet binds the parameter order_by
func (o *MetroclusterNodeCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderByQueryParameter

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
