// Code generated by go-swagger; DO NOT EDIT.

package cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewScheduleCollectionGetParams creates a new ScheduleCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewScheduleCollectionGetParams() *ScheduleCollectionGetParams {
	return &ScheduleCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewScheduleCollectionGetParamsWithTimeout creates a new ScheduleCollectionGetParams object
// with the ability to set a timeout on a request.
func NewScheduleCollectionGetParamsWithTimeout(timeout time.Duration) *ScheduleCollectionGetParams {
	return &ScheduleCollectionGetParams{
		timeout: timeout,
	}
}

// NewScheduleCollectionGetParamsWithContext creates a new ScheduleCollectionGetParams object
// with the ability to set a context for a request.
func NewScheduleCollectionGetParamsWithContext(ctx context.Context) *ScheduleCollectionGetParams {
	return &ScheduleCollectionGetParams{
		Context: ctx,
	}
}

// NewScheduleCollectionGetParamsWithHTTPClient creates a new ScheduleCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewScheduleCollectionGetParamsWithHTTPClient(client *http.Client) *ScheduleCollectionGetParams {
	return &ScheduleCollectionGetParams{
		HTTPClient: client,
	}
}

/* ScheduleCollectionGetParams contains all the parameters to send to the API endpoint
   for the schedule collection get operation.

   Typically these are written to a http.Request.
*/
type ScheduleCollectionGetParams struct {

	/* ClusterName.

	   Filter by cluster.name
	*/
	ClusterNameQueryParameter *string

	/* ClusterUUID.

	   Filter by cluster.uuid
	*/
	ClusterUUIDQueryParameter *string

	/* CronDays.

	   Filter by cron.days
	*/
	CronDaysQueryParameter *int64

	/* CronHours.

	   Filter by cron.hours
	*/
	CronHoursQueryParameter *int64

	/* CronMinutes.

	   Filter by cron.minutes
	*/
	CronMinutesQueryParameter *int64

	/* CronMonths.

	   Filter by cron.months
	*/
	CronMonthsQueryParameter *int64

	/* CronWeekdays.

	   Filter by cron.weekdays
	*/
	CronWeekdaysQueryParameter *int64

	/* Fields.

	   Specify the fields to return.
	*/
	FieldsQueryParameter []string

	/* Interval.

	   Filter by interval
	*/
	IntervalQueryParameter *string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecordsQueryParameter *int64

	/* Name.

	   Filter by name
	*/
	NameQueryParameter *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderByQueryParameter []string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecordsQueryParameter *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeoutQueryParameter *int64

	/* Scope.

	   Filter by scope
	*/
	ScopeQueryParameter *string

	/* SvmName.

	   Filter by svm.name
	*/
	SVMNameQueryParameter *string

	/* SvmUUID.

	   Filter by svm.uuid
	*/
	SVMUUIDQueryParameter *string

	/* Type.

	   Filter by type
	*/
	TypeQueryParameter *string

	/* UUID.

	   Filter by uuid
	*/
	UUIDQueryParameter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the schedule collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ScheduleCollectionGetParams) WithDefaults() *ScheduleCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the schedule collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ScheduleCollectionGetParams) SetDefaults() {
	var (
		returnRecordsQueryParameterDefault = bool(true)

		returnTimeoutQueryParameterDefault = int64(15)
	)

	val := ScheduleCollectionGetParams{
		ReturnRecordsQueryParameter: &returnRecordsQueryParameterDefault,
		ReturnTimeoutQueryParameter: &returnTimeoutQueryParameterDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the schedule collection get params
func (o *ScheduleCollectionGetParams) WithTimeout(timeout time.Duration) *ScheduleCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the schedule collection get params
func (o *ScheduleCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the schedule collection get params
func (o *ScheduleCollectionGetParams) WithContext(ctx context.Context) *ScheduleCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the schedule collection get params
func (o *ScheduleCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the schedule collection get params
func (o *ScheduleCollectionGetParams) WithHTTPClient(client *http.Client) *ScheduleCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the schedule collection get params
func (o *ScheduleCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterNameQueryParameter adds the clusterName to the schedule collection get params
func (o *ScheduleCollectionGetParams) WithClusterNameQueryParameter(clusterName *string) *ScheduleCollectionGetParams {
	o.SetClusterNameQueryParameter(clusterName)
	return o
}

// SetClusterNameQueryParameter adds the clusterName to the schedule collection get params
func (o *ScheduleCollectionGetParams) SetClusterNameQueryParameter(clusterName *string) {
	o.ClusterNameQueryParameter = clusterName
}

// WithClusterUUIDQueryParameter adds the clusterUUID to the schedule collection get params
func (o *ScheduleCollectionGetParams) WithClusterUUIDQueryParameter(clusterUUID *string) *ScheduleCollectionGetParams {
	o.SetClusterUUIDQueryParameter(clusterUUID)
	return o
}

// SetClusterUUIDQueryParameter adds the clusterUuid to the schedule collection get params
func (o *ScheduleCollectionGetParams) SetClusterUUIDQueryParameter(clusterUUID *string) {
	o.ClusterUUIDQueryParameter = clusterUUID
}

// WithCronDaysQueryParameter adds the cronDays to the schedule collection get params
func (o *ScheduleCollectionGetParams) WithCronDaysQueryParameter(cronDays *int64) *ScheduleCollectionGetParams {
	o.SetCronDaysQueryParameter(cronDays)
	return o
}

// SetCronDaysQueryParameter adds the cronDays to the schedule collection get params
func (o *ScheduleCollectionGetParams) SetCronDaysQueryParameter(cronDays *int64) {
	o.CronDaysQueryParameter = cronDays
}

// WithCronHoursQueryParameter adds the cronHours to the schedule collection get params
func (o *ScheduleCollectionGetParams) WithCronHoursQueryParameter(cronHours *int64) *ScheduleCollectionGetParams {
	o.SetCronHoursQueryParameter(cronHours)
	return o
}

// SetCronHoursQueryParameter adds the cronHours to the schedule collection get params
func (o *ScheduleCollectionGetParams) SetCronHoursQueryParameter(cronHours *int64) {
	o.CronHoursQueryParameter = cronHours
}

// WithCronMinutesQueryParameter adds the cronMinutes to the schedule collection get params
func (o *ScheduleCollectionGetParams) WithCronMinutesQueryParameter(cronMinutes *int64) *ScheduleCollectionGetParams {
	o.SetCronMinutesQueryParameter(cronMinutes)
	return o
}

// SetCronMinutesQueryParameter adds the cronMinutes to the schedule collection get params
func (o *ScheduleCollectionGetParams) SetCronMinutesQueryParameter(cronMinutes *int64) {
	o.CronMinutesQueryParameter = cronMinutes
}

// WithCronMonthsQueryParameter adds the cronMonths to the schedule collection get params
func (o *ScheduleCollectionGetParams) WithCronMonthsQueryParameter(cronMonths *int64) *ScheduleCollectionGetParams {
	o.SetCronMonthsQueryParameter(cronMonths)
	return o
}

// SetCronMonthsQueryParameter adds the cronMonths to the schedule collection get params
func (o *ScheduleCollectionGetParams) SetCronMonthsQueryParameter(cronMonths *int64) {
	o.CronMonthsQueryParameter = cronMonths
}

// WithCronWeekdaysQueryParameter adds the cronWeekdays to the schedule collection get params
func (o *ScheduleCollectionGetParams) WithCronWeekdaysQueryParameter(cronWeekdays *int64) *ScheduleCollectionGetParams {
	o.SetCronWeekdaysQueryParameter(cronWeekdays)
	return o
}

// SetCronWeekdaysQueryParameter adds the cronWeekdays to the schedule collection get params
func (o *ScheduleCollectionGetParams) SetCronWeekdaysQueryParameter(cronWeekdays *int64) {
	o.CronWeekdaysQueryParameter = cronWeekdays
}

// WithFieldsQueryParameter adds the fields to the schedule collection get params
func (o *ScheduleCollectionGetParams) WithFieldsQueryParameter(fields []string) *ScheduleCollectionGetParams {
	o.SetFieldsQueryParameter(fields)
	return o
}

// SetFieldsQueryParameter adds the fields to the schedule collection get params
func (o *ScheduleCollectionGetParams) SetFieldsQueryParameter(fields []string) {
	o.FieldsQueryParameter = fields
}

// WithIntervalQueryParameter adds the interval to the schedule collection get params
func (o *ScheduleCollectionGetParams) WithIntervalQueryParameter(interval *string) *ScheduleCollectionGetParams {
	o.SetIntervalQueryParameter(interval)
	return o
}

// SetIntervalQueryParameter adds the interval to the schedule collection get params
func (o *ScheduleCollectionGetParams) SetIntervalQueryParameter(interval *string) {
	o.IntervalQueryParameter = interval
}

// WithMaxRecordsQueryParameter adds the maxRecords to the schedule collection get params
func (o *ScheduleCollectionGetParams) WithMaxRecordsQueryParameter(maxRecords *int64) *ScheduleCollectionGetParams {
	o.SetMaxRecordsQueryParameter(maxRecords)
	return o
}

// SetMaxRecordsQueryParameter adds the maxRecords to the schedule collection get params
func (o *ScheduleCollectionGetParams) SetMaxRecordsQueryParameter(maxRecords *int64) {
	o.MaxRecordsQueryParameter = maxRecords
}

// WithNameQueryParameter adds the name to the schedule collection get params
func (o *ScheduleCollectionGetParams) WithNameQueryParameter(name *string) *ScheduleCollectionGetParams {
	o.SetNameQueryParameter(name)
	return o
}

// SetNameQueryParameter adds the name to the schedule collection get params
func (o *ScheduleCollectionGetParams) SetNameQueryParameter(name *string) {
	o.NameQueryParameter = name
}

// WithOrderByQueryParameter adds the orderBy to the schedule collection get params
func (o *ScheduleCollectionGetParams) WithOrderByQueryParameter(orderBy []string) *ScheduleCollectionGetParams {
	o.SetOrderByQueryParameter(orderBy)
	return o
}

// SetOrderByQueryParameter adds the orderBy to the schedule collection get params
func (o *ScheduleCollectionGetParams) SetOrderByQueryParameter(orderBy []string) {
	o.OrderByQueryParameter = orderBy
}

// WithReturnRecordsQueryParameter adds the returnRecords to the schedule collection get params
func (o *ScheduleCollectionGetParams) WithReturnRecordsQueryParameter(returnRecords *bool) *ScheduleCollectionGetParams {
	o.SetReturnRecordsQueryParameter(returnRecords)
	return o
}

// SetReturnRecordsQueryParameter adds the returnRecords to the schedule collection get params
func (o *ScheduleCollectionGetParams) SetReturnRecordsQueryParameter(returnRecords *bool) {
	o.ReturnRecordsQueryParameter = returnRecords
}

// WithReturnTimeoutQueryParameter adds the returnTimeout to the schedule collection get params
func (o *ScheduleCollectionGetParams) WithReturnTimeoutQueryParameter(returnTimeout *int64) *ScheduleCollectionGetParams {
	o.SetReturnTimeoutQueryParameter(returnTimeout)
	return o
}

// SetReturnTimeoutQueryParameter adds the returnTimeout to the schedule collection get params
func (o *ScheduleCollectionGetParams) SetReturnTimeoutQueryParameter(returnTimeout *int64) {
	o.ReturnTimeoutQueryParameter = returnTimeout
}

// WithScopeQueryParameter adds the scope to the schedule collection get params
func (o *ScheduleCollectionGetParams) WithScopeQueryParameter(scope *string) *ScheduleCollectionGetParams {
	o.SetScopeQueryParameter(scope)
	return o
}

// SetScopeQueryParameter adds the scope to the schedule collection get params
func (o *ScheduleCollectionGetParams) SetScopeQueryParameter(scope *string) {
	o.ScopeQueryParameter = scope
}

// WithSVMNameQueryParameter adds the svmName to the schedule collection get params
func (o *ScheduleCollectionGetParams) WithSVMNameQueryParameter(svmName *string) *ScheduleCollectionGetParams {
	o.SetSVMNameQueryParameter(svmName)
	return o
}

// SetSVMNameQueryParameter adds the svmName to the schedule collection get params
func (o *ScheduleCollectionGetParams) SetSVMNameQueryParameter(svmName *string) {
	o.SVMNameQueryParameter = svmName
}

// WithSVMUUIDQueryParameter adds the svmUUID to the schedule collection get params
func (o *ScheduleCollectionGetParams) WithSVMUUIDQueryParameter(svmUUID *string) *ScheduleCollectionGetParams {
	o.SetSVMUUIDQueryParameter(svmUUID)
	return o
}

// SetSVMUUIDQueryParameter adds the svmUuid to the schedule collection get params
func (o *ScheduleCollectionGetParams) SetSVMUUIDQueryParameter(svmUUID *string) {
	o.SVMUUIDQueryParameter = svmUUID
}

// WithTypeQueryParameter adds the typeVar to the schedule collection get params
func (o *ScheduleCollectionGetParams) WithTypeQueryParameter(typeVar *string) *ScheduleCollectionGetParams {
	o.SetTypeQueryParameter(typeVar)
	return o
}

// SetTypeQueryParameter adds the type to the schedule collection get params
func (o *ScheduleCollectionGetParams) SetTypeQueryParameter(typeVar *string) {
	o.TypeQueryParameter = typeVar
}

// WithUUIDQueryParameter adds the uuid to the schedule collection get params
func (o *ScheduleCollectionGetParams) WithUUIDQueryParameter(uuid *string) *ScheduleCollectionGetParams {
	o.SetUUIDQueryParameter(uuid)
	return o
}

// SetUUIDQueryParameter adds the uuid to the schedule collection get params
func (o *ScheduleCollectionGetParams) SetUUIDQueryParameter(uuid *string) {
	o.UUIDQueryParameter = uuid
}

// WriteToRequest writes these params to a swagger request
func (o *ScheduleCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ClusterNameQueryParameter != nil {

		// query param cluster.name
		var qrClusterName string

		if o.ClusterNameQueryParameter != nil {
			qrClusterName = *o.ClusterNameQueryParameter
		}
		qClusterName := qrClusterName
		if qClusterName != "" {

			if err := r.SetQueryParam("cluster.name", qClusterName); err != nil {
				return err
			}
		}
	}

	if o.ClusterUUIDQueryParameter != nil {

		// query param cluster.uuid
		var qrClusterUUID string

		if o.ClusterUUIDQueryParameter != nil {
			qrClusterUUID = *o.ClusterUUIDQueryParameter
		}
		qClusterUUID := qrClusterUUID
		if qClusterUUID != "" {

			if err := r.SetQueryParam("cluster.uuid", qClusterUUID); err != nil {
				return err
			}
		}
	}

	if o.CronDaysQueryParameter != nil {

		// query param cron.days
		var qrCronDays int64

		if o.CronDaysQueryParameter != nil {
			qrCronDays = *o.CronDaysQueryParameter
		}
		qCronDays := swag.FormatInt64(qrCronDays)
		if qCronDays != "" {

			if err := r.SetQueryParam("cron.days", qCronDays); err != nil {
				return err
			}
		}
	}

	if o.CronHoursQueryParameter != nil {

		// query param cron.hours
		var qrCronHours int64

		if o.CronHoursQueryParameter != nil {
			qrCronHours = *o.CronHoursQueryParameter
		}
		qCronHours := swag.FormatInt64(qrCronHours)
		if qCronHours != "" {

			if err := r.SetQueryParam("cron.hours", qCronHours); err != nil {
				return err
			}
		}
	}

	if o.CronMinutesQueryParameter != nil {

		// query param cron.minutes
		var qrCronMinutes int64

		if o.CronMinutesQueryParameter != nil {
			qrCronMinutes = *o.CronMinutesQueryParameter
		}
		qCronMinutes := swag.FormatInt64(qrCronMinutes)
		if qCronMinutes != "" {

			if err := r.SetQueryParam("cron.minutes", qCronMinutes); err != nil {
				return err
			}
		}
	}

	if o.CronMonthsQueryParameter != nil {

		// query param cron.months
		var qrCronMonths int64

		if o.CronMonthsQueryParameter != nil {
			qrCronMonths = *o.CronMonthsQueryParameter
		}
		qCronMonths := swag.FormatInt64(qrCronMonths)
		if qCronMonths != "" {

			if err := r.SetQueryParam("cron.months", qCronMonths); err != nil {
				return err
			}
		}
	}

	if o.CronWeekdaysQueryParameter != nil {

		// query param cron.weekdays
		var qrCronWeekdays int64

		if o.CronWeekdaysQueryParameter != nil {
			qrCronWeekdays = *o.CronWeekdaysQueryParameter
		}
		qCronWeekdays := swag.FormatInt64(qrCronWeekdays)
		if qCronWeekdays != "" {

			if err := r.SetQueryParam("cron.weekdays", qCronWeekdays); err != nil {
				return err
			}
		}
	}

	if o.FieldsQueryParameter != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.IntervalQueryParameter != nil {

		// query param interval
		var qrInterval string

		if o.IntervalQueryParameter != nil {
			qrInterval = *o.IntervalQueryParameter
		}
		qInterval := qrInterval
		if qInterval != "" {

			if err := r.SetQueryParam("interval", qInterval); err != nil {
				return err
			}
		}
	}

	if o.MaxRecordsQueryParameter != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecordsQueryParameter != nil {
			qrMaxRecords = *o.MaxRecordsQueryParameter
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.NameQueryParameter != nil {

		// query param name
		var qrName string

		if o.NameQueryParameter != nil {
			qrName = *o.NameQueryParameter
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.OrderByQueryParameter != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.ReturnRecordsQueryParameter != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecordsQueryParameter != nil {
			qrReturnRecords = *o.ReturnRecordsQueryParameter
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeoutQueryParameter != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeoutQueryParameter != nil {
			qrReturnTimeout = *o.ReturnTimeoutQueryParameter
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.ScopeQueryParameter != nil {

		// query param scope
		var qrScope string

		if o.ScopeQueryParameter != nil {
			qrScope = *o.ScopeQueryParameter
		}
		qScope := qrScope
		if qScope != "" {

			if err := r.SetQueryParam("scope", qScope); err != nil {
				return err
			}
		}
	}

	if o.SVMNameQueryParameter != nil {

		// query param svm.name
		var qrSvmName string

		if o.SVMNameQueryParameter != nil {
			qrSvmName = *o.SVMNameQueryParameter
		}
		qSvmName := qrSvmName
		if qSvmName != "" {

			if err := r.SetQueryParam("svm.name", qSvmName); err != nil {
				return err
			}
		}
	}

	if o.SVMUUIDQueryParameter != nil {

		// query param svm.uuid
		var qrSvmUUID string

		if o.SVMUUIDQueryParameter != nil {
			qrSvmUUID = *o.SVMUUIDQueryParameter
		}
		qSvmUUID := qrSvmUUID
		if qSvmUUID != "" {

			if err := r.SetQueryParam("svm.uuid", qSvmUUID); err != nil {
				return err
			}
		}
	}

	if o.TypeQueryParameter != nil {

		// query param type
		var qrType string

		if o.TypeQueryParameter != nil {
			qrType = *o.TypeQueryParameter
		}
		qType := qrType
		if qType != "" {

			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}
	}

	if o.UUIDQueryParameter != nil {

		// query param uuid
		var qrUUID string

		if o.UUIDQueryParameter != nil {
			qrUUID = *o.UUIDQueryParameter
		}
		qUUID := qrUUID
		if qUUID != "" {

			if err := r.SetQueryParam("uuid", qUUID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamScheduleCollectionGet binds the parameter fields
func (o *ScheduleCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.FieldsQueryParameter

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamScheduleCollectionGet binds the parameter order_by
func (o *ScheduleCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderByQueryParameter

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
