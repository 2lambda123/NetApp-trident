// Code generated by go-swagger; DO NOT EDIT.

package cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/netapp/trident/storage_drivers/ontap/api/rest/models"
)

// LicenseDeleteReader is a Reader for the LicenseDelete structure.
type LicenseDeleteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LicenseDeleteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLicenseDeleteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewLicenseDeleteDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewLicenseDeleteOK creates a LicenseDeleteOK with default headers values
func NewLicenseDeleteOK() *LicenseDeleteOK {
	return &LicenseDeleteOK{}
}

/* LicenseDeleteOK describes a response with status code 200, with default header values.

OK
*/
type LicenseDeleteOK struct {
}

func (o *LicenseDeleteOK) Error() string {
	return fmt.Sprintf("[DELETE /cluster/licensing/licenses/{name}][%d] licenseDeleteOK ", 200)
}

func (o *LicenseDeleteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLicenseDeleteDefault creates a LicenseDeleteDefault with default headers values
func NewLicenseDeleteDefault(code int) *LicenseDeleteDefault {
	return &LicenseDeleteDefault{
		_statusCode: code,
	}
}

/* LicenseDeleteDefault describes a response with status code -1, with default header values.

 ONTAP Error Response Codes
| Error Code | Description |
| ---------- | ----------- |
| 525028 | Error during volume limit check, cannot remove license |
| 525029 | Current volume use will exceed limits if license is removed |
| 1115137 | Cluster license requires a base license to be installed |
| 1115144 | Cloud licenses cannot be deleted |
| 1115178 | A tier license that is still in use cannot be deleted |
| 1115213 | License is still in use and cannot be removed |
| 1115406 | Capacity pool licenses cannot be deleted |
| 66846823 | A FlexCache license that is still in use cannot be deleted |

*/
type LicenseDeleteDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the license delete default response
func (o *LicenseDeleteDefault) Code() int {
	return o._statusCode
}

func (o *LicenseDeleteDefault) Error() string {
	return fmt.Sprintf("[DELETE /cluster/licensing/licenses/{name}][%d] license_delete default  %+v", o._statusCode, o.Payload)
}
func (o *LicenseDeleteDefault) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *LicenseDeleteDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
