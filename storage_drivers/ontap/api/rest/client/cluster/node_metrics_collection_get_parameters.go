// Code generated by go-swagger; DO NOT EDIT.

package cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewNodeMetricsCollectionGetParams creates a new NodeMetricsCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewNodeMetricsCollectionGetParams() *NodeMetricsCollectionGetParams {
	return &NodeMetricsCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewNodeMetricsCollectionGetParamsWithTimeout creates a new NodeMetricsCollectionGetParams object
// with the ability to set a timeout on a request.
func NewNodeMetricsCollectionGetParamsWithTimeout(timeout time.Duration) *NodeMetricsCollectionGetParams {
	return &NodeMetricsCollectionGetParams{
		timeout: timeout,
	}
}

// NewNodeMetricsCollectionGetParamsWithContext creates a new NodeMetricsCollectionGetParams object
// with the ability to set a context for a request.
func NewNodeMetricsCollectionGetParamsWithContext(ctx context.Context) *NodeMetricsCollectionGetParams {
	return &NodeMetricsCollectionGetParams{
		Context: ctx,
	}
}

// NewNodeMetricsCollectionGetParamsWithHTTPClient creates a new NodeMetricsCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewNodeMetricsCollectionGetParamsWithHTTPClient(client *http.Client) *NodeMetricsCollectionGetParams {
	return &NodeMetricsCollectionGetParams{
		HTTPClient: client,
	}
}

/* NodeMetricsCollectionGetParams contains all the parameters to send to the API endpoint
   for the node metrics collection get operation.

   Typically these are written to a http.Request.
*/
type NodeMetricsCollectionGetParams struct {

	/* Duration.

	   Filter by duration
	*/
	DurationQueryParameter *string

	/* Fields.

	   Specify the fields to return.
	*/
	FieldsQueryParameter []string

	/* Interval.

	     The time range for the data. Examples can be 1h, 1d, 1m, 1w, 1y.
	The period for each time range is as follows:
	* 1h: Metrics over the most recent hour sampled over 15 seconds.
	* 1d: Metrics over the most recent day sampled over 5 minutes.
	* 1w: Metrics over the most recent week sampled over 30 minutes.
	* 1m: Metrics over the most recent month sampled over 2 hours.
	* 1y: Metrics over the most recent year sampled over a day.


	     Default: "1h"
	*/
	IntervalQueryParameter *string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecordsQueryParameter *int64

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderByQueryParameter []string

	/* ProcessorUtilization.

	   Filter by processor_utilization
	*/
	ProcessorUtilizationQueryParameter *int64

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecordsQueryParameter *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeoutQueryParameter *int64

	/* Status.

	   Filter by status
	*/
	StatusQueryParameter *string

	/* Timestamp.

	   Filter by timestamp
	*/
	TimestampQueryParameter *string

	/* UUID.

	   Unique identifier of the node.
	*/
	UUIDPathParameter string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the node metrics collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NodeMetricsCollectionGetParams) WithDefaults() *NodeMetricsCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the node metrics collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NodeMetricsCollectionGetParams) SetDefaults() {
	var (
		intervalQueryParameterDefault = string("1h")

		returnRecordsQueryParameterDefault = bool(true)

		returnTimeoutQueryParameterDefault = int64(15)
	)

	val := NodeMetricsCollectionGetParams{
		IntervalQueryParameter:      &intervalQueryParameterDefault,
		ReturnRecordsQueryParameter: &returnRecordsQueryParameterDefault,
		ReturnTimeoutQueryParameter: &returnTimeoutQueryParameterDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the node metrics collection get params
func (o *NodeMetricsCollectionGetParams) WithTimeout(timeout time.Duration) *NodeMetricsCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the node metrics collection get params
func (o *NodeMetricsCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the node metrics collection get params
func (o *NodeMetricsCollectionGetParams) WithContext(ctx context.Context) *NodeMetricsCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the node metrics collection get params
func (o *NodeMetricsCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the node metrics collection get params
func (o *NodeMetricsCollectionGetParams) WithHTTPClient(client *http.Client) *NodeMetricsCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the node metrics collection get params
func (o *NodeMetricsCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDurationQueryParameter adds the duration to the node metrics collection get params
func (o *NodeMetricsCollectionGetParams) WithDurationQueryParameter(duration *string) *NodeMetricsCollectionGetParams {
	o.SetDurationQueryParameter(duration)
	return o
}

// SetDurationQueryParameter adds the duration to the node metrics collection get params
func (o *NodeMetricsCollectionGetParams) SetDurationQueryParameter(duration *string) {
	o.DurationQueryParameter = duration
}

// WithFieldsQueryParameter adds the fields to the node metrics collection get params
func (o *NodeMetricsCollectionGetParams) WithFieldsQueryParameter(fields []string) *NodeMetricsCollectionGetParams {
	o.SetFieldsQueryParameter(fields)
	return o
}

// SetFieldsQueryParameter adds the fields to the node metrics collection get params
func (o *NodeMetricsCollectionGetParams) SetFieldsQueryParameter(fields []string) {
	o.FieldsQueryParameter = fields
}

// WithIntervalQueryParameter adds the interval to the node metrics collection get params
func (o *NodeMetricsCollectionGetParams) WithIntervalQueryParameter(interval *string) *NodeMetricsCollectionGetParams {
	o.SetIntervalQueryParameter(interval)
	return o
}

// SetIntervalQueryParameter adds the interval to the node metrics collection get params
func (o *NodeMetricsCollectionGetParams) SetIntervalQueryParameter(interval *string) {
	o.IntervalQueryParameter = interval
}

// WithMaxRecordsQueryParameter adds the maxRecords to the node metrics collection get params
func (o *NodeMetricsCollectionGetParams) WithMaxRecordsQueryParameter(maxRecords *int64) *NodeMetricsCollectionGetParams {
	o.SetMaxRecordsQueryParameter(maxRecords)
	return o
}

// SetMaxRecordsQueryParameter adds the maxRecords to the node metrics collection get params
func (o *NodeMetricsCollectionGetParams) SetMaxRecordsQueryParameter(maxRecords *int64) {
	o.MaxRecordsQueryParameter = maxRecords
}

// WithOrderByQueryParameter adds the orderBy to the node metrics collection get params
func (o *NodeMetricsCollectionGetParams) WithOrderByQueryParameter(orderBy []string) *NodeMetricsCollectionGetParams {
	o.SetOrderByQueryParameter(orderBy)
	return o
}

// SetOrderByQueryParameter adds the orderBy to the node metrics collection get params
func (o *NodeMetricsCollectionGetParams) SetOrderByQueryParameter(orderBy []string) {
	o.OrderByQueryParameter = orderBy
}

// WithProcessorUtilizationQueryParameter adds the processorUtilization to the node metrics collection get params
func (o *NodeMetricsCollectionGetParams) WithProcessorUtilizationQueryParameter(processorUtilization *int64) *NodeMetricsCollectionGetParams {
	o.SetProcessorUtilizationQueryParameter(processorUtilization)
	return o
}

// SetProcessorUtilizationQueryParameter adds the processorUtilization to the node metrics collection get params
func (o *NodeMetricsCollectionGetParams) SetProcessorUtilizationQueryParameter(processorUtilization *int64) {
	o.ProcessorUtilizationQueryParameter = processorUtilization
}

// WithReturnRecordsQueryParameter adds the returnRecords to the node metrics collection get params
func (o *NodeMetricsCollectionGetParams) WithReturnRecordsQueryParameter(returnRecords *bool) *NodeMetricsCollectionGetParams {
	o.SetReturnRecordsQueryParameter(returnRecords)
	return o
}

// SetReturnRecordsQueryParameter adds the returnRecords to the node metrics collection get params
func (o *NodeMetricsCollectionGetParams) SetReturnRecordsQueryParameter(returnRecords *bool) {
	o.ReturnRecordsQueryParameter = returnRecords
}

// WithReturnTimeoutQueryParameter adds the returnTimeout to the node metrics collection get params
func (o *NodeMetricsCollectionGetParams) WithReturnTimeoutQueryParameter(returnTimeout *int64) *NodeMetricsCollectionGetParams {
	o.SetReturnTimeoutQueryParameter(returnTimeout)
	return o
}

// SetReturnTimeoutQueryParameter adds the returnTimeout to the node metrics collection get params
func (o *NodeMetricsCollectionGetParams) SetReturnTimeoutQueryParameter(returnTimeout *int64) {
	o.ReturnTimeoutQueryParameter = returnTimeout
}

// WithStatusQueryParameter adds the status to the node metrics collection get params
func (o *NodeMetricsCollectionGetParams) WithStatusQueryParameter(status *string) *NodeMetricsCollectionGetParams {
	o.SetStatusQueryParameter(status)
	return o
}

// SetStatusQueryParameter adds the status to the node metrics collection get params
func (o *NodeMetricsCollectionGetParams) SetStatusQueryParameter(status *string) {
	o.StatusQueryParameter = status
}

// WithTimestampQueryParameter adds the timestamp to the node metrics collection get params
func (o *NodeMetricsCollectionGetParams) WithTimestampQueryParameter(timestamp *string) *NodeMetricsCollectionGetParams {
	o.SetTimestampQueryParameter(timestamp)
	return o
}

// SetTimestampQueryParameter adds the timestamp to the node metrics collection get params
func (o *NodeMetricsCollectionGetParams) SetTimestampQueryParameter(timestamp *string) {
	o.TimestampQueryParameter = timestamp
}

// WithUUIDPathParameter adds the uuid to the node metrics collection get params
func (o *NodeMetricsCollectionGetParams) WithUUIDPathParameter(uuid string) *NodeMetricsCollectionGetParams {
	o.SetUUIDPathParameter(uuid)
	return o
}

// SetUUIDPathParameter adds the uuid to the node metrics collection get params
func (o *NodeMetricsCollectionGetParams) SetUUIDPathParameter(uuid string) {
	o.UUIDPathParameter = uuid
}

// WriteToRequest writes these params to a swagger request
func (o *NodeMetricsCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DurationQueryParameter != nil {

		// query param duration
		var qrDuration string

		if o.DurationQueryParameter != nil {
			qrDuration = *o.DurationQueryParameter
		}
		qDuration := qrDuration
		if qDuration != "" {

			if err := r.SetQueryParam("duration", qDuration); err != nil {
				return err
			}
		}
	}

	if o.FieldsQueryParameter != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.IntervalQueryParameter != nil {

		// query param interval
		var qrInterval string

		if o.IntervalQueryParameter != nil {
			qrInterval = *o.IntervalQueryParameter
		}
		qInterval := qrInterval
		if qInterval != "" {

			if err := r.SetQueryParam("interval", qInterval); err != nil {
				return err
			}
		}
	}

	if o.MaxRecordsQueryParameter != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecordsQueryParameter != nil {
			qrMaxRecords = *o.MaxRecordsQueryParameter
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.OrderByQueryParameter != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.ProcessorUtilizationQueryParameter != nil {

		// query param processor_utilization
		var qrProcessorUtilization int64

		if o.ProcessorUtilizationQueryParameter != nil {
			qrProcessorUtilization = *o.ProcessorUtilizationQueryParameter
		}
		qProcessorUtilization := swag.FormatInt64(qrProcessorUtilization)
		if qProcessorUtilization != "" {

			if err := r.SetQueryParam("processor_utilization", qProcessorUtilization); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecordsQueryParameter != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecordsQueryParameter != nil {
			qrReturnRecords = *o.ReturnRecordsQueryParameter
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeoutQueryParameter != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeoutQueryParameter != nil {
			qrReturnTimeout = *o.ReturnTimeoutQueryParameter
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.StatusQueryParameter != nil {

		// query param status
		var qrStatus string

		if o.StatusQueryParameter != nil {
			qrStatus = *o.StatusQueryParameter
		}
		qStatus := qrStatus
		if qStatus != "" {

			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}
	}

	if o.TimestampQueryParameter != nil {

		// query param timestamp
		var qrTimestamp string

		if o.TimestampQueryParameter != nil {
			qrTimestamp = *o.TimestampQueryParameter
		}
		qTimestamp := qrTimestamp
		if qTimestamp != "" {

			if err := r.SetQueryParam("timestamp", qTimestamp); err != nil {
				return err
			}
		}
	}

	// path param uuid
	if err := r.SetPathParam("uuid", o.UUIDPathParameter); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamNodeMetricsCollectionGet binds the parameter fields
func (o *NodeMetricsCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.FieldsQueryParameter

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamNodeMetricsCollectionGet binds the parameter order_by
func (o *NodeMetricsCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderByQueryParameter

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
