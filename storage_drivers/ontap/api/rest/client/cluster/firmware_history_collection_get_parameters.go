// Code generated by go-swagger; DO NOT EDIT.

package cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewFirmwareHistoryCollectionGetParams creates a new FirmwareHistoryCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewFirmwareHistoryCollectionGetParams() *FirmwareHistoryCollectionGetParams {
	return &FirmwareHistoryCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewFirmwareHistoryCollectionGetParamsWithTimeout creates a new FirmwareHistoryCollectionGetParams object
// with the ability to set a timeout on a request.
func NewFirmwareHistoryCollectionGetParamsWithTimeout(timeout time.Duration) *FirmwareHistoryCollectionGetParams {
	return &FirmwareHistoryCollectionGetParams{
		timeout: timeout,
	}
}

// NewFirmwareHistoryCollectionGetParamsWithContext creates a new FirmwareHistoryCollectionGetParams object
// with the ability to set a context for a request.
func NewFirmwareHistoryCollectionGetParamsWithContext(ctx context.Context) *FirmwareHistoryCollectionGetParams {
	return &FirmwareHistoryCollectionGetParams{
		Context: ctx,
	}
}

// NewFirmwareHistoryCollectionGetParamsWithHTTPClient creates a new FirmwareHistoryCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewFirmwareHistoryCollectionGetParamsWithHTTPClient(client *http.Client) *FirmwareHistoryCollectionGetParams {
	return &FirmwareHistoryCollectionGetParams{
		HTTPClient: client,
	}
}

/*
FirmwareHistoryCollectionGetParams contains all the parameters to send to the API endpoint

	for the firmware history collection get operation.

	Typically these are written to a http.Request.
*/
type FirmwareHistoryCollectionGetParams struct {

	/* EndTime.

	   Filter by end_time
	*/
	EndTimeQueryParameter *string

	/* Fields.

	   Specify the fields to return.
	*/
	FieldsQueryParameter []string

	/* FwFileName.

	   Filter by fw_file_name
	*/
	FwFileNameQueryParameter *string

	/* FwUpdateState.

	   Filter by fw_update_state
	*/
	FwUpdateStateQueryParameter *string

	/* JobUUID.

	   Filter by job.uuid
	*/
	JobUUIDQueryParameter *string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecordsQueryParameter *int64

	/* NodeName.

	   Filter by node.name
	*/
	NodeNameQueryParameter *string

	/* NodeUUID.

	   Filter by node.uuid
	*/
	NodeUUIDQueryParameter *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderByQueryParameter []string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecordsQueryParameter *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeoutQueryParameter *int64

	/* StartTime.

	   Filter by start_time
	*/
	StartTimeQueryParameter *string

	/* UpdateStatusWorkerErrorCode.

	   Filter by update_status.worker.error.code
	*/
	UpdateStatusWorkerErrorCodeQueryParameter *int64

	/* UpdateStatusWorkerErrorMessage.

	   Filter by update_status.worker.error.message
	*/
	UpdateStatusWorkerErrorMessageQueryParameter *string

	/* UpdateStatusWorkerNodeName.

	   Filter by update_status.worker.node.name
	*/
	UpdateStatusWorkerNodeNameQueryParameter *string

	/* UpdateStatusWorkerNodeUUID.

	   Filter by update_status.worker.node.uuid
	*/
	UpdateStatusWorkerNodeUUIDQueryParameter *string

	/* UpdateStatusWorkerState.

	   Filter by update_status.worker.state
	*/
	UpdateStatusWorkerStateQueryParameter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the firmware history collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FirmwareHistoryCollectionGetParams) WithDefaults() *FirmwareHistoryCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the firmware history collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FirmwareHistoryCollectionGetParams) SetDefaults() {
	var (
		returnRecordsQueryParameterDefault = bool(true)

		returnTimeoutQueryParameterDefault = int64(15)
	)

	val := FirmwareHistoryCollectionGetParams{
		ReturnRecordsQueryParameter: &returnRecordsQueryParameterDefault,
		ReturnTimeoutQueryParameter: &returnTimeoutQueryParameterDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the firmware history collection get params
func (o *FirmwareHistoryCollectionGetParams) WithTimeout(timeout time.Duration) *FirmwareHistoryCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the firmware history collection get params
func (o *FirmwareHistoryCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the firmware history collection get params
func (o *FirmwareHistoryCollectionGetParams) WithContext(ctx context.Context) *FirmwareHistoryCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the firmware history collection get params
func (o *FirmwareHistoryCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the firmware history collection get params
func (o *FirmwareHistoryCollectionGetParams) WithHTTPClient(client *http.Client) *FirmwareHistoryCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the firmware history collection get params
func (o *FirmwareHistoryCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEndTimeQueryParameter adds the endTime to the firmware history collection get params
func (o *FirmwareHistoryCollectionGetParams) WithEndTimeQueryParameter(endTime *string) *FirmwareHistoryCollectionGetParams {
	o.SetEndTimeQueryParameter(endTime)
	return o
}

// SetEndTimeQueryParameter adds the endTime to the firmware history collection get params
func (o *FirmwareHistoryCollectionGetParams) SetEndTimeQueryParameter(endTime *string) {
	o.EndTimeQueryParameter = endTime
}

// WithFieldsQueryParameter adds the fields to the firmware history collection get params
func (o *FirmwareHistoryCollectionGetParams) WithFieldsQueryParameter(fields []string) *FirmwareHistoryCollectionGetParams {
	o.SetFieldsQueryParameter(fields)
	return o
}

// SetFieldsQueryParameter adds the fields to the firmware history collection get params
func (o *FirmwareHistoryCollectionGetParams) SetFieldsQueryParameter(fields []string) {
	o.FieldsQueryParameter = fields
}

// WithFwFileNameQueryParameter adds the fwFileName to the firmware history collection get params
func (o *FirmwareHistoryCollectionGetParams) WithFwFileNameQueryParameter(fwFileName *string) *FirmwareHistoryCollectionGetParams {
	o.SetFwFileNameQueryParameter(fwFileName)
	return o
}

// SetFwFileNameQueryParameter adds the fwFileName to the firmware history collection get params
func (o *FirmwareHistoryCollectionGetParams) SetFwFileNameQueryParameter(fwFileName *string) {
	o.FwFileNameQueryParameter = fwFileName
}

// WithFwUpdateStateQueryParameter adds the fwUpdateState to the firmware history collection get params
func (o *FirmwareHistoryCollectionGetParams) WithFwUpdateStateQueryParameter(fwUpdateState *string) *FirmwareHistoryCollectionGetParams {
	o.SetFwUpdateStateQueryParameter(fwUpdateState)
	return o
}

// SetFwUpdateStateQueryParameter adds the fwUpdateState to the firmware history collection get params
func (o *FirmwareHistoryCollectionGetParams) SetFwUpdateStateQueryParameter(fwUpdateState *string) {
	o.FwUpdateStateQueryParameter = fwUpdateState
}

// WithJobUUIDQueryParameter adds the jobUUID to the firmware history collection get params
func (o *FirmwareHistoryCollectionGetParams) WithJobUUIDQueryParameter(jobUUID *string) *FirmwareHistoryCollectionGetParams {
	o.SetJobUUIDQueryParameter(jobUUID)
	return o
}

// SetJobUUIDQueryParameter adds the jobUuid to the firmware history collection get params
func (o *FirmwareHistoryCollectionGetParams) SetJobUUIDQueryParameter(jobUUID *string) {
	o.JobUUIDQueryParameter = jobUUID
}

// WithMaxRecordsQueryParameter adds the maxRecords to the firmware history collection get params
func (o *FirmwareHistoryCollectionGetParams) WithMaxRecordsQueryParameter(maxRecords *int64) *FirmwareHistoryCollectionGetParams {
	o.SetMaxRecordsQueryParameter(maxRecords)
	return o
}

// SetMaxRecordsQueryParameter adds the maxRecords to the firmware history collection get params
func (o *FirmwareHistoryCollectionGetParams) SetMaxRecordsQueryParameter(maxRecords *int64) {
	o.MaxRecordsQueryParameter = maxRecords
}

// WithNodeNameQueryParameter adds the nodeName to the firmware history collection get params
func (o *FirmwareHistoryCollectionGetParams) WithNodeNameQueryParameter(nodeName *string) *FirmwareHistoryCollectionGetParams {
	o.SetNodeNameQueryParameter(nodeName)
	return o
}

// SetNodeNameQueryParameter adds the nodeName to the firmware history collection get params
func (o *FirmwareHistoryCollectionGetParams) SetNodeNameQueryParameter(nodeName *string) {
	o.NodeNameQueryParameter = nodeName
}

// WithNodeUUIDQueryParameter adds the nodeUUID to the firmware history collection get params
func (o *FirmwareHistoryCollectionGetParams) WithNodeUUIDQueryParameter(nodeUUID *string) *FirmwareHistoryCollectionGetParams {
	o.SetNodeUUIDQueryParameter(nodeUUID)
	return o
}

// SetNodeUUIDQueryParameter adds the nodeUuid to the firmware history collection get params
func (o *FirmwareHistoryCollectionGetParams) SetNodeUUIDQueryParameter(nodeUUID *string) {
	o.NodeUUIDQueryParameter = nodeUUID
}

// WithOrderByQueryParameter adds the orderBy to the firmware history collection get params
func (o *FirmwareHistoryCollectionGetParams) WithOrderByQueryParameter(orderBy []string) *FirmwareHistoryCollectionGetParams {
	o.SetOrderByQueryParameter(orderBy)
	return o
}

// SetOrderByQueryParameter adds the orderBy to the firmware history collection get params
func (o *FirmwareHistoryCollectionGetParams) SetOrderByQueryParameter(orderBy []string) {
	o.OrderByQueryParameter = orderBy
}

// WithReturnRecordsQueryParameter adds the returnRecords to the firmware history collection get params
func (o *FirmwareHistoryCollectionGetParams) WithReturnRecordsQueryParameter(returnRecords *bool) *FirmwareHistoryCollectionGetParams {
	o.SetReturnRecordsQueryParameter(returnRecords)
	return o
}

// SetReturnRecordsQueryParameter adds the returnRecords to the firmware history collection get params
func (o *FirmwareHistoryCollectionGetParams) SetReturnRecordsQueryParameter(returnRecords *bool) {
	o.ReturnRecordsQueryParameter = returnRecords
}

// WithReturnTimeoutQueryParameter adds the returnTimeout to the firmware history collection get params
func (o *FirmwareHistoryCollectionGetParams) WithReturnTimeoutQueryParameter(returnTimeout *int64) *FirmwareHistoryCollectionGetParams {
	o.SetReturnTimeoutQueryParameter(returnTimeout)
	return o
}

// SetReturnTimeoutQueryParameter adds the returnTimeout to the firmware history collection get params
func (o *FirmwareHistoryCollectionGetParams) SetReturnTimeoutQueryParameter(returnTimeout *int64) {
	o.ReturnTimeoutQueryParameter = returnTimeout
}

// WithStartTimeQueryParameter adds the startTime to the firmware history collection get params
func (o *FirmwareHistoryCollectionGetParams) WithStartTimeQueryParameter(startTime *string) *FirmwareHistoryCollectionGetParams {
	o.SetStartTimeQueryParameter(startTime)
	return o
}

// SetStartTimeQueryParameter adds the startTime to the firmware history collection get params
func (o *FirmwareHistoryCollectionGetParams) SetStartTimeQueryParameter(startTime *string) {
	o.StartTimeQueryParameter = startTime
}

// WithUpdateStatusWorkerErrorCodeQueryParameter adds the updateStatusWorkerErrorCode to the firmware history collection get params
func (o *FirmwareHistoryCollectionGetParams) WithUpdateStatusWorkerErrorCodeQueryParameter(updateStatusWorkerErrorCode *int64) *FirmwareHistoryCollectionGetParams {
	o.SetUpdateStatusWorkerErrorCodeQueryParameter(updateStatusWorkerErrorCode)
	return o
}

// SetUpdateStatusWorkerErrorCodeQueryParameter adds the updateStatusWorkerErrorCode to the firmware history collection get params
func (o *FirmwareHistoryCollectionGetParams) SetUpdateStatusWorkerErrorCodeQueryParameter(updateStatusWorkerErrorCode *int64) {
	o.UpdateStatusWorkerErrorCodeQueryParameter = updateStatusWorkerErrorCode
}

// WithUpdateStatusWorkerErrorMessageQueryParameter adds the updateStatusWorkerErrorMessage to the firmware history collection get params
func (o *FirmwareHistoryCollectionGetParams) WithUpdateStatusWorkerErrorMessageQueryParameter(updateStatusWorkerErrorMessage *string) *FirmwareHistoryCollectionGetParams {
	o.SetUpdateStatusWorkerErrorMessageQueryParameter(updateStatusWorkerErrorMessage)
	return o
}

// SetUpdateStatusWorkerErrorMessageQueryParameter adds the updateStatusWorkerErrorMessage to the firmware history collection get params
func (o *FirmwareHistoryCollectionGetParams) SetUpdateStatusWorkerErrorMessageQueryParameter(updateStatusWorkerErrorMessage *string) {
	o.UpdateStatusWorkerErrorMessageQueryParameter = updateStatusWorkerErrorMessage
}

// WithUpdateStatusWorkerNodeNameQueryParameter adds the updateStatusWorkerNodeName to the firmware history collection get params
func (o *FirmwareHistoryCollectionGetParams) WithUpdateStatusWorkerNodeNameQueryParameter(updateStatusWorkerNodeName *string) *FirmwareHistoryCollectionGetParams {
	o.SetUpdateStatusWorkerNodeNameQueryParameter(updateStatusWorkerNodeName)
	return o
}

// SetUpdateStatusWorkerNodeNameQueryParameter adds the updateStatusWorkerNodeName to the firmware history collection get params
func (o *FirmwareHistoryCollectionGetParams) SetUpdateStatusWorkerNodeNameQueryParameter(updateStatusWorkerNodeName *string) {
	o.UpdateStatusWorkerNodeNameQueryParameter = updateStatusWorkerNodeName
}

// WithUpdateStatusWorkerNodeUUIDQueryParameter adds the updateStatusWorkerNodeUUID to the firmware history collection get params
func (o *FirmwareHistoryCollectionGetParams) WithUpdateStatusWorkerNodeUUIDQueryParameter(updateStatusWorkerNodeUUID *string) *FirmwareHistoryCollectionGetParams {
	o.SetUpdateStatusWorkerNodeUUIDQueryParameter(updateStatusWorkerNodeUUID)
	return o
}

// SetUpdateStatusWorkerNodeUUIDQueryParameter adds the updateStatusWorkerNodeUuid to the firmware history collection get params
func (o *FirmwareHistoryCollectionGetParams) SetUpdateStatusWorkerNodeUUIDQueryParameter(updateStatusWorkerNodeUUID *string) {
	o.UpdateStatusWorkerNodeUUIDQueryParameter = updateStatusWorkerNodeUUID
}

// WithUpdateStatusWorkerStateQueryParameter adds the updateStatusWorkerState to the firmware history collection get params
func (o *FirmwareHistoryCollectionGetParams) WithUpdateStatusWorkerStateQueryParameter(updateStatusWorkerState *string) *FirmwareHistoryCollectionGetParams {
	o.SetUpdateStatusWorkerStateQueryParameter(updateStatusWorkerState)
	return o
}

// SetUpdateStatusWorkerStateQueryParameter adds the updateStatusWorkerState to the firmware history collection get params
func (o *FirmwareHistoryCollectionGetParams) SetUpdateStatusWorkerStateQueryParameter(updateStatusWorkerState *string) {
	o.UpdateStatusWorkerStateQueryParameter = updateStatusWorkerState
}

// WriteToRequest writes these params to a swagger request
func (o *FirmwareHistoryCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EndTimeQueryParameter != nil {

		// query param end_time
		var qrEndTime string

		if o.EndTimeQueryParameter != nil {
			qrEndTime = *o.EndTimeQueryParameter
		}
		qEndTime := qrEndTime
		if qEndTime != "" {

			if err := r.SetQueryParam("end_time", qEndTime); err != nil {
				return err
			}
		}
	}

	if o.FieldsQueryParameter != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.FwFileNameQueryParameter != nil {

		// query param fw_file_name
		var qrFwFileName string

		if o.FwFileNameQueryParameter != nil {
			qrFwFileName = *o.FwFileNameQueryParameter
		}
		qFwFileName := qrFwFileName
		if qFwFileName != "" {

			if err := r.SetQueryParam("fw_file_name", qFwFileName); err != nil {
				return err
			}
		}
	}

	if o.FwUpdateStateQueryParameter != nil {

		// query param fw_update_state
		var qrFwUpdateState string

		if o.FwUpdateStateQueryParameter != nil {
			qrFwUpdateState = *o.FwUpdateStateQueryParameter
		}
		qFwUpdateState := qrFwUpdateState
		if qFwUpdateState != "" {

			if err := r.SetQueryParam("fw_update_state", qFwUpdateState); err != nil {
				return err
			}
		}
	}

	if o.JobUUIDQueryParameter != nil {

		// query param job.uuid
		var qrJobUUID string

		if o.JobUUIDQueryParameter != nil {
			qrJobUUID = *o.JobUUIDQueryParameter
		}
		qJobUUID := qrJobUUID
		if qJobUUID != "" {

			if err := r.SetQueryParam("job.uuid", qJobUUID); err != nil {
				return err
			}
		}
	}

	if o.MaxRecordsQueryParameter != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecordsQueryParameter != nil {
			qrMaxRecords = *o.MaxRecordsQueryParameter
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.NodeNameQueryParameter != nil {

		// query param node.name
		var qrNodeName string

		if o.NodeNameQueryParameter != nil {
			qrNodeName = *o.NodeNameQueryParameter
		}
		qNodeName := qrNodeName
		if qNodeName != "" {

			if err := r.SetQueryParam("node.name", qNodeName); err != nil {
				return err
			}
		}
	}

	if o.NodeUUIDQueryParameter != nil {

		// query param node.uuid
		var qrNodeUUID string

		if o.NodeUUIDQueryParameter != nil {
			qrNodeUUID = *o.NodeUUIDQueryParameter
		}
		qNodeUUID := qrNodeUUID
		if qNodeUUID != "" {

			if err := r.SetQueryParam("node.uuid", qNodeUUID); err != nil {
				return err
			}
		}
	}

	if o.OrderByQueryParameter != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.ReturnRecordsQueryParameter != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecordsQueryParameter != nil {
			qrReturnRecords = *o.ReturnRecordsQueryParameter
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeoutQueryParameter != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeoutQueryParameter != nil {
			qrReturnTimeout = *o.ReturnTimeoutQueryParameter
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.StartTimeQueryParameter != nil {

		// query param start_time
		var qrStartTime string

		if o.StartTimeQueryParameter != nil {
			qrStartTime = *o.StartTimeQueryParameter
		}
		qStartTime := qrStartTime
		if qStartTime != "" {

			if err := r.SetQueryParam("start_time", qStartTime); err != nil {
				return err
			}
		}
	}

	if o.UpdateStatusWorkerErrorCodeQueryParameter != nil {

		// query param update_status.worker.error.code
		var qrUpdateStatusWorkerErrorCode int64

		if o.UpdateStatusWorkerErrorCodeQueryParameter != nil {
			qrUpdateStatusWorkerErrorCode = *o.UpdateStatusWorkerErrorCodeQueryParameter
		}
		qUpdateStatusWorkerErrorCode := swag.FormatInt64(qrUpdateStatusWorkerErrorCode)
		if qUpdateStatusWorkerErrorCode != "" {

			if err := r.SetQueryParam("update_status.worker.error.code", qUpdateStatusWorkerErrorCode); err != nil {
				return err
			}
		}
	}

	if o.UpdateStatusWorkerErrorMessageQueryParameter != nil {

		// query param update_status.worker.error.message
		var qrUpdateStatusWorkerErrorMessage string

		if o.UpdateStatusWorkerErrorMessageQueryParameter != nil {
			qrUpdateStatusWorkerErrorMessage = *o.UpdateStatusWorkerErrorMessageQueryParameter
		}
		qUpdateStatusWorkerErrorMessage := qrUpdateStatusWorkerErrorMessage
		if qUpdateStatusWorkerErrorMessage != "" {

			if err := r.SetQueryParam("update_status.worker.error.message", qUpdateStatusWorkerErrorMessage); err != nil {
				return err
			}
		}
	}

	if o.UpdateStatusWorkerNodeNameQueryParameter != nil {

		// query param update_status.worker.node.name
		var qrUpdateStatusWorkerNodeName string

		if o.UpdateStatusWorkerNodeNameQueryParameter != nil {
			qrUpdateStatusWorkerNodeName = *o.UpdateStatusWorkerNodeNameQueryParameter
		}
		qUpdateStatusWorkerNodeName := qrUpdateStatusWorkerNodeName
		if qUpdateStatusWorkerNodeName != "" {

			if err := r.SetQueryParam("update_status.worker.node.name", qUpdateStatusWorkerNodeName); err != nil {
				return err
			}
		}
	}

	if o.UpdateStatusWorkerNodeUUIDQueryParameter != nil {

		// query param update_status.worker.node.uuid
		var qrUpdateStatusWorkerNodeUUID string

		if o.UpdateStatusWorkerNodeUUIDQueryParameter != nil {
			qrUpdateStatusWorkerNodeUUID = *o.UpdateStatusWorkerNodeUUIDQueryParameter
		}
		qUpdateStatusWorkerNodeUUID := qrUpdateStatusWorkerNodeUUID
		if qUpdateStatusWorkerNodeUUID != "" {

			if err := r.SetQueryParam("update_status.worker.node.uuid", qUpdateStatusWorkerNodeUUID); err != nil {
				return err
			}
		}
	}

	if o.UpdateStatusWorkerStateQueryParameter != nil {

		// query param update_status.worker.state
		var qrUpdateStatusWorkerState string

		if o.UpdateStatusWorkerStateQueryParameter != nil {
			qrUpdateStatusWorkerState = *o.UpdateStatusWorkerStateQueryParameter
		}
		qUpdateStatusWorkerState := qrUpdateStatusWorkerState
		if qUpdateStatusWorkerState != "" {

			if err := r.SetQueryParam("update_status.worker.state", qUpdateStatusWorkerState); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamFirmwareHistoryCollectionGet binds the parameter fields
func (o *FirmwareHistoryCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.FieldsQueryParameter

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamFirmwareHistoryCollectionGet binds the parameter order_by
func (o *FirmwareHistoryCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderByQueryParameter

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
