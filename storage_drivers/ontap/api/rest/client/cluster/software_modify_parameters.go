// Code generated by go-swagger; DO NOT EDIT.

package cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/netapp/trident/storage_drivers/ontap/api/rest/models"
)

// NewSoftwareModifyParams creates a new SoftwareModifyParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSoftwareModifyParams() *SoftwareModifyParams {
	return &SoftwareModifyParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSoftwareModifyParamsWithTimeout creates a new SoftwareModifyParams object
// with the ability to set a timeout on a request.
func NewSoftwareModifyParamsWithTimeout(timeout time.Duration) *SoftwareModifyParams {
	return &SoftwareModifyParams{
		timeout: timeout,
	}
}

// NewSoftwareModifyParamsWithContext creates a new SoftwareModifyParams object
// with the ability to set a context for a request.
func NewSoftwareModifyParamsWithContext(ctx context.Context) *SoftwareModifyParams {
	return &SoftwareModifyParams{
		Context: ctx,
	}
}

// NewSoftwareModifyParamsWithHTTPClient creates a new SoftwareModifyParams object
// with the ability to set a custom HTTPClient for a request.
func NewSoftwareModifyParamsWithHTTPClient(client *http.Client) *SoftwareModifyParams {
	return &SoftwareModifyParams{
		HTTPClient: client,
	}
}

/* SoftwareModifyParams contains all the parameters to send to the API endpoint
   for the software modify operation.

   Typically these are written to a http.Request.
*/
type SoftwareModifyParams struct {

	/* Action.

	     Requests an upgrade to pause, resume, or cancel.
	Note that not all upgrades support these actions. An upgrade can only be resumed if it is in the paused state. When a request to cancel an upgrade is successful, the upgrade state changes to either `success` or `failure`.

	*/
	ActionQueryParameter *string

	/* EstimateOnly.

	     Generates an estimate of the time required for the overall update operation for the specified package.
	No update is performed when this option is used. The default is false.

	*/
	EstimateOnlyQueryParameter *bool

	/* ForceRolling.

	   Forces a rolling upgrade on the cluster. This option is not applicable for a single-node cluster and for a two-node MetroCluster. The default is false.

	*/
	ForceRollingQueryParameter *bool

	// Info.
	Info *models.SoftwareReference

	/* NodesToUpdate.

	   A comma separated list of node names to be updated. The nodes must be a part of a HA Pair. The default is all nodes.

	*/
	NodesToUpdateQueryParameter *string

	/* PauseAfter.

	   The pause after specified tasks option. When ANDU is paused user interaction is required to resume the update. The default is none.

	*/
	PauseAfterQueryParameter *string

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning. When doing a POST, PATCH, or DELETE operation on a single record, the default is 0 seconds.  This means that if an asynchronous operation is started, the server immediately returns HTTP code 202 (Accepted) along with a link to the job.  If a non-zero value is specified for POST, PATCH, or DELETE operations, ONTAP waits that length of time to see if the job completes so it can return something other than 202.
	*/
	ReturnTimeoutQueryParameter *int64

	/* ShowValidationDetails.

	   If the value is set to true, then all validation details will be shown in the output.

	*/
	ShowValidationDetailsQueryParameter *bool

	/* SkipWarnings.

	   Ignore warnings and proceed with the install.
	*/
	SkIPWarningsQueryParameter *bool

	/* StabilizeMinutes.

	   Sets a custom value between 1 to 60 minutes for the upgrade, allowing each node a specified amount of time to stabilize after a reboot.
	*/
	StabilizeMinutesQueryParameter *int64

	/* ValidateOnly.

	   Validate the operation and its parameters, without actually performing the operation.
	*/
	ValidateOnlyQueryParameter *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the software modify params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SoftwareModifyParams) WithDefaults() *SoftwareModifyParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the software modify params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SoftwareModifyParams) SetDefaults() {
	var (
		returnTimeoutQueryParameterDefault = int64(0)
	)

	val := SoftwareModifyParams{
		ReturnTimeoutQueryParameter: &returnTimeoutQueryParameterDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the software modify params
func (o *SoftwareModifyParams) WithTimeout(timeout time.Duration) *SoftwareModifyParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the software modify params
func (o *SoftwareModifyParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the software modify params
func (o *SoftwareModifyParams) WithContext(ctx context.Context) *SoftwareModifyParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the software modify params
func (o *SoftwareModifyParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the software modify params
func (o *SoftwareModifyParams) WithHTTPClient(client *http.Client) *SoftwareModifyParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the software modify params
func (o *SoftwareModifyParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithActionQueryParameter adds the action to the software modify params
func (o *SoftwareModifyParams) WithActionQueryParameter(action *string) *SoftwareModifyParams {
	o.SetActionQueryParameter(action)
	return o
}

// SetActionQueryParameter adds the action to the software modify params
func (o *SoftwareModifyParams) SetActionQueryParameter(action *string) {
	o.ActionQueryParameter = action
}

// WithEstimateOnlyQueryParameter adds the estimateOnly to the software modify params
func (o *SoftwareModifyParams) WithEstimateOnlyQueryParameter(estimateOnly *bool) *SoftwareModifyParams {
	o.SetEstimateOnlyQueryParameter(estimateOnly)
	return o
}

// SetEstimateOnlyQueryParameter adds the estimateOnly to the software modify params
func (o *SoftwareModifyParams) SetEstimateOnlyQueryParameter(estimateOnly *bool) {
	o.EstimateOnlyQueryParameter = estimateOnly
}

// WithForceRollingQueryParameter adds the forceRolling to the software modify params
func (o *SoftwareModifyParams) WithForceRollingQueryParameter(forceRolling *bool) *SoftwareModifyParams {
	o.SetForceRollingQueryParameter(forceRolling)
	return o
}

// SetForceRollingQueryParameter adds the forceRolling to the software modify params
func (o *SoftwareModifyParams) SetForceRollingQueryParameter(forceRolling *bool) {
	o.ForceRollingQueryParameter = forceRolling
}

// WithInfo adds the info to the software modify params
func (o *SoftwareModifyParams) WithInfo(info *models.SoftwareReference) *SoftwareModifyParams {
	o.SetInfo(info)
	return o
}

// SetInfo adds the info to the software modify params
func (o *SoftwareModifyParams) SetInfo(info *models.SoftwareReference) {
	o.Info = info
}

// WithNodesToUpdateQueryParameter adds the nodesToUpdate to the software modify params
func (o *SoftwareModifyParams) WithNodesToUpdateQueryParameter(nodesToUpdate *string) *SoftwareModifyParams {
	o.SetNodesToUpdateQueryParameter(nodesToUpdate)
	return o
}

// SetNodesToUpdateQueryParameter adds the nodesToUpdate to the software modify params
func (o *SoftwareModifyParams) SetNodesToUpdateQueryParameter(nodesToUpdate *string) {
	o.NodesToUpdateQueryParameter = nodesToUpdate
}

// WithPauseAfterQueryParameter adds the pauseAfter to the software modify params
func (o *SoftwareModifyParams) WithPauseAfterQueryParameter(pauseAfter *string) *SoftwareModifyParams {
	o.SetPauseAfterQueryParameter(pauseAfter)
	return o
}

// SetPauseAfterQueryParameter adds the pauseAfter to the software modify params
func (o *SoftwareModifyParams) SetPauseAfterQueryParameter(pauseAfter *string) {
	o.PauseAfterQueryParameter = pauseAfter
}

// WithReturnTimeoutQueryParameter adds the returnTimeout to the software modify params
func (o *SoftwareModifyParams) WithReturnTimeoutQueryParameter(returnTimeout *int64) *SoftwareModifyParams {
	o.SetReturnTimeoutQueryParameter(returnTimeout)
	return o
}

// SetReturnTimeoutQueryParameter adds the returnTimeout to the software modify params
func (o *SoftwareModifyParams) SetReturnTimeoutQueryParameter(returnTimeout *int64) {
	o.ReturnTimeoutQueryParameter = returnTimeout
}

// WithShowValidationDetailsQueryParameter adds the showValidationDetails to the software modify params
func (o *SoftwareModifyParams) WithShowValidationDetailsQueryParameter(showValidationDetails *bool) *SoftwareModifyParams {
	o.SetShowValidationDetailsQueryParameter(showValidationDetails)
	return o
}

// SetShowValidationDetailsQueryParameter adds the showValidationDetails to the software modify params
func (o *SoftwareModifyParams) SetShowValidationDetailsQueryParameter(showValidationDetails *bool) {
	o.ShowValidationDetailsQueryParameter = showValidationDetails
}

// WithSkIPWarningsQueryParameter adds the skipWarnings to the software modify params
func (o *SoftwareModifyParams) WithSkIPWarningsQueryParameter(skipWarnings *bool) *SoftwareModifyParams {
	o.SetSkIPWarningsQueryParameter(skipWarnings)
	return o
}

// SetSkIPWarningsQueryParameter adds the skipWarnings to the software modify params
func (o *SoftwareModifyParams) SetSkIPWarningsQueryParameter(skipWarnings *bool) {
	o.SkIPWarningsQueryParameter = skipWarnings
}

// WithStabilizeMinutesQueryParameter adds the stabilizeMinutes to the software modify params
func (o *SoftwareModifyParams) WithStabilizeMinutesQueryParameter(stabilizeMinutes *int64) *SoftwareModifyParams {
	o.SetStabilizeMinutesQueryParameter(stabilizeMinutes)
	return o
}

// SetStabilizeMinutesQueryParameter adds the stabilizeMinutes to the software modify params
func (o *SoftwareModifyParams) SetStabilizeMinutesQueryParameter(stabilizeMinutes *int64) {
	o.StabilizeMinutesQueryParameter = stabilizeMinutes
}

// WithValidateOnlyQueryParameter adds the validateOnly to the software modify params
func (o *SoftwareModifyParams) WithValidateOnlyQueryParameter(validateOnly *bool) *SoftwareModifyParams {
	o.SetValidateOnlyQueryParameter(validateOnly)
	return o
}

// SetValidateOnlyQueryParameter adds the validateOnly to the software modify params
func (o *SoftwareModifyParams) SetValidateOnlyQueryParameter(validateOnly *bool) {
	o.ValidateOnlyQueryParameter = validateOnly
}

// WriteToRequest writes these params to a swagger request
func (o *SoftwareModifyParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ActionQueryParameter != nil {

		// query param action
		var qrAction string

		if o.ActionQueryParameter != nil {
			qrAction = *o.ActionQueryParameter
		}
		qAction := qrAction
		if qAction != "" {

			if err := r.SetQueryParam("action", qAction); err != nil {
				return err
			}
		}
	}

	if o.EstimateOnlyQueryParameter != nil {

		// query param estimate_only
		var qrEstimateOnly bool

		if o.EstimateOnlyQueryParameter != nil {
			qrEstimateOnly = *o.EstimateOnlyQueryParameter
		}
		qEstimateOnly := swag.FormatBool(qrEstimateOnly)
		if qEstimateOnly != "" {

			if err := r.SetQueryParam("estimate_only", qEstimateOnly); err != nil {
				return err
			}
		}
	}

	if o.ForceRollingQueryParameter != nil {

		// query param force_rolling
		var qrForceRolling bool

		if o.ForceRollingQueryParameter != nil {
			qrForceRolling = *o.ForceRollingQueryParameter
		}
		qForceRolling := swag.FormatBool(qrForceRolling)
		if qForceRolling != "" {

			if err := r.SetQueryParam("force_rolling", qForceRolling); err != nil {
				return err
			}
		}
	}
	if o.Info != nil {
		if err := r.SetBodyParam(o.Info); err != nil {
			return err
		}
	}

	if o.NodesToUpdateQueryParameter != nil {

		// query param nodes_to_update
		var qrNodesToUpdate string

		if o.NodesToUpdateQueryParameter != nil {
			qrNodesToUpdate = *o.NodesToUpdateQueryParameter
		}
		qNodesToUpdate := qrNodesToUpdate
		if qNodesToUpdate != "" {

			if err := r.SetQueryParam("nodes_to_update", qNodesToUpdate); err != nil {
				return err
			}
		}
	}

	if o.PauseAfterQueryParameter != nil {

		// query param pause_after
		var qrPauseAfter string

		if o.PauseAfterQueryParameter != nil {
			qrPauseAfter = *o.PauseAfterQueryParameter
		}
		qPauseAfter := qrPauseAfter
		if qPauseAfter != "" {

			if err := r.SetQueryParam("pause_after", qPauseAfter); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeoutQueryParameter != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeoutQueryParameter != nil {
			qrReturnTimeout = *o.ReturnTimeoutQueryParameter
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.ShowValidationDetailsQueryParameter != nil {

		// query param show_validation_details
		var qrShowValidationDetails bool

		if o.ShowValidationDetailsQueryParameter != nil {
			qrShowValidationDetails = *o.ShowValidationDetailsQueryParameter
		}
		qShowValidationDetails := swag.FormatBool(qrShowValidationDetails)
		if qShowValidationDetails != "" {

			if err := r.SetQueryParam("show_validation_details", qShowValidationDetails); err != nil {
				return err
			}
		}
	}

	if o.SkIPWarningsQueryParameter != nil {

		// query param skip_warnings
		var qrSkipWarnings bool

		if o.SkIPWarningsQueryParameter != nil {
			qrSkipWarnings = *o.SkIPWarningsQueryParameter
		}
		qSkipWarnings := swag.FormatBool(qrSkipWarnings)
		if qSkipWarnings != "" {

			if err := r.SetQueryParam("skip_warnings", qSkipWarnings); err != nil {
				return err
			}
		}
	}

	if o.StabilizeMinutesQueryParameter != nil {

		// query param stabilize_minutes
		var qrStabilizeMinutes int64

		if o.StabilizeMinutesQueryParameter != nil {
			qrStabilizeMinutes = *o.StabilizeMinutesQueryParameter
		}
		qStabilizeMinutes := swag.FormatInt64(qrStabilizeMinutes)
		if qStabilizeMinutes != "" {

			if err := r.SetQueryParam("stabilize_minutes", qStabilizeMinutes); err != nil {
				return err
			}
		}
	}

	if o.ValidateOnlyQueryParameter != nil {

		// query param validate_only
		var qrValidateOnly bool

		if o.ValidateOnlyQueryParameter != nil {
			qrValidateOnly = *o.ValidateOnlyQueryParameter
		}
		qValidateOnly := swag.FormatBool(qrValidateOnly)
		if qValidateOnly != "" {

			if err := r.SetQueryParam("validate_only", qValidateOnly); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
