// Code generated by go-swagger; DO NOT EDIT.

package cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/netapp/trident/storage_drivers/ontap/api/rest/models"
)

// NewSoftwareModifyParams creates a new SoftwareModifyParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSoftwareModifyParams() *SoftwareModifyParams {
	return &SoftwareModifyParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSoftwareModifyParamsWithTimeout creates a new SoftwareModifyParams object
// with the ability to set a timeout on a request.
func NewSoftwareModifyParamsWithTimeout(timeout time.Duration) *SoftwareModifyParams {
	return &SoftwareModifyParams{
		timeout: timeout,
	}
}

// NewSoftwareModifyParamsWithContext creates a new SoftwareModifyParams object
// with the ability to set a context for a request.
func NewSoftwareModifyParamsWithContext(ctx context.Context) *SoftwareModifyParams {
	return &SoftwareModifyParams{
		Context: ctx,
	}
}

// NewSoftwareModifyParamsWithHTTPClient creates a new SoftwareModifyParams object
// with the ability to set a custom HTTPClient for a request.
func NewSoftwareModifyParamsWithHTTPClient(client *http.Client) *SoftwareModifyParams {
	return &SoftwareModifyParams{
		HTTPClient: client,
	}
}

/* SoftwareModifyParams contains all the parameters to send to the API endpoint
   for the software modify operation.

   Typically these are written to a http.Request.
*/
type SoftwareModifyParams struct {

	/* Action.

	     Requests an upgrade to pause, resume, or cancel.
	Note that not all upgrades support these actions. An upgrade can only be resumed if it is in the paused state. When a request to cancel an upgrade is successful, the upgrade state changes to either `success` or `failure`.

	*/
	ActionQueryParameter *string

	// Info.
	Info *models.SoftwareReference

	/* ReturnRecords.

	   The default is false.  If set to true, the records are returned.
	*/
	ReturnRecords *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning. When doing a POST, PATCH, or DELETE operation on a single record, the default is 0 seconds.  This means that if an asynchronous operation is started, the server immediately returns HTTP code 202 (Accepted) along with a link to the job.  If a non-zero value is specified for POST, PATCH, or DELETE operations, ONTAP waits that length of time to see if the job completes so it can return something other than 202.
	*/
	ReturnTimeout *int64

	/* SkipWarnings.

	   Ignore warnings and proceed with the install.
	*/
	SkIPWarningsQueryParameter *bool

	/* ValidateOnly.

	   Validate the operation and its parameters, without actually performing the operation.
	*/
	ValidateOnly *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the software modify params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SoftwareModifyParams) WithDefaults() *SoftwareModifyParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the software modify params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SoftwareModifyParams) SetDefaults() {
	var (
		returnRecordsDefault = bool(false)

		returnTimeoutDefault = int64(0)
	)

	val := SoftwareModifyParams{
		ReturnRecords: &returnRecordsDefault,
		ReturnTimeout: &returnTimeoutDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the software modify params
func (o *SoftwareModifyParams) WithTimeout(timeout time.Duration) *SoftwareModifyParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the software modify params
func (o *SoftwareModifyParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the software modify params
func (o *SoftwareModifyParams) WithContext(ctx context.Context) *SoftwareModifyParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the software modify params
func (o *SoftwareModifyParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the software modify params
func (o *SoftwareModifyParams) WithHTTPClient(client *http.Client) *SoftwareModifyParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the software modify params
func (o *SoftwareModifyParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithActionQueryParameter adds the action to the software modify params
func (o *SoftwareModifyParams) WithActionQueryParameter(action *string) *SoftwareModifyParams {
	o.SetActionQueryParameter(action)
	return o
}

// SetActionQueryParameter adds the action to the software modify params
func (o *SoftwareModifyParams) SetActionQueryParameter(action *string) {
	o.ActionQueryParameter = action
}

// WithInfo adds the info to the software modify params
func (o *SoftwareModifyParams) WithInfo(info *models.SoftwareReference) *SoftwareModifyParams {
	o.SetInfo(info)
	return o
}

// SetInfo adds the info to the software modify params
func (o *SoftwareModifyParams) SetInfo(info *models.SoftwareReference) {
	o.Info = info
}

// WithReturnRecords adds the returnRecords to the software modify params
func (o *SoftwareModifyParams) WithReturnRecords(returnRecords *bool) *SoftwareModifyParams {
	o.SetReturnRecords(returnRecords)
	return o
}

// SetReturnRecords adds the returnRecords to the software modify params
func (o *SoftwareModifyParams) SetReturnRecords(returnRecords *bool) {
	o.ReturnRecords = returnRecords
}

// WithReturnTimeout adds the returnTimeout to the software modify params
func (o *SoftwareModifyParams) WithReturnTimeout(returnTimeout *int64) *SoftwareModifyParams {
	o.SetReturnTimeout(returnTimeout)
	return o
}

// SetReturnTimeout adds the returnTimeout to the software modify params
func (o *SoftwareModifyParams) SetReturnTimeout(returnTimeout *int64) {
	o.ReturnTimeout = returnTimeout
}

// WithSkIPWarningsQueryParameter adds the skipWarnings to the software modify params
func (o *SoftwareModifyParams) WithSkIPWarningsQueryParameter(skipWarnings *bool) *SoftwareModifyParams {
	o.SetSkIPWarningsQueryParameter(skipWarnings)
	return o
}

// SetSkIPWarningsQueryParameter adds the skipWarnings to the software modify params
func (o *SoftwareModifyParams) SetSkIPWarningsQueryParameter(skipWarnings *bool) {
	o.SkIPWarningsQueryParameter = skipWarnings
}

// WithValidateOnly adds the validateOnly to the software modify params
func (o *SoftwareModifyParams) WithValidateOnly(validateOnly *bool) *SoftwareModifyParams {
	o.SetValidateOnly(validateOnly)
	return o
}

// SetValidateOnly adds the validateOnly to the software modify params
func (o *SoftwareModifyParams) SetValidateOnly(validateOnly *bool) {
	o.ValidateOnly = validateOnly
}

// WriteToRequest writes these params to a swagger request
func (o *SoftwareModifyParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ActionQueryParameter != nil {

		// query param action
		var qrAction string

		if o.ActionQueryParameter != nil {
			qrAction = *o.ActionQueryParameter
		}
		qAction := qrAction
		if qAction != "" {

			if err := r.SetQueryParam("action", qAction); err != nil {
				return err
			}
		}
	}
	if o.Info != nil {
		if err := r.SetBodyParam(o.Info); err != nil {
			return err
		}
	}

	if o.ReturnRecords != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecords != nil {
			qrReturnRecords = *o.ReturnRecords
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeout != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeout != nil {
			qrReturnTimeout = *o.ReturnTimeout
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.SkIPWarningsQueryParameter != nil {

		// query param skip_warnings
		var qrSkipWarnings bool

		if o.SkIPWarningsQueryParameter != nil {
			qrSkipWarnings = *o.SkIPWarningsQueryParameter
		}
		qSkipWarnings := swag.FormatBool(qrSkipWarnings)
		if qSkipWarnings != "" {

			if err := r.SetQueryParam("skip_warnings", qSkipWarnings); err != nil {
				return err
			}
		}
	}

	if o.ValidateOnly != nil {

		// query param validate_only
		var qrValidateOnly bool

		if o.ValidateOnly != nil {
			qrValidateOnly = *o.ValidateOnly
		}
		qValidateOnly := swag.FormatBool(qrValidateOnly)
		if qValidateOnly != "" {

			if err := r.SetQueryParam("validate_only", qValidateOnly); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
