// Code generated by go-swagger; DO NOT EDIT.

package cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/netapp/trident/storage_drivers/ontap/api/rest/models"
)

// MetroclusterDrGroupCreateReader is a Reader for the MetroclusterDrGroupCreate structure.
type MetroclusterDrGroupCreateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MetroclusterDrGroupCreateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewMetroclusterDrGroupCreateAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewMetroclusterDrGroupCreateDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewMetroclusterDrGroupCreateAccepted creates a MetroclusterDrGroupCreateAccepted with default headers values
func NewMetroclusterDrGroupCreateAccepted() *MetroclusterDrGroupCreateAccepted {
	return &MetroclusterDrGroupCreateAccepted{}
}

/* MetroclusterDrGroupCreateAccepted describes a response with status code 202, with default header values.

Accepted
*/
type MetroclusterDrGroupCreateAccepted struct {
	Payload *models.JobLinkResponse
}

func (o *MetroclusterDrGroupCreateAccepted) Error() string {
	return fmt.Sprintf("[POST /cluster/metrocluster/dr-groups][%d] metroclusterDrGroupCreateAccepted  %+v", 202, o.Payload)
}
func (o *MetroclusterDrGroupCreateAccepted) GetPayload() *models.JobLinkResponse {
	return o.Payload
}

func (o *MetroclusterDrGroupCreateAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.JobLinkResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMetroclusterDrGroupCreateDefault creates a MetroclusterDrGroupCreateDefault with default headers values
func NewMetroclusterDrGroupCreateDefault(code int) *MetroclusterDrGroupCreateDefault {
	return &MetroclusterDrGroupCreateDefault{
		_statusCode: code,
	}
}

/* MetroclusterDrGroupCreateDefault describes a response with status code -1, with default header values.

 ONTAP Error Response Codes
| Error Code | Description |
| ---------- | ----------- |
| 2425734 | An internal error occurred. Wait a few minutes, and try the operation again. For further assistance, contact technical support. |
| 2432833 | Operation is already running. |
| 2432836 | There are not enough disks in Pool1. Wait a few minutes, and try the operation again. For further assistance, contact technical support. |
| 2432840 | Configuring DR Groups |
| 2432841 | Generating IP addresses |
| 2432844 | Checking remote storage pool |
| 2432845 | Mirroring aggregates |
| 2432846 | Configuring MetroCluster and DR mirroring |
| 2432857 | Adding new MetroCluster DR Group |
| 2432858 | MetroCluster DR Group setup done |

*/
type MetroclusterDrGroupCreateDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the metrocluster dr group create default response
func (o *MetroclusterDrGroupCreateDefault) Code() int {
	return o._statusCode
}

func (o *MetroclusterDrGroupCreateDefault) Error() string {
	return fmt.Sprintf("[POST /cluster/metrocluster/dr-groups][%d] metrocluster_dr_group_create default  %+v", o._statusCode, o.Payload)
}
func (o *MetroclusterDrGroupCreateDefault) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *MetroclusterDrGroupCreateDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
