// Code generated by go-swagger; DO NOT EDIT.

package cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/netapp/trident/storage_drivers/ontap/api/rest/models"
)

// LicenseManagerGetReader is a Reader for the LicenseManagerGet structure.
type LicenseManagerGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LicenseManagerGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLicenseManagerGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewLicenseManagerGetDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewLicenseManagerGetOK creates a LicenseManagerGetOK with default headers values
func NewLicenseManagerGetOK() *LicenseManagerGetOK {
	return &LicenseManagerGetOK{}
}

/* LicenseManagerGetOK describes a response with status code 200, with default header values.

OK
*/
type LicenseManagerGetOK struct {
	Payload *models.LicenseManager
}

func (o *LicenseManagerGetOK) Error() string {
	return fmt.Sprintf("[GET /cluster/licensing/license-managers/{uuid}][%d] licenseManagerGetOK  %+v", 200, o.Payload)
}
func (o *LicenseManagerGetOK) GetPayload() *models.LicenseManager {
	return o.Payload
}

func (o *LicenseManagerGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LicenseManager)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLicenseManagerGetDefault creates a LicenseManagerGetDefault with default headers values
func NewLicenseManagerGetDefault(code int) *LicenseManagerGetDefault {
	return &LicenseManagerGetDefault{
		_statusCode: code,
	}
}

/* LicenseManagerGetDefault describes a response with status code -1, with default header values.

Error
*/
type LicenseManagerGetDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the license manager get default response
func (o *LicenseManagerGetDefault) Code() int {
	return o._statusCode
}

func (o *LicenseManagerGetDefault) Error() string {
	return fmt.Sprintf("[GET /cluster/licensing/license-managers/{uuid}][%d] license_manager_get default  %+v", o._statusCode, o.Payload)
}
func (o *LicenseManagerGetDefault) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *LicenseManagerGetDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
