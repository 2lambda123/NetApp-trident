// Code generated by go-swagger; DO NOT EDIT.

package cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewLicenseManagerGetParams creates a new LicenseManagerGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewLicenseManagerGetParams() *LicenseManagerGetParams {
	return &LicenseManagerGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewLicenseManagerGetParamsWithTimeout creates a new LicenseManagerGetParams object
// with the ability to set a timeout on a request.
func NewLicenseManagerGetParamsWithTimeout(timeout time.Duration) *LicenseManagerGetParams {
	return &LicenseManagerGetParams{
		timeout: timeout,
	}
}

// NewLicenseManagerGetParamsWithContext creates a new LicenseManagerGetParams object
// with the ability to set a context for a request.
func NewLicenseManagerGetParamsWithContext(ctx context.Context) *LicenseManagerGetParams {
	return &LicenseManagerGetParams{
		Context: ctx,
	}
}

// NewLicenseManagerGetParamsWithHTTPClient creates a new LicenseManagerGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewLicenseManagerGetParamsWithHTTPClient(client *http.Client) *LicenseManagerGetParams {
	return &LicenseManagerGetParams{
		HTTPClient: client,
	}
}

/* LicenseManagerGetParams contains all the parameters to send to the API endpoint
   for the license manager get operation.

   Typically these are written to a http.Request.
*/
type LicenseManagerGetParams struct {

	/* Default.

	   Filter by default
	*/
	DefaultQueryParameter *bool

	/* Fields.

	   Specify the fields to return.
	*/
	FieldsQueryParameter []string

	/* URIHost.

	   Filter by uri.host
	*/
	URIHostQueryParameter *string

	// UUID.
	UUIDPathParameter string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the license manager get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *LicenseManagerGetParams) WithDefaults() *LicenseManagerGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the license manager get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *LicenseManagerGetParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the license manager get params
func (o *LicenseManagerGetParams) WithTimeout(timeout time.Duration) *LicenseManagerGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the license manager get params
func (o *LicenseManagerGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the license manager get params
func (o *LicenseManagerGetParams) WithContext(ctx context.Context) *LicenseManagerGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the license manager get params
func (o *LicenseManagerGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the license manager get params
func (o *LicenseManagerGetParams) WithHTTPClient(client *http.Client) *LicenseManagerGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the license manager get params
func (o *LicenseManagerGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDefaultQueryParameter adds the defaultVar to the license manager get params
func (o *LicenseManagerGetParams) WithDefaultQueryParameter(defaultVar *bool) *LicenseManagerGetParams {
	o.SetDefaultQueryParameter(defaultVar)
	return o
}

// SetDefaultQueryParameter adds the default to the license manager get params
func (o *LicenseManagerGetParams) SetDefaultQueryParameter(defaultVar *bool) {
	o.DefaultQueryParameter = defaultVar
}

// WithFieldsQueryParameter adds the fields to the license manager get params
func (o *LicenseManagerGetParams) WithFieldsQueryParameter(fields []string) *LicenseManagerGetParams {
	o.SetFieldsQueryParameter(fields)
	return o
}

// SetFieldsQueryParameter adds the fields to the license manager get params
func (o *LicenseManagerGetParams) SetFieldsQueryParameter(fields []string) {
	o.FieldsQueryParameter = fields
}

// WithURIHostQueryParameter adds the uRIHost to the license manager get params
func (o *LicenseManagerGetParams) WithURIHostQueryParameter(uRIHost *string) *LicenseManagerGetParams {
	o.SetURIHostQueryParameter(uRIHost)
	return o
}

// SetURIHostQueryParameter adds the uriHost to the license manager get params
func (o *LicenseManagerGetParams) SetURIHostQueryParameter(uRIHost *string) {
	o.URIHostQueryParameter = uRIHost
}

// WithUUIDPathParameter adds the uuid to the license manager get params
func (o *LicenseManagerGetParams) WithUUIDPathParameter(uuid string) *LicenseManagerGetParams {
	o.SetUUIDPathParameter(uuid)
	return o
}

// SetUUIDPathParameter adds the uuid to the license manager get params
func (o *LicenseManagerGetParams) SetUUIDPathParameter(uuid string) {
	o.UUIDPathParameter = uuid
}

// WriteToRequest writes these params to a swagger request
func (o *LicenseManagerGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DefaultQueryParameter != nil {

		// query param default
		var qrDefault bool

		if o.DefaultQueryParameter != nil {
			qrDefault = *o.DefaultQueryParameter
		}
		qDefault := swag.FormatBool(qrDefault)
		if qDefault != "" {

			if err := r.SetQueryParam("default", qDefault); err != nil {
				return err
			}
		}
	}

	if o.FieldsQueryParameter != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.URIHostQueryParameter != nil {

		// query param uri.host
		var qrURIHost string

		if o.URIHostQueryParameter != nil {
			qrURIHost = *o.URIHostQueryParameter
		}
		qURIHost := qrURIHost
		if qURIHost != "" {

			if err := r.SetQueryParam("uri.host", qURIHost); err != nil {
				return err
			}
		}
	}

	// path param uuid
	if err := r.SetPathParam("uuid", o.UUIDPathParameter); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamLicenseManagerGet binds the parameter fields
func (o *LicenseManagerGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.FieldsQueryParameter

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}
