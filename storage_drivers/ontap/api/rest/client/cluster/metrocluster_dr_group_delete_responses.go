// Code generated by go-swagger; DO NOT EDIT.

package cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/netapp/trident/storage_drivers/ontap/api/rest/models"
)

// MetroclusterDrGroupDeleteReader is a Reader for the MetroclusterDrGroupDelete structure.
type MetroclusterDrGroupDeleteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MetroclusterDrGroupDeleteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewMetroclusterDrGroupDeleteAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewMetroclusterDrGroupDeleteDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewMetroclusterDrGroupDeleteAccepted creates a MetroclusterDrGroupDeleteAccepted with default headers values
func NewMetroclusterDrGroupDeleteAccepted() *MetroclusterDrGroupDeleteAccepted {
	return &MetroclusterDrGroupDeleteAccepted{}
}

/* MetroclusterDrGroupDeleteAccepted describes a response with status code 202, with default header values.

Accepted
*/
type MetroclusterDrGroupDeleteAccepted struct {
	Payload *models.JobLinkResponse
}

func (o *MetroclusterDrGroupDeleteAccepted) Error() string {
	return fmt.Sprintf("[DELETE /cluster/metrocluster/dr-groups/{id}][%d] metroclusterDrGroupDeleteAccepted  %+v", 202, o.Payload)
}
func (o *MetroclusterDrGroupDeleteAccepted) GetPayload() *models.JobLinkResponse {
	return o.Payload
}

func (o *MetroclusterDrGroupDeleteAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.JobLinkResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMetroclusterDrGroupDeleteDefault creates a MetroclusterDrGroupDeleteDefault with default headers values
func NewMetroclusterDrGroupDeleteDefault(code int) *MetroclusterDrGroupDeleteDefault {
	return &MetroclusterDrGroupDeleteDefault{
		_statusCode: code,
	}
}

/* MetroclusterDrGroupDeleteDefault describes a response with status code -1, with default header values.

 ONTAP Error Response Codes
| Error Code | Description |
| ---------- | ----------- |
| 2425734 | An internal error occurred. Wait a few minutes, and try the operation again. For further assistance, contact technical support. |
| 2432833 | Operation is already running. |
| 2432859 | Unconfigurint MetroCluster DR Group |
| 2432860 | Unmirroring Aggregates |
| 2432861 | Unassigning Remote Disks |
| 2432862 | Disabling Cluster HA and Storage Failover HA |
| 2432863 | Disconnecting and deleting network connections |
| 2432864 | Unconfiguring and deleting the DR Group |
| 2432865 | Deleting MetroCluster DR Group |
| 2432866 | MetroCluster DR Group delete done |

*/
type MetroclusterDrGroupDeleteDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the metrocluster dr group delete default response
func (o *MetroclusterDrGroupDeleteDefault) Code() int {
	return o._statusCode
}

func (o *MetroclusterDrGroupDeleteDefault) Error() string {
	return fmt.Sprintf("[DELETE /cluster/metrocluster/dr-groups/{id}][%d] metrocluster_dr_group_delete default  %+v", o._statusCode, o.Payload)
}
func (o *MetroclusterDrGroupDeleteDefault) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *MetroclusterDrGroupDeleteDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
