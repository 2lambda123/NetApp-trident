// Code generated by go-swagger; DO NOT EDIT.

package cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewChassisCollectionGetParams creates a new ChassisCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewChassisCollectionGetParams() *ChassisCollectionGetParams {
	return &ChassisCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewChassisCollectionGetParamsWithTimeout creates a new ChassisCollectionGetParams object
// with the ability to set a timeout on a request.
func NewChassisCollectionGetParamsWithTimeout(timeout time.Duration) *ChassisCollectionGetParams {
	return &ChassisCollectionGetParams{
		timeout: timeout,
	}
}

// NewChassisCollectionGetParamsWithContext creates a new ChassisCollectionGetParams object
// with the ability to set a context for a request.
func NewChassisCollectionGetParamsWithContext(ctx context.Context) *ChassisCollectionGetParams {
	return &ChassisCollectionGetParams{
		Context: ctx,
	}
}

// NewChassisCollectionGetParamsWithHTTPClient creates a new ChassisCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewChassisCollectionGetParamsWithHTTPClient(client *http.Client) *ChassisCollectionGetParams {
	return &ChassisCollectionGetParams{
		HTTPClient: client,
	}
}

/* ChassisCollectionGetParams contains all the parameters to send to the API endpoint
   for the chassis collection get operation.

   Typically these are written to a http.Request.
*/
type ChassisCollectionGetParams struct {

	/* Fields.

	   Specify the fields to return.
	*/
	Fields []string

	/* FrusID.

	   Filter by frus.id
	*/
	FrusIDQueryParameter *string

	/* FrusState.

	   Filter by frus.state
	*/
	FrusStateQueryParameter *string

	/* FrusType.

	   Filter by frus.type
	*/
	FrusTypeQueryParameter *string

	/* ID.

	   Filter by id
	*/
	IDQueryParameter *string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecords *int64

	/* NodesName.

	   Filter by nodes.name
	*/
	NodesNameQueryParameter *string

	/* NodesUUID.

	   Filter by nodes.uuid
	*/
	NodesUUIDQueryParameter *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderBy []string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecords *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeout *int64

	/* ShelvesUID.

	   Filter by shelves.uid
	*/
	ShelvesUIDQueryParameter *string

	/* State.

	   Filter by state
	*/
	StateQueryParameter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the chassis collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ChassisCollectionGetParams) WithDefaults() *ChassisCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the chassis collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ChassisCollectionGetParams) SetDefaults() {
	var (
		returnRecordsDefault = bool(true)

		returnTimeoutDefault = int64(15)
	)

	val := ChassisCollectionGetParams{
		ReturnRecords: &returnRecordsDefault,
		ReturnTimeout: &returnTimeoutDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the chassis collection get params
func (o *ChassisCollectionGetParams) WithTimeout(timeout time.Duration) *ChassisCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the chassis collection get params
func (o *ChassisCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the chassis collection get params
func (o *ChassisCollectionGetParams) WithContext(ctx context.Context) *ChassisCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the chassis collection get params
func (o *ChassisCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the chassis collection get params
func (o *ChassisCollectionGetParams) WithHTTPClient(client *http.Client) *ChassisCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the chassis collection get params
func (o *ChassisCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFields adds the fields to the chassis collection get params
func (o *ChassisCollectionGetParams) WithFields(fields []string) *ChassisCollectionGetParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the chassis collection get params
func (o *ChassisCollectionGetParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithFrusIDQueryParameter adds the frusID to the chassis collection get params
func (o *ChassisCollectionGetParams) WithFrusIDQueryParameter(frusID *string) *ChassisCollectionGetParams {
	o.SetFrusIDQueryParameter(frusID)
	return o
}

// SetFrusIDQueryParameter adds the frusId to the chassis collection get params
func (o *ChassisCollectionGetParams) SetFrusIDQueryParameter(frusID *string) {
	o.FrusIDQueryParameter = frusID
}

// WithFrusStateQueryParameter adds the frusState to the chassis collection get params
func (o *ChassisCollectionGetParams) WithFrusStateQueryParameter(frusState *string) *ChassisCollectionGetParams {
	o.SetFrusStateQueryParameter(frusState)
	return o
}

// SetFrusStateQueryParameter adds the frusState to the chassis collection get params
func (o *ChassisCollectionGetParams) SetFrusStateQueryParameter(frusState *string) {
	o.FrusStateQueryParameter = frusState
}

// WithFrusTypeQueryParameter adds the frusType to the chassis collection get params
func (o *ChassisCollectionGetParams) WithFrusTypeQueryParameter(frusType *string) *ChassisCollectionGetParams {
	o.SetFrusTypeQueryParameter(frusType)
	return o
}

// SetFrusTypeQueryParameter adds the frusType to the chassis collection get params
func (o *ChassisCollectionGetParams) SetFrusTypeQueryParameter(frusType *string) {
	o.FrusTypeQueryParameter = frusType
}

// WithIDQueryParameter adds the id to the chassis collection get params
func (o *ChassisCollectionGetParams) WithIDQueryParameter(id *string) *ChassisCollectionGetParams {
	o.SetIDQueryParameter(id)
	return o
}

// SetIDQueryParameter adds the id to the chassis collection get params
func (o *ChassisCollectionGetParams) SetIDQueryParameter(id *string) {
	o.IDQueryParameter = id
}

// WithMaxRecords adds the maxRecords to the chassis collection get params
func (o *ChassisCollectionGetParams) WithMaxRecords(maxRecords *int64) *ChassisCollectionGetParams {
	o.SetMaxRecords(maxRecords)
	return o
}

// SetMaxRecords adds the maxRecords to the chassis collection get params
func (o *ChassisCollectionGetParams) SetMaxRecords(maxRecords *int64) {
	o.MaxRecords = maxRecords
}

// WithNodesNameQueryParameter adds the nodesName to the chassis collection get params
func (o *ChassisCollectionGetParams) WithNodesNameQueryParameter(nodesName *string) *ChassisCollectionGetParams {
	o.SetNodesNameQueryParameter(nodesName)
	return o
}

// SetNodesNameQueryParameter adds the nodesName to the chassis collection get params
func (o *ChassisCollectionGetParams) SetNodesNameQueryParameter(nodesName *string) {
	o.NodesNameQueryParameter = nodesName
}

// WithNodesUUIDQueryParameter adds the nodesUUID to the chassis collection get params
func (o *ChassisCollectionGetParams) WithNodesUUIDQueryParameter(nodesUUID *string) *ChassisCollectionGetParams {
	o.SetNodesUUIDQueryParameter(nodesUUID)
	return o
}

// SetNodesUUIDQueryParameter adds the nodesUuid to the chassis collection get params
func (o *ChassisCollectionGetParams) SetNodesUUIDQueryParameter(nodesUUID *string) {
	o.NodesUUIDQueryParameter = nodesUUID
}

// WithOrderBy adds the orderBy to the chassis collection get params
func (o *ChassisCollectionGetParams) WithOrderBy(orderBy []string) *ChassisCollectionGetParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the chassis collection get params
func (o *ChassisCollectionGetParams) SetOrderBy(orderBy []string) {
	o.OrderBy = orderBy
}

// WithReturnRecords adds the returnRecords to the chassis collection get params
func (o *ChassisCollectionGetParams) WithReturnRecords(returnRecords *bool) *ChassisCollectionGetParams {
	o.SetReturnRecords(returnRecords)
	return o
}

// SetReturnRecords adds the returnRecords to the chassis collection get params
func (o *ChassisCollectionGetParams) SetReturnRecords(returnRecords *bool) {
	o.ReturnRecords = returnRecords
}

// WithReturnTimeout adds the returnTimeout to the chassis collection get params
func (o *ChassisCollectionGetParams) WithReturnTimeout(returnTimeout *int64) *ChassisCollectionGetParams {
	o.SetReturnTimeout(returnTimeout)
	return o
}

// SetReturnTimeout adds the returnTimeout to the chassis collection get params
func (o *ChassisCollectionGetParams) SetReturnTimeout(returnTimeout *int64) {
	o.ReturnTimeout = returnTimeout
}

// WithShelvesUIDQueryParameter adds the shelvesUID to the chassis collection get params
func (o *ChassisCollectionGetParams) WithShelvesUIDQueryParameter(shelvesUID *string) *ChassisCollectionGetParams {
	o.SetShelvesUIDQueryParameter(shelvesUID)
	return o
}

// SetShelvesUIDQueryParameter adds the shelvesUid to the chassis collection get params
func (o *ChassisCollectionGetParams) SetShelvesUIDQueryParameter(shelvesUID *string) {
	o.ShelvesUIDQueryParameter = shelvesUID
}

// WithStateQueryParameter adds the state to the chassis collection get params
func (o *ChassisCollectionGetParams) WithStateQueryParameter(state *string) *ChassisCollectionGetParams {
	o.SetStateQueryParameter(state)
	return o
}

// SetStateQueryParameter adds the state to the chassis collection get params
func (o *ChassisCollectionGetParams) SetStateQueryParameter(state *string) {
	o.StateQueryParameter = state
}

// WriteToRequest writes these params to a swagger request
func (o *ChassisCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.FrusIDQueryParameter != nil {

		// query param frus.id
		var qrFrusID string

		if o.FrusIDQueryParameter != nil {
			qrFrusID = *o.FrusIDQueryParameter
		}
		qFrusID := qrFrusID
		if qFrusID != "" {

			if err := r.SetQueryParam("frus.id", qFrusID); err != nil {
				return err
			}
		}
	}

	if o.FrusStateQueryParameter != nil {

		// query param frus.state
		var qrFrusState string

		if o.FrusStateQueryParameter != nil {
			qrFrusState = *o.FrusStateQueryParameter
		}
		qFrusState := qrFrusState
		if qFrusState != "" {

			if err := r.SetQueryParam("frus.state", qFrusState); err != nil {
				return err
			}
		}
	}

	if o.FrusTypeQueryParameter != nil {

		// query param frus.type
		var qrFrusType string

		if o.FrusTypeQueryParameter != nil {
			qrFrusType = *o.FrusTypeQueryParameter
		}
		qFrusType := qrFrusType
		if qFrusType != "" {

			if err := r.SetQueryParam("frus.type", qFrusType); err != nil {
				return err
			}
		}
	}

	if o.IDQueryParameter != nil {

		// query param id
		var qrID string

		if o.IDQueryParameter != nil {
			qrID = *o.IDQueryParameter
		}
		qID := qrID
		if qID != "" {

			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}
	}

	if o.MaxRecords != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecords != nil {
			qrMaxRecords = *o.MaxRecords
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.NodesNameQueryParameter != nil {

		// query param nodes.name
		var qrNodesName string

		if o.NodesNameQueryParameter != nil {
			qrNodesName = *o.NodesNameQueryParameter
		}
		qNodesName := qrNodesName
		if qNodesName != "" {

			if err := r.SetQueryParam("nodes.name", qNodesName); err != nil {
				return err
			}
		}
	}

	if o.NodesUUIDQueryParameter != nil {

		// query param nodes.uuid
		var qrNodesUUID string

		if o.NodesUUIDQueryParameter != nil {
			qrNodesUUID = *o.NodesUUIDQueryParameter
		}
		qNodesUUID := qrNodesUUID
		if qNodesUUID != "" {

			if err := r.SetQueryParam("nodes.uuid", qNodesUUID); err != nil {
				return err
			}
		}
	}

	if o.OrderBy != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.ReturnRecords != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecords != nil {
			qrReturnRecords = *o.ReturnRecords
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeout != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeout != nil {
			qrReturnTimeout = *o.ReturnTimeout
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.ShelvesUIDQueryParameter != nil {

		// query param shelves.uid
		var qrShelvesUID string

		if o.ShelvesUIDQueryParameter != nil {
			qrShelvesUID = *o.ShelvesUIDQueryParameter
		}
		qShelvesUID := qrShelvesUID
		if qShelvesUID != "" {

			if err := r.SetQueryParam("shelves.uid", qShelvesUID); err != nil {
				return err
			}
		}
	}

	if o.StateQueryParameter != nil {

		// query param state
		var qrState string

		if o.StateQueryParameter != nil {
			qrState = *o.StateQueryParameter
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamChassisCollectionGet binds the parameter fields
func (o *ChassisCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamChassisCollectionGet binds the parameter order_by
func (o *ChassisCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderBy

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
