// Code generated by go-swagger; DO NOT EDIT.

package n_v_me

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewNvmeNamespaceCollectionGetParams creates a new NvmeNamespaceCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewNvmeNamespaceCollectionGetParams() *NvmeNamespaceCollectionGetParams {
	return &NvmeNamespaceCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewNvmeNamespaceCollectionGetParamsWithTimeout creates a new NvmeNamespaceCollectionGetParams object
// with the ability to set a timeout on a request.
func NewNvmeNamespaceCollectionGetParamsWithTimeout(timeout time.Duration) *NvmeNamespaceCollectionGetParams {
	return &NvmeNamespaceCollectionGetParams{
		timeout: timeout,
	}
}

// NewNvmeNamespaceCollectionGetParamsWithContext creates a new NvmeNamespaceCollectionGetParams object
// with the ability to set a context for a request.
func NewNvmeNamespaceCollectionGetParamsWithContext(ctx context.Context) *NvmeNamespaceCollectionGetParams {
	return &NvmeNamespaceCollectionGetParams{
		Context: ctx,
	}
}

// NewNvmeNamespaceCollectionGetParamsWithHTTPClient creates a new NvmeNamespaceCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewNvmeNamespaceCollectionGetParamsWithHTTPClient(client *http.Client) *NvmeNamespaceCollectionGetParams {
	return &NvmeNamespaceCollectionGetParams{
		HTTPClient: client,
	}
}

/* NvmeNamespaceCollectionGetParams contains all the parameters to send to the API endpoint
   for the nvme namespace collection get operation.

   Typically these are written to a http.Request.
*/
type NvmeNamespaceCollectionGetParams struct {

	/* AutoDelete.

	   Filter by auto_delete
	*/
	AutoDeleteQueryParameter *bool

	/* Comment.

	   Filter by comment
	*/
	CommentQueryParameter *string

	/* CreateTime.

	   Filter by create_time
	*/
	CreateTimeQueryParameter *string

	/* Enabled.

	   Filter by enabled
	*/
	EnabledQueryParameter *bool

	/* Fields.

	   Specify the fields to return.
	*/
	Fields []string

	/* LocationNamespace.

	   Filter by location.namespace
	*/
	LocationNamespaceQueryParameter *string

	/* LocationQtreeID.

	   Filter by location.qtree.id
	*/
	LocationQtreeIDQueryParameter *int64

	/* LocationQtreeName.

	   Filter by location.qtree.name
	*/
	LocationQtreeNameQueryParameter *string

	/* LocationVolumeName.

	   Filter by location.volume.name
	*/
	LocationVolumeNameQueryParameter *string

	/* LocationVolumeUUID.

	   Filter by location.volume.uuid
	*/
	LocationVolumeUUIDQueryParameter *string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecords *int64

	/* Name.

	   Filter by name
	*/
	NameQueryParameter *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderBy []string

	/* OsType.

	   Filter by os_type
	*/
	OsTypeQueryParameter *string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecords *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeout *int64

	/* SpaceBlockSize.

	   Filter by space.block_size
	*/
	SpaceBlockSizeQueryParameter *int64

	/* SpaceGuaranteeRequested.

	   Filter by space.guarantee.requested
	*/
	SpaceGuaranteeRequestedQueryParameter *bool

	/* SpaceGuaranteeReserved.

	   Filter by space.guarantee.reserved
	*/
	SpaceGuaranteeReservedQueryParameter *bool

	/* SpaceSize.

	   Filter by space.size
	*/
	SpaceSizeQueryParameter *int64

	/* SpaceUsed.

	   Filter by space.used
	*/
	SpaceUsedQueryParameter *int64

	/* StatusContainerState.

	   Filter by status.container_state
	*/
	StatusContainerStateQueryParameter *string

	/* StatusMapped.

	   Filter by status.mapped
	*/
	StatusMappedQueryParameter *bool

	/* StatusReadOnly.

	   Filter by status.read_only
	*/
	StatusReadOnlyQueryParameter *bool

	/* StatusState.

	   Filter by status.state
	*/
	StatusStateQueryParameter *string

	/* SubsystemMapAnagrpid.

	   Filter by subsystem_map.anagrpid
	*/
	SubsystemMapAnagrpIDQueryParameter *string

	/* SubsystemMapNsid.

	   Filter by subsystem_map.nsid
	*/
	SubsystemMapNsIDQueryParameter *string

	/* SubsystemMapSubsystemName.

	   Filter by subsystem_map.subsystem.name
	*/
	SubsystemMapSubsystemNameQueryParameter *string

	/* SubsystemMapSubsystemUUID.

	   Filter by subsystem_map.subsystem.uuid
	*/
	SubsystemMapSubsystemUUIDQueryParameter *string

	/* SvmName.

	   Filter by svm.name
	*/
	SVMNameQueryParameter *string

	/* SvmUUID.

	   Filter by svm.uuid
	*/
	SVMUUIDQueryParameter *string

	/* UUID.

	   Filter by uuid
	*/
	UUIDQueryParameter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the nvme namespace collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NvmeNamespaceCollectionGetParams) WithDefaults() *NvmeNamespaceCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the nvme namespace collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NvmeNamespaceCollectionGetParams) SetDefaults() {
	var (
		returnRecordsDefault = bool(true)

		returnTimeoutDefault = int64(15)
	)

	val := NvmeNamespaceCollectionGetParams{
		ReturnRecords: &returnRecordsDefault,
		ReturnTimeout: &returnTimeoutDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithTimeout(timeout time.Duration) *NvmeNamespaceCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithContext(ctx context.Context) *NvmeNamespaceCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithHTTPClient(client *http.Client) *NvmeNamespaceCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAutoDeleteQueryParameter adds the autoDelete to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithAutoDeleteQueryParameter(autoDelete *bool) *NvmeNamespaceCollectionGetParams {
	o.SetAutoDeleteQueryParameter(autoDelete)
	return o
}

// SetAutoDeleteQueryParameter adds the autoDelete to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetAutoDeleteQueryParameter(autoDelete *bool) {
	o.AutoDeleteQueryParameter = autoDelete
}

// WithCommentQueryParameter adds the comment to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithCommentQueryParameter(comment *string) *NvmeNamespaceCollectionGetParams {
	o.SetCommentQueryParameter(comment)
	return o
}

// SetCommentQueryParameter adds the comment to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetCommentQueryParameter(comment *string) {
	o.CommentQueryParameter = comment
}

// WithCreateTimeQueryParameter adds the createTime to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithCreateTimeQueryParameter(createTime *string) *NvmeNamespaceCollectionGetParams {
	o.SetCreateTimeQueryParameter(createTime)
	return o
}

// SetCreateTimeQueryParameter adds the createTime to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetCreateTimeQueryParameter(createTime *string) {
	o.CreateTimeQueryParameter = createTime
}

// WithEnabledQueryParameter adds the enabled to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithEnabledQueryParameter(enabled *bool) *NvmeNamespaceCollectionGetParams {
	o.SetEnabledQueryParameter(enabled)
	return o
}

// SetEnabledQueryParameter adds the enabled to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetEnabledQueryParameter(enabled *bool) {
	o.EnabledQueryParameter = enabled
}

// WithFields adds the fields to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithFields(fields []string) *NvmeNamespaceCollectionGetParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithLocationNamespaceQueryParameter adds the locationNamespace to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithLocationNamespaceQueryParameter(locationNamespace *string) *NvmeNamespaceCollectionGetParams {
	o.SetLocationNamespaceQueryParameter(locationNamespace)
	return o
}

// SetLocationNamespaceQueryParameter adds the locationNamespace to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetLocationNamespaceQueryParameter(locationNamespace *string) {
	o.LocationNamespaceQueryParameter = locationNamespace
}

// WithLocationQtreeIDQueryParameter adds the locationQtreeID to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithLocationQtreeIDQueryParameter(locationQtreeID *int64) *NvmeNamespaceCollectionGetParams {
	o.SetLocationQtreeIDQueryParameter(locationQtreeID)
	return o
}

// SetLocationQtreeIDQueryParameter adds the locationQtreeId to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetLocationQtreeIDQueryParameter(locationQtreeID *int64) {
	o.LocationQtreeIDQueryParameter = locationQtreeID
}

// WithLocationQtreeNameQueryParameter adds the locationQtreeName to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithLocationQtreeNameQueryParameter(locationQtreeName *string) *NvmeNamespaceCollectionGetParams {
	o.SetLocationQtreeNameQueryParameter(locationQtreeName)
	return o
}

// SetLocationQtreeNameQueryParameter adds the locationQtreeName to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetLocationQtreeNameQueryParameter(locationQtreeName *string) {
	o.LocationQtreeNameQueryParameter = locationQtreeName
}

// WithLocationVolumeNameQueryParameter adds the locationVolumeName to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithLocationVolumeNameQueryParameter(locationVolumeName *string) *NvmeNamespaceCollectionGetParams {
	o.SetLocationVolumeNameQueryParameter(locationVolumeName)
	return o
}

// SetLocationVolumeNameQueryParameter adds the locationVolumeName to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetLocationVolumeNameQueryParameter(locationVolumeName *string) {
	o.LocationVolumeNameQueryParameter = locationVolumeName
}

// WithLocationVolumeUUIDQueryParameter adds the locationVolumeUUID to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithLocationVolumeUUIDQueryParameter(locationVolumeUUID *string) *NvmeNamespaceCollectionGetParams {
	o.SetLocationVolumeUUIDQueryParameter(locationVolumeUUID)
	return o
}

// SetLocationVolumeUUIDQueryParameter adds the locationVolumeUuid to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetLocationVolumeUUIDQueryParameter(locationVolumeUUID *string) {
	o.LocationVolumeUUIDQueryParameter = locationVolumeUUID
}

// WithMaxRecords adds the maxRecords to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithMaxRecords(maxRecords *int64) *NvmeNamespaceCollectionGetParams {
	o.SetMaxRecords(maxRecords)
	return o
}

// SetMaxRecords adds the maxRecords to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetMaxRecords(maxRecords *int64) {
	o.MaxRecords = maxRecords
}

// WithNameQueryParameter adds the name to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithNameQueryParameter(name *string) *NvmeNamespaceCollectionGetParams {
	o.SetNameQueryParameter(name)
	return o
}

// SetNameQueryParameter adds the name to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetNameQueryParameter(name *string) {
	o.NameQueryParameter = name
}

// WithOrderBy adds the orderBy to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithOrderBy(orderBy []string) *NvmeNamespaceCollectionGetParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetOrderBy(orderBy []string) {
	o.OrderBy = orderBy
}

// WithOsTypeQueryParameter adds the osType to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithOsTypeQueryParameter(osType *string) *NvmeNamespaceCollectionGetParams {
	o.SetOsTypeQueryParameter(osType)
	return o
}

// SetOsTypeQueryParameter adds the osType to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetOsTypeQueryParameter(osType *string) {
	o.OsTypeQueryParameter = osType
}

// WithReturnRecords adds the returnRecords to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithReturnRecords(returnRecords *bool) *NvmeNamespaceCollectionGetParams {
	o.SetReturnRecords(returnRecords)
	return o
}

// SetReturnRecords adds the returnRecords to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetReturnRecords(returnRecords *bool) {
	o.ReturnRecords = returnRecords
}

// WithReturnTimeout adds the returnTimeout to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithReturnTimeout(returnTimeout *int64) *NvmeNamespaceCollectionGetParams {
	o.SetReturnTimeout(returnTimeout)
	return o
}

// SetReturnTimeout adds the returnTimeout to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetReturnTimeout(returnTimeout *int64) {
	o.ReturnTimeout = returnTimeout
}

// WithSpaceBlockSizeQueryParameter adds the spaceBlockSize to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSpaceBlockSizeQueryParameter(spaceBlockSize *int64) *NvmeNamespaceCollectionGetParams {
	o.SetSpaceBlockSizeQueryParameter(spaceBlockSize)
	return o
}

// SetSpaceBlockSizeQueryParameter adds the spaceBlockSize to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSpaceBlockSizeQueryParameter(spaceBlockSize *int64) {
	o.SpaceBlockSizeQueryParameter = spaceBlockSize
}

// WithSpaceGuaranteeRequestedQueryParameter adds the spaceGuaranteeRequested to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSpaceGuaranteeRequestedQueryParameter(spaceGuaranteeRequested *bool) *NvmeNamespaceCollectionGetParams {
	o.SetSpaceGuaranteeRequestedQueryParameter(spaceGuaranteeRequested)
	return o
}

// SetSpaceGuaranteeRequestedQueryParameter adds the spaceGuaranteeRequested to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSpaceGuaranteeRequestedQueryParameter(spaceGuaranteeRequested *bool) {
	o.SpaceGuaranteeRequestedQueryParameter = spaceGuaranteeRequested
}

// WithSpaceGuaranteeReservedQueryParameter adds the spaceGuaranteeReserved to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSpaceGuaranteeReservedQueryParameter(spaceGuaranteeReserved *bool) *NvmeNamespaceCollectionGetParams {
	o.SetSpaceGuaranteeReservedQueryParameter(spaceGuaranteeReserved)
	return o
}

// SetSpaceGuaranteeReservedQueryParameter adds the spaceGuaranteeReserved to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSpaceGuaranteeReservedQueryParameter(spaceGuaranteeReserved *bool) {
	o.SpaceGuaranteeReservedQueryParameter = spaceGuaranteeReserved
}

// WithSpaceSizeQueryParameter adds the spaceSize to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSpaceSizeQueryParameter(spaceSize *int64) *NvmeNamespaceCollectionGetParams {
	o.SetSpaceSizeQueryParameter(spaceSize)
	return o
}

// SetSpaceSizeQueryParameter adds the spaceSize to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSpaceSizeQueryParameter(spaceSize *int64) {
	o.SpaceSizeQueryParameter = spaceSize
}

// WithSpaceUsedQueryParameter adds the spaceUsed to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSpaceUsedQueryParameter(spaceUsed *int64) *NvmeNamespaceCollectionGetParams {
	o.SetSpaceUsedQueryParameter(spaceUsed)
	return o
}

// SetSpaceUsedQueryParameter adds the spaceUsed to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSpaceUsedQueryParameter(spaceUsed *int64) {
	o.SpaceUsedQueryParameter = spaceUsed
}

// WithStatusContainerStateQueryParameter adds the statusContainerState to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithStatusContainerStateQueryParameter(statusContainerState *string) *NvmeNamespaceCollectionGetParams {
	o.SetStatusContainerStateQueryParameter(statusContainerState)
	return o
}

// SetStatusContainerStateQueryParameter adds the statusContainerState to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetStatusContainerStateQueryParameter(statusContainerState *string) {
	o.StatusContainerStateQueryParameter = statusContainerState
}

// WithStatusMappedQueryParameter adds the statusMapped to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithStatusMappedQueryParameter(statusMapped *bool) *NvmeNamespaceCollectionGetParams {
	o.SetStatusMappedQueryParameter(statusMapped)
	return o
}

// SetStatusMappedQueryParameter adds the statusMapped to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetStatusMappedQueryParameter(statusMapped *bool) {
	o.StatusMappedQueryParameter = statusMapped
}

// WithStatusReadOnlyQueryParameter adds the statusReadOnly to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithStatusReadOnlyQueryParameter(statusReadOnly *bool) *NvmeNamespaceCollectionGetParams {
	o.SetStatusReadOnlyQueryParameter(statusReadOnly)
	return o
}

// SetStatusReadOnlyQueryParameter adds the statusReadOnly to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetStatusReadOnlyQueryParameter(statusReadOnly *bool) {
	o.StatusReadOnlyQueryParameter = statusReadOnly
}

// WithStatusStateQueryParameter adds the statusState to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithStatusStateQueryParameter(statusState *string) *NvmeNamespaceCollectionGetParams {
	o.SetStatusStateQueryParameter(statusState)
	return o
}

// SetStatusStateQueryParameter adds the statusState to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetStatusStateQueryParameter(statusState *string) {
	o.StatusStateQueryParameter = statusState
}

// WithSubsystemMapAnagrpIDQueryParameter adds the subsystemMapAnagrpid to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSubsystemMapAnagrpIDQueryParameter(subsystemMapAnagrpid *string) *NvmeNamespaceCollectionGetParams {
	o.SetSubsystemMapAnagrpIDQueryParameter(subsystemMapAnagrpid)
	return o
}

// SetSubsystemMapAnagrpIDQueryParameter adds the subsystemMapAnagrpid to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSubsystemMapAnagrpIDQueryParameter(subsystemMapAnagrpid *string) {
	o.SubsystemMapAnagrpIDQueryParameter = subsystemMapAnagrpid
}

// WithSubsystemMapNsIDQueryParameter adds the subsystemMapNsid to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSubsystemMapNsIDQueryParameter(subsystemMapNsid *string) *NvmeNamespaceCollectionGetParams {
	o.SetSubsystemMapNsIDQueryParameter(subsystemMapNsid)
	return o
}

// SetSubsystemMapNsIDQueryParameter adds the subsystemMapNsid to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSubsystemMapNsIDQueryParameter(subsystemMapNsid *string) {
	o.SubsystemMapNsIDQueryParameter = subsystemMapNsid
}

// WithSubsystemMapSubsystemNameQueryParameter adds the subsystemMapSubsystemName to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSubsystemMapSubsystemNameQueryParameter(subsystemMapSubsystemName *string) *NvmeNamespaceCollectionGetParams {
	o.SetSubsystemMapSubsystemNameQueryParameter(subsystemMapSubsystemName)
	return o
}

// SetSubsystemMapSubsystemNameQueryParameter adds the subsystemMapSubsystemName to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSubsystemMapSubsystemNameQueryParameter(subsystemMapSubsystemName *string) {
	o.SubsystemMapSubsystemNameQueryParameter = subsystemMapSubsystemName
}

// WithSubsystemMapSubsystemUUIDQueryParameter adds the subsystemMapSubsystemUUID to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSubsystemMapSubsystemUUIDQueryParameter(subsystemMapSubsystemUUID *string) *NvmeNamespaceCollectionGetParams {
	o.SetSubsystemMapSubsystemUUIDQueryParameter(subsystemMapSubsystemUUID)
	return o
}

// SetSubsystemMapSubsystemUUIDQueryParameter adds the subsystemMapSubsystemUuid to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSubsystemMapSubsystemUUIDQueryParameter(subsystemMapSubsystemUUID *string) {
	o.SubsystemMapSubsystemUUIDQueryParameter = subsystemMapSubsystemUUID
}

// WithSVMNameQueryParameter adds the svmName to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSVMNameQueryParameter(svmName *string) *NvmeNamespaceCollectionGetParams {
	o.SetSVMNameQueryParameter(svmName)
	return o
}

// SetSVMNameQueryParameter adds the svmName to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSVMNameQueryParameter(svmName *string) {
	o.SVMNameQueryParameter = svmName
}

// WithSVMUUIDQueryParameter adds the svmUUID to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSVMUUIDQueryParameter(svmUUID *string) *NvmeNamespaceCollectionGetParams {
	o.SetSVMUUIDQueryParameter(svmUUID)
	return o
}

// SetSVMUUIDQueryParameter adds the svmUuid to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSVMUUIDQueryParameter(svmUUID *string) {
	o.SVMUUIDQueryParameter = svmUUID
}

// WithUUIDQueryParameter adds the uuid to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithUUIDQueryParameter(uuid *string) *NvmeNamespaceCollectionGetParams {
	o.SetUUIDQueryParameter(uuid)
	return o
}

// SetUUIDQueryParameter adds the uuid to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetUUIDQueryParameter(uuid *string) {
	o.UUIDQueryParameter = uuid
}

// WriteToRequest writes these params to a swagger request
func (o *NvmeNamespaceCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AutoDeleteQueryParameter != nil {

		// query param auto_delete
		var qrAutoDelete bool

		if o.AutoDeleteQueryParameter != nil {
			qrAutoDelete = *o.AutoDeleteQueryParameter
		}
		qAutoDelete := swag.FormatBool(qrAutoDelete)
		if qAutoDelete != "" {

			if err := r.SetQueryParam("auto_delete", qAutoDelete); err != nil {
				return err
			}
		}
	}

	if o.CommentQueryParameter != nil {

		// query param comment
		var qrComment string

		if o.CommentQueryParameter != nil {
			qrComment = *o.CommentQueryParameter
		}
		qComment := qrComment
		if qComment != "" {

			if err := r.SetQueryParam("comment", qComment); err != nil {
				return err
			}
		}
	}

	if o.CreateTimeQueryParameter != nil {

		// query param create_time
		var qrCreateTime string

		if o.CreateTimeQueryParameter != nil {
			qrCreateTime = *o.CreateTimeQueryParameter
		}
		qCreateTime := qrCreateTime
		if qCreateTime != "" {

			if err := r.SetQueryParam("create_time", qCreateTime); err != nil {
				return err
			}
		}
	}

	if o.EnabledQueryParameter != nil {

		// query param enabled
		var qrEnabled bool

		if o.EnabledQueryParameter != nil {
			qrEnabled = *o.EnabledQueryParameter
		}
		qEnabled := swag.FormatBool(qrEnabled)
		if qEnabled != "" {

			if err := r.SetQueryParam("enabled", qEnabled); err != nil {
				return err
			}
		}
	}

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.LocationNamespaceQueryParameter != nil {

		// query param location.namespace
		var qrLocationNamespace string

		if o.LocationNamespaceQueryParameter != nil {
			qrLocationNamespace = *o.LocationNamespaceQueryParameter
		}
		qLocationNamespace := qrLocationNamespace
		if qLocationNamespace != "" {

			if err := r.SetQueryParam("location.namespace", qLocationNamespace); err != nil {
				return err
			}
		}
	}

	if o.LocationQtreeIDQueryParameter != nil {

		// query param location.qtree.id
		var qrLocationQtreeID int64

		if o.LocationQtreeIDQueryParameter != nil {
			qrLocationQtreeID = *o.LocationQtreeIDQueryParameter
		}
		qLocationQtreeID := swag.FormatInt64(qrLocationQtreeID)
		if qLocationQtreeID != "" {

			if err := r.SetQueryParam("location.qtree.id", qLocationQtreeID); err != nil {
				return err
			}
		}
	}

	if o.LocationQtreeNameQueryParameter != nil {

		// query param location.qtree.name
		var qrLocationQtreeName string

		if o.LocationQtreeNameQueryParameter != nil {
			qrLocationQtreeName = *o.LocationQtreeNameQueryParameter
		}
		qLocationQtreeName := qrLocationQtreeName
		if qLocationQtreeName != "" {

			if err := r.SetQueryParam("location.qtree.name", qLocationQtreeName); err != nil {
				return err
			}
		}
	}

	if o.LocationVolumeNameQueryParameter != nil {

		// query param location.volume.name
		var qrLocationVolumeName string

		if o.LocationVolumeNameQueryParameter != nil {
			qrLocationVolumeName = *o.LocationVolumeNameQueryParameter
		}
		qLocationVolumeName := qrLocationVolumeName
		if qLocationVolumeName != "" {

			if err := r.SetQueryParam("location.volume.name", qLocationVolumeName); err != nil {
				return err
			}
		}
	}

	if o.LocationVolumeUUIDQueryParameter != nil {

		// query param location.volume.uuid
		var qrLocationVolumeUUID string

		if o.LocationVolumeUUIDQueryParameter != nil {
			qrLocationVolumeUUID = *o.LocationVolumeUUIDQueryParameter
		}
		qLocationVolumeUUID := qrLocationVolumeUUID
		if qLocationVolumeUUID != "" {

			if err := r.SetQueryParam("location.volume.uuid", qLocationVolumeUUID); err != nil {
				return err
			}
		}
	}

	if o.MaxRecords != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecords != nil {
			qrMaxRecords = *o.MaxRecords
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.NameQueryParameter != nil {

		// query param name
		var qrName string

		if o.NameQueryParameter != nil {
			qrName = *o.NameQueryParameter
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.OrderBy != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.OsTypeQueryParameter != nil {

		// query param os_type
		var qrOsType string

		if o.OsTypeQueryParameter != nil {
			qrOsType = *o.OsTypeQueryParameter
		}
		qOsType := qrOsType
		if qOsType != "" {

			if err := r.SetQueryParam("os_type", qOsType); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecords != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecords != nil {
			qrReturnRecords = *o.ReturnRecords
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeout != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeout != nil {
			qrReturnTimeout = *o.ReturnTimeout
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.SpaceBlockSizeQueryParameter != nil {

		// query param space.block_size
		var qrSpaceBlockSize int64

		if o.SpaceBlockSizeQueryParameter != nil {
			qrSpaceBlockSize = *o.SpaceBlockSizeQueryParameter
		}
		qSpaceBlockSize := swag.FormatInt64(qrSpaceBlockSize)
		if qSpaceBlockSize != "" {

			if err := r.SetQueryParam("space.block_size", qSpaceBlockSize); err != nil {
				return err
			}
		}
	}

	if o.SpaceGuaranteeRequestedQueryParameter != nil {

		// query param space.guarantee.requested
		var qrSpaceGuaranteeRequested bool

		if o.SpaceGuaranteeRequestedQueryParameter != nil {
			qrSpaceGuaranteeRequested = *o.SpaceGuaranteeRequestedQueryParameter
		}
		qSpaceGuaranteeRequested := swag.FormatBool(qrSpaceGuaranteeRequested)
		if qSpaceGuaranteeRequested != "" {

			if err := r.SetQueryParam("space.guarantee.requested", qSpaceGuaranteeRequested); err != nil {
				return err
			}
		}
	}

	if o.SpaceGuaranteeReservedQueryParameter != nil {

		// query param space.guarantee.reserved
		var qrSpaceGuaranteeReserved bool

		if o.SpaceGuaranteeReservedQueryParameter != nil {
			qrSpaceGuaranteeReserved = *o.SpaceGuaranteeReservedQueryParameter
		}
		qSpaceGuaranteeReserved := swag.FormatBool(qrSpaceGuaranteeReserved)
		if qSpaceGuaranteeReserved != "" {

			if err := r.SetQueryParam("space.guarantee.reserved", qSpaceGuaranteeReserved); err != nil {
				return err
			}
		}
	}

	if o.SpaceSizeQueryParameter != nil {

		// query param space.size
		var qrSpaceSize int64

		if o.SpaceSizeQueryParameter != nil {
			qrSpaceSize = *o.SpaceSizeQueryParameter
		}
		qSpaceSize := swag.FormatInt64(qrSpaceSize)
		if qSpaceSize != "" {

			if err := r.SetQueryParam("space.size", qSpaceSize); err != nil {
				return err
			}
		}
	}

	if o.SpaceUsedQueryParameter != nil {

		// query param space.used
		var qrSpaceUsed int64

		if o.SpaceUsedQueryParameter != nil {
			qrSpaceUsed = *o.SpaceUsedQueryParameter
		}
		qSpaceUsed := swag.FormatInt64(qrSpaceUsed)
		if qSpaceUsed != "" {

			if err := r.SetQueryParam("space.used", qSpaceUsed); err != nil {
				return err
			}
		}
	}

	if o.StatusContainerStateQueryParameter != nil {

		// query param status.container_state
		var qrStatusContainerState string

		if o.StatusContainerStateQueryParameter != nil {
			qrStatusContainerState = *o.StatusContainerStateQueryParameter
		}
		qStatusContainerState := qrStatusContainerState
		if qStatusContainerState != "" {

			if err := r.SetQueryParam("status.container_state", qStatusContainerState); err != nil {
				return err
			}
		}
	}

	if o.StatusMappedQueryParameter != nil {

		// query param status.mapped
		var qrStatusMapped bool

		if o.StatusMappedQueryParameter != nil {
			qrStatusMapped = *o.StatusMappedQueryParameter
		}
		qStatusMapped := swag.FormatBool(qrStatusMapped)
		if qStatusMapped != "" {

			if err := r.SetQueryParam("status.mapped", qStatusMapped); err != nil {
				return err
			}
		}
	}

	if o.StatusReadOnlyQueryParameter != nil {

		// query param status.read_only
		var qrStatusReadOnly bool

		if o.StatusReadOnlyQueryParameter != nil {
			qrStatusReadOnly = *o.StatusReadOnlyQueryParameter
		}
		qStatusReadOnly := swag.FormatBool(qrStatusReadOnly)
		if qStatusReadOnly != "" {

			if err := r.SetQueryParam("status.read_only", qStatusReadOnly); err != nil {
				return err
			}
		}
	}

	if o.StatusStateQueryParameter != nil {

		// query param status.state
		var qrStatusState string

		if o.StatusStateQueryParameter != nil {
			qrStatusState = *o.StatusStateQueryParameter
		}
		qStatusState := qrStatusState
		if qStatusState != "" {

			if err := r.SetQueryParam("status.state", qStatusState); err != nil {
				return err
			}
		}
	}

	if o.SubsystemMapAnagrpIDQueryParameter != nil {

		// query param subsystem_map.anagrpid
		var qrSubsystemMapAnagrpid string

		if o.SubsystemMapAnagrpIDQueryParameter != nil {
			qrSubsystemMapAnagrpid = *o.SubsystemMapAnagrpIDQueryParameter
		}
		qSubsystemMapAnagrpid := qrSubsystemMapAnagrpid
		if qSubsystemMapAnagrpid != "" {

			if err := r.SetQueryParam("subsystem_map.anagrpid", qSubsystemMapAnagrpid); err != nil {
				return err
			}
		}
	}

	if o.SubsystemMapNsIDQueryParameter != nil {

		// query param subsystem_map.nsid
		var qrSubsystemMapNsid string

		if o.SubsystemMapNsIDQueryParameter != nil {
			qrSubsystemMapNsid = *o.SubsystemMapNsIDQueryParameter
		}
		qSubsystemMapNsid := qrSubsystemMapNsid
		if qSubsystemMapNsid != "" {

			if err := r.SetQueryParam("subsystem_map.nsid", qSubsystemMapNsid); err != nil {
				return err
			}
		}
	}

	if o.SubsystemMapSubsystemNameQueryParameter != nil {

		// query param subsystem_map.subsystem.name
		var qrSubsystemMapSubsystemName string

		if o.SubsystemMapSubsystemNameQueryParameter != nil {
			qrSubsystemMapSubsystemName = *o.SubsystemMapSubsystemNameQueryParameter
		}
		qSubsystemMapSubsystemName := qrSubsystemMapSubsystemName
		if qSubsystemMapSubsystemName != "" {

			if err := r.SetQueryParam("subsystem_map.subsystem.name", qSubsystemMapSubsystemName); err != nil {
				return err
			}
		}
	}

	if o.SubsystemMapSubsystemUUIDQueryParameter != nil {

		// query param subsystem_map.subsystem.uuid
		var qrSubsystemMapSubsystemUUID string

		if o.SubsystemMapSubsystemUUIDQueryParameter != nil {
			qrSubsystemMapSubsystemUUID = *o.SubsystemMapSubsystemUUIDQueryParameter
		}
		qSubsystemMapSubsystemUUID := qrSubsystemMapSubsystemUUID
		if qSubsystemMapSubsystemUUID != "" {

			if err := r.SetQueryParam("subsystem_map.subsystem.uuid", qSubsystemMapSubsystemUUID); err != nil {
				return err
			}
		}
	}

	if o.SVMNameQueryParameter != nil {

		// query param svm.name
		var qrSvmName string

		if o.SVMNameQueryParameter != nil {
			qrSvmName = *o.SVMNameQueryParameter
		}
		qSvmName := qrSvmName
		if qSvmName != "" {

			if err := r.SetQueryParam("svm.name", qSvmName); err != nil {
				return err
			}
		}
	}

	if o.SVMUUIDQueryParameter != nil {

		// query param svm.uuid
		var qrSvmUUID string

		if o.SVMUUIDQueryParameter != nil {
			qrSvmUUID = *o.SVMUUIDQueryParameter
		}
		qSvmUUID := qrSvmUUID
		if qSvmUUID != "" {

			if err := r.SetQueryParam("svm.uuid", qSvmUUID); err != nil {
				return err
			}
		}
	}

	if o.UUIDQueryParameter != nil {

		// query param uuid
		var qrUUID string

		if o.UUIDQueryParameter != nil {
			qrUUID = *o.UUIDQueryParameter
		}
		qUUID := qrUUID
		if qUUID != "" {

			if err := r.SetQueryParam("uuid", qUUID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamNvmeNamespaceCollectionGet binds the parameter fields
func (o *NvmeNamespaceCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamNvmeNamespaceCollectionGet binds the parameter order_by
func (o *NvmeNamespaceCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderBy

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
