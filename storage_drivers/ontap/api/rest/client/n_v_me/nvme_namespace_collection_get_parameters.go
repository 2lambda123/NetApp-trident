// Code generated by go-swagger; DO NOT EDIT.

package n_v_me

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewNvmeNamespaceCollectionGetParams creates a new NvmeNamespaceCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewNvmeNamespaceCollectionGetParams() *NvmeNamespaceCollectionGetParams {
	return &NvmeNamespaceCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewNvmeNamespaceCollectionGetParamsWithTimeout creates a new NvmeNamespaceCollectionGetParams object
// with the ability to set a timeout on a request.
func NewNvmeNamespaceCollectionGetParamsWithTimeout(timeout time.Duration) *NvmeNamespaceCollectionGetParams {
	return &NvmeNamespaceCollectionGetParams{
		timeout: timeout,
	}
}

// NewNvmeNamespaceCollectionGetParamsWithContext creates a new NvmeNamespaceCollectionGetParams object
// with the ability to set a context for a request.
func NewNvmeNamespaceCollectionGetParamsWithContext(ctx context.Context) *NvmeNamespaceCollectionGetParams {
	return &NvmeNamespaceCollectionGetParams{
		Context: ctx,
	}
}

// NewNvmeNamespaceCollectionGetParamsWithHTTPClient creates a new NvmeNamespaceCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewNvmeNamespaceCollectionGetParamsWithHTTPClient(client *http.Client) *NvmeNamespaceCollectionGetParams {
	return &NvmeNamespaceCollectionGetParams{
		HTTPClient: client,
	}
}

/* NvmeNamespaceCollectionGetParams contains all the parameters to send to the API endpoint
   for the nvme namespace collection get operation.

   Typically these are written to a http.Request.
*/
type NvmeNamespaceCollectionGetParams struct {

	/* AutoDelete.

	   Filter by auto_delete
	*/
	AutoDeleteQueryParameter *bool

	/* Comment.

	   Filter by comment
	*/
	CommentQueryParameter *string

	/* CreateTime.

	   Filter by create_time
	*/
	CreateTimeQueryParameter *string

	/* Enabled.

	   Filter by enabled
	*/
	EnabledQueryParameter *bool

	/* Fields.

	   Specify the fields to return.
	*/
	FieldsQueryParameter []string

	/* LocationNamespace.

	   Filter by location.namespace
	*/
	LocationNamespaceQueryParameter *string

	/* LocationQtreeID.

	   Filter by location.qtree.id
	*/
	LocationQtreeIDQueryParameter *int64

	/* LocationQtreeName.

	   Filter by location.qtree.name
	*/
	LocationQtreeNameQueryParameter *string

	/* LocationVolumeName.

	   Filter by location.volume.name
	*/
	LocationVolumeNameQueryParameter *string

	/* LocationVolumeUUID.

	   Filter by location.volume.uuid
	*/
	LocationVolumeUUIDQueryParameter *string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecordsQueryParameter *int64

	/* MetricDuration.

	   Filter by metric.duration
	*/
	MetricDurationQueryParameter *string

	/* MetricIopsOther.

	   Filter by metric.iops.other
	*/
	MetricIopsOtherQueryParameter *int64

	/* MetricIopsRead.

	   Filter by metric.iops.read
	*/
	MetricIopsReadQueryParameter *int64

	/* MetricIopsTotal.

	   Filter by metric.iops.total
	*/
	MetricIopsTotalQueryParameter *int64

	/* MetricIopsWrite.

	   Filter by metric.iops.write
	*/
	MetricIopsWriteQueryParameter *int64

	/* MetricLatencyOther.

	   Filter by metric.latency.other
	*/
	MetricLatencyOtherQueryParameter *int64

	/* MetricLatencyRead.

	   Filter by metric.latency.read
	*/
	MetricLatencyReadQueryParameter *int64

	/* MetricLatencyTotal.

	   Filter by metric.latency.total
	*/
	MetricLatencyTotalQueryParameter *int64

	/* MetricLatencyWrite.

	   Filter by metric.latency.write
	*/
	MetricLatencyWriteQueryParameter *int64

	/* MetricStatus.

	   Filter by metric.status
	*/
	MetricStatusQueryParameter *string

	/* MetricThroughputRead.

	   Filter by metric.throughput.read
	*/
	MetricThroughputReadQueryParameter *int64

	/* MetricThroughputTotal.

	   Filter by metric.throughput.total
	*/
	MetricThroughputTotalQueryParameter *int64

	/* MetricThroughputWrite.

	   Filter by metric.throughput.write
	*/
	MetricThroughputWriteQueryParameter *int64

	/* MetricTimestamp.

	   Filter by metric.timestamp
	*/
	MetricTimestampQueryParameter *string

	/* Name.

	   Filter by name
	*/
	NameQueryParameter *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderByQueryParameter []string

	/* OsType.

	   Filter by os_type
	*/
	OsTypeQueryParameter *string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecordsQueryParameter *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeoutQueryParameter *int64

	/* SpaceBlockSize.

	   Filter by space.block_size
	*/
	SpaceBlockSizeQueryParameter *int64

	/* SpaceGuaranteeRequested.

	   Filter by space.guarantee.requested
	*/
	SpaceGuaranteeRequestedQueryParameter *bool

	/* SpaceGuaranteeReserved.

	   Filter by space.guarantee.reserved
	*/
	SpaceGuaranteeReservedQueryParameter *bool

	/* SpaceSize.

	   Filter by space.size
	*/
	SpaceSizeQueryParameter *int64

	/* SpaceUsed.

	   Filter by space.used
	*/
	SpaceUsedQueryParameter *int64

	/* StatisticsIopsRawOther.

	   Filter by statistics.iops_raw.other
	*/
	StatisticsIopsRawOtherQueryParameter *int64

	/* StatisticsIopsRawRead.

	   Filter by statistics.iops_raw.read
	*/
	StatisticsIopsRawReadQueryParameter *int64

	/* StatisticsIopsRawTotal.

	   Filter by statistics.iops_raw.total
	*/
	StatisticsIopsRawTotalQueryParameter *int64

	/* StatisticsIopsRawWrite.

	   Filter by statistics.iops_raw.write
	*/
	StatisticsIopsRawWriteQueryParameter *int64

	/* StatisticsLatencyRawOther.

	   Filter by statistics.latency_raw.other
	*/
	StatisticsLatencyRawOtherQueryParameter *int64

	/* StatisticsLatencyRawRead.

	   Filter by statistics.latency_raw.read
	*/
	StatisticsLatencyRawReadQueryParameter *int64

	/* StatisticsLatencyRawTotal.

	   Filter by statistics.latency_raw.total
	*/
	StatisticsLatencyRawTotalQueryParameter *int64

	/* StatisticsLatencyRawWrite.

	   Filter by statistics.latency_raw.write
	*/
	StatisticsLatencyRawWriteQueryParameter *int64

	/* StatisticsStatus.

	   Filter by statistics.status
	*/
	StatisticsStatusQueryParameter *string

	/* StatisticsThroughputRawRead.

	   Filter by statistics.throughput_raw.read
	*/
	StatisticsThroughputRawReadQueryParameter *int64

	/* StatisticsThroughputRawTotal.

	   Filter by statistics.throughput_raw.total
	*/
	StatisticsThroughputRawTotalQueryParameter *int64

	/* StatisticsThroughputRawWrite.

	   Filter by statistics.throughput_raw.write
	*/
	StatisticsThroughputRawWriteQueryParameter *int64

	/* StatisticsTimestamp.

	   Filter by statistics.timestamp
	*/
	StatisticsTimestampQueryParameter *string

	/* StatusContainerState.

	   Filter by status.container_state
	*/
	StatusContainerStateQueryParameter *string

	/* StatusMapped.

	   Filter by status.mapped
	*/
	StatusMappedQueryParameter *bool

	/* StatusReadOnly.

	   Filter by status.read_only
	*/
	StatusReadOnlyQueryParameter *bool

	/* StatusState.

	   Filter by status.state
	*/
	StatusStateQueryParameter *string

	/* SubsystemMapAnagrpid.

	   Filter by subsystem_map.anagrpid
	*/
	SubsystemMapAnagrpIDQueryParameter *string

	/* SubsystemMapNsid.

	   Filter by subsystem_map.nsid
	*/
	SubsystemMapNsIDQueryParameter *string

	/* SubsystemMapSubsystemName.

	   Filter by subsystem_map.subsystem.name
	*/
	SubsystemMapSubsystemNameQueryParameter *string

	/* SubsystemMapSubsystemUUID.

	   Filter by subsystem_map.subsystem.uuid
	*/
	SubsystemMapSubsystemUUIDQueryParameter *string

	/* SvmName.

	   Filter by svm.name
	*/
	SVMNameQueryParameter *string

	/* SvmUUID.

	   Filter by svm.uuid
	*/
	SVMUUIDQueryParameter *string

	/* UUID.

	   Filter by uuid
	*/
	UUIDQueryParameter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the nvme namespace collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NvmeNamespaceCollectionGetParams) WithDefaults() *NvmeNamespaceCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the nvme namespace collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NvmeNamespaceCollectionGetParams) SetDefaults() {
	var (
		returnRecordsQueryParameterDefault = bool(true)

		returnTimeoutQueryParameterDefault = int64(15)
	)

	val := NvmeNamespaceCollectionGetParams{
		ReturnRecordsQueryParameter: &returnRecordsQueryParameterDefault,
		ReturnTimeoutQueryParameter: &returnTimeoutQueryParameterDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithTimeout(timeout time.Duration) *NvmeNamespaceCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithContext(ctx context.Context) *NvmeNamespaceCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithHTTPClient(client *http.Client) *NvmeNamespaceCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAutoDeleteQueryParameter adds the autoDelete to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithAutoDeleteQueryParameter(autoDelete *bool) *NvmeNamespaceCollectionGetParams {
	o.SetAutoDeleteQueryParameter(autoDelete)
	return o
}

// SetAutoDeleteQueryParameter adds the autoDelete to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetAutoDeleteQueryParameter(autoDelete *bool) {
	o.AutoDeleteQueryParameter = autoDelete
}

// WithCommentQueryParameter adds the comment to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithCommentQueryParameter(comment *string) *NvmeNamespaceCollectionGetParams {
	o.SetCommentQueryParameter(comment)
	return o
}

// SetCommentQueryParameter adds the comment to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetCommentQueryParameter(comment *string) {
	o.CommentQueryParameter = comment
}

// WithCreateTimeQueryParameter adds the createTime to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithCreateTimeQueryParameter(createTime *string) *NvmeNamespaceCollectionGetParams {
	o.SetCreateTimeQueryParameter(createTime)
	return o
}

// SetCreateTimeQueryParameter adds the createTime to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetCreateTimeQueryParameter(createTime *string) {
	o.CreateTimeQueryParameter = createTime
}

// WithEnabledQueryParameter adds the enabled to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithEnabledQueryParameter(enabled *bool) *NvmeNamespaceCollectionGetParams {
	o.SetEnabledQueryParameter(enabled)
	return o
}

// SetEnabledQueryParameter adds the enabled to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetEnabledQueryParameter(enabled *bool) {
	o.EnabledQueryParameter = enabled
}

// WithFieldsQueryParameter adds the fields to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithFieldsQueryParameter(fields []string) *NvmeNamespaceCollectionGetParams {
	o.SetFieldsQueryParameter(fields)
	return o
}

// SetFieldsQueryParameter adds the fields to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetFieldsQueryParameter(fields []string) {
	o.FieldsQueryParameter = fields
}

// WithLocationNamespaceQueryParameter adds the locationNamespace to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithLocationNamespaceQueryParameter(locationNamespace *string) *NvmeNamespaceCollectionGetParams {
	o.SetLocationNamespaceQueryParameter(locationNamespace)
	return o
}

// SetLocationNamespaceQueryParameter adds the locationNamespace to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetLocationNamespaceQueryParameter(locationNamespace *string) {
	o.LocationNamespaceQueryParameter = locationNamespace
}

// WithLocationQtreeIDQueryParameter adds the locationQtreeID to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithLocationQtreeIDQueryParameter(locationQtreeID *int64) *NvmeNamespaceCollectionGetParams {
	o.SetLocationQtreeIDQueryParameter(locationQtreeID)
	return o
}

// SetLocationQtreeIDQueryParameter adds the locationQtreeId to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetLocationQtreeIDQueryParameter(locationQtreeID *int64) {
	o.LocationQtreeIDQueryParameter = locationQtreeID
}

// WithLocationQtreeNameQueryParameter adds the locationQtreeName to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithLocationQtreeNameQueryParameter(locationQtreeName *string) *NvmeNamespaceCollectionGetParams {
	o.SetLocationQtreeNameQueryParameter(locationQtreeName)
	return o
}

// SetLocationQtreeNameQueryParameter adds the locationQtreeName to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetLocationQtreeNameQueryParameter(locationQtreeName *string) {
	o.LocationQtreeNameQueryParameter = locationQtreeName
}

// WithLocationVolumeNameQueryParameter adds the locationVolumeName to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithLocationVolumeNameQueryParameter(locationVolumeName *string) *NvmeNamespaceCollectionGetParams {
	o.SetLocationVolumeNameQueryParameter(locationVolumeName)
	return o
}

// SetLocationVolumeNameQueryParameter adds the locationVolumeName to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetLocationVolumeNameQueryParameter(locationVolumeName *string) {
	o.LocationVolumeNameQueryParameter = locationVolumeName
}

// WithLocationVolumeUUIDQueryParameter adds the locationVolumeUUID to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithLocationVolumeUUIDQueryParameter(locationVolumeUUID *string) *NvmeNamespaceCollectionGetParams {
	o.SetLocationVolumeUUIDQueryParameter(locationVolumeUUID)
	return o
}

// SetLocationVolumeUUIDQueryParameter adds the locationVolumeUuid to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetLocationVolumeUUIDQueryParameter(locationVolumeUUID *string) {
	o.LocationVolumeUUIDQueryParameter = locationVolumeUUID
}

// WithMaxRecordsQueryParameter adds the maxRecords to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithMaxRecordsQueryParameter(maxRecords *int64) *NvmeNamespaceCollectionGetParams {
	o.SetMaxRecordsQueryParameter(maxRecords)
	return o
}

// SetMaxRecordsQueryParameter adds the maxRecords to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetMaxRecordsQueryParameter(maxRecords *int64) {
	o.MaxRecordsQueryParameter = maxRecords
}

// WithMetricDurationQueryParameter adds the metricDuration to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithMetricDurationQueryParameter(metricDuration *string) *NvmeNamespaceCollectionGetParams {
	o.SetMetricDurationQueryParameter(metricDuration)
	return o
}

// SetMetricDurationQueryParameter adds the metricDuration to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetMetricDurationQueryParameter(metricDuration *string) {
	o.MetricDurationQueryParameter = metricDuration
}

// WithMetricIopsOtherQueryParameter adds the metricIopsOther to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithMetricIopsOtherQueryParameter(metricIopsOther *int64) *NvmeNamespaceCollectionGetParams {
	o.SetMetricIopsOtherQueryParameter(metricIopsOther)
	return o
}

// SetMetricIopsOtherQueryParameter adds the metricIopsOther to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetMetricIopsOtherQueryParameter(metricIopsOther *int64) {
	o.MetricIopsOtherQueryParameter = metricIopsOther
}

// WithMetricIopsReadQueryParameter adds the metricIopsRead to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithMetricIopsReadQueryParameter(metricIopsRead *int64) *NvmeNamespaceCollectionGetParams {
	o.SetMetricIopsReadQueryParameter(metricIopsRead)
	return o
}

// SetMetricIopsReadQueryParameter adds the metricIopsRead to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetMetricIopsReadQueryParameter(metricIopsRead *int64) {
	o.MetricIopsReadQueryParameter = metricIopsRead
}

// WithMetricIopsTotalQueryParameter adds the metricIopsTotal to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithMetricIopsTotalQueryParameter(metricIopsTotal *int64) *NvmeNamespaceCollectionGetParams {
	o.SetMetricIopsTotalQueryParameter(metricIopsTotal)
	return o
}

// SetMetricIopsTotalQueryParameter adds the metricIopsTotal to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetMetricIopsTotalQueryParameter(metricIopsTotal *int64) {
	o.MetricIopsTotalQueryParameter = metricIopsTotal
}

// WithMetricIopsWriteQueryParameter adds the metricIopsWrite to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithMetricIopsWriteQueryParameter(metricIopsWrite *int64) *NvmeNamespaceCollectionGetParams {
	o.SetMetricIopsWriteQueryParameter(metricIopsWrite)
	return o
}

// SetMetricIopsWriteQueryParameter adds the metricIopsWrite to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetMetricIopsWriteQueryParameter(metricIopsWrite *int64) {
	o.MetricIopsWriteQueryParameter = metricIopsWrite
}

// WithMetricLatencyOtherQueryParameter adds the metricLatencyOther to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithMetricLatencyOtherQueryParameter(metricLatencyOther *int64) *NvmeNamespaceCollectionGetParams {
	o.SetMetricLatencyOtherQueryParameter(metricLatencyOther)
	return o
}

// SetMetricLatencyOtherQueryParameter adds the metricLatencyOther to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetMetricLatencyOtherQueryParameter(metricLatencyOther *int64) {
	o.MetricLatencyOtherQueryParameter = metricLatencyOther
}

// WithMetricLatencyReadQueryParameter adds the metricLatencyRead to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithMetricLatencyReadQueryParameter(metricLatencyRead *int64) *NvmeNamespaceCollectionGetParams {
	o.SetMetricLatencyReadQueryParameter(metricLatencyRead)
	return o
}

// SetMetricLatencyReadQueryParameter adds the metricLatencyRead to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetMetricLatencyReadQueryParameter(metricLatencyRead *int64) {
	o.MetricLatencyReadQueryParameter = metricLatencyRead
}

// WithMetricLatencyTotalQueryParameter adds the metricLatencyTotal to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithMetricLatencyTotalQueryParameter(metricLatencyTotal *int64) *NvmeNamespaceCollectionGetParams {
	o.SetMetricLatencyTotalQueryParameter(metricLatencyTotal)
	return o
}

// SetMetricLatencyTotalQueryParameter adds the metricLatencyTotal to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetMetricLatencyTotalQueryParameter(metricLatencyTotal *int64) {
	o.MetricLatencyTotalQueryParameter = metricLatencyTotal
}

// WithMetricLatencyWriteQueryParameter adds the metricLatencyWrite to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithMetricLatencyWriteQueryParameter(metricLatencyWrite *int64) *NvmeNamespaceCollectionGetParams {
	o.SetMetricLatencyWriteQueryParameter(metricLatencyWrite)
	return o
}

// SetMetricLatencyWriteQueryParameter adds the metricLatencyWrite to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetMetricLatencyWriteQueryParameter(metricLatencyWrite *int64) {
	o.MetricLatencyWriteQueryParameter = metricLatencyWrite
}

// WithMetricStatusQueryParameter adds the metricStatus to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithMetricStatusQueryParameter(metricStatus *string) *NvmeNamespaceCollectionGetParams {
	o.SetMetricStatusQueryParameter(metricStatus)
	return o
}

// SetMetricStatusQueryParameter adds the metricStatus to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetMetricStatusQueryParameter(metricStatus *string) {
	o.MetricStatusQueryParameter = metricStatus
}

// WithMetricThroughputReadQueryParameter adds the metricThroughputRead to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithMetricThroughputReadQueryParameter(metricThroughputRead *int64) *NvmeNamespaceCollectionGetParams {
	o.SetMetricThroughputReadQueryParameter(metricThroughputRead)
	return o
}

// SetMetricThroughputReadQueryParameter adds the metricThroughputRead to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetMetricThroughputReadQueryParameter(metricThroughputRead *int64) {
	o.MetricThroughputReadQueryParameter = metricThroughputRead
}

// WithMetricThroughputTotalQueryParameter adds the metricThroughputTotal to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithMetricThroughputTotalQueryParameter(metricThroughputTotal *int64) *NvmeNamespaceCollectionGetParams {
	o.SetMetricThroughputTotalQueryParameter(metricThroughputTotal)
	return o
}

// SetMetricThroughputTotalQueryParameter adds the metricThroughputTotal to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetMetricThroughputTotalQueryParameter(metricThroughputTotal *int64) {
	o.MetricThroughputTotalQueryParameter = metricThroughputTotal
}

// WithMetricThroughputWriteQueryParameter adds the metricThroughputWrite to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithMetricThroughputWriteQueryParameter(metricThroughputWrite *int64) *NvmeNamespaceCollectionGetParams {
	o.SetMetricThroughputWriteQueryParameter(metricThroughputWrite)
	return o
}

// SetMetricThroughputWriteQueryParameter adds the metricThroughputWrite to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetMetricThroughputWriteQueryParameter(metricThroughputWrite *int64) {
	o.MetricThroughputWriteQueryParameter = metricThroughputWrite
}

// WithMetricTimestampQueryParameter adds the metricTimestamp to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithMetricTimestampQueryParameter(metricTimestamp *string) *NvmeNamespaceCollectionGetParams {
	o.SetMetricTimestampQueryParameter(metricTimestamp)
	return o
}

// SetMetricTimestampQueryParameter adds the metricTimestamp to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetMetricTimestampQueryParameter(metricTimestamp *string) {
	o.MetricTimestampQueryParameter = metricTimestamp
}

// WithNameQueryParameter adds the name to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithNameQueryParameter(name *string) *NvmeNamespaceCollectionGetParams {
	o.SetNameQueryParameter(name)
	return o
}

// SetNameQueryParameter adds the name to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetNameQueryParameter(name *string) {
	o.NameQueryParameter = name
}

// WithOrderByQueryParameter adds the orderBy to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithOrderByQueryParameter(orderBy []string) *NvmeNamespaceCollectionGetParams {
	o.SetOrderByQueryParameter(orderBy)
	return o
}

// SetOrderByQueryParameter adds the orderBy to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetOrderByQueryParameter(orderBy []string) {
	o.OrderByQueryParameter = orderBy
}

// WithOsTypeQueryParameter adds the osType to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithOsTypeQueryParameter(osType *string) *NvmeNamespaceCollectionGetParams {
	o.SetOsTypeQueryParameter(osType)
	return o
}

// SetOsTypeQueryParameter adds the osType to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetOsTypeQueryParameter(osType *string) {
	o.OsTypeQueryParameter = osType
}

// WithReturnRecordsQueryParameter adds the returnRecords to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithReturnRecordsQueryParameter(returnRecords *bool) *NvmeNamespaceCollectionGetParams {
	o.SetReturnRecordsQueryParameter(returnRecords)
	return o
}

// SetReturnRecordsQueryParameter adds the returnRecords to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetReturnRecordsQueryParameter(returnRecords *bool) {
	o.ReturnRecordsQueryParameter = returnRecords
}

// WithReturnTimeoutQueryParameter adds the returnTimeout to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithReturnTimeoutQueryParameter(returnTimeout *int64) *NvmeNamespaceCollectionGetParams {
	o.SetReturnTimeoutQueryParameter(returnTimeout)
	return o
}

// SetReturnTimeoutQueryParameter adds the returnTimeout to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetReturnTimeoutQueryParameter(returnTimeout *int64) {
	o.ReturnTimeoutQueryParameter = returnTimeout
}

// WithSpaceBlockSizeQueryParameter adds the spaceBlockSize to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSpaceBlockSizeQueryParameter(spaceBlockSize *int64) *NvmeNamespaceCollectionGetParams {
	o.SetSpaceBlockSizeQueryParameter(spaceBlockSize)
	return o
}

// SetSpaceBlockSizeQueryParameter adds the spaceBlockSize to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSpaceBlockSizeQueryParameter(spaceBlockSize *int64) {
	o.SpaceBlockSizeQueryParameter = spaceBlockSize
}

// WithSpaceGuaranteeRequestedQueryParameter adds the spaceGuaranteeRequested to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSpaceGuaranteeRequestedQueryParameter(spaceGuaranteeRequested *bool) *NvmeNamespaceCollectionGetParams {
	o.SetSpaceGuaranteeRequestedQueryParameter(spaceGuaranteeRequested)
	return o
}

// SetSpaceGuaranteeRequestedQueryParameter adds the spaceGuaranteeRequested to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSpaceGuaranteeRequestedQueryParameter(spaceGuaranteeRequested *bool) {
	o.SpaceGuaranteeRequestedQueryParameter = spaceGuaranteeRequested
}

// WithSpaceGuaranteeReservedQueryParameter adds the spaceGuaranteeReserved to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSpaceGuaranteeReservedQueryParameter(spaceGuaranteeReserved *bool) *NvmeNamespaceCollectionGetParams {
	o.SetSpaceGuaranteeReservedQueryParameter(spaceGuaranteeReserved)
	return o
}

// SetSpaceGuaranteeReservedQueryParameter adds the spaceGuaranteeReserved to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSpaceGuaranteeReservedQueryParameter(spaceGuaranteeReserved *bool) {
	o.SpaceGuaranteeReservedQueryParameter = spaceGuaranteeReserved
}

// WithSpaceSizeQueryParameter adds the spaceSize to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSpaceSizeQueryParameter(spaceSize *int64) *NvmeNamespaceCollectionGetParams {
	o.SetSpaceSizeQueryParameter(spaceSize)
	return o
}

// SetSpaceSizeQueryParameter adds the spaceSize to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSpaceSizeQueryParameter(spaceSize *int64) {
	o.SpaceSizeQueryParameter = spaceSize
}

// WithSpaceUsedQueryParameter adds the spaceUsed to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSpaceUsedQueryParameter(spaceUsed *int64) *NvmeNamespaceCollectionGetParams {
	o.SetSpaceUsedQueryParameter(spaceUsed)
	return o
}

// SetSpaceUsedQueryParameter adds the spaceUsed to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSpaceUsedQueryParameter(spaceUsed *int64) {
	o.SpaceUsedQueryParameter = spaceUsed
}

// WithStatisticsIopsRawOtherQueryParameter adds the statisticsIopsRawOther to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithStatisticsIopsRawOtherQueryParameter(statisticsIopsRawOther *int64) *NvmeNamespaceCollectionGetParams {
	o.SetStatisticsIopsRawOtherQueryParameter(statisticsIopsRawOther)
	return o
}

// SetStatisticsIopsRawOtherQueryParameter adds the statisticsIopsRawOther to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetStatisticsIopsRawOtherQueryParameter(statisticsIopsRawOther *int64) {
	o.StatisticsIopsRawOtherQueryParameter = statisticsIopsRawOther
}

// WithStatisticsIopsRawReadQueryParameter adds the statisticsIopsRawRead to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithStatisticsIopsRawReadQueryParameter(statisticsIopsRawRead *int64) *NvmeNamespaceCollectionGetParams {
	o.SetStatisticsIopsRawReadQueryParameter(statisticsIopsRawRead)
	return o
}

// SetStatisticsIopsRawReadQueryParameter adds the statisticsIopsRawRead to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetStatisticsIopsRawReadQueryParameter(statisticsIopsRawRead *int64) {
	o.StatisticsIopsRawReadQueryParameter = statisticsIopsRawRead
}

// WithStatisticsIopsRawTotalQueryParameter adds the statisticsIopsRawTotal to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithStatisticsIopsRawTotalQueryParameter(statisticsIopsRawTotal *int64) *NvmeNamespaceCollectionGetParams {
	o.SetStatisticsIopsRawTotalQueryParameter(statisticsIopsRawTotal)
	return o
}

// SetStatisticsIopsRawTotalQueryParameter adds the statisticsIopsRawTotal to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetStatisticsIopsRawTotalQueryParameter(statisticsIopsRawTotal *int64) {
	o.StatisticsIopsRawTotalQueryParameter = statisticsIopsRawTotal
}

// WithStatisticsIopsRawWriteQueryParameter adds the statisticsIopsRawWrite to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithStatisticsIopsRawWriteQueryParameter(statisticsIopsRawWrite *int64) *NvmeNamespaceCollectionGetParams {
	o.SetStatisticsIopsRawWriteQueryParameter(statisticsIopsRawWrite)
	return o
}

// SetStatisticsIopsRawWriteQueryParameter adds the statisticsIopsRawWrite to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetStatisticsIopsRawWriteQueryParameter(statisticsIopsRawWrite *int64) {
	o.StatisticsIopsRawWriteQueryParameter = statisticsIopsRawWrite
}

// WithStatisticsLatencyRawOtherQueryParameter adds the statisticsLatencyRawOther to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithStatisticsLatencyRawOtherQueryParameter(statisticsLatencyRawOther *int64) *NvmeNamespaceCollectionGetParams {
	o.SetStatisticsLatencyRawOtherQueryParameter(statisticsLatencyRawOther)
	return o
}

// SetStatisticsLatencyRawOtherQueryParameter adds the statisticsLatencyRawOther to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetStatisticsLatencyRawOtherQueryParameter(statisticsLatencyRawOther *int64) {
	o.StatisticsLatencyRawOtherQueryParameter = statisticsLatencyRawOther
}

// WithStatisticsLatencyRawReadQueryParameter adds the statisticsLatencyRawRead to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithStatisticsLatencyRawReadQueryParameter(statisticsLatencyRawRead *int64) *NvmeNamespaceCollectionGetParams {
	o.SetStatisticsLatencyRawReadQueryParameter(statisticsLatencyRawRead)
	return o
}

// SetStatisticsLatencyRawReadQueryParameter adds the statisticsLatencyRawRead to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetStatisticsLatencyRawReadQueryParameter(statisticsLatencyRawRead *int64) {
	o.StatisticsLatencyRawReadQueryParameter = statisticsLatencyRawRead
}

// WithStatisticsLatencyRawTotalQueryParameter adds the statisticsLatencyRawTotal to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithStatisticsLatencyRawTotalQueryParameter(statisticsLatencyRawTotal *int64) *NvmeNamespaceCollectionGetParams {
	o.SetStatisticsLatencyRawTotalQueryParameter(statisticsLatencyRawTotal)
	return o
}

// SetStatisticsLatencyRawTotalQueryParameter adds the statisticsLatencyRawTotal to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetStatisticsLatencyRawTotalQueryParameter(statisticsLatencyRawTotal *int64) {
	o.StatisticsLatencyRawTotalQueryParameter = statisticsLatencyRawTotal
}

// WithStatisticsLatencyRawWriteQueryParameter adds the statisticsLatencyRawWrite to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithStatisticsLatencyRawWriteQueryParameter(statisticsLatencyRawWrite *int64) *NvmeNamespaceCollectionGetParams {
	o.SetStatisticsLatencyRawWriteQueryParameter(statisticsLatencyRawWrite)
	return o
}

// SetStatisticsLatencyRawWriteQueryParameter adds the statisticsLatencyRawWrite to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetStatisticsLatencyRawWriteQueryParameter(statisticsLatencyRawWrite *int64) {
	o.StatisticsLatencyRawWriteQueryParameter = statisticsLatencyRawWrite
}

// WithStatisticsStatusQueryParameter adds the statisticsStatus to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithStatisticsStatusQueryParameter(statisticsStatus *string) *NvmeNamespaceCollectionGetParams {
	o.SetStatisticsStatusQueryParameter(statisticsStatus)
	return o
}

// SetStatisticsStatusQueryParameter adds the statisticsStatus to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetStatisticsStatusQueryParameter(statisticsStatus *string) {
	o.StatisticsStatusQueryParameter = statisticsStatus
}

// WithStatisticsThroughputRawReadQueryParameter adds the statisticsThroughputRawRead to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithStatisticsThroughputRawReadQueryParameter(statisticsThroughputRawRead *int64) *NvmeNamespaceCollectionGetParams {
	o.SetStatisticsThroughputRawReadQueryParameter(statisticsThroughputRawRead)
	return o
}

// SetStatisticsThroughputRawReadQueryParameter adds the statisticsThroughputRawRead to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetStatisticsThroughputRawReadQueryParameter(statisticsThroughputRawRead *int64) {
	o.StatisticsThroughputRawReadQueryParameter = statisticsThroughputRawRead
}

// WithStatisticsThroughputRawTotalQueryParameter adds the statisticsThroughputRawTotal to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithStatisticsThroughputRawTotalQueryParameter(statisticsThroughputRawTotal *int64) *NvmeNamespaceCollectionGetParams {
	o.SetStatisticsThroughputRawTotalQueryParameter(statisticsThroughputRawTotal)
	return o
}

// SetStatisticsThroughputRawTotalQueryParameter adds the statisticsThroughputRawTotal to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetStatisticsThroughputRawTotalQueryParameter(statisticsThroughputRawTotal *int64) {
	o.StatisticsThroughputRawTotalQueryParameter = statisticsThroughputRawTotal
}

// WithStatisticsThroughputRawWriteQueryParameter adds the statisticsThroughputRawWrite to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithStatisticsThroughputRawWriteQueryParameter(statisticsThroughputRawWrite *int64) *NvmeNamespaceCollectionGetParams {
	o.SetStatisticsThroughputRawWriteQueryParameter(statisticsThroughputRawWrite)
	return o
}

// SetStatisticsThroughputRawWriteQueryParameter adds the statisticsThroughputRawWrite to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetStatisticsThroughputRawWriteQueryParameter(statisticsThroughputRawWrite *int64) {
	o.StatisticsThroughputRawWriteQueryParameter = statisticsThroughputRawWrite
}

// WithStatisticsTimestampQueryParameter adds the statisticsTimestamp to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithStatisticsTimestampQueryParameter(statisticsTimestamp *string) *NvmeNamespaceCollectionGetParams {
	o.SetStatisticsTimestampQueryParameter(statisticsTimestamp)
	return o
}

// SetStatisticsTimestampQueryParameter adds the statisticsTimestamp to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetStatisticsTimestampQueryParameter(statisticsTimestamp *string) {
	o.StatisticsTimestampQueryParameter = statisticsTimestamp
}

// WithStatusContainerStateQueryParameter adds the statusContainerState to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithStatusContainerStateQueryParameter(statusContainerState *string) *NvmeNamespaceCollectionGetParams {
	o.SetStatusContainerStateQueryParameter(statusContainerState)
	return o
}

// SetStatusContainerStateQueryParameter adds the statusContainerState to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetStatusContainerStateQueryParameter(statusContainerState *string) {
	o.StatusContainerStateQueryParameter = statusContainerState
}

// WithStatusMappedQueryParameter adds the statusMapped to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithStatusMappedQueryParameter(statusMapped *bool) *NvmeNamespaceCollectionGetParams {
	o.SetStatusMappedQueryParameter(statusMapped)
	return o
}

// SetStatusMappedQueryParameter adds the statusMapped to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetStatusMappedQueryParameter(statusMapped *bool) {
	o.StatusMappedQueryParameter = statusMapped
}

// WithStatusReadOnlyQueryParameter adds the statusReadOnly to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithStatusReadOnlyQueryParameter(statusReadOnly *bool) *NvmeNamespaceCollectionGetParams {
	o.SetStatusReadOnlyQueryParameter(statusReadOnly)
	return o
}

// SetStatusReadOnlyQueryParameter adds the statusReadOnly to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetStatusReadOnlyQueryParameter(statusReadOnly *bool) {
	o.StatusReadOnlyQueryParameter = statusReadOnly
}

// WithStatusStateQueryParameter adds the statusState to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithStatusStateQueryParameter(statusState *string) *NvmeNamespaceCollectionGetParams {
	o.SetStatusStateQueryParameter(statusState)
	return o
}

// SetStatusStateQueryParameter adds the statusState to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetStatusStateQueryParameter(statusState *string) {
	o.StatusStateQueryParameter = statusState
}

// WithSubsystemMapAnagrpIDQueryParameter adds the subsystemMapAnagrpid to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSubsystemMapAnagrpIDQueryParameter(subsystemMapAnagrpid *string) *NvmeNamespaceCollectionGetParams {
	o.SetSubsystemMapAnagrpIDQueryParameter(subsystemMapAnagrpid)
	return o
}

// SetSubsystemMapAnagrpIDQueryParameter adds the subsystemMapAnagrpid to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSubsystemMapAnagrpIDQueryParameter(subsystemMapAnagrpid *string) {
	o.SubsystemMapAnagrpIDQueryParameter = subsystemMapAnagrpid
}

// WithSubsystemMapNsIDQueryParameter adds the subsystemMapNsid to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSubsystemMapNsIDQueryParameter(subsystemMapNsid *string) *NvmeNamespaceCollectionGetParams {
	o.SetSubsystemMapNsIDQueryParameter(subsystemMapNsid)
	return o
}

// SetSubsystemMapNsIDQueryParameter adds the subsystemMapNsid to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSubsystemMapNsIDQueryParameter(subsystemMapNsid *string) {
	o.SubsystemMapNsIDQueryParameter = subsystemMapNsid
}

// WithSubsystemMapSubsystemNameQueryParameter adds the subsystemMapSubsystemName to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSubsystemMapSubsystemNameQueryParameter(subsystemMapSubsystemName *string) *NvmeNamespaceCollectionGetParams {
	o.SetSubsystemMapSubsystemNameQueryParameter(subsystemMapSubsystemName)
	return o
}

// SetSubsystemMapSubsystemNameQueryParameter adds the subsystemMapSubsystemName to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSubsystemMapSubsystemNameQueryParameter(subsystemMapSubsystemName *string) {
	o.SubsystemMapSubsystemNameQueryParameter = subsystemMapSubsystemName
}

// WithSubsystemMapSubsystemUUIDQueryParameter adds the subsystemMapSubsystemUUID to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSubsystemMapSubsystemUUIDQueryParameter(subsystemMapSubsystemUUID *string) *NvmeNamespaceCollectionGetParams {
	o.SetSubsystemMapSubsystemUUIDQueryParameter(subsystemMapSubsystemUUID)
	return o
}

// SetSubsystemMapSubsystemUUIDQueryParameter adds the subsystemMapSubsystemUuid to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSubsystemMapSubsystemUUIDQueryParameter(subsystemMapSubsystemUUID *string) {
	o.SubsystemMapSubsystemUUIDQueryParameter = subsystemMapSubsystemUUID
}

// WithSVMNameQueryParameter adds the svmName to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSVMNameQueryParameter(svmName *string) *NvmeNamespaceCollectionGetParams {
	o.SetSVMNameQueryParameter(svmName)
	return o
}

// SetSVMNameQueryParameter adds the svmName to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSVMNameQueryParameter(svmName *string) {
	o.SVMNameQueryParameter = svmName
}

// WithSVMUUIDQueryParameter adds the svmUUID to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithSVMUUIDQueryParameter(svmUUID *string) *NvmeNamespaceCollectionGetParams {
	o.SetSVMUUIDQueryParameter(svmUUID)
	return o
}

// SetSVMUUIDQueryParameter adds the svmUuid to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetSVMUUIDQueryParameter(svmUUID *string) {
	o.SVMUUIDQueryParameter = svmUUID
}

// WithUUIDQueryParameter adds the uuid to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) WithUUIDQueryParameter(uuid *string) *NvmeNamespaceCollectionGetParams {
	o.SetUUIDQueryParameter(uuid)
	return o
}

// SetUUIDQueryParameter adds the uuid to the nvme namespace collection get params
func (o *NvmeNamespaceCollectionGetParams) SetUUIDQueryParameter(uuid *string) {
	o.UUIDQueryParameter = uuid
}

// WriteToRequest writes these params to a swagger request
func (o *NvmeNamespaceCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AutoDeleteQueryParameter != nil {

		// query param auto_delete
		var qrAutoDelete bool

		if o.AutoDeleteQueryParameter != nil {
			qrAutoDelete = *o.AutoDeleteQueryParameter
		}
		qAutoDelete := swag.FormatBool(qrAutoDelete)
		if qAutoDelete != "" {

			if err := r.SetQueryParam("auto_delete", qAutoDelete); err != nil {
				return err
			}
		}
	}

	if o.CommentQueryParameter != nil {

		// query param comment
		var qrComment string

		if o.CommentQueryParameter != nil {
			qrComment = *o.CommentQueryParameter
		}
		qComment := qrComment
		if qComment != "" {

			if err := r.SetQueryParam("comment", qComment); err != nil {
				return err
			}
		}
	}

	if o.CreateTimeQueryParameter != nil {

		// query param create_time
		var qrCreateTime string

		if o.CreateTimeQueryParameter != nil {
			qrCreateTime = *o.CreateTimeQueryParameter
		}
		qCreateTime := qrCreateTime
		if qCreateTime != "" {

			if err := r.SetQueryParam("create_time", qCreateTime); err != nil {
				return err
			}
		}
	}

	if o.EnabledQueryParameter != nil {

		// query param enabled
		var qrEnabled bool

		if o.EnabledQueryParameter != nil {
			qrEnabled = *o.EnabledQueryParameter
		}
		qEnabled := swag.FormatBool(qrEnabled)
		if qEnabled != "" {

			if err := r.SetQueryParam("enabled", qEnabled); err != nil {
				return err
			}
		}
	}

	if o.FieldsQueryParameter != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.LocationNamespaceQueryParameter != nil {

		// query param location.namespace
		var qrLocationNamespace string

		if o.LocationNamespaceQueryParameter != nil {
			qrLocationNamespace = *o.LocationNamespaceQueryParameter
		}
		qLocationNamespace := qrLocationNamespace
		if qLocationNamespace != "" {

			if err := r.SetQueryParam("location.namespace", qLocationNamespace); err != nil {
				return err
			}
		}
	}

	if o.LocationQtreeIDQueryParameter != nil {

		// query param location.qtree.id
		var qrLocationQtreeID int64

		if o.LocationQtreeIDQueryParameter != nil {
			qrLocationQtreeID = *o.LocationQtreeIDQueryParameter
		}
		qLocationQtreeID := swag.FormatInt64(qrLocationQtreeID)
		if qLocationQtreeID != "" {

			if err := r.SetQueryParam("location.qtree.id", qLocationQtreeID); err != nil {
				return err
			}
		}
	}

	if o.LocationQtreeNameQueryParameter != nil {

		// query param location.qtree.name
		var qrLocationQtreeName string

		if o.LocationQtreeNameQueryParameter != nil {
			qrLocationQtreeName = *o.LocationQtreeNameQueryParameter
		}
		qLocationQtreeName := qrLocationQtreeName
		if qLocationQtreeName != "" {

			if err := r.SetQueryParam("location.qtree.name", qLocationQtreeName); err != nil {
				return err
			}
		}
	}

	if o.LocationVolumeNameQueryParameter != nil {

		// query param location.volume.name
		var qrLocationVolumeName string

		if o.LocationVolumeNameQueryParameter != nil {
			qrLocationVolumeName = *o.LocationVolumeNameQueryParameter
		}
		qLocationVolumeName := qrLocationVolumeName
		if qLocationVolumeName != "" {

			if err := r.SetQueryParam("location.volume.name", qLocationVolumeName); err != nil {
				return err
			}
		}
	}

	if o.LocationVolumeUUIDQueryParameter != nil {

		// query param location.volume.uuid
		var qrLocationVolumeUUID string

		if o.LocationVolumeUUIDQueryParameter != nil {
			qrLocationVolumeUUID = *o.LocationVolumeUUIDQueryParameter
		}
		qLocationVolumeUUID := qrLocationVolumeUUID
		if qLocationVolumeUUID != "" {

			if err := r.SetQueryParam("location.volume.uuid", qLocationVolumeUUID); err != nil {
				return err
			}
		}
	}

	if o.MaxRecordsQueryParameter != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecordsQueryParameter != nil {
			qrMaxRecords = *o.MaxRecordsQueryParameter
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.MetricDurationQueryParameter != nil {

		// query param metric.duration
		var qrMetricDuration string

		if o.MetricDurationQueryParameter != nil {
			qrMetricDuration = *o.MetricDurationQueryParameter
		}
		qMetricDuration := qrMetricDuration
		if qMetricDuration != "" {

			if err := r.SetQueryParam("metric.duration", qMetricDuration); err != nil {
				return err
			}
		}
	}

	if o.MetricIopsOtherQueryParameter != nil {

		// query param metric.iops.other
		var qrMetricIopsOther int64

		if o.MetricIopsOtherQueryParameter != nil {
			qrMetricIopsOther = *o.MetricIopsOtherQueryParameter
		}
		qMetricIopsOther := swag.FormatInt64(qrMetricIopsOther)
		if qMetricIopsOther != "" {

			if err := r.SetQueryParam("metric.iops.other", qMetricIopsOther); err != nil {
				return err
			}
		}
	}

	if o.MetricIopsReadQueryParameter != nil {

		// query param metric.iops.read
		var qrMetricIopsRead int64

		if o.MetricIopsReadQueryParameter != nil {
			qrMetricIopsRead = *o.MetricIopsReadQueryParameter
		}
		qMetricIopsRead := swag.FormatInt64(qrMetricIopsRead)
		if qMetricIopsRead != "" {

			if err := r.SetQueryParam("metric.iops.read", qMetricIopsRead); err != nil {
				return err
			}
		}
	}

	if o.MetricIopsTotalQueryParameter != nil {

		// query param metric.iops.total
		var qrMetricIopsTotal int64

		if o.MetricIopsTotalQueryParameter != nil {
			qrMetricIopsTotal = *o.MetricIopsTotalQueryParameter
		}
		qMetricIopsTotal := swag.FormatInt64(qrMetricIopsTotal)
		if qMetricIopsTotal != "" {

			if err := r.SetQueryParam("metric.iops.total", qMetricIopsTotal); err != nil {
				return err
			}
		}
	}

	if o.MetricIopsWriteQueryParameter != nil {

		// query param metric.iops.write
		var qrMetricIopsWrite int64

		if o.MetricIopsWriteQueryParameter != nil {
			qrMetricIopsWrite = *o.MetricIopsWriteQueryParameter
		}
		qMetricIopsWrite := swag.FormatInt64(qrMetricIopsWrite)
		if qMetricIopsWrite != "" {

			if err := r.SetQueryParam("metric.iops.write", qMetricIopsWrite); err != nil {
				return err
			}
		}
	}

	if o.MetricLatencyOtherQueryParameter != nil {

		// query param metric.latency.other
		var qrMetricLatencyOther int64

		if o.MetricLatencyOtherQueryParameter != nil {
			qrMetricLatencyOther = *o.MetricLatencyOtherQueryParameter
		}
		qMetricLatencyOther := swag.FormatInt64(qrMetricLatencyOther)
		if qMetricLatencyOther != "" {

			if err := r.SetQueryParam("metric.latency.other", qMetricLatencyOther); err != nil {
				return err
			}
		}
	}

	if o.MetricLatencyReadQueryParameter != nil {

		// query param metric.latency.read
		var qrMetricLatencyRead int64

		if o.MetricLatencyReadQueryParameter != nil {
			qrMetricLatencyRead = *o.MetricLatencyReadQueryParameter
		}
		qMetricLatencyRead := swag.FormatInt64(qrMetricLatencyRead)
		if qMetricLatencyRead != "" {

			if err := r.SetQueryParam("metric.latency.read", qMetricLatencyRead); err != nil {
				return err
			}
		}
	}

	if o.MetricLatencyTotalQueryParameter != nil {

		// query param metric.latency.total
		var qrMetricLatencyTotal int64

		if o.MetricLatencyTotalQueryParameter != nil {
			qrMetricLatencyTotal = *o.MetricLatencyTotalQueryParameter
		}
		qMetricLatencyTotal := swag.FormatInt64(qrMetricLatencyTotal)
		if qMetricLatencyTotal != "" {

			if err := r.SetQueryParam("metric.latency.total", qMetricLatencyTotal); err != nil {
				return err
			}
		}
	}

	if o.MetricLatencyWriteQueryParameter != nil {

		// query param metric.latency.write
		var qrMetricLatencyWrite int64

		if o.MetricLatencyWriteQueryParameter != nil {
			qrMetricLatencyWrite = *o.MetricLatencyWriteQueryParameter
		}
		qMetricLatencyWrite := swag.FormatInt64(qrMetricLatencyWrite)
		if qMetricLatencyWrite != "" {

			if err := r.SetQueryParam("metric.latency.write", qMetricLatencyWrite); err != nil {
				return err
			}
		}
	}

	if o.MetricStatusQueryParameter != nil {

		// query param metric.status
		var qrMetricStatus string

		if o.MetricStatusQueryParameter != nil {
			qrMetricStatus = *o.MetricStatusQueryParameter
		}
		qMetricStatus := qrMetricStatus
		if qMetricStatus != "" {

			if err := r.SetQueryParam("metric.status", qMetricStatus); err != nil {
				return err
			}
		}
	}

	if o.MetricThroughputReadQueryParameter != nil {

		// query param metric.throughput.read
		var qrMetricThroughputRead int64

		if o.MetricThroughputReadQueryParameter != nil {
			qrMetricThroughputRead = *o.MetricThroughputReadQueryParameter
		}
		qMetricThroughputRead := swag.FormatInt64(qrMetricThroughputRead)
		if qMetricThroughputRead != "" {

			if err := r.SetQueryParam("metric.throughput.read", qMetricThroughputRead); err != nil {
				return err
			}
		}
	}

	if o.MetricThroughputTotalQueryParameter != nil {

		// query param metric.throughput.total
		var qrMetricThroughputTotal int64

		if o.MetricThroughputTotalQueryParameter != nil {
			qrMetricThroughputTotal = *o.MetricThroughputTotalQueryParameter
		}
		qMetricThroughputTotal := swag.FormatInt64(qrMetricThroughputTotal)
		if qMetricThroughputTotal != "" {

			if err := r.SetQueryParam("metric.throughput.total", qMetricThroughputTotal); err != nil {
				return err
			}
		}
	}

	if o.MetricThroughputWriteQueryParameter != nil {

		// query param metric.throughput.write
		var qrMetricThroughputWrite int64

		if o.MetricThroughputWriteQueryParameter != nil {
			qrMetricThroughputWrite = *o.MetricThroughputWriteQueryParameter
		}
		qMetricThroughputWrite := swag.FormatInt64(qrMetricThroughputWrite)
		if qMetricThroughputWrite != "" {

			if err := r.SetQueryParam("metric.throughput.write", qMetricThroughputWrite); err != nil {
				return err
			}
		}
	}

	if o.MetricTimestampQueryParameter != nil {

		// query param metric.timestamp
		var qrMetricTimestamp string

		if o.MetricTimestampQueryParameter != nil {
			qrMetricTimestamp = *o.MetricTimestampQueryParameter
		}
		qMetricTimestamp := qrMetricTimestamp
		if qMetricTimestamp != "" {

			if err := r.SetQueryParam("metric.timestamp", qMetricTimestamp); err != nil {
				return err
			}
		}
	}

	if o.NameQueryParameter != nil {

		// query param name
		var qrName string

		if o.NameQueryParameter != nil {
			qrName = *o.NameQueryParameter
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.OrderByQueryParameter != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.OsTypeQueryParameter != nil {

		// query param os_type
		var qrOsType string

		if o.OsTypeQueryParameter != nil {
			qrOsType = *o.OsTypeQueryParameter
		}
		qOsType := qrOsType
		if qOsType != "" {

			if err := r.SetQueryParam("os_type", qOsType); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecordsQueryParameter != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecordsQueryParameter != nil {
			qrReturnRecords = *o.ReturnRecordsQueryParameter
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeoutQueryParameter != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeoutQueryParameter != nil {
			qrReturnTimeout = *o.ReturnTimeoutQueryParameter
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.SpaceBlockSizeQueryParameter != nil {

		// query param space.block_size
		var qrSpaceBlockSize int64

		if o.SpaceBlockSizeQueryParameter != nil {
			qrSpaceBlockSize = *o.SpaceBlockSizeQueryParameter
		}
		qSpaceBlockSize := swag.FormatInt64(qrSpaceBlockSize)
		if qSpaceBlockSize != "" {

			if err := r.SetQueryParam("space.block_size", qSpaceBlockSize); err != nil {
				return err
			}
		}
	}

	if o.SpaceGuaranteeRequestedQueryParameter != nil {

		// query param space.guarantee.requested
		var qrSpaceGuaranteeRequested bool

		if o.SpaceGuaranteeRequestedQueryParameter != nil {
			qrSpaceGuaranteeRequested = *o.SpaceGuaranteeRequestedQueryParameter
		}
		qSpaceGuaranteeRequested := swag.FormatBool(qrSpaceGuaranteeRequested)
		if qSpaceGuaranteeRequested != "" {

			if err := r.SetQueryParam("space.guarantee.requested", qSpaceGuaranteeRequested); err != nil {
				return err
			}
		}
	}

	if o.SpaceGuaranteeReservedQueryParameter != nil {

		// query param space.guarantee.reserved
		var qrSpaceGuaranteeReserved bool

		if o.SpaceGuaranteeReservedQueryParameter != nil {
			qrSpaceGuaranteeReserved = *o.SpaceGuaranteeReservedQueryParameter
		}
		qSpaceGuaranteeReserved := swag.FormatBool(qrSpaceGuaranteeReserved)
		if qSpaceGuaranteeReserved != "" {

			if err := r.SetQueryParam("space.guarantee.reserved", qSpaceGuaranteeReserved); err != nil {
				return err
			}
		}
	}

	if o.SpaceSizeQueryParameter != nil {

		// query param space.size
		var qrSpaceSize int64

		if o.SpaceSizeQueryParameter != nil {
			qrSpaceSize = *o.SpaceSizeQueryParameter
		}
		qSpaceSize := swag.FormatInt64(qrSpaceSize)
		if qSpaceSize != "" {

			if err := r.SetQueryParam("space.size", qSpaceSize); err != nil {
				return err
			}
		}
	}

	if o.SpaceUsedQueryParameter != nil {

		// query param space.used
		var qrSpaceUsed int64

		if o.SpaceUsedQueryParameter != nil {
			qrSpaceUsed = *o.SpaceUsedQueryParameter
		}
		qSpaceUsed := swag.FormatInt64(qrSpaceUsed)
		if qSpaceUsed != "" {

			if err := r.SetQueryParam("space.used", qSpaceUsed); err != nil {
				return err
			}
		}
	}

	if o.StatisticsIopsRawOtherQueryParameter != nil {

		// query param statistics.iops_raw.other
		var qrStatisticsIopsRawOther int64

		if o.StatisticsIopsRawOtherQueryParameter != nil {
			qrStatisticsIopsRawOther = *o.StatisticsIopsRawOtherQueryParameter
		}
		qStatisticsIopsRawOther := swag.FormatInt64(qrStatisticsIopsRawOther)
		if qStatisticsIopsRawOther != "" {

			if err := r.SetQueryParam("statistics.iops_raw.other", qStatisticsIopsRawOther); err != nil {
				return err
			}
		}
	}

	if o.StatisticsIopsRawReadQueryParameter != nil {

		// query param statistics.iops_raw.read
		var qrStatisticsIopsRawRead int64

		if o.StatisticsIopsRawReadQueryParameter != nil {
			qrStatisticsIopsRawRead = *o.StatisticsIopsRawReadQueryParameter
		}
		qStatisticsIopsRawRead := swag.FormatInt64(qrStatisticsIopsRawRead)
		if qStatisticsIopsRawRead != "" {

			if err := r.SetQueryParam("statistics.iops_raw.read", qStatisticsIopsRawRead); err != nil {
				return err
			}
		}
	}

	if o.StatisticsIopsRawTotalQueryParameter != nil {

		// query param statistics.iops_raw.total
		var qrStatisticsIopsRawTotal int64

		if o.StatisticsIopsRawTotalQueryParameter != nil {
			qrStatisticsIopsRawTotal = *o.StatisticsIopsRawTotalQueryParameter
		}
		qStatisticsIopsRawTotal := swag.FormatInt64(qrStatisticsIopsRawTotal)
		if qStatisticsIopsRawTotal != "" {

			if err := r.SetQueryParam("statistics.iops_raw.total", qStatisticsIopsRawTotal); err != nil {
				return err
			}
		}
	}

	if o.StatisticsIopsRawWriteQueryParameter != nil {

		// query param statistics.iops_raw.write
		var qrStatisticsIopsRawWrite int64

		if o.StatisticsIopsRawWriteQueryParameter != nil {
			qrStatisticsIopsRawWrite = *o.StatisticsIopsRawWriteQueryParameter
		}
		qStatisticsIopsRawWrite := swag.FormatInt64(qrStatisticsIopsRawWrite)
		if qStatisticsIopsRawWrite != "" {

			if err := r.SetQueryParam("statistics.iops_raw.write", qStatisticsIopsRawWrite); err != nil {
				return err
			}
		}
	}

	if o.StatisticsLatencyRawOtherQueryParameter != nil {

		// query param statistics.latency_raw.other
		var qrStatisticsLatencyRawOther int64

		if o.StatisticsLatencyRawOtherQueryParameter != nil {
			qrStatisticsLatencyRawOther = *o.StatisticsLatencyRawOtherQueryParameter
		}
		qStatisticsLatencyRawOther := swag.FormatInt64(qrStatisticsLatencyRawOther)
		if qStatisticsLatencyRawOther != "" {

			if err := r.SetQueryParam("statistics.latency_raw.other", qStatisticsLatencyRawOther); err != nil {
				return err
			}
		}
	}

	if o.StatisticsLatencyRawReadQueryParameter != nil {

		// query param statistics.latency_raw.read
		var qrStatisticsLatencyRawRead int64

		if o.StatisticsLatencyRawReadQueryParameter != nil {
			qrStatisticsLatencyRawRead = *o.StatisticsLatencyRawReadQueryParameter
		}
		qStatisticsLatencyRawRead := swag.FormatInt64(qrStatisticsLatencyRawRead)
		if qStatisticsLatencyRawRead != "" {

			if err := r.SetQueryParam("statistics.latency_raw.read", qStatisticsLatencyRawRead); err != nil {
				return err
			}
		}
	}

	if o.StatisticsLatencyRawTotalQueryParameter != nil {

		// query param statistics.latency_raw.total
		var qrStatisticsLatencyRawTotal int64

		if o.StatisticsLatencyRawTotalQueryParameter != nil {
			qrStatisticsLatencyRawTotal = *o.StatisticsLatencyRawTotalQueryParameter
		}
		qStatisticsLatencyRawTotal := swag.FormatInt64(qrStatisticsLatencyRawTotal)
		if qStatisticsLatencyRawTotal != "" {

			if err := r.SetQueryParam("statistics.latency_raw.total", qStatisticsLatencyRawTotal); err != nil {
				return err
			}
		}
	}

	if o.StatisticsLatencyRawWriteQueryParameter != nil {

		// query param statistics.latency_raw.write
		var qrStatisticsLatencyRawWrite int64

		if o.StatisticsLatencyRawWriteQueryParameter != nil {
			qrStatisticsLatencyRawWrite = *o.StatisticsLatencyRawWriteQueryParameter
		}
		qStatisticsLatencyRawWrite := swag.FormatInt64(qrStatisticsLatencyRawWrite)
		if qStatisticsLatencyRawWrite != "" {

			if err := r.SetQueryParam("statistics.latency_raw.write", qStatisticsLatencyRawWrite); err != nil {
				return err
			}
		}
	}

	if o.StatisticsStatusQueryParameter != nil {

		// query param statistics.status
		var qrStatisticsStatus string

		if o.StatisticsStatusQueryParameter != nil {
			qrStatisticsStatus = *o.StatisticsStatusQueryParameter
		}
		qStatisticsStatus := qrStatisticsStatus
		if qStatisticsStatus != "" {

			if err := r.SetQueryParam("statistics.status", qStatisticsStatus); err != nil {
				return err
			}
		}
	}

	if o.StatisticsThroughputRawReadQueryParameter != nil {

		// query param statistics.throughput_raw.read
		var qrStatisticsThroughputRawRead int64

		if o.StatisticsThroughputRawReadQueryParameter != nil {
			qrStatisticsThroughputRawRead = *o.StatisticsThroughputRawReadQueryParameter
		}
		qStatisticsThroughputRawRead := swag.FormatInt64(qrStatisticsThroughputRawRead)
		if qStatisticsThroughputRawRead != "" {

			if err := r.SetQueryParam("statistics.throughput_raw.read", qStatisticsThroughputRawRead); err != nil {
				return err
			}
		}
	}

	if o.StatisticsThroughputRawTotalQueryParameter != nil {

		// query param statistics.throughput_raw.total
		var qrStatisticsThroughputRawTotal int64

		if o.StatisticsThroughputRawTotalQueryParameter != nil {
			qrStatisticsThroughputRawTotal = *o.StatisticsThroughputRawTotalQueryParameter
		}
		qStatisticsThroughputRawTotal := swag.FormatInt64(qrStatisticsThroughputRawTotal)
		if qStatisticsThroughputRawTotal != "" {

			if err := r.SetQueryParam("statistics.throughput_raw.total", qStatisticsThroughputRawTotal); err != nil {
				return err
			}
		}
	}

	if o.StatisticsThroughputRawWriteQueryParameter != nil {

		// query param statistics.throughput_raw.write
		var qrStatisticsThroughputRawWrite int64

		if o.StatisticsThroughputRawWriteQueryParameter != nil {
			qrStatisticsThroughputRawWrite = *o.StatisticsThroughputRawWriteQueryParameter
		}
		qStatisticsThroughputRawWrite := swag.FormatInt64(qrStatisticsThroughputRawWrite)
		if qStatisticsThroughputRawWrite != "" {

			if err := r.SetQueryParam("statistics.throughput_raw.write", qStatisticsThroughputRawWrite); err != nil {
				return err
			}
		}
	}

	if o.StatisticsTimestampQueryParameter != nil {

		// query param statistics.timestamp
		var qrStatisticsTimestamp string

		if o.StatisticsTimestampQueryParameter != nil {
			qrStatisticsTimestamp = *o.StatisticsTimestampQueryParameter
		}
		qStatisticsTimestamp := qrStatisticsTimestamp
		if qStatisticsTimestamp != "" {

			if err := r.SetQueryParam("statistics.timestamp", qStatisticsTimestamp); err != nil {
				return err
			}
		}
	}

	if o.StatusContainerStateQueryParameter != nil {

		// query param status.container_state
		var qrStatusContainerState string

		if o.StatusContainerStateQueryParameter != nil {
			qrStatusContainerState = *o.StatusContainerStateQueryParameter
		}
		qStatusContainerState := qrStatusContainerState
		if qStatusContainerState != "" {

			if err := r.SetQueryParam("status.container_state", qStatusContainerState); err != nil {
				return err
			}
		}
	}

	if o.StatusMappedQueryParameter != nil {

		// query param status.mapped
		var qrStatusMapped bool

		if o.StatusMappedQueryParameter != nil {
			qrStatusMapped = *o.StatusMappedQueryParameter
		}
		qStatusMapped := swag.FormatBool(qrStatusMapped)
		if qStatusMapped != "" {

			if err := r.SetQueryParam("status.mapped", qStatusMapped); err != nil {
				return err
			}
		}
	}

	if o.StatusReadOnlyQueryParameter != nil {

		// query param status.read_only
		var qrStatusReadOnly bool

		if o.StatusReadOnlyQueryParameter != nil {
			qrStatusReadOnly = *o.StatusReadOnlyQueryParameter
		}
		qStatusReadOnly := swag.FormatBool(qrStatusReadOnly)
		if qStatusReadOnly != "" {

			if err := r.SetQueryParam("status.read_only", qStatusReadOnly); err != nil {
				return err
			}
		}
	}

	if o.StatusStateQueryParameter != nil {

		// query param status.state
		var qrStatusState string

		if o.StatusStateQueryParameter != nil {
			qrStatusState = *o.StatusStateQueryParameter
		}
		qStatusState := qrStatusState
		if qStatusState != "" {

			if err := r.SetQueryParam("status.state", qStatusState); err != nil {
				return err
			}
		}
	}

	if o.SubsystemMapAnagrpIDQueryParameter != nil {

		// query param subsystem_map.anagrpid
		var qrSubsystemMapAnagrpid string

		if o.SubsystemMapAnagrpIDQueryParameter != nil {
			qrSubsystemMapAnagrpid = *o.SubsystemMapAnagrpIDQueryParameter
		}
		qSubsystemMapAnagrpid := qrSubsystemMapAnagrpid
		if qSubsystemMapAnagrpid != "" {

			if err := r.SetQueryParam("subsystem_map.anagrpid", qSubsystemMapAnagrpid); err != nil {
				return err
			}
		}
	}

	if o.SubsystemMapNsIDQueryParameter != nil {

		// query param subsystem_map.nsid
		var qrSubsystemMapNsid string

		if o.SubsystemMapNsIDQueryParameter != nil {
			qrSubsystemMapNsid = *o.SubsystemMapNsIDQueryParameter
		}
		qSubsystemMapNsid := qrSubsystemMapNsid
		if qSubsystemMapNsid != "" {

			if err := r.SetQueryParam("subsystem_map.nsid", qSubsystemMapNsid); err != nil {
				return err
			}
		}
	}

	if o.SubsystemMapSubsystemNameQueryParameter != nil {

		// query param subsystem_map.subsystem.name
		var qrSubsystemMapSubsystemName string

		if o.SubsystemMapSubsystemNameQueryParameter != nil {
			qrSubsystemMapSubsystemName = *o.SubsystemMapSubsystemNameQueryParameter
		}
		qSubsystemMapSubsystemName := qrSubsystemMapSubsystemName
		if qSubsystemMapSubsystemName != "" {

			if err := r.SetQueryParam("subsystem_map.subsystem.name", qSubsystemMapSubsystemName); err != nil {
				return err
			}
		}
	}

	if o.SubsystemMapSubsystemUUIDQueryParameter != nil {

		// query param subsystem_map.subsystem.uuid
		var qrSubsystemMapSubsystemUUID string

		if o.SubsystemMapSubsystemUUIDQueryParameter != nil {
			qrSubsystemMapSubsystemUUID = *o.SubsystemMapSubsystemUUIDQueryParameter
		}
		qSubsystemMapSubsystemUUID := qrSubsystemMapSubsystemUUID
		if qSubsystemMapSubsystemUUID != "" {

			if err := r.SetQueryParam("subsystem_map.subsystem.uuid", qSubsystemMapSubsystemUUID); err != nil {
				return err
			}
		}
	}

	if o.SVMNameQueryParameter != nil {

		// query param svm.name
		var qrSvmName string

		if o.SVMNameQueryParameter != nil {
			qrSvmName = *o.SVMNameQueryParameter
		}
		qSvmName := qrSvmName
		if qSvmName != "" {

			if err := r.SetQueryParam("svm.name", qSvmName); err != nil {
				return err
			}
		}
	}

	if o.SVMUUIDQueryParameter != nil {

		// query param svm.uuid
		var qrSvmUUID string

		if o.SVMUUIDQueryParameter != nil {
			qrSvmUUID = *o.SVMUUIDQueryParameter
		}
		qSvmUUID := qrSvmUUID
		if qSvmUUID != "" {

			if err := r.SetQueryParam("svm.uuid", qSvmUUID); err != nil {
				return err
			}
		}
	}

	if o.UUIDQueryParameter != nil {

		// query param uuid
		var qrUUID string

		if o.UUIDQueryParameter != nil {
			qrUUID = *o.UUIDQueryParameter
		}
		qUUID := qrUUID
		if qUUID != "" {

			if err := r.SetQueryParam("uuid", qUUID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamNvmeNamespaceCollectionGet binds the parameter fields
func (o *NvmeNamespaceCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.FieldsQueryParameter

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamNvmeNamespaceCollectionGet binds the parameter order_by
func (o *NvmeNamespaceCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderByQueryParameter

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
