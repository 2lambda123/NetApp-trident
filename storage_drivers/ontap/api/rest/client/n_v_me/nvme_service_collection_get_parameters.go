// Code generated by go-swagger; DO NOT EDIT.

package n_v_me

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewNvmeServiceCollectionGetParams creates a new NvmeServiceCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewNvmeServiceCollectionGetParams() *NvmeServiceCollectionGetParams {
	return &NvmeServiceCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewNvmeServiceCollectionGetParamsWithTimeout creates a new NvmeServiceCollectionGetParams object
// with the ability to set a timeout on a request.
func NewNvmeServiceCollectionGetParamsWithTimeout(timeout time.Duration) *NvmeServiceCollectionGetParams {
	return &NvmeServiceCollectionGetParams{
		timeout: timeout,
	}
}

// NewNvmeServiceCollectionGetParamsWithContext creates a new NvmeServiceCollectionGetParams object
// with the ability to set a context for a request.
func NewNvmeServiceCollectionGetParamsWithContext(ctx context.Context) *NvmeServiceCollectionGetParams {
	return &NvmeServiceCollectionGetParams{
		Context: ctx,
	}
}

// NewNvmeServiceCollectionGetParamsWithHTTPClient creates a new NvmeServiceCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewNvmeServiceCollectionGetParamsWithHTTPClient(client *http.Client) *NvmeServiceCollectionGetParams {
	return &NvmeServiceCollectionGetParams{
		HTTPClient: client,
	}
}

/*
NvmeServiceCollectionGetParams contains all the parameters to send to the API endpoint

	for the nvme service collection get operation.

	Typically these are written to a http.Request.
*/
type NvmeServiceCollectionGetParams struct {

	/* Enabled.

	   Filter by enabled
	*/
	EnabledQueryParameter *bool

	/* Fields.

	   Specify the fields to return.
	*/
	FieldsQueryParameter []string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecordsQueryParameter *int64

	/* MetricDuration.

	   Filter by metric.duration
	*/
	MetricDurationQueryParameter *string

	/* MetricFcDuration.

	   Filter by metric.fc.duration
	*/
	MetricFcDurationQueryParameter *string

	/* MetricFcIopsOther.

	   Filter by metric.fc.iops.other
	*/
	MetricFcIopsOtherQueryParameter *int64

	/* MetricFcIopsRead.

	   Filter by metric.fc.iops.read
	*/
	MetricFcIopsReadQueryParameter *int64

	/* MetricFcIopsTotal.

	   Filter by metric.fc.iops.total
	*/
	MetricFcIopsTotalQueryParameter *int64

	/* MetricFcIopsWrite.

	   Filter by metric.fc.iops.write
	*/
	MetricFcIopsWriteQueryParameter *int64

	/* MetricFcLatencyOther.

	   Filter by metric.fc.latency.other
	*/
	MetricFcLatencyOtherQueryParameter *int64

	/* MetricFcLatencyRead.

	   Filter by metric.fc.latency.read
	*/
	MetricFcLatencyReadQueryParameter *int64

	/* MetricFcLatencyTotal.

	   Filter by metric.fc.latency.total
	*/
	MetricFcLatencyTotalQueryParameter *int64

	/* MetricFcLatencyWrite.

	   Filter by metric.fc.latency.write
	*/
	MetricFcLatencyWriteQueryParameter *int64

	/* MetricFcStatus.

	   Filter by metric.fc.status
	*/
	MetricFcStatusQueryParameter *string

	/* MetricFcThroughputRead.

	   Filter by metric.fc.throughput.read
	*/
	MetricFcThroughputReadQueryParameter *int64

	/* MetricFcThroughputTotal.

	   Filter by metric.fc.throughput.total
	*/
	MetricFcThroughputTotalQueryParameter *int64

	/* MetricFcThroughputWrite.

	   Filter by metric.fc.throughput.write
	*/
	MetricFcThroughputWriteQueryParameter *int64

	/* MetricFcTimestamp.

	   Filter by metric.fc.timestamp
	*/
	MetricFcTimestampQueryParameter *string

	/* MetricIopsOther.

	   Filter by metric.iops.other
	*/
	MetricIopsOtherQueryParameter *int64

	/* MetricIopsRead.

	   Filter by metric.iops.read
	*/
	MetricIopsReadQueryParameter *int64

	/* MetricIopsTotal.

	   Filter by metric.iops.total
	*/
	MetricIopsTotalQueryParameter *int64

	/* MetricIopsWrite.

	   Filter by metric.iops.write
	*/
	MetricIopsWriteQueryParameter *int64

	/* MetricLatencyOther.

	   Filter by metric.latency.other
	*/
	MetricLatencyOtherQueryParameter *int64

	/* MetricLatencyRead.

	   Filter by metric.latency.read
	*/
	MetricLatencyReadQueryParameter *int64

	/* MetricLatencyTotal.

	   Filter by metric.latency.total
	*/
	MetricLatencyTotalQueryParameter *int64

	/* MetricLatencyWrite.

	   Filter by metric.latency.write
	*/
	MetricLatencyWriteQueryParameter *int64

	/* MetricStatus.

	   Filter by metric.status
	*/
	MetricStatusQueryParameter *string

	/* MetricTCPDuration.

	   Filter by metric.tcp.duration
	*/
	MetricTCPDurationQueryParameter *string

	/* MetricTCPIopsOther.

	   Filter by metric.tcp.iops.other
	*/
	MetricTCPIopsOtherQueryParameter *int64

	/* MetricTCPIopsRead.

	   Filter by metric.tcp.iops.read
	*/
	MetricTCPIopsReadQueryParameter *int64

	/* MetricTCPIopsTotal.

	   Filter by metric.tcp.iops.total
	*/
	MetricTCPIopsTotalQueryParameter *int64

	/* MetricTCPIopsWrite.

	   Filter by metric.tcp.iops.write
	*/
	MetricTCPIopsWriteQueryParameter *int64

	/* MetricTCPLatencyOther.

	   Filter by metric.tcp.latency.other
	*/
	MetricTCPLatencyOtherQueryParameter *int64

	/* MetricTCPLatencyRead.

	   Filter by metric.tcp.latency.read
	*/
	MetricTCPLatencyReadQueryParameter *int64

	/* MetricTCPLatencyTotal.

	   Filter by metric.tcp.latency.total
	*/
	MetricTCPLatencyTotalQueryParameter *int64

	/* MetricTCPLatencyWrite.

	   Filter by metric.tcp.latency.write
	*/
	MetricTCPLatencyWriteQueryParameter *int64

	/* MetricTCPStatus.

	   Filter by metric.tcp.status
	*/
	MetricTCPStatusQueryParameter *string

	/* MetricTCPThroughputRead.

	   Filter by metric.tcp.throughput.read
	*/
	MetricTCPThroughputReadQueryParameter *int64

	/* MetricTCPThroughputTotal.

	   Filter by metric.tcp.throughput.total
	*/
	MetricTCPThroughputTotalQueryParameter *int64

	/* MetricTCPThroughputWrite.

	   Filter by metric.tcp.throughput.write
	*/
	MetricTCPThroughputWriteQueryParameter *int64

	/* MetricTCPTimestamp.

	   Filter by metric.tcp.timestamp
	*/
	MetricTCPTimestampQueryParameter *string

	/* MetricThroughputRead.

	   Filter by metric.throughput.read
	*/
	MetricThroughputReadQueryParameter *int64

	/* MetricThroughputTotal.

	   Filter by metric.throughput.total
	*/
	MetricThroughputTotalQueryParameter *int64

	/* MetricThroughputWrite.

	   Filter by metric.throughput.write
	*/
	MetricThroughputWriteQueryParameter *int64

	/* MetricTimestamp.

	   Filter by metric.timestamp
	*/
	MetricTimestampQueryParameter *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderByQueryParameter []string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecordsQueryParameter *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeoutQueryParameter *int64

	/* StatisticsFcIopsRawOther.

	   Filter by statistics.fc.iops_raw.other
	*/
	StatisticsFcIopsRawOtherQueryParameter *int64

	/* StatisticsFcIopsRawRead.

	   Filter by statistics.fc.iops_raw.read
	*/
	StatisticsFcIopsRawReadQueryParameter *int64

	/* StatisticsFcIopsRawTotal.

	   Filter by statistics.fc.iops_raw.total
	*/
	StatisticsFcIopsRawTotalQueryParameter *int64

	/* StatisticsFcIopsRawWrite.

	   Filter by statistics.fc.iops_raw.write
	*/
	StatisticsFcIopsRawWriteQueryParameter *int64

	/* StatisticsFcLatencyRawOther.

	   Filter by statistics.fc.latency_raw.other
	*/
	StatisticsFcLatencyRawOtherQueryParameter *int64

	/* StatisticsFcLatencyRawRead.

	   Filter by statistics.fc.latency_raw.read
	*/
	StatisticsFcLatencyRawReadQueryParameter *int64

	/* StatisticsFcLatencyRawTotal.

	   Filter by statistics.fc.latency_raw.total
	*/
	StatisticsFcLatencyRawTotalQueryParameter *int64

	/* StatisticsFcLatencyRawWrite.

	   Filter by statistics.fc.latency_raw.write
	*/
	StatisticsFcLatencyRawWriteQueryParameter *int64

	/* StatisticsFcStatus.

	   Filter by statistics.fc.status
	*/
	StatisticsFcStatusQueryParameter *string

	/* StatisticsFcThroughputRawRead.

	   Filter by statistics.fc.throughput_raw.read
	*/
	StatisticsFcThroughputRawReadQueryParameter *int64

	/* StatisticsFcThroughputRawTotal.

	   Filter by statistics.fc.throughput_raw.total
	*/
	StatisticsFcThroughputRawTotalQueryParameter *int64

	/* StatisticsFcThroughputRawWrite.

	   Filter by statistics.fc.throughput_raw.write
	*/
	StatisticsFcThroughputRawWriteQueryParameter *int64

	/* StatisticsFcTimestamp.

	   Filter by statistics.fc.timestamp
	*/
	StatisticsFcTimestampQueryParameter *string

	/* StatisticsIopsRawOther.

	   Filter by statistics.iops_raw.other
	*/
	StatisticsIopsRawOtherQueryParameter *int64

	/* StatisticsIopsRawRead.

	   Filter by statistics.iops_raw.read
	*/
	StatisticsIopsRawReadQueryParameter *int64

	/* StatisticsIopsRawTotal.

	   Filter by statistics.iops_raw.total
	*/
	StatisticsIopsRawTotalQueryParameter *int64

	/* StatisticsIopsRawWrite.

	   Filter by statistics.iops_raw.write
	*/
	StatisticsIopsRawWriteQueryParameter *int64

	/* StatisticsLatencyRawOther.

	   Filter by statistics.latency_raw.other
	*/
	StatisticsLatencyRawOtherQueryParameter *int64

	/* StatisticsLatencyRawRead.

	   Filter by statistics.latency_raw.read
	*/
	StatisticsLatencyRawReadQueryParameter *int64

	/* StatisticsLatencyRawTotal.

	   Filter by statistics.latency_raw.total
	*/
	StatisticsLatencyRawTotalQueryParameter *int64

	/* StatisticsLatencyRawWrite.

	   Filter by statistics.latency_raw.write
	*/
	StatisticsLatencyRawWriteQueryParameter *int64

	/* StatisticsStatus.

	   Filter by statistics.status
	*/
	StatisticsStatusQueryParameter *string

	/* StatisticsTCPIopsRawOther.

	   Filter by statistics.tcp.iops_raw.other
	*/
	StatisticsTCPIopsRawOtherQueryParameter *int64

	/* StatisticsTCPIopsRawRead.

	   Filter by statistics.tcp.iops_raw.read
	*/
	StatisticsTCPIopsRawReadQueryParameter *int64

	/* StatisticsTCPIopsRawTotal.

	   Filter by statistics.tcp.iops_raw.total
	*/
	StatisticsTCPIopsRawTotalQueryParameter *int64

	/* StatisticsTCPIopsRawWrite.

	   Filter by statistics.tcp.iops_raw.write
	*/
	StatisticsTCPIopsRawWriteQueryParameter *int64

	/* StatisticsTCPLatencyRawOther.

	   Filter by statistics.tcp.latency_raw.other
	*/
	StatisticsTCPLatencyRawOtherQueryParameter *int64

	/* StatisticsTCPLatencyRawRead.

	   Filter by statistics.tcp.latency_raw.read
	*/
	StatisticsTCPLatencyRawReadQueryParameter *int64

	/* StatisticsTCPLatencyRawTotal.

	   Filter by statistics.tcp.latency_raw.total
	*/
	StatisticsTCPLatencyRawTotalQueryParameter *int64

	/* StatisticsTCPLatencyRawWrite.

	   Filter by statistics.tcp.latency_raw.write
	*/
	StatisticsTCPLatencyRawWriteQueryParameter *int64

	/* StatisticsTCPStatus.

	   Filter by statistics.tcp.status
	*/
	StatisticsTCPStatusQueryParameter *string

	/* StatisticsTCPThroughputRawRead.

	   Filter by statistics.tcp.throughput_raw.read
	*/
	StatisticsTCPThroughputRawReadQueryParameter *int64

	/* StatisticsTCPThroughputRawTotal.

	   Filter by statistics.tcp.throughput_raw.total
	*/
	StatisticsTCPThroughputRawTotalQueryParameter *int64

	/* StatisticsTCPThroughputRawWrite.

	   Filter by statistics.tcp.throughput_raw.write
	*/
	StatisticsTCPThroughputRawWriteQueryParameter *int64

	/* StatisticsTCPTimestamp.

	   Filter by statistics.tcp.timestamp
	*/
	StatisticsTCPTimestampQueryParameter *string

	/* StatisticsThroughputRawRead.

	   Filter by statistics.throughput_raw.read
	*/
	StatisticsThroughputRawReadQueryParameter *int64

	/* StatisticsThroughputRawTotal.

	   Filter by statistics.throughput_raw.total
	*/
	StatisticsThroughputRawTotalQueryParameter *int64

	/* StatisticsThroughputRawWrite.

	   Filter by statistics.throughput_raw.write
	*/
	StatisticsThroughputRawWriteQueryParameter *int64

	/* StatisticsTimestamp.

	   Filter by statistics.timestamp
	*/
	StatisticsTimestampQueryParameter *string

	/* SvmName.

	   Filter by svm.name
	*/
	SVMNameQueryParameter *string

	/* SvmUUID.

	   Filter by svm.uuid
	*/
	SVMUUIDQueryParameter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the nvme service collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NvmeServiceCollectionGetParams) WithDefaults() *NvmeServiceCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the nvme service collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NvmeServiceCollectionGetParams) SetDefaults() {
	var (
		returnRecordsQueryParameterDefault = bool(true)

		returnTimeoutQueryParameterDefault = int64(15)
	)

	val := NvmeServiceCollectionGetParams{
		ReturnRecordsQueryParameter: &returnRecordsQueryParameterDefault,
		ReturnTimeoutQueryParameter: &returnTimeoutQueryParameterDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithTimeout(timeout time.Duration) *NvmeServiceCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithContext(ctx context.Context) *NvmeServiceCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithHTTPClient(client *http.Client) *NvmeServiceCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEnabledQueryParameter adds the enabled to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithEnabledQueryParameter(enabled *bool) *NvmeServiceCollectionGetParams {
	o.SetEnabledQueryParameter(enabled)
	return o
}

// SetEnabledQueryParameter adds the enabled to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetEnabledQueryParameter(enabled *bool) {
	o.EnabledQueryParameter = enabled
}

// WithFieldsQueryParameter adds the fields to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithFieldsQueryParameter(fields []string) *NvmeServiceCollectionGetParams {
	o.SetFieldsQueryParameter(fields)
	return o
}

// SetFieldsQueryParameter adds the fields to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetFieldsQueryParameter(fields []string) {
	o.FieldsQueryParameter = fields
}

// WithMaxRecordsQueryParameter adds the maxRecords to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithMaxRecordsQueryParameter(maxRecords *int64) *NvmeServiceCollectionGetParams {
	o.SetMaxRecordsQueryParameter(maxRecords)
	return o
}

// SetMaxRecordsQueryParameter adds the maxRecords to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetMaxRecordsQueryParameter(maxRecords *int64) {
	o.MaxRecordsQueryParameter = maxRecords
}

// WithMetricDurationQueryParameter adds the metricDuration to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithMetricDurationQueryParameter(metricDuration *string) *NvmeServiceCollectionGetParams {
	o.SetMetricDurationQueryParameter(metricDuration)
	return o
}

// SetMetricDurationQueryParameter adds the metricDuration to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetMetricDurationQueryParameter(metricDuration *string) {
	o.MetricDurationQueryParameter = metricDuration
}

// WithMetricFcDurationQueryParameter adds the metricFcDuration to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithMetricFcDurationQueryParameter(metricFcDuration *string) *NvmeServiceCollectionGetParams {
	o.SetMetricFcDurationQueryParameter(metricFcDuration)
	return o
}

// SetMetricFcDurationQueryParameter adds the metricFcDuration to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetMetricFcDurationQueryParameter(metricFcDuration *string) {
	o.MetricFcDurationQueryParameter = metricFcDuration
}

// WithMetricFcIopsOtherQueryParameter adds the metricFcIopsOther to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithMetricFcIopsOtherQueryParameter(metricFcIopsOther *int64) *NvmeServiceCollectionGetParams {
	o.SetMetricFcIopsOtherQueryParameter(metricFcIopsOther)
	return o
}

// SetMetricFcIopsOtherQueryParameter adds the metricFcIopsOther to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetMetricFcIopsOtherQueryParameter(metricFcIopsOther *int64) {
	o.MetricFcIopsOtherQueryParameter = metricFcIopsOther
}

// WithMetricFcIopsReadQueryParameter adds the metricFcIopsRead to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithMetricFcIopsReadQueryParameter(metricFcIopsRead *int64) *NvmeServiceCollectionGetParams {
	o.SetMetricFcIopsReadQueryParameter(metricFcIopsRead)
	return o
}

// SetMetricFcIopsReadQueryParameter adds the metricFcIopsRead to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetMetricFcIopsReadQueryParameter(metricFcIopsRead *int64) {
	o.MetricFcIopsReadQueryParameter = metricFcIopsRead
}

// WithMetricFcIopsTotalQueryParameter adds the metricFcIopsTotal to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithMetricFcIopsTotalQueryParameter(metricFcIopsTotal *int64) *NvmeServiceCollectionGetParams {
	o.SetMetricFcIopsTotalQueryParameter(metricFcIopsTotal)
	return o
}

// SetMetricFcIopsTotalQueryParameter adds the metricFcIopsTotal to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetMetricFcIopsTotalQueryParameter(metricFcIopsTotal *int64) {
	o.MetricFcIopsTotalQueryParameter = metricFcIopsTotal
}

// WithMetricFcIopsWriteQueryParameter adds the metricFcIopsWrite to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithMetricFcIopsWriteQueryParameter(metricFcIopsWrite *int64) *NvmeServiceCollectionGetParams {
	o.SetMetricFcIopsWriteQueryParameter(metricFcIopsWrite)
	return o
}

// SetMetricFcIopsWriteQueryParameter adds the metricFcIopsWrite to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetMetricFcIopsWriteQueryParameter(metricFcIopsWrite *int64) {
	o.MetricFcIopsWriteQueryParameter = metricFcIopsWrite
}

// WithMetricFcLatencyOtherQueryParameter adds the metricFcLatencyOther to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithMetricFcLatencyOtherQueryParameter(metricFcLatencyOther *int64) *NvmeServiceCollectionGetParams {
	o.SetMetricFcLatencyOtherQueryParameter(metricFcLatencyOther)
	return o
}

// SetMetricFcLatencyOtherQueryParameter adds the metricFcLatencyOther to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetMetricFcLatencyOtherQueryParameter(metricFcLatencyOther *int64) {
	o.MetricFcLatencyOtherQueryParameter = metricFcLatencyOther
}

// WithMetricFcLatencyReadQueryParameter adds the metricFcLatencyRead to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithMetricFcLatencyReadQueryParameter(metricFcLatencyRead *int64) *NvmeServiceCollectionGetParams {
	o.SetMetricFcLatencyReadQueryParameter(metricFcLatencyRead)
	return o
}

// SetMetricFcLatencyReadQueryParameter adds the metricFcLatencyRead to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetMetricFcLatencyReadQueryParameter(metricFcLatencyRead *int64) {
	o.MetricFcLatencyReadQueryParameter = metricFcLatencyRead
}

// WithMetricFcLatencyTotalQueryParameter adds the metricFcLatencyTotal to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithMetricFcLatencyTotalQueryParameter(metricFcLatencyTotal *int64) *NvmeServiceCollectionGetParams {
	o.SetMetricFcLatencyTotalQueryParameter(metricFcLatencyTotal)
	return o
}

// SetMetricFcLatencyTotalQueryParameter adds the metricFcLatencyTotal to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetMetricFcLatencyTotalQueryParameter(metricFcLatencyTotal *int64) {
	o.MetricFcLatencyTotalQueryParameter = metricFcLatencyTotal
}

// WithMetricFcLatencyWriteQueryParameter adds the metricFcLatencyWrite to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithMetricFcLatencyWriteQueryParameter(metricFcLatencyWrite *int64) *NvmeServiceCollectionGetParams {
	o.SetMetricFcLatencyWriteQueryParameter(metricFcLatencyWrite)
	return o
}

// SetMetricFcLatencyWriteQueryParameter adds the metricFcLatencyWrite to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetMetricFcLatencyWriteQueryParameter(metricFcLatencyWrite *int64) {
	o.MetricFcLatencyWriteQueryParameter = metricFcLatencyWrite
}

// WithMetricFcStatusQueryParameter adds the metricFcStatus to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithMetricFcStatusQueryParameter(metricFcStatus *string) *NvmeServiceCollectionGetParams {
	o.SetMetricFcStatusQueryParameter(metricFcStatus)
	return o
}

// SetMetricFcStatusQueryParameter adds the metricFcStatus to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetMetricFcStatusQueryParameter(metricFcStatus *string) {
	o.MetricFcStatusQueryParameter = metricFcStatus
}

// WithMetricFcThroughputReadQueryParameter adds the metricFcThroughputRead to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithMetricFcThroughputReadQueryParameter(metricFcThroughputRead *int64) *NvmeServiceCollectionGetParams {
	o.SetMetricFcThroughputReadQueryParameter(metricFcThroughputRead)
	return o
}

// SetMetricFcThroughputReadQueryParameter adds the metricFcThroughputRead to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetMetricFcThroughputReadQueryParameter(metricFcThroughputRead *int64) {
	o.MetricFcThroughputReadQueryParameter = metricFcThroughputRead
}

// WithMetricFcThroughputTotalQueryParameter adds the metricFcThroughputTotal to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithMetricFcThroughputTotalQueryParameter(metricFcThroughputTotal *int64) *NvmeServiceCollectionGetParams {
	o.SetMetricFcThroughputTotalQueryParameter(metricFcThroughputTotal)
	return o
}

// SetMetricFcThroughputTotalQueryParameter adds the metricFcThroughputTotal to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetMetricFcThroughputTotalQueryParameter(metricFcThroughputTotal *int64) {
	o.MetricFcThroughputTotalQueryParameter = metricFcThroughputTotal
}

// WithMetricFcThroughputWriteQueryParameter adds the metricFcThroughputWrite to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithMetricFcThroughputWriteQueryParameter(metricFcThroughputWrite *int64) *NvmeServiceCollectionGetParams {
	o.SetMetricFcThroughputWriteQueryParameter(metricFcThroughputWrite)
	return o
}

// SetMetricFcThroughputWriteQueryParameter adds the metricFcThroughputWrite to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetMetricFcThroughputWriteQueryParameter(metricFcThroughputWrite *int64) {
	o.MetricFcThroughputWriteQueryParameter = metricFcThroughputWrite
}

// WithMetricFcTimestampQueryParameter adds the metricFcTimestamp to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithMetricFcTimestampQueryParameter(metricFcTimestamp *string) *NvmeServiceCollectionGetParams {
	o.SetMetricFcTimestampQueryParameter(metricFcTimestamp)
	return o
}

// SetMetricFcTimestampQueryParameter adds the metricFcTimestamp to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetMetricFcTimestampQueryParameter(metricFcTimestamp *string) {
	o.MetricFcTimestampQueryParameter = metricFcTimestamp
}

// WithMetricIopsOtherQueryParameter adds the metricIopsOther to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithMetricIopsOtherQueryParameter(metricIopsOther *int64) *NvmeServiceCollectionGetParams {
	o.SetMetricIopsOtherQueryParameter(metricIopsOther)
	return o
}

// SetMetricIopsOtherQueryParameter adds the metricIopsOther to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetMetricIopsOtherQueryParameter(metricIopsOther *int64) {
	o.MetricIopsOtherQueryParameter = metricIopsOther
}

// WithMetricIopsReadQueryParameter adds the metricIopsRead to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithMetricIopsReadQueryParameter(metricIopsRead *int64) *NvmeServiceCollectionGetParams {
	o.SetMetricIopsReadQueryParameter(metricIopsRead)
	return o
}

// SetMetricIopsReadQueryParameter adds the metricIopsRead to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetMetricIopsReadQueryParameter(metricIopsRead *int64) {
	o.MetricIopsReadQueryParameter = metricIopsRead
}

// WithMetricIopsTotalQueryParameter adds the metricIopsTotal to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithMetricIopsTotalQueryParameter(metricIopsTotal *int64) *NvmeServiceCollectionGetParams {
	o.SetMetricIopsTotalQueryParameter(metricIopsTotal)
	return o
}

// SetMetricIopsTotalQueryParameter adds the metricIopsTotal to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetMetricIopsTotalQueryParameter(metricIopsTotal *int64) {
	o.MetricIopsTotalQueryParameter = metricIopsTotal
}

// WithMetricIopsWriteQueryParameter adds the metricIopsWrite to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithMetricIopsWriteQueryParameter(metricIopsWrite *int64) *NvmeServiceCollectionGetParams {
	o.SetMetricIopsWriteQueryParameter(metricIopsWrite)
	return o
}

// SetMetricIopsWriteQueryParameter adds the metricIopsWrite to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetMetricIopsWriteQueryParameter(metricIopsWrite *int64) {
	o.MetricIopsWriteQueryParameter = metricIopsWrite
}

// WithMetricLatencyOtherQueryParameter adds the metricLatencyOther to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithMetricLatencyOtherQueryParameter(metricLatencyOther *int64) *NvmeServiceCollectionGetParams {
	o.SetMetricLatencyOtherQueryParameter(metricLatencyOther)
	return o
}

// SetMetricLatencyOtherQueryParameter adds the metricLatencyOther to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetMetricLatencyOtherQueryParameter(metricLatencyOther *int64) {
	o.MetricLatencyOtherQueryParameter = metricLatencyOther
}

// WithMetricLatencyReadQueryParameter adds the metricLatencyRead to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithMetricLatencyReadQueryParameter(metricLatencyRead *int64) *NvmeServiceCollectionGetParams {
	o.SetMetricLatencyReadQueryParameter(metricLatencyRead)
	return o
}

// SetMetricLatencyReadQueryParameter adds the metricLatencyRead to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetMetricLatencyReadQueryParameter(metricLatencyRead *int64) {
	o.MetricLatencyReadQueryParameter = metricLatencyRead
}

// WithMetricLatencyTotalQueryParameter adds the metricLatencyTotal to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithMetricLatencyTotalQueryParameter(metricLatencyTotal *int64) *NvmeServiceCollectionGetParams {
	o.SetMetricLatencyTotalQueryParameter(metricLatencyTotal)
	return o
}

// SetMetricLatencyTotalQueryParameter adds the metricLatencyTotal to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetMetricLatencyTotalQueryParameter(metricLatencyTotal *int64) {
	o.MetricLatencyTotalQueryParameter = metricLatencyTotal
}

// WithMetricLatencyWriteQueryParameter adds the metricLatencyWrite to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithMetricLatencyWriteQueryParameter(metricLatencyWrite *int64) *NvmeServiceCollectionGetParams {
	o.SetMetricLatencyWriteQueryParameter(metricLatencyWrite)
	return o
}

// SetMetricLatencyWriteQueryParameter adds the metricLatencyWrite to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetMetricLatencyWriteQueryParameter(metricLatencyWrite *int64) {
	o.MetricLatencyWriteQueryParameter = metricLatencyWrite
}

// WithMetricStatusQueryParameter adds the metricStatus to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithMetricStatusQueryParameter(metricStatus *string) *NvmeServiceCollectionGetParams {
	o.SetMetricStatusQueryParameter(metricStatus)
	return o
}

// SetMetricStatusQueryParameter adds the metricStatus to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetMetricStatusQueryParameter(metricStatus *string) {
	o.MetricStatusQueryParameter = metricStatus
}

// WithMetricTCPDurationQueryParameter adds the metricTCPDuration to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithMetricTCPDurationQueryParameter(metricTCPDuration *string) *NvmeServiceCollectionGetParams {
	o.SetMetricTCPDurationQueryParameter(metricTCPDuration)
	return o
}

// SetMetricTCPDurationQueryParameter adds the metricTcpDuration to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetMetricTCPDurationQueryParameter(metricTCPDuration *string) {
	o.MetricTCPDurationQueryParameter = metricTCPDuration
}

// WithMetricTCPIopsOtherQueryParameter adds the metricTCPIopsOther to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithMetricTCPIopsOtherQueryParameter(metricTCPIopsOther *int64) *NvmeServiceCollectionGetParams {
	o.SetMetricTCPIopsOtherQueryParameter(metricTCPIopsOther)
	return o
}

// SetMetricTCPIopsOtherQueryParameter adds the metricTcpIopsOther to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetMetricTCPIopsOtherQueryParameter(metricTCPIopsOther *int64) {
	o.MetricTCPIopsOtherQueryParameter = metricTCPIopsOther
}

// WithMetricTCPIopsReadQueryParameter adds the metricTCPIopsRead to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithMetricTCPIopsReadQueryParameter(metricTCPIopsRead *int64) *NvmeServiceCollectionGetParams {
	o.SetMetricTCPIopsReadQueryParameter(metricTCPIopsRead)
	return o
}

// SetMetricTCPIopsReadQueryParameter adds the metricTcpIopsRead to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetMetricTCPIopsReadQueryParameter(metricTCPIopsRead *int64) {
	o.MetricTCPIopsReadQueryParameter = metricTCPIopsRead
}

// WithMetricTCPIopsTotalQueryParameter adds the metricTCPIopsTotal to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithMetricTCPIopsTotalQueryParameter(metricTCPIopsTotal *int64) *NvmeServiceCollectionGetParams {
	o.SetMetricTCPIopsTotalQueryParameter(metricTCPIopsTotal)
	return o
}

// SetMetricTCPIopsTotalQueryParameter adds the metricTcpIopsTotal to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetMetricTCPIopsTotalQueryParameter(metricTCPIopsTotal *int64) {
	o.MetricTCPIopsTotalQueryParameter = metricTCPIopsTotal
}

// WithMetricTCPIopsWriteQueryParameter adds the metricTCPIopsWrite to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithMetricTCPIopsWriteQueryParameter(metricTCPIopsWrite *int64) *NvmeServiceCollectionGetParams {
	o.SetMetricTCPIopsWriteQueryParameter(metricTCPIopsWrite)
	return o
}

// SetMetricTCPIopsWriteQueryParameter adds the metricTcpIopsWrite to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetMetricTCPIopsWriteQueryParameter(metricTCPIopsWrite *int64) {
	o.MetricTCPIopsWriteQueryParameter = metricTCPIopsWrite
}

// WithMetricTCPLatencyOtherQueryParameter adds the metricTCPLatencyOther to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithMetricTCPLatencyOtherQueryParameter(metricTCPLatencyOther *int64) *NvmeServiceCollectionGetParams {
	o.SetMetricTCPLatencyOtherQueryParameter(metricTCPLatencyOther)
	return o
}

// SetMetricTCPLatencyOtherQueryParameter adds the metricTcpLatencyOther to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetMetricTCPLatencyOtherQueryParameter(metricTCPLatencyOther *int64) {
	o.MetricTCPLatencyOtherQueryParameter = metricTCPLatencyOther
}

// WithMetricTCPLatencyReadQueryParameter adds the metricTCPLatencyRead to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithMetricTCPLatencyReadQueryParameter(metricTCPLatencyRead *int64) *NvmeServiceCollectionGetParams {
	o.SetMetricTCPLatencyReadQueryParameter(metricTCPLatencyRead)
	return o
}

// SetMetricTCPLatencyReadQueryParameter adds the metricTcpLatencyRead to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetMetricTCPLatencyReadQueryParameter(metricTCPLatencyRead *int64) {
	o.MetricTCPLatencyReadQueryParameter = metricTCPLatencyRead
}

// WithMetricTCPLatencyTotalQueryParameter adds the metricTCPLatencyTotal to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithMetricTCPLatencyTotalQueryParameter(metricTCPLatencyTotal *int64) *NvmeServiceCollectionGetParams {
	o.SetMetricTCPLatencyTotalQueryParameter(metricTCPLatencyTotal)
	return o
}

// SetMetricTCPLatencyTotalQueryParameter adds the metricTcpLatencyTotal to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetMetricTCPLatencyTotalQueryParameter(metricTCPLatencyTotal *int64) {
	o.MetricTCPLatencyTotalQueryParameter = metricTCPLatencyTotal
}

// WithMetricTCPLatencyWriteQueryParameter adds the metricTCPLatencyWrite to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithMetricTCPLatencyWriteQueryParameter(metricTCPLatencyWrite *int64) *NvmeServiceCollectionGetParams {
	o.SetMetricTCPLatencyWriteQueryParameter(metricTCPLatencyWrite)
	return o
}

// SetMetricTCPLatencyWriteQueryParameter adds the metricTcpLatencyWrite to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetMetricTCPLatencyWriteQueryParameter(metricTCPLatencyWrite *int64) {
	o.MetricTCPLatencyWriteQueryParameter = metricTCPLatencyWrite
}

// WithMetricTCPStatusQueryParameter adds the metricTCPStatus to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithMetricTCPStatusQueryParameter(metricTCPStatus *string) *NvmeServiceCollectionGetParams {
	o.SetMetricTCPStatusQueryParameter(metricTCPStatus)
	return o
}

// SetMetricTCPStatusQueryParameter adds the metricTcpStatus to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetMetricTCPStatusQueryParameter(metricTCPStatus *string) {
	o.MetricTCPStatusQueryParameter = metricTCPStatus
}

// WithMetricTCPThroughputReadQueryParameter adds the metricTCPThroughputRead to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithMetricTCPThroughputReadQueryParameter(metricTCPThroughputRead *int64) *NvmeServiceCollectionGetParams {
	o.SetMetricTCPThroughputReadQueryParameter(metricTCPThroughputRead)
	return o
}

// SetMetricTCPThroughputReadQueryParameter adds the metricTcpThroughputRead to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetMetricTCPThroughputReadQueryParameter(metricTCPThroughputRead *int64) {
	o.MetricTCPThroughputReadQueryParameter = metricTCPThroughputRead
}

// WithMetricTCPThroughputTotalQueryParameter adds the metricTCPThroughputTotal to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithMetricTCPThroughputTotalQueryParameter(metricTCPThroughputTotal *int64) *NvmeServiceCollectionGetParams {
	o.SetMetricTCPThroughputTotalQueryParameter(metricTCPThroughputTotal)
	return o
}

// SetMetricTCPThroughputTotalQueryParameter adds the metricTcpThroughputTotal to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetMetricTCPThroughputTotalQueryParameter(metricTCPThroughputTotal *int64) {
	o.MetricTCPThroughputTotalQueryParameter = metricTCPThroughputTotal
}

// WithMetricTCPThroughputWriteQueryParameter adds the metricTCPThroughputWrite to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithMetricTCPThroughputWriteQueryParameter(metricTCPThroughputWrite *int64) *NvmeServiceCollectionGetParams {
	o.SetMetricTCPThroughputWriteQueryParameter(metricTCPThroughputWrite)
	return o
}

// SetMetricTCPThroughputWriteQueryParameter adds the metricTcpThroughputWrite to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetMetricTCPThroughputWriteQueryParameter(metricTCPThroughputWrite *int64) {
	o.MetricTCPThroughputWriteQueryParameter = metricTCPThroughputWrite
}

// WithMetricTCPTimestampQueryParameter adds the metricTCPTimestamp to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithMetricTCPTimestampQueryParameter(metricTCPTimestamp *string) *NvmeServiceCollectionGetParams {
	o.SetMetricTCPTimestampQueryParameter(metricTCPTimestamp)
	return o
}

// SetMetricTCPTimestampQueryParameter adds the metricTcpTimestamp to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetMetricTCPTimestampQueryParameter(metricTCPTimestamp *string) {
	o.MetricTCPTimestampQueryParameter = metricTCPTimestamp
}

// WithMetricThroughputReadQueryParameter adds the metricThroughputRead to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithMetricThroughputReadQueryParameter(metricThroughputRead *int64) *NvmeServiceCollectionGetParams {
	o.SetMetricThroughputReadQueryParameter(metricThroughputRead)
	return o
}

// SetMetricThroughputReadQueryParameter adds the metricThroughputRead to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetMetricThroughputReadQueryParameter(metricThroughputRead *int64) {
	o.MetricThroughputReadQueryParameter = metricThroughputRead
}

// WithMetricThroughputTotalQueryParameter adds the metricThroughputTotal to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithMetricThroughputTotalQueryParameter(metricThroughputTotal *int64) *NvmeServiceCollectionGetParams {
	o.SetMetricThroughputTotalQueryParameter(metricThroughputTotal)
	return o
}

// SetMetricThroughputTotalQueryParameter adds the metricThroughputTotal to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetMetricThroughputTotalQueryParameter(metricThroughputTotal *int64) {
	o.MetricThroughputTotalQueryParameter = metricThroughputTotal
}

// WithMetricThroughputWriteQueryParameter adds the metricThroughputWrite to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithMetricThroughputWriteQueryParameter(metricThroughputWrite *int64) *NvmeServiceCollectionGetParams {
	o.SetMetricThroughputWriteQueryParameter(metricThroughputWrite)
	return o
}

// SetMetricThroughputWriteQueryParameter adds the metricThroughputWrite to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetMetricThroughputWriteQueryParameter(metricThroughputWrite *int64) {
	o.MetricThroughputWriteQueryParameter = metricThroughputWrite
}

// WithMetricTimestampQueryParameter adds the metricTimestamp to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithMetricTimestampQueryParameter(metricTimestamp *string) *NvmeServiceCollectionGetParams {
	o.SetMetricTimestampQueryParameter(metricTimestamp)
	return o
}

// SetMetricTimestampQueryParameter adds the metricTimestamp to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetMetricTimestampQueryParameter(metricTimestamp *string) {
	o.MetricTimestampQueryParameter = metricTimestamp
}

// WithOrderByQueryParameter adds the orderBy to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithOrderByQueryParameter(orderBy []string) *NvmeServiceCollectionGetParams {
	o.SetOrderByQueryParameter(orderBy)
	return o
}

// SetOrderByQueryParameter adds the orderBy to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetOrderByQueryParameter(orderBy []string) {
	o.OrderByQueryParameter = orderBy
}

// WithReturnRecordsQueryParameter adds the returnRecords to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithReturnRecordsQueryParameter(returnRecords *bool) *NvmeServiceCollectionGetParams {
	o.SetReturnRecordsQueryParameter(returnRecords)
	return o
}

// SetReturnRecordsQueryParameter adds the returnRecords to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetReturnRecordsQueryParameter(returnRecords *bool) {
	o.ReturnRecordsQueryParameter = returnRecords
}

// WithReturnTimeoutQueryParameter adds the returnTimeout to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithReturnTimeoutQueryParameter(returnTimeout *int64) *NvmeServiceCollectionGetParams {
	o.SetReturnTimeoutQueryParameter(returnTimeout)
	return o
}

// SetReturnTimeoutQueryParameter adds the returnTimeout to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetReturnTimeoutQueryParameter(returnTimeout *int64) {
	o.ReturnTimeoutQueryParameter = returnTimeout
}

// WithStatisticsFcIopsRawOtherQueryParameter adds the statisticsFcIopsRawOther to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithStatisticsFcIopsRawOtherQueryParameter(statisticsFcIopsRawOther *int64) *NvmeServiceCollectionGetParams {
	o.SetStatisticsFcIopsRawOtherQueryParameter(statisticsFcIopsRawOther)
	return o
}

// SetStatisticsFcIopsRawOtherQueryParameter adds the statisticsFcIopsRawOther to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetStatisticsFcIopsRawOtherQueryParameter(statisticsFcIopsRawOther *int64) {
	o.StatisticsFcIopsRawOtherQueryParameter = statisticsFcIopsRawOther
}

// WithStatisticsFcIopsRawReadQueryParameter adds the statisticsFcIopsRawRead to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithStatisticsFcIopsRawReadQueryParameter(statisticsFcIopsRawRead *int64) *NvmeServiceCollectionGetParams {
	o.SetStatisticsFcIopsRawReadQueryParameter(statisticsFcIopsRawRead)
	return o
}

// SetStatisticsFcIopsRawReadQueryParameter adds the statisticsFcIopsRawRead to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetStatisticsFcIopsRawReadQueryParameter(statisticsFcIopsRawRead *int64) {
	o.StatisticsFcIopsRawReadQueryParameter = statisticsFcIopsRawRead
}

// WithStatisticsFcIopsRawTotalQueryParameter adds the statisticsFcIopsRawTotal to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithStatisticsFcIopsRawTotalQueryParameter(statisticsFcIopsRawTotal *int64) *NvmeServiceCollectionGetParams {
	o.SetStatisticsFcIopsRawTotalQueryParameter(statisticsFcIopsRawTotal)
	return o
}

// SetStatisticsFcIopsRawTotalQueryParameter adds the statisticsFcIopsRawTotal to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetStatisticsFcIopsRawTotalQueryParameter(statisticsFcIopsRawTotal *int64) {
	o.StatisticsFcIopsRawTotalQueryParameter = statisticsFcIopsRawTotal
}

// WithStatisticsFcIopsRawWriteQueryParameter adds the statisticsFcIopsRawWrite to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithStatisticsFcIopsRawWriteQueryParameter(statisticsFcIopsRawWrite *int64) *NvmeServiceCollectionGetParams {
	o.SetStatisticsFcIopsRawWriteQueryParameter(statisticsFcIopsRawWrite)
	return o
}

// SetStatisticsFcIopsRawWriteQueryParameter adds the statisticsFcIopsRawWrite to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetStatisticsFcIopsRawWriteQueryParameter(statisticsFcIopsRawWrite *int64) {
	o.StatisticsFcIopsRawWriteQueryParameter = statisticsFcIopsRawWrite
}

// WithStatisticsFcLatencyRawOtherQueryParameter adds the statisticsFcLatencyRawOther to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithStatisticsFcLatencyRawOtherQueryParameter(statisticsFcLatencyRawOther *int64) *NvmeServiceCollectionGetParams {
	o.SetStatisticsFcLatencyRawOtherQueryParameter(statisticsFcLatencyRawOther)
	return o
}

// SetStatisticsFcLatencyRawOtherQueryParameter adds the statisticsFcLatencyRawOther to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetStatisticsFcLatencyRawOtherQueryParameter(statisticsFcLatencyRawOther *int64) {
	o.StatisticsFcLatencyRawOtherQueryParameter = statisticsFcLatencyRawOther
}

// WithStatisticsFcLatencyRawReadQueryParameter adds the statisticsFcLatencyRawRead to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithStatisticsFcLatencyRawReadQueryParameter(statisticsFcLatencyRawRead *int64) *NvmeServiceCollectionGetParams {
	o.SetStatisticsFcLatencyRawReadQueryParameter(statisticsFcLatencyRawRead)
	return o
}

// SetStatisticsFcLatencyRawReadQueryParameter adds the statisticsFcLatencyRawRead to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetStatisticsFcLatencyRawReadQueryParameter(statisticsFcLatencyRawRead *int64) {
	o.StatisticsFcLatencyRawReadQueryParameter = statisticsFcLatencyRawRead
}

// WithStatisticsFcLatencyRawTotalQueryParameter adds the statisticsFcLatencyRawTotal to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithStatisticsFcLatencyRawTotalQueryParameter(statisticsFcLatencyRawTotal *int64) *NvmeServiceCollectionGetParams {
	o.SetStatisticsFcLatencyRawTotalQueryParameter(statisticsFcLatencyRawTotal)
	return o
}

// SetStatisticsFcLatencyRawTotalQueryParameter adds the statisticsFcLatencyRawTotal to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetStatisticsFcLatencyRawTotalQueryParameter(statisticsFcLatencyRawTotal *int64) {
	o.StatisticsFcLatencyRawTotalQueryParameter = statisticsFcLatencyRawTotal
}

// WithStatisticsFcLatencyRawWriteQueryParameter adds the statisticsFcLatencyRawWrite to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithStatisticsFcLatencyRawWriteQueryParameter(statisticsFcLatencyRawWrite *int64) *NvmeServiceCollectionGetParams {
	o.SetStatisticsFcLatencyRawWriteQueryParameter(statisticsFcLatencyRawWrite)
	return o
}

// SetStatisticsFcLatencyRawWriteQueryParameter adds the statisticsFcLatencyRawWrite to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetStatisticsFcLatencyRawWriteQueryParameter(statisticsFcLatencyRawWrite *int64) {
	o.StatisticsFcLatencyRawWriteQueryParameter = statisticsFcLatencyRawWrite
}

// WithStatisticsFcStatusQueryParameter adds the statisticsFcStatus to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithStatisticsFcStatusQueryParameter(statisticsFcStatus *string) *NvmeServiceCollectionGetParams {
	o.SetStatisticsFcStatusQueryParameter(statisticsFcStatus)
	return o
}

// SetStatisticsFcStatusQueryParameter adds the statisticsFcStatus to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetStatisticsFcStatusQueryParameter(statisticsFcStatus *string) {
	o.StatisticsFcStatusQueryParameter = statisticsFcStatus
}

// WithStatisticsFcThroughputRawReadQueryParameter adds the statisticsFcThroughputRawRead to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithStatisticsFcThroughputRawReadQueryParameter(statisticsFcThroughputRawRead *int64) *NvmeServiceCollectionGetParams {
	o.SetStatisticsFcThroughputRawReadQueryParameter(statisticsFcThroughputRawRead)
	return o
}

// SetStatisticsFcThroughputRawReadQueryParameter adds the statisticsFcThroughputRawRead to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetStatisticsFcThroughputRawReadQueryParameter(statisticsFcThroughputRawRead *int64) {
	o.StatisticsFcThroughputRawReadQueryParameter = statisticsFcThroughputRawRead
}

// WithStatisticsFcThroughputRawTotalQueryParameter adds the statisticsFcThroughputRawTotal to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithStatisticsFcThroughputRawTotalQueryParameter(statisticsFcThroughputRawTotal *int64) *NvmeServiceCollectionGetParams {
	o.SetStatisticsFcThroughputRawTotalQueryParameter(statisticsFcThroughputRawTotal)
	return o
}

// SetStatisticsFcThroughputRawTotalQueryParameter adds the statisticsFcThroughputRawTotal to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetStatisticsFcThroughputRawTotalQueryParameter(statisticsFcThroughputRawTotal *int64) {
	o.StatisticsFcThroughputRawTotalQueryParameter = statisticsFcThroughputRawTotal
}

// WithStatisticsFcThroughputRawWriteQueryParameter adds the statisticsFcThroughputRawWrite to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithStatisticsFcThroughputRawWriteQueryParameter(statisticsFcThroughputRawWrite *int64) *NvmeServiceCollectionGetParams {
	o.SetStatisticsFcThroughputRawWriteQueryParameter(statisticsFcThroughputRawWrite)
	return o
}

// SetStatisticsFcThroughputRawWriteQueryParameter adds the statisticsFcThroughputRawWrite to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetStatisticsFcThroughputRawWriteQueryParameter(statisticsFcThroughputRawWrite *int64) {
	o.StatisticsFcThroughputRawWriteQueryParameter = statisticsFcThroughputRawWrite
}

// WithStatisticsFcTimestampQueryParameter adds the statisticsFcTimestamp to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithStatisticsFcTimestampQueryParameter(statisticsFcTimestamp *string) *NvmeServiceCollectionGetParams {
	o.SetStatisticsFcTimestampQueryParameter(statisticsFcTimestamp)
	return o
}

// SetStatisticsFcTimestampQueryParameter adds the statisticsFcTimestamp to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetStatisticsFcTimestampQueryParameter(statisticsFcTimestamp *string) {
	o.StatisticsFcTimestampQueryParameter = statisticsFcTimestamp
}

// WithStatisticsIopsRawOtherQueryParameter adds the statisticsIopsRawOther to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithStatisticsIopsRawOtherQueryParameter(statisticsIopsRawOther *int64) *NvmeServiceCollectionGetParams {
	o.SetStatisticsIopsRawOtherQueryParameter(statisticsIopsRawOther)
	return o
}

// SetStatisticsIopsRawOtherQueryParameter adds the statisticsIopsRawOther to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetStatisticsIopsRawOtherQueryParameter(statisticsIopsRawOther *int64) {
	o.StatisticsIopsRawOtherQueryParameter = statisticsIopsRawOther
}

// WithStatisticsIopsRawReadQueryParameter adds the statisticsIopsRawRead to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithStatisticsIopsRawReadQueryParameter(statisticsIopsRawRead *int64) *NvmeServiceCollectionGetParams {
	o.SetStatisticsIopsRawReadQueryParameter(statisticsIopsRawRead)
	return o
}

// SetStatisticsIopsRawReadQueryParameter adds the statisticsIopsRawRead to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetStatisticsIopsRawReadQueryParameter(statisticsIopsRawRead *int64) {
	o.StatisticsIopsRawReadQueryParameter = statisticsIopsRawRead
}

// WithStatisticsIopsRawTotalQueryParameter adds the statisticsIopsRawTotal to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithStatisticsIopsRawTotalQueryParameter(statisticsIopsRawTotal *int64) *NvmeServiceCollectionGetParams {
	o.SetStatisticsIopsRawTotalQueryParameter(statisticsIopsRawTotal)
	return o
}

// SetStatisticsIopsRawTotalQueryParameter adds the statisticsIopsRawTotal to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetStatisticsIopsRawTotalQueryParameter(statisticsIopsRawTotal *int64) {
	o.StatisticsIopsRawTotalQueryParameter = statisticsIopsRawTotal
}

// WithStatisticsIopsRawWriteQueryParameter adds the statisticsIopsRawWrite to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithStatisticsIopsRawWriteQueryParameter(statisticsIopsRawWrite *int64) *NvmeServiceCollectionGetParams {
	o.SetStatisticsIopsRawWriteQueryParameter(statisticsIopsRawWrite)
	return o
}

// SetStatisticsIopsRawWriteQueryParameter adds the statisticsIopsRawWrite to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetStatisticsIopsRawWriteQueryParameter(statisticsIopsRawWrite *int64) {
	o.StatisticsIopsRawWriteQueryParameter = statisticsIopsRawWrite
}

// WithStatisticsLatencyRawOtherQueryParameter adds the statisticsLatencyRawOther to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithStatisticsLatencyRawOtherQueryParameter(statisticsLatencyRawOther *int64) *NvmeServiceCollectionGetParams {
	o.SetStatisticsLatencyRawOtherQueryParameter(statisticsLatencyRawOther)
	return o
}

// SetStatisticsLatencyRawOtherQueryParameter adds the statisticsLatencyRawOther to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetStatisticsLatencyRawOtherQueryParameter(statisticsLatencyRawOther *int64) {
	o.StatisticsLatencyRawOtherQueryParameter = statisticsLatencyRawOther
}

// WithStatisticsLatencyRawReadQueryParameter adds the statisticsLatencyRawRead to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithStatisticsLatencyRawReadQueryParameter(statisticsLatencyRawRead *int64) *NvmeServiceCollectionGetParams {
	o.SetStatisticsLatencyRawReadQueryParameter(statisticsLatencyRawRead)
	return o
}

// SetStatisticsLatencyRawReadQueryParameter adds the statisticsLatencyRawRead to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetStatisticsLatencyRawReadQueryParameter(statisticsLatencyRawRead *int64) {
	o.StatisticsLatencyRawReadQueryParameter = statisticsLatencyRawRead
}

// WithStatisticsLatencyRawTotalQueryParameter adds the statisticsLatencyRawTotal to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithStatisticsLatencyRawTotalQueryParameter(statisticsLatencyRawTotal *int64) *NvmeServiceCollectionGetParams {
	o.SetStatisticsLatencyRawTotalQueryParameter(statisticsLatencyRawTotal)
	return o
}

// SetStatisticsLatencyRawTotalQueryParameter adds the statisticsLatencyRawTotal to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetStatisticsLatencyRawTotalQueryParameter(statisticsLatencyRawTotal *int64) {
	o.StatisticsLatencyRawTotalQueryParameter = statisticsLatencyRawTotal
}

// WithStatisticsLatencyRawWriteQueryParameter adds the statisticsLatencyRawWrite to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithStatisticsLatencyRawWriteQueryParameter(statisticsLatencyRawWrite *int64) *NvmeServiceCollectionGetParams {
	o.SetStatisticsLatencyRawWriteQueryParameter(statisticsLatencyRawWrite)
	return o
}

// SetStatisticsLatencyRawWriteQueryParameter adds the statisticsLatencyRawWrite to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetStatisticsLatencyRawWriteQueryParameter(statisticsLatencyRawWrite *int64) {
	o.StatisticsLatencyRawWriteQueryParameter = statisticsLatencyRawWrite
}

// WithStatisticsStatusQueryParameter adds the statisticsStatus to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithStatisticsStatusQueryParameter(statisticsStatus *string) *NvmeServiceCollectionGetParams {
	o.SetStatisticsStatusQueryParameter(statisticsStatus)
	return o
}

// SetStatisticsStatusQueryParameter adds the statisticsStatus to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetStatisticsStatusQueryParameter(statisticsStatus *string) {
	o.StatisticsStatusQueryParameter = statisticsStatus
}

// WithStatisticsTCPIopsRawOtherQueryParameter adds the statisticsTCPIopsRawOther to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithStatisticsTCPIopsRawOtherQueryParameter(statisticsTCPIopsRawOther *int64) *NvmeServiceCollectionGetParams {
	o.SetStatisticsTCPIopsRawOtherQueryParameter(statisticsTCPIopsRawOther)
	return o
}

// SetStatisticsTCPIopsRawOtherQueryParameter adds the statisticsTcpIopsRawOther to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetStatisticsTCPIopsRawOtherQueryParameter(statisticsTCPIopsRawOther *int64) {
	o.StatisticsTCPIopsRawOtherQueryParameter = statisticsTCPIopsRawOther
}

// WithStatisticsTCPIopsRawReadQueryParameter adds the statisticsTCPIopsRawRead to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithStatisticsTCPIopsRawReadQueryParameter(statisticsTCPIopsRawRead *int64) *NvmeServiceCollectionGetParams {
	o.SetStatisticsTCPIopsRawReadQueryParameter(statisticsTCPIopsRawRead)
	return o
}

// SetStatisticsTCPIopsRawReadQueryParameter adds the statisticsTcpIopsRawRead to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetStatisticsTCPIopsRawReadQueryParameter(statisticsTCPIopsRawRead *int64) {
	o.StatisticsTCPIopsRawReadQueryParameter = statisticsTCPIopsRawRead
}

// WithStatisticsTCPIopsRawTotalQueryParameter adds the statisticsTCPIopsRawTotal to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithStatisticsTCPIopsRawTotalQueryParameter(statisticsTCPIopsRawTotal *int64) *NvmeServiceCollectionGetParams {
	o.SetStatisticsTCPIopsRawTotalQueryParameter(statisticsTCPIopsRawTotal)
	return o
}

// SetStatisticsTCPIopsRawTotalQueryParameter adds the statisticsTcpIopsRawTotal to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetStatisticsTCPIopsRawTotalQueryParameter(statisticsTCPIopsRawTotal *int64) {
	o.StatisticsTCPIopsRawTotalQueryParameter = statisticsTCPIopsRawTotal
}

// WithStatisticsTCPIopsRawWriteQueryParameter adds the statisticsTCPIopsRawWrite to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithStatisticsTCPIopsRawWriteQueryParameter(statisticsTCPIopsRawWrite *int64) *NvmeServiceCollectionGetParams {
	o.SetStatisticsTCPIopsRawWriteQueryParameter(statisticsTCPIopsRawWrite)
	return o
}

// SetStatisticsTCPIopsRawWriteQueryParameter adds the statisticsTcpIopsRawWrite to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetStatisticsTCPIopsRawWriteQueryParameter(statisticsTCPIopsRawWrite *int64) {
	o.StatisticsTCPIopsRawWriteQueryParameter = statisticsTCPIopsRawWrite
}

// WithStatisticsTCPLatencyRawOtherQueryParameter adds the statisticsTCPLatencyRawOther to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithStatisticsTCPLatencyRawOtherQueryParameter(statisticsTCPLatencyRawOther *int64) *NvmeServiceCollectionGetParams {
	o.SetStatisticsTCPLatencyRawOtherQueryParameter(statisticsTCPLatencyRawOther)
	return o
}

// SetStatisticsTCPLatencyRawOtherQueryParameter adds the statisticsTcpLatencyRawOther to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetStatisticsTCPLatencyRawOtherQueryParameter(statisticsTCPLatencyRawOther *int64) {
	o.StatisticsTCPLatencyRawOtherQueryParameter = statisticsTCPLatencyRawOther
}

// WithStatisticsTCPLatencyRawReadQueryParameter adds the statisticsTCPLatencyRawRead to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithStatisticsTCPLatencyRawReadQueryParameter(statisticsTCPLatencyRawRead *int64) *NvmeServiceCollectionGetParams {
	o.SetStatisticsTCPLatencyRawReadQueryParameter(statisticsTCPLatencyRawRead)
	return o
}

// SetStatisticsTCPLatencyRawReadQueryParameter adds the statisticsTcpLatencyRawRead to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetStatisticsTCPLatencyRawReadQueryParameter(statisticsTCPLatencyRawRead *int64) {
	o.StatisticsTCPLatencyRawReadQueryParameter = statisticsTCPLatencyRawRead
}

// WithStatisticsTCPLatencyRawTotalQueryParameter adds the statisticsTCPLatencyRawTotal to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithStatisticsTCPLatencyRawTotalQueryParameter(statisticsTCPLatencyRawTotal *int64) *NvmeServiceCollectionGetParams {
	o.SetStatisticsTCPLatencyRawTotalQueryParameter(statisticsTCPLatencyRawTotal)
	return o
}

// SetStatisticsTCPLatencyRawTotalQueryParameter adds the statisticsTcpLatencyRawTotal to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetStatisticsTCPLatencyRawTotalQueryParameter(statisticsTCPLatencyRawTotal *int64) {
	o.StatisticsTCPLatencyRawTotalQueryParameter = statisticsTCPLatencyRawTotal
}

// WithStatisticsTCPLatencyRawWriteQueryParameter adds the statisticsTCPLatencyRawWrite to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithStatisticsTCPLatencyRawWriteQueryParameter(statisticsTCPLatencyRawWrite *int64) *NvmeServiceCollectionGetParams {
	o.SetStatisticsTCPLatencyRawWriteQueryParameter(statisticsTCPLatencyRawWrite)
	return o
}

// SetStatisticsTCPLatencyRawWriteQueryParameter adds the statisticsTcpLatencyRawWrite to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetStatisticsTCPLatencyRawWriteQueryParameter(statisticsTCPLatencyRawWrite *int64) {
	o.StatisticsTCPLatencyRawWriteQueryParameter = statisticsTCPLatencyRawWrite
}

// WithStatisticsTCPStatusQueryParameter adds the statisticsTCPStatus to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithStatisticsTCPStatusQueryParameter(statisticsTCPStatus *string) *NvmeServiceCollectionGetParams {
	o.SetStatisticsTCPStatusQueryParameter(statisticsTCPStatus)
	return o
}

// SetStatisticsTCPStatusQueryParameter adds the statisticsTcpStatus to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetStatisticsTCPStatusQueryParameter(statisticsTCPStatus *string) {
	o.StatisticsTCPStatusQueryParameter = statisticsTCPStatus
}

// WithStatisticsTCPThroughputRawReadQueryParameter adds the statisticsTCPThroughputRawRead to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithStatisticsTCPThroughputRawReadQueryParameter(statisticsTCPThroughputRawRead *int64) *NvmeServiceCollectionGetParams {
	o.SetStatisticsTCPThroughputRawReadQueryParameter(statisticsTCPThroughputRawRead)
	return o
}

// SetStatisticsTCPThroughputRawReadQueryParameter adds the statisticsTcpThroughputRawRead to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetStatisticsTCPThroughputRawReadQueryParameter(statisticsTCPThroughputRawRead *int64) {
	o.StatisticsTCPThroughputRawReadQueryParameter = statisticsTCPThroughputRawRead
}

// WithStatisticsTCPThroughputRawTotalQueryParameter adds the statisticsTCPThroughputRawTotal to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithStatisticsTCPThroughputRawTotalQueryParameter(statisticsTCPThroughputRawTotal *int64) *NvmeServiceCollectionGetParams {
	o.SetStatisticsTCPThroughputRawTotalQueryParameter(statisticsTCPThroughputRawTotal)
	return o
}

// SetStatisticsTCPThroughputRawTotalQueryParameter adds the statisticsTcpThroughputRawTotal to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetStatisticsTCPThroughputRawTotalQueryParameter(statisticsTCPThroughputRawTotal *int64) {
	o.StatisticsTCPThroughputRawTotalQueryParameter = statisticsTCPThroughputRawTotal
}

// WithStatisticsTCPThroughputRawWriteQueryParameter adds the statisticsTCPThroughputRawWrite to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithStatisticsTCPThroughputRawWriteQueryParameter(statisticsTCPThroughputRawWrite *int64) *NvmeServiceCollectionGetParams {
	o.SetStatisticsTCPThroughputRawWriteQueryParameter(statisticsTCPThroughputRawWrite)
	return o
}

// SetStatisticsTCPThroughputRawWriteQueryParameter adds the statisticsTcpThroughputRawWrite to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetStatisticsTCPThroughputRawWriteQueryParameter(statisticsTCPThroughputRawWrite *int64) {
	o.StatisticsTCPThroughputRawWriteQueryParameter = statisticsTCPThroughputRawWrite
}

// WithStatisticsTCPTimestampQueryParameter adds the statisticsTCPTimestamp to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithStatisticsTCPTimestampQueryParameter(statisticsTCPTimestamp *string) *NvmeServiceCollectionGetParams {
	o.SetStatisticsTCPTimestampQueryParameter(statisticsTCPTimestamp)
	return o
}

// SetStatisticsTCPTimestampQueryParameter adds the statisticsTcpTimestamp to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetStatisticsTCPTimestampQueryParameter(statisticsTCPTimestamp *string) {
	o.StatisticsTCPTimestampQueryParameter = statisticsTCPTimestamp
}

// WithStatisticsThroughputRawReadQueryParameter adds the statisticsThroughputRawRead to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithStatisticsThroughputRawReadQueryParameter(statisticsThroughputRawRead *int64) *NvmeServiceCollectionGetParams {
	o.SetStatisticsThroughputRawReadQueryParameter(statisticsThroughputRawRead)
	return o
}

// SetStatisticsThroughputRawReadQueryParameter adds the statisticsThroughputRawRead to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetStatisticsThroughputRawReadQueryParameter(statisticsThroughputRawRead *int64) {
	o.StatisticsThroughputRawReadQueryParameter = statisticsThroughputRawRead
}

// WithStatisticsThroughputRawTotalQueryParameter adds the statisticsThroughputRawTotal to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithStatisticsThroughputRawTotalQueryParameter(statisticsThroughputRawTotal *int64) *NvmeServiceCollectionGetParams {
	o.SetStatisticsThroughputRawTotalQueryParameter(statisticsThroughputRawTotal)
	return o
}

// SetStatisticsThroughputRawTotalQueryParameter adds the statisticsThroughputRawTotal to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetStatisticsThroughputRawTotalQueryParameter(statisticsThroughputRawTotal *int64) {
	o.StatisticsThroughputRawTotalQueryParameter = statisticsThroughputRawTotal
}

// WithStatisticsThroughputRawWriteQueryParameter adds the statisticsThroughputRawWrite to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithStatisticsThroughputRawWriteQueryParameter(statisticsThroughputRawWrite *int64) *NvmeServiceCollectionGetParams {
	o.SetStatisticsThroughputRawWriteQueryParameter(statisticsThroughputRawWrite)
	return o
}

// SetStatisticsThroughputRawWriteQueryParameter adds the statisticsThroughputRawWrite to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetStatisticsThroughputRawWriteQueryParameter(statisticsThroughputRawWrite *int64) {
	o.StatisticsThroughputRawWriteQueryParameter = statisticsThroughputRawWrite
}

// WithStatisticsTimestampQueryParameter adds the statisticsTimestamp to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithStatisticsTimestampQueryParameter(statisticsTimestamp *string) *NvmeServiceCollectionGetParams {
	o.SetStatisticsTimestampQueryParameter(statisticsTimestamp)
	return o
}

// SetStatisticsTimestampQueryParameter adds the statisticsTimestamp to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetStatisticsTimestampQueryParameter(statisticsTimestamp *string) {
	o.StatisticsTimestampQueryParameter = statisticsTimestamp
}

// WithSVMNameQueryParameter adds the svmName to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithSVMNameQueryParameter(svmName *string) *NvmeServiceCollectionGetParams {
	o.SetSVMNameQueryParameter(svmName)
	return o
}

// SetSVMNameQueryParameter adds the svmName to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetSVMNameQueryParameter(svmName *string) {
	o.SVMNameQueryParameter = svmName
}

// WithSVMUUIDQueryParameter adds the svmUUID to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) WithSVMUUIDQueryParameter(svmUUID *string) *NvmeServiceCollectionGetParams {
	o.SetSVMUUIDQueryParameter(svmUUID)
	return o
}

// SetSVMUUIDQueryParameter adds the svmUuid to the nvme service collection get params
func (o *NvmeServiceCollectionGetParams) SetSVMUUIDQueryParameter(svmUUID *string) {
	o.SVMUUIDQueryParameter = svmUUID
}

// WriteToRequest writes these params to a swagger request
func (o *NvmeServiceCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EnabledQueryParameter != nil {

		// query param enabled
		var qrEnabled bool

		if o.EnabledQueryParameter != nil {
			qrEnabled = *o.EnabledQueryParameter
		}
		qEnabled := swag.FormatBool(qrEnabled)
		if qEnabled != "" {

			if err := r.SetQueryParam("enabled", qEnabled); err != nil {
				return err
			}
		}
	}

	if o.FieldsQueryParameter != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.MaxRecordsQueryParameter != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecordsQueryParameter != nil {
			qrMaxRecords = *o.MaxRecordsQueryParameter
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.MetricDurationQueryParameter != nil {

		// query param metric.duration
		var qrMetricDuration string

		if o.MetricDurationQueryParameter != nil {
			qrMetricDuration = *o.MetricDurationQueryParameter
		}
		qMetricDuration := qrMetricDuration
		if qMetricDuration != "" {

			if err := r.SetQueryParam("metric.duration", qMetricDuration); err != nil {
				return err
			}
		}
	}

	if o.MetricFcDurationQueryParameter != nil {

		// query param metric.fc.duration
		var qrMetricFcDuration string

		if o.MetricFcDurationQueryParameter != nil {
			qrMetricFcDuration = *o.MetricFcDurationQueryParameter
		}
		qMetricFcDuration := qrMetricFcDuration
		if qMetricFcDuration != "" {

			if err := r.SetQueryParam("metric.fc.duration", qMetricFcDuration); err != nil {
				return err
			}
		}
	}

	if o.MetricFcIopsOtherQueryParameter != nil {

		// query param metric.fc.iops.other
		var qrMetricFcIopsOther int64

		if o.MetricFcIopsOtherQueryParameter != nil {
			qrMetricFcIopsOther = *o.MetricFcIopsOtherQueryParameter
		}
		qMetricFcIopsOther := swag.FormatInt64(qrMetricFcIopsOther)
		if qMetricFcIopsOther != "" {

			if err := r.SetQueryParam("metric.fc.iops.other", qMetricFcIopsOther); err != nil {
				return err
			}
		}
	}

	if o.MetricFcIopsReadQueryParameter != nil {

		// query param metric.fc.iops.read
		var qrMetricFcIopsRead int64

		if o.MetricFcIopsReadQueryParameter != nil {
			qrMetricFcIopsRead = *o.MetricFcIopsReadQueryParameter
		}
		qMetricFcIopsRead := swag.FormatInt64(qrMetricFcIopsRead)
		if qMetricFcIopsRead != "" {

			if err := r.SetQueryParam("metric.fc.iops.read", qMetricFcIopsRead); err != nil {
				return err
			}
		}
	}

	if o.MetricFcIopsTotalQueryParameter != nil {

		// query param metric.fc.iops.total
		var qrMetricFcIopsTotal int64

		if o.MetricFcIopsTotalQueryParameter != nil {
			qrMetricFcIopsTotal = *o.MetricFcIopsTotalQueryParameter
		}
		qMetricFcIopsTotal := swag.FormatInt64(qrMetricFcIopsTotal)
		if qMetricFcIopsTotal != "" {

			if err := r.SetQueryParam("metric.fc.iops.total", qMetricFcIopsTotal); err != nil {
				return err
			}
		}
	}

	if o.MetricFcIopsWriteQueryParameter != nil {

		// query param metric.fc.iops.write
		var qrMetricFcIopsWrite int64

		if o.MetricFcIopsWriteQueryParameter != nil {
			qrMetricFcIopsWrite = *o.MetricFcIopsWriteQueryParameter
		}
		qMetricFcIopsWrite := swag.FormatInt64(qrMetricFcIopsWrite)
		if qMetricFcIopsWrite != "" {

			if err := r.SetQueryParam("metric.fc.iops.write", qMetricFcIopsWrite); err != nil {
				return err
			}
		}
	}

	if o.MetricFcLatencyOtherQueryParameter != nil {

		// query param metric.fc.latency.other
		var qrMetricFcLatencyOther int64

		if o.MetricFcLatencyOtherQueryParameter != nil {
			qrMetricFcLatencyOther = *o.MetricFcLatencyOtherQueryParameter
		}
		qMetricFcLatencyOther := swag.FormatInt64(qrMetricFcLatencyOther)
		if qMetricFcLatencyOther != "" {

			if err := r.SetQueryParam("metric.fc.latency.other", qMetricFcLatencyOther); err != nil {
				return err
			}
		}
	}

	if o.MetricFcLatencyReadQueryParameter != nil {

		// query param metric.fc.latency.read
		var qrMetricFcLatencyRead int64

		if o.MetricFcLatencyReadQueryParameter != nil {
			qrMetricFcLatencyRead = *o.MetricFcLatencyReadQueryParameter
		}
		qMetricFcLatencyRead := swag.FormatInt64(qrMetricFcLatencyRead)
		if qMetricFcLatencyRead != "" {

			if err := r.SetQueryParam("metric.fc.latency.read", qMetricFcLatencyRead); err != nil {
				return err
			}
		}
	}

	if o.MetricFcLatencyTotalQueryParameter != nil {

		// query param metric.fc.latency.total
		var qrMetricFcLatencyTotal int64

		if o.MetricFcLatencyTotalQueryParameter != nil {
			qrMetricFcLatencyTotal = *o.MetricFcLatencyTotalQueryParameter
		}
		qMetricFcLatencyTotal := swag.FormatInt64(qrMetricFcLatencyTotal)
		if qMetricFcLatencyTotal != "" {

			if err := r.SetQueryParam("metric.fc.latency.total", qMetricFcLatencyTotal); err != nil {
				return err
			}
		}
	}

	if o.MetricFcLatencyWriteQueryParameter != nil {

		// query param metric.fc.latency.write
		var qrMetricFcLatencyWrite int64

		if o.MetricFcLatencyWriteQueryParameter != nil {
			qrMetricFcLatencyWrite = *o.MetricFcLatencyWriteQueryParameter
		}
		qMetricFcLatencyWrite := swag.FormatInt64(qrMetricFcLatencyWrite)
		if qMetricFcLatencyWrite != "" {

			if err := r.SetQueryParam("metric.fc.latency.write", qMetricFcLatencyWrite); err != nil {
				return err
			}
		}
	}

	if o.MetricFcStatusQueryParameter != nil {

		// query param metric.fc.status
		var qrMetricFcStatus string

		if o.MetricFcStatusQueryParameter != nil {
			qrMetricFcStatus = *o.MetricFcStatusQueryParameter
		}
		qMetricFcStatus := qrMetricFcStatus
		if qMetricFcStatus != "" {

			if err := r.SetQueryParam("metric.fc.status", qMetricFcStatus); err != nil {
				return err
			}
		}
	}

	if o.MetricFcThroughputReadQueryParameter != nil {

		// query param metric.fc.throughput.read
		var qrMetricFcThroughputRead int64

		if o.MetricFcThroughputReadQueryParameter != nil {
			qrMetricFcThroughputRead = *o.MetricFcThroughputReadQueryParameter
		}
		qMetricFcThroughputRead := swag.FormatInt64(qrMetricFcThroughputRead)
		if qMetricFcThroughputRead != "" {

			if err := r.SetQueryParam("metric.fc.throughput.read", qMetricFcThroughputRead); err != nil {
				return err
			}
		}
	}

	if o.MetricFcThroughputTotalQueryParameter != nil {

		// query param metric.fc.throughput.total
		var qrMetricFcThroughputTotal int64

		if o.MetricFcThroughputTotalQueryParameter != nil {
			qrMetricFcThroughputTotal = *o.MetricFcThroughputTotalQueryParameter
		}
		qMetricFcThroughputTotal := swag.FormatInt64(qrMetricFcThroughputTotal)
		if qMetricFcThroughputTotal != "" {

			if err := r.SetQueryParam("metric.fc.throughput.total", qMetricFcThroughputTotal); err != nil {
				return err
			}
		}
	}

	if o.MetricFcThroughputWriteQueryParameter != nil {

		// query param metric.fc.throughput.write
		var qrMetricFcThroughputWrite int64

		if o.MetricFcThroughputWriteQueryParameter != nil {
			qrMetricFcThroughputWrite = *o.MetricFcThroughputWriteQueryParameter
		}
		qMetricFcThroughputWrite := swag.FormatInt64(qrMetricFcThroughputWrite)
		if qMetricFcThroughputWrite != "" {

			if err := r.SetQueryParam("metric.fc.throughput.write", qMetricFcThroughputWrite); err != nil {
				return err
			}
		}
	}

	if o.MetricFcTimestampQueryParameter != nil {

		// query param metric.fc.timestamp
		var qrMetricFcTimestamp string

		if o.MetricFcTimestampQueryParameter != nil {
			qrMetricFcTimestamp = *o.MetricFcTimestampQueryParameter
		}
		qMetricFcTimestamp := qrMetricFcTimestamp
		if qMetricFcTimestamp != "" {

			if err := r.SetQueryParam("metric.fc.timestamp", qMetricFcTimestamp); err != nil {
				return err
			}
		}
	}

	if o.MetricIopsOtherQueryParameter != nil {

		// query param metric.iops.other
		var qrMetricIopsOther int64

		if o.MetricIopsOtherQueryParameter != nil {
			qrMetricIopsOther = *o.MetricIopsOtherQueryParameter
		}
		qMetricIopsOther := swag.FormatInt64(qrMetricIopsOther)
		if qMetricIopsOther != "" {

			if err := r.SetQueryParam("metric.iops.other", qMetricIopsOther); err != nil {
				return err
			}
		}
	}

	if o.MetricIopsReadQueryParameter != nil {

		// query param metric.iops.read
		var qrMetricIopsRead int64

		if o.MetricIopsReadQueryParameter != nil {
			qrMetricIopsRead = *o.MetricIopsReadQueryParameter
		}
		qMetricIopsRead := swag.FormatInt64(qrMetricIopsRead)
		if qMetricIopsRead != "" {

			if err := r.SetQueryParam("metric.iops.read", qMetricIopsRead); err != nil {
				return err
			}
		}
	}

	if o.MetricIopsTotalQueryParameter != nil {

		// query param metric.iops.total
		var qrMetricIopsTotal int64

		if o.MetricIopsTotalQueryParameter != nil {
			qrMetricIopsTotal = *o.MetricIopsTotalQueryParameter
		}
		qMetricIopsTotal := swag.FormatInt64(qrMetricIopsTotal)
		if qMetricIopsTotal != "" {

			if err := r.SetQueryParam("metric.iops.total", qMetricIopsTotal); err != nil {
				return err
			}
		}
	}

	if o.MetricIopsWriteQueryParameter != nil {

		// query param metric.iops.write
		var qrMetricIopsWrite int64

		if o.MetricIopsWriteQueryParameter != nil {
			qrMetricIopsWrite = *o.MetricIopsWriteQueryParameter
		}
		qMetricIopsWrite := swag.FormatInt64(qrMetricIopsWrite)
		if qMetricIopsWrite != "" {

			if err := r.SetQueryParam("metric.iops.write", qMetricIopsWrite); err != nil {
				return err
			}
		}
	}

	if o.MetricLatencyOtherQueryParameter != nil {

		// query param metric.latency.other
		var qrMetricLatencyOther int64

		if o.MetricLatencyOtherQueryParameter != nil {
			qrMetricLatencyOther = *o.MetricLatencyOtherQueryParameter
		}
		qMetricLatencyOther := swag.FormatInt64(qrMetricLatencyOther)
		if qMetricLatencyOther != "" {

			if err := r.SetQueryParam("metric.latency.other", qMetricLatencyOther); err != nil {
				return err
			}
		}
	}

	if o.MetricLatencyReadQueryParameter != nil {

		// query param metric.latency.read
		var qrMetricLatencyRead int64

		if o.MetricLatencyReadQueryParameter != nil {
			qrMetricLatencyRead = *o.MetricLatencyReadQueryParameter
		}
		qMetricLatencyRead := swag.FormatInt64(qrMetricLatencyRead)
		if qMetricLatencyRead != "" {

			if err := r.SetQueryParam("metric.latency.read", qMetricLatencyRead); err != nil {
				return err
			}
		}
	}

	if o.MetricLatencyTotalQueryParameter != nil {

		// query param metric.latency.total
		var qrMetricLatencyTotal int64

		if o.MetricLatencyTotalQueryParameter != nil {
			qrMetricLatencyTotal = *o.MetricLatencyTotalQueryParameter
		}
		qMetricLatencyTotal := swag.FormatInt64(qrMetricLatencyTotal)
		if qMetricLatencyTotal != "" {

			if err := r.SetQueryParam("metric.latency.total", qMetricLatencyTotal); err != nil {
				return err
			}
		}
	}

	if o.MetricLatencyWriteQueryParameter != nil {

		// query param metric.latency.write
		var qrMetricLatencyWrite int64

		if o.MetricLatencyWriteQueryParameter != nil {
			qrMetricLatencyWrite = *o.MetricLatencyWriteQueryParameter
		}
		qMetricLatencyWrite := swag.FormatInt64(qrMetricLatencyWrite)
		if qMetricLatencyWrite != "" {

			if err := r.SetQueryParam("metric.latency.write", qMetricLatencyWrite); err != nil {
				return err
			}
		}
	}

	if o.MetricStatusQueryParameter != nil {

		// query param metric.status
		var qrMetricStatus string

		if o.MetricStatusQueryParameter != nil {
			qrMetricStatus = *o.MetricStatusQueryParameter
		}
		qMetricStatus := qrMetricStatus
		if qMetricStatus != "" {

			if err := r.SetQueryParam("metric.status", qMetricStatus); err != nil {
				return err
			}
		}
	}

	if o.MetricTCPDurationQueryParameter != nil {

		// query param metric.tcp.duration
		var qrMetricTCPDuration string

		if o.MetricTCPDurationQueryParameter != nil {
			qrMetricTCPDuration = *o.MetricTCPDurationQueryParameter
		}
		qMetricTCPDuration := qrMetricTCPDuration
		if qMetricTCPDuration != "" {

			if err := r.SetQueryParam("metric.tcp.duration", qMetricTCPDuration); err != nil {
				return err
			}
		}
	}

	if o.MetricTCPIopsOtherQueryParameter != nil {

		// query param metric.tcp.iops.other
		var qrMetricTCPIopsOther int64

		if o.MetricTCPIopsOtherQueryParameter != nil {
			qrMetricTCPIopsOther = *o.MetricTCPIopsOtherQueryParameter
		}
		qMetricTCPIopsOther := swag.FormatInt64(qrMetricTCPIopsOther)
		if qMetricTCPIopsOther != "" {

			if err := r.SetQueryParam("metric.tcp.iops.other", qMetricTCPIopsOther); err != nil {
				return err
			}
		}
	}

	if o.MetricTCPIopsReadQueryParameter != nil {

		// query param metric.tcp.iops.read
		var qrMetricTCPIopsRead int64

		if o.MetricTCPIopsReadQueryParameter != nil {
			qrMetricTCPIopsRead = *o.MetricTCPIopsReadQueryParameter
		}
		qMetricTCPIopsRead := swag.FormatInt64(qrMetricTCPIopsRead)
		if qMetricTCPIopsRead != "" {

			if err := r.SetQueryParam("metric.tcp.iops.read", qMetricTCPIopsRead); err != nil {
				return err
			}
		}
	}

	if o.MetricTCPIopsTotalQueryParameter != nil {

		// query param metric.tcp.iops.total
		var qrMetricTCPIopsTotal int64

		if o.MetricTCPIopsTotalQueryParameter != nil {
			qrMetricTCPIopsTotal = *o.MetricTCPIopsTotalQueryParameter
		}
		qMetricTCPIopsTotal := swag.FormatInt64(qrMetricTCPIopsTotal)
		if qMetricTCPIopsTotal != "" {

			if err := r.SetQueryParam("metric.tcp.iops.total", qMetricTCPIopsTotal); err != nil {
				return err
			}
		}
	}

	if o.MetricTCPIopsWriteQueryParameter != nil {

		// query param metric.tcp.iops.write
		var qrMetricTCPIopsWrite int64

		if o.MetricTCPIopsWriteQueryParameter != nil {
			qrMetricTCPIopsWrite = *o.MetricTCPIopsWriteQueryParameter
		}
		qMetricTCPIopsWrite := swag.FormatInt64(qrMetricTCPIopsWrite)
		if qMetricTCPIopsWrite != "" {

			if err := r.SetQueryParam("metric.tcp.iops.write", qMetricTCPIopsWrite); err != nil {
				return err
			}
		}
	}

	if o.MetricTCPLatencyOtherQueryParameter != nil {

		// query param metric.tcp.latency.other
		var qrMetricTCPLatencyOther int64

		if o.MetricTCPLatencyOtherQueryParameter != nil {
			qrMetricTCPLatencyOther = *o.MetricTCPLatencyOtherQueryParameter
		}
		qMetricTCPLatencyOther := swag.FormatInt64(qrMetricTCPLatencyOther)
		if qMetricTCPLatencyOther != "" {

			if err := r.SetQueryParam("metric.tcp.latency.other", qMetricTCPLatencyOther); err != nil {
				return err
			}
		}
	}

	if o.MetricTCPLatencyReadQueryParameter != nil {

		// query param metric.tcp.latency.read
		var qrMetricTCPLatencyRead int64

		if o.MetricTCPLatencyReadQueryParameter != nil {
			qrMetricTCPLatencyRead = *o.MetricTCPLatencyReadQueryParameter
		}
		qMetricTCPLatencyRead := swag.FormatInt64(qrMetricTCPLatencyRead)
		if qMetricTCPLatencyRead != "" {

			if err := r.SetQueryParam("metric.tcp.latency.read", qMetricTCPLatencyRead); err != nil {
				return err
			}
		}
	}

	if o.MetricTCPLatencyTotalQueryParameter != nil {

		// query param metric.tcp.latency.total
		var qrMetricTCPLatencyTotal int64

		if o.MetricTCPLatencyTotalQueryParameter != nil {
			qrMetricTCPLatencyTotal = *o.MetricTCPLatencyTotalQueryParameter
		}
		qMetricTCPLatencyTotal := swag.FormatInt64(qrMetricTCPLatencyTotal)
		if qMetricTCPLatencyTotal != "" {

			if err := r.SetQueryParam("metric.tcp.latency.total", qMetricTCPLatencyTotal); err != nil {
				return err
			}
		}
	}

	if o.MetricTCPLatencyWriteQueryParameter != nil {

		// query param metric.tcp.latency.write
		var qrMetricTCPLatencyWrite int64

		if o.MetricTCPLatencyWriteQueryParameter != nil {
			qrMetricTCPLatencyWrite = *o.MetricTCPLatencyWriteQueryParameter
		}
		qMetricTCPLatencyWrite := swag.FormatInt64(qrMetricTCPLatencyWrite)
		if qMetricTCPLatencyWrite != "" {

			if err := r.SetQueryParam("metric.tcp.latency.write", qMetricTCPLatencyWrite); err != nil {
				return err
			}
		}
	}

	if o.MetricTCPStatusQueryParameter != nil {

		// query param metric.tcp.status
		var qrMetricTCPStatus string

		if o.MetricTCPStatusQueryParameter != nil {
			qrMetricTCPStatus = *o.MetricTCPStatusQueryParameter
		}
		qMetricTCPStatus := qrMetricTCPStatus
		if qMetricTCPStatus != "" {

			if err := r.SetQueryParam("metric.tcp.status", qMetricTCPStatus); err != nil {
				return err
			}
		}
	}

	if o.MetricTCPThroughputReadQueryParameter != nil {

		// query param metric.tcp.throughput.read
		var qrMetricTCPThroughputRead int64

		if o.MetricTCPThroughputReadQueryParameter != nil {
			qrMetricTCPThroughputRead = *o.MetricTCPThroughputReadQueryParameter
		}
		qMetricTCPThroughputRead := swag.FormatInt64(qrMetricTCPThroughputRead)
		if qMetricTCPThroughputRead != "" {

			if err := r.SetQueryParam("metric.tcp.throughput.read", qMetricTCPThroughputRead); err != nil {
				return err
			}
		}
	}

	if o.MetricTCPThroughputTotalQueryParameter != nil {

		// query param metric.tcp.throughput.total
		var qrMetricTCPThroughputTotal int64

		if o.MetricTCPThroughputTotalQueryParameter != nil {
			qrMetricTCPThroughputTotal = *o.MetricTCPThroughputTotalQueryParameter
		}
		qMetricTCPThroughputTotal := swag.FormatInt64(qrMetricTCPThroughputTotal)
		if qMetricTCPThroughputTotal != "" {

			if err := r.SetQueryParam("metric.tcp.throughput.total", qMetricTCPThroughputTotal); err != nil {
				return err
			}
		}
	}

	if o.MetricTCPThroughputWriteQueryParameter != nil {

		// query param metric.tcp.throughput.write
		var qrMetricTCPThroughputWrite int64

		if o.MetricTCPThroughputWriteQueryParameter != nil {
			qrMetricTCPThroughputWrite = *o.MetricTCPThroughputWriteQueryParameter
		}
		qMetricTCPThroughputWrite := swag.FormatInt64(qrMetricTCPThroughputWrite)
		if qMetricTCPThroughputWrite != "" {

			if err := r.SetQueryParam("metric.tcp.throughput.write", qMetricTCPThroughputWrite); err != nil {
				return err
			}
		}
	}

	if o.MetricTCPTimestampQueryParameter != nil {

		// query param metric.tcp.timestamp
		var qrMetricTCPTimestamp string

		if o.MetricTCPTimestampQueryParameter != nil {
			qrMetricTCPTimestamp = *o.MetricTCPTimestampQueryParameter
		}
		qMetricTCPTimestamp := qrMetricTCPTimestamp
		if qMetricTCPTimestamp != "" {

			if err := r.SetQueryParam("metric.tcp.timestamp", qMetricTCPTimestamp); err != nil {
				return err
			}
		}
	}

	if o.MetricThroughputReadQueryParameter != nil {

		// query param metric.throughput.read
		var qrMetricThroughputRead int64

		if o.MetricThroughputReadQueryParameter != nil {
			qrMetricThroughputRead = *o.MetricThroughputReadQueryParameter
		}
		qMetricThroughputRead := swag.FormatInt64(qrMetricThroughputRead)
		if qMetricThroughputRead != "" {

			if err := r.SetQueryParam("metric.throughput.read", qMetricThroughputRead); err != nil {
				return err
			}
		}
	}

	if o.MetricThroughputTotalQueryParameter != nil {

		// query param metric.throughput.total
		var qrMetricThroughputTotal int64

		if o.MetricThroughputTotalQueryParameter != nil {
			qrMetricThroughputTotal = *o.MetricThroughputTotalQueryParameter
		}
		qMetricThroughputTotal := swag.FormatInt64(qrMetricThroughputTotal)
		if qMetricThroughputTotal != "" {

			if err := r.SetQueryParam("metric.throughput.total", qMetricThroughputTotal); err != nil {
				return err
			}
		}
	}

	if o.MetricThroughputWriteQueryParameter != nil {

		// query param metric.throughput.write
		var qrMetricThroughputWrite int64

		if o.MetricThroughputWriteQueryParameter != nil {
			qrMetricThroughputWrite = *o.MetricThroughputWriteQueryParameter
		}
		qMetricThroughputWrite := swag.FormatInt64(qrMetricThroughputWrite)
		if qMetricThroughputWrite != "" {

			if err := r.SetQueryParam("metric.throughput.write", qMetricThroughputWrite); err != nil {
				return err
			}
		}
	}

	if o.MetricTimestampQueryParameter != nil {

		// query param metric.timestamp
		var qrMetricTimestamp string

		if o.MetricTimestampQueryParameter != nil {
			qrMetricTimestamp = *o.MetricTimestampQueryParameter
		}
		qMetricTimestamp := qrMetricTimestamp
		if qMetricTimestamp != "" {

			if err := r.SetQueryParam("metric.timestamp", qMetricTimestamp); err != nil {
				return err
			}
		}
	}

	if o.OrderByQueryParameter != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.ReturnRecordsQueryParameter != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecordsQueryParameter != nil {
			qrReturnRecords = *o.ReturnRecordsQueryParameter
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeoutQueryParameter != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeoutQueryParameter != nil {
			qrReturnTimeout = *o.ReturnTimeoutQueryParameter
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.StatisticsFcIopsRawOtherQueryParameter != nil {

		// query param statistics.fc.iops_raw.other
		var qrStatisticsFcIopsRawOther int64

		if o.StatisticsFcIopsRawOtherQueryParameter != nil {
			qrStatisticsFcIopsRawOther = *o.StatisticsFcIopsRawOtherQueryParameter
		}
		qStatisticsFcIopsRawOther := swag.FormatInt64(qrStatisticsFcIopsRawOther)
		if qStatisticsFcIopsRawOther != "" {

			if err := r.SetQueryParam("statistics.fc.iops_raw.other", qStatisticsFcIopsRawOther); err != nil {
				return err
			}
		}
	}

	if o.StatisticsFcIopsRawReadQueryParameter != nil {

		// query param statistics.fc.iops_raw.read
		var qrStatisticsFcIopsRawRead int64

		if o.StatisticsFcIopsRawReadQueryParameter != nil {
			qrStatisticsFcIopsRawRead = *o.StatisticsFcIopsRawReadQueryParameter
		}
		qStatisticsFcIopsRawRead := swag.FormatInt64(qrStatisticsFcIopsRawRead)
		if qStatisticsFcIopsRawRead != "" {

			if err := r.SetQueryParam("statistics.fc.iops_raw.read", qStatisticsFcIopsRawRead); err != nil {
				return err
			}
		}
	}

	if o.StatisticsFcIopsRawTotalQueryParameter != nil {

		// query param statistics.fc.iops_raw.total
		var qrStatisticsFcIopsRawTotal int64

		if o.StatisticsFcIopsRawTotalQueryParameter != nil {
			qrStatisticsFcIopsRawTotal = *o.StatisticsFcIopsRawTotalQueryParameter
		}
		qStatisticsFcIopsRawTotal := swag.FormatInt64(qrStatisticsFcIopsRawTotal)
		if qStatisticsFcIopsRawTotal != "" {

			if err := r.SetQueryParam("statistics.fc.iops_raw.total", qStatisticsFcIopsRawTotal); err != nil {
				return err
			}
		}
	}

	if o.StatisticsFcIopsRawWriteQueryParameter != nil {

		// query param statistics.fc.iops_raw.write
		var qrStatisticsFcIopsRawWrite int64

		if o.StatisticsFcIopsRawWriteQueryParameter != nil {
			qrStatisticsFcIopsRawWrite = *o.StatisticsFcIopsRawWriteQueryParameter
		}
		qStatisticsFcIopsRawWrite := swag.FormatInt64(qrStatisticsFcIopsRawWrite)
		if qStatisticsFcIopsRawWrite != "" {

			if err := r.SetQueryParam("statistics.fc.iops_raw.write", qStatisticsFcIopsRawWrite); err != nil {
				return err
			}
		}
	}

	if o.StatisticsFcLatencyRawOtherQueryParameter != nil {

		// query param statistics.fc.latency_raw.other
		var qrStatisticsFcLatencyRawOther int64

		if o.StatisticsFcLatencyRawOtherQueryParameter != nil {
			qrStatisticsFcLatencyRawOther = *o.StatisticsFcLatencyRawOtherQueryParameter
		}
		qStatisticsFcLatencyRawOther := swag.FormatInt64(qrStatisticsFcLatencyRawOther)
		if qStatisticsFcLatencyRawOther != "" {

			if err := r.SetQueryParam("statistics.fc.latency_raw.other", qStatisticsFcLatencyRawOther); err != nil {
				return err
			}
		}
	}

	if o.StatisticsFcLatencyRawReadQueryParameter != nil {

		// query param statistics.fc.latency_raw.read
		var qrStatisticsFcLatencyRawRead int64

		if o.StatisticsFcLatencyRawReadQueryParameter != nil {
			qrStatisticsFcLatencyRawRead = *o.StatisticsFcLatencyRawReadQueryParameter
		}
		qStatisticsFcLatencyRawRead := swag.FormatInt64(qrStatisticsFcLatencyRawRead)
		if qStatisticsFcLatencyRawRead != "" {

			if err := r.SetQueryParam("statistics.fc.latency_raw.read", qStatisticsFcLatencyRawRead); err != nil {
				return err
			}
		}
	}

	if o.StatisticsFcLatencyRawTotalQueryParameter != nil {

		// query param statistics.fc.latency_raw.total
		var qrStatisticsFcLatencyRawTotal int64

		if o.StatisticsFcLatencyRawTotalQueryParameter != nil {
			qrStatisticsFcLatencyRawTotal = *o.StatisticsFcLatencyRawTotalQueryParameter
		}
		qStatisticsFcLatencyRawTotal := swag.FormatInt64(qrStatisticsFcLatencyRawTotal)
		if qStatisticsFcLatencyRawTotal != "" {

			if err := r.SetQueryParam("statistics.fc.latency_raw.total", qStatisticsFcLatencyRawTotal); err != nil {
				return err
			}
		}
	}

	if o.StatisticsFcLatencyRawWriteQueryParameter != nil {

		// query param statistics.fc.latency_raw.write
		var qrStatisticsFcLatencyRawWrite int64

		if o.StatisticsFcLatencyRawWriteQueryParameter != nil {
			qrStatisticsFcLatencyRawWrite = *o.StatisticsFcLatencyRawWriteQueryParameter
		}
		qStatisticsFcLatencyRawWrite := swag.FormatInt64(qrStatisticsFcLatencyRawWrite)
		if qStatisticsFcLatencyRawWrite != "" {

			if err := r.SetQueryParam("statistics.fc.latency_raw.write", qStatisticsFcLatencyRawWrite); err != nil {
				return err
			}
		}
	}

	if o.StatisticsFcStatusQueryParameter != nil {

		// query param statistics.fc.status
		var qrStatisticsFcStatus string

		if o.StatisticsFcStatusQueryParameter != nil {
			qrStatisticsFcStatus = *o.StatisticsFcStatusQueryParameter
		}
		qStatisticsFcStatus := qrStatisticsFcStatus
		if qStatisticsFcStatus != "" {

			if err := r.SetQueryParam("statistics.fc.status", qStatisticsFcStatus); err != nil {
				return err
			}
		}
	}

	if o.StatisticsFcThroughputRawReadQueryParameter != nil {

		// query param statistics.fc.throughput_raw.read
		var qrStatisticsFcThroughputRawRead int64

		if o.StatisticsFcThroughputRawReadQueryParameter != nil {
			qrStatisticsFcThroughputRawRead = *o.StatisticsFcThroughputRawReadQueryParameter
		}
		qStatisticsFcThroughputRawRead := swag.FormatInt64(qrStatisticsFcThroughputRawRead)
		if qStatisticsFcThroughputRawRead != "" {

			if err := r.SetQueryParam("statistics.fc.throughput_raw.read", qStatisticsFcThroughputRawRead); err != nil {
				return err
			}
		}
	}

	if o.StatisticsFcThroughputRawTotalQueryParameter != nil {

		// query param statistics.fc.throughput_raw.total
		var qrStatisticsFcThroughputRawTotal int64

		if o.StatisticsFcThroughputRawTotalQueryParameter != nil {
			qrStatisticsFcThroughputRawTotal = *o.StatisticsFcThroughputRawTotalQueryParameter
		}
		qStatisticsFcThroughputRawTotal := swag.FormatInt64(qrStatisticsFcThroughputRawTotal)
		if qStatisticsFcThroughputRawTotal != "" {

			if err := r.SetQueryParam("statistics.fc.throughput_raw.total", qStatisticsFcThroughputRawTotal); err != nil {
				return err
			}
		}
	}

	if o.StatisticsFcThroughputRawWriteQueryParameter != nil {

		// query param statistics.fc.throughput_raw.write
		var qrStatisticsFcThroughputRawWrite int64

		if o.StatisticsFcThroughputRawWriteQueryParameter != nil {
			qrStatisticsFcThroughputRawWrite = *o.StatisticsFcThroughputRawWriteQueryParameter
		}
		qStatisticsFcThroughputRawWrite := swag.FormatInt64(qrStatisticsFcThroughputRawWrite)
		if qStatisticsFcThroughputRawWrite != "" {

			if err := r.SetQueryParam("statistics.fc.throughput_raw.write", qStatisticsFcThroughputRawWrite); err != nil {
				return err
			}
		}
	}

	if o.StatisticsFcTimestampQueryParameter != nil {

		// query param statistics.fc.timestamp
		var qrStatisticsFcTimestamp string

		if o.StatisticsFcTimestampQueryParameter != nil {
			qrStatisticsFcTimestamp = *o.StatisticsFcTimestampQueryParameter
		}
		qStatisticsFcTimestamp := qrStatisticsFcTimestamp
		if qStatisticsFcTimestamp != "" {

			if err := r.SetQueryParam("statistics.fc.timestamp", qStatisticsFcTimestamp); err != nil {
				return err
			}
		}
	}

	if o.StatisticsIopsRawOtherQueryParameter != nil {

		// query param statistics.iops_raw.other
		var qrStatisticsIopsRawOther int64

		if o.StatisticsIopsRawOtherQueryParameter != nil {
			qrStatisticsIopsRawOther = *o.StatisticsIopsRawOtherQueryParameter
		}
		qStatisticsIopsRawOther := swag.FormatInt64(qrStatisticsIopsRawOther)
		if qStatisticsIopsRawOther != "" {

			if err := r.SetQueryParam("statistics.iops_raw.other", qStatisticsIopsRawOther); err != nil {
				return err
			}
		}
	}

	if o.StatisticsIopsRawReadQueryParameter != nil {

		// query param statistics.iops_raw.read
		var qrStatisticsIopsRawRead int64

		if o.StatisticsIopsRawReadQueryParameter != nil {
			qrStatisticsIopsRawRead = *o.StatisticsIopsRawReadQueryParameter
		}
		qStatisticsIopsRawRead := swag.FormatInt64(qrStatisticsIopsRawRead)
		if qStatisticsIopsRawRead != "" {

			if err := r.SetQueryParam("statistics.iops_raw.read", qStatisticsIopsRawRead); err != nil {
				return err
			}
		}
	}

	if o.StatisticsIopsRawTotalQueryParameter != nil {

		// query param statistics.iops_raw.total
		var qrStatisticsIopsRawTotal int64

		if o.StatisticsIopsRawTotalQueryParameter != nil {
			qrStatisticsIopsRawTotal = *o.StatisticsIopsRawTotalQueryParameter
		}
		qStatisticsIopsRawTotal := swag.FormatInt64(qrStatisticsIopsRawTotal)
		if qStatisticsIopsRawTotal != "" {

			if err := r.SetQueryParam("statistics.iops_raw.total", qStatisticsIopsRawTotal); err != nil {
				return err
			}
		}
	}

	if o.StatisticsIopsRawWriteQueryParameter != nil {

		// query param statistics.iops_raw.write
		var qrStatisticsIopsRawWrite int64

		if o.StatisticsIopsRawWriteQueryParameter != nil {
			qrStatisticsIopsRawWrite = *o.StatisticsIopsRawWriteQueryParameter
		}
		qStatisticsIopsRawWrite := swag.FormatInt64(qrStatisticsIopsRawWrite)
		if qStatisticsIopsRawWrite != "" {

			if err := r.SetQueryParam("statistics.iops_raw.write", qStatisticsIopsRawWrite); err != nil {
				return err
			}
		}
	}

	if o.StatisticsLatencyRawOtherQueryParameter != nil {

		// query param statistics.latency_raw.other
		var qrStatisticsLatencyRawOther int64

		if o.StatisticsLatencyRawOtherQueryParameter != nil {
			qrStatisticsLatencyRawOther = *o.StatisticsLatencyRawOtherQueryParameter
		}
		qStatisticsLatencyRawOther := swag.FormatInt64(qrStatisticsLatencyRawOther)
		if qStatisticsLatencyRawOther != "" {

			if err := r.SetQueryParam("statistics.latency_raw.other", qStatisticsLatencyRawOther); err != nil {
				return err
			}
		}
	}

	if o.StatisticsLatencyRawReadQueryParameter != nil {

		// query param statistics.latency_raw.read
		var qrStatisticsLatencyRawRead int64

		if o.StatisticsLatencyRawReadQueryParameter != nil {
			qrStatisticsLatencyRawRead = *o.StatisticsLatencyRawReadQueryParameter
		}
		qStatisticsLatencyRawRead := swag.FormatInt64(qrStatisticsLatencyRawRead)
		if qStatisticsLatencyRawRead != "" {

			if err := r.SetQueryParam("statistics.latency_raw.read", qStatisticsLatencyRawRead); err != nil {
				return err
			}
		}
	}

	if o.StatisticsLatencyRawTotalQueryParameter != nil {

		// query param statistics.latency_raw.total
		var qrStatisticsLatencyRawTotal int64

		if o.StatisticsLatencyRawTotalQueryParameter != nil {
			qrStatisticsLatencyRawTotal = *o.StatisticsLatencyRawTotalQueryParameter
		}
		qStatisticsLatencyRawTotal := swag.FormatInt64(qrStatisticsLatencyRawTotal)
		if qStatisticsLatencyRawTotal != "" {

			if err := r.SetQueryParam("statistics.latency_raw.total", qStatisticsLatencyRawTotal); err != nil {
				return err
			}
		}
	}

	if o.StatisticsLatencyRawWriteQueryParameter != nil {

		// query param statistics.latency_raw.write
		var qrStatisticsLatencyRawWrite int64

		if o.StatisticsLatencyRawWriteQueryParameter != nil {
			qrStatisticsLatencyRawWrite = *o.StatisticsLatencyRawWriteQueryParameter
		}
		qStatisticsLatencyRawWrite := swag.FormatInt64(qrStatisticsLatencyRawWrite)
		if qStatisticsLatencyRawWrite != "" {

			if err := r.SetQueryParam("statistics.latency_raw.write", qStatisticsLatencyRawWrite); err != nil {
				return err
			}
		}
	}

	if o.StatisticsStatusQueryParameter != nil {

		// query param statistics.status
		var qrStatisticsStatus string

		if o.StatisticsStatusQueryParameter != nil {
			qrStatisticsStatus = *o.StatisticsStatusQueryParameter
		}
		qStatisticsStatus := qrStatisticsStatus
		if qStatisticsStatus != "" {

			if err := r.SetQueryParam("statistics.status", qStatisticsStatus); err != nil {
				return err
			}
		}
	}

	if o.StatisticsTCPIopsRawOtherQueryParameter != nil {

		// query param statistics.tcp.iops_raw.other
		var qrStatisticsTCPIopsRawOther int64

		if o.StatisticsTCPIopsRawOtherQueryParameter != nil {
			qrStatisticsTCPIopsRawOther = *o.StatisticsTCPIopsRawOtherQueryParameter
		}
		qStatisticsTCPIopsRawOther := swag.FormatInt64(qrStatisticsTCPIopsRawOther)
		if qStatisticsTCPIopsRawOther != "" {

			if err := r.SetQueryParam("statistics.tcp.iops_raw.other", qStatisticsTCPIopsRawOther); err != nil {
				return err
			}
		}
	}

	if o.StatisticsTCPIopsRawReadQueryParameter != nil {

		// query param statistics.tcp.iops_raw.read
		var qrStatisticsTCPIopsRawRead int64

		if o.StatisticsTCPIopsRawReadQueryParameter != nil {
			qrStatisticsTCPIopsRawRead = *o.StatisticsTCPIopsRawReadQueryParameter
		}
		qStatisticsTCPIopsRawRead := swag.FormatInt64(qrStatisticsTCPIopsRawRead)
		if qStatisticsTCPIopsRawRead != "" {

			if err := r.SetQueryParam("statistics.tcp.iops_raw.read", qStatisticsTCPIopsRawRead); err != nil {
				return err
			}
		}
	}

	if o.StatisticsTCPIopsRawTotalQueryParameter != nil {

		// query param statistics.tcp.iops_raw.total
		var qrStatisticsTCPIopsRawTotal int64

		if o.StatisticsTCPIopsRawTotalQueryParameter != nil {
			qrStatisticsTCPIopsRawTotal = *o.StatisticsTCPIopsRawTotalQueryParameter
		}
		qStatisticsTCPIopsRawTotal := swag.FormatInt64(qrStatisticsTCPIopsRawTotal)
		if qStatisticsTCPIopsRawTotal != "" {

			if err := r.SetQueryParam("statistics.tcp.iops_raw.total", qStatisticsTCPIopsRawTotal); err != nil {
				return err
			}
		}
	}

	if o.StatisticsTCPIopsRawWriteQueryParameter != nil {

		// query param statistics.tcp.iops_raw.write
		var qrStatisticsTCPIopsRawWrite int64

		if o.StatisticsTCPIopsRawWriteQueryParameter != nil {
			qrStatisticsTCPIopsRawWrite = *o.StatisticsTCPIopsRawWriteQueryParameter
		}
		qStatisticsTCPIopsRawWrite := swag.FormatInt64(qrStatisticsTCPIopsRawWrite)
		if qStatisticsTCPIopsRawWrite != "" {

			if err := r.SetQueryParam("statistics.tcp.iops_raw.write", qStatisticsTCPIopsRawWrite); err != nil {
				return err
			}
		}
	}

	if o.StatisticsTCPLatencyRawOtherQueryParameter != nil {

		// query param statistics.tcp.latency_raw.other
		var qrStatisticsTCPLatencyRawOther int64

		if o.StatisticsTCPLatencyRawOtherQueryParameter != nil {
			qrStatisticsTCPLatencyRawOther = *o.StatisticsTCPLatencyRawOtherQueryParameter
		}
		qStatisticsTCPLatencyRawOther := swag.FormatInt64(qrStatisticsTCPLatencyRawOther)
		if qStatisticsTCPLatencyRawOther != "" {

			if err := r.SetQueryParam("statistics.tcp.latency_raw.other", qStatisticsTCPLatencyRawOther); err != nil {
				return err
			}
		}
	}

	if o.StatisticsTCPLatencyRawReadQueryParameter != nil {

		// query param statistics.tcp.latency_raw.read
		var qrStatisticsTCPLatencyRawRead int64

		if o.StatisticsTCPLatencyRawReadQueryParameter != nil {
			qrStatisticsTCPLatencyRawRead = *o.StatisticsTCPLatencyRawReadQueryParameter
		}
		qStatisticsTCPLatencyRawRead := swag.FormatInt64(qrStatisticsTCPLatencyRawRead)
		if qStatisticsTCPLatencyRawRead != "" {

			if err := r.SetQueryParam("statistics.tcp.latency_raw.read", qStatisticsTCPLatencyRawRead); err != nil {
				return err
			}
		}
	}

	if o.StatisticsTCPLatencyRawTotalQueryParameter != nil {

		// query param statistics.tcp.latency_raw.total
		var qrStatisticsTCPLatencyRawTotal int64

		if o.StatisticsTCPLatencyRawTotalQueryParameter != nil {
			qrStatisticsTCPLatencyRawTotal = *o.StatisticsTCPLatencyRawTotalQueryParameter
		}
		qStatisticsTCPLatencyRawTotal := swag.FormatInt64(qrStatisticsTCPLatencyRawTotal)
		if qStatisticsTCPLatencyRawTotal != "" {

			if err := r.SetQueryParam("statistics.tcp.latency_raw.total", qStatisticsTCPLatencyRawTotal); err != nil {
				return err
			}
		}
	}

	if o.StatisticsTCPLatencyRawWriteQueryParameter != nil {

		// query param statistics.tcp.latency_raw.write
		var qrStatisticsTCPLatencyRawWrite int64

		if o.StatisticsTCPLatencyRawWriteQueryParameter != nil {
			qrStatisticsTCPLatencyRawWrite = *o.StatisticsTCPLatencyRawWriteQueryParameter
		}
		qStatisticsTCPLatencyRawWrite := swag.FormatInt64(qrStatisticsTCPLatencyRawWrite)
		if qStatisticsTCPLatencyRawWrite != "" {

			if err := r.SetQueryParam("statistics.tcp.latency_raw.write", qStatisticsTCPLatencyRawWrite); err != nil {
				return err
			}
		}
	}

	if o.StatisticsTCPStatusQueryParameter != nil {

		// query param statistics.tcp.status
		var qrStatisticsTCPStatus string

		if o.StatisticsTCPStatusQueryParameter != nil {
			qrStatisticsTCPStatus = *o.StatisticsTCPStatusQueryParameter
		}
		qStatisticsTCPStatus := qrStatisticsTCPStatus
		if qStatisticsTCPStatus != "" {

			if err := r.SetQueryParam("statistics.tcp.status", qStatisticsTCPStatus); err != nil {
				return err
			}
		}
	}

	if o.StatisticsTCPThroughputRawReadQueryParameter != nil {

		// query param statistics.tcp.throughput_raw.read
		var qrStatisticsTCPThroughputRawRead int64

		if o.StatisticsTCPThroughputRawReadQueryParameter != nil {
			qrStatisticsTCPThroughputRawRead = *o.StatisticsTCPThroughputRawReadQueryParameter
		}
		qStatisticsTCPThroughputRawRead := swag.FormatInt64(qrStatisticsTCPThroughputRawRead)
		if qStatisticsTCPThroughputRawRead != "" {

			if err := r.SetQueryParam("statistics.tcp.throughput_raw.read", qStatisticsTCPThroughputRawRead); err != nil {
				return err
			}
		}
	}

	if o.StatisticsTCPThroughputRawTotalQueryParameter != nil {

		// query param statistics.tcp.throughput_raw.total
		var qrStatisticsTCPThroughputRawTotal int64

		if o.StatisticsTCPThroughputRawTotalQueryParameter != nil {
			qrStatisticsTCPThroughputRawTotal = *o.StatisticsTCPThroughputRawTotalQueryParameter
		}
		qStatisticsTCPThroughputRawTotal := swag.FormatInt64(qrStatisticsTCPThroughputRawTotal)
		if qStatisticsTCPThroughputRawTotal != "" {

			if err := r.SetQueryParam("statistics.tcp.throughput_raw.total", qStatisticsTCPThroughputRawTotal); err != nil {
				return err
			}
		}
	}

	if o.StatisticsTCPThroughputRawWriteQueryParameter != nil {

		// query param statistics.tcp.throughput_raw.write
		var qrStatisticsTCPThroughputRawWrite int64

		if o.StatisticsTCPThroughputRawWriteQueryParameter != nil {
			qrStatisticsTCPThroughputRawWrite = *o.StatisticsTCPThroughputRawWriteQueryParameter
		}
		qStatisticsTCPThroughputRawWrite := swag.FormatInt64(qrStatisticsTCPThroughputRawWrite)
		if qStatisticsTCPThroughputRawWrite != "" {

			if err := r.SetQueryParam("statistics.tcp.throughput_raw.write", qStatisticsTCPThroughputRawWrite); err != nil {
				return err
			}
		}
	}

	if o.StatisticsTCPTimestampQueryParameter != nil {

		// query param statistics.tcp.timestamp
		var qrStatisticsTCPTimestamp string

		if o.StatisticsTCPTimestampQueryParameter != nil {
			qrStatisticsTCPTimestamp = *o.StatisticsTCPTimestampQueryParameter
		}
		qStatisticsTCPTimestamp := qrStatisticsTCPTimestamp
		if qStatisticsTCPTimestamp != "" {

			if err := r.SetQueryParam("statistics.tcp.timestamp", qStatisticsTCPTimestamp); err != nil {
				return err
			}
		}
	}

	if o.StatisticsThroughputRawReadQueryParameter != nil {

		// query param statistics.throughput_raw.read
		var qrStatisticsThroughputRawRead int64

		if o.StatisticsThroughputRawReadQueryParameter != nil {
			qrStatisticsThroughputRawRead = *o.StatisticsThroughputRawReadQueryParameter
		}
		qStatisticsThroughputRawRead := swag.FormatInt64(qrStatisticsThroughputRawRead)
		if qStatisticsThroughputRawRead != "" {

			if err := r.SetQueryParam("statistics.throughput_raw.read", qStatisticsThroughputRawRead); err != nil {
				return err
			}
		}
	}

	if o.StatisticsThroughputRawTotalQueryParameter != nil {

		// query param statistics.throughput_raw.total
		var qrStatisticsThroughputRawTotal int64

		if o.StatisticsThroughputRawTotalQueryParameter != nil {
			qrStatisticsThroughputRawTotal = *o.StatisticsThroughputRawTotalQueryParameter
		}
		qStatisticsThroughputRawTotal := swag.FormatInt64(qrStatisticsThroughputRawTotal)
		if qStatisticsThroughputRawTotal != "" {

			if err := r.SetQueryParam("statistics.throughput_raw.total", qStatisticsThroughputRawTotal); err != nil {
				return err
			}
		}
	}

	if o.StatisticsThroughputRawWriteQueryParameter != nil {

		// query param statistics.throughput_raw.write
		var qrStatisticsThroughputRawWrite int64

		if o.StatisticsThroughputRawWriteQueryParameter != nil {
			qrStatisticsThroughputRawWrite = *o.StatisticsThroughputRawWriteQueryParameter
		}
		qStatisticsThroughputRawWrite := swag.FormatInt64(qrStatisticsThroughputRawWrite)
		if qStatisticsThroughputRawWrite != "" {

			if err := r.SetQueryParam("statistics.throughput_raw.write", qStatisticsThroughputRawWrite); err != nil {
				return err
			}
		}
	}

	if o.StatisticsTimestampQueryParameter != nil {

		// query param statistics.timestamp
		var qrStatisticsTimestamp string

		if o.StatisticsTimestampQueryParameter != nil {
			qrStatisticsTimestamp = *o.StatisticsTimestampQueryParameter
		}
		qStatisticsTimestamp := qrStatisticsTimestamp
		if qStatisticsTimestamp != "" {

			if err := r.SetQueryParam("statistics.timestamp", qStatisticsTimestamp); err != nil {
				return err
			}
		}
	}

	if o.SVMNameQueryParameter != nil {

		// query param svm.name
		var qrSvmName string

		if o.SVMNameQueryParameter != nil {
			qrSvmName = *o.SVMNameQueryParameter
		}
		qSvmName := qrSvmName
		if qSvmName != "" {

			if err := r.SetQueryParam("svm.name", qSvmName); err != nil {
				return err
			}
		}
	}

	if o.SVMUUIDQueryParameter != nil {

		// query param svm.uuid
		var qrSvmUUID string

		if o.SVMUUIDQueryParameter != nil {
			qrSvmUUID = *o.SVMUUIDQueryParameter
		}
		qSvmUUID := qrSvmUUID
		if qSvmUUID != "" {

			if err := r.SetQueryParam("svm.uuid", qSvmUUID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamNvmeServiceCollectionGet binds the parameter fields
func (o *NvmeServiceCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.FieldsQueryParameter

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamNvmeServiceCollectionGet binds the parameter order_by
func (o *NvmeServiceCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderByQueryParameter

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
