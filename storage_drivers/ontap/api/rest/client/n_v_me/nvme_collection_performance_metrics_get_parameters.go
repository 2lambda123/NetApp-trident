// Code generated by go-swagger; DO NOT EDIT.

package n_v_me

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewNvmeCollectionPerformanceMetricsGetParams creates a new NvmeCollectionPerformanceMetricsGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewNvmeCollectionPerformanceMetricsGetParams() *NvmeCollectionPerformanceMetricsGetParams {
	return &NvmeCollectionPerformanceMetricsGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewNvmeCollectionPerformanceMetricsGetParamsWithTimeout creates a new NvmeCollectionPerformanceMetricsGetParams object
// with the ability to set a timeout on a request.
func NewNvmeCollectionPerformanceMetricsGetParamsWithTimeout(timeout time.Duration) *NvmeCollectionPerformanceMetricsGetParams {
	return &NvmeCollectionPerformanceMetricsGetParams{
		timeout: timeout,
	}
}

// NewNvmeCollectionPerformanceMetricsGetParamsWithContext creates a new NvmeCollectionPerformanceMetricsGetParams object
// with the ability to set a context for a request.
func NewNvmeCollectionPerformanceMetricsGetParamsWithContext(ctx context.Context) *NvmeCollectionPerformanceMetricsGetParams {
	return &NvmeCollectionPerformanceMetricsGetParams{
		Context: ctx,
	}
}

// NewNvmeCollectionPerformanceMetricsGetParamsWithHTTPClient creates a new NvmeCollectionPerformanceMetricsGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewNvmeCollectionPerformanceMetricsGetParamsWithHTTPClient(client *http.Client) *NvmeCollectionPerformanceMetricsGetParams {
	return &NvmeCollectionPerformanceMetricsGetParams{
		HTTPClient: client,
	}
}

/*
NvmeCollectionPerformanceMetricsGetParams contains all the parameters to send to the API endpoint

	for the nvme collection performance metrics get operation.

	Typically these are written to a http.Request.
*/
type NvmeCollectionPerformanceMetricsGetParams struct {

	/* Duration.

	   Filter by duration
	*/
	DurationQueryParameter *string

	/* FcDuration.

	   Filter by fc.duration
	*/
	FcDurationQueryParameter *string

	/* FcIopsOther.

	   Filter by fc.iops.other
	*/
	FcIopsOtherQueryParameter *int64

	/* FcIopsRead.

	   Filter by fc.iops.read
	*/
	FcIopsReadQueryParameter *int64

	/* FcIopsTotal.

	   Filter by fc.iops.total
	*/
	FcIopsTotalQueryParameter *int64

	/* FcIopsWrite.

	   Filter by fc.iops.write
	*/
	FcIopsWriteQueryParameter *int64

	/* FcLatencyOther.

	   Filter by fc.latency.other
	*/
	FcLatencyOtherQueryParameter *int64

	/* FcLatencyRead.

	   Filter by fc.latency.read
	*/
	FcLatencyReadQueryParameter *int64

	/* FcLatencyTotal.

	   Filter by fc.latency.total
	*/
	FcLatencyTotalQueryParameter *int64

	/* FcLatencyWrite.

	   Filter by fc.latency.write
	*/
	FcLatencyWriteQueryParameter *int64

	/* FcStatus.

	   Filter by fc.status
	*/
	FcStatusQueryParameter *string

	/* FcThroughputRead.

	   Filter by fc.throughput.read
	*/
	FcThroughputReadQueryParameter *int64

	/* FcThroughputTotal.

	   Filter by fc.throughput.total
	*/
	FcThroughputTotalQueryParameter *int64

	/* FcThroughputWrite.

	   Filter by fc.throughput.write
	*/
	FcThroughputWriteQueryParameter *int64

	/* Fields.

	   Specify the fields to return.
	*/
	FieldsQueryParameter []string

	/* Interval.

	     The time range for the data. Examples can be 1h, 1d, 1m, 1w, 1y.
	The period for each time range is as follows:
	* 1h: Metrics over the most recent hour sampled over 15 seconds.
	* 1d: Metrics over the most recent day sampled over 5 minutes.
	* 1w: Metrics over the most recent week sampled over 30 minutes.
	* 1m: Metrics over the most recent month sampled over 2 hours.
	* 1y: Metrics over the most recent year sampled over a day.


	     Default: "1h"
	*/
	IntervalQueryParameter *string

	/* IopsOther.

	   Filter by iops.other
	*/
	IopsOtherQueryParameter *int64

	/* IopsRead.

	   Filter by iops.read
	*/
	IopsReadQueryParameter *int64

	/* IopsTotal.

	   Filter by iops.total
	*/
	IopsTotalQueryParameter *int64

	/* IopsWrite.

	   Filter by iops.write
	*/
	IopsWriteQueryParameter *int64

	/* LatencyOther.

	   Filter by latency.other
	*/
	LatencyOtherQueryParameter *int64

	/* LatencyRead.

	   Filter by latency.read
	*/
	LatencyReadQueryParameter *int64

	/* LatencyTotal.

	   Filter by latency.total
	*/
	LatencyTotalQueryParameter *int64

	/* LatencyWrite.

	   Filter by latency.write
	*/
	LatencyWriteQueryParameter *int64

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecordsQueryParameter *int64

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderByQueryParameter []string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecordsQueryParameter *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeoutQueryParameter *int64

	/* Status.

	   Filter by status
	*/
	StatusQueryParameter *string

	/* SvmUUID.

	   Unique identifier of the SVM.
	*/
	SVMUUIDPathParameter string

	/* TCPDuration.

	   Filter by tcp.duration
	*/
	TCPDurationQueryParameter *string

	/* TCPIopsOther.

	   Filter by tcp.iops.other
	*/
	TCPIopsOtherQueryParameter *int64

	/* TCPIopsRead.

	   Filter by tcp.iops.read
	*/
	TCPIopsReadQueryParameter *int64

	/* TCPIopsTotal.

	   Filter by tcp.iops.total
	*/
	TCPIopsTotalQueryParameter *int64

	/* TCPIopsWrite.

	   Filter by tcp.iops.write
	*/
	TCPIopsWriteQueryParameter *int64

	/* TCPLatencyOther.

	   Filter by tcp.latency.other
	*/
	TCPLatencyOtherQueryParameter *int64

	/* TCPLatencyRead.

	   Filter by tcp.latency.read
	*/
	TCPLatencyReadQueryParameter *int64

	/* TCPLatencyTotal.

	   Filter by tcp.latency.total
	*/
	TCPLatencyTotalQueryParameter *int64

	/* TCPLatencyWrite.

	   Filter by tcp.latency.write
	*/
	TCPLatencyWriteQueryParameter *int64

	/* TCPStatus.

	   Filter by tcp.status
	*/
	TCPStatusQueryParameter *string

	/* TCPThroughputRead.

	   Filter by tcp.throughput.read
	*/
	TCPThroughputReadQueryParameter *int64

	/* TCPThroughputTotal.

	   Filter by tcp.throughput.total
	*/
	TCPThroughputTotalQueryParameter *int64

	/* TCPThroughputWrite.

	   Filter by tcp.throughput.write
	*/
	TCPThroughputWriteQueryParameter *int64

	/* ThroughputRead.

	   Filter by throughput.read
	*/
	ThroughputReadQueryParameter *int64

	/* ThroughputTotal.

	   Filter by throughput.total
	*/
	ThroughputTotalQueryParameter *int64

	/* ThroughputWrite.

	   Filter by throughput.write
	*/
	ThroughputWriteQueryParameter *int64

	/* Timestamp.

	   Filter by timestamp
	*/
	TimestampQueryParameter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the nvme collection performance metrics get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NvmeCollectionPerformanceMetricsGetParams) WithDefaults() *NvmeCollectionPerformanceMetricsGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the nvme collection performance metrics get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NvmeCollectionPerformanceMetricsGetParams) SetDefaults() {
	var (
		intervalQueryParameterDefault = string("1h")

		returnRecordsQueryParameterDefault = bool(true)

		returnTimeoutQueryParameterDefault = int64(15)
	)

	val := NvmeCollectionPerformanceMetricsGetParams{
		IntervalQueryParameter:      &intervalQueryParameterDefault,
		ReturnRecordsQueryParameter: &returnRecordsQueryParameterDefault,
		ReturnTimeoutQueryParameter: &returnTimeoutQueryParameterDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) WithTimeout(timeout time.Duration) *NvmeCollectionPerformanceMetricsGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) WithContext(ctx context.Context) *NvmeCollectionPerformanceMetricsGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) WithHTTPClient(client *http.Client) *NvmeCollectionPerformanceMetricsGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDurationQueryParameter adds the duration to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) WithDurationQueryParameter(duration *string) *NvmeCollectionPerformanceMetricsGetParams {
	o.SetDurationQueryParameter(duration)
	return o
}

// SetDurationQueryParameter adds the duration to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) SetDurationQueryParameter(duration *string) {
	o.DurationQueryParameter = duration
}

// WithFcDurationQueryParameter adds the fcDuration to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) WithFcDurationQueryParameter(fcDuration *string) *NvmeCollectionPerformanceMetricsGetParams {
	o.SetFcDurationQueryParameter(fcDuration)
	return o
}

// SetFcDurationQueryParameter adds the fcDuration to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) SetFcDurationQueryParameter(fcDuration *string) {
	o.FcDurationQueryParameter = fcDuration
}

// WithFcIopsOtherQueryParameter adds the fcIopsOther to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) WithFcIopsOtherQueryParameter(fcIopsOther *int64) *NvmeCollectionPerformanceMetricsGetParams {
	o.SetFcIopsOtherQueryParameter(fcIopsOther)
	return o
}

// SetFcIopsOtherQueryParameter adds the fcIopsOther to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) SetFcIopsOtherQueryParameter(fcIopsOther *int64) {
	o.FcIopsOtherQueryParameter = fcIopsOther
}

// WithFcIopsReadQueryParameter adds the fcIopsRead to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) WithFcIopsReadQueryParameter(fcIopsRead *int64) *NvmeCollectionPerformanceMetricsGetParams {
	o.SetFcIopsReadQueryParameter(fcIopsRead)
	return o
}

// SetFcIopsReadQueryParameter adds the fcIopsRead to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) SetFcIopsReadQueryParameter(fcIopsRead *int64) {
	o.FcIopsReadQueryParameter = fcIopsRead
}

// WithFcIopsTotalQueryParameter adds the fcIopsTotal to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) WithFcIopsTotalQueryParameter(fcIopsTotal *int64) *NvmeCollectionPerformanceMetricsGetParams {
	o.SetFcIopsTotalQueryParameter(fcIopsTotal)
	return o
}

// SetFcIopsTotalQueryParameter adds the fcIopsTotal to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) SetFcIopsTotalQueryParameter(fcIopsTotal *int64) {
	o.FcIopsTotalQueryParameter = fcIopsTotal
}

// WithFcIopsWriteQueryParameter adds the fcIopsWrite to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) WithFcIopsWriteQueryParameter(fcIopsWrite *int64) *NvmeCollectionPerformanceMetricsGetParams {
	o.SetFcIopsWriteQueryParameter(fcIopsWrite)
	return o
}

// SetFcIopsWriteQueryParameter adds the fcIopsWrite to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) SetFcIopsWriteQueryParameter(fcIopsWrite *int64) {
	o.FcIopsWriteQueryParameter = fcIopsWrite
}

// WithFcLatencyOtherQueryParameter adds the fcLatencyOther to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) WithFcLatencyOtherQueryParameter(fcLatencyOther *int64) *NvmeCollectionPerformanceMetricsGetParams {
	o.SetFcLatencyOtherQueryParameter(fcLatencyOther)
	return o
}

// SetFcLatencyOtherQueryParameter adds the fcLatencyOther to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) SetFcLatencyOtherQueryParameter(fcLatencyOther *int64) {
	o.FcLatencyOtherQueryParameter = fcLatencyOther
}

// WithFcLatencyReadQueryParameter adds the fcLatencyRead to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) WithFcLatencyReadQueryParameter(fcLatencyRead *int64) *NvmeCollectionPerformanceMetricsGetParams {
	o.SetFcLatencyReadQueryParameter(fcLatencyRead)
	return o
}

// SetFcLatencyReadQueryParameter adds the fcLatencyRead to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) SetFcLatencyReadQueryParameter(fcLatencyRead *int64) {
	o.FcLatencyReadQueryParameter = fcLatencyRead
}

// WithFcLatencyTotalQueryParameter adds the fcLatencyTotal to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) WithFcLatencyTotalQueryParameter(fcLatencyTotal *int64) *NvmeCollectionPerformanceMetricsGetParams {
	o.SetFcLatencyTotalQueryParameter(fcLatencyTotal)
	return o
}

// SetFcLatencyTotalQueryParameter adds the fcLatencyTotal to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) SetFcLatencyTotalQueryParameter(fcLatencyTotal *int64) {
	o.FcLatencyTotalQueryParameter = fcLatencyTotal
}

// WithFcLatencyWriteQueryParameter adds the fcLatencyWrite to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) WithFcLatencyWriteQueryParameter(fcLatencyWrite *int64) *NvmeCollectionPerformanceMetricsGetParams {
	o.SetFcLatencyWriteQueryParameter(fcLatencyWrite)
	return o
}

// SetFcLatencyWriteQueryParameter adds the fcLatencyWrite to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) SetFcLatencyWriteQueryParameter(fcLatencyWrite *int64) {
	o.FcLatencyWriteQueryParameter = fcLatencyWrite
}

// WithFcStatusQueryParameter adds the fcStatus to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) WithFcStatusQueryParameter(fcStatus *string) *NvmeCollectionPerformanceMetricsGetParams {
	o.SetFcStatusQueryParameter(fcStatus)
	return o
}

// SetFcStatusQueryParameter adds the fcStatus to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) SetFcStatusQueryParameter(fcStatus *string) {
	o.FcStatusQueryParameter = fcStatus
}

// WithFcThroughputReadQueryParameter adds the fcThroughputRead to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) WithFcThroughputReadQueryParameter(fcThroughputRead *int64) *NvmeCollectionPerformanceMetricsGetParams {
	o.SetFcThroughputReadQueryParameter(fcThroughputRead)
	return o
}

// SetFcThroughputReadQueryParameter adds the fcThroughputRead to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) SetFcThroughputReadQueryParameter(fcThroughputRead *int64) {
	o.FcThroughputReadQueryParameter = fcThroughputRead
}

// WithFcThroughputTotalQueryParameter adds the fcThroughputTotal to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) WithFcThroughputTotalQueryParameter(fcThroughputTotal *int64) *NvmeCollectionPerformanceMetricsGetParams {
	o.SetFcThroughputTotalQueryParameter(fcThroughputTotal)
	return o
}

// SetFcThroughputTotalQueryParameter adds the fcThroughputTotal to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) SetFcThroughputTotalQueryParameter(fcThroughputTotal *int64) {
	o.FcThroughputTotalQueryParameter = fcThroughputTotal
}

// WithFcThroughputWriteQueryParameter adds the fcThroughputWrite to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) WithFcThroughputWriteQueryParameter(fcThroughputWrite *int64) *NvmeCollectionPerformanceMetricsGetParams {
	o.SetFcThroughputWriteQueryParameter(fcThroughputWrite)
	return o
}

// SetFcThroughputWriteQueryParameter adds the fcThroughputWrite to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) SetFcThroughputWriteQueryParameter(fcThroughputWrite *int64) {
	o.FcThroughputWriteQueryParameter = fcThroughputWrite
}

// WithFieldsQueryParameter adds the fields to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) WithFieldsQueryParameter(fields []string) *NvmeCollectionPerformanceMetricsGetParams {
	o.SetFieldsQueryParameter(fields)
	return o
}

// SetFieldsQueryParameter adds the fields to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) SetFieldsQueryParameter(fields []string) {
	o.FieldsQueryParameter = fields
}

// WithIntervalQueryParameter adds the interval to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) WithIntervalQueryParameter(interval *string) *NvmeCollectionPerformanceMetricsGetParams {
	o.SetIntervalQueryParameter(interval)
	return o
}

// SetIntervalQueryParameter adds the interval to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) SetIntervalQueryParameter(interval *string) {
	o.IntervalQueryParameter = interval
}

// WithIopsOtherQueryParameter adds the iopsOther to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) WithIopsOtherQueryParameter(iopsOther *int64) *NvmeCollectionPerformanceMetricsGetParams {
	o.SetIopsOtherQueryParameter(iopsOther)
	return o
}

// SetIopsOtherQueryParameter adds the iopsOther to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) SetIopsOtherQueryParameter(iopsOther *int64) {
	o.IopsOtherQueryParameter = iopsOther
}

// WithIopsReadQueryParameter adds the iopsRead to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) WithIopsReadQueryParameter(iopsRead *int64) *NvmeCollectionPerformanceMetricsGetParams {
	o.SetIopsReadQueryParameter(iopsRead)
	return o
}

// SetIopsReadQueryParameter adds the iopsRead to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) SetIopsReadQueryParameter(iopsRead *int64) {
	o.IopsReadQueryParameter = iopsRead
}

// WithIopsTotalQueryParameter adds the iopsTotal to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) WithIopsTotalQueryParameter(iopsTotal *int64) *NvmeCollectionPerformanceMetricsGetParams {
	o.SetIopsTotalQueryParameter(iopsTotal)
	return o
}

// SetIopsTotalQueryParameter adds the iopsTotal to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) SetIopsTotalQueryParameter(iopsTotal *int64) {
	o.IopsTotalQueryParameter = iopsTotal
}

// WithIopsWriteQueryParameter adds the iopsWrite to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) WithIopsWriteQueryParameter(iopsWrite *int64) *NvmeCollectionPerformanceMetricsGetParams {
	o.SetIopsWriteQueryParameter(iopsWrite)
	return o
}

// SetIopsWriteQueryParameter adds the iopsWrite to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) SetIopsWriteQueryParameter(iopsWrite *int64) {
	o.IopsWriteQueryParameter = iopsWrite
}

// WithLatencyOtherQueryParameter adds the latencyOther to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) WithLatencyOtherQueryParameter(latencyOther *int64) *NvmeCollectionPerformanceMetricsGetParams {
	o.SetLatencyOtherQueryParameter(latencyOther)
	return o
}

// SetLatencyOtherQueryParameter adds the latencyOther to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) SetLatencyOtherQueryParameter(latencyOther *int64) {
	o.LatencyOtherQueryParameter = latencyOther
}

// WithLatencyReadQueryParameter adds the latencyRead to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) WithLatencyReadQueryParameter(latencyRead *int64) *NvmeCollectionPerformanceMetricsGetParams {
	o.SetLatencyReadQueryParameter(latencyRead)
	return o
}

// SetLatencyReadQueryParameter adds the latencyRead to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) SetLatencyReadQueryParameter(latencyRead *int64) {
	o.LatencyReadQueryParameter = latencyRead
}

// WithLatencyTotalQueryParameter adds the latencyTotal to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) WithLatencyTotalQueryParameter(latencyTotal *int64) *NvmeCollectionPerformanceMetricsGetParams {
	o.SetLatencyTotalQueryParameter(latencyTotal)
	return o
}

// SetLatencyTotalQueryParameter adds the latencyTotal to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) SetLatencyTotalQueryParameter(latencyTotal *int64) {
	o.LatencyTotalQueryParameter = latencyTotal
}

// WithLatencyWriteQueryParameter adds the latencyWrite to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) WithLatencyWriteQueryParameter(latencyWrite *int64) *NvmeCollectionPerformanceMetricsGetParams {
	o.SetLatencyWriteQueryParameter(latencyWrite)
	return o
}

// SetLatencyWriteQueryParameter adds the latencyWrite to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) SetLatencyWriteQueryParameter(latencyWrite *int64) {
	o.LatencyWriteQueryParameter = latencyWrite
}

// WithMaxRecordsQueryParameter adds the maxRecords to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) WithMaxRecordsQueryParameter(maxRecords *int64) *NvmeCollectionPerformanceMetricsGetParams {
	o.SetMaxRecordsQueryParameter(maxRecords)
	return o
}

// SetMaxRecordsQueryParameter adds the maxRecords to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) SetMaxRecordsQueryParameter(maxRecords *int64) {
	o.MaxRecordsQueryParameter = maxRecords
}

// WithOrderByQueryParameter adds the orderBy to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) WithOrderByQueryParameter(orderBy []string) *NvmeCollectionPerformanceMetricsGetParams {
	o.SetOrderByQueryParameter(orderBy)
	return o
}

// SetOrderByQueryParameter adds the orderBy to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) SetOrderByQueryParameter(orderBy []string) {
	o.OrderByQueryParameter = orderBy
}

// WithReturnRecordsQueryParameter adds the returnRecords to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) WithReturnRecordsQueryParameter(returnRecords *bool) *NvmeCollectionPerformanceMetricsGetParams {
	o.SetReturnRecordsQueryParameter(returnRecords)
	return o
}

// SetReturnRecordsQueryParameter adds the returnRecords to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) SetReturnRecordsQueryParameter(returnRecords *bool) {
	o.ReturnRecordsQueryParameter = returnRecords
}

// WithReturnTimeoutQueryParameter adds the returnTimeout to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) WithReturnTimeoutQueryParameter(returnTimeout *int64) *NvmeCollectionPerformanceMetricsGetParams {
	o.SetReturnTimeoutQueryParameter(returnTimeout)
	return o
}

// SetReturnTimeoutQueryParameter adds the returnTimeout to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) SetReturnTimeoutQueryParameter(returnTimeout *int64) {
	o.ReturnTimeoutQueryParameter = returnTimeout
}

// WithStatusQueryParameter adds the status to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) WithStatusQueryParameter(status *string) *NvmeCollectionPerformanceMetricsGetParams {
	o.SetStatusQueryParameter(status)
	return o
}

// SetStatusQueryParameter adds the status to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) SetStatusQueryParameter(status *string) {
	o.StatusQueryParameter = status
}

// WithSVMUUIDPathParameter adds the svmUUID to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) WithSVMUUIDPathParameter(svmUUID string) *NvmeCollectionPerformanceMetricsGetParams {
	o.SetSVMUUIDPathParameter(svmUUID)
	return o
}

// SetSVMUUIDPathParameter adds the svmUuid to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) SetSVMUUIDPathParameter(svmUUID string) {
	o.SVMUUIDPathParameter = svmUUID
}

// WithTCPDurationQueryParameter adds the tCPDuration to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) WithTCPDurationQueryParameter(tCPDuration *string) *NvmeCollectionPerformanceMetricsGetParams {
	o.SetTCPDurationQueryParameter(tCPDuration)
	return o
}

// SetTCPDurationQueryParameter adds the tcpDuration to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) SetTCPDurationQueryParameter(tCPDuration *string) {
	o.TCPDurationQueryParameter = tCPDuration
}

// WithTCPIopsOtherQueryParameter adds the tCPIopsOther to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) WithTCPIopsOtherQueryParameter(tCPIopsOther *int64) *NvmeCollectionPerformanceMetricsGetParams {
	o.SetTCPIopsOtherQueryParameter(tCPIopsOther)
	return o
}

// SetTCPIopsOtherQueryParameter adds the tcpIopsOther to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) SetTCPIopsOtherQueryParameter(tCPIopsOther *int64) {
	o.TCPIopsOtherQueryParameter = tCPIopsOther
}

// WithTCPIopsReadQueryParameter adds the tCPIopsRead to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) WithTCPIopsReadQueryParameter(tCPIopsRead *int64) *NvmeCollectionPerformanceMetricsGetParams {
	o.SetTCPIopsReadQueryParameter(tCPIopsRead)
	return o
}

// SetTCPIopsReadQueryParameter adds the tcpIopsRead to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) SetTCPIopsReadQueryParameter(tCPIopsRead *int64) {
	o.TCPIopsReadQueryParameter = tCPIopsRead
}

// WithTCPIopsTotalQueryParameter adds the tCPIopsTotal to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) WithTCPIopsTotalQueryParameter(tCPIopsTotal *int64) *NvmeCollectionPerformanceMetricsGetParams {
	o.SetTCPIopsTotalQueryParameter(tCPIopsTotal)
	return o
}

// SetTCPIopsTotalQueryParameter adds the tcpIopsTotal to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) SetTCPIopsTotalQueryParameter(tCPIopsTotal *int64) {
	o.TCPIopsTotalQueryParameter = tCPIopsTotal
}

// WithTCPIopsWriteQueryParameter adds the tCPIopsWrite to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) WithTCPIopsWriteQueryParameter(tCPIopsWrite *int64) *NvmeCollectionPerformanceMetricsGetParams {
	o.SetTCPIopsWriteQueryParameter(tCPIopsWrite)
	return o
}

// SetTCPIopsWriteQueryParameter adds the tcpIopsWrite to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) SetTCPIopsWriteQueryParameter(tCPIopsWrite *int64) {
	o.TCPIopsWriteQueryParameter = tCPIopsWrite
}

// WithTCPLatencyOtherQueryParameter adds the tCPLatencyOther to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) WithTCPLatencyOtherQueryParameter(tCPLatencyOther *int64) *NvmeCollectionPerformanceMetricsGetParams {
	o.SetTCPLatencyOtherQueryParameter(tCPLatencyOther)
	return o
}

// SetTCPLatencyOtherQueryParameter adds the tcpLatencyOther to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) SetTCPLatencyOtherQueryParameter(tCPLatencyOther *int64) {
	o.TCPLatencyOtherQueryParameter = tCPLatencyOther
}

// WithTCPLatencyReadQueryParameter adds the tCPLatencyRead to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) WithTCPLatencyReadQueryParameter(tCPLatencyRead *int64) *NvmeCollectionPerformanceMetricsGetParams {
	o.SetTCPLatencyReadQueryParameter(tCPLatencyRead)
	return o
}

// SetTCPLatencyReadQueryParameter adds the tcpLatencyRead to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) SetTCPLatencyReadQueryParameter(tCPLatencyRead *int64) {
	o.TCPLatencyReadQueryParameter = tCPLatencyRead
}

// WithTCPLatencyTotalQueryParameter adds the tCPLatencyTotal to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) WithTCPLatencyTotalQueryParameter(tCPLatencyTotal *int64) *NvmeCollectionPerformanceMetricsGetParams {
	o.SetTCPLatencyTotalQueryParameter(tCPLatencyTotal)
	return o
}

// SetTCPLatencyTotalQueryParameter adds the tcpLatencyTotal to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) SetTCPLatencyTotalQueryParameter(tCPLatencyTotal *int64) {
	o.TCPLatencyTotalQueryParameter = tCPLatencyTotal
}

// WithTCPLatencyWriteQueryParameter adds the tCPLatencyWrite to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) WithTCPLatencyWriteQueryParameter(tCPLatencyWrite *int64) *NvmeCollectionPerformanceMetricsGetParams {
	o.SetTCPLatencyWriteQueryParameter(tCPLatencyWrite)
	return o
}

// SetTCPLatencyWriteQueryParameter adds the tcpLatencyWrite to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) SetTCPLatencyWriteQueryParameter(tCPLatencyWrite *int64) {
	o.TCPLatencyWriteQueryParameter = tCPLatencyWrite
}

// WithTCPStatusQueryParameter adds the tCPStatus to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) WithTCPStatusQueryParameter(tCPStatus *string) *NvmeCollectionPerformanceMetricsGetParams {
	o.SetTCPStatusQueryParameter(tCPStatus)
	return o
}

// SetTCPStatusQueryParameter adds the tcpStatus to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) SetTCPStatusQueryParameter(tCPStatus *string) {
	o.TCPStatusQueryParameter = tCPStatus
}

// WithTCPThroughputReadQueryParameter adds the tCPThroughputRead to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) WithTCPThroughputReadQueryParameter(tCPThroughputRead *int64) *NvmeCollectionPerformanceMetricsGetParams {
	o.SetTCPThroughputReadQueryParameter(tCPThroughputRead)
	return o
}

// SetTCPThroughputReadQueryParameter adds the tcpThroughputRead to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) SetTCPThroughputReadQueryParameter(tCPThroughputRead *int64) {
	o.TCPThroughputReadQueryParameter = tCPThroughputRead
}

// WithTCPThroughputTotalQueryParameter adds the tCPThroughputTotal to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) WithTCPThroughputTotalQueryParameter(tCPThroughputTotal *int64) *NvmeCollectionPerformanceMetricsGetParams {
	o.SetTCPThroughputTotalQueryParameter(tCPThroughputTotal)
	return o
}

// SetTCPThroughputTotalQueryParameter adds the tcpThroughputTotal to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) SetTCPThroughputTotalQueryParameter(tCPThroughputTotal *int64) {
	o.TCPThroughputTotalQueryParameter = tCPThroughputTotal
}

// WithTCPThroughputWriteQueryParameter adds the tCPThroughputWrite to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) WithTCPThroughputWriteQueryParameter(tCPThroughputWrite *int64) *NvmeCollectionPerformanceMetricsGetParams {
	o.SetTCPThroughputWriteQueryParameter(tCPThroughputWrite)
	return o
}

// SetTCPThroughputWriteQueryParameter adds the tcpThroughputWrite to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) SetTCPThroughputWriteQueryParameter(tCPThroughputWrite *int64) {
	o.TCPThroughputWriteQueryParameter = tCPThroughputWrite
}

// WithThroughputReadQueryParameter adds the throughputRead to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) WithThroughputReadQueryParameter(throughputRead *int64) *NvmeCollectionPerformanceMetricsGetParams {
	o.SetThroughputReadQueryParameter(throughputRead)
	return o
}

// SetThroughputReadQueryParameter adds the throughputRead to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) SetThroughputReadQueryParameter(throughputRead *int64) {
	o.ThroughputReadQueryParameter = throughputRead
}

// WithThroughputTotalQueryParameter adds the throughputTotal to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) WithThroughputTotalQueryParameter(throughputTotal *int64) *NvmeCollectionPerformanceMetricsGetParams {
	o.SetThroughputTotalQueryParameter(throughputTotal)
	return o
}

// SetThroughputTotalQueryParameter adds the throughputTotal to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) SetThroughputTotalQueryParameter(throughputTotal *int64) {
	o.ThroughputTotalQueryParameter = throughputTotal
}

// WithThroughputWriteQueryParameter adds the throughputWrite to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) WithThroughputWriteQueryParameter(throughputWrite *int64) *NvmeCollectionPerformanceMetricsGetParams {
	o.SetThroughputWriteQueryParameter(throughputWrite)
	return o
}

// SetThroughputWriteQueryParameter adds the throughputWrite to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) SetThroughputWriteQueryParameter(throughputWrite *int64) {
	o.ThroughputWriteQueryParameter = throughputWrite
}

// WithTimestampQueryParameter adds the timestamp to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) WithTimestampQueryParameter(timestamp *string) *NvmeCollectionPerformanceMetricsGetParams {
	o.SetTimestampQueryParameter(timestamp)
	return o
}

// SetTimestampQueryParameter adds the timestamp to the nvme collection performance metrics get params
func (o *NvmeCollectionPerformanceMetricsGetParams) SetTimestampQueryParameter(timestamp *string) {
	o.TimestampQueryParameter = timestamp
}

// WriteToRequest writes these params to a swagger request
func (o *NvmeCollectionPerformanceMetricsGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DurationQueryParameter != nil {

		// query param duration
		var qrDuration string

		if o.DurationQueryParameter != nil {
			qrDuration = *o.DurationQueryParameter
		}
		qDuration := qrDuration
		if qDuration != "" {

			if err := r.SetQueryParam("duration", qDuration); err != nil {
				return err
			}
		}
	}

	if o.FcDurationQueryParameter != nil {

		// query param fc.duration
		var qrFcDuration string

		if o.FcDurationQueryParameter != nil {
			qrFcDuration = *o.FcDurationQueryParameter
		}
		qFcDuration := qrFcDuration
		if qFcDuration != "" {

			if err := r.SetQueryParam("fc.duration", qFcDuration); err != nil {
				return err
			}
		}
	}

	if o.FcIopsOtherQueryParameter != nil {

		// query param fc.iops.other
		var qrFcIopsOther int64

		if o.FcIopsOtherQueryParameter != nil {
			qrFcIopsOther = *o.FcIopsOtherQueryParameter
		}
		qFcIopsOther := swag.FormatInt64(qrFcIopsOther)
		if qFcIopsOther != "" {

			if err := r.SetQueryParam("fc.iops.other", qFcIopsOther); err != nil {
				return err
			}
		}
	}

	if o.FcIopsReadQueryParameter != nil {

		// query param fc.iops.read
		var qrFcIopsRead int64

		if o.FcIopsReadQueryParameter != nil {
			qrFcIopsRead = *o.FcIopsReadQueryParameter
		}
		qFcIopsRead := swag.FormatInt64(qrFcIopsRead)
		if qFcIopsRead != "" {

			if err := r.SetQueryParam("fc.iops.read", qFcIopsRead); err != nil {
				return err
			}
		}
	}

	if o.FcIopsTotalQueryParameter != nil {

		// query param fc.iops.total
		var qrFcIopsTotal int64

		if o.FcIopsTotalQueryParameter != nil {
			qrFcIopsTotal = *o.FcIopsTotalQueryParameter
		}
		qFcIopsTotal := swag.FormatInt64(qrFcIopsTotal)
		if qFcIopsTotal != "" {

			if err := r.SetQueryParam("fc.iops.total", qFcIopsTotal); err != nil {
				return err
			}
		}
	}

	if o.FcIopsWriteQueryParameter != nil {

		// query param fc.iops.write
		var qrFcIopsWrite int64

		if o.FcIopsWriteQueryParameter != nil {
			qrFcIopsWrite = *o.FcIopsWriteQueryParameter
		}
		qFcIopsWrite := swag.FormatInt64(qrFcIopsWrite)
		if qFcIopsWrite != "" {

			if err := r.SetQueryParam("fc.iops.write", qFcIopsWrite); err != nil {
				return err
			}
		}
	}

	if o.FcLatencyOtherQueryParameter != nil {

		// query param fc.latency.other
		var qrFcLatencyOther int64

		if o.FcLatencyOtherQueryParameter != nil {
			qrFcLatencyOther = *o.FcLatencyOtherQueryParameter
		}
		qFcLatencyOther := swag.FormatInt64(qrFcLatencyOther)
		if qFcLatencyOther != "" {

			if err := r.SetQueryParam("fc.latency.other", qFcLatencyOther); err != nil {
				return err
			}
		}
	}

	if o.FcLatencyReadQueryParameter != nil {

		// query param fc.latency.read
		var qrFcLatencyRead int64

		if o.FcLatencyReadQueryParameter != nil {
			qrFcLatencyRead = *o.FcLatencyReadQueryParameter
		}
		qFcLatencyRead := swag.FormatInt64(qrFcLatencyRead)
		if qFcLatencyRead != "" {

			if err := r.SetQueryParam("fc.latency.read", qFcLatencyRead); err != nil {
				return err
			}
		}
	}

	if o.FcLatencyTotalQueryParameter != nil {

		// query param fc.latency.total
		var qrFcLatencyTotal int64

		if o.FcLatencyTotalQueryParameter != nil {
			qrFcLatencyTotal = *o.FcLatencyTotalQueryParameter
		}
		qFcLatencyTotal := swag.FormatInt64(qrFcLatencyTotal)
		if qFcLatencyTotal != "" {

			if err := r.SetQueryParam("fc.latency.total", qFcLatencyTotal); err != nil {
				return err
			}
		}
	}

	if o.FcLatencyWriteQueryParameter != nil {

		// query param fc.latency.write
		var qrFcLatencyWrite int64

		if o.FcLatencyWriteQueryParameter != nil {
			qrFcLatencyWrite = *o.FcLatencyWriteQueryParameter
		}
		qFcLatencyWrite := swag.FormatInt64(qrFcLatencyWrite)
		if qFcLatencyWrite != "" {

			if err := r.SetQueryParam("fc.latency.write", qFcLatencyWrite); err != nil {
				return err
			}
		}
	}

	if o.FcStatusQueryParameter != nil {

		// query param fc.status
		var qrFcStatus string

		if o.FcStatusQueryParameter != nil {
			qrFcStatus = *o.FcStatusQueryParameter
		}
		qFcStatus := qrFcStatus
		if qFcStatus != "" {

			if err := r.SetQueryParam("fc.status", qFcStatus); err != nil {
				return err
			}
		}
	}

	if o.FcThroughputReadQueryParameter != nil {

		// query param fc.throughput.read
		var qrFcThroughputRead int64

		if o.FcThroughputReadQueryParameter != nil {
			qrFcThroughputRead = *o.FcThroughputReadQueryParameter
		}
		qFcThroughputRead := swag.FormatInt64(qrFcThroughputRead)
		if qFcThroughputRead != "" {

			if err := r.SetQueryParam("fc.throughput.read", qFcThroughputRead); err != nil {
				return err
			}
		}
	}

	if o.FcThroughputTotalQueryParameter != nil {

		// query param fc.throughput.total
		var qrFcThroughputTotal int64

		if o.FcThroughputTotalQueryParameter != nil {
			qrFcThroughputTotal = *o.FcThroughputTotalQueryParameter
		}
		qFcThroughputTotal := swag.FormatInt64(qrFcThroughputTotal)
		if qFcThroughputTotal != "" {

			if err := r.SetQueryParam("fc.throughput.total", qFcThroughputTotal); err != nil {
				return err
			}
		}
	}

	if o.FcThroughputWriteQueryParameter != nil {

		// query param fc.throughput.write
		var qrFcThroughputWrite int64

		if o.FcThroughputWriteQueryParameter != nil {
			qrFcThroughputWrite = *o.FcThroughputWriteQueryParameter
		}
		qFcThroughputWrite := swag.FormatInt64(qrFcThroughputWrite)
		if qFcThroughputWrite != "" {

			if err := r.SetQueryParam("fc.throughput.write", qFcThroughputWrite); err != nil {
				return err
			}
		}
	}

	if o.FieldsQueryParameter != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.IntervalQueryParameter != nil {

		// query param interval
		var qrInterval string

		if o.IntervalQueryParameter != nil {
			qrInterval = *o.IntervalQueryParameter
		}
		qInterval := qrInterval
		if qInterval != "" {

			if err := r.SetQueryParam("interval", qInterval); err != nil {
				return err
			}
		}
	}

	if o.IopsOtherQueryParameter != nil {

		// query param iops.other
		var qrIopsOther int64

		if o.IopsOtherQueryParameter != nil {
			qrIopsOther = *o.IopsOtherQueryParameter
		}
		qIopsOther := swag.FormatInt64(qrIopsOther)
		if qIopsOther != "" {

			if err := r.SetQueryParam("iops.other", qIopsOther); err != nil {
				return err
			}
		}
	}

	if o.IopsReadQueryParameter != nil {

		// query param iops.read
		var qrIopsRead int64

		if o.IopsReadQueryParameter != nil {
			qrIopsRead = *o.IopsReadQueryParameter
		}
		qIopsRead := swag.FormatInt64(qrIopsRead)
		if qIopsRead != "" {

			if err := r.SetQueryParam("iops.read", qIopsRead); err != nil {
				return err
			}
		}
	}

	if o.IopsTotalQueryParameter != nil {

		// query param iops.total
		var qrIopsTotal int64

		if o.IopsTotalQueryParameter != nil {
			qrIopsTotal = *o.IopsTotalQueryParameter
		}
		qIopsTotal := swag.FormatInt64(qrIopsTotal)
		if qIopsTotal != "" {

			if err := r.SetQueryParam("iops.total", qIopsTotal); err != nil {
				return err
			}
		}
	}

	if o.IopsWriteQueryParameter != nil {

		// query param iops.write
		var qrIopsWrite int64

		if o.IopsWriteQueryParameter != nil {
			qrIopsWrite = *o.IopsWriteQueryParameter
		}
		qIopsWrite := swag.FormatInt64(qrIopsWrite)
		if qIopsWrite != "" {

			if err := r.SetQueryParam("iops.write", qIopsWrite); err != nil {
				return err
			}
		}
	}

	if o.LatencyOtherQueryParameter != nil {

		// query param latency.other
		var qrLatencyOther int64

		if o.LatencyOtherQueryParameter != nil {
			qrLatencyOther = *o.LatencyOtherQueryParameter
		}
		qLatencyOther := swag.FormatInt64(qrLatencyOther)
		if qLatencyOther != "" {

			if err := r.SetQueryParam("latency.other", qLatencyOther); err != nil {
				return err
			}
		}
	}

	if o.LatencyReadQueryParameter != nil {

		// query param latency.read
		var qrLatencyRead int64

		if o.LatencyReadQueryParameter != nil {
			qrLatencyRead = *o.LatencyReadQueryParameter
		}
		qLatencyRead := swag.FormatInt64(qrLatencyRead)
		if qLatencyRead != "" {

			if err := r.SetQueryParam("latency.read", qLatencyRead); err != nil {
				return err
			}
		}
	}

	if o.LatencyTotalQueryParameter != nil {

		// query param latency.total
		var qrLatencyTotal int64

		if o.LatencyTotalQueryParameter != nil {
			qrLatencyTotal = *o.LatencyTotalQueryParameter
		}
		qLatencyTotal := swag.FormatInt64(qrLatencyTotal)
		if qLatencyTotal != "" {

			if err := r.SetQueryParam("latency.total", qLatencyTotal); err != nil {
				return err
			}
		}
	}

	if o.LatencyWriteQueryParameter != nil {

		// query param latency.write
		var qrLatencyWrite int64

		if o.LatencyWriteQueryParameter != nil {
			qrLatencyWrite = *o.LatencyWriteQueryParameter
		}
		qLatencyWrite := swag.FormatInt64(qrLatencyWrite)
		if qLatencyWrite != "" {

			if err := r.SetQueryParam("latency.write", qLatencyWrite); err != nil {
				return err
			}
		}
	}

	if o.MaxRecordsQueryParameter != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecordsQueryParameter != nil {
			qrMaxRecords = *o.MaxRecordsQueryParameter
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.OrderByQueryParameter != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.ReturnRecordsQueryParameter != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecordsQueryParameter != nil {
			qrReturnRecords = *o.ReturnRecordsQueryParameter
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeoutQueryParameter != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeoutQueryParameter != nil {
			qrReturnTimeout = *o.ReturnTimeoutQueryParameter
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.StatusQueryParameter != nil {

		// query param status
		var qrStatus string

		if o.StatusQueryParameter != nil {
			qrStatus = *o.StatusQueryParameter
		}
		qStatus := qrStatus
		if qStatus != "" {

			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}
	}

	// path param svm.uuid
	if err := r.SetPathParam("svm.uuid", o.SVMUUIDPathParameter); err != nil {
		return err
	}

	if o.TCPDurationQueryParameter != nil {

		// query param tcp.duration
		var qrTCPDuration string

		if o.TCPDurationQueryParameter != nil {
			qrTCPDuration = *o.TCPDurationQueryParameter
		}
		qTCPDuration := qrTCPDuration
		if qTCPDuration != "" {

			if err := r.SetQueryParam("tcp.duration", qTCPDuration); err != nil {
				return err
			}
		}
	}

	if o.TCPIopsOtherQueryParameter != nil {

		// query param tcp.iops.other
		var qrTCPIopsOther int64

		if o.TCPIopsOtherQueryParameter != nil {
			qrTCPIopsOther = *o.TCPIopsOtherQueryParameter
		}
		qTCPIopsOther := swag.FormatInt64(qrTCPIopsOther)
		if qTCPIopsOther != "" {

			if err := r.SetQueryParam("tcp.iops.other", qTCPIopsOther); err != nil {
				return err
			}
		}
	}

	if o.TCPIopsReadQueryParameter != nil {

		// query param tcp.iops.read
		var qrTCPIopsRead int64

		if o.TCPIopsReadQueryParameter != nil {
			qrTCPIopsRead = *o.TCPIopsReadQueryParameter
		}
		qTCPIopsRead := swag.FormatInt64(qrTCPIopsRead)
		if qTCPIopsRead != "" {

			if err := r.SetQueryParam("tcp.iops.read", qTCPIopsRead); err != nil {
				return err
			}
		}
	}

	if o.TCPIopsTotalQueryParameter != nil {

		// query param tcp.iops.total
		var qrTCPIopsTotal int64

		if o.TCPIopsTotalQueryParameter != nil {
			qrTCPIopsTotal = *o.TCPIopsTotalQueryParameter
		}
		qTCPIopsTotal := swag.FormatInt64(qrTCPIopsTotal)
		if qTCPIopsTotal != "" {

			if err := r.SetQueryParam("tcp.iops.total", qTCPIopsTotal); err != nil {
				return err
			}
		}
	}

	if o.TCPIopsWriteQueryParameter != nil {

		// query param tcp.iops.write
		var qrTCPIopsWrite int64

		if o.TCPIopsWriteQueryParameter != nil {
			qrTCPIopsWrite = *o.TCPIopsWriteQueryParameter
		}
		qTCPIopsWrite := swag.FormatInt64(qrTCPIopsWrite)
		if qTCPIopsWrite != "" {

			if err := r.SetQueryParam("tcp.iops.write", qTCPIopsWrite); err != nil {
				return err
			}
		}
	}

	if o.TCPLatencyOtherQueryParameter != nil {

		// query param tcp.latency.other
		var qrTCPLatencyOther int64

		if o.TCPLatencyOtherQueryParameter != nil {
			qrTCPLatencyOther = *o.TCPLatencyOtherQueryParameter
		}
		qTCPLatencyOther := swag.FormatInt64(qrTCPLatencyOther)
		if qTCPLatencyOther != "" {

			if err := r.SetQueryParam("tcp.latency.other", qTCPLatencyOther); err != nil {
				return err
			}
		}
	}

	if o.TCPLatencyReadQueryParameter != nil {

		// query param tcp.latency.read
		var qrTCPLatencyRead int64

		if o.TCPLatencyReadQueryParameter != nil {
			qrTCPLatencyRead = *o.TCPLatencyReadQueryParameter
		}
		qTCPLatencyRead := swag.FormatInt64(qrTCPLatencyRead)
		if qTCPLatencyRead != "" {

			if err := r.SetQueryParam("tcp.latency.read", qTCPLatencyRead); err != nil {
				return err
			}
		}
	}

	if o.TCPLatencyTotalQueryParameter != nil {

		// query param tcp.latency.total
		var qrTCPLatencyTotal int64

		if o.TCPLatencyTotalQueryParameter != nil {
			qrTCPLatencyTotal = *o.TCPLatencyTotalQueryParameter
		}
		qTCPLatencyTotal := swag.FormatInt64(qrTCPLatencyTotal)
		if qTCPLatencyTotal != "" {

			if err := r.SetQueryParam("tcp.latency.total", qTCPLatencyTotal); err != nil {
				return err
			}
		}
	}

	if o.TCPLatencyWriteQueryParameter != nil {

		// query param tcp.latency.write
		var qrTCPLatencyWrite int64

		if o.TCPLatencyWriteQueryParameter != nil {
			qrTCPLatencyWrite = *o.TCPLatencyWriteQueryParameter
		}
		qTCPLatencyWrite := swag.FormatInt64(qrTCPLatencyWrite)
		if qTCPLatencyWrite != "" {

			if err := r.SetQueryParam("tcp.latency.write", qTCPLatencyWrite); err != nil {
				return err
			}
		}
	}

	if o.TCPStatusQueryParameter != nil {

		// query param tcp.status
		var qrTCPStatus string

		if o.TCPStatusQueryParameter != nil {
			qrTCPStatus = *o.TCPStatusQueryParameter
		}
		qTCPStatus := qrTCPStatus
		if qTCPStatus != "" {

			if err := r.SetQueryParam("tcp.status", qTCPStatus); err != nil {
				return err
			}
		}
	}

	if o.TCPThroughputReadQueryParameter != nil {

		// query param tcp.throughput.read
		var qrTCPThroughputRead int64

		if o.TCPThroughputReadQueryParameter != nil {
			qrTCPThroughputRead = *o.TCPThroughputReadQueryParameter
		}
		qTCPThroughputRead := swag.FormatInt64(qrTCPThroughputRead)
		if qTCPThroughputRead != "" {

			if err := r.SetQueryParam("tcp.throughput.read", qTCPThroughputRead); err != nil {
				return err
			}
		}
	}

	if o.TCPThroughputTotalQueryParameter != nil {

		// query param tcp.throughput.total
		var qrTCPThroughputTotal int64

		if o.TCPThroughputTotalQueryParameter != nil {
			qrTCPThroughputTotal = *o.TCPThroughputTotalQueryParameter
		}
		qTCPThroughputTotal := swag.FormatInt64(qrTCPThroughputTotal)
		if qTCPThroughputTotal != "" {

			if err := r.SetQueryParam("tcp.throughput.total", qTCPThroughputTotal); err != nil {
				return err
			}
		}
	}

	if o.TCPThroughputWriteQueryParameter != nil {

		// query param tcp.throughput.write
		var qrTCPThroughputWrite int64

		if o.TCPThroughputWriteQueryParameter != nil {
			qrTCPThroughputWrite = *o.TCPThroughputWriteQueryParameter
		}
		qTCPThroughputWrite := swag.FormatInt64(qrTCPThroughputWrite)
		if qTCPThroughputWrite != "" {

			if err := r.SetQueryParam("tcp.throughput.write", qTCPThroughputWrite); err != nil {
				return err
			}
		}
	}

	if o.ThroughputReadQueryParameter != nil {

		// query param throughput.read
		var qrThroughputRead int64

		if o.ThroughputReadQueryParameter != nil {
			qrThroughputRead = *o.ThroughputReadQueryParameter
		}
		qThroughputRead := swag.FormatInt64(qrThroughputRead)
		if qThroughputRead != "" {

			if err := r.SetQueryParam("throughput.read", qThroughputRead); err != nil {
				return err
			}
		}
	}

	if o.ThroughputTotalQueryParameter != nil {

		// query param throughput.total
		var qrThroughputTotal int64

		if o.ThroughputTotalQueryParameter != nil {
			qrThroughputTotal = *o.ThroughputTotalQueryParameter
		}
		qThroughputTotal := swag.FormatInt64(qrThroughputTotal)
		if qThroughputTotal != "" {

			if err := r.SetQueryParam("throughput.total", qThroughputTotal); err != nil {
				return err
			}
		}
	}

	if o.ThroughputWriteQueryParameter != nil {

		// query param throughput.write
		var qrThroughputWrite int64

		if o.ThroughputWriteQueryParameter != nil {
			qrThroughputWrite = *o.ThroughputWriteQueryParameter
		}
		qThroughputWrite := swag.FormatInt64(qrThroughputWrite)
		if qThroughputWrite != "" {

			if err := r.SetQueryParam("throughput.write", qThroughputWrite); err != nil {
				return err
			}
		}
	}

	if o.TimestampQueryParameter != nil {

		// query param timestamp
		var qrTimestamp string

		if o.TimestampQueryParameter != nil {
			qrTimestamp = *o.TimestampQueryParameter
		}
		qTimestamp := qrTimestamp
		if qTimestamp != "" {

			if err := r.SetQueryParam("timestamp", qTimestamp); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamNvmeCollectionPerformanceMetricsGet binds the parameter fields
func (o *NvmeCollectionPerformanceMetricsGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.FieldsQueryParameter

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamNvmeCollectionPerformanceMetricsGet binds the parameter order_by
func (o *NvmeCollectionPerformanceMetricsGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderByQueryParameter

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
