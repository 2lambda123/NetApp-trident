// Code generated by go-swagger; DO NOT EDIT.

package n_v_me

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewNvmeInterfaceCollectionGetParams creates a new NvmeInterfaceCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewNvmeInterfaceCollectionGetParams() *NvmeInterfaceCollectionGetParams {
	return &NvmeInterfaceCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewNvmeInterfaceCollectionGetParamsWithTimeout creates a new NvmeInterfaceCollectionGetParams object
// with the ability to set a timeout on a request.
func NewNvmeInterfaceCollectionGetParamsWithTimeout(timeout time.Duration) *NvmeInterfaceCollectionGetParams {
	return &NvmeInterfaceCollectionGetParams{
		timeout: timeout,
	}
}

// NewNvmeInterfaceCollectionGetParamsWithContext creates a new NvmeInterfaceCollectionGetParams object
// with the ability to set a context for a request.
func NewNvmeInterfaceCollectionGetParamsWithContext(ctx context.Context) *NvmeInterfaceCollectionGetParams {
	return &NvmeInterfaceCollectionGetParams{
		Context: ctx,
	}
}

// NewNvmeInterfaceCollectionGetParamsWithHTTPClient creates a new NvmeInterfaceCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewNvmeInterfaceCollectionGetParamsWithHTTPClient(client *http.Client) *NvmeInterfaceCollectionGetParams {
	return &NvmeInterfaceCollectionGetParams{
		HTTPClient: client,
	}
}

/*
NvmeInterfaceCollectionGetParams contains all the parameters to send to the API endpoint

	for the nvme interface collection get operation.

	Typically these are written to a http.Request.
*/
type NvmeInterfaceCollectionGetParams struct {

	/* Enabled.

	   Filter by enabled
	*/
	EnabledQueryParameter *bool

	/* FcInterfacePortName.

	   Filter by fc_interface.port.name
	*/
	FcInterfacePortNameQueryParameter *string

	/* FcInterfacePortNodeName.

	   Filter by fc_interface.port.node.name
	*/
	FcInterfacePortNodeNameQueryParameter *string

	/* FcInterfacePortUUID.

	   Filter by fc_interface.port.uuid
	*/
	FcInterfacePortUUIDQueryParameter *string

	/* FcInterfaceWwnn.

	   Filter by fc_interface.wwnn
	*/
	FcInterfaceWwnnQueryParameter *string

	/* FcInterfaceWwpn.

	   Filter by fc_interface.wwpn
	*/
	FcInterfaceWwpnQueryParameter *string

	/* Fields.

	   Specify the fields to return.
	*/
	FieldsQueryParameter []string

	/* InterfaceType.

	   Filter by interface_type
	*/
	InterfaceTypeQueryParameter *string

	/* IPInterfaceIPAddress.

	   Filter by ip_interface.ip.address
	*/
	IPInterfaceIPAddressQueryParameter *string

	/* IPInterfaceLocationPortName.

	   Filter by ip_interface.location.port.name
	*/
	IPInterfaceLocationPortNameQueryParameter *string

	/* IPInterfaceLocationPortNodeName.

	   Filter by ip_interface.location.port.node.name
	*/
	IPInterfaceLocationPortNodeNameQueryParameter *string

	/* IPInterfaceLocationPortUUID.

	   Filter by ip_interface.location.port.uuid
	*/
	IPInterfaceLocationPortUUIDQueryParameter *string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecordsQueryParameter *int64

	/* Name.

	   Filter by name
	*/
	NameQueryParameter *string

	/* NodeName.

	   Filter by node.name
	*/
	NodeNameQueryParameter *string

	/* NodeUUID.

	   Filter by node.uuid
	*/
	NodeUUIDQueryParameter *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderByQueryParameter []string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecordsQueryParameter *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeoutQueryParameter *int64

	/* SvmName.

	   Filter by svm.name
	*/
	SVMNameQueryParameter *string

	/* SvmUUID.

	   Filter by svm.uuid
	*/
	SVMUUIDQueryParameter *string

	/* TransportAddress.

	   Filter by transport_address
	*/
	TransportAddressQueryParameter *string

	/* TransportProtocols.

	   Filter by transport_protocols
	*/
	TransportProtocolsQueryParameter *string

	/* UUID.

	   Filter by uuid
	*/
	UUIDQueryParameter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the nvme interface collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NvmeInterfaceCollectionGetParams) WithDefaults() *NvmeInterfaceCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the nvme interface collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NvmeInterfaceCollectionGetParams) SetDefaults() {
	var (
		returnRecordsQueryParameterDefault = bool(true)

		returnTimeoutQueryParameterDefault = int64(15)
	)

	val := NvmeInterfaceCollectionGetParams{
		ReturnRecordsQueryParameter: &returnRecordsQueryParameterDefault,
		ReturnTimeoutQueryParameter: &returnTimeoutQueryParameterDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) WithTimeout(timeout time.Duration) *NvmeInterfaceCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) WithContext(ctx context.Context) *NvmeInterfaceCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) WithHTTPClient(client *http.Client) *NvmeInterfaceCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEnabledQueryParameter adds the enabled to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) WithEnabledQueryParameter(enabled *bool) *NvmeInterfaceCollectionGetParams {
	o.SetEnabledQueryParameter(enabled)
	return o
}

// SetEnabledQueryParameter adds the enabled to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) SetEnabledQueryParameter(enabled *bool) {
	o.EnabledQueryParameter = enabled
}

// WithFcInterfacePortNameQueryParameter adds the fcInterfacePortName to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) WithFcInterfacePortNameQueryParameter(fcInterfacePortName *string) *NvmeInterfaceCollectionGetParams {
	o.SetFcInterfacePortNameQueryParameter(fcInterfacePortName)
	return o
}

// SetFcInterfacePortNameQueryParameter adds the fcInterfacePortName to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) SetFcInterfacePortNameQueryParameter(fcInterfacePortName *string) {
	o.FcInterfacePortNameQueryParameter = fcInterfacePortName
}

// WithFcInterfacePortNodeNameQueryParameter adds the fcInterfacePortNodeName to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) WithFcInterfacePortNodeNameQueryParameter(fcInterfacePortNodeName *string) *NvmeInterfaceCollectionGetParams {
	o.SetFcInterfacePortNodeNameQueryParameter(fcInterfacePortNodeName)
	return o
}

// SetFcInterfacePortNodeNameQueryParameter adds the fcInterfacePortNodeName to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) SetFcInterfacePortNodeNameQueryParameter(fcInterfacePortNodeName *string) {
	o.FcInterfacePortNodeNameQueryParameter = fcInterfacePortNodeName
}

// WithFcInterfacePortUUIDQueryParameter adds the fcInterfacePortUUID to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) WithFcInterfacePortUUIDQueryParameter(fcInterfacePortUUID *string) *NvmeInterfaceCollectionGetParams {
	o.SetFcInterfacePortUUIDQueryParameter(fcInterfacePortUUID)
	return o
}

// SetFcInterfacePortUUIDQueryParameter adds the fcInterfacePortUuid to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) SetFcInterfacePortUUIDQueryParameter(fcInterfacePortUUID *string) {
	o.FcInterfacePortUUIDQueryParameter = fcInterfacePortUUID
}

// WithFcInterfaceWwnnQueryParameter adds the fcInterfaceWwnn to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) WithFcInterfaceWwnnQueryParameter(fcInterfaceWwnn *string) *NvmeInterfaceCollectionGetParams {
	o.SetFcInterfaceWwnnQueryParameter(fcInterfaceWwnn)
	return o
}

// SetFcInterfaceWwnnQueryParameter adds the fcInterfaceWwnn to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) SetFcInterfaceWwnnQueryParameter(fcInterfaceWwnn *string) {
	o.FcInterfaceWwnnQueryParameter = fcInterfaceWwnn
}

// WithFcInterfaceWwpnQueryParameter adds the fcInterfaceWwpn to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) WithFcInterfaceWwpnQueryParameter(fcInterfaceWwpn *string) *NvmeInterfaceCollectionGetParams {
	o.SetFcInterfaceWwpnQueryParameter(fcInterfaceWwpn)
	return o
}

// SetFcInterfaceWwpnQueryParameter adds the fcInterfaceWwpn to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) SetFcInterfaceWwpnQueryParameter(fcInterfaceWwpn *string) {
	o.FcInterfaceWwpnQueryParameter = fcInterfaceWwpn
}

// WithFieldsQueryParameter adds the fields to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) WithFieldsQueryParameter(fields []string) *NvmeInterfaceCollectionGetParams {
	o.SetFieldsQueryParameter(fields)
	return o
}

// SetFieldsQueryParameter adds the fields to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) SetFieldsQueryParameter(fields []string) {
	o.FieldsQueryParameter = fields
}

// WithInterfaceTypeQueryParameter adds the interfaceType to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) WithInterfaceTypeQueryParameter(interfaceType *string) *NvmeInterfaceCollectionGetParams {
	o.SetInterfaceTypeQueryParameter(interfaceType)
	return o
}

// SetInterfaceTypeQueryParameter adds the interfaceType to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) SetInterfaceTypeQueryParameter(interfaceType *string) {
	o.InterfaceTypeQueryParameter = interfaceType
}

// WithIPInterfaceIPAddressQueryParameter adds the iPInterfaceIPAddress to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) WithIPInterfaceIPAddressQueryParameter(iPInterfaceIPAddress *string) *NvmeInterfaceCollectionGetParams {
	o.SetIPInterfaceIPAddressQueryParameter(iPInterfaceIPAddress)
	return o
}

// SetIPInterfaceIPAddressQueryParameter adds the ipInterfaceIpAddress to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) SetIPInterfaceIPAddressQueryParameter(iPInterfaceIPAddress *string) {
	o.IPInterfaceIPAddressQueryParameter = iPInterfaceIPAddress
}

// WithIPInterfaceLocationPortNameQueryParameter adds the iPInterfaceLocationPortName to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) WithIPInterfaceLocationPortNameQueryParameter(iPInterfaceLocationPortName *string) *NvmeInterfaceCollectionGetParams {
	o.SetIPInterfaceLocationPortNameQueryParameter(iPInterfaceLocationPortName)
	return o
}

// SetIPInterfaceLocationPortNameQueryParameter adds the ipInterfaceLocationPortName to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) SetIPInterfaceLocationPortNameQueryParameter(iPInterfaceLocationPortName *string) {
	o.IPInterfaceLocationPortNameQueryParameter = iPInterfaceLocationPortName
}

// WithIPInterfaceLocationPortNodeNameQueryParameter adds the iPInterfaceLocationPortNodeName to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) WithIPInterfaceLocationPortNodeNameQueryParameter(iPInterfaceLocationPortNodeName *string) *NvmeInterfaceCollectionGetParams {
	o.SetIPInterfaceLocationPortNodeNameQueryParameter(iPInterfaceLocationPortNodeName)
	return o
}

// SetIPInterfaceLocationPortNodeNameQueryParameter adds the ipInterfaceLocationPortNodeName to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) SetIPInterfaceLocationPortNodeNameQueryParameter(iPInterfaceLocationPortNodeName *string) {
	o.IPInterfaceLocationPortNodeNameQueryParameter = iPInterfaceLocationPortNodeName
}

// WithIPInterfaceLocationPortUUIDQueryParameter adds the iPInterfaceLocationPortUUID to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) WithIPInterfaceLocationPortUUIDQueryParameter(iPInterfaceLocationPortUUID *string) *NvmeInterfaceCollectionGetParams {
	o.SetIPInterfaceLocationPortUUIDQueryParameter(iPInterfaceLocationPortUUID)
	return o
}

// SetIPInterfaceLocationPortUUIDQueryParameter adds the ipInterfaceLocationPortUuid to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) SetIPInterfaceLocationPortUUIDQueryParameter(iPInterfaceLocationPortUUID *string) {
	o.IPInterfaceLocationPortUUIDQueryParameter = iPInterfaceLocationPortUUID
}

// WithMaxRecordsQueryParameter adds the maxRecords to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) WithMaxRecordsQueryParameter(maxRecords *int64) *NvmeInterfaceCollectionGetParams {
	o.SetMaxRecordsQueryParameter(maxRecords)
	return o
}

// SetMaxRecordsQueryParameter adds the maxRecords to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) SetMaxRecordsQueryParameter(maxRecords *int64) {
	o.MaxRecordsQueryParameter = maxRecords
}

// WithNameQueryParameter adds the name to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) WithNameQueryParameter(name *string) *NvmeInterfaceCollectionGetParams {
	o.SetNameQueryParameter(name)
	return o
}

// SetNameQueryParameter adds the name to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) SetNameQueryParameter(name *string) {
	o.NameQueryParameter = name
}

// WithNodeNameQueryParameter adds the nodeName to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) WithNodeNameQueryParameter(nodeName *string) *NvmeInterfaceCollectionGetParams {
	o.SetNodeNameQueryParameter(nodeName)
	return o
}

// SetNodeNameQueryParameter adds the nodeName to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) SetNodeNameQueryParameter(nodeName *string) {
	o.NodeNameQueryParameter = nodeName
}

// WithNodeUUIDQueryParameter adds the nodeUUID to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) WithNodeUUIDQueryParameter(nodeUUID *string) *NvmeInterfaceCollectionGetParams {
	o.SetNodeUUIDQueryParameter(nodeUUID)
	return o
}

// SetNodeUUIDQueryParameter adds the nodeUuid to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) SetNodeUUIDQueryParameter(nodeUUID *string) {
	o.NodeUUIDQueryParameter = nodeUUID
}

// WithOrderByQueryParameter adds the orderBy to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) WithOrderByQueryParameter(orderBy []string) *NvmeInterfaceCollectionGetParams {
	o.SetOrderByQueryParameter(orderBy)
	return o
}

// SetOrderByQueryParameter adds the orderBy to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) SetOrderByQueryParameter(orderBy []string) {
	o.OrderByQueryParameter = orderBy
}

// WithReturnRecordsQueryParameter adds the returnRecords to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) WithReturnRecordsQueryParameter(returnRecords *bool) *NvmeInterfaceCollectionGetParams {
	o.SetReturnRecordsQueryParameter(returnRecords)
	return o
}

// SetReturnRecordsQueryParameter adds the returnRecords to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) SetReturnRecordsQueryParameter(returnRecords *bool) {
	o.ReturnRecordsQueryParameter = returnRecords
}

// WithReturnTimeoutQueryParameter adds the returnTimeout to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) WithReturnTimeoutQueryParameter(returnTimeout *int64) *NvmeInterfaceCollectionGetParams {
	o.SetReturnTimeoutQueryParameter(returnTimeout)
	return o
}

// SetReturnTimeoutQueryParameter adds the returnTimeout to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) SetReturnTimeoutQueryParameter(returnTimeout *int64) {
	o.ReturnTimeoutQueryParameter = returnTimeout
}

// WithSVMNameQueryParameter adds the svmName to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) WithSVMNameQueryParameter(svmName *string) *NvmeInterfaceCollectionGetParams {
	o.SetSVMNameQueryParameter(svmName)
	return o
}

// SetSVMNameQueryParameter adds the svmName to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) SetSVMNameQueryParameter(svmName *string) {
	o.SVMNameQueryParameter = svmName
}

// WithSVMUUIDQueryParameter adds the svmUUID to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) WithSVMUUIDQueryParameter(svmUUID *string) *NvmeInterfaceCollectionGetParams {
	o.SetSVMUUIDQueryParameter(svmUUID)
	return o
}

// SetSVMUUIDQueryParameter adds the svmUuid to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) SetSVMUUIDQueryParameter(svmUUID *string) {
	o.SVMUUIDQueryParameter = svmUUID
}

// WithTransportAddressQueryParameter adds the transportAddress to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) WithTransportAddressQueryParameter(transportAddress *string) *NvmeInterfaceCollectionGetParams {
	o.SetTransportAddressQueryParameter(transportAddress)
	return o
}

// SetTransportAddressQueryParameter adds the transportAddress to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) SetTransportAddressQueryParameter(transportAddress *string) {
	o.TransportAddressQueryParameter = transportAddress
}

// WithTransportProtocolsQueryParameter adds the transportProtocols to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) WithTransportProtocolsQueryParameter(transportProtocols *string) *NvmeInterfaceCollectionGetParams {
	o.SetTransportProtocolsQueryParameter(transportProtocols)
	return o
}

// SetTransportProtocolsQueryParameter adds the transportProtocols to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) SetTransportProtocolsQueryParameter(transportProtocols *string) {
	o.TransportProtocolsQueryParameter = transportProtocols
}

// WithUUIDQueryParameter adds the uuid to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) WithUUIDQueryParameter(uuid *string) *NvmeInterfaceCollectionGetParams {
	o.SetUUIDQueryParameter(uuid)
	return o
}

// SetUUIDQueryParameter adds the uuid to the nvme interface collection get params
func (o *NvmeInterfaceCollectionGetParams) SetUUIDQueryParameter(uuid *string) {
	o.UUIDQueryParameter = uuid
}

// WriteToRequest writes these params to a swagger request
func (o *NvmeInterfaceCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EnabledQueryParameter != nil {

		// query param enabled
		var qrEnabled bool

		if o.EnabledQueryParameter != nil {
			qrEnabled = *o.EnabledQueryParameter
		}
		qEnabled := swag.FormatBool(qrEnabled)
		if qEnabled != "" {

			if err := r.SetQueryParam("enabled", qEnabled); err != nil {
				return err
			}
		}
	}

	if o.FcInterfacePortNameQueryParameter != nil {

		// query param fc_interface.port.name
		var qrFcInterfacePortName string

		if o.FcInterfacePortNameQueryParameter != nil {
			qrFcInterfacePortName = *o.FcInterfacePortNameQueryParameter
		}
		qFcInterfacePortName := qrFcInterfacePortName
		if qFcInterfacePortName != "" {

			if err := r.SetQueryParam("fc_interface.port.name", qFcInterfacePortName); err != nil {
				return err
			}
		}
	}

	if o.FcInterfacePortNodeNameQueryParameter != nil {

		// query param fc_interface.port.node.name
		var qrFcInterfacePortNodeName string

		if o.FcInterfacePortNodeNameQueryParameter != nil {
			qrFcInterfacePortNodeName = *o.FcInterfacePortNodeNameQueryParameter
		}
		qFcInterfacePortNodeName := qrFcInterfacePortNodeName
		if qFcInterfacePortNodeName != "" {

			if err := r.SetQueryParam("fc_interface.port.node.name", qFcInterfacePortNodeName); err != nil {
				return err
			}
		}
	}

	if o.FcInterfacePortUUIDQueryParameter != nil {

		// query param fc_interface.port.uuid
		var qrFcInterfacePortUUID string

		if o.FcInterfacePortUUIDQueryParameter != nil {
			qrFcInterfacePortUUID = *o.FcInterfacePortUUIDQueryParameter
		}
		qFcInterfacePortUUID := qrFcInterfacePortUUID
		if qFcInterfacePortUUID != "" {

			if err := r.SetQueryParam("fc_interface.port.uuid", qFcInterfacePortUUID); err != nil {
				return err
			}
		}
	}

	if o.FcInterfaceWwnnQueryParameter != nil {

		// query param fc_interface.wwnn
		var qrFcInterfaceWwnn string

		if o.FcInterfaceWwnnQueryParameter != nil {
			qrFcInterfaceWwnn = *o.FcInterfaceWwnnQueryParameter
		}
		qFcInterfaceWwnn := qrFcInterfaceWwnn
		if qFcInterfaceWwnn != "" {

			if err := r.SetQueryParam("fc_interface.wwnn", qFcInterfaceWwnn); err != nil {
				return err
			}
		}
	}

	if o.FcInterfaceWwpnQueryParameter != nil {

		// query param fc_interface.wwpn
		var qrFcInterfaceWwpn string

		if o.FcInterfaceWwpnQueryParameter != nil {
			qrFcInterfaceWwpn = *o.FcInterfaceWwpnQueryParameter
		}
		qFcInterfaceWwpn := qrFcInterfaceWwpn
		if qFcInterfaceWwpn != "" {

			if err := r.SetQueryParam("fc_interface.wwpn", qFcInterfaceWwpn); err != nil {
				return err
			}
		}
	}

	if o.FieldsQueryParameter != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.InterfaceTypeQueryParameter != nil {

		// query param interface_type
		var qrInterfaceType string

		if o.InterfaceTypeQueryParameter != nil {
			qrInterfaceType = *o.InterfaceTypeQueryParameter
		}
		qInterfaceType := qrInterfaceType
		if qInterfaceType != "" {

			if err := r.SetQueryParam("interface_type", qInterfaceType); err != nil {
				return err
			}
		}
	}

	if o.IPInterfaceIPAddressQueryParameter != nil {

		// query param ip_interface.ip.address
		var qrIPInterfaceIPAddress string

		if o.IPInterfaceIPAddressQueryParameter != nil {
			qrIPInterfaceIPAddress = *o.IPInterfaceIPAddressQueryParameter
		}
		qIPInterfaceIPAddress := qrIPInterfaceIPAddress
		if qIPInterfaceIPAddress != "" {

			if err := r.SetQueryParam("ip_interface.ip.address", qIPInterfaceIPAddress); err != nil {
				return err
			}
		}
	}

	if o.IPInterfaceLocationPortNameQueryParameter != nil {

		// query param ip_interface.location.port.name
		var qrIPInterfaceLocationPortName string

		if o.IPInterfaceLocationPortNameQueryParameter != nil {
			qrIPInterfaceLocationPortName = *o.IPInterfaceLocationPortNameQueryParameter
		}
		qIPInterfaceLocationPortName := qrIPInterfaceLocationPortName
		if qIPInterfaceLocationPortName != "" {

			if err := r.SetQueryParam("ip_interface.location.port.name", qIPInterfaceLocationPortName); err != nil {
				return err
			}
		}
	}

	if o.IPInterfaceLocationPortNodeNameQueryParameter != nil {

		// query param ip_interface.location.port.node.name
		var qrIPInterfaceLocationPortNodeName string

		if o.IPInterfaceLocationPortNodeNameQueryParameter != nil {
			qrIPInterfaceLocationPortNodeName = *o.IPInterfaceLocationPortNodeNameQueryParameter
		}
		qIPInterfaceLocationPortNodeName := qrIPInterfaceLocationPortNodeName
		if qIPInterfaceLocationPortNodeName != "" {

			if err := r.SetQueryParam("ip_interface.location.port.node.name", qIPInterfaceLocationPortNodeName); err != nil {
				return err
			}
		}
	}

	if o.IPInterfaceLocationPortUUIDQueryParameter != nil {

		// query param ip_interface.location.port.uuid
		var qrIPInterfaceLocationPortUUID string

		if o.IPInterfaceLocationPortUUIDQueryParameter != nil {
			qrIPInterfaceLocationPortUUID = *o.IPInterfaceLocationPortUUIDQueryParameter
		}
		qIPInterfaceLocationPortUUID := qrIPInterfaceLocationPortUUID
		if qIPInterfaceLocationPortUUID != "" {

			if err := r.SetQueryParam("ip_interface.location.port.uuid", qIPInterfaceLocationPortUUID); err != nil {
				return err
			}
		}
	}

	if o.MaxRecordsQueryParameter != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecordsQueryParameter != nil {
			qrMaxRecords = *o.MaxRecordsQueryParameter
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.NameQueryParameter != nil {

		// query param name
		var qrName string

		if o.NameQueryParameter != nil {
			qrName = *o.NameQueryParameter
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.NodeNameQueryParameter != nil {

		// query param node.name
		var qrNodeName string

		if o.NodeNameQueryParameter != nil {
			qrNodeName = *o.NodeNameQueryParameter
		}
		qNodeName := qrNodeName
		if qNodeName != "" {

			if err := r.SetQueryParam("node.name", qNodeName); err != nil {
				return err
			}
		}
	}

	if o.NodeUUIDQueryParameter != nil {

		// query param node.uuid
		var qrNodeUUID string

		if o.NodeUUIDQueryParameter != nil {
			qrNodeUUID = *o.NodeUUIDQueryParameter
		}
		qNodeUUID := qrNodeUUID
		if qNodeUUID != "" {

			if err := r.SetQueryParam("node.uuid", qNodeUUID); err != nil {
				return err
			}
		}
	}

	if o.OrderByQueryParameter != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.ReturnRecordsQueryParameter != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecordsQueryParameter != nil {
			qrReturnRecords = *o.ReturnRecordsQueryParameter
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeoutQueryParameter != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeoutQueryParameter != nil {
			qrReturnTimeout = *o.ReturnTimeoutQueryParameter
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.SVMNameQueryParameter != nil {

		// query param svm.name
		var qrSvmName string

		if o.SVMNameQueryParameter != nil {
			qrSvmName = *o.SVMNameQueryParameter
		}
		qSvmName := qrSvmName
		if qSvmName != "" {

			if err := r.SetQueryParam("svm.name", qSvmName); err != nil {
				return err
			}
		}
	}

	if o.SVMUUIDQueryParameter != nil {

		// query param svm.uuid
		var qrSvmUUID string

		if o.SVMUUIDQueryParameter != nil {
			qrSvmUUID = *o.SVMUUIDQueryParameter
		}
		qSvmUUID := qrSvmUUID
		if qSvmUUID != "" {

			if err := r.SetQueryParam("svm.uuid", qSvmUUID); err != nil {
				return err
			}
		}
	}

	if o.TransportAddressQueryParameter != nil {

		// query param transport_address
		var qrTransportAddress string

		if o.TransportAddressQueryParameter != nil {
			qrTransportAddress = *o.TransportAddressQueryParameter
		}
		qTransportAddress := qrTransportAddress
		if qTransportAddress != "" {

			if err := r.SetQueryParam("transport_address", qTransportAddress); err != nil {
				return err
			}
		}
	}

	if o.TransportProtocolsQueryParameter != nil {

		// query param transport_protocols
		var qrTransportProtocols string

		if o.TransportProtocolsQueryParameter != nil {
			qrTransportProtocols = *o.TransportProtocolsQueryParameter
		}
		qTransportProtocols := qrTransportProtocols
		if qTransportProtocols != "" {

			if err := r.SetQueryParam("transport_protocols", qTransportProtocols); err != nil {
				return err
			}
		}
	}

	if o.UUIDQueryParameter != nil {

		// query param uuid
		var qrUUID string

		if o.UUIDQueryParameter != nil {
			qrUUID = *o.UUIDQueryParameter
		}
		qUUID := qrUUID
		if qUUID != "" {

			if err := r.SetQueryParam("uuid", qUUID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamNvmeInterfaceCollectionGet binds the parameter fields
func (o *NvmeInterfaceCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.FieldsQueryParameter

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamNvmeInterfaceCollectionGet binds the parameter order_by
func (o *NvmeInterfaceCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderByQueryParameter

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
