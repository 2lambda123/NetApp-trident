// Code generated by go-swagger; DO NOT EDIT.

package object_store

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewS3ServiceCollectionGetParams creates a new S3ServiceCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewS3ServiceCollectionGetParams() *S3ServiceCollectionGetParams {
	return &S3ServiceCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewS3ServiceCollectionGetParamsWithTimeout creates a new S3ServiceCollectionGetParams object
// with the ability to set a timeout on a request.
func NewS3ServiceCollectionGetParamsWithTimeout(timeout time.Duration) *S3ServiceCollectionGetParams {
	return &S3ServiceCollectionGetParams{
		timeout: timeout,
	}
}

// NewS3ServiceCollectionGetParamsWithContext creates a new S3ServiceCollectionGetParams object
// with the ability to set a context for a request.
func NewS3ServiceCollectionGetParamsWithContext(ctx context.Context) *S3ServiceCollectionGetParams {
	return &S3ServiceCollectionGetParams{
		Context: ctx,
	}
}

// NewS3ServiceCollectionGetParamsWithHTTPClient creates a new S3ServiceCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewS3ServiceCollectionGetParamsWithHTTPClient(client *http.Client) *S3ServiceCollectionGetParams {
	return &S3ServiceCollectionGetParams{
		HTTPClient: client,
	}
}

/* S3ServiceCollectionGetParams contains all the parameters to send to the API endpoint
   for the s3 service collection get operation.

   Typically these are written to a http.Request.
*/
type S3ServiceCollectionGetParams struct {

	/* BucketsComment.

	   Filter by buckets.comment
	*/
	BucketsCommentQueryParameter *string

	/* BucketsEncryptionEnabled.

	   Filter by buckets.encryption.enabled
	*/
	BucketsEncryptionEnabledQueryParameter *bool

	/* BucketsLogicalUsedSize.

	   Filter by buckets.logical_used_size
	*/
	BucketsLogicalUsedSizeQueryParameter *int64

	/* BucketsName.

	   Filter by buckets.name
	*/
	BucketsNameQueryParameter *string

	/* BucketsSize.

	   Filter by buckets.size
	*/
	BucketsSizeQueryParameter *int64

	/* BucketsSvmName.

	   Filter by buckets.svm.name
	*/
	BucketsSVMNameQueryParameter *string

	/* BucketsSvmUUID.

	   Filter by buckets.svm.uuid
	*/
	BucketsSVMUUIDQueryParameter *string

	/* BucketsUUID.

	   Filter by buckets.uuid
	*/
	BucketsUUIDQueryParameter *string

	/* BucketsVolumeName.

	   Filter by buckets.volume.name
	*/
	BucketsVolumeNameQueryParameter *string

	/* BucketsVolumeUUID.

	   Filter by buckets.volume.uuid
	*/
	BucketsVolumeUUIDQueryParameter *string

	/* Comment.

	   Filter by comment
	*/
	CommentQueryParameter *string

	/* Enabled.

	   Filter by enabled
	*/
	EnabledQueryParameter *bool

	/* Fields.

	   Specify the fields to return.
	*/
	Fields []string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecords *int64

	/* Name.

	   Filter by name
	*/
	NameQueryParameter *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderBy []string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecords *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeout *int64

	/* SvmName.

	   Filter by svm.name
	*/
	SVMNameQueryParameter *string

	/* SvmUUID.

	   Filter by svm.uuid
	*/
	SVMUUIDQueryParameter *string

	/* UsersAccessKey.

	   Filter by users.access_key
	*/
	UsersAccessKeyQueryParameter *string

	/* UsersComment.

	   Filter by users.comment
	*/
	UsersCommentQueryParameter *string

	/* UsersName.

	   Filter by users.name
	*/
	UsersNameQueryParameter *string

	/* UsersSvmName.

	   Filter by users.svm.name
	*/
	UsersSVMNameQueryParameter *string

	/* UsersSvmUUID.

	   Filter by users.svm.uuid
	*/
	UsersSVMUUIDQueryParameter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the s3 service collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *S3ServiceCollectionGetParams) WithDefaults() *S3ServiceCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the s3 service collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *S3ServiceCollectionGetParams) SetDefaults() {
	var (
		returnRecordsDefault = bool(true)

		returnTimeoutDefault = int64(15)
	)

	val := S3ServiceCollectionGetParams{
		ReturnRecords: &returnRecordsDefault,
		ReturnTimeout: &returnTimeoutDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) WithTimeout(timeout time.Duration) *S3ServiceCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) WithContext(ctx context.Context) *S3ServiceCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) WithHTTPClient(client *http.Client) *S3ServiceCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBucketsCommentQueryParameter adds the bucketsComment to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) WithBucketsCommentQueryParameter(bucketsComment *string) *S3ServiceCollectionGetParams {
	o.SetBucketsCommentQueryParameter(bucketsComment)
	return o
}

// SetBucketsCommentQueryParameter adds the bucketsComment to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) SetBucketsCommentQueryParameter(bucketsComment *string) {
	o.BucketsCommentQueryParameter = bucketsComment
}

// WithBucketsEncryptionEnabledQueryParameter adds the bucketsEncryptionEnabled to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) WithBucketsEncryptionEnabledQueryParameter(bucketsEncryptionEnabled *bool) *S3ServiceCollectionGetParams {
	o.SetBucketsEncryptionEnabledQueryParameter(bucketsEncryptionEnabled)
	return o
}

// SetBucketsEncryptionEnabledQueryParameter adds the bucketsEncryptionEnabled to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) SetBucketsEncryptionEnabledQueryParameter(bucketsEncryptionEnabled *bool) {
	o.BucketsEncryptionEnabledQueryParameter = bucketsEncryptionEnabled
}

// WithBucketsLogicalUsedSizeQueryParameter adds the bucketsLogicalUsedSize to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) WithBucketsLogicalUsedSizeQueryParameter(bucketsLogicalUsedSize *int64) *S3ServiceCollectionGetParams {
	o.SetBucketsLogicalUsedSizeQueryParameter(bucketsLogicalUsedSize)
	return o
}

// SetBucketsLogicalUsedSizeQueryParameter adds the bucketsLogicalUsedSize to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) SetBucketsLogicalUsedSizeQueryParameter(bucketsLogicalUsedSize *int64) {
	o.BucketsLogicalUsedSizeQueryParameter = bucketsLogicalUsedSize
}

// WithBucketsNameQueryParameter adds the bucketsName to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) WithBucketsNameQueryParameter(bucketsName *string) *S3ServiceCollectionGetParams {
	o.SetBucketsNameQueryParameter(bucketsName)
	return o
}

// SetBucketsNameQueryParameter adds the bucketsName to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) SetBucketsNameQueryParameter(bucketsName *string) {
	o.BucketsNameQueryParameter = bucketsName
}

// WithBucketsSizeQueryParameter adds the bucketsSize to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) WithBucketsSizeQueryParameter(bucketsSize *int64) *S3ServiceCollectionGetParams {
	o.SetBucketsSizeQueryParameter(bucketsSize)
	return o
}

// SetBucketsSizeQueryParameter adds the bucketsSize to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) SetBucketsSizeQueryParameter(bucketsSize *int64) {
	o.BucketsSizeQueryParameter = bucketsSize
}

// WithBucketsSVMNameQueryParameter adds the bucketsSvmName to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) WithBucketsSVMNameQueryParameter(bucketsSvmName *string) *S3ServiceCollectionGetParams {
	o.SetBucketsSVMNameQueryParameter(bucketsSvmName)
	return o
}

// SetBucketsSVMNameQueryParameter adds the bucketsSvmName to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) SetBucketsSVMNameQueryParameter(bucketsSvmName *string) {
	o.BucketsSVMNameQueryParameter = bucketsSvmName
}

// WithBucketsSVMUUIDQueryParameter adds the bucketsSvmUUID to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) WithBucketsSVMUUIDQueryParameter(bucketsSvmUUID *string) *S3ServiceCollectionGetParams {
	o.SetBucketsSVMUUIDQueryParameter(bucketsSvmUUID)
	return o
}

// SetBucketsSVMUUIDQueryParameter adds the bucketsSvmUuid to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) SetBucketsSVMUUIDQueryParameter(bucketsSvmUUID *string) {
	o.BucketsSVMUUIDQueryParameter = bucketsSvmUUID
}

// WithBucketsUUIDQueryParameter adds the bucketsUUID to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) WithBucketsUUIDQueryParameter(bucketsUUID *string) *S3ServiceCollectionGetParams {
	o.SetBucketsUUIDQueryParameter(bucketsUUID)
	return o
}

// SetBucketsUUIDQueryParameter adds the bucketsUuid to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) SetBucketsUUIDQueryParameter(bucketsUUID *string) {
	o.BucketsUUIDQueryParameter = bucketsUUID
}

// WithBucketsVolumeNameQueryParameter adds the bucketsVolumeName to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) WithBucketsVolumeNameQueryParameter(bucketsVolumeName *string) *S3ServiceCollectionGetParams {
	o.SetBucketsVolumeNameQueryParameter(bucketsVolumeName)
	return o
}

// SetBucketsVolumeNameQueryParameter adds the bucketsVolumeName to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) SetBucketsVolumeNameQueryParameter(bucketsVolumeName *string) {
	o.BucketsVolumeNameQueryParameter = bucketsVolumeName
}

// WithBucketsVolumeUUIDQueryParameter adds the bucketsVolumeUUID to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) WithBucketsVolumeUUIDQueryParameter(bucketsVolumeUUID *string) *S3ServiceCollectionGetParams {
	o.SetBucketsVolumeUUIDQueryParameter(bucketsVolumeUUID)
	return o
}

// SetBucketsVolumeUUIDQueryParameter adds the bucketsVolumeUuid to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) SetBucketsVolumeUUIDQueryParameter(bucketsVolumeUUID *string) {
	o.BucketsVolumeUUIDQueryParameter = bucketsVolumeUUID
}

// WithCommentQueryParameter adds the comment to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) WithCommentQueryParameter(comment *string) *S3ServiceCollectionGetParams {
	o.SetCommentQueryParameter(comment)
	return o
}

// SetCommentQueryParameter adds the comment to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) SetCommentQueryParameter(comment *string) {
	o.CommentQueryParameter = comment
}

// WithEnabledQueryParameter adds the enabled to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) WithEnabledQueryParameter(enabled *bool) *S3ServiceCollectionGetParams {
	o.SetEnabledQueryParameter(enabled)
	return o
}

// SetEnabledQueryParameter adds the enabled to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) SetEnabledQueryParameter(enabled *bool) {
	o.EnabledQueryParameter = enabled
}

// WithFields adds the fields to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) WithFields(fields []string) *S3ServiceCollectionGetParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithMaxRecords adds the maxRecords to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) WithMaxRecords(maxRecords *int64) *S3ServiceCollectionGetParams {
	o.SetMaxRecords(maxRecords)
	return o
}

// SetMaxRecords adds the maxRecords to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) SetMaxRecords(maxRecords *int64) {
	o.MaxRecords = maxRecords
}

// WithNameQueryParameter adds the name to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) WithNameQueryParameter(name *string) *S3ServiceCollectionGetParams {
	o.SetNameQueryParameter(name)
	return o
}

// SetNameQueryParameter adds the name to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) SetNameQueryParameter(name *string) {
	o.NameQueryParameter = name
}

// WithOrderBy adds the orderBy to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) WithOrderBy(orderBy []string) *S3ServiceCollectionGetParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) SetOrderBy(orderBy []string) {
	o.OrderBy = orderBy
}

// WithReturnRecords adds the returnRecords to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) WithReturnRecords(returnRecords *bool) *S3ServiceCollectionGetParams {
	o.SetReturnRecords(returnRecords)
	return o
}

// SetReturnRecords adds the returnRecords to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) SetReturnRecords(returnRecords *bool) {
	o.ReturnRecords = returnRecords
}

// WithReturnTimeout adds the returnTimeout to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) WithReturnTimeout(returnTimeout *int64) *S3ServiceCollectionGetParams {
	o.SetReturnTimeout(returnTimeout)
	return o
}

// SetReturnTimeout adds the returnTimeout to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) SetReturnTimeout(returnTimeout *int64) {
	o.ReturnTimeout = returnTimeout
}

// WithSVMNameQueryParameter adds the svmName to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) WithSVMNameQueryParameter(svmName *string) *S3ServiceCollectionGetParams {
	o.SetSVMNameQueryParameter(svmName)
	return o
}

// SetSVMNameQueryParameter adds the svmName to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) SetSVMNameQueryParameter(svmName *string) {
	o.SVMNameQueryParameter = svmName
}

// WithSVMUUIDQueryParameter adds the svmUUID to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) WithSVMUUIDQueryParameter(svmUUID *string) *S3ServiceCollectionGetParams {
	o.SetSVMUUIDQueryParameter(svmUUID)
	return o
}

// SetSVMUUIDQueryParameter adds the svmUuid to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) SetSVMUUIDQueryParameter(svmUUID *string) {
	o.SVMUUIDQueryParameter = svmUUID
}

// WithUsersAccessKeyQueryParameter adds the usersAccessKey to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) WithUsersAccessKeyQueryParameter(usersAccessKey *string) *S3ServiceCollectionGetParams {
	o.SetUsersAccessKeyQueryParameter(usersAccessKey)
	return o
}

// SetUsersAccessKeyQueryParameter adds the usersAccessKey to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) SetUsersAccessKeyQueryParameter(usersAccessKey *string) {
	o.UsersAccessKeyQueryParameter = usersAccessKey
}

// WithUsersCommentQueryParameter adds the usersComment to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) WithUsersCommentQueryParameter(usersComment *string) *S3ServiceCollectionGetParams {
	o.SetUsersCommentQueryParameter(usersComment)
	return o
}

// SetUsersCommentQueryParameter adds the usersComment to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) SetUsersCommentQueryParameter(usersComment *string) {
	o.UsersCommentQueryParameter = usersComment
}

// WithUsersNameQueryParameter adds the usersName to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) WithUsersNameQueryParameter(usersName *string) *S3ServiceCollectionGetParams {
	o.SetUsersNameQueryParameter(usersName)
	return o
}

// SetUsersNameQueryParameter adds the usersName to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) SetUsersNameQueryParameter(usersName *string) {
	o.UsersNameQueryParameter = usersName
}

// WithUsersSVMNameQueryParameter adds the usersSvmName to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) WithUsersSVMNameQueryParameter(usersSvmName *string) *S3ServiceCollectionGetParams {
	o.SetUsersSVMNameQueryParameter(usersSvmName)
	return o
}

// SetUsersSVMNameQueryParameter adds the usersSvmName to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) SetUsersSVMNameQueryParameter(usersSvmName *string) {
	o.UsersSVMNameQueryParameter = usersSvmName
}

// WithUsersSVMUUIDQueryParameter adds the usersSvmUUID to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) WithUsersSVMUUIDQueryParameter(usersSvmUUID *string) *S3ServiceCollectionGetParams {
	o.SetUsersSVMUUIDQueryParameter(usersSvmUUID)
	return o
}

// SetUsersSVMUUIDQueryParameter adds the usersSvmUuid to the s3 service collection get params
func (o *S3ServiceCollectionGetParams) SetUsersSVMUUIDQueryParameter(usersSvmUUID *string) {
	o.UsersSVMUUIDQueryParameter = usersSvmUUID
}

// WriteToRequest writes these params to a swagger request
func (o *S3ServiceCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.BucketsCommentQueryParameter != nil {

		// query param buckets.comment
		var qrBucketsComment string

		if o.BucketsCommentQueryParameter != nil {
			qrBucketsComment = *o.BucketsCommentQueryParameter
		}
		qBucketsComment := qrBucketsComment
		if qBucketsComment != "" {

			if err := r.SetQueryParam("buckets.comment", qBucketsComment); err != nil {
				return err
			}
		}
	}

	if o.BucketsEncryptionEnabledQueryParameter != nil {

		// query param buckets.encryption.enabled
		var qrBucketsEncryptionEnabled bool

		if o.BucketsEncryptionEnabledQueryParameter != nil {
			qrBucketsEncryptionEnabled = *o.BucketsEncryptionEnabledQueryParameter
		}
		qBucketsEncryptionEnabled := swag.FormatBool(qrBucketsEncryptionEnabled)
		if qBucketsEncryptionEnabled != "" {

			if err := r.SetQueryParam("buckets.encryption.enabled", qBucketsEncryptionEnabled); err != nil {
				return err
			}
		}
	}

	if o.BucketsLogicalUsedSizeQueryParameter != nil {

		// query param buckets.logical_used_size
		var qrBucketsLogicalUsedSize int64

		if o.BucketsLogicalUsedSizeQueryParameter != nil {
			qrBucketsLogicalUsedSize = *o.BucketsLogicalUsedSizeQueryParameter
		}
		qBucketsLogicalUsedSize := swag.FormatInt64(qrBucketsLogicalUsedSize)
		if qBucketsLogicalUsedSize != "" {

			if err := r.SetQueryParam("buckets.logical_used_size", qBucketsLogicalUsedSize); err != nil {
				return err
			}
		}
	}

	if o.BucketsNameQueryParameter != nil {

		// query param buckets.name
		var qrBucketsName string

		if o.BucketsNameQueryParameter != nil {
			qrBucketsName = *o.BucketsNameQueryParameter
		}
		qBucketsName := qrBucketsName
		if qBucketsName != "" {

			if err := r.SetQueryParam("buckets.name", qBucketsName); err != nil {
				return err
			}
		}
	}

	if o.BucketsSizeQueryParameter != nil {

		// query param buckets.size
		var qrBucketsSize int64

		if o.BucketsSizeQueryParameter != nil {
			qrBucketsSize = *o.BucketsSizeQueryParameter
		}
		qBucketsSize := swag.FormatInt64(qrBucketsSize)
		if qBucketsSize != "" {

			if err := r.SetQueryParam("buckets.size", qBucketsSize); err != nil {
				return err
			}
		}
	}

	if o.BucketsSVMNameQueryParameter != nil {

		// query param buckets.svm.name
		var qrBucketsSvmName string

		if o.BucketsSVMNameQueryParameter != nil {
			qrBucketsSvmName = *o.BucketsSVMNameQueryParameter
		}
		qBucketsSvmName := qrBucketsSvmName
		if qBucketsSvmName != "" {

			if err := r.SetQueryParam("buckets.svm.name", qBucketsSvmName); err != nil {
				return err
			}
		}
	}

	if o.BucketsSVMUUIDQueryParameter != nil {

		// query param buckets.svm.uuid
		var qrBucketsSvmUUID string

		if o.BucketsSVMUUIDQueryParameter != nil {
			qrBucketsSvmUUID = *o.BucketsSVMUUIDQueryParameter
		}
		qBucketsSvmUUID := qrBucketsSvmUUID
		if qBucketsSvmUUID != "" {

			if err := r.SetQueryParam("buckets.svm.uuid", qBucketsSvmUUID); err != nil {
				return err
			}
		}
	}

	if o.BucketsUUIDQueryParameter != nil {

		// query param buckets.uuid
		var qrBucketsUUID string

		if o.BucketsUUIDQueryParameter != nil {
			qrBucketsUUID = *o.BucketsUUIDQueryParameter
		}
		qBucketsUUID := qrBucketsUUID
		if qBucketsUUID != "" {

			if err := r.SetQueryParam("buckets.uuid", qBucketsUUID); err != nil {
				return err
			}
		}
	}

	if o.BucketsVolumeNameQueryParameter != nil {

		// query param buckets.volume.name
		var qrBucketsVolumeName string

		if o.BucketsVolumeNameQueryParameter != nil {
			qrBucketsVolumeName = *o.BucketsVolumeNameQueryParameter
		}
		qBucketsVolumeName := qrBucketsVolumeName
		if qBucketsVolumeName != "" {

			if err := r.SetQueryParam("buckets.volume.name", qBucketsVolumeName); err != nil {
				return err
			}
		}
	}

	if o.BucketsVolumeUUIDQueryParameter != nil {

		// query param buckets.volume.uuid
		var qrBucketsVolumeUUID string

		if o.BucketsVolumeUUIDQueryParameter != nil {
			qrBucketsVolumeUUID = *o.BucketsVolumeUUIDQueryParameter
		}
		qBucketsVolumeUUID := qrBucketsVolumeUUID
		if qBucketsVolumeUUID != "" {

			if err := r.SetQueryParam("buckets.volume.uuid", qBucketsVolumeUUID); err != nil {
				return err
			}
		}
	}

	if o.CommentQueryParameter != nil {

		// query param comment
		var qrComment string

		if o.CommentQueryParameter != nil {
			qrComment = *o.CommentQueryParameter
		}
		qComment := qrComment
		if qComment != "" {

			if err := r.SetQueryParam("comment", qComment); err != nil {
				return err
			}
		}
	}

	if o.EnabledQueryParameter != nil {

		// query param enabled
		var qrEnabled bool

		if o.EnabledQueryParameter != nil {
			qrEnabled = *o.EnabledQueryParameter
		}
		qEnabled := swag.FormatBool(qrEnabled)
		if qEnabled != "" {

			if err := r.SetQueryParam("enabled", qEnabled); err != nil {
				return err
			}
		}
	}

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.MaxRecords != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecords != nil {
			qrMaxRecords = *o.MaxRecords
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.NameQueryParameter != nil {

		// query param name
		var qrName string

		if o.NameQueryParameter != nil {
			qrName = *o.NameQueryParameter
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.OrderBy != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.ReturnRecords != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecords != nil {
			qrReturnRecords = *o.ReturnRecords
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeout != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeout != nil {
			qrReturnTimeout = *o.ReturnTimeout
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.SVMNameQueryParameter != nil {

		// query param svm.name
		var qrSvmName string

		if o.SVMNameQueryParameter != nil {
			qrSvmName = *o.SVMNameQueryParameter
		}
		qSvmName := qrSvmName
		if qSvmName != "" {

			if err := r.SetQueryParam("svm.name", qSvmName); err != nil {
				return err
			}
		}
	}

	if o.SVMUUIDQueryParameter != nil {

		// query param svm.uuid
		var qrSvmUUID string

		if o.SVMUUIDQueryParameter != nil {
			qrSvmUUID = *o.SVMUUIDQueryParameter
		}
		qSvmUUID := qrSvmUUID
		if qSvmUUID != "" {

			if err := r.SetQueryParam("svm.uuid", qSvmUUID); err != nil {
				return err
			}
		}
	}

	if o.UsersAccessKeyQueryParameter != nil {

		// query param users.access_key
		var qrUsersAccessKey string

		if o.UsersAccessKeyQueryParameter != nil {
			qrUsersAccessKey = *o.UsersAccessKeyQueryParameter
		}
		qUsersAccessKey := qrUsersAccessKey
		if qUsersAccessKey != "" {

			if err := r.SetQueryParam("users.access_key", qUsersAccessKey); err != nil {
				return err
			}
		}
	}

	if o.UsersCommentQueryParameter != nil {

		// query param users.comment
		var qrUsersComment string

		if o.UsersCommentQueryParameter != nil {
			qrUsersComment = *o.UsersCommentQueryParameter
		}
		qUsersComment := qrUsersComment
		if qUsersComment != "" {

			if err := r.SetQueryParam("users.comment", qUsersComment); err != nil {
				return err
			}
		}
	}

	if o.UsersNameQueryParameter != nil {

		// query param users.name
		var qrUsersName string

		if o.UsersNameQueryParameter != nil {
			qrUsersName = *o.UsersNameQueryParameter
		}
		qUsersName := qrUsersName
		if qUsersName != "" {

			if err := r.SetQueryParam("users.name", qUsersName); err != nil {
				return err
			}
		}
	}

	if o.UsersSVMNameQueryParameter != nil {

		// query param users.svm.name
		var qrUsersSvmName string

		if o.UsersSVMNameQueryParameter != nil {
			qrUsersSvmName = *o.UsersSVMNameQueryParameter
		}
		qUsersSvmName := qrUsersSvmName
		if qUsersSvmName != "" {

			if err := r.SetQueryParam("users.svm.name", qUsersSvmName); err != nil {
				return err
			}
		}
	}

	if o.UsersSVMUUIDQueryParameter != nil {

		// query param users.svm.uuid
		var qrUsersSvmUUID string

		if o.UsersSVMUUIDQueryParameter != nil {
			qrUsersSvmUUID = *o.UsersSVMUUIDQueryParameter
		}
		qUsersSvmUUID := qrUsersSvmUUID
		if qUsersSvmUUID != "" {

			if err := r.SetQueryParam("users.svm.uuid", qUsersSvmUUID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamS3ServiceCollectionGet binds the parameter fields
func (o *S3ServiceCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamS3ServiceCollectionGet binds the parameter order_by
func (o *S3ServiceCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderBy

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
