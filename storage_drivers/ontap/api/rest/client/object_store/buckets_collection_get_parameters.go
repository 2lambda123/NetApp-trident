// Code generated by go-swagger; DO NOT EDIT.

package object_store

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewBucketsCollectionGetParams creates a new BucketsCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewBucketsCollectionGetParams() *BucketsCollectionGetParams {
	return &BucketsCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewBucketsCollectionGetParamsWithTimeout creates a new BucketsCollectionGetParams object
// with the ability to set a timeout on a request.
func NewBucketsCollectionGetParamsWithTimeout(timeout time.Duration) *BucketsCollectionGetParams {
	return &BucketsCollectionGetParams{
		timeout: timeout,
	}
}

// NewBucketsCollectionGetParamsWithContext creates a new BucketsCollectionGetParams object
// with the ability to set a context for a request.
func NewBucketsCollectionGetParamsWithContext(ctx context.Context) *BucketsCollectionGetParams {
	return &BucketsCollectionGetParams{
		Context: ctx,
	}
}

// NewBucketsCollectionGetParamsWithHTTPClient creates a new BucketsCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewBucketsCollectionGetParamsWithHTTPClient(client *http.Client) *BucketsCollectionGetParams {
	return &BucketsCollectionGetParams{
		HTTPClient: client,
	}
}

/* BucketsCollectionGetParams contains all the parameters to send to the API endpoint
   for the buckets collection get operation.

   Typically these are written to a http.Request.
*/
type BucketsCollectionGetParams struct {

	/* Comment.

	   Filter by comment
	*/
	CommentQueryParameter *string

	/* EncryptionEnabled.

	   Filter by encryption.enabled
	*/
	EncryptionEnabledQueryParameter *bool

	/* Fields.

	   Specify the fields to return.
	*/
	Fields []string

	/* LogicalUsedSize.

	   Filter by logical_used_size
	*/
	LogicalUsedSizeQueryParameter *int64

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecords *int64

	/* Name.

	   Filter by name
	*/
	NameQueryParameter *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderBy []string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecords *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeout *int64

	/* Size.

	   Filter by size
	*/
	SizeQueryParameter *int64

	/* SvmName.

	   Filter by svm.name
	*/
	SVMNameQueryParameter *string

	/* SvmUUID.

	   Filter by svm.uuid
	*/
	SVMUUIDQueryParameter *string

	/* SvmUUID.

	   UUID of the SVM to which this object belongs.
	*/
	SvmUUID string

	/* UUID.

	   Filter by uuid
	*/
	UUIDQueryParameter *string

	/* VolumeName.

	   Filter by volume.name
	*/
	VolumeNameQueryParameter *string

	/* VolumeUUID.

	   Filter by volume.uuid
	*/
	VolumeUUIDQueryParameter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the buckets collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *BucketsCollectionGetParams) WithDefaults() *BucketsCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the buckets collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *BucketsCollectionGetParams) SetDefaults() {
	var (
		returnRecordsDefault = bool(true)

		returnTimeoutDefault = int64(15)
	)

	val := BucketsCollectionGetParams{
		ReturnRecords: &returnRecordsDefault,
		ReturnTimeout: &returnTimeoutDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the buckets collection get params
func (o *BucketsCollectionGetParams) WithTimeout(timeout time.Duration) *BucketsCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the buckets collection get params
func (o *BucketsCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the buckets collection get params
func (o *BucketsCollectionGetParams) WithContext(ctx context.Context) *BucketsCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the buckets collection get params
func (o *BucketsCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the buckets collection get params
func (o *BucketsCollectionGetParams) WithHTTPClient(client *http.Client) *BucketsCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the buckets collection get params
func (o *BucketsCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCommentQueryParameter adds the comment to the buckets collection get params
func (o *BucketsCollectionGetParams) WithCommentQueryParameter(comment *string) *BucketsCollectionGetParams {
	o.SetCommentQueryParameter(comment)
	return o
}

// SetCommentQueryParameter adds the comment to the buckets collection get params
func (o *BucketsCollectionGetParams) SetCommentQueryParameter(comment *string) {
	o.CommentQueryParameter = comment
}

// WithEncryptionEnabledQueryParameter adds the encryptionEnabled to the buckets collection get params
func (o *BucketsCollectionGetParams) WithEncryptionEnabledQueryParameter(encryptionEnabled *bool) *BucketsCollectionGetParams {
	o.SetEncryptionEnabledQueryParameter(encryptionEnabled)
	return o
}

// SetEncryptionEnabledQueryParameter adds the encryptionEnabled to the buckets collection get params
func (o *BucketsCollectionGetParams) SetEncryptionEnabledQueryParameter(encryptionEnabled *bool) {
	o.EncryptionEnabledQueryParameter = encryptionEnabled
}

// WithFields adds the fields to the buckets collection get params
func (o *BucketsCollectionGetParams) WithFields(fields []string) *BucketsCollectionGetParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the buckets collection get params
func (o *BucketsCollectionGetParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithLogicalUsedSizeQueryParameter adds the logicalUsedSize to the buckets collection get params
func (o *BucketsCollectionGetParams) WithLogicalUsedSizeQueryParameter(logicalUsedSize *int64) *BucketsCollectionGetParams {
	o.SetLogicalUsedSizeQueryParameter(logicalUsedSize)
	return o
}

// SetLogicalUsedSizeQueryParameter adds the logicalUsedSize to the buckets collection get params
func (o *BucketsCollectionGetParams) SetLogicalUsedSizeQueryParameter(logicalUsedSize *int64) {
	o.LogicalUsedSizeQueryParameter = logicalUsedSize
}

// WithMaxRecords adds the maxRecords to the buckets collection get params
func (o *BucketsCollectionGetParams) WithMaxRecords(maxRecords *int64) *BucketsCollectionGetParams {
	o.SetMaxRecords(maxRecords)
	return o
}

// SetMaxRecords adds the maxRecords to the buckets collection get params
func (o *BucketsCollectionGetParams) SetMaxRecords(maxRecords *int64) {
	o.MaxRecords = maxRecords
}

// WithNameQueryParameter adds the name to the buckets collection get params
func (o *BucketsCollectionGetParams) WithNameQueryParameter(name *string) *BucketsCollectionGetParams {
	o.SetNameQueryParameter(name)
	return o
}

// SetNameQueryParameter adds the name to the buckets collection get params
func (o *BucketsCollectionGetParams) SetNameQueryParameter(name *string) {
	o.NameQueryParameter = name
}

// WithOrderBy adds the orderBy to the buckets collection get params
func (o *BucketsCollectionGetParams) WithOrderBy(orderBy []string) *BucketsCollectionGetParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the buckets collection get params
func (o *BucketsCollectionGetParams) SetOrderBy(orderBy []string) {
	o.OrderBy = orderBy
}

// WithReturnRecords adds the returnRecords to the buckets collection get params
func (o *BucketsCollectionGetParams) WithReturnRecords(returnRecords *bool) *BucketsCollectionGetParams {
	o.SetReturnRecords(returnRecords)
	return o
}

// SetReturnRecords adds the returnRecords to the buckets collection get params
func (o *BucketsCollectionGetParams) SetReturnRecords(returnRecords *bool) {
	o.ReturnRecords = returnRecords
}

// WithReturnTimeout adds the returnTimeout to the buckets collection get params
func (o *BucketsCollectionGetParams) WithReturnTimeout(returnTimeout *int64) *BucketsCollectionGetParams {
	o.SetReturnTimeout(returnTimeout)
	return o
}

// SetReturnTimeout adds the returnTimeout to the buckets collection get params
func (o *BucketsCollectionGetParams) SetReturnTimeout(returnTimeout *int64) {
	o.ReturnTimeout = returnTimeout
}

// WithSizeQueryParameter adds the size to the buckets collection get params
func (o *BucketsCollectionGetParams) WithSizeQueryParameter(size *int64) *BucketsCollectionGetParams {
	o.SetSizeQueryParameter(size)
	return o
}

// SetSizeQueryParameter adds the size to the buckets collection get params
func (o *BucketsCollectionGetParams) SetSizeQueryParameter(size *int64) {
	o.SizeQueryParameter = size
}

// WithSVMNameQueryParameter adds the svmName to the buckets collection get params
func (o *BucketsCollectionGetParams) WithSVMNameQueryParameter(svmName *string) *BucketsCollectionGetParams {
	o.SetSVMNameQueryParameter(svmName)
	return o
}

// SetSVMNameQueryParameter adds the svmName to the buckets collection get params
func (o *BucketsCollectionGetParams) SetSVMNameQueryParameter(svmName *string) {
	o.SVMNameQueryParameter = svmName
}

// WithSVMUUIDQueryParameter adds the svmUUID to the buckets collection get params
func (o *BucketsCollectionGetParams) WithSVMUUIDQueryParameter(svmUUID *string) *BucketsCollectionGetParams {
	o.SetSVMUUIDQueryParameter(svmUUID)
	return o
}

// SetSVMUUIDQueryParameter adds the svmUuid to the buckets collection get params
func (o *BucketsCollectionGetParams) SetSVMUUIDQueryParameter(svmUUID *string) {
	o.SVMUUIDQueryParameter = svmUUID
}

// WithSvmUUID adds the svmUUID to the buckets collection get params
func (o *BucketsCollectionGetParams) WithSvmUUID(svmUUID string) *BucketsCollectionGetParams {
	o.SetSvmUUID(svmUUID)
	return o
}

// SetSvmUUID adds the svmUuid to the buckets collection get params
func (o *BucketsCollectionGetParams) SetSvmUUID(svmUUID string) {
	o.SvmUUID = svmUUID
}

// WithUUIDQueryParameter adds the uuid to the buckets collection get params
func (o *BucketsCollectionGetParams) WithUUIDQueryParameter(uuid *string) *BucketsCollectionGetParams {
	o.SetUUIDQueryParameter(uuid)
	return o
}

// SetUUIDQueryParameter adds the uuid to the buckets collection get params
func (o *BucketsCollectionGetParams) SetUUIDQueryParameter(uuid *string) {
	o.UUIDQueryParameter = uuid
}

// WithVolumeNameQueryParameter adds the volumeName to the buckets collection get params
func (o *BucketsCollectionGetParams) WithVolumeNameQueryParameter(volumeName *string) *BucketsCollectionGetParams {
	o.SetVolumeNameQueryParameter(volumeName)
	return o
}

// SetVolumeNameQueryParameter adds the volumeName to the buckets collection get params
func (o *BucketsCollectionGetParams) SetVolumeNameQueryParameter(volumeName *string) {
	o.VolumeNameQueryParameter = volumeName
}

// WithVolumeUUIDQueryParameter adds the volumeUUID to the buckets collection get params
func (o *BucketsCollectionGetParams) WithVolumeUUIDQueryParameter(volumeUUID *string) *BucketsCollectionGetParams {
	o.SetVolumeUUIDQueryParameter(volumeUUID)
	return o
}

// SetVolumeUUIDQueryParameter adds the volumeUuid to the buckets collection get params
func (o *BucketsCollectionGetParams) SetVolumeUUIDQueryParameter(volumeUUID *string) {
	o.VolumeUUIDQueryParameter = volumeUUID
}

// WriteToRequest writes these params to a swagger request
func (o *BucketsCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CommentQueryParameter != nil {

		// query param comment
		var qrComment string

		if o.CommentQueryParameter != nil {
			qrComment = *o.CommentQueryParameter
		}
		qComment := qrComment
		if qComment != "" {

			if err := r.SetQueryParam("comment", qComment); err != nil {
				return err
			}
		}
	}

	if o.EncryptionEnabledQueryParameter != nil {

		// query param encryption.enabled
		var qrEncryptionEnabled bool

		if o.EncryptionEnabledQueryParameter != nil {
			qrEncryptionEnabled = *o.EncryptionEnabledQueryParameter
		}
		qEncryptionEnabled := swag.FormatBool(qrEncryptionEnabled)
		if qEncryptionEnabled != "" {

			if err := r.SetQueryParam("encryption.enabled", qEncryptionEnabled); err != nil {
				return err
			}
		}
	}

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.LogicalUsedSizeQueryParameter != nil {

		// query param logical_used_size
		var qrLogicalUsedSize int64

		if o.LogicalUsedSizeQueryParameter != nil {
			qrLogicalUsedSize = *o.LogicalUsedSizeQueryParameter
		}
		qLogicalUsedSize := swag.FormatInt64(qrLogicalUsedSize)
		if qLogicalUsedSize != "" {

			if err := r.SetQueryParam("logical_used_size", qLogicalUsedSize); err != nil {
				return err
			}
		}
	}

	if o.MaxRecords != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecords != nil {
			qrMaxRecords = *o.MaxRecords
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.NameQueryParameter != nil {

		// query param name
		var qrName string

		if o.NameQueryParameter != nil {
			qrName = *o.NameQueryParameter
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.OrderBy != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.ReturnRecords != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecords != nil {
			qrReturnRecords = *o.ReturnRecords
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeout != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeout != nil {
			qrReturnTimeout = *o.ReturnTimeout
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.SizeQueryParameter != nil {

		// query param size
		var qrSize int64

		if o.SizeQueryParameter != nil {
			qrSize = *o.SizeQueryParameter
		}
		qSize := swag.FormatInt64(qrSize)
		if qSize != "" {

			if err := r.SetQueryParam("size", qSize); err != nil {
				return err
			}
		}
	}

	if o.SVMNameQueryParameter != nil {

		// query param svm.name
		var qrSvmName string

		if o.SVMNameQueryParameter != nil {
			qrSvmName = *o.SVMNameQueryParameter
		}
		qSvmName := qrSvmName
		if qSvmName != "" {

			if err := r.SetQueryParam("svm.name", qSvmName); err != nil {
				return err
			}
		}
	}

	if o.SVMUUIDQueryParameter != nil {

		// query param svm.uuid
		var qrSvmUUID string

		if o.SVMUUIDQueryParameter != nil {
			qrSvmUUID = *o.SVMUUIDQueryParameter
		}
		qSvmUUID := qrSvmUUID
		if qSvmUUID != "" {

			if err := r.SetQueryParam("svm.uuid", qSvmUUID); err != nil {
				return err
			}
		}
	}

	// path param svm.uuid
	if err := r.SetPathParam("svm.uuid", o.SvmUUID); err != nil {
		return err
	}

	if o.UUIDQueryParameter != nil {

		// query param uuid
		var qrUUID string

		if o.UUIDQueryParameter != nil {
			qrUUID = *o.UUIDQueryParameter
		}
		qUUID := qrUUID
		if qUUID != "" {

			if err := r.SetQueryParam("uuid", qUUID); err != nil {
				return err
			}
		}
	}

	if o.VolumeNameQueryParameter != nil {

		// query param volume.name
		var qrVolumeName string

		if o.VolumeNameQueryParameter != nil {
			qrVolumeName = *o.VolumeNameQueryParameter
		}
		qVolumeName := qrVolumeName
		if qVolumeName != "" {

			if err := r.SetQueryParam("volume.name", qVolumeName); err != nil {
				return err
			}
		}
	}

	if o.VolumeUUIDQueryParameter != nil {

		// query param volume.uuid
		var qrVolumeUUID string

		if o.VolumeUUIDQueryParameter != nil {
			qrVolumeUUID = *o.VolumeUUIDQueryParameter
		}
		qVolumeUUID := qrVolumeUUID
		if qVolumeUUID != "" {

			if err := r.SetQueryParam("volume.uuid", qVolumeUUID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamBucketsCollectionGet binds the parameter fields
func (o *BucketsCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamBucketsCollectionGet binds the parameter order_by
func (o *BucketsCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderBy

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
