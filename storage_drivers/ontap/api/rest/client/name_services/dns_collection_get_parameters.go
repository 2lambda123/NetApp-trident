// Code generated by go-swagger; DO NOT EDIT.

package name_services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDNSCollectionGetParams creates a new DNSCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDNSCollectionGetParams() *DNSCollectionGetParams {
	return &DNSCollectionGetParams{
		requestTimeout: cr.DefaultTimeout,
	}
}

// NewDNSCollectionGetParamsWithTimeout creates a new DNSCollectionGetParams object
// with the ability to set a timeout on a request.
func NewDNSCollectionGetParamsWithTimeout(timeout time.Duration) *DNSCollectionGetParams {
	return &DNSCollectionGetParams{
		requestTimeout: timeout,
	}
}

// NewDNSCollectionGetParamsWithContext creates a new DNSCollectionGetParams object
// with the ability to set a context for a request.
func NewDNSCollectionGetParamsWithContext(ctx context.Context) *DNSCollectionGetParams {
	return &DNSCollectionGetParams{
		Context: ctx,
	}
}

// NewDNSCollectionGetParamsWithHTTPClient creates a new DNSCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewDNSCollectionGetParamsWithHTTPClient(client *http.Client) *DNSCollectionGetParams {
	return &DNSCollectionGetParams{
		HTTPClient: client,
	}
}

/* DNSCollectionGetParams contains all the parameters to send to the API endpoint
   for the dns collection get operation.

   Typically these are written to a http.Request.
*/
type DNSCollectionGetParams struct {

	/* Attempts.

	   Filter by attempts
	*/
	AttemptsQueryParameter *int64

	/* Domains.

	   Filter by domains
	*/
	DomainsQueryParameter *string

	/* DynamicDNSEnabled.

	   Filter by dynamic_dns.enabled
	*/
	DynamicDNSEnabledQueryParameter *bool

	/* DynamicDNSFqdn.

	   Filter by dynamic_dns.fqdn
	*/
	DynamicDNSFqdnQueryParameter *string

	/* DynamicDNSTimeToLive.

	   Filter by dynamic_dns.time_to_live
	*/
	DynamicDNSTimeToLiveQueryParameter *string

	/* DynamicDNSUseSecure.

	   Filter by dynamic_dns.use_secure
	*/
	DynamicDNSUseSecureQueryParameter *bool

	/* Fields.

	   Specify the fields to return.
	*/
	FieldsQueryParameter []string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecordsQueryParameter *int64

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderByQueryParameter []string

	/* PacketQueryMatch.

	   Filter by packet_query_match
	*/
	PacketQueryMatchQueryParameter *bool

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecordsQueryParameter *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeoutQueryParameter *int64

	/* Scope.

	   Filter by scope
	*/
	ScopeQueryParameter *string

	/* Servers.

	   Filter by servers
	*/
	ServersQueryParameter *string

	/* SourceAddressMatch.

	   Filter by source_address_match
	*/
	SourceAddressMatchQueryParameter *bool

	/* StatusCode.

	   Filter by status.code
	*/
	StatusCodeQueryParameter *int64

	/* StatusMessage.

	   Filter by status.message
	*/
	StatusMessageQueryParameter *string

	/* StatusNameServer.

	   Filter by status.name_server
	*/
	StatusNameServerQueryParameter *string

	/* StatusState.

	   Filter by status.state
	*/
	StatusStateQueryParameter *string

	/* SvmName.

	   Filter by svm.name
	*/
	SVMNameQueryParameter *string

	/* SvmUUID.

	   Filter by svm.uuid
	*/
	SVMUUIDQueryParameter *string

	/* Timeout.

	   Filter by timeout
	*/
	TimeoutQueryParameter *int64

	/* TldQueryEnabled.

	   Filter by tld_query_enabled
	*/
	TldQueryEnabledQueryParameter *bool

	requestTimeout time.Duration
	Context        context.Context
	HTTPClient     *http.Client
}

// WithDefaults hydrates default values in the dns collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DNSCollectionGetParams) WithDefaults() *DNSCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the dns collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DNSCollectionGetParams) SetDefaults() {
	var (
		returnRecordsQueryParameterDefault = bool(true)

		returnTimeoutQueryParameterDefault = int64(15)
	)

	val := DNSCollectionGetParams{
		ReturnRecordsQueryParameter: &returnRecordsQueryParameterDefault,
		ReturnTimeoutQueryParameter: &returnTimeoutQueryParameterDefault,
	}

	val.requestTimeout = o.requestTimeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithRequestTimeout adds the timeout to the dns collection get params
func (o *DNSCollectionGetParams) WithRequestTimeout(timeout time.Duration) *DNSCollectionGetParams {
	o.SetRequestTimeout(timeout)
	return o
}

// SetRequestTimeout adds the timeout to the dns collection get params
func (o *DNSCollectionGetParams) SetRequestTimeout(timeout time.Duration) {
	o.requestTimeout = timeout
}

// WithContext adds the context to the dns collection get params
func (o *DNSCollectionGetParams) WithContext(ctx context.Context) *DNSCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the dns collection get params
func (o *DNSCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the dns collection get params
func (o *DNSCollectionGetParams) WithHTTPClient(client *http.Client) *DNSCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the dns collection get params
func (o *DNSCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAttemptsQueryParameter adds the attempts to the dns collection get params
func (o *DNSCollectionGetParams) WithAttemptsQueryParameter(attempts *int64) *DNSCollectionGetParams {
	o.SetAttemptsQueryParameter(attempts)
	return o
}

// SetAttemptsQueryParameter adds the attempts to the dns collection get params
func (o *DNSCollectionGetParams) SetAttemptsQueryParameter(attempts *int64) {
	o.AttemptsQueryParameter = attempts
}

// WithDomainsQueryParameter adds the domains to the dns collection get params
func (o *DNSCollectionGetParams) WithDomainsQueryParameter(domains *string) *DNSCollectionGetParams {
	o.SetDomainsQueryParameter(domains)
	return o
}

// SetDomainsQueryParameter adds the domains to the dns collection get params
func (o *DNSCollectionGetParams) SetDomainsQueryParameter(domains *string) {
	o.DomainsQueryParameter = domains
}

// WithDynamicDNSEnabledQueryParameter adds the dynamicDNSEnabled to the dns collection get params
func (o *DNSCollectionGetParams) WithDynamicDNSEnabledQueryParameter(dynamicDNSEnabled *bool) *DNSCollectionGetParams {
	o.SetDynamicDNSEnabledQueryParameter(dynamicDNSEnabled)
	return o
}

// SetDynamicDNSEnabledQueryParameter adds the dynamicDnsEnabled to the dns collection get params
func (o *DNSCollectionGetParams) SetDynamicDNSEnabledQueryParameter(dynamicDNSEnabled *bool) {
	o.DynamicDNSEnabledQueryParameter = dynamicDNSEnabled
}

// WithDynamicDNSFqdnQueryParameter adds the dynamicDNSFqdn to the dns collection get params
func (o *DNSCollectionGetParams) WithDynamicDNSFqdnQueryParameter(dynamicDNSFqdn *string) *DNSCollectionGetParams {
	o.SetDynamicDNSFqdnQueryParameter(dynamicDNSFqdn)
	return o
}

// SetDynamicDNSFqdnQueryParameter adds the dynamicDnsFqdn to the dns collection get params
func (o *DNSCollectionGetParams) SetDynamicDNSFqdnQueryParameter(dynamicDNSFqdn *string) {
	o.DynamicDNSFqdnQueryParameter = dynamicDNSFqdn
}

// WithDynamicDNSTimeToLiveQueryParameter adds the dynamicDNSTimeToLive to the dns collection get params
func (o *DNSCollectionGetParams) WithDynamicDNSTimeToLiveQueryParameter(dynamicDNSTimeToLive *string) *DNSCollectionGetParams {
	o.SetDynamicDNSTimeToLiveQueryParameter(dynamicDNSTimeToLive)
	return o
}

// SetDynamicDNSTimeToLiveQueryParameter adds the dynamicDnsTimeToLive to the dns collection get params
func (o *DNSCollectionGetParams) SetDynamicDNSTimeToLiveQueryParameter(dynamicDNSTimeToLive *string) {
	o.DynamicDNSTimeToLiveQueryParameter = dynamicDNSTimeToLive
}

// WithDynamicDNSUseSecureQueryParameter adds the dynamicDNSUseSecure to the dns collection get params
func (o *DNSCollectionGetParams) WithDynamicDNSUseSecureQueryParameter(dynamicDNSUseSecure *bool) *DNSCollectionGetParams {
	o.SetDynamicDNSUseSecureQueryParameter(dynamicDNSUseSecure)
	return o
}

// SetDynamicDNSUseSecureQueryParameter adds the dynamicDnsUseSecure to the dns collection get params
func (o *DNSCollectionGetParams) SetDynamicDNSUseSecureQueryParameter(dynamicDNSUseSecure *bool) {
	o.DynamicDNSUseSecureQueryParameter = dynamicDNSUseSecure
}

// WithFieldsQueryParameter adds the fields to the dns collection get params
func (o *DNSCollectionGetParams) WithFieldsQueryParameter(fields []string) *DNSCollectionGetParams {
	o.SetFieldsQueryParameter(fields)
	return o
}

// SetFieldsQueryParameter adds the fields to the dns collection get params
func (o *DNSCollectionGetParams) SetFieldsQueryParameter(fields []string) {
	o.FieldsQueryParameter = fields
}

// WithMaxRecordsQueryParameter adds the maxRecords to the dns collection get params
func (o *DNSCollectionGetParams) WithMaxRecordsQueryParameter(maxRecords *int64) *DNSCollectionGetParams {
	o.SetMaxRecordsQueryParameter(maxRecords)
	return o
}

// SetMaxRecordsQueryParameter adds the maxRecords to the dns collection get params
func (o *DNSCollectionGetParams) SetMaxRecordsQueryParameter(maxRecords *int64) {
	o.MaxRecordsQueryParameter = maxRecords
}

// WithOrderByQueryParameter adds the orderBy to the dns collection get params
func (o *DNSCollectionGetParams) WithOrderByQueryParameter(orderBy []string) *DNSCollectionGetParams {
	o.SetOrderByQueryParameter(orderBy)
	return o
}

// SetOrderByQueryParameter adds the orderBy to the dns collection get params
func (o *DNSCollectionGetParams) SetOrderByQueryParameter(orderBy []string) {
	o.OrderByQueryParameter = orderBy
}

// WithPacketQueryMatchQueryParameter adds the packetQueryMatch to the dns collection get params
func (o *DNSCollectionGetParams) WithPacketQueryMatchQueryParameter(packetQueryMatch *bool) *DNSCollectionGetParams {
	o.SetPacketQueryMatchQueryParameter(packetQueryMatch)
	return o
}

// SetPacketQueryMatchQueryParameter adds the packetQueryMatch to the dns collection get params
func (o *DNSCollectionGetParams) SetPacketQueryMatchQueryParameter(packetQueryMatch *bool) {
	o.PacketQueryMatchQueryParameter = packetQueryMatch
}

// WithReturnRecordsQueryParameter adds the returnRecords to the dns collection get params
func (o *DNSCollectionGetParams) WithReturnRecordsQueryParameter(returnRecords *bool) *DNSCollectionGetParams {
	o.SetReturnRecordsQueryParameter(returnRecords)
	return o
}

// SetReturnRecordsQueryParameter adds the returnRecords to the dns collection get params
func (o *DNSCollectionGetParams) SetReturnRecordsQueryParameter(returnRecords *bool) {
	o.ReturnRecordsQueryParameter = returnRecords
}

// WithReturnTimeoutQueryParameter adds the returnTimeout to the dns collection get params
func (o *DNSCollectionGetParams) WithReturnTimeoutQueryParameter(returnTimeout *int64) *DNSCollectionGetParams {
	o.SetReturnTimeoutQueryParameter(returnTimeout)
	return o
}

// SetReturnTimeoutQueryParameter adds the returnTimeout to the dns collection get params
func (o *DNSCollectionGetParams) SetReturnTimeoutQueryParameter(returnTimeout *int64) {
	o.ReturnTimeoutQueryParameter = returnTimeout
}

// WithScopeQueryParameter adds the scope to the dns collection get params
func (o *DNSCollectionGetParams) WithScopeQueryParameter(scope *string) *DNSCollectionGetParams {
	o.SetScopeQueryParameter(scope)
	return o
}

// SetScopeQueryParameter adds the scope to the dns collection get params
func (o *DNSCollectionGetParams) SetScopeQueryParameter(scope *string) {
	o.ScopeQueryParameter = scope
}

// WithServersQueryParameter adds the servers to the dns collection get params
func (o *DNSCollectionGetParams) WithServersQueryParameter(servers *string) *DNSCollectionGetParams {
	o.SetServersQueryParameter(servers)
	return o
}

// SetServersQueryParameter adds the servers to the dns collection get params
func (o *DNSCollectionGetParams) SetServersQueryParameter(servers *string) {
	o.ServersQueryParameter = servers
}

// WithSourceAddressMatchQueryParameter adds the sourceAddressMatch to the dns collection get params
func (o *DNSCollectionGetParams) WithSourceAddressMatchQueryParameter(sourceAddressMatch *bool) *DNSCollectionGetParams {
	o.SetSourceAddressMatchQueryParameter(sourceAddressMatch)
	return o
}

// SetSourceAddressMatchQueryParameter adds the sourceAddressMatch to the dns collection get params
func (o *DNSCollectionGetParams) SetSourceAddressMatchQueryParameter(sourceAddressMatch *bool) {
	o.SourceAddressMatchQueryParameter = sourceAddressMatch
}

// WithStatusCodeQueryParameter adds the statusCode to the dns collection get params
func (o *DNSCollectionGetParams) WithStatusCodeQueryParameter(statusCode *int64) *DNSCollectionGetParams {
	o.SetStatusCodeQueryParameter(statusCode)
	return o
}

// SetStatusCodeQueryParameter adds the statusCode to the dns collection get params
func (o *DNSCollectionGetParams) SetStatusCodeQueryParameter(statusCode *int64) {
	o.StatusCodeQueryParameter = statusCode
}

// WithStatusMessageQueryParameter adds the statusMessage to the dns collection get params
func (o *DNSCollectionGetParams) WithStatusMessageQueryParameter(statusMessage *string) *DNSCollectionGetParams {
	o.SetStatusMessageQueryParameter(statusMessage)
	return o
}

// SetStatusMessageQueryParameter adds the statusMessage to the dns collection get params
func (o *DNSCollectionGetParams) SetStatusMessageQueryParameter(statusMessage *string) {
	o.StatusMessageQueryParameter = statusMessage
}

// WithStatusNameServerQueryParameter adds the statusNameServer to the dns collection get params
func (o *DNSCollectionGetParams) WithStatusNameServerQueryParameter(statusNameServer *string) *DNSCollectionGetParams {
	o.SetStatusNameServerQueryParameter(statusNameServer)
	return o
}

// SetStatusNameServerQueryParameter adds the statusNameServer to the dns collection get params
func (o *DNSCollectionGetParams) SetStatusNameServerQueryParameter(statusNameServer *string) {
	o.StatusNameServerQueryParameter = statusNameServer
}

// WithStatusStateQueryParameter adds the statusState to the dns collection get params
func (o *DNSCollectionGetParams) WithStatusStateQueryParameter(statusState *string) *DNSCollectionGetParams {
	o.SetStatusStateQueryParameter(statusState)
	return o
}

// SetStatusStateQueryParameter adds the statusState to the dns collection get params
func (o *DNSCollectionGetParams) SetStatusStateQueryParameter(statusState *string) {
	o.StatusStateQueryParameter = statusState
}

// WithSVMNameQueryParameter adds the svmName to the dns collection get params
func (o *DNSCollectionGetParams) WithSVMNameQueryParameter(svmName *string) *DNSCollectionGetParams {
	o.SetSVMNameQueryParameter(svmName)
	return o
}

// SetSVMNameQueryParameter adds the svmName to the dns collection get params
func (o *DNSCollectionGetParams) SetSVMNameQueryParameter(svmName *string) {
	o.SVMNameQueryParameter = svmName
}

// WithSVMUUIDQueryParameter adds the svmUUID to the dns collection get params
func (o *DNSCollectionGetParams) WithSVMUUIDQueryParameter(svmUUID *string) *DNSCollectionGetParams {
	o.SetSVMUUIDQueryParameter(svmUUID)
	return o
}

// SetSVMUUIDQueryParameter adds the svmUuid to the dns collection get params
func (o *DNSCollectionGetParams) SetSVMUUIDQueryParameter(svmUUID *string) {
	o.SVMUUIDQueryParameter = svmUUID
}

// WithTimeoutQueryParameter adds the timeout to the dns collection get params
func (o *DNSCollectionGetParams) WithTimeoutQueryParameter(timeout *int64) *DNSCollectionGetParams {
	o.SetTimeoutQueryParameter(timeout)
	return o
}

// SetTimeoutQueryParameter adds the timeout to the dns collection get params
func (o *DNSCollectionGetParams) SetTimeoutQueryParameter(timeout *int64) {
	o.TimeoutQueryParameter = timeout
}

// WithTldQueryEnabledQueryParameter adds the tldQueryEnabled to the dns collection get params
func (o *DNSCollectionGetParams) WithTldQueryEnabledQueryParameter(tldQueryEnabled *bool) *DNSCollectionGetParams {
	o.SetTldQueryEnabledQueryParameter(tldQueryEnabled)
	return o
}

// SetTldQueryEnabledQueryParameter adds the tldQueryEnabled to the dns collection get params
func (o *DNSCollectionGetParams) SetTldQueryEnabledQueryParameter(tldQueryEnabled *bool) {
	o.TldQueryEnabledQueryParameter = tldQueryEnabled
}

// WriteToRequest writes these params to a swagger request
func (o *DNSCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.requestTimeout); err != nil {
		return err
	}
	var res []error

	if o.AttemptsQueryParameter != nil {

		// query param attempts
		var qrAttempts int64

		if o.AttemptsQueryParameter != nil {
			qrAttempts = *o.AttemptsQueryParameter
		}
		qAttempts := swag.FormatInt64(qrAttempts)
		if qAttempts != "" {

			if err := r.SetQueryParam("attempts", qAttempts); err != nil {
				return err
			}
		}
	}

	if o.DomainsQueryParameter != nil {

		// query param domains
		var qrDomains string

		if o.DomainsQueryParameter != nil {
			qrDomains = *o.DomainsQueryParameter
		}
		qDomains := qrDomains
		if qDomains != "" {

			if err := r.SetQueryParam("domains", qDomains); err != nil {
				return err
			}
		}
	}

	if o.DynamicDNSEnabledQueryParameter != nil {

		// query param dynamic_dns.enabled
		var qrDynamicDNSEnabled bool

		if o.DynamicDNSEnabledQueryParameter != nil {
			qrDynamicDNSEnabled = *o.DynamicDNSEnabledQueryParameter
		}
		qDynamicDNSEnabled := swag.FormatBool(qrDynamicDNSEnabled)
		if qDynamicDNSEnabled != "" {

			if err := r.SetQueryParam("dynamic_dns.enabled", qDynamicDNSEnabled); err != nil {
				return err
			}
		}
	}

	if o.DynamicDNSFqdnQueryParameter != nil {

		// query param dynamic_dns.fqdn
		var qrDynamicDNSFqdn string

		if o.DynamicDNSFqdnQueryParameter != nil {
			qrDynamicDNSFqdn = *o.DynamicDNSFqdnQueryParameter
		}
		qDynamicDNSFqdn := qrDynamicDNSFqdn
		if qDynamicDNSFqdn != "" {

			if err := r.SetQueryParam("dynamic_dns.fqdn", qDynamicDNSFqdn); err != nil {
				return err
			}
		}
	}

	if o.DynamicDNSTimeToLiveQueryParameter != nil {

		// query param dynamic_dns.time_to_live
		var qrDynamicDNSTimeToLive string

		if o.DynamicDNSTimeToLiveQueryParameter != nil {
			qrDynamicDNSTimeToLive = *o.DynamicDNSTimeToLiveQueryParameter
		}
		qDynamicDNSTimeToLive := qrDynamicDNSTimeToLive
		if qDynamicDNSTimeToLive != "" {

			if err := r.SetQueryParam("dynamic_dns.time_to_live", qDynamicDNSTimeToLive); err != nil {
				return err
			}
		}
	}

	if o.DynamicDNSUseSecureQueryParameter != nil {

		// query param dynamic_dns.use_secure
		var qrDynamicDNSUseSecure bool

		if o.DynamicDNSUseSecureQueryParameter != nil {
			qrDynamicDNSUseSecure = *o.DynamicDNSUseSecureQueryParameter
		}
		qDynamicDNSUseSecure := swag.FormatBool(qrDynamicDNSUseSecure)
		if qDynamicDNSUseSecure != "" {

			if err := r.SetQueryParam("dynamic_dns.use_secure", qDynamicDNSUseSecure); err != nil {
				return err
			}
		}
	}

	if o.FieldsQueryParameter != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.MaxRecordsQueryParameter != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecordsQueryParameter != nil {
			qrMaxRecords = *o.MaxRecordsQueryParameter
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.OrderByQueryParameter != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.PacketQueryMatchQueryParameter != nil {

		// query param packet_query_match
		var qrPacketQueryMatch bool

		if o.PacketQueryMatchQueryParameter != nil {
			qrPacketQueryMatch = *o.PacketQueryMatchQueryParameter
		}
		qPacketQueryMatch := swag.FormatBool(qrPacketQueryMatch)
		if qPacketQueryMatch != "" {

			if err := r.SetQueryParam("packet_query_match", qPacketQueryMatch); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecordsQueryParameter != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecordsQueryParameter != nil {
			qrReturnRecords = *o.ReturnRecordsQueryParameter
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeoutQueryParameter != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeoutQueryParameter != nil {
			qrReturnTimeout = *o.ReturnTimeoutQueryParameter
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.ScopeQueryParameter != nil {

		// query param scope
		var qrScope string

		if o.ScopeQueryParameter != nil {
			qrScope = *o.ScopeQueryParameter
		}
		qScope := qrScope
		if qScope != "" {

			if err := r.SetQueryParam("scope", qScope); err != nil {
				return err
			}
		}
	}

	if o.ServersQueryParameter != nil {

		// query param servers
		var qrServers string

		if o.ServersQueryParameter != nil {
			qrServers = *o.ServersQueryParameter
		}
		qServers := qrServers
		if qServers != "" {

			if err := r.SetQueryParam("servers", qServers); err != nil {
				return err
			}
		}
	}

	if o.SourceAddressMatchQueryParameter != nil {

		// query param source_address_match
		var qrSourceAddressMatch bool

		if o.SourceAddressMatchQueryParameter != nil {
			qrSourceAddressMatch = *o.SourceAddressMatchQueryParameter
		}
		qSourceAddressMatch := swag.FormatBool(qrSourceAddressMatch)
		if qSourceAddressMatch != "" {

			if err := r.SetQueryParam("source_address_match", qSourceAddressMatch); err != nil {
				return err
			}
		}
	}

	if o.StatusCodeQueryParameter != nil {

		// query param status.code
		var qrStatusCode int64

		if o.StatusCodeQueryParameter != nil {
			qrStatusCode = *o.StatusCodeQueryParameter
		}
		qStatusCode := swag.FormatInt64(qrStatusCode)
		if qStatusCode != "" {

			if err := r.SetQueryParam("status.code", qStatusCode); err != nil {
				return err
			}
		}
	}

	if o.StatusMessageQueryParameter != nil {

		// query param status.message
		var qrStatusMessage string

		if o.StatusMessageQueryParameter != nil {
			qrStatusMessage = *o.StatusMessageQueryParameter
		}
		qStatusMessage := qrStatusMessage
		if qStatusMessage != "" {

			if err := r.SetQueryParam("status.message", qStatusMessage); err != nil {
				return err
			}
		}
	}

	if o.StatusNameServerQueryParameter != nil {

		// query param status.name_server
		var qrStatusNameServer string

		if o.StatusNameServerQueryParameter != nil {
			qrStatusNameServer = *o.StatusNameServerQueryParameter
		}
		qStatusNameServer := qrStatusNameServer
		if qStatusNameServer != "" {

			if err := r.SetQueryParam("status.name_server", qStatusNameServer); err != nil {
				return err
			}
		}
	}

	if o.StatusStateQueryParameter != nil {

		// query param status.state
		var qrStatusState string

		if o.StatusStateQueryParameter != nil {
			qrStatusState = *o.StatusStateQueryParameter
		}
		qStatusState := qrStatusState
		if qStatusState != "" {

			if err := r.SetQueryParam("status.state", qStatusState); err != nil {
				return err
			}
		}
	}

	if o.SVMNameQueryParameter != nil {

		// query param svm.name
		var qrSvmName string

		if o.SVMNameQueryParameter != nil {
			qrSvmName = *o.SVMNameQueryParameter
		}
		qSvmName := qrSvmName
		if qSvmName != "" {

			if err := r.SetQueryParam("svm.name", qSvmName); err != nil {
				return err
			}
		}
	}

	if o.SVMUUIDQueryParameter != nil {

		// query param svm.uuid
		var qrSvmUUID string

		if o.SVMUUIDQueryParameter != nil {
			qrSvmUUID = *o.SVMUUIDQueryParameter
		}
		qSvmUUID := qrSvmUUID
		if qSvmUUID != "" {

			if err := r.SetQueryParam("svm.uuid", qSvmUUID); err != nil {
				return err
			}
		}
	}

	if o.TimeoutQueryParameter != nil {

		// query param timeout
		var qrTimeout int64

		if o.TimeoutQueryParameter != nil {
			qrTimeout = *o.TimeoutQueryParameter
		}
		qTimeout := swag.FormatInt64(qrTimeout)
		if qTimeout != "" {

			if err := r.SetQueryParam("timeout", qTimeout); err != nil {
				return err
			}
		}
	}

	if o.TldQueryEnabledQueryParameter != nil {

		// query param tld_query_enabled
		var qrTldQueryEnabled bool

		if o.TldQueryEnabledQueryParameter != nil {
			qrTldQueryEnabled = *o.TldQueryEnabledQueryParameter
		}
		qTldQueryEnabled := swag.FormatBool(qrTldQueryEnabled)
		if qTldQueryEnabled != "" {

			if err := r.SetQueryParam("tld_query_enabled", qTldQueryEnabled); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamDNSCollectionGet binds the parameter fields
func (o *DNSCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.FieldsQueryParameter

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamDNSCollectionGet binds the parameter order_by
func (o *DNSCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderByQueryParameter

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
