// Code generated by go-swagger; DO NOT EDIT.

package name_services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewHostRecordGetParams creates a new HostRecordGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewHostRecordGetParams() *HostRecordGetParams {
	return &HostRecordGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewHostRecordGetParamsWithTimeout creates a new HostRecordGetParams object
// with the ability to set a timeout on a request.
func NewHostRecordGetParamsWithTimeout(timeout time.Duration) *HostRecordGetParams {
	return &HostRecordGetParams{
		timeout: timeout,
	}
}

// NewHostRecordGetParamsWithContext creates a new HostRecordGetParams object
// with the ability to set a context for a request.
func NewHostRecordGetParamsWithContext(ctx context.Context) *HostRecordGetParams {
	return &HostRecordGetParams{
		Context: ctx,
	}
}

// NewHostRecordGetParamsWithHTTPClient creates a new HostRecordGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewHostRecordGetParamsWithHTTPClient(client *http.Client) *HostRecordGetParams {
	return &HostRecordGetParams{
		HTTPClient: client,
	}
}

/* HostRecordGetParams contains all the parameters to send to the API endpoint
   for the host record get operation.

   Typically these are written to a http.Request.
*/
type HostRecordGetParams struct {

	/* Fields.

	   Specify the fields to return.
	*/
	FieldsQueryParameter []string

	/* Host.

	   Hostname or IP address.
	*/
	HostPathParameter string

	/* SvmUUID.

	   UUID of the SVM to which this object belongs.
	*/
	SVMUUIDPathParameter string

	/* UseCache.

	   Enables or disables the cache.
	*/
	UseCacheQueryParameter *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the host record get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *HostRecordGetParams) WithDefaults() *HostRecordGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the host record get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *HostRecordGetParams) SetDefaults() {
	var (
		useCacheQueryParameterDefault = bool(false)
	)

	val := HostRecordGetParams{
		UseCacheQueryParameter: &useCacheQueryParameterDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the host record get params
func (o *HostRecordGetParams) WithTimeout(timeout time.Duration) *HostRecordGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the host record get params
func (o *HostRecordGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the host record get params
func (o *HostRecordGetParams) WithContext(ctx context.Context) *HostRecordGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the host record get params
func (o *HostRecordGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the host record get params
func (o *HostRecordGetParams) WithHTTPClient(client *http.Client) *HostRecordGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the host record get params
func (o *HostRecordGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFieldsQueryParameter adds the fields to the host record get params
func (o *HostRecordGetParams) WithFieldsQueryParameter(fields []string) *HostRecordGetParams {
	o.SetFieldsQueryParameter(fields)
	return o
}

// SetFieldsQueryParameter adds the fields to the host record get params
func (o *HostRecordGetParams) SetFieldsQueryParameter(fields []string) {
	o.FieldsQueryParameter = fields
}

// WithHostPathParameter adds the host to the host record get params
func (o *HostRecordGetParams) WithHostPathParameter(host string) *HostRecordGetParams {
	o.SetHostPathParameter(host)
	return o
}

// SetHostPathParameter adds the host to the host record get params
func (o *HostRecordGetParams) SetHostPathParameter(host string) {
	o.HostPathParameter = host
}

// WithSVMUUIDPathParameter adds the svmUUID to the host record get params
func (o *HostRecordGetParams) WithSVMUUIDPathParameter(svmUUID string) *HostRecordGetParams {
	o.SetSVMUUIDPathParameter(svmUUID)
	return o
}

// SetSVMUUIDPathParameter adds the svmUuid to the host record get params
func (o *HostRecordGetParams) SetSVMUUIDPathParameter(svmUUID string) {
	o.SVMUUIDPathParameter = svmUUID
}

// WithUseCacheQueryParameter adds the useCache to the host record get params
func (o *HostRecordGetParams) WithUseCacheQueryParameter(useCache *bool) *HostRecordGetParams {
	o.SetUseCacheQueryParameter(useCache)
	return o
}

// SetUseCacheQueryParameter adds the useCache to the host record get params
func (o *HostRecordGetParams) SetUseCacheQueryParameter(useCache *bool) {
	o.UseCacheQueryParameter = useCache
}

// WriteToRequest writes these params to a swagger request
func (o *HostRecordGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FieldsQueryParameter != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	// path param host
	if err := r.SetPathParam("host", o.HostPathParameter); err != nil {
		return err
	}

	// path param svm.uuid
	if err := r.SetPathParam("svm.uuid", o.SVMUUIDPathParameter); err != nil {
		return err
	}

	if o.UseCacheQueryParameter != nil {

		// query param use_cache
		var qrUseCache bool

		if o.UseCacheQueryParameter != nil {
			qrUseCache = *o.UseCacheQueryParameter
		}
		qUseCache := swag.FormatBool(qrUseCache)
		if qUseCache != "" {

			if err := r.SetQueryParam("use_cache", qUseCache); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamHostRecordGet binds the parameter fields
func (o *HostRecordGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.FieldsQueryParameter

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}
