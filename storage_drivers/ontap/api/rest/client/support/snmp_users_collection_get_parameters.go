// Code generated by go-swagger; DO NOT EDIT.

package support

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSnmpUsersCollectionGetParams creates a new SnmpUsersCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSnmpUsersCollectionGetParams() *SnmpUsersCollectionGetParams {
	return &SnmpUsersCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSnmpUsersCollectionGetParamsWithTimeout creates a new SnmpUsersCollectionGetParams object
// with the ability to set a timeout on a request.
func NewSnmpUsersCollectionGetParamsWithTimeout(timeout time.Duration) *SnmpUsersCollectionGetParams {
	return &SnmpUsersCollectionGetParams{
		timeout: timeout,
	}
}

// NewSnmpUsersCollectionGetParamsWithContext creates a new SnmpUsersCollectionGetParams object
// with the ability to set a context for a request.
func NewSnmpUsersCollectionGetParamsWithContext(ctx context.Context) *SnmpUsersCollectionGetParams {
	return &SnmpUsersCollectionGetParams{
		Context: ctx,
	}
}

// NewSnmpUsersCollectionGetParamsWithHTTPClient creates a new SnmpUsersCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewSnmpUsersCollectionGetParamsWithHTTPClient(client *http.Client) *SnmpUsersCollectionGetParams {
	return &SnmpUsersCollectionGetParams{
		HTTPClient: client,
	}
}

/*
SnmpUsersCollectionGetParams contains all the parameters to send to the API endpoint

	for the snmp users collection get operation.

	Typically these are written to a http.Request.
*/
type SnmpUsersCollectionGetParams struct {

	/* AuthenticationMethod.

	   Filter by authentication_method
	*/
	AuthenticationMethodQueryParameter *string

	/* Comment.

	   Filter by comment
	*/
	CommentQueryParameter *string

	/* EngineID.

	   Filter by engine_id
	*/
	EngineIDQueryParameter *string

	/* Fields.

	   Specify the fields to return.
	*/
	FieldsQueryParameter []string

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecordsQueryParameter *int64

	/* Name.

	   Filter by name
	*/
	NameQueryParameter *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderByQueryParameter []string

	/* OwnerName.

	   Filter by owner.name
	*/
	OwnerNameQueryParameter *string

	/* OwnerUUID.

	   Filter by owner.uuid
	*/
	OwnerUUIDQueryParameter *string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecordsQueryParameter *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeoutQueryParameter *int64

	/* Scope.

	   Filter by scope
	*/
	ScopeQueryParameter *string

	/* Snmpv3AuthenticationProtocol.

	   Filter by snmpv3.authentication_protocol
	*/
	Snmpv3AuthenticationProtocolQueryParameter *string

	/* Snmpv3PrivacyProtocol.

	   Filter by snmpv3.privacy_protocol
	*/
	Snmpv3PrivacyProtocolQueryParameter *string

	/* SwitchAddress.

	   Filter by switch_address
	*/
	SwitchAddressQueryParameter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the snmp users collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SnmpUsersCollectionGetParams) WithDefaults() *SnmpUsersCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the snmp users collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SnmpUsersCollectionGetParams) SetDefaults() {
	var (
		returnRecordsQueryParameterDefault = bool(true)

		returnTimeoutQueryParameterDefault = int64(15)
	)

	val := SnmpUsersCollectionGetParams{
		ReturnRecordsQueryParameter: &returnRecordsQueryParameterDefault,
		ReturnTimeoutQueryParameter: &returnTimeoutQueryParameterDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the snmp users collection get params
func (o *SnmpUsersCollectionGetParams) WithTimeout(timeout time.Duration) *SnmpUsersCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the snmp users collection get params
func (o *SnmpUsersCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the snmp users collection get params
func (o *SnmpUsersCollectionGetParams) WithContext(ctx context.Context) *SnmpUsersCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the snmp users collection get params
func (o *SnmpUsersCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the snmp users collection get params
func (o *SnmpUsersCollectionGetParams) WithHTTPClient(client *http.Client) *SnmpUsersCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the snmp users collection get params
func (o *SnmpUsersCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthenticationMethodQueryParameter adds the authenticationMethod to the snmp users collection get params
func (o *SnmpUsersCollectionGetParams) WithAuthenticationMethodQueryParameter(authenticationMethod *string) *SnmpUsersCollectionGetParams {
	o.SetAuthenticationMethodQueryParameter(authenticationMethod)
	return o
}

// SetAuthenticationMethodQueryParameter adds the authenticationMethod to the snmp users collection get params
func (o *SnmpUsersCollectionGetParams) SetAuthenticationMethodQueryParameter(authenticationMethod *string) {
	o.AuthenticationMethodQueryParameter = authenticationMethod
}

// WithCommentQueryParameter adds the comment to the snmp users collection get params
func (o *SnmpUsersCollectionGetParams) WithCommentQueryParameter(comment *string) *SnmpUsersCollectionGetParams {
	o.SetCommentQueryParameter(comment)
	return o
}

// SetCommentQueryParameter adds the comment to the snmp users collection get params
func (o *SnmpUsersCollectionGetParams) SetCommentQueryParameter(comment *string) {
	o.CommentQueryParameter = comment
}

// WithEngineIDQueryParameter adds the engineID to the snmp users collection get params
func (o *SnmpUsersCollectionGetParams) WithEngineIDQueryParameter(engineID *string) *SnmpUsersCollectionGetParams {
	o.SetEngineIDQueryParameter(engineID)
	return o
}

// SetEngineIDQueryParameter adds the engineId to the snmp users collection get params
func (o *SnmpUsersCollectionGetParams) SetEngineIDQueryParameter(engineID *string) {
	o.EngineIDQueryParameter = engineID
}

// WithFieldsQueryParameter adds the fields to the snmp users collection get params
func (o *SnmpUsersCollectionGetParams) WithFieldsQueryParameter(fields []string) *SnmpUsersCollectionGetParams {
	o.SetFieldsQueryParameter(fields)
	return o
}

// SetFieldsQueryParameter adds the fields to the snmp users collection get params
func (o *SnmpUsersCollectionGetParams) SetFieldsQueryParameter(fields []string) {
	o.FieldsQueryParameter = fields
}

// WithMaxRecordsQueryParameter adds the maxRecords to the snmp users collection get params
func (o *SnmpUsersCollectionGetParams) WithMaxRecordsQueryParameter(maxRecords *int64) *SnmpUsersCollectionGetParams {
	o.SetMaxRecordsQueryParameter(maxRecords)
	return o
}

// SetMaxRecordsQueryParameter adds the maxRecords to the snmp users collection get params
func (o *SnmpUsersCollectionGetParams) SetMaxRecordsQueryParameter(maxRecords *int64) {
	o.MaxRecordsQueryParameter = maxRecords
}

// WithNameQueryParameter adds the name to the snmp users collection get params
func (o *SnmpUsersCollectionGetParams) WithNameQueryParameter(name *string) *SnmpUsersCollectionGetParams {
	o.SetNameQueryParameter(name)
	return o
}

// SetNameQueryParameter adds the name to the snmp users collection get params
func (o *SnmpUsersCollectionGetParams) SetNameQueryParameter(name *string) {
	o.NameQueryParameter = name
}

// WithOrderByQueryParameter adds the orderBy to the snmp users collection get params
func (o *SnmpUsersCollectionGetParams) WithOrderByQueryParameter(orderBy []string) *SnmpUsersCollectionGetParams {
	o.SetOrderByQueryParameter(orderBy)
	return o
}

// SetOrderByQueryParameter adds the orderBy to the snmp users collection get params
func (o *SnmpUsersCollectionGetParams) SetOrderByQueryParameter(orderBy []string) {
	o.OrderByQueryParameter = orderBy
}

// WithOwnerNameQueryParameter adds the ownerName to the snmp users collection get params
func (o *SnmpUsersCollectionGetParams) WithOwnerNameQueryParameter(ownerName *string) *SnmpUsersCollectionGetParams {
	o.SetOwnerNameQueryParameter(ownerName)
	return o
}

// SetOwnerNameQueryParameter adds the ownerName to the snmp users collection get params
func (o *SnmpUsersCollectionGetParams) SetOwnerNameQueryParameter(ownerName *string) {
	o.OwnerNameQueryParameter = ownerName
}

// WithOwnerUUIDQueryParameter adds the ownerUUID to the snmp users collection get params
func (o *SnmpUsersCollectionGetParams) WithOwnerUUIDQueryParameter(ownerUUID *string) *SnmpUsersCollectionGetParams {
	o.SetOwnerUUIDQueryParameter(ownerUUID)
	return o
}

// SetOwnerUUIDQueryParameter adds the ownerUuid to the snmp users collection get params
func (o *SnmpUsersCollectionGetParams) SetOwnerUUIDQueryParameter(ownerUUID *string) {
	o.OwnerUUIDQueryParameter = ownerUUID
}

// WithReturnRecordsQueryParameter adds the returnRecords to the snmp users collection get params
func (o *SnmpUsersCollectionGetParams) WithReturnRecordsQueryParameter(returnRecords *bool) *SnmpUsersCollectionGetParams {
	o.SetReturnRecordsQueryParameter(returnRecords)
	return o
}

// SetReturnRecordsQueryParameter adds the returnRecords to the snmp users collection get params
func (o *SnmpUsersCollectionGetParams) SetReturnRecordsQueryParameter(returnRecords *bool) {
	o.ReturnRecordsQueryParameter = returnRecords
}

// WithReturnTimeoutQueryParameter adds the returnTimeout to the snmp users collection get params
func (o *SnmpUsersCollectionGetParams) WithReturnTimeoutQueryParameter(returnTimeout *int64) *SnmpUsersCollectionGetParams {
	o.SetReturnTimeoutQueryParameter(returnTimeout)
	return o
}

// SetReturnTimeoutQueryParameter adds the returnTimeout to the snmp users collection get params
func (o *SnmpUsersCollectionGetParams) SetReturnTimeoutQueryParameter(returnTimeout *int64) {
	o.ReturnTimeoutQueryParameter = returnTimeout
}

// WithScopeQueryParameter adds the scope to the snmp users collection get params
func (o *SnmpUsersCollectionGetParams) WithScopeQueryParameter(scope *string) *SnmpUsersCollectionGetParams {
	o.SetScopeQueryParameter(scope)
	return o
}

// SetScopeQueryParameter adds the scope to the snmp users collection get params
func (o *SnmpUsersCollectionGetParams) SetScopeQueryParameter(scope *string) {
	o.ScopeQueryParameter = scope
}

// WithSnmpv3AuthenticationProtocolQueryParameter adds the snmpv3AuthenticationProtocol to the snmp users collection get params
func (o *SnmpUsersCollectionGetParams) WithSnmpv3AuthenticationProtocolQueryParameter(snmpv3AuthenticationProtocol *string) *SnmpUsersCollectionGetParams {
	o.SetSnmpv3AuthenticationProtocolQueryParameter(snmpv3AuthenticationProtocol)
	return o
}

// SetSnmpv3AuthenticationProtocolQueryParameter adds the snmpv3AuthenticationProtocol to the snmp users collection get params
func (o *SnmpUsersCollectionGetParams) SetSnmpv3AuthenticationProtocolQueryParameter(snmpv3AuthenticationProtocol *string) {
	o.Snmpv3AuthenticationProtocolQueryParameter = snmpv3AuthenticationProtocol
}

// WithSnmpv3PrivacyProtocolQueryParameter adds the snmpv3PrivacyProtocol to the snmp users collection get params
func (o *SnmpUsersCollectionGetParams) WithSnmpv3PrivacyProtocolQueryParameter(snmpv3PrivacyProtocol *string) *SnmpUsersCollectionGetParams {
	o.SetSnmpv3PrivacyProtocolQueryParameter(snmpv3PrivacyProtocol)
	return o
}

// SetSnmpv3PrivacyProtocolQueryParameter adds the snmpv3PrivacyProtocol to the snmp users collection get params
func (o *SnmpUsersCollectionGetParams) SetSnmpv3PrivacyProtocolQueryParameter(snmpv3PrivacyProtocol *string) {
	o.Snmpv3PrivacyProtocolQueryParameter = snmpv3PrivacyProtocol
}

// WithSwitchAddressQueryParameter adds the switchAddress to the snmp users collection get params
func (o *SnmpUsersCollectionGetParams) WithSwitchAddressQueryParameter(switchAddress *string) *SnmpUsersCollectionGetParams {
	o.SetSwitchAddressQueryParameter(switchAddress)
	return o
}

// SetSwitchAddressQueryParameter adds the switchAddress to the snmp users collection get params
func (o *SnmpUsersCollectionGetParams) SetSwitchAddressQueryParameter(switchAddress *string) {
	o.SwitchAddressQueryParameter = switchAddress
}

// WriteToRequest writes these params to a swagger request
func (o *SnmpUsersCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AuthenticationMethodQueryParameter != nil {

		// query param authentication_method
		var qrAuthenticationMethod string

		if o.AuthenticationMethodQueryParameter != nil {
			qrAuthenticationMethod = *o.AuthenticationMethodQueryParameter
		}
		qAuthenticationMethod := qrAuthenticationMethod
		if qAuthenticationMethod != "" {

			if err := r.SetQueryParam("authentication_method", qAuthenticationMethod); err != nil {
				return err
			}
		}
	}

	if o.CommentQueryParameter != nil {

		// query param comment
		var qrComment string

		if o.CommentQueryParameter != nil {
			qrComment = *o.CommentQueryParameter
		}
		qComment := qrComment
		if qComment != "" {

			if err := r.SetQueryParam("comment", qComment); err != nil {
				return err
			}
		}
	}

	if o.EngineIDQueryParameter != nil {

		// query param engine_id
		var qrEngineID string

		if o.EngineIDQueryParameter != nil {
			qrEngineID = *o.EngineIDQueryParameter
		}
		qEngineID := qrEngineID
		if qEngineID != "" {

			if err := r.SetQueryParam("engine_id", qEngineID); err != nil {
				return err
			}
		}
	}

	if o.FieldsQueryParameter != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.MaxRecordsQueryParameter != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecordsQueryParameter != nil {
			qrMaxRecords = *o.MaxRecordsQueryParameter
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.NameQueryParameter != nil {

		// query param name
		var qrName string

		if o.NameQueryParameter != nil {
			qrName = *o.NameQueryParameter
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.OrderByQueryParameter != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.OwnerNameQueryParameter != nil {

		// query param owner.name
		var qrOwnerName string

		if o.OwnerNameQueryParameter != nil {
			qrOwnerName = *o.OwnerNameQueryParameter
		}
		qOwnerName := qrOwnerName
		if qOwnerName != "" {

			if err := r.SetQueryParam("owner.name", qOwnerName); err != nil {
				return err
			}
		}
	}

	if o.OwnerUUIDQueryParameter != nil {

		// query param owner.uuid
		var qrOwnerUUID string

		if o.OwnerUUIDQueryParameter != nil {
			qrOwnerUUID = *o.OwnerUUIDQueryParameter
		}
		qOwnerUUID := qrOwnerUUID
		if qOwnerUUID != "" {

			if err := r.SetQueryParam("owner.uuid", qOwnerUUID); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecordsQueryParameter != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecordsQueryParameter != nil {
			qrReturnRecords = *o.ReturnRecordsQueryParameter
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeoutQueryParameter != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeoutQueryParameter != nil {
			qrReturnTimeout = *o.ReturnTimeoutQueryParameter
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.ScopeQueryParameter != nil {

		// query param scope
		var qrScope string

		if o.ScopeQueryParameter != nil {
			qrScope = *o.ScopeQueryParameter
		}
		qScope := qrScope
		if qScope != "" {

			if err := r.SetQueryParam("scope", qScope); err != nil {
				return err
			}
		}
	}

	if o.Snmpv3AuthenticationProtocolQueryParameter != nil {

		// query param snmpv3.authentication_protocol
		var qrSnmpv3AuthenticationProtocol string

		if o.Snmpv3AuthenticationProtocolQueryParameter != nil {
			qrSnmpv3AuthenticationProtocol = *o.Snmpv3AuthenticationProtocolQueryParameter
		}
		qSnmpv3AuthenticationProtocol := qrSnmpv3AuthenticationProtocol
		if qSnmpv3AuthenticationProtocol != "" {

			if err := r.SetQueryParam("snmpv3.authentication_protocol", qSnmpv3AuthenticationProtocol); err != nil {
				return err
			}
		}
	}

	if o.Snmpv3PrivacyProtocolQueryParameter != nil {

		// query param snmpv3.privacy_protocol
		var qrSnmpv3PrivacyProtocol string

		if o.Snmpv3PrivacyProtocolQueryParameter != nil {
			qrSnmpv3PrivacyProtocol = *o.Snmpv3PrivacyProtocolQueryParameter
		}
		qSnmpv3PrivacyProtocol := qrSnmpv3PrivacyProtocol
		if qSnmpv3PrivacyProtocol != "" {

			if err := r.SetQueryParam("snmpv3.privacy_protocol", qSnmpv3PrivacyProtocol); err != nil {
				return err
			}
		}
	}

	if o.SwitchAddressQueryParameter != nil {

		// query param switch_address
		var qrSwitchAddress string

		if o.SwitchAddressQueryParameter != nil {
			qrSwitchAddress = *o.SwitchAddressQueryParameter
		}
		qSwitchAddress := qrSwitchAddress
		if qSwitchAddress != "" {

			if err := r.SetQueryParam("switch_address", qSwitchAddress); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamSnmpUsersCollectionGet binds the parameter fields
func (o *SnmpUsersCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.FieldsQueryParameter

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamSnmpUsersCollectionGet binds the parameter order_by
func (o *SnmpUsersCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderByQueryParameter

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
