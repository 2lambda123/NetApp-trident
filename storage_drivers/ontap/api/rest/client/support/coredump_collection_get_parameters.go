// Code generated by go-swagger; DO NOT EDIT.

package support

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCoredumpCollectionGetParams creates a new CoredumpCollectionGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCoredumpCollectionGetParams() *CoredumpCollectionGetParams {
	return &CoredumpCollectionGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCoredumpCollectionGetParamsWithTimeout creates a new CoredumpCollectionGetParams object
// with the ability to set a timeout on a request.
func NewCoredumpCollectionGetParamsWithTimeout(timeout time.Duration) *CoredumpCollectionGetParams {
	return &CoredumpCollectionGetParams{
		timeout: timeout,
	}
}

// NewCoredumpCollectionGetParamsWithContext creates a new CoredumpCollectionGetParams object
// with the ability to set a context for a request.
func NewCoredumpCollectionGetParamsWithContext(ctx context.Context) *CoredumpCollectionGetParams {
	return &CoredumpCollectionGetParams{
		Context: ctx,
	}
}

// NewCoredumpCollectionGetParamsWithHTTPClient creates a new CoredumpCollectionGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewCoredumpCollectionGetParamsWithHTTPClient(client *http.Client) *CoredumpCollectionGetParams {
	return &CoredumpCollectionGetParams{
		HTTPClient: client,
	}
}

/* CoredumpCollectionGetParams contains all the parameters to send to the API endpoint
   for the coredump collection get operation.

   Typically these are written to a http.Request.
*/
type CoredumpCollectionGetParams struct {

	/* Fields.

	   Specify the fields to return.
	*/
	FieldsQueryParameter []string

	/* IsPartial.

	   Filter by is_partial
	*/
	IsPartialQueryParameter *bool

	/* IsSaved.

	   Filter by is_saved
	*/
	IsSavedQueryParameter *bool

	/* MaxRecords.

	   Limit the number of records returned.
	*/
	MaxRecordsQueryParameter *int64

	/* Md5DataChecksum.

	   Filter by md5_data_checksum
	*/
	Md5DataChecksumQueryParameter *string

	/* Name.

	   Filter by name
	*/
	NameQueryParameter *string

	/* NodeName.

	   Filter by node.name
	*/
	NodeNameQueryParameter *string

	/* NodeUUID.

	   Filter by node.uuid
	*/
	NodeUUIDQueryParameter *string

	/* OrderBy.

	   Order results by specified fields and optional [asc|desc] direction. Default direction is 'asc' for ascending.
	*/
	OrderByQueryParameter []string

	/* PanicTime.

	   Filter by panic_time
	*/
	PanicTimeQueryParameter *string

	/* ReturnRecords.

	   The default is true for GET calls.  When set to false, only the number of records is returned.

	   Default: true
	*/
	ReturnRecordsQueryParameter *bool

	/* ReturnTimeout.

	   The number of seconds to allow the call to execute before returning.  When iterating over a collection, the default is 15 seconds.  ONTAP returns earlier if either max records or the end of the collection is reached.

	   Default: 15
	*/
	ReturnTimeoutQueryParameter *int64

	/* Size.

	   Filter by size
	*/
	SizeQueryParameter *int64

	/* Type.

	   Filter by type
	*/
	TypeQueryParameter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the coredump collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CoredumpCollectionGetParams) WithDefaults() *CoredumpCollectionGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the coredump collection get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CoredumpCollectionGetParams) SetDefaults() {
	var (
		returnRecordsQueryParameterDefault = bool(true)

		returnTimeoutQueryParameterDefault = int64(15)
	)

	val := CoredumpCollectionGetParams{
		ReturnRecordsQueryParameter: &returnRecordsQueryParameterDefault,
		ReturnTimeoutQueryParameter: &returnTimeoutQueryParameterDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the coredump collection get params
func (o *CoredumpCollectionGetParams) WithTimeout(timeout time.Duration) *CoredumpCollectionGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the coredump collection get params
func (o *CoredumpCollectionGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the coredump collection get params
func (o *CoredumpCollectionGetParams) WithContext(ctx context.Context) *CoredumpCollectionGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the coredump collection get params
func (o *CoredumpCollectionGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the coredump collection get params
func (o *CoredumpCollectionGetParams) WithHTTPClient(client *http.Client) *CoredumpCollectionGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the coredump collection get params
func (o *CoredumpCollectionGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFieldsQueryParameter adds the fields to the coredump collection get params
func (o *CoredumpCollectionGetParams) WithFieldsQueryParameter(fields []string) *CoredumpCollectionGetParams {
	o.SetFieldsQueryParameter(fields)
	return o
}

// SetFieldsQueryParameter adds the fields to the coredump collection get params
func (o *CoredumpCollectionGetParams) SetFieldsQueryParameter(fields []string) {
	o.FieldsQueryParameter = fields
}

// WithIsPartialQueryParameter adds the isPartial to the coredump collection get params
func (o *CoredumpCollectionGetParams) WithIsPartialQueryParameter(isPartial *bool) *CoredumpCollectionGetParams {
	o.SetIsPartialQueryParameter(isPartial)
	return o
}

// SetIsPartialQueryParameter adds the isPartial to the coredump collection get params
func (o *CoredumpCollectionGetParams) SetIsPartialQueryParameter(isPartial *bool) {
	o.IsPartialQueryParameter = isPartial
}

// WithIsSavedQueryParameter adds the isSaved to the coredump collection get params
func (o *CoredumpCollectionGetParams) WithIsSavedQueryParameter(isSaved *bool) *CoredumpCollectionGetParams {
	o.SetIsSavedQueryParameter(isSaved)
	return o
}

// SetIsSavedQueryParameter adds the isSaved to the coredump collection get params
func (o *CoredumpCollectionGetParams) SetIsSavedQueryParameter(isSaved *bool) {
	o.IsSavedQueryParameter = isSaved
}

// WithMaxRecordsQueryParameter adds the maxRecords to the coredump collection get params
func (o *CoredumpCollectionGetParams) WithMaxRecordsQueryParameter(maxRecords *int64) *CoredumpCollectionGetParams {
	o.SetMaxRecordsQueryParameter(maxRecords)
	return o
}

// SetMaxRecordsQueryParameter adds the maxRecords to the coredump collection get params
func (o *CoredumpCollectionGetParams) SetMaxRecordsQueryParameter(maxRecords *int64) {
	o.MaxRecordsQueryParameter = maxRecords
}

// WithMd5DataChecksumQueryParameter adds the md5DataChecksum to the coredump collection get params
func (o *CoredumpCollectionGetParams) WithMd5DataChecksumQueryParameter(md5DataChecksum *string) *CoredumpCollectionGetParams {
	o.SetMd5DataChecksumQueryParameter(md5DataChecksum)
	return o
}

// SetMd5DataChecksumQueryParameter adds the md5DataChecksum to the coredump collection get params
func (o *CoredumpCollectionGetParams) SetMd5DataChecksumQueryParameter(md5DataChecksum *string) {
	o.Md5DataChecksumQueryParameter = md5DataChecksum
}

// WithNameQueryParameter adds the name to the coredump collection get params
func (o *CoredumpCollectionGetParams) WithNameQueryParameter(name *string) *CoredumpCollectionGetParams {
	o.SetNameQueryParameter(name)
	return o
}

// SetNameQueryParameter adds the name to the coredump collection get params
func (o *CoredumpCollectionGetParams) SetNameQueryParameter(name *string) {
	o.NameQueryParameter = name
}

// WithNodeNameQueryParameter adds the nodeName to the coredump collection get params
func (o *CoredumpCollectionGetParams) WithNodeNameQueryParameter(nodeName *string) *CoredumpCollectionGetParams {
	o.SetNodeNameQueryParameter(nodeName)
	return o
}

// SetNodeNameQueryParameter adds the nodeName to the coredump collection get params
func (o *CoredumpCollectionGetParams) SetNodeNameQueryParameter(nodeName *string) {
	o.NodeNameQueryParameter = nodeName
}

// WithNodeUUIDQueryParameter adds the nodeUUID to the coredump collection get params
func (o *CoredumpCollectionGetParams) WithNodeUUIDQueryParameter(nodeUUID *string) *CoredumpCollectionGetParams {
	o.SetNodeUUIDQueryParameter(nodeUUID)
	return o
}

// SetNodeUUIDQueryParameter adds the nodeUuid to the coredump collection get params
func (o *CoredumpCollectionGetParams) SetNodeUUIDQueryParameter(nodeUUID *string) {
	o.NodeUUIDQueryParameter = nodeUUID
}

// WithOrderByQueryParameter adds the orderBy to the coredump collection get params
func (o *CoredumpCollectionGetParams) WithOrderByQueryParameter(orderBy []string) *CoredumpCollectionGetParams {
	o.SetOrderByQueryParameter(orderBy)
	return o
}

// SetOrderByQueryParameter adds the orderBy to the coredump collection get params
func (o *CoredumpCollectionGetParams) SetOrderByQueryParameter(orderBy []string) {
	o.OrderByQueryParameter = orderBy
}

// WithPanicTimeQueryParameter adds the panicTime to the coredump collection get params
func (o *CoredumpCollectionGetParams) WithPanicTimeQueryParameter(panicTime *string) *CoredumpCollectionGetParams {
	o.SetPanicTimeQueryParameter(panicTime)
	return o
}

// SetPanicTimeQueryParameter adds the panicTime to the coredump collection get params
func (o *CoredumpCollectionGetParams) SetPanicTimeQueryParameter(panicTime *string) {
	o.PanicTimeQueryParameter = panicTime
}

// WithReturnRecordsQueryParameter adds the returnRecords to the coredump collection get params
func (o *CoredumpCollectionGetParams) WithReturnRecordsQueryParameter(returnRecords *bool) *CoredumpCollectionGetParams {
	o.SetReturnRecordsQueryParameter(returnRecords)
	return o
}

// SetReturnRecordsQueryParameter adds the returnRecords to the coredump collection get params
func (o *CoredumpCollectionGetParams) SetReturnRecordsQueryParameter(returnRecords *bool) {
	o.ReturnRecordsQueryParameter = returnRecords
}

// WithReturnTimeoutQueryParameter adds the returnTimeout to the coredump collection get params
func (o *CoredumpCollectionGetParams) WithReturnTimeoutQueryParameter(returnTimeout *int64) *CoredumpCollectionGetParams {
	o.SetReturnTimeoutQueryParameter(returnTimeout)
	return o
}

// SetReturnTimeoutQueryParameter adds the returnTimeout to the coredump collection get params
func (o *CoredumpCollectionGetParams) SetReturnTimeoutQueryParameter(returnTimeout *int64) {
	o.ReturnTimeoutQueryParameter = returnTimeout
}

// WithSizeQueryParameter adds the size to the coredump collection get params
func (o *CoredumpCollectionGetParams) WithSizeQueryParameter(size *int64) *CoredumpCollectionGetParams {
	o.SetSizeQueryParameter(size)
	return o
}

// SetSizeQueryParameter adds the size to the coredump collection get params
func (o *CoredumpCollectionGetParams) SetSizeQueryParameter(size *int64) {
	o.SizeQueryParameter = size
}

// WithTypeQueryParameter adds the typeVar to the coredump collection get params
func (o *CoredumpCollectionGetParams) WithTypeQueryParameter(typeVar *string) *CoredumpCollectionGetParams {
	o.SetTypeQueryParameter(typeVar)
	return o
}

// SetTypeQueryParameter adds the type to the coredump collection get params
func (o *CoredumpCollectionGetParams) SetTypeQueryParameter(typeVar *string) {
	o.TypeQueryParameter = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *CoredumpCollectionGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FieldsQueryParameter != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.IsPartialQueryParameter != nil {

		// query param is_partial
		var qrIsPartial bool

		if o.IsPartialQueryParameter != nil {
			qrIsPartial = *o.IsPartialQueryParameter
		}
		qIsPartial := swag.FormatBool(qrIsPartial)
		if qIsPartial != "" {

			if err := r.SetQueryParam("is_partial", qIsPartial); err != nil {
				return err
			}
		}
	}

	if o.IsSavedQueryParameter != nil {

		// query param is_saved
		var qrIsSaved bool

		if o.IsSavedQueryParameter != nil {
			qrIsSaved = *o.IsSavedQueryParameter
		}
		qIsSaved := swag.FormatBool(qrIsSaved)
		if qIsSaved != "" {

			if err := r.SetQueryParam("is_saved", qIsSaved); err != nil {
				return err
			}
		}
	}

	if o.MaxRecordsQueryParameter != nil {

		// query param max_records
		var qrMaxRecords int64

		if o.MaxRecordsQueryParameter != nil {
			qrMaxRecords = *o.MaxRecordsQueryParameter
		}
		qMaxRecords := swag.FormatInt64(qrMaxRecords)
		if qMaxRecords != "" {

			if err := r.SetQueryParam("max_records", qMaxRecords); err != nil {
				return err
			}
		}
	}

	if o.Md5DataChecksumQueryParameter != nil {

		// query param md5_data_checksum
		var qrMd5DataChecksum string

		if o.Md5DataChecksumQueryParameter != nil {
			qrMd5DataChecksum = *o.Md5DataChecksumQueryParameter
		}
		qMd5DataChecksum := qrMd5DataChecksum
		if qMd5DataChecksum != "" {

			if err := r.SetQueryParam("md5_data_checksum", qMd5DataChecksum); err != nil {
				return err
			}
		}
	}

	if o.NameQueryParameter != nil {

		// query param name
		var qrName string

		if o.NameQueryParameter != nil {
			qrName = *o.NameQueryParameter
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.NodeNameQueryParameter != nil {

		// query param node.name
		var qrNodeName string

		if o.NodeNameQueryParameter != nil {
			qrNodeName = *o.NodeNameQueryParameter
		}
		qNodeName := qrNodeName
		if qNodeName != "" {

			if err := r.SetQueryParam("node.name", qNodeName); err != nil {
				return err
			}
		}
	}

	if o.NodeUUIDQueryParameter != nil {

		// query param node.uuid
		var qrNodeUUID string

		if o.NodeUUIDQueryParameter != nil {
			qrNodeUUID = *o.NodeUUIDQueryParameter
		}
		qNodeUUID := qrNodeUUID
		if qNodeUUID != "" {

			if err := r.SetQueryParam("node.uuid", qNodeUUID); err != nil {
				return err
			}
		}
	}

	if o.OrderByQueryParameter != nil {

		// binding items for order_by
		joinedOrderBy := o.bindParamOrderBy(reg)

		// query array param order_by
		if err := r.SetQueryParam("order_by", joinedOrderBy...); err != nil {
			return err
		}
	}

	if o.PanicTimeQueryParameter != nil {

		// query param panic_time
		var qrPanicTime string

		if o.PanicTimeQueryParameter != nil {
			qrPanicTime = *o.PanicTimeQueryParameter
		}
		qPanicTime := qrPanicTime
		if qPanicTime != "" {

			if err := r.SetQueryParam("panic_time", qPanicTime); err != nil {
				return err
			}
		}
	}

	if o.ReturnRecordsQueryParameter != nil {

		// query param return_records
		var qrReturnRecords bool

		if o.ReturnRecordsQueryParameter != nil {
			qrReturnRecords = *o.ReturnRecordsQueryParameter
		}
		qReturnRecords := swag.FormatBool(qrReturnRecords)
		if qReturnRecords != "" {

			if err := r.SetQueryParam("return_records", qReturnRecords); err != nil {
				return err
			}
		}
	}

	if o.ReturnTimeoutQueryParameter != nil {

		// query param return_timeout
		var qrReturnTimeout int64

		if o.ReturnTimeoutQueryParameter != nil {
			qrReturnTimeout = *o.ReturnTimeoutQueryParameter
		}
		qReturnTimeout := swag.FormatInt64(qrReturnTimeout)
		if qReturnTimeout != "" {

			if err := r.SetQueryParam("return_timeout", qReturnTimeout); err != nil {
				return err
			}
		}
	}

	if o.SizeQueryParameter != nil {

		// query param size
		var qrSize int64

		if o.SizeQueryParameter != nil {
			qrSize = *o.SizeQueryParameter
		}
		qSize := swag.FormatInt64(qrSize)
		if qSize != "" {

			if err := r.SetQueryParam("size", qSize); err != nil {
				return err
			}
		}
	}

	if o.TypeQueryParameter != nil {

		// query param type
		var qrType string

		if o.TypeQueryParameter != nil {
			qrType = *o.TypeQueryParameter
		}
		qType := qrType
		if qType != "" {

			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamCoredumpCollectionGet binds the parameter fields
func (o *CoredumpCollectionGetParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.FieldsQueryParameter

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "csv"
	fieldsIS := swag.JoinByFormat(fieldsIC, "csv")

	return fieldsIS
}

// bindParamCoredumpCollectionGet binds the parameter order_by
func (o *CoredumpCollectionGetParams) bindParamOrderBy(formats strfmt.Registry) []string {
	orderByIR := o.OrderByQueryParameter

	var orderByIC []string
	for _, orderByIIR := range orderByIR { // explode []string

		orderByIIV := orderByIIR // string as string
		orderByIC = append(orderByIC, orderByIIV)
	}

	// items.CollectionFormat: "csv"
	orderByIS := swag.JoinByFormat(orderByIC, "csv")

	return orderByIS
}
