// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/netapp/trident/storage_drivers/ontap/api (interfaces: RestClientInterface)

// Package mock_api is a generated GoMock package.
package mock_api

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/netapp/trident/storage_drivers/ontap/api"
	cluster "github.com/netapp/trident/storage_drivers/ontap/api/rest/client/cluster"
	n_a_s "github.com/netapp/trident/storage_drivers/ontap/api/rest/client/n_a_s"
	networking "github.com/netapp/trident/storage_drivers/ontap/api/rest/client/networking"
	s_a_n "github.com/netapp/trident/storage_drivers/ontap/api/rest/client/s_a_n"
	storage "github.com/netapp/trident/storage_drivers/ontap/api/rest/client/storage"
	svm "github.com/netapp/trident/storage_drivers/ontap/api/rest/client/svm"
	models "github.com/netapp/trident/storage_drivers/ontap/api/rest/models"
)

// MockRestClientInterface is a mock of RestClientInterface interface.
type MockRestClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRestClientInterfaceMockRecorder
}

// MockRestClientInterfaceMockRecorder is the mock recorder for MockRestClientInterface.
type MockRestClientInterfaceMockRecorder struct {
	mock *MockRestClientInterface
}

// NewMockRestClientInterface creates a new mock instance.
func NewMockRestClientInterface(ctrl *gomock.Controller) *MockRestClientInterface {
	mock := &MockRestClientInterface{ctrl: ctrl}
	mock.recorder = &MockRestClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRestClientInterface) EXPECT() *MockRestClientInterfaceMockRecorder {
	return m.recorder
}

// AggregateList mocks base method.
func (m *MockRestClientInterface) AggregateList(arg0 context.Context, arg1 string) (*storage.AggregateCollectionGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregateList", arg0, arg1)
	ret0, _ := ret[0].(*storage.AggregateCollectionGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AggregateList indicates an expected call of AggregateList.
func (mr *MockRestClientInterfaceMockRecorder) AggregateList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregateList", reflect.TypeOf((*MockRestClientInterface)(nil).AggregateList), arg0, arg1)
}

// CliPassthroughEventGeneratePost mocks base method.
func (m *MockRestClientInterface) CliPassthroughEventGeneratePost(arg0 context.Context, arg1 string, arg2 bool, arg3, arg4, arg5 string, arg6 int, arg7 string, arg8 int) (*api.CliPassthroughResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CliPassthroughEventGeneratePost", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
	ret0, _ := ret[0].(*api.CliPassthroughResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CliPassthroughEventGeneratePost indicates an expected call of CliPassthroughEventGeneratePost.
func (mr *MockRestClientInterfaceMockRecorder) CliPassthroughEventGeneratePost(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CliPassthroughEventGeneratePost", reflect.TypeOf((*MockRestClientInterface)(nil).CliPassthroughEventGeneratePost), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
}

// CliPassthroughLunMappingGet mocks base method.
func (m *MockRestClientInterface) CliPassthroughLunMappingGet(arg0 context.Context, arg1, arg2 string) (*api.CliPassthroughResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CliPassthroughLunMappingGet", arg0, arg1, arg2)
	ret0, _ := ret[0].(*api.CliPassthroughResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CliPassthroughLunMappingGet indicates an expected call of CliPassthroughLunMappingGet.
func (mr *MockRestClientInterfaceMockRecorder) CliPassthroughLunMappingGet(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CliPassthroughLunMappingGet", reflect.TypeOf((*MockRestClientInterface)(nil).CliPassthroughLunMappingGet), arg0, arg1, arg2)
}

// CliPassthroughVolumeGet mocks base method.
func (m *MockRestClientInterface) CliPassthroughVolumeGet(arg0 context.Context, arg1 *api.Volume) (*api.CliPassthroughResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CliPassthroughVolumeGet", arg0, arg1)
	ret0, _ := ret[0].(*api.CliPassthroughResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CliPassthroughVolumeGet indicates an expected call of CliPassthroughVolumeGet.
func (mr *MockRestClientInterfaceMockRecorder) CliPassthroughVolumeGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CliPassthroughVolumeGet", reflect.TypeOf((*MockRestClientInterface)(nil).CliPassthroughVolumeGet), arg0, arg1)
}

// CliPassthroughVolumePatch mocks base method.
func (m *MockRestClientInterface) CliPassthroughVolumePatch(arg0 context.Context, arg1, arg2 string) (*api.CliPassthroughResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CliPassthroughVolumePatch", arg0, arg1, arg2)
	ret0, _ := ret[0].(*api.CliPassthroughResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CliPassthroughVolumePatch indicates an expected call of CliPassthroughVolumePatch.
func (mr *MockRestClientInterfaceMockRecorder) CliPassthroughVolumePatch(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CliPassthroughVolumePatch", reflect.TypeOf((*MockRestClientInterface)(nil).CliPassthroughVolumePatch), arg0, arg1, arg2)
}

// ClientConfig mocks base method.
func (m *MockRestClientInterface) ClientConfig() api.ClientConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientConfig")
	ret0, _ := ret[0].(api.ClientConfig)
	return ret0
}

// ClientConfig indicates an expected call of ClientConfig.
func (mr *MockRestClientInterfaceMockRecorder) ClientConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientConfig", reflect.TypeOf((*MockRestClientInterface)(nil).ClientConfig))
}

// ClusterInfo mocks base method.
func (m *MockRestClientInterface) ClusterInfo(arg0 context.Context) (*cluster.ClusterGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterInfo", arg0)
	ret0, _ := ret[0].(*cluster.ClusterGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterInfo indicates an expected call of ClusterInfo.
func (mr *MockRestClientInterfaceMockRecorder) ClusterInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterInfo", reflect.TypeOf((*MockRestClientInterface)(nil).ClusterInfo), arg0)
}

// EmsAutosupportLog mocks base method.
func (m *MockRestClientInterface) EmsAutosupportLog(arg0 context.Context, arg1 string, arg2 bool, arg3, arg4, arg5 string, arg6 int, arg7 string, arg8 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmsAutosupportLog", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
	ret0, _ := ret[0].(error)
	return ret0
}

// EmsAutosupportLog indicates an expected call of EmsAutosupportLog.
func (mr *MockRestClientInterfaceMockRecorder) EmsAutosupportLog(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmsAutosupportLog", reflect.TypeOf((*MockRestClientInterface)(nil).EmsAutosupportLog), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
}

// ExportPolicyCreate mocks base method.
func (m *MockRestClientInterface) ExportPolicyCreate(arg0 context.Context, arg1 string) (*n_a_s.ExportPolicyCreateCreated, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportPolicyCreate", arg0, arg1)
	ret0, _ := ret[0].(*n_a_s.ExportPolicyCreateCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportPolicyCreate indicates an expected call of ExportPolicyCreate.
func (mr *MockRestClientInterfaceMockRecorder) ExportPolicyCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportPolicyCreate", reflect.TypeOf((*MockRestClientInterface)(nil).ExportPolicyCreate), arg0, arg1)
}

// ExportPolicyDestroy mocks base method.
func (m *MockRestClientInterface) ExportPolicyDestroy(arg0 context.Context, arg1 string) (*n_a_s.ExportPolicyDeleteOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportPolicyDestroy", arg0, arg1)
	ret0, _ := ret[0].(*n_a_s.ExportPolicyDeleteOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportPolicyDestroy indicates an expected call of ExportPolicyDestroy.
func (mr *MockRestClientInterfaceMockRecorder) ExportPolicyDestroy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportPolicyDestroy", reflect.TypeOf((*MockRestClientInterface)(nil).ExportPolicyDestroy), arg0, arg1)
}

// ExportPolicyGet mocks base method.
func (m *MockRestClientInterface) ExportPolicyGet(arg0 context.Context, arg1 int64) (*n_a_s.ExportPolicyGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportPolicyGet", arg0, arg1)
	ret0, _ := ret[0].(*n_a_s.ExportPolicyGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportPolicyGet indicates an expected call of ExportPolicyGet.
func (mr *MockRestClientInterfaceMockRecorder) ExportPolicyGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportPolicyGet", reflect.TypeOf((*MockRestClientInterface)(nil).ExportPolicyGet), arg0, arg1)
}

// ExportPolicyGetByName mocks base method.
func (m *MockRestClientInterface) ExportPolicyGetByName(arg0 context.Context, arg1 string) (*models.ExportPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportPolicyGetByName", arg0, arg1)
	ret0, _ := ret[0].(*models.ExportPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportPolicyGetByName indicates an expected call of ExportPolicyGetByName.
func (mr *MockRestClientInterfaceMockRecorder) ExportPolicyGetByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportPolicyGetByName", reflect.TypeOf((*MockRestClientInterface)(nil).ExportPolicyGetByName), arg0, arg1)
}

// ExportPolicyList mocks base method.
func (m *MockRestClientInterface) ExportPolicyList(arg0 context.Context, arg1 string) (*n_a_s.ExportPolicyCollectionGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportPolicyList", arg0, arg1)
	ret0, _ := ret[0].(*n_a_s.ExportPolicyCollectionGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportPolicyList indicates an expected call of ExportPolicyList.
func (mr *MockRestClientInterfaceMockRecorder) ExportPolicyList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportPolicyList", reflect.TypeOf((*MockRestClientInterface)(nil).ExportPolicyList), arg0, arg1)
}

// ExportRuleCreate mocks base method.
func (m *MockRestClientInterface) ExportRuleCreate(arg0 context.Context, arg1, arg2 string, arg3, arg4, arg5, arg6 []string) (*n_a_s.ExportRuleCreateCreated, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportRuleCreate", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(*n_a_s.ExportRuleCreateCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportRuleCreate indicates an expected call of ExportRuleCreate.
func (mr *MockRestClientInterfaceMockRecorder) ExportRuleCreate(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportRuleCreate", reflect.TypeOf((*MockRestClientInterface)(nil).ExportRuleCreate), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// ExportRuleDestroy mocks base method.
func (m *MockRestClientInterface) ExportRuleDestroy(arg0 context.Context, arg1 string, arg2 int) (*n_a_s.ExportRuleDeleteOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportRuleDestroy", arg0, arg1, arg2)
	ret0, _ := ret[0].(*n_a_s.ExportRuleDeleteOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportRuleDestroy indicates an expected call of ExportRuleDestroy.
func (mr *MockRestClientInterfaceMockRecorder) ExportRuleDestroy(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportRuleDestroy", reflect.TypeOf((*MockRestClientInterface)(nil).ExportRuleDestroy), arg0, arg1, arg2)
}

// ExportRuleList mocks base method.
func (m *MockRestClientInterface) ExportRuleList(arg0 context.Context, arg1 string) (*n_a_s.ExportRuleCollectionGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportRuleList", arg0, arg1)
	ret0, _ := ret[0].(*n_a_s.ExportRuleCollectionGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportRuleList indicates an expected call of ExportRuleList.
func (mr *MockRestClientInterfaceMockRecorder) ExportRuleList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportRuleList", reflect.TypeOf((*MockRestClientInterface)(nil).ExportRuleList), arg0, arg1)
}

// FlexGroupCreate mocks base method.
func (m *MockRestClientInterface) FlexGroupCreate(arg0 context.Context, arg1 string, arg2 int, arg3 []string, arg4, arg5, arg6, arg7, arg8, arg9, arg10 string, arg11 api.QosPolicyGroup, arg12 *bool, arg13 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexGroupCreate", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlexGroupCreate indicates an expected call of FlexGroupCreate.
func (mr *MockRestClientInterfaceMockRecorder) FlexGroupCreate(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexGroupCreate", reflect.TypeOf((*MockRestClientInterface)(nil).FlexGroupCreate), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)
}

// FlexGroupDestroy mocks base method.
func (m *MockRestClientInterface) FlexGroupDestroy(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexGroupDestroy", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlexGroupDestroy indicates an expected call of FlexGroupDestroy.
func (mr *MockRestClientInterfaceMockRecorder) FlexGroupDestroy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexGroupDestroy", reflect.TypeOf((*MockRestClientInterface)(nil).FlexGroupDestroy), arg0, arg1)
}

// FlexGroupExists mocks base method.
func (m *MockRestClientInterface) FlexGroupExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexGroupExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlexGroupExists indicates an expected call of FlexGroupExists.
func (mr *MockRestClientInterfaceMockRecorder) FlexGroupExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexGroupExists", reflect.TypeOf((*MockRestClientInterface)(nil).FlexGroupExists), arg0, arg1)
}

// FlexGroupGetAll mocks base method.
func (m *MockRestClientInterface) FlexGroupGetAll(arg0 context.Context, arg1 string) (*storage.VolumeCollectionGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexGroupGetAll", arg0, arg1)
	ret0, _ := ret[0].(*storage.VolumeCollectionGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlexGroupGetAll indicates an expected call of FlexGroupGetAll.
func (mr *MockRestClientInterfaceMockRecorder) FlexGroupGetAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexGroupGetAll", reflect.TypeOf((*MockRestClientInterface)(nil).FlexGroupGetAll), arg0, arg1)
}

// FlexGroupGetByName mocks base method.
func (m *MockRestClientInterface) FlexGroupGetByName(arg0 context.Context, arg1 string) (*models.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexGroupGetByName", arg0, arg1)
	ret0, _ := ret[0].(*models.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlexGroupGetByName indicates an expected call of FlexGroupGetByName.
func (mr *MockRestClientInterfaceMockRecorder) FlexGroupGetByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexGroupGetByName", reflect.TypeOf((*MockRestClientInterface)(nil).FlexGroupGetByName), arg0, arg1)
}

// FlexGroupModifyUnixPermissions mocks base method.
func (m *MockRestClientInterface) FlexGroupModifyUnixPermissions(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexGroupModifyUnixPermissions", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlexGroupModifyUnixPermissions indicates an expected call of FlexGroupModifyUnixPermissions.
func (mr *MockRestClientInterfaceMockRecorder) FlexGroupModifyUnixPermissions(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexGroupModifyUnixPermissions", reflect.TypeOf((*MockRestClientInterface)(nil).FlexGroupModifyUnixPermissions), arg0, arg1, arg2)
}

// FlexGroupMount mocks base method.
func (m *MockRestClientInterface) FlexGroupMount(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexGroupMount", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlexGroupMount indicates an expected call of FlexGroupMount.
func (mr *MockRestClientInterfaceMockRecorder) FlexGroupMount(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexGroupMount", reflect.TypeOf((*MockRestClientInterface)(nil).FlexGroupMount), arg0, arg1, arg2)
}

// FlexGroupSetComment mocks base method.
func (m *MockRestClientInterface) FlexGroupSetComment(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexGroupSetComment", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlexGroupSetComment indicates an expected call of FlexGroupSetComment.
func (mr *MockRestClientInterfaceMockRecorder) FlexGroupSetComment(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexGroupSetComment", reflect.TypeOf((*MockRestClientInterface)(nil).FlexGroupSetComment), arg0, arg1, arg2)
}

// FlexGroupSetSize mocks base method.
func (m *MockRestClientInterface) FlexGroupSetSize(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexGroupSetSize", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlexGroupSetSize indicates an expected call of FlexGroupSetSize.
func (mr *MockRestClientInterfaceMockRecorder) FlexGroupSetSize(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexGroupSetSize", reflect.TypeOf((*MockRestClientInterface)(nil).FlexGroupSetSize), arg0, arg1, arg2)
}

// FlexGroupSize mocks base method.
func (m *MockRestClientInterface) FlexGroupSize(arg0 context.Context, arg1 string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexGroupSize", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlexGroupSize indicates an expected call of FlexGroupSize.
func (mr *MockRestClientInterfaceMockRecorder) FlexGroupSize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexGroupSize", reflect.TypeOf((*MockRestClientInterface)(nil).FlexGroupSize), arg0, arg1)
}

// FlexGroupUsedSize mocks base method.
func (m *MockRestClientInterface) FlexGroupUsedSize(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexGroupUsedSize", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlexGroupUsedSize indicates an expected call of FlexGroupUsedSize.
func (mr *MockRestClientInterfaceMockRecorder) FlexGroupUsedSize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexGroupUsedSize", reflect.TypeOf((*MockRestClientInterface)(nil).FlexGroupUsedSize), arg0, arg1)
}

// FlexGroupVolumeDisableSnapshotDirectoryAccess mocks base method.
func (m *MockRestClientInterface) FlexGroupVolumeDisableSnapshotDirectoryAccess(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexGroupVolumeDisableSnapshotDirectoryAccess", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlexGroupVolumeDisableSnapshotDirectoryAccess indicates an expected call of FlexGroupVolumeDisableSnapshotDirectoryAccess.
func (mr *MockRestClientInterfaceMockRecorder) FlexGroupVolumeDisableSnapshotDirectoryAccess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexGroupVolumeDisableSnapshotDirectoryAccess", reflect.TypeOf((*MockRestClientInterface)(nil).FlexGroupVolumeDisableSnapshotDirectoryAccess), arg0, arg1)
}

// FlexgroupCloneSplitStart mocks base method.
func (m *MockRestClientInterface) FlexgroupCloneSplitStart(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexgroupCloneSplitStart", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlexgroupCloneSplitStart indicates an expected call of FlexgroupCloneSplitStart.
func (mr *MockRestClientInterfaceMockRecorder) FlexgroupCloneSplitStart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexgroupCloneSplitStart", reflect.TypeOf((*MockRestClientInterface)(nil).FlexgroupCloneSplitStart), arg0, arg1)
}

// FlexgroupModifyExportPolicy mocks base method.
func (m *MockRestClientInterface) FlexgroupModifyExportPolicy(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexgroupModifyExportPolicy", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlexgroupModifyExportPolicy indicates an expected call of FlexgroupModifyExportPolicy.
func (mr *MockRestClientInterfaceMockRecorder) FlexgroupModifyExportPolicy(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexgroupModifyExportPolicy", reflect.TypeOf((*MockRestClientInterface)(nil).FlexgroupModifyExportPolicy), arg0, arg1, arg2)
}

// FlexgroupSetQosPolicyGroupName mocks base method.
func (m *MockRestClientInterface) FlexgroupSetQosPolicyGroupName(arg0 context.Context, arg1 string, arg2 api.QosPolicyGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexgroupSetQosPolicyGroupName", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlexgroupSetQosPolicyGroupName indicates an expected call of FlexgroupSetQosPolicyGroupName.
func (mr *MockRestClientInterfaceMockRecorder) FlexgroupSetQosPolicyGroupName(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexgroupSetQosPolicyGroupName", reflect.TypeOf((*MockRestClientInterface)(nil).FlexgroupSetQosPolicyGroupName), arg0, arg1, arg2)
}

// FlexgroupUnmount mocks base method.
func (m *MockRestClientInterface) FlexgroupUnmount(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexgroupUnmount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlexgroupUnmount indicates an expected call of FlexgroupUnmount.
func (mr *MockRestClientInterfaceMockRecorder) FlexgroupUnmount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexgroupUnmount", reflect.TypeOf((*MockRestClientInterface)(nil).FlexgroupUnmount), arg0, arg1)
}

// IgroupAdd mocks base method.
func (m *MockRestClientInterface) IgroupAdd(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IgroupAdd", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// IgroupAdd indicates an expected call of IgroupAdd.
func (mr *MockRestClientInterfaceMockRecorder) IgroupAdd(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IgroupAdd", reflect.TypeOf((*MockRestClientInterface)(nil).IgroupAdd), arg0, arg1, arg2)
}

// IgroupCreate mocks base method.
func (m *MockRestClientInterface) IgroupCreate(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IgroupCreate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// IgroupCreate indicates an expected call of IgroupCreate.
func (mr *MockRestClientInterfaceMockRecorder) IgroupCreate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IgroupCreate", reflect.TypeOf((*MockRestClientInterface)(nil).IgroupCreate), arg0, arg1, arg2, arg3)
}

// IgroupDestroy mocks base method.
func (m *MockRestClientInterface) IgroupDestroy(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IgroupDestroy", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// IgroupDestroy indicates an expected call of IgroupDestroy.
func (mr *MockRestClientInterfaceMockRecorder) IgroupDestroy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IgroupDestroy", reflect.TypeOf((*MockRestClientInterface)(nil).IgroupDestroy), arg0, arg1)
}

// IgroupGet mocks base method.
func (m *MockRestClientInterface) IgroupGet(arg0 context.Context, arg1 string) (*s_a_n.IgroupGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IgroupGet", arg0, arg1)
	ret0, _ := ret[0].(*s_a_n.IgroupGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IgroupGet indicates an expected call of IgroupGet.
func (mr *MockRestClientInterfaceMockRecorder) IgroupGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IgroupGet", reflect.TypeOf((*MockRestClientInterface)(nil).IgroupGet), arg0, arg1)
}

// IgroupGetByName mocks base method.
func (m *MockRestClientInterface) IgroupGetByName(arg0 context.Context, arg1 string) (*models.Igroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IgroupGetByName", arg0, arg1)
	ret0, _ := ret[0].(*models.Igroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IgroupGetByName indicates an expected call of IgroupGetByName.
func (mr *MockRestClientInterfaceMockRecorder) IgroupGetByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IgroupGetByName", reflect.TypeOf((*MockRestClientInterface)(nil).IgroupGetByName), arg0, arg1)
}

// IgroupList mocks base method.
func (m *MockRestClientInterface) IgroupList(arg0 context.Context, arg1 string) (*s_a_n.IgroupCollectionGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IgroupList", arg0, arg1)
	ret0, _ := ret[0].(*s_a_n.IgroupCollectionGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IgroupList indicates an expected call of IgroupList.
func (mr *MockRestClientInterfaceMockRecorder) IgroupList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IgroupList", reflect.TypeOf((*MockRestClientInterface)(nil).IgroupList), arg0, arg1)
}

// IgroupRemove mocks base method.
func (m *MockRestClientInterface) IgroupRemove(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IgroupRemove", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// IgroupRemove indicates an expected call of IgroupRemove.
func (mr *MockRestClientInterfaceMockRecorder) IgroupRemove(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IgroupRemove", reflect.TypeOf((*MockRestClientInterface)(nil).IgroupRemove), arg0, arg1, arg2)
}

// IsJobFinished mocks base method.
func (m *MockRestClientInterface) IsJobFinished(arg0 context.Context, arg1 *models.JobLinkResponse) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsJobFinished", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsJobFinished indicates an expected call of IsJobFinished.
func (mr *MockRestClientInterfaceMockRecorder) IsJobFinished(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsJobFinished", reflect.TypeOf((*MockRestClientInterface)(nil).IsJobFinished), arg0, arg1)
}

// IscsiInitiatorGetDefaultAuth mocks base method.
func (m *MockRestClientInterface) IscsiInitiatorGetDefaultAuth(arg0 context.Context) (*s_a_n.IscsiCredentialsCollectionGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IscsiInitiatorGetDefaultAuth", arg0)
	ret0, _ := ret[0].(*s_a_n.IscsiCredentialsCollectionGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IscsiInitiatorGetDefaultAuth indicates an expected call of IscsiInitiatorGetDefaultAuth.
func (mr *MockRestClientInterfaceMockRecorder) IscsiInitiatorGetDefaultAuth(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IscsiInitiatorGetDefaultAuth", reflect.TypeOf((*MockRestClientInterface)(nil).IscsiInitiatorGetDefaultAuth), arg0)
}

// IscsiInitiatorSetDefaultAuth mocks base method.
func (m *MockRestClientInterface) IscsiInitiatorSetDefaultAuth(arg0 context.Context, arg1, arg2, arg3, arg4, arg5 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IscsiInitiatorSetDefaultAuth", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// IscsiInitiatorSetDefaultAuth indicates an expected call of IscsiInitiatorSetDefaultAuth.
func (mr *MockRestClientInterfaceMockRecorder) IscsiInitiatorSetDefaultAuth(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IscsiInitiatorSetDefaultAuth", reflect.TypeOf((*MockRestClientInterface)(nil).IscsiInitiatorSetDefaultAuth), arg0, arg1, arg2, arg3, arg4, arg5)
}

// IscsiInterfaceGet mocks base method.
func (m *MockRestClientInterface) IscsiInterfaceGet(arg0 context.Context, arg1 string) (*s_a_n.IscsiServiceCollectionGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IscsiInterfaceGet", arg0, arg1)
	ret0, _ := ret[0].(*s_a_n.IscsiServiceCollectionGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IscsiInterfaceGet indicates an expected call of IscsiInterfaceGet.
func (mr *MockRestClientInterfaceMockRecorder) IscsiInterfaceGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IscsiInterfaceGet", reflect.TypeOf((*MockRestClientInterface)(nil).IscsiInterfaceGet), arg0, arg1)
}

// IscsiNodeGetName mocks base method.
func (m *MockRestClientInterface) IscsiNodeGetName(arg0 context.Context) (*s_a_n.IscsiServiceGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IscsiNodeGetName", arg0)
	ret0, _ := ret[0].(*s_a_n.IscsiServiceGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IscsiNodeGetName indicates an expected call of IscsiNodeGetName.
func (mr *MockRestClientInterfaceMockRecorder) IscsiNodeGetName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IscsiNodeGetName", reflect.TypeOf((*MockRestClientInterface)(nil).IscsiNodeGetName), arg0)
}

// JobGet mocks base method.
func (m *MockRestClientInterface) JobGet(arg0 context.Context, arg1 string) (*cluster.JobGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JobGet", arg0, arg1)
	ret0, _ := ret[0].(*cluster.JobGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JobGet indicates an expected call of JobGet.
func (mr *MockRestClientInterfaceMockRecorder) JobGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JobGet", reflect.TypeOf((*MockRestClientInterface)(nil).JobGet), arg0, arg1)
}

// LunCreate mocks base method.
func (m *MockRestClientInterface) LunCreate(arg0 context.Context, arg1 string, arg2 int64, arg3 string, arg4 api.QosPolicyGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunCreate", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// LunCreate indicates an expected call of LunCreate.
func (mr *MockRestClientInterfaceMockRecorder) LunCreate(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunCreate", reflect.TypeOf((*MockRestClientInterface)(nil).LunCreate), arg0, arg1, arg2, arg3, arg4)
}

// LunDelete mocks base method.
func (m *MockRestClientInterface) LunDelete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunDelete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LunDelete indicates an expected call of LunDelete.
func (mr *MockRestClientInterfaceMockRecorder) LunDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunDelete", reflect.TypeOf((*MockRestClientInterface)(nil).LunDelete), arg0, arg1)
}

// LunGet mocks base method.
func (m *MockRestClientInterface) LunGet(arg0 context.Context, arg1 string) (*s_a_n.LunGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunGet", arg0, arg1)
	ret0, _ := ret[0].(*s_a_n.LunGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunGet indicates an expected call of LunGet.
func (mr *MockRestClientInterfaceMockRecorder) LunGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunGet", reflect.TypeOf((*MockRestClientInterface)(nil).LunGet), arg0, arg1)
}

// LunGetByName mocks base method.
func (m *MockRestClientInterface) LunGetByName(arg0 context.Context, arg1 string) (*models.Lun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunGetByName", arg0, arg1)
	ret0, _ := ret[0].(*models.Lun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunGetByName indicates an expected call of LunGetByName.
func (mr *MockRestClientInterfaceMockRecorder) LunGetByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunGetByName", reflect.TypeOf((*MockRestClientInterface)(nil).LunGetByName), arg0, arg1)
}

// LunGetComment mocks base method.
func (m *MockRestClientInterface) LunGetComment(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunGetComment", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunGetComment indicates an expected call of LunGetComment.
func (mr *MockRestClientInterfaceMockRecorder) LunGetComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunGetComment", reflect.TypeOf((*MockRestClientInterface)(nil).LunGetComment), arg0, arg1)
}

// LunList mocks base method.
func (m *MockRestClientInterface) LunList(arg0 context.Context, arg1 string) (*s_a_n.LunCollectionGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunList", arg0, arg1)
	ret0, _ := ret[0].(*s_a_n.LunCollectionGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunList indicates an expected call of LunList.
func (mr *MockRestClientInterfaceMockRecorder) LunList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunList", reflect.TypeOf((*MockRestClientInterface)(nil).LunList), arg0, arg1)
}

// LunMap mocks base method.
func (m *MockRestClientInterface) LunMap(arg0 context.Context, arg1, arg2 string, arg3 int) (*s_a_n.LunMapCreateCreated, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunMap", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*s_a_n.LunMapCreateCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunMap indicates an expected call of LunMap.
func (mr *MockRestClientInterfaceMockRecorder) LunMap(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunMap", reflect.TypeOf((*MockRestClientInterface)(nil).LunMap), arg0, arg1, arg2, arg3)
}

// LunMapInfo mocks base method.
func (m *MockRestClientInterface) LunMapInfo(arg0 context.Context, arg1, arg2 string) (*s_a_n.LunMapCollectionGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunMapInfo", arg0, arg1, arg2)
	ret0, _ := ret[0].(*s_a_n.LunMapCollectionGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunMapInfo indicates an expected call of LunMapInfo.
func (mr *MockRestClientInterfaceMockRecorder) LunMapInfo(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunMapInfo", reflect.TypeOf((*MockRestClientInterface)(nil).LunMapInfo), arg0, arg1, arg2)
}

// LunRename mocks base method.
func (m *MockRestClientInterface) LunRename(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunRename", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// LunRename indicates an expected call of LunRename.
func (mr *MockRestClientInterfaceMockRecorder) LunRename(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunRename", reflect.TypeOf((*MockRestClientInterface)(nil).LunRename), arg0, arg1, arg2)
}

// LunSetComment mocks base method.
func (m *MockRestClientInterface) LunSetComment(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunSetComment", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// LunSetComment indicates an expected call of LunSetComment.
func (mr *MockRestClientInterfaceMockRecorder) LunSetComment(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunSetComment", reflect.TypeOf((*MockRestClientInterface)(nil).LunSetComment), arg0, arg1, arg2)
}

// LunSetQosPolicyGroup mocks base method.
func (m *MockRestClientInterface) LunSetQosPolicyGroup(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunSetQosPolicyGroup", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// LunSetQosPolicyGroup indicates an expected call of LunSetQosPolicyGroup.
func (mr *MockRestClientInterfaceMockRecorder) LunSetQosPolicyGroup(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunSetQosPolicyGroup", reflect.TypeOf((*MockRestClientInterface)(nil).LunSetQosPolicyGroup), arg0, arg1, arg2)
}

// LunSetSize mocks base method.
func (m *MockRestClientInterface) LunSetSize(arg0 context.Context, arg1, arg2 string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunSetSize", arg0, arg1, arg2)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunSetSize indicates an expected call of LunSetSize.
func (mr *MockRestClientInterfaceMockRecorder) LunSetSize(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunSetSize", reflect.TypeOf((*MockRestClientInterface)(nil).LunSetSize), arg0, arg1, arg2)
}

// LunSize mocks base method.
func (m *MockRestClientInterface) LunSize(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunSize", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunSize indicates an expected call of LunSize.
func (mr *MockRestClientInterfaceMockRecorder) LunSize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunSize", reflect.TypeOf((*MockRestClientInterface)(nil).LunSize), arg0, arg1)
}

// LunUnmap mocks base method.
func (m *MockRestClientInterface) LunUnmap(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunUnmap", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// LunUnmap indicates an expected call of LunUnmap.
func (mr *MockRestClientInterfaceMockRecorder) LunUnmap(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunUnmap", reflect.TypeOf((*MockRestClientInterface)(nil).LunUnmap), arg0, arg1, arg2)
}

// NetInterfaceGetDataLIFs mocks base method.
func (m *MockRestClientInterface) NetInterfaceGetDataLIFs(arg0 context.Context, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetInterfaceGetDataLIFs", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetInterfaceGetDataLIFs indicates an expected call of NetInterfaceGetDataLIFs.
func (mr *MockRestClientInterfaceMockRecorder) NetInterfaceGetDataLIFs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetInterfaceGetDataLIFs", reflect.TypeOf((*MockRestClientInterface)(nil).NetInterfaceGetDataLIFs), arg0, arg1)
}

// NetworkIPInterfacesList mocks base method.
func (m *MockRestClientInterface) NetworkIPInterfacesList(arg0 context.Context) (*networking.NetworkIPInterfacesGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkIPInterfacesList", arg0)
	ret0, _ := ret[0].(*networking.NetworkIPInterfacesGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkIPInterfacesList indicates an expected call of NetworkIPInterfacesList.
func (mr *MockRestClientInterfaceMockRecorder) NetworkIPInterfacesList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkIPInterfacesList", reflect.TypeOf((*MockRestClientInterface)(nil).NetworkIPInterfacesList), arg0)
}

// NodeList mocks base method.
func (m *MockRestClientInterface) NodeList(arg0 context.Context, arg1 string) (*cluster.NodesGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeList", arg0, arg1)
	ret0, _ := ret[0].(*cluster.NodesGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeList indicates an expected call of NodeList.
func (mr *MockRestClientInterfaceMockRecorder) NodeList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeList", reflect.TypeOf((*MockRestClientInterface)(nil).NodeList), arg0, arg1)
}

// NodeListSerialNumbers mocks base method.
func (m *MockRestClientInterface) NodeListSerialNumbers(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeListSerialNumbers", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeListSerialNumbers indicates an expected call of NodeListSerialNumbers.
func (mr *MockRestClientInterfaceMockRecorder) NodeListSerialNumbers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeListSerialNumbers", reflect.TypeOf((*MockRestClientInterface)(nil).NodeListSerialNumbers), arg0)
}

// PollJobStatus mocks base method.
func (m *MockRestClientInterface) PollJobStatus(arg0 context.Context, arg1 *models.JobLinkResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PollJobStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PollJobStatus indicates an expected call of PollJobStatus.
func (mr *MockRestClientInterfaceMockRecorder) PollJobStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PollJobStatus", reflect.TypeOf((*MockRestClientInterface)(nil).PollJobStatus), arg0, arg1)
}

// QtreeCount mocks base method.
func (m *MockRestClientInterface) QtreeCount(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QtreeCount", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QtreeCount indicates an expected call of QtreeCount.
func (mr *MockRestClientInterfaceMockRecorder) QtreeCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QtreeCount", reflect.TypeOf((*MockRestClientInterface)(nil).QtreeCount), arg0, arg1)
}

// QtreeCreate mocks base method.
func (m *MockRestClientInterface) QtreeCreate(arg0 context.Context, arg1, arg2, arg3, arg4, arg5, arg6 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QtreeCreate", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(error)
	return ret0
}

// QtreeCreate indicates an expected call of QtreeCreate.
func (mr *MockRestClientInterfaceMockRecorder) QtreeCreate(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QtreeCreate", reflect.TypeOf((*MockRestClientInterface)(nil).QtreeCreate), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// QtreeDestroyAsync mocks base method.
func (m *MockRestClientInterface) QtreeDestroyAsync(arg0 context.Context, arg1 string, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QtreeDestroyAsync", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// QtreeDestroyAsync indicates an expected call of QtreeDestroyAsync.
func (mr *MockRestClientInterfaceMockRecorder) QtreeDestroyAsync(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QtreeDestroyAsync", reflect.TypeOf((*MockRestClientInterface)(nil).QtreeDestroyAsync), arg0, arg1, arg2)
}

// QtreeExists mocks base method.
func (m *MockRestClientInterface) QtreeExists(arg0 context.Context, arg1, arg2 string) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QtreeExists", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// QtreeExists indicates an expected call of QtreeExists.
func (mr *MockRestClientInterfaceMockRecorder) QtreeExists(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QtreeExists", reflect.TypeOf((*MockRestClientInterface)(nil).QtreeExists), arg0, arg1, arg2)
}

// QtreeGet mocks base method.
func (m *MockRestClientInterface) QtreeGet(arg0 context.Context, arg1, arg2 string) (*models.Qtree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QtreeGet", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Qtree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QtreeGet indicates an expected call of QtreeGet.
func (mr *MockRestClientInterfaceMockRecorder) QtreeGet(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QtreeGet", reflect.TypeOf((*MockRestClientInterface)(nil).QtreeGet), arg0, arg1, arg2)
}

// QtreeGetAll mocks base method.
func (m *MockRestClientInterface) QtreeGetAll(arg0 context.Context, arg1 string) (*storage.QtreeCollectionGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QtreeGetAll", arg0, arg1)
	ret0, _ := ret[0].(*storage.QtreeCollectionGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QtreeGetAll indicates an expected call of QtreeGetAll.
func (mr *MockRestClientInterfaceMockRecorder) QtreeGetAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QtreeGetAll", reflect.TypeOf((*MockRestClientInterface)(nil).QtreeGetAll), arg0, arg1)
}

// QtreeGetByName mocks base method.
func (m *MockRestClientInterface) QtreeGetByName(arg0 context.Context, arg1, arg2 string) (*models.Qtree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QtreeGetByName", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Qtree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QtreeGetByName indicates an expected call of QtreeGetByName.
func (mr *MockRestClientInterfaceMockRecorder) QtreeGetByName(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QtreeGetByName", reflect.TypeOf((*MockRestClientInterface)(nil).QtreeGetByName), arg0, arg1, arg2)
}

// QtreeGetByPath mocks base method.
func (m *MockRestClientInterface) QtreeGetByPath(arg0 context.Context, arg1 string) (*models.Qtree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QtreeGetByPath", arg0, arg1)
	ret0, _ := ret[0].(*models.Qtree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QtreeGetByPath indicates an expected call of QtreeGetByPath.
func (mr *MockRestClientInterfaceMockRecorder) QtreeGetByPath(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QtreeGetByPath", reflect.TypeOf((*MockRestClientInterface)(nil).QtreeGetByPath), arg0, arg1)
}

// QtreeList mocks base method.
func (m *MockRestClientInterface) QtreeList(arg0 context.Context, arg1, arg2 string) (*storage.QtreeCollectionGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QtreeList", arg0, arg1, arg2)
	ret0, _ := ret[0].(*storage.QtreeCollectionGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QtreeList indicates an expected call of QtreeList.
func (mr *MockRestClientInterfaceMockRecorder) QtreeList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QtreeList", reflect.TypeOf((*MockRestClientInterface)(nil).QtreeList), arg0, arg1, arg2)
}

// QtreeModifyExportPolicy mocks base method.
func (m *MockRestClientInterface) QtreeModifyExportPolicy(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QtreeModifyExportPolicy", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// QtreeModifyExportPolicy indicates an expected call of QtreeModifyExportPolicy.
func (mr *MockRestClientInterfaceMockRecorder) QtreeModifyExportPolicy(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QtreeModifyExportPolicy", reflect.TypeOf((*MockRestClientInterface)(nil).QtreeModifyExportPolicy), arg0, arg1, arg2, arg3)
}

// QtreeRename mocks base method.
func (m *MockRestClientInterface) QtreeRename(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QtreeRename", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// QtreeRename indicates an expected call of QtreeRename.
func (mr *MockRestClientInterfaceMockRecorder) QtreeRename(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QtreeRename", reflect.TypeOf((*MockRestClientInterface)(nil).QtreeRename), arg0, arg1, arg2)
}

// QuotaAddEntry mocks base method.
func (m *MockRestClientInterface) QuotaAddEntry(arg0 context.Context, arg1, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuotaAddEntry", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// QuotaAddEntry indicates an expected call of QuotaAddEntry.
func (mr *MockRestClientInterfaceMockRecorder) QuotaAddEntry(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuotaAddEntry", reflect.TypeOf((*MockRestClientInterface)(nil).QuotaAddEntry), arg0, arg1, arg2, arg3, arg4)
}

// QuotaEntryList mocks base method.
func (m *MockRestClientInterface) QuotaEntryList(arg0 context.Context, arg1 string) (*storage.QuotaRuleCollectionGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuotaEntryList", arg0, arg1)
	ret0, _ := ret[0].(*storage.QuotaRuleCollectionGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuotaEntryList indicates an expected call of QuotaEntryList.
func (mr *MockRestClientInterfaceMockRecorder) QuotaEntryList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuotaEntryList", reflect.TypeOf((*MockRestClientInterface)(nil).QuotaEntryList), arg0, arg1)
}

// QuotaGetEntry mocks base method.
func (m *MockRestClientInterface) QuotaGetEntry(arg0 context.Context, arg1, arg2, arg3 string) (*models.QuotaRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuotaGetEntry", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*models.QuotaRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuotaGetEntry indicates an expected call of QuotaGetEntry.
func (mr *MockRestClientInterfaceMockRecorder) QuotaGetEntry(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuotaGetEntry", reflect.TypeOf((*MockRestClientInterface)(nil).QuotaGetEntry), arg0, arg1, arg2, arg3)
}

// QuotaOff mocks base method.
func (m *MockRestClientInterface) QuotaOff(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuotaOff", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// QuotaOff indicates an expected call of QuotaOff.
func (mr *MockRestClientInterfaceMockRecorder) QuotaOff(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuotaOff", reflect.TypeOf((*MockRestClientInterface)(nil).QuotaOff), arg0, arg1)
}

// QuotaOn mocks base method.
func (m *MockRestClientInterface) QuotaOn(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuotaOn", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// QuotaOn indicates an expected call of QuotaOn.
func (mr *MockRestClientInterfaceMockRecorder) QuotaOn(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuotaOn", reflect.TypeOf((*MockRestClientInterface)(nil).QuotaOn), arg0, arg1)
}

// QuotaSetEntry mocks base method.
func (m *MockRestClientInterface) QuotaSetEntry(arg0 context.Context, arg1, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuotaSetEntry", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// QuotaSetEntry indicates an expected call of QuotaSetEntry.
func (mr *MockRestClientInterfaceMockRecorder) QuotaSetEntry(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuotaSetEntry", reflect.TypeOf((*MockRestClientInterface)(nil).QuotaSetEntry), arg0, arg1, arg2, arg3, arg4)
}

// SVMGetAggregateNames mocks base method.
func (m *MockRestClientInterface) SVMGetAggregateNames(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SVMGetAggregateNames", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SVMGetAggregateNames indicates an expected call of SVMGetAggregateNames.
func (mr *MockRestClientInterfaceMockRecorder) SVMGetAggregateNames(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SVMGetAggregateNames", reflect.TypeOf((*MockRestClientInterface)(nil).SVMGetAggregateNames), arg0)
}

// SVMName mocks base method.
func (m *MockRestClientInterface) SVMName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SVMName")
	ret0, _ := ret[0].(string)
	return ret0
}

// SVMName indicates an expected call of SVMName.
func (mr *MockRestClientInterfaceMockRecorder) SVMName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SVMName", reflect.TypeOf((*MockRestClientInterface)(nil).SVMName))
}

// SVMUUID mocks base method.
func (m *MockRestClientInterface) SVMUUID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SVMUUID")
	ret0, _ := ret[0].(string)
	return ret0
}

// SVMUUID indicates an expected call of SVMUUID.
func (mr *MockRestClientInterfaceMockRecorder) SVMUUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SVMUUID", reflect.TypeOf((*MockRestClientInterface)(nil).SVMUUID))
}

// SetSVMName mocks base method.
func (m *MockRestClientInterface) SetSVMName(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSVMName", arg0)
}

// SetSVMName indicates an expected call of SetSVMName.
func (mr *MockRestClientInterfaceMockRecorder) SetSVMName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSVMName", reflect.TypeOf((*MockRestClientInterface)(nil).SetSVMName), arg0)
}

// SetSVMUUID mocks base method.
func (m *MockRestClientInterface) SetSVMUUID(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSVMUUID", arg0)
}

// SetSVMUUID indicates an expected call of SetSVMUUID.
func (mr *MockRestClientInterfaceMockRecorder) SetSVMUUID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSVMUUID", reflect.TypeOf((*MockRestClientInterface)(nil).SetSVMUUID), arg0)
}

// SnapshotCreate mocks base method.
func (m *MockRestClientInterface) SnapshotCreate(arg0 context.Context, arg1, arg2 string) (*storage.SnapshotCreateAccepted, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotCreate", arg0, arg1, arg2)
	ret0, _ := ret[0].(*storage.SnapshotCreateAccepted)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapshotCreate indicates an expected call of SnapshotCreate.
func (mr *MockRestClientInterfaceMockRecorder) SnapshotCreate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotCreate", reflect.TypeOf((*MockRestClientInterface)(nil).SnapshotCreate), arg0, arg1, arg2)
}

// SnapshotCreateAndWait mocks base method.
func (m *MockRestClientInterface) SnapshotCreateAndWait(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotCreateAndWait", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SnapshotCreateAndWait indicates an expected call of SnapshotCreateAndWait.
func (mr *MockRestClientInterfaceMockRecorder) SnapshotCreateAndWait(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotCreateAndWait", reflect.TypeOf((*MockRestClientInterface)(nil).SnapshotCreateAndWait), arg0, arg1, arg2)
}

// SnapshotDelete mocks base method.
func (m *MockRestClientInterface) SnapshotDelete(arg0 context.Context, arg1, arg2 string) (*storage.SnapshotDeleteAccepted, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotDelete", arg0, arg1, arg2)
	ret0, _ := ret[0].(*storage.SnapshotDeleteAccepted)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapshotDelete indicates an expected call of SnapshotDelete.
func (mr *MockRestClientInterfaceMockRecorder) SnapshotDelete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotDelete", reflect.TypeOf((*MockRestClientInterface)(nil).SnapshotDelete), arg0, arg1, arg2)
}

// SnapshotGet mocks base method.
func (m *MockRestClientInterface) SnapshotGet(arg0 context.Context, arg1, arg2 string) (*storage.SnapshotGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotGet", arg0, arg1, arg2)
	ret0, _ := ret[0].(*storage.SnapshotGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapshotGet indicates an expected call of SnapshotGet.
func (mr *MockRestClientInterfaceMockRecorder) SnapshotGet(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotGet", reflect.TypeOf((*MockRestClientInterface)(nil).SnapshotGet), arg0, arg1, arg2)
}

// SnapshotGetByName mocks base method.
func (m *MockRestClientInterface) SnapshotGetByName(arg0 context.Context, arg1, arg2 string) (*models.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotGetByName", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapshotGetByName indicates an expected call of SnapshotGetByName.
func (mr *MockRestClientInterfaceMockRecorder) SnapshotGetByName(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotGetByName", reflect.TypeOf((*MockRestClientInterface)(nil).SnapshotGetByName), arg0, arg1, arg2)
}

// SnapshotList mocks base method.
func (m *MockRestClientInterface) SnapshotList(arg0 context.Context, arg1 string) (*storage.SnapshotCollectionGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotList", arg0, arg1)
	ret0, _ := ret[0].(*storage.SnapshotCollectionGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapshotList indicates an expected call of SnapshotList.
func (mr *MockRestClientInterfaceMockRecorder) SnapshotList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotList", reflect.TypeOf((*MockRestClientInterface)(nil).SnapshotList), arg0, arg1)
}

// SnapshotListByName mocks base method.
func (m *MockRestClientInterface) SnapshotListByName(arg0 context.Context, arg1, arg2 string) (*storage.SnapshotCollectionGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotListByName", arg0, arg1, arg2)
	ret0, _ := ret[0].(*storage.SnapshotCollectionGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapshotListByName indicates an expected call of SnapshotListByName.
func (mr *MockRestClientInterfaceMockRecorder) SnapshotListByName(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotListByName", reflect.TypeOf((*MockRestClientInterface)(nil).SnapshotListByName), arg0, arg1, arg2)
}

// SnapshotRestoreFlexgroup mocks base method.
func (m *MockRestClientInterface) SnapshotRestoreFlexgroup(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotRestoreFlexgroup", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SnapshotRestoreFlexgroup indicates an expected call of SnapshotRestoreFlexgroup.
func (mr *MockRestClientInterfaceMockRecorder) SnapshotRestoreFlexgroup(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotRestoreFlexgroup", reflect.TypeOf((*MockRestClientInterface)(nil).SnapshotRestoreFlexgroup), arg0, arg1, arg2)
}

// SnapshotRestoreVolume mocks base method.
func (m *MockRestClientInterface) SnapshotRestoreVolume(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotRestoreVolume", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SnapshotRestoreVolume indicates an expected call of SnapshotRestoreVolume.
func (mr *MockRestClientInterfaceMockRecorder) SnapshotRestoreVolume(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotRestoreVolume", reflect.TypeOf((*MockRestClientInterface)(nil).SnapshotRestoreVolume), arg0, arg1, arg2)
}

// SupportsFeature mocks base method.
func (m *MockRestClientInterface) SupportsFeature(arg0 context.Context, arg1 api.Feature) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportsFeature", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SupportsFeature indicates an expected call of SupportsFeature.
func (mr *MockRestClientInterfaceMockRecorder) SupportsFeature(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportsFeature", reflect.TypeOf((*MockRestClientInterface)(nil).SupportsFeature), arg0, arg1)
}

// SvmGet mocks base method.
func (m *MockRestClientInterface) SvmGet(arg0 context.Context, arg1 string) (*svm.SvmGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SvmGet", arg0, arg1)
	ret0, _ := ret[0].(*svm.SvmGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SvmGet indicates an expected call of SvmGet.
func (mr *MockRestClientInterfaceMockRecorder) SvmGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SvmGet", reflect.TypeOf((*MockRestClientInterface)(nil).SvmGet), arg0, arg1)
}

// SvmGetByName mocks base method.
func (m *MockRestClientInterface) SvmGetByName(arg0 context.Context, arg1 string) (*models.Svm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SvmGetByName", arg0, arg1)
	ret0, _ := ret[0].(*models.Svm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SvmGetByName indicates an expected call of SvmGetByName.
func (mr *MockRestClientInterfaceMockRecorder) SvmGetByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SvmGetByName", reflect.TypeOf((*MockRestClientInterface)(nil).SvmGetByName), arg0, arg1)
}

// SvmList mocks base method.
func (m *MockRestClientInterface) SvmList(arg0 context.Context, arg1 string) (*svm.SvmCollectionGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SvmList", arg0, arg1)
	ret0, _ := ret[0].(*svm.SvmCollectionGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SvmList indicates an expected call of SvmList.
func (mr *MockRestClientInterfaceMockRecorder) SvmList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SvmList", reflect.TypeOf((*MockRestClientInterface)(nil).SvmList), arg0, arg1)
}

// SystemGetOntapVersion mocks base method.
func (m *MockRestClientInterface) SystemGetOntapVersion(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SystemGetOntapVersion", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SystemGetOntapVersion indicates an expected call of SystemGetOntapVersion.
func (mr *MockRestClientInterfaceMockRecorder) SystemGetOntapVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SystemGetOntapVersion", reflect.TypeOf((*MockRestClientInterface)(nil).SystemGetOntapVersion), arg0)
}

// TieringPolicyValue mocks base method.
func (m *MockRestClientInterface) TieringPolicyValue(arg0 context.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TieringPolicyValue", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// TieringPolicyValue indicates an expected call of TieringPolicyValue.
func (mr *MockRestClientInterfaceMockRecorder) TieringPolicyValue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TieringPolicyValue", reflect.TypeOf((*MockRestClientInterface)(nil).TieringPolicyValue), arg0)
}

// VolumeCloneCreate mocks base method.
func (m *MockRestClientInterface) VolumeCloneCreate(arg0 context.Context, arg1, arg2, arg3 string) (*storage.VolumeCreateAccepted, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeCloneCreate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*storage.VolumeCreateAccepted)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeCloneCreate indicates an expected call of VolumeCloneCreate.
func (mr *MockRestClientInterfaceMockRecorder) VolumeCloneCreate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeCloneCreate", reflect.TypeOf((*MockRestClientInterface)(nil).VolumeCloneCreate), arg0, arg1, arg2, arg3)
}

// VolumeCloneCreateAsync mocks base method.
func (m *MockRestClientInterface) VolumeCloneCreateAsync(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeCloneCreateAsync", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeCloneCreateAsync indicates an expected call of VolumeCloneCreateAsync.
func (mr *MockRestClientInterfaceMockRecorder) VolumeCloneCreateAsync(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeCloneCreateAsync", reflect.TypeOf((*MockRestClientInterface)(nil).VolumeCloneCreateAsync), arg0, arg1, arg2, arg3)
}

// VolumeCloneSplitStart mocks base method.
func (m *MockRestClientInterface) VolumeCloneSplitStart(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeCloneSplitStart", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeCloneSplitStart indicates an expected call of VolumeCloneSplitStart.
func (mr *MockRestClientInterfaceMockRecorder) VolumeCloneSplitStart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeCloneSplitStart", reflect.TypeOf((*MockRestClientInterface)(nil).VolumeCloneSplitStart), arg0, arg1)
}

// VolumeCreate mocks base method.
func (m *MockRestClientInterface) VolumeCreate(arg0 context.Context, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10 string, arg11 api.QosPolicyGroup, arg12 *bool, arg13 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeCreate", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeCreate indicates an expected call of VolumeCreate.
func (mr *MockRestClientInterfaceMockRecorder) VolumeCreate(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeCreate", reflect.TypeOf((*MockRestClientInterface)(nil).VolumeCreate), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)
}

// VolumeDestroy mocks base method.
func (m *MockRestClientInterface) VolumeDestroy(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeDestroy", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeDestroy indicates an expected call of VolumeDestroy.
func (mr *MockRestClientInterfaceMockRecorder) VolumeDestroy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeDestroy", reflect.TypeOf((*MockRestClientInterface)(nil).VolumeDestroy), arg0, arg1)
}

// VolumeDisableSnapshotDirectoryAccess mocks base method.
func (m *MockRestClientInterface) VolumeDisableSnapshotDirectoryAccess(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeDisableSnapshotDirectoryAccess", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeDisableSnapshotDirectoryAccess indicates an expected call of VolumeDisableSnapshotDirectoryAccess.
func (mr *MockRestClientInterfaceMockRecorder) VolumeDisableSnapshotDirectoryAccess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeDisableSnapshotDirectoryAccess", reflect.TypeOf((*MockRestClientInterface)(nil).VolumeDisableSnapshotDirectoryAccess), arg0, arg1)
}

// VolumeExists mocks base method.
func (m *MockRestClientInterface) VolumeExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeExists indicates an expected call of VolumeExists.
func (mr *MockRestClientInterfaceMockRecorder) VolumeExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeExists", reflect.TypeOf((*MockRestClientInterface)(nil).VolumeExists), arg0, arg1)
}

// VolumeGetByName mocks base method.
func (m *MockRestClientInterface) VolumeGetByName(arg0 context.Context, arg1 string) (*models.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeGetByName", arg0, arg1)
	ret0, _ := ret[0].(*models.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeGetByName indicates an expected call of VolumeGetByName.
func (mr *MockRestClientInterfaceMockRecorder) VolumeGetByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeGetByName", reflect.TypeOf((*MockRestClientInterface)(nil).VolumeGetByName), arg0, arg1)
}

// VolumeList mocks base method.
func (m *MockRestClientInterface) VolumeList(arg0 context.Context, arg1 string) (*storage.VolumeCollectionGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeList", arg0, arg1)
	ret0, _ := ret[0].(*storage.VolumeCollectionGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeList indicates an expected call of VolumeList.
func (mr *MockRestClientInterfaceMockRecorder) VolumeList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeList", reflect.TypeOf((*MockRestClientInterface)(nil).VolumeList), arg0, arg1)
}

// VolumeListAllBackedBySnapshot mocks base method.
func (m *MockRestClientInterface) VolumeListAllBackedBySnapshot(arg0 context.Context, arg1, arg2 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeListAllBackedBySnapshot", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeListAllBackedBySnapshot indicates an expected call of VolumeListAllBackedBySnapshot.
func (mr *MockRestClientInterfaceMockRecorder) VolumeListAllBackedBySnapshot(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeListAllBackedBySnapshot", reflect.TypeOf((*MockRestClientInterface)(nil).VolumeListAllBackedBySnapshot), arg0, arg1, arg2)
}

// VolumeListByAttrs mocks base method.
func (m *MockRestClientInterface) VolumeListByAttrs(arg0 context.Context, arg1 *api.Volume) (api.Volumes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeListByAttrs", arg0, arg1)
	ret0, _ := ret[0].(api.Volumes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeListByAttrs indicates an expected call of VolumeListByAttrs.
func (mr *MockRestClientInterfaceMockRecorder) VolumeListByAttrs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeListByAttrs", reflect.TypeOf((*MockRestClientInterface)(nil).VolumeListByAttrs), arg0, arg1)
}

// VolumeModifyExportPolicy mocks base method.
func (m *MockRestClientInterface) VolumeModifyExportPolicy(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeModifyExportPolicy", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeModifyExportPolicy indicates an expected call of VolumeModifyExportPolicy.
func (mr *MockRestClientInterfaceMockRecorder) VolumeModifyExportPolicy(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeModifyExportPolicy", reflect.TypeOf((*MockRestClientInterface)(nil).VolumeModifyExportPolicy), arg0, arg1, arg2)
}

// VolumeModifyUnixPermissions mocks base method.
func (m *MockRestClientInterface) VolumeModifyUnixPermissions(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeModifyUnixPermissions", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeModifyUnixPermissions indicates an expected call of VolumeModifyUnixPermissions.
func (mr *MockRestClientInterfaceMockRecorder) VolumeModifyUnixPermissions(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeModifyUnixPermissions", reflect.TypeOf((*MockRestClientInterface)(nil).VolumeModifyUnixPermissions), arg0, arg1, arg2)
}

// VolumeMount mocks base method.
func (m *MockRestClientInterface) VolumeMount(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeMount", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeMount indicates an expected call of VolumeMount.
func (mr *MockRestClientInterfaceMockRecorder) VolumeMount(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeMount", reflect.TypeOf((*MockRestClientInterface)(nil).VolumeMount), arg0, arg1, arg2)
}

// VolumeRename mocks base method.
func (m *MockRestClientInterface) VolumeRename(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeRename", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeRename indicates an expected call of VolumeRename.
func (mr *MockRestClientInterfaceMockRecorder) VolumeRename(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeRename", reflect.TypeOf((*MockRestClientInterface)(nil).VolumeRename), arg0, arg1, arg2)
}

// VolumeSetComment mocks base method.
func (m *MockRestClientInterface) VolumeSetComment(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeSetComment", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeSetComment indicates an expected call of VolumeSetComment.
func (mr *MockRestClientInterfaceMockRecorder) VolumeSetComment(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeSetComment", reflect.TypeOf((*MockRestClientInterface)(nil).VolumeSetComment), arg0, arg1, arg2)
}

// VolumeSetQosPolicyGroupName mocks base method.
func (m *MockRestClientInterface) VolumeSetQosPolicyGroupName(arg0 context.Context, arg1 string, arg2 api.QosPolicyGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeSetQosPolicyGroupName", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeSetQosPolicyGroupName indicates an expected call of VolumeSetQosPolicyGroupName.
func (mr *MockRestClientInterfaceMockRecorder) VolumeSetQosPolicyGroupName(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeSetQosPolicyGroupName", reflect.TypeOf((*MockRestClientInterface)(nil).VolumeSetQosPolicyGroupName), arg0, arg1, arg2)
}

// VolumeSetSize mocks base method.
func (m *MockRestClientInterface) VolumeSetSize(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeSetSize", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeSetSize indicates an expected call of VolumeSetSize.
func (mr *MockRestClientInterfaceMockRecorder) VolumeSetSize(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeSetSize", reflect.TypeOf((*MockRestClientInterface)(nil).VolumeSetSize), arg0, arg1, arg2)
}

// VolumeSize mocks base method.
func (m *MockRestClientInterface) VolumeSize(arg0 context.Context, arg1 string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeSize", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeSize indicates an expected call of VolumeSize.
func (mr *MockRestClientInterfaceMockRecorder) VolumeSize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeSize", reflect.TypeOf((*MockRestClientInterface)(nil).VolumeSize), arg0, arg1)
}

// VolumeUsedSize mocks base method.
func (m *MockRestClientInterface) VolumeUsedSize(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeUsedSize", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeUsedSize indicates an expected call of VolumeUsedSize.
func (mr *MockRestClientInterfaceMockRecorder) VolumeUsedSize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeUsedSize", reflect.TypeOf((*MockRestClientInterface)(nil).VolumeUsedSize), arg0, arg1)
}
