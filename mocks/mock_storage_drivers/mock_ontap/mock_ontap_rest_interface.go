// Code generated by MockGen. DO NOT EDIT.
// Source: ontap_rest_interface.go

// Package mock_api is a generated GoMock package.
package mock_api

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/netapp/trident/storage_drivers/ontap/api"
	cluster "github.com/netapp/trident/storage_drivers/ontap/api/rest/client/cluster"
	n_a_s "github.com/netapp/trident/storage_drivers/ontap/api/rest/client/n_a_s"
	networking "github.com/netapp/trident/storage_drivers/ontap/api/rest/client/networking"
	s_a_n "github.com/netapp/trident/storage_drivers/ontap/api/rest/client/s_a_n"
	storage "github.com/netapp/trident/storage_drivers/ontap/api/rest/client/storage"
	svm "github.com/netapp/trident/storage_drivers/ontap/api/rest/client/svm"
	models "github.com/netapp/trident/storage_drivers/ontap/api/rest/models"
)

// MockRestClientInterface is a mock of RestClientInterface interface.
type MockRestClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRestClientInterfaceMockRecorder
}

// MockRestClientInterfaceMockRecorder is the mock recorder for MockRestClientInterface.
type MockRestClientInterfaceMockRecorder struct {
	mock *MockRestClientInterface
}

// NewMockRestClientInterface creates a new mock instance.
func NewMockRestClientInterface(ctrl *gomock.Controller) *MockRestClientInterface {
	mock := &MockRestClientInterface{ctrl: ctrl}
	mock.recorder = &MockRestClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRestClientInterface) EXPECT() *MockRestClientInterfaceMockRecorder {
	return m.recorder
}

// AggregateList mocks base method.
func (m *MockRestClientInterface) AggregateList(ctx context.Context, pattern string) (*storage.AggregateCollectionGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregateList", ctx, pattern)
	ret0, _ := ret[0].(*storage.AggregateCollectionGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AggregateList indicates an expected call of AggregateList.
func (mr *MockRestClientInterfaceMockRecorder) AggregateList(ctx, pattern interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregateList", reflect.TypeOf((*MockRestClientInterface)(nil).AggregateList), ctx, pattern)
}

// ClientConfig mocks base method.
func (m *MockRestClientInterface) ClientConfig() api.ClientConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientConfig")
	ret0, _ := ret[0].(api.ClientConfig)
	return ret0
}

// ClientConfig indicates an expected call of ClientConfig.
func (mr *MockRestClientInterfaceMockRecorder) ClientConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientConfig", reflect.TypeOf((*MockRestClientInterface)(nil).ClientConfig))
}

// ClusterInfo mocks base method.
func (m *MockRestClientInterface) ClusterInfo(ctx context.Context) (*cluster.ClusterGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterInfo", ctx)
	ret0, _ := ret[0].(*cluster.ClusterGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterInfo indicates an expected call of ClusterInfo.
func (mr *MockRestClientInterfaceMockRecorder) ClusterInfo(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterInfo", reflect.TypeOf((*MockRestClientInterface)(nil).ClusterInfo), ctx)
}

// EmsAutosupportLog mocks base method.
func (m *MockRestClientInterface) EmsAutosupportLog(ctx context.Context, appVersion string, autoSupport bool, category, computerName, eventDescription string, eventID int, eventSource string, logLevel int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmsAutosupportLog", ctx, appVersion, autoSupport, category, computerName, eventDescription, eventID, eventSource, logLevel)
	ret0, _ := ret[0].(error)
	return ret0
}

// EmsAutosupportLog indicates an expected call of EmsAutosupportLog.
func (mr *MockRestClientInterfaceMockRecorder) EmsAutosupportLog(ctx, appVersion, autoSupport, category, computerName, eventDescription, eventID, eventSource, logLevel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmsAutosupportLog", reflect.TypeOf((*MockRestClientInterface)(nil).EmsAutosupportLog), ctx, appVersion, autoSupport, category, computerName, eventDescription, eventID, eventSource, logLevel)
}

// ExportPolicyCreate mocks base method.
func (m *MockRestClientInterface) ExportPolicyCreate(ctx context.Context, policy string) (*n_a_s.ExportPolicyCreateCreated, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportPolicyCreate", ctx, policy)
	ret0, _ := ret[0].(*n_a_s.ExportPolicyCreateCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportPolicyCreate indicates an expected call of ExportPolicyCreate.
func (mr *MockRestClientInterfaceMockRecorder) ExportPolicyCreate(ctx, policy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportPolicyCreate", reflect.TypeOf((*MockRestClientInterface)(nil).ExportPolicyCreate), ctx, policy)
}

// ExportPolicyDestroy mocks base method.
func (m *MockRestClientInterface) ExportPolicyDestroy(ctx context.Context, policy string) (*n_a_s.ExportPolicyDeleteOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportPolicyDestroy", ctx, policy)
	ret0, _ := ret[0].(*n_a_s.ExportPolicyDeleteOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportPolicyDestroy indicates an expected call of ExportPolicyDestroy.
func (mr *MockRestClientInterfaceMockRecorder) ExportPolicyDestroy(ctx, policy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportPolicyDestroy", reflect.TypeOf((*MockRestClientInterface)(nil).ExportPolicyDestroy), ctx, policy)
}

// ExportPolicyGet mocks base method.
func (m *MockRestClientInterface) ExportPolicyGet(ctx context.Context, id int64) (*n_a_s.ExportPolicyGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportPolicyGet", ctx, id)
	ret0, _ := ret[0].(*n_a_s.ExportPolicyGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportPolicyGet indicates an expected call of ExportPolicyGet.
func (mr *MockRestClientInterfaceMockRecorder) ExportPolicyGet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportPolicyGet", reflect.TypeOf((*MockRestClientInterface)(nil).ExportPolicyGet), ctx, id)
}

// ExportPolicyGetByName mocks base method.
func (m *MockRestClientInterface) ExportPolicyGetByName(ctx context.Context, exportPolicyName string) (*models.ExportPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportPolicyGetByName", ctx, exportPolicyName)
	ret0, _ := ret[0].(*models.ExportPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportPolicyGetByName indicates an expected call of ExportPolicyGetByName.
func (mr *MockRestClientInterfaceMockRecorder) ExportPolicyGetByName(ctx, exportPolicyName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportPolicyGetByName", reflect.TypeOf((*MockRestClientInterface)(nil).ExportPolicyGetByName), ctx, exportPolicyName)
}

// ExportPolicyList mocks base method.
func (m *MockRestClientInterface) ExportPolicyList(ctx context.Context, pattern string) (*n_a_s.ExportPolicyCollectionGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportPolicyList", ctx, pattern)
	ret0, _ := ret[0].(*n_a_s.ExportPolicyCollectionGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportPolicyList indicates an expected call of ExportPolicyList.
func (mr *MockRestClientInterfaceMockRecorder) ExportPolicyList(ctx, pattern interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportPolicyList", reflect.TypeOf((*MockRestClientInterface)(nil).ExportPolicyList), ctx, pattern)
}

// ExportRuleCreate mocks base method.
func (m *MockRestClientInterface) ExportRuleCreate(ctx context.Context, policy, clientMatch string, protocols, roSecFlavors, rwSecFlavors, suSecFlavors []string) (*n_a_s.ExportRuleCreateCreated, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportRuleCreate", ctx, policy, clientMatch, protocols, roSecFlavors, rwSecFlavors, suSecFlavors)
	ret0, _ := ret[0].(*n_a_s.ExportRuleCreateCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportRuleCreate indicates an expected call of ExportRuleCreate.
func (mr *MockRestClientInterfaceMockRecorder) ExportRuleCreate(ctx, policy, clientMatch, protocols, roSecFlavors, rwSecFlavors, suSecFlavors interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportRuleCreate", reflect.TypeOf((*MockRestClientInterface)(nil).ExportRuleCreate), ctx, policy, clientMatch, protocols, roSecFlavors, rwSecFlavors, suSecFlavors)
}

// ExportRuleDestroy mocks base method.
func (m *MockRestClientInterface) ExportRuleDestroy(ctx context.Context, policy string, ruleIndex int) (*n_a_s.ExportRuleDeleteOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportRuleDestroy", ctx, policy, ruleIndex)
	ret0, _ := ret[0].(*n_a_s.ExportRuleDeleteOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportRuleDestroy indicates an expected call of ExportRuleDestroy.
func (mr *MockRestClientInterfaceMockRecorder) ExportRuleDestroy(ctx, policy, ruleIndex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportRuleDestroy", reflect.TypeOf((*MockRestClientInterface)(nil).ExportRuleDestroy), ctx, policy, ruleIndex)
}

// ExportRuleList mocks base method.
func (m *MockRestClientInterface) ExportRuleList(ctx context.Context, policy string) (*n_a_s.ExportRuleCollectionGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportRuleList", ctx, policy)
	ret0, _ := ret[0].(*n_a_s.ExportRuleCollectionGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportRuleList indicates an expected call of ExportRuleList.
func (mr *MockRestClientInterfaceMockRecorder) ExportRuleList(ctx, policy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportRuleList", reflect.TypeOf((*MockRestClientInterface)(nil).ExportRuleList), ctx, policy)
}

// FlexGroupCreate mocks base method.
func (m *MockRestClientInterface) FlexGroupCreate(ctx context.Context, name string, size int, aggrs []string, spaceReserve, snapshotPolicy, unixPermissions, exportPolicy, securityStyle, tieringPolicy, comment string, qosPolicyGroup api.QosPolicyGroup, encrypt *bool, snapshotReserve int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexGroupCreate", ctx, name, size, aggrs, spaceReserve, snapshotPolicy, unixPermissions, exportPolicy, securityStyle, tieringPolicy, comment, qosPolicyGroup, encrypt, snapshotReserve)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlexGroupCreate indicates an expected call of FlexGroupCreate.
func (mr *MockRestClientInterfaceMockRecorder) FlexGroupCreate(ctx, name, size, aggrs, spaceReserve, snapshotPolicy, unixPermissions, exportPolicy, securityStyle, tieringPolicy, comment, qosPolicyGroup, encrypt, snapshotReserve interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexGroupCreate", reflect.TypeOf((*MockRestClientInterface)(nil).FlexGroupCreate), ctx, name, size, aggrs, spaceReserve, snapshotPolicy, unixPermissions, exportPolicy, securityStyle, tieringPolicy, comment, qosPolicyGroup, encrypt, snapshotReserve)
}

// FlexGroupDestroy mocks base method.
func (m *MockRestClientInterface) FlexGroupDestroy(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexGroupDestroy", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlexGroupDestroy indicates an expected call of FlexGroupDestroy.
func (mr *MockRestClientInterfaceMockRecorder) FlexGroupDestroy(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexGroupDestroy", reflect.TypeOf((*MockRestClientInterface)(nil).FlexGroupDestroy), ctx, name)
}

// FlexGroupExists mocks base method.
func (m *MockRestClientInterface) FlexGroupExists(ctx context.Context, volumeName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexGroupExists", ctx, volumeName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlexGroupExists indicates an expected call of FlexGroupExists.
func (mr *MockRestClientInterfaceMockRecorder) FlexGroupExists(ctx, volumeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexGroupExists", reflect.TypeOf((*MockRestClientInterface)(nil).FlexGroupExists), ctx, volumeName)
}

// FlexGroupGetAll mocks base method.
func (m *MockRestClientInterface) FlexGroupGetAll(ctx context.Context, pattern string) (*storage.VolumeCollectionGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexGroupGetAll", ctx, pattern)
	ret0, _ := ret[0].(*storage.VolumeCollectionGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlexGroupGetAll indicates an expected call of FlexGroupGetAll.
func (mr *MockRestClientInterfaceMockRecorder) FlexGroupGetAll(ctx, pattern interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexGroupGetAll", reflect.TypeOf((*MockRestClientInterface)(nil).FlexGroupGetAll), ctx, pattern)
}

// FlexGroupGetByName mocks base method.
func (m *MockRestClientInterface) FlexGroupGetByName(ctx context.Context, volumeName string) (*models.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexGroupGetByName", ctx, volumeName)
	ret0, _ := ret[0].(*models.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlexGroupGetByName indicates an expected call of FlexGroupGetByName.
func (mr *MockRestClientInterfaceMockRecorder) FlexGroupGetByName(ctx, volumeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexGroupGetByName", reflect.TypeOf((*MockRestClientInterface)(nil).FlexGroupGetByName), ctx, volumeName)
}

// FlexGroupModifyUnixPermissions mocks base method.
func (m *MockRestClientInterface) FlexGroupModifyUnixPermissions(ctx context.Context, volumeName, unixPermissions string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexGroupModifyUnixPermissions", ctx, volumeName, unixPermissions)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlexGroupModifyUnixPermissions indicates an expected call of FlexGroupModifyUnixPermissions.
func (mr *MockRestClientInterfaceMockRecorder) FlexGroupModifyUnixPermissions(ctx, volumeName, unixPermissions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexGroupModifyUnixPermissions", reflect.TypeOf((*MockRestClientInterface)(nil).FlexGroupModifyUnixPermissions), ctx, volumeName, unixPermissions)
}

// FlexGroupMount mocks base method.
func (m *MockRestClientInterface) FlexGroupMount(ctx context.Context, volumeName, junctionPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexGroupMount", ctx, volumeName, junctionPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlexGroupMount indicates an expected call of FlexGroupMount.
func (mr *MockRestClientInterfaceMockRecorder) FlexGroupMount(ctx, volumeName, junctionPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexGroupMount", reflect.TypeOf((*MockRestClientInterface)(nil).FlexGroupMount), ctx, volumeName, junctionPath)
}

// FlexGroupSetComment mocks base method.
func (m *MockRestClientInterface) FlexGroupSetComment(ctx context.Context, volumeName, newVolumeComment string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexGroupSetComment", ctx, volumeName, newVolumeComment)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlexGroupSetComment indicates an expected call of FlexGroupSetComment.
func (mr *MockRestClientInterfaceMockRecorder) FlexGroupSetComment(ctx, volumeName, newVolumeComment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexGroupSetComment", reflect.TypeOf((*MockRestClientInterface)(nil).FlexGroupSetComment), ctx, volumeName, newVolumeComment)
}

// FlexGroupSetSize mocks base method.
func (m *MockRestClientInterface) FlexGroupSetSize(ctx context.Context, volumeName, newSize string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexGroupSetSize", ctx, volumeName, newSize)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlexGroupSetSize indicates an expected call of FlexGroupSetSize.
func (mr *MockRestClientInterfaceMockRecorder) FlexGroupSetSize(ctx, volumeName, newSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexGroupSetSize", reflect.TypeOf((*MockRestClientInterface)(nil).FlexGroupSetSize), ctx, volumeName, newSize)
}

// FlexGroupSize mocks base method.
func (m *MockRestClientInterface) FlexGroupSize(ctx context.Context, volumeName string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexGroupSize", ctx, volumeName)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlexGroupSize indicates an expected call of FlexGroupSize.
func (mr *MockRestClientInterfaceMockRecorder) FlexGroupSize(ctx, volumeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexGroupSize", reflect.TypeOf((*MockRestClientInterface)(nil).FlexGroupSize), ctx, volumeName)
}

// FlexGroupUsedSize mocks base method.
func (m *MockRestClientInterface) FlexGroupUsedSize(ctx context.Context, volumeName string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexGroupUsedSize", ctx, volumeName)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlexGroupUsedSize indicates an expected call of FlexGroupUsedSize.
func (mr *MockRestClientInterfaceMockRecorder) FlexGroupUsedSize(ctx, volumeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexGroupUsedSize", reflect.TypeOf((*MockRestClientInterface)(nil).FlexGroupUsedSize), ctx, volumeName)
}

// FlexGroupVolumeDisableSnapshotDirectoryAccess mocks base method.
func (m *MockRestClientInterface) FlexGroupVolumeDisableSnapshotDirectoryAccess(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexGroupVolumeDisableSnapshotDirectoryAccess", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlexGroupVolumeDisableSnapshotDirectoryAccess indicates an expected call of FlexGroupVolumeDisableSnapshotDirectoryAccess.
func (mr *MockRestClientInterfaceMockRecorder) FlexGroupVolumeDisableSnapshotDirectoryAccess(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexGroupVolumeDisableSnapshotDirectoryAccess", reflect.TypeOf((*MockRestClientInterface)(nil).FlexGroupVolumeDisableSnapshotDirectoryAccess), ctx, name)
}

// FlexgroupCloneSplitStart mocks base method.
func (m *MockRestClientInterface) FlexgroupCloneSplitStart(ctx context.Context, volumeName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexgroupCloneSplitStart", ctx, volumeName)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlexgroupCloneSplitStart indicates an expected call of FlexgroupCloneSplitStart.
func (mr *MockRestClientInterfaceMockRecorder) FlexgroupCloneSplitStart(ctx, volumeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexgroupCloneSplitStart", reflect.TypeOf((*MockRestClientInterface)(nil).FlexgroupCloneSplitStart), ctx, volumeName)
}

// FlexgroupModifyExportPolicy mocks base method.
func (m *MockRestClientInterface) FlexgroupModifyExportPolicy(ctx context.Context, volumeName, exportPolicyName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexgroupModifyExportPolicy", ctx, volumeName, exportPolicyName)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlexgroupModifyExportPolicy indicates an expected call of FlexgroupModifyExportPolicy.
func (mr *MockRestClientInterfaceMockRecorder) FlexgroupModifyExportPolicy(ctx, volumeName, exportPolicyName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexgroupModifyExportPolicy", reflect.TypeOf((*MockRestClientInterface)(nil).FlexgroupModifyExportPolicy), ctx, volumeName, exportPolicyName)
}

// FlexgroupSetQosPolicyGroupName mocks base method.
func (m *MockRestClientInterface) FlexgroupSetQosPolicyGroupName(ctx context.Context, volumeName string, qosPolicyGroup api.QosPolicyGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexgroupSetQosPolicyGroupName", ctx, volumeName, qosPolicyGroup)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlexgroupSetQosPolicyGroupName indicates an expected call of FlexgroupSetQosPolicyGroupName.
func (mr *MockRestClientInterfaceMockRecorder) FlexgroupSetQosPolicyGroupName(ctx, volumeName, qosPolicyGroup interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexgroupSetQosPolicyGroupName", reflect.TypeOf((*MockRestClientInterface)(nil).FlexgroupSetQosPolicyGroupName), ctx, volumeName, qosPolicyGroup)
}

// FlexgroupUnmount mocks base method.
func (m *MockRestClientInterface) FlexgroupUnmount(ctx context.Context, volumeName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexgroupUnmount", ctx, volumeName)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlexgroupUnmount indicates an expected call of FlexgroupUnmount.
func (mr *MockRestClientInterfaceMockRecorder) FlexgroupUnmount(ctx, volumeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexgroupUnmount", reflect.TypeOf((*MockRestClientInterface)(nil).FlexgroupUnmount), ctx, volumeName)
}

// IgroupAdd mocks base method.
func (m *MockRestClientInterface) IgroupAdd(ctx context.Context, initiatorGroupName, initiator string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IgroupAdd", ctx, initiatorGroupName, initiator)
	ret0, _ := ret[0].(error)
	return ret0
}

// IgroupAdd indicates an expected call of IgroupAdd.
func (mr *MockRestClientInterfaceMockRecorder) IgroupAdd(ctx, initiatorGroupName, initiator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IgroupAdd", reflect.TypeOf((*MockRestClientInterface)(nil).IgroupAdd), ctx, initiatorGroupName, initiator)
}

// IgroupCreate mocks base method.
func (m *MockRestClientInterface) IgroupCreate(ctx context.Context, initiatorGroupName, initiatorGroupType, osType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IgroupCreate", ctx, initiatorGroupName, initiatorGroupType, osType)
	ret0, _ := ret[0].(error)
	return ret0
}

// IgroupCreate indicates an expected call of IgroupCreate.
func (mr *MockRestClientInterfaceMockRecorder) IgroupCreate(ctx, initiatorGroupName, initiatorGroupType, osType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IgroupCreate", reflect.TypeOf((*MockRestClientInterface)(nil).IgroupCreate), ctx, initiatorGroupName, initiatorGroupType, osType)
}

// IgroupDestroy mocks base method.
func (m *MockRestClientInterface) IgroupDestroy(ctx context.Context, initiatorGroupName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IgroupDestroy", ctx, initiatorGroupName)
	ret0, _ := ret[0].(error)
	return ret0
}

// IgroupDestroy indicates an expected call of IgroupDestroy.
func (mr *MockRestClientInterfaceMockRecorder) IgroupDestroy(ctx, initiatorGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IgroupDestroy", reflect.TypeOf((*MockRestClientInterface)(nil).IgroupDestroy), ctx, initiatorGroupName)
}

// IgroupGet mocks base method.
func (m *MockRestClientInterface) IgroupGet(ctx context.Context, uuid string) (*s_a_n.IgroupGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IgroupGet", ctx, uuid)
	ret0, _ := ret[0].(*s_a_n.IgroupGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IgroupGet indicates an expected call of IgroupGet.
func (mr *MockRestClientInterfaceMockRecorder) IgroupGet(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IgroupGet", reflect.TypeOf((*MockRestClientInterface)(nil).IgroupGet), ctx, uuid)
}

// IgroupGetByName mocks base method.
func (m *MockRestClientInterface) IgroupGetByName(ctx context.Context, initiatorGroupName string) (*models.Igroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IgroupGetByName", ctx, initiatorGroupName)
	ret0, _ := ret[0].(*models.Igroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IgroupGetByName indicates an expected call of IgroupGetByName.
func (mr *MockRestClientInterfaceMockRecorder) IgroupGetByName(ctx, initiatorGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IgroupGetByName", reflect.TypeOf((*MockRestClientInterface)(nil).IgroupGetByName), ctx, initiatorGroupName)
}

// IgroupList mocks base method.
func (m *MockRestClientInterface) IgroupList(ctx context.Context, pattern string) (*s_a_n.IgroupCollectionGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IgroupList", ctx, pattern)
	ret0, _ := ret[0].(*s_a_n.IgroupCollectionGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IgroupList indicates an expected call of IgroupList.
func (mr *MockRestClientInterfaceMockRecorder) IgroupList(ctx, pattern interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IgroupList", reflect.TypeOf((*MockRestClientInterface)(nil).IgroupList), ctx, pattern)
}

// IgroupRemove mocks base method.
func (m *MockRestClientInterface) IgroupRemove(ctx context.Context, initiatorGroupName, initiator string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IgroupRemove", ctx, initiatorGroupName, initiator)
	ret0, _ := ret[0].(error)
	return ret0
}

// IgroupRemove indicates an expected call of IgroupRemove.
func (mr *MockRestClientInterfaceMockRecorder) IgroupRemove(ctx, initiatorGroupName, initiator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IgroupRemove", reflect.TypeOf((*MockRestClientInterface)(nil).IgroupRemove), ctx, initiatorGroupName, initiator)
}

// IsJobFinished mocks base method.
func (m *MockRestClientInterface) IsJobFinished(ctx context.Context, payload *models.JobLinkResponse) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsJobFinished", ctx, payload)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsJobFinished indicates an expected call of IsJobFinished.
func (mr *MockRestClientInterfaceMockRecorder) IsJobFinished(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsJobFinished", reflect.TypeOf((*MockRestClientInterface)(nil).IsJobFinished), ctx, payload)
}

// IscsiInitiatorGetDefaultAuth mocks base method.
func (m *MockRestClientInterface) IscsiInitiatorGetDefaultAuth(ctx context.Context) (*s_a_n.IscsiCredentialsCollectionGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IscsiInitiatorGetDefaultAuth", ctx)
	ret0, _ := ret[0].(*s_a_n.IscsiCredentialsCollectionGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IscsiInitiatorGetDefaultAuth indicates an expected call of IscsiInitiatorGetDefaultAuth.
func (mr *MockRestClientInterfaceMockRecorder) IscsiInitiatorGetDefaultAuth(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IscsiInitiatorGetDefaultAuth", reflect.TypeOf((*MockRestClientInterface)(nil).IscsiInitiatorGetDefaultAuth), ctx)
}

// IscsiInitiatorSetDefaultAuth mocks base method.
func (m *MockRestClientInterface) IscsiInitiatorSetDefaultAuth(ctx context.Context, authType, userName, passphrase, outbountUserName, outboundPassphrase string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IscsiInitiatorSetDefaultAuth", ctx, authType, userName, passphrase, outbountUserName, outboundPassphrase)
	ret0, _ := ret[0].(error)
	return ret0
}

// IscsiInitiatorSetDefaultAuth indicates an expected call of IscsiInitiatorSetDefaultAuth.
func (mr *MockRestClientInterfaceMockRecorder) IscsiInitiatorSetDefaultAuth(ctx, authType, userName, passphrase, outbountUserName, outboundPassphrase interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IscsiInitiatorSetDefaultAuth", reflect.TypeOf((*MockRestClientInterface)(nil).IscsiInitiatorSetDefaultAuth), ctx, authType, userName, passphrase, outbountUserName, outboundPassphrase)
}

// IscsiInterfaceGet mocks base method.
func (m *MockRestClientInterface) IscsiInterfaceGet(ctx context.Context, svm string) (*s_a_n.IscsiServiceCollectionGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IscsiInterfaceGet", ctx, svm)
	ret0, _ := ret[0].(*s_a_n.IscsiServiceCollectionGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IscsiInterfaceGet indicates an expected call of IscsiInterfaceGet.
func (mr *MockRestClientInterfaceMockRecorder) IscsiInterfaceGet(ctx, svm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IscsiInterfaceGet", reflect.TypeOf((*MockRestClientInterface)(nil).IscsiInterfaceGet), ctx, svm)
}

// IscsiNodeGetName mocks base method.
func (m *MockRestClientInterface) IscsiNodeGetName(ctx context.Context) (*s_a_n.IscsiServiceGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IscsiNodeGetName", ctx)
	ret0, _ := ret[0].(*s_a_n.IscsiServiceGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IscsiNodeGetName indicates an expected call of IscsiNodeGetName.
func (mr *MockRestClientInterfaceMockRecorder) IscsiNodeGetName(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IscsiNodeGetName", reflect.TypeOf((*MockRestClientInterface)(nil).IscsiNodeGetName), ctx)
}

// JobGet mocks base method.
func (m *MockRestClientInterface) JobGet(ctx context.Context, jobUUID string) (*cluster.JobGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JobGet", ctx, jobUUID)
	ret0, _ := ret[0].(*cluster.JobGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JobGet indicates an expected call of JobGet.
func (mr *MockRestClientInterfaceMockRecorder) JobGet(ctx, jobUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JobGet", reflect.TypeOf((*MockRestClientInterface)(nil).JobGet), ctx, jobUUID)
}

// LunCloneCreate mocks base method.
func (m *MockRestClientInterface) LunCloneCreate(ctx context.Context, lunPath, sourcePath string, sizeInBytes int64, osType string, qosPolicyGroup api.QosPolicyGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunCloneCreate", ctx, lunPath, sourcePath, sizeInBytes, osType, qosPolicyGroup)
	ret0, _ := ret[0].(error)
	return ret0
}

// LunCloneCreate indicates an expected call of LunCloneCreate.
func (mr *MockRestClientInterfaceMockRecorder) LunCloneCreate(ctx, lunPath, sourcePath, sizeInBytes, osType, qosPolicyGroup interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunCloneCreate", reflect.TypeOf((*MockRestClientInterface)(nil).LunCloneCreate), ctx, lunPath, sourcePath, sizeInBytes, osType, qosPolicyGroup)
}

// LunCreate mocks base method.
func (m *MockRestClientInterface) LunCreate(ctx context.Context, lunPath string, sizeInBytes int64, osType string, qosPolicyGroup api.QosPolicyGroup, spaceReserved, spaceAllocated bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunCreate", ctx, lunPath, sizeInBytes, osType, qosPolicyGroup, spaceReserved, spaceAllocated)
	ret0, _ := ret[0].(error)
	return ret0
}

// LunCreate indicates an expected call of LunCreate.
func (mr *MockRestClientInterfaceMockRecorder) LunCreate(ctx, lunPath, sizeInBytes, osType, qosPolicyGroup, spaceReserved, spaceAllocated interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunCreate", reflect.TypeOf((*MockRestClientInterface)(nil).LunCreate), ctx, lunPath, sizeInBytes, osType, qosPolicyGroup, spaceReserved, spaceAllocated)
}

// LunDelete mocks base method.
func (m *MockRestClientInterface) LunDelete(ctx context.Context, lunUUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunDelete", ctx, lunUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// LunDelete indicates an expected call of LunDelete.
func (mr *MockRestClientInterfaceMockRecorder) LunDelete(ctx, lunUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunDelete", reflect.TypeOf((*MockRestClientInterface)(nil).LunDelete), ctx, lunUUID)
}

// LunGet mocks base method.
func (m *MockRestClientInterface) LunGet(ctx context.Context, uuid string) (*s_a_n.LunGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunGet", ctx, uuid)
	ret0, _ := ret[0].(*s_a_n.LunGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunGet indicates an expected call of LunGet.
func (mr *MockRestClientInterfaceMockRecorder) LunGet(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunGet", reflect.TypeOf((*MockRestClientInterface)(nil).LunGet), ctx, uuid)
}

// LunGetAttribute mocks base method.
func (m *MockRestClientInterface) LunGetAttribute(ctx context.Context, lunPath, attributeName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunGetAttribute", ctx, lunPath, attributeName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunGetAttribute indicates an expected call of LunGetAttribute.
func (mr *MockRestClientInterfaceMockRecorder) LunGetAttribute(ctx, lunPath, attributeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunGetAttribute", reflect.TypeOf((*MockRestClientInterface)(nil).LunGetAttribute), ctx, lunPath, attributeName)
}

// LunGetByName mocks base method.
func (m *MockRestClientInterface) LunGetByName(ctx context.Context, name string) (*models.Lun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunGetByName", ctx, name)
	ret0, _ := ret[0].(*models.Lun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunGetByName indicates an expected call of LunGetByName.
func (mr *MockRestClientInterfaceMockRecorder) LunGetByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunGetByName", reflect.TypeOf((*MockRestClientInterface)(nil).LunGetByName), ctx, name)
}

// LunGetComment mocks base method.
func (m *MockRestClientInterface) LunGetComment(ctx context.Context, lunPath string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunGetComment", ctx, lunPath)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunGetComment indicates an expected call of LunGetComment.
func (mr *MockRestClientInterfaceMockRecorder) LunGetComment(ctx, lunPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunGetComment", reflect.TypeOf((*MockRestClientInterface)(nil).LunGetComment), ctx, lunPath)
}

// LunList mocks base method.
func (m *MockRestClientInterface) LunList(ctx context.Context, pattern string) (*s_a_n.LunCollectionGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunList", ctx, pattern)
	ret0, _ := ret[0].(*s_a_n.LunCollectionGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunList indicates an expected call of LunList.
func (mr *MockRestClientInterfaceMockRecorder) LunList(ctx, pattern interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunList", reflect.TypeOf((*MockRestClientInterface)(nil).LunList), ctx, pattern)
}

// LunMap mocks base method.
func (m *MockRestClientInterface) LunMap(ctx context.Context, initiatorGroupName, lunPath string, lunID int) (*s_a_n.LunMapCreateCreated, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunMap", ctx, initiatorGroupName, lunPath, lunID)
	ret0, _ := ret[0].(*s_a_n.LunMapCreateCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunMap indicates an expected call of LunMap.
func (mr *MockRestClientInterfaceMockRecorder) LunMap(ctx, initiatorGroupName, lunPath, lunID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunMap", reflect.TypeOf((*MockRestClientInterface)(nil).LunMap), ctx, initiatorGroupName, lunPath, lunID)
}

// LunMapGetReportingNodes mocks base method.
func (m *MockRestClientInterface) LunMapGetReportingNodes(ctx context.Context, initiatorGroupName, lunPath string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunMapGetReportingNodes", ctx, initiatorGroupName, lunPath)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunMapGetReportingNodes indicates an expected call of LunMapGetReportingNodes.
func (mr *MockRestClientInterfaceMockRecorder) LunMapGetReportingNodes(ctx, initiatorGroupName, lunPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunMapGetReportingNodes", reflect.TypeOf((*MockRestClientInterface)(nil).LunMapGetReportingNodes), ctx, initiatorGroupName, lunPath)
}

// LunMapInfo mocks base method.
func (m *MockRestClientInterface) LunMapInfo(ctx context.Context, initiatorGroupName, lunPath string) (*s_a_n.LunMapCollectionGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunMapInfo", ctx, initiatorGroupName, lunPath)
	ret0, _ := ret[0].(*s_a_n.LunMapCollectionGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunMapInfo indicates an expected call of LunMapInfo.
func (mr *MockRestClientInterfaceMockRecorder) LunMapInfo(ctx, initiatorGroupName, lunPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunMapInfo", reflect.TypeOf((*MockRestClientInterface)(nil).LunMapInfo), ctx, initiatorGroupName, lunPath)
}

// LunMapList mocks base method.
func (m *MockRestClientInterface) LunMapList(ctx context.Context, initiatorGroupName, lunPath string) (*s_a_n.LunMapCollectionGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunMapList", ctx, initiatorGroupName, lunPath)
	ret0, _ := ret[0].(*s_a_n.LunMapCollectionGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunMapList indicates an expected call of LunMapList.
func (mr *MockRestClientInterfaceMockRecorder) LunMapList(ctx, initiatorGroupName, lunPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunMapList", reflect.TypeOf((*MockRestClientInterface)(nil).LunMapList), ctx, initiatorGroupName, lunPath)
}

// LunOptions mocks base method.
func (m *MockRestClientInterface) LunOptions(ctx context.Context) (*api.LunOptionsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunOptions", ctx)
	ret0, _ := ret[0].(*api.LunOptionsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunOptions indicates an expected call of LunOptions.
func (mr *MockRestClientInterfaceMockRecorder) LunOptions(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunOptions", reflect.TypeOf((*MockRestClientInterface)(nil).LunOptions), ctx)
}

// LunRename mocks base method.
func (m *MockRestClientInterface) LunRename(ctx context.Context, lunPath, newLunPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunRename", ctx, lunPath, newLunPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// LunRename indicates an expected call of LunRename.
func (mr *MockRestClientInterfaceMockRecorder) LunRename(ctx, lunPath, newLunPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunRename", reflect.TypeOf((*MockRestClientInterface)(nil).LunRename), ctx, lunPath, newLunPath)
}

// LunSetAttribute mocks base method.
func (m *MockRestClientInterface) LunSetAttribute(ctx context.Context, lunPath, attributeName, attributeValue string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunSetAttribute", ctx, lunPath, attributeName, attributeValue)
	ret0, _ := ret[0].(error)
	return ret0
}

// LunSetAttribute indicates an expected call of LunSetAttribute.
func (mr *MockRestClientInterfaceMockRecorder) LunSetAttribute(ctx, lunPath, attributeName, attributeValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunSetAttribute", reflect.TypeOf((*MockRestClientInterface)(nil).LunSetAttribute), ctx, lunPath, attributeName, attributeValue)
}

// LunSetComment mocks base method.
func (m *MockRestClientInterface) LunSetComment(ctx context.Context, lunPath, comment string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunSetComment", ctx, lunPath, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// LunSetComment indicates an expected call of LunSetComment.
func (mr *MockRestClientInterfaceMockRecorder) LunSetComment(ctx, lunPath, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunSetComment", reflect.TypeOf((*MockRestClientInterface)(nil).LunSetComment), ctx, lunPath, comment)
}

// LunSetQosPolicyGroup mocks base method.
func (m *MockRestClientInterface) LunSetQosPolicyGroup(ctx context.Context, lunPath, qosPolicyGroup string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunSetQosPolicyGroup", ctx, lunPath, qosPolicyGroup)
	ret0, _ := ret[0].(error)
	return ret0
}

// LunSetQosPolicyGroup indicates an expected call of LunSetQosPolicyGroup.
func (mr *MockRestClientInterfaceMockRecorder) LunSetQosPolicyGroup(ctx, lunPath, qosPolicyGroup interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunSetQosPolicyGroup", reflect.TypeOf((*MockRestClientInterface)(nil).LunSetQosPolicyGroup), ctx, lunPath, qosPolicyGroup)
}

// LunSetSize mocks base method.
func (m *MockRestClientInterface) LunSetSize(ctx context.Context, lunPath, newSize string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunSetSize", ctx, lunPath, newSize)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunSetSize indicates an expected call of LunSetSize.
func (mr *MockRestClientInterfaceMockRecorder) LunSetSize(ctx, lunPath, newSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunSetSize", reflect.TypeOf((*MockRestClientInterface)(nil).LunSetSize), ctx, lunPath, newSize)
}

// LunSize mocks base method.
func (m *MockRestClientInterface) LunSize(ctx context.Context, lunPath string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunSize", ctx, lunPath)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunSize indicates an expected call of LunSize.
func (mr *MockRestClientInterfaceMockRecorder) LunSize(ctx, lunPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunSize", reflect.TypeOf((*MockRestClientInterface)(nil).LunSize), ctx, lunPath)
}

// LunUnmap mocks base method.
func (m *MockRestClientInterface) LunUnmap(ctx context.Context, initiatorGroupName, lunPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunUnmap", ctx, initiatorGroupName, lunPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// LunUnmap indicates an expected call of LunUnmap.
func (mr *MockRestClientInterfaceMockRecorder) LunUnmap(ctx, initiatorGroupName, lunPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunUnmap", reflect.TypeOf((*MockRestClientInterface)(nil).LunUnmap), ctx, initiatorGroupName, lunPath)
}

// NetInterfaceGetDataLIFs mocks base method.
func (m *MockRestClientInterface) NetInterfaceGetDataLIFs(ctx context.Context, protocol string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetInterfaceGetDataLIFs", ctx, protocol)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetInterfaceGetDataLIFs indicates an expected call of NetInterfaceGetDataLIFs.
func (mr *MockRestClientInterfaceMockRecorder) NetInterfaceGetDataLIFs(ctx, protocol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetInterfaceGetDataLIFs", reflect.TypeOf((*MockRestClientInterface)(nil).NetInterfaceGetDataLIFs), ctx, protocol)
}

// NetworkIPInterfacesList mocks base method.
func (m *MockRestClientInterface) NetworkIPInterfacesList(ctx context.Context) (*networking.NetworkIPInterfacesGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkIPInterfacesList", ctx)
	ret0, _ := ret[0].(*networking.NetworkIPInterfacesGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkIPInterfacesList indicates an expected call of NetworkIPInterfacesList.
func (mr *MockRestClientInterfaceMockRecorder) NetworkIPInterfacesList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkIPInterfacesList", reflect.TypeOf((*MockRestClientInterface)(nil).NetworkIPInterfacesList), ctx)
}

// NodeList mocks base method.
func (m *MockRestClientInterface) NodeList(ctx context.Context, pattern string) (*cluster.NodesGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeList", ctx, pattern)
	ret0, _ := ret[0].(*cluster.NodesGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeList indicates an expected call of NodeList.
func (mr *MockRestClientInterfaceMockRecorder) NodeList(ctx, pattern interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeList", reflect.TypeOf((*MockRestClientInterface)(nil).NodeList), ctx, pattern)
}

// NodeListSerialNumbers mocks base method.
func (m *MockRestClientInterface) NodeListSerialNumbers(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeListSerialNumbers", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeListSerialNumbers indicates an expected call of NodeListSerialNumbers.
func (mr *MockRestClientInterfaceMockRecorder) NodeListSerialNumbers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeListSerialNumbers", reflect.TypeOf((*MockRestClientInterface)(nil).NodeListSerialNumbers), ctx)
}

// PollJobStatus mocks base method.
func (m *MockRestClientInterface) PollJobStatus(ctx context.Context, payload *models.JobLinkResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PollJobStatus", ctx, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// PollJobStatus indicates an expected call of PollJobStatus.
func (mr *MockRestClientInterfaceMockRecorder) PollJobStatus(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PollJobStatus", reflect.TypeOf((*MockRestClientInterface)(nil).PollJobStatus), ctx, payload)
}

// QtreeCount mocks base method.
func (m *MockRestClientInterface) QtreeCount(ctx context.Context, volumeName string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QtreeCount", ctx, volumeName)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QtreeCount indicates an expected call of QtreeCount.
func (mr *MockRestClientInterfaceMockRecorder) QtreeCount(ctx, volumeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QtreeCount", reflect.TypeOf((*MockRestClientInterface)(nil).QtreeCount), ctx, volumeName)
}

// QtreeCreate mocks base method.
func (m *MockRestClientInterface) QtreeCreate(ctx context.Context, name, volumeName, unixPermissions, exportPolicy, securityStyle, qosPolicy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QtreeCreate", ctx, name, volumeName, unixPermissions, exportPolicy, securityStyle, qosPolicy)
	ret0, _ := ret[0].(error)
	return ret0
}

// QtreeCreate indicates an expected call of QtreeCreate.
func (mr *MockRestClientInterfaceMockRecorder) QtreeCreate(ctx, name, volumeName, unixPermissions, exportPolicy, securityStyle, qosPolicy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QtreeCreate", reflect.TypeOf((*MockRestClientInterface)(nil).QtreeCreate), ctx, name, volumeName, unixPermissions, exportPolicy, securityStyle, qosPolicy)
}

// QtreeDestroyAsync mocks base method.
func (m *MockRestClientInterface) QtreeDestroyAsync(ctx context.Context, path string, force bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QtreeDestroyAsync", ctx, path, force)
	ret0, _ := ret[0].(error)
	return ret0
}

// QtreeDestroyAsync indicates an expected call of QtreeDestroyAsync.
func (mr *MockRestClientInterfaceMockRecorder) QtreeDestroyAsync(ctx, path, force interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QtreeDestroyAsync", reflect.TypeOf((*MockRestClientInterface)(nil).QtreeDestroyAsync), ctx, path, force)
}

// QtreeExists mocks base method.
func (m *MockRestClientInterface) QtreeExists(ctx context.Context, name, volumePrefix string) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QtreeExists", ctx, name, volumePrefix)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// QtreeExists indicates an expected call of QtreeExists.
func (mr *MockRestClientInterfaceMockRecorder) QtreeExists(ctx, name, volumePrefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QtreeExists", reflect.TypeOf((*MockRestClientInterface)(nil).QtreeExists), ctx, name, volumePrefix)
}

// QtreeGet mocks base method.
func (m *MockRestClientInterface) QtreeGet(ctx context.Context, name, volumePrefix string) (*models.Qtree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QtreeGet", ctx, name, volumePrefix)
	ret0, _ := ret[0].(*models.Qtree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QtreeGet indicates an expected call of QtreeGet.
func (mr *MockRestClientInterfaceMockRecorder) QtreeGet(ctx, name, volumePrefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QtreeGet", reflect.TypeOf((*MockRestClientInterface)(nil).QtreeGet), ctx, name, volumePrefix)
}

// QtreeGetAll mocks base method.
func (m *MockRestClientInterface) QtreeGetAll(ctx context.Context, volumePrefix string) (*storage.QtreeCollectionGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QtreeGetAll", ctx, volumePrefix)
	ret0, _ := ret[0].(*storage.QtreeCollectionGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QtreeGetAll indicates an expected call of QtreeGetAll.
func (mr *MockRestClientInterfaceMockRecorder) QtreeGetAll(ctx, volumePrefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QtreeGetAll", reflect.TypeOf((*MockRestClientInterface)(nil).QtreeGetAll), ctx, volumePrefix)
}

// QtreeGetByName mocks base method.
func (m *MockRestClientInterface) QtreeGetByName(ctx context.Context, name, volumeName string) (*models.Qtree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QtreeGetByName", ctx, name, volumeName)
	ret0, _ := ret[0].(*models.Qtree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QtreeGetByName indicates an expected call of QtreeGetByName.
func (mr *MockRestClientInterfaceMockRecorder) QtreeGetByName(ctx, name, volumeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QtreeGetByName", reflect.TypeOf((*MockRestClientInterface)(nil).QtreeGetByName), ctx, name, volumeName)
}

// QtreeGetByPath mocks base method.
func (m *MockRestClientInterface) QtreeGetByPath(ctx context.Context, path string) (*models.Qtree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QtreeGetByPath", ctx, path)
	ret0, _ := ret[0].(*models.Qtree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QtreeGetByPath indicates an expected call of QtreeGetByPath.
func (mr *MockRestClientInterfaceMockRecorder) QtreeGetByPath(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QtreeGetByPath", reflect.TypeOf((*MockRestClientInterface)(nil).QtreeGetByPath), ctx, path)
}

// QtreeList mocks base method.
func (m *MockRestClientInterface) QtreeList(ctx context.Context, prefix, volumePrefix string) (*storage.QtreeCollectionGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QtreeList", ctx, prefix, volumePrefix)
	ret0, _ := ret[0].(*storage.QtreeCollectionGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QtreeList indicates an expected call of QtreeList.
func (mr *MockRestClientInterfaceMockRecorder) QtreeList(ctx, prefix, volumePrefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QtreeList", reflect.TypeOf((*MockRestClientInterface)(nil).QtreeList), ctx, prefix, volumePrefix)
}

// QtreeModifyExportPolicy mocks base method.
func (m *MockRestClientInterface) QtreeModifyExportPolicy(ctx context.Context, name, volumeName, newExportPolicyName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QtreeModifyExportPolicy", ctx, name, volumeName, newExportPolicyName)
	ret0, _ := ret[0].(error)
	return ret0
}

// QtreeModifyExportPolicy indicates an expected call of QtreeModifyExportPolicy.
func (mr *MockRestClientInterfaceMockRecorder) QtreeModifyExportPolicy(ctx, name, volumeName, newExportPolicyName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QtreeModifyExportPolicy", reflect.TypeOf((*MockRestClientInterface)(nil).QtreeModifyExportPolicy), ctx, name, volumeName, newExportPolicyName)
}

// QtreeRename mocks base method.
func (m *MockRestClientInterface) QtreeRename(ctx context.Context, path, newPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QtreeRename", ctx, path, newPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// QtreeRename indicates an expected call of QtreeRename.
func (mr *MockRestClientInterfaceMockRecorder) QtreeRename(ctx, path, newPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QtreeRename", reflect.TypeOf((*MockRestClientInterface)(nil).QtreeRename), ctx, path, newPath)
}

// QuotaAddEntry mocks base method.
func (m *MockRestClientInterface) QuotaAddEntry(ctx context.Context, volumeName, qtreeName, quotaType, diskLimit string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuotaAddEntry", ctx, volumeName, qtreeName, quotaType, diskLimit)
	ret0, _ := ret[0].(error)
	return ret0
}

// QuotaAddEntry indicates an expected call of QuotaAddEntry.
func (mr *MockRestClientInterfaceMockRecorder) QuotaAddEntry(ctx, volumeName, qtreeName, quotaType, diskLimit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuotaAddEntry", reflect.TypeOf((*MockRestClientInterface)(nil).QuotaAddEntry), ctx, volumeName, qtreeName, quotaType, diskLimit)
}

// QuotaEntryList mocks base method.
func (m *MockRestClientInterface) QuotaEntryList(ctx context.Context, volumeName string) (*storage.QuotaRuleCollectionGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuotaEntryList", ctx, volumeName)
	ret0, _ := ret[0].(*storage.QuotaRuleCollectionGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuotaEntryList indicates an expected call of QuotaEntryList.
func (mr *MockRestClientInterfaceMockRecorder) QuotaEntryList(ctx, volumeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuotaEntryList", reflect.TypeOf((*MockRestClientInterface)(nil).QuotaEntryList), ctx, volumeName)
}

// QuotaGetEntry mocks base method.
func (m *MockRestClientInterface) QuotaGetEntry(ctx context.Context, volumeName, qtreeName, quotaType string) (*models.QuotaRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuotaGetEntry", ctx, volumeName, qtreeName, quotaType)
	ret0, _ := ret[0].(*models.QuotaRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuotaGetEntry indicates an expected call of QuotaGetEntry.
func (mr *MockRestClientInterfaceMockRecorder) QuotaGetEntry(ctx, volumeName, qtreeName, quotaType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuotaGetEntry", reflect.TypeOf((*MockRestClientInterface)(nil).QuotaGetEntry), ctx, volumeName, qtreeName, quotaType)
}

// QuotaOff mocks base method.
func (m *MockRestClientInterface) QuotaOff(ctx context.Context, volumeName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuotaOff", ctx, volumeName)
	ret0, _ := ret[0].(error)
	return ret0
}

// QuotaOff indicates an expected call of QuotaOff.
func (mr *MockRestClientInterfaceMockRecorder) QuotaOff(ctx, volumeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuotaOff", reflect.TypeOf((*MockRestClientInterface)(nil).QuotaOff), ctx, volumeName)
}

// QuotaOn mocks base method.
func (m *MockRestClientInterface) QuotaOn(ctx context.Context, volumeName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuotaOn", ctx, volumeName)
	ret0, _ := ret[0].(error)
	return ret0
}

// QuotaOn indicates an expected call of QuotaOn.
func (mr *MockRestClientInterfaceMockRecorder) QuotaOn(ctx, volumeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuotaOn", reflect.TypeOf((*MockRestClientInterface)(nil).QuotaOn), ctx, volumeName)
}

// QuotaSetEntry mocks base method.
func (m *MockRestClientInterface) QuotaSetEntry(ctx context.Context, qtreeName, volumeName, quotaType, diskLimit string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuotaSetEntry", ctx, qtreeName, volumeName, quotaType, diskLimit)
	ret0, _ := ret[0].(error)
	return ret0
}

// QuotaSetEntry indicates an expected call of QuotaSetEntry.
func (mr *MockRestClientInterfaceMockRecorder) QuotaSetEntry(ctx, qtreeName, volumeName, quotaType, diskLimit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuotaSetEntry", reflect.TypeOf((*MockRestClientInterface)(nil).QuotaSetEntry), ctx, qtreeName, volumeName, quotaType, diskLimit)
}

// SVMGetAggregateNames mocks base method.
func (m *MockRestClientInterface) SVMGetAggregateNames(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SVMGetAggregateNames", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SVMGetAggregateNames indicates an expected call of SVMGetAggregateNames.
func (mr *MockRestClientInterfaceMockRecorder) SVMGetAggregateNames(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SVMGetAggregateNames", reflect.TypeOf((*MockRestClientInterface)(nil).SVMGetAggregateNames), ctx)
}

// SVMName mocks base method.
func (m *MockRestClientInterface) SVMName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SVMName")
	ret0, _ := ret[0].(string)
	return ret0
}

// SVMName indicates an expected call of SVMName.
func (mr *MockRestClientInterfaceMockRecorder) SVMName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SVMName", reflect.TypeOf((*MockRestClientInterface)(nil).SVMName))
}

// SVMUUID mocks base method.
func (m *MockRestClientInterface) SVMUUID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SVMUUID")
	ret0, _ := ret[0].(string)
	return ret0
}

// SVMUUID indicates an expected call of SVMUUID.
func (mr *MockRestClientInterfaceMockRecorder) SVMUUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SVMUUID", reflect.TypeOf((*MockRestClientInterface)(nil).SVMUUID))
}

// SetSVMName mocks base method.
func (m *MockRestClientInterface) SetSVMName(svmName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSVMName", svmName)
}

// SetSVMName indicates an expected call of SetSVMName.
func (mr *MockRestClientInterfaceMockRecorder) SetSVMName(svmName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSVMName", reflect.TypeOf((*MockRestClientInterface)(nil).SetSVMName), svmName)
}

// SetSVMUUID mocks base method.
func (m *MockRestClientInterface) SetSVMUUID(svmUUID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSVMUUID", svmUUID)
}

// SetSVMUUID indicates an expected call of SetSVMUUID.
func (mr *MockRestClientInterfaceMockRecorder) SetSVMUUID(svmUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSVMUUID", reflect.TypeOf((*MockRestClientInterface)(nil).SetSVMUUID), svmUUID)
}

// SnapshotCreate mocks base method.
func (m *MockRestClientInterface) SnapshotCreate(ctx context.Context, volumeUUID, snapshotName string) (*storage.SnapshotCreateAccepted, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotCreate", ctx, volumeUUID, snapshotName)
	ret0, _ := ret[0].(*storage.SnapshotCreateAccepted)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapshotCreate indicates an expected call of SnapshotCreate.
func (mr *MockRestClientInterfaceMockRecorder) SnapshotCreate(ctx, volumeUUID, snapshotName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotCreate", reflect.TypeOf((*MockRestClientInterface)(nil).SnapshotCreate), ctx, volumeUUID, snapshotName)
}

// SnapshotCreateAndWait mocks base method.
func (m *MockRestClientInterface) SnapshotCreateAndWait(ctx context.Context, volumeUUID, snapshotName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotCreateAndWait", ctx, volumeUUID, snapshotName)
	ret0, _ := ret[0].(error)
	return ret0
}

// SnapshotCreateAndWait indicates an expected call of SnapshotCreateAndWait.
func (mr *MockRestClientInterfaceMockRecorder) SnapshotCreateAndWait(ctx, volumeUUID, snapshotName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotCreateAndWait", reflect.TypeOf((*MockRestClientInterface)(nil).SnapshotCreateAndWait), ctx, volumeUUID, snapshotName)
}

// SnapshotDelete mocks base method.
func (m *MockRestClientInterface) SnapshotDelete(ctx context.Context, volumeUUID, snapshotUUID string) (*storage.SnapshotDeleteAccepted, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotDelete", ctx, volumeUUID, snapshotUUID)
	ret0, _ := ret[0].(*storage.SnapshotDeleteAccepted)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapshotDelete indicates an expected call of SnapshotDelete.
func (mr *MockRestClientInterfaceMockRecorder) SnapshotDelete(ctx, volumeUUID, snapshotUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotDelete", reflect.TypeOf((*MockRestClientInterface)(nil).SnapshotDelete), ctx, volumeUUID, snapshotUUID)
}

// SnapshotGet mocks base method.
func (m *MockRestClientInterface) SnapshotGet(ctx context.Context, volumeUUID, snapshotUUID string) (*storage.SnapshotGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotGet", ctx, volumeUUID, snapshotUUID)
	ret0, _ := ret[0].(*storage.SnapshotGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapshotGet indicates an expected call of SnapshotGet.
func (mr *MockRestClientInterfaceMockRecorder) SnapshotGet(ctx, volumeUUID, snapshotUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotGet", reflect.TypeOf((*MockRestClientInterface)(nil).SnapshotGet), ctx, volumeUUID, snapshotUUID)
}

// SnapshotGetByName mocks base method.
func (m *MockRestClientInterface) SnapshotGetByName(ctx context.Context, volumeUUID, snapshotName string) (*models.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotGetByName", ctx, volumeUUID, snapshotName)
	ret0, _ := ret[0].(*models.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapshotGetByName indicates an expected call of SnapshotGetByName.
func (mr *MockRestClientInterfaceMockRecorder) SnapshotGetByName(ctx, volumeUUID, snapshotName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotGetByName", reflect.TypeOf((*MockRestClientInterface)(nil).SnapshotGetByName), ctx, volumeUUID, snapshotName)
}

// SnapshotList mocks base method.
func (m *MockRestClientInterface) SnapshotList(ctx context.Context, volumeUUID string) (*storage.SnapshotCollectionGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotList", ctx, volumeUUID)
	ret0, _ := ret[0].(*storage.SnapshotCollectionGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapshotList indicates an expected call of SnapshotList.
func (mr *MockRestClientInterfaceMockRecorder) SnapshotList(ctx, volumeUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotList", reflect.TypeOf((*MockRestClientInterface)(nil).SnapshotList), ctx, volumeUUID)
}

// SnapshotListByName mocks base method.
func (m *MockRestClientInterface) SnapshotListByName(ctx context.Context, volumeUUID, snapshotName string) (*storage.SnapshotCollectionGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotListByName", ctx, volumeUUID, snapshotName)
	ret0, _ := ret[0].(*storage.SnapshotCollectionGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapshotListByName indicates an expected call of SnapshotListByName.
func (mr *MockRestClientInterfaceMockRecorder) SnapshotListByName(ctx, volumeUUID, snapshotName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotListByName", reflect.TypeOf((*MockRestClientInterface)(nil).SnapshotListByName), ctx, volumeUUID, snapshotName)
}

// SnapshotRestoreFlexgroup mocks base method.
func (m *MockRestClientInterface) SnapshotRestoreFlexgroup(ctx context.Context, snapshotName, volumeName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotRestoreFlexgroup", ctx, snapshotName, volumeName)
	ret0, _ := ret[0].(error)
	return ret0
}

// SnapshotRestoreFlexgroup indicates an expected call of SnapshotRestoreFlexgroup.
func (mr *MockRestClientInterfaceMockRecorder) SnapshotRestoreFlexgroup(ctx, snapshotName, volumeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotRestoreFlexgroup", reflect.TypeOf((*MockRestClientInterface)(nil).SnapshotRestoreFlexgroup), ctx, snapshotName, volumeName)
}

// SnapshotRestoreVolume mocks base method.
func (m *MockRestClientInterface) SnapshotRestoreVolume(ctx context.Context, snapshotName, volumeName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotRestoreVolume", ctx, snapshotName, volumeName)
	ret0, _ := ret[0].(error)
	return ret0
}

// SnapshotRestoreVolume indicates an expected call of SnapshotRestoreVolume.
func (mr *MockRestClientInterfaceMockRecorder) SnapshotRestoreVolume(ctx, snapshotName, volumeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotRestoreVolume", reflect.TypeOf((*MockRestClientInterface)(nil).SnapshotRestoreVolume), ctx, snapshotName, volumeName)
}

// SupportsFeature mocks base method.
func (m *MockRestClientInterface) SupportsFeature(ctx context.Context, feature api.Feature) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportsFeature", ctx, feature)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SupportsFeature indicates an expected call of SupportsFeature.
func (mr *MockRestClientInterfaceMockRecorder) SupportsFeature(ctx, feature interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportsFeature", reflect.TypeOf((*MockRestClientInterface)(nil).SupportsFeature), ctx, feature)
}

// SvmGet mocks base method.
func (m *MockRestClientInterface) SvmGet(ctx context.Context, uuid string) (*svm.SvmGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SvmGet", ctx, uuid)
	ret0, _ := ret[0].(*svm.SvmGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SvmGet indicates an expected call of SvmGet.
func (mr *MockRestClientInterfaceMockRecorder) SvmGet(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SvmGet", reflect.TypeOf((*MockRestClientInterface)(nil).SvmGet), ctx, uuid)
}

// SvmGetByName mocks base method.
func (m *MockRestClientInterface) SvmGetByName(ctx context.Context, svmName string) (*models.Svm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SvmGetByName", ctx, svmName)
	ret0, _ := ret[0].(*models.Svm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SvmGetByName indicates an expected call of SvmGetByName.
func (mr *MockRestClientInterfaceMockRecorder) SvmGetByName(ctx, svmName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SvmGetByName", reflect.TypeOf((*MockRestClientInterface)(nil).SvmGetByName), ctx, svmName)
}

// SvmList mocks base method.
func (m *MockRestClientInterface) SvmList(ctx context.Context, pattern string) (*svm.SvmCollectionGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SvmList", ctx, pattern)
	ret0, _ := ret[0].(*svm.SvmCollectionGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SvmList indicates an expected call of SvmList.
func (mr *MockRestClientInterfaceMockRecorder) SvmList(ctx, pattern interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SvmList", reflect.TypeOf((*MockRestClientInterface)(nil).SvmList), ctx, pattern)
}

// SystemGetOntapVersion mocks base method.
func (m *MockRestClientInterface) SystemGetOntapVersion(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SystemGetOntapVersion", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SystemGetOntapVersion indicates an expected call of SystemGetOntapVersion.
func (mr *MockRestClientInterfaceMockRecorder) SystemGetOntapVersion(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SystemGetOntapVersion", reflect.TypeOf((*MockRestClientInterface)(nil).SystemGetOntapVersion), ctx)
}

// TieringPolicyValue mocks base method.
func (m *MockRestClientInterface) TieringPolicyValue(ctx context.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TieringPolicyValue", ctx)
	ret0, _ := ret[0].(string)
	return ret0
}

// TieringPolicyValue indicates an expected call of TieringPolicyValue.
func (mr *MockRestClientInterfaceMockRecorder) TieringPolicyValue(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TieringPolicyValue", reflect.TypeOf((*MockRestClientInterface)(nil).TieringPolicyValue), ctx)
}

// VolumeCloneCreate mocks base method.
func (m *MockRestClientInterface) VolumeCloneCreate(ctx context.Context, cloneName, sourceVolumeName, snapshotName string) (*storage.VolumeCreateAccepted, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeCloneCreate", ctx, cloneName, sourceVolumeName, snapshotName)
	ret0, _ := ret[0].(*storage.VolumeCreateAccepted)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeCloneCreate indicates an expected call of VolumeCloneCreate.
func (mr *MockRestClientInterfaceMockRecorder) VolumeCloneCreate(ctx, cloneName, sourceVolumeName, snapshotName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeCloneCreate", reflect.TypeOf((*MockRestClientInterface)(nil).VolumeCloneCreate), ctx, cloneName, sourceVolumeName, snapshotName)
}

// VolumeCloneCreateAsync mocks base method.
func (m *MockRestClientInterface) VolumeCloneCreateAsync(ctx context.Context, cloneName, sourceVolumeName, snapshot string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeCloneCreateAsync", ctx, cloneName, sourceVolumeName, snapshot)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeCloneCreateAsync indicates an expected call of VolumeCloneCreateAsync.
func (mr *MockRestClientInterfaceMockRecorder) VolumeCloneCreateAsync(ctx, cloneName, sourceVolumeName, snapshot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeCloneCreateAsync", reflect.TypeOf((*MockRestClientInterface)(nil).VolumeCloneCreateAsync), ctx, cloneName, sourceVolumeName, snapshot)
}

// VolumeCloneSplitStart mocks base method.
func (m *MockRestClientInterface) VolumeCloneSplitStart(ctx context.Context, volumeName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeCloneSplitStart", ctx, volumeName)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeCloneSplitStart indicates an expected call of VolumeCloneSplitStart.
func (mr *MockRestClientInterfaceMockRecorder) VolumeCloneSplitStart(ctx, volumeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeCloneSplitStart", reflect.TypeOf((*MockRestClientInterface)(nil).VolumeCloneSplitStart), ctx, volumeName)
}

// VolumeCreate mocks base method.
func (m *MockRestClientInterface) VolumeCreate(ctx context.Context, name, aggregateName, size, spaceReserve, snapshotPolicy, unixPermissions, exportPolicy, securityStyle, tieringPolicy, comment string, qosPolicyGroup api.QosPolicyGroup, encrypt *bool, snapshotReserve int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeCreate", ctx, name, aggregateName, size, spaceReserve, snapshotPolicy, unixPermissions, exportPolicy, securityStyle, tieringPolicy, comment, qosPolicyGroup, encrypt, snapshotReserve)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeCreate indicates an expected call of VolumeCreate.
func (mr *MockRestClientInterfaceMockRecorder) VolumeCreate(ctx, name, aggregateName, size, spaceReserve, snapshotPolicy, unixPermissions, exportPolicy, securityStyle, tieringPolicy, comment, qosPolicyGroup, encrypt, snapshotReserve interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeCreate", reflect.TypeOf((*MockRestClientInterface)(nil).VolumeCreate), ctx, name, aggregateName, size, spaceReserve, snapshotPolicy, unixPermissions, exportPolicy, securityStyle, tieringPolicy, comment, qosPolicyGroup, encrypt, snapshotReserve)
}

// VolumeDestroy mocks base method.
func (m *MockRestClientInterface) VolumeDestroy(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeDestroy", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeDestroy indicates an expected call of VolumeDestroy.
func (mr *MockRestClientInterfaceMockRecorder) VolumeDestroy(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeDestroy", reflect.TypeOf((*MockRestClientInterface)(nil).VolumeDestroy), ctx, name)
}

// VolumeDisableSnapshotDirectoryAccess mocks base method.
func (m *MockRestClientInterface) VolumeDisableSnapshotDirectoryAccess(ctx context.Context, volumeName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeDisableSnapshotDirectoryAccess", ctx, volumeName)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeDisableSnapshotDirectoryAccess indicates an expected call of VolumeDisableSnapshotDirectoryAccess.
func (mr *MockRestClientInterfaceMockRecorder) VolumeDisableSnapshotDirectoryAccess(ctx, volumeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeDisableSnapshotDirectoryAccess", reflect.TypeOf((*MockRestClientInterface)(nil).VolumeDisableSnapshotDirectoryAccess), ctx, volumeName)
}

// VolumeExists mocks base method.
func (m *MockRestClientInterface) VolumeExists(ctx context.Context, volumeName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeExists", ctx, volumeName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeExists indicates an expected call of VolumeExists.
func (mr *MockRestClientInterfaceMockRecorder) VolumeExists(ctx, volumeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeExists", reflect.TypeOf((*MockRestClientInterface)(nil).VolumeExists), ctx, volumeName)
}

// VolumeGetByName mocks base method.
func (m *MockRestClientInterface) VolumeGetByName(ctx context.Context, volumeName string) (*models.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeGetByName", ctx, volumeName)
	ret0, _ := ret[0].(*models.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeGetByName indicates an expected call of VolumeGetByName.
func (mr *MockRestClientInterfaceMockRecorder) VolumeGetByName(ctx, volumeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeGetByName", reflect.TypeOf((*MockRestClientInterface)(nil).VolumeGetByName), ctx, volumeName)
}

// VolumeList mocks base method.
func (m *MockRestClientInterface) VolumeList(ctx context.Context, pattern string) (*storage.VolumeCollectionGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeList", ctx, pattern)
	ret0, _ := ret[0].(*storage.VolumeCollectionGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeList indicates an expected call of VolumeList.
func (mr *MockRestClientInterfaceMockRecorder) VolumeList(ctx, pattern interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeList", reflect.TypeOf((*MockRestClientInterface)(nil).VolumeList), ctx, pattern)
}

// VolumeListAllBackedBySnapshot mocks base method.
func (m *MockRestClientInterface) VolumeListAllBackedBySnapshot(ctx context.Context, volumeName, snapshotName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeListAllBackedBySnapshot", ctx, volumeName, snapshotName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeListAllBackedBySnapshot indicates an expected call of VolumeListAllBackedBySnapshot.
func (mr *MockRestClientInterfaceMockRecorder) VolumeListAllBackedBySnapshot(ctx, volumeName, snapshotName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeListAllBackedBySnapshot", reflect.TypeOf((*MockRestClientInterface)(nil).VolumeListAllBackedBySnapshot), ctx, volumeName, snapshotName)
}

// VolumeListByAttrs mocks base method.
func (m *MockRestClientInterface) VolumeListByAttrs(ctx context.Context, volumeAttrs *api.Volume) (api.Volumes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeListByAttrs", ctx, volumeAttrs)
	ret0, _ := ret[0].(api.Volumes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeListByAttrs indicates an expected call of VolumeListByAttrs.
func (mr *MockRestClientInterfaceMockRecorder) VolumeListByAttrs(ctx, volumeAttrs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeListByAttrs", reflect.TypeOf((*MockRestClientInterface)(nil).VolumeListByAttrs), ctx, volumeAttrs)
}

// VolumeModifyExportPolicy mocks base method.
func (m *MockRestClientInterface) VolumeModifyExportPolicy(ctx context.Context, volumeName, exportPolicyName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeModifyExportPolicy", ctx, volumeName, exportPolicyName)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeModifyExportPolicy indicates an expected call of VolumeModifyExportPolicy.
func (mr *MockRestClientInterfaceMockRecorder) VolumeModifyExportPolicy(ctx, volumeName, exportPolicyName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeModifyExportPolicy", reflect.TypeOf((*MockRestClientInterface)(nil).VolumeModifyExportPolicy), ctx, volumeName, exportPolicyName)
}

// VolumeModifyUnixPermissions mocks base method.
func (m *MockRestClientInterface) VolumeModifyUnixPermissions(ctx context.Context, volumeName, unixPermissions string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeModifyUnixPermissions", ctx, volumeName, unixPermissions)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeModifyUnixPermissions indicates an expected call of VolumeModifyUnixPermissions.
func (mr *MockRestClientInterfaceMockRecorder) VolumeModifyUnixPermissions(ctx, volumeName, unixPermissions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeModifyUnixPermissions", reflect.TypeOf((*MockRestClientInterface)(nil).VolumeModifyUnixPermissions), ctx, volumeName, unixPermissions)
}

// VolumeMount mocks base method.
func (m *MockRestClientInterface) VolumeMount(ctx context.Context, volumeName, junctionPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeMount", ctx, volumeName, junctionPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeMount indicates an expected call of VolumeMount.
func (mr *MockRestClientInterfaceMockRecorder) VolumeMount(ctx, volumeName, junctionPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeMount", reflect.TypeOf((*MockRestClientInterface)(nil).VolumeMount), ctx, volumeName, junctionPath)
}

// VolumeRename mocks base method.
func (m *MockRestClientInterface) VolumeRename(ctx context.Context, volumeName, newVolumeName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeRename", ctx, volumeName, newVolumeName)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeRename indicates an expected call of VolumeRename.
func (mr *MockRestClientInterfaceMockRecorder) VolumeRename(ctx, volumeName, newVolumeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeRename", reflect.TypeOf((*MockRestClientInterface)(nil).VolumeRename), ctx, volumeName, newVolumeName)
}

// VolumeSetComment mocks base method.
func (m *MockRestClientInterface) VolumeSetComment(ctx context.Context, volumeName, newVolumeComment string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeSetComment", ctx, volumeName, newVolumeComment)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeSetComment indicates an expected call of VolumeSetComment.
func (mr *MockRestClientInterfaceMockRecorder) VolumeSetComment(ctx, volumeName, newVolumeComment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeSetComment", reflect.TypeOf((*MockRestClientInterface)(nil).VolumeSetComment), ctx, volumeName, newVolumeComment)
}

// VolumeSetQosPolicyGroupName mocks base method.
func (m *MockRestClientInterface) VolumeSetQosPolicyGroupName(ctx context.Context, volumeName string, qosPolicyGroup api.QosPolicyGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeSetQosPolicyGroupName", ctx, volumeName, qosPolicyGroup)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeSetQosPolicyGroupName indicates an expected call of VolumeSetQosPolicyGroupName.
func (mr *MockRestClientInterfaceMockRecorder) VolumeSetQosPolicyGroupName(ctx, volumeName, qosPolicyGroup interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeSetQosPolicyGroupName", reflect.TypeOf((*MockRestClientInterface)(nil).VolumeSetQosPolicyGroupName), ctx, volumeName, qosPolicyGroup)
}

// VolumeSetSize mocks base method.
func (m *MockRestClientInterface) VolumeSetSize(ctx context.Context, volumeName, newSize string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeSetSize", ctx, volumeName, newSize)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeSetSize indicates an expected call of VolumeSetSize.
func (mr *MockRestClientInterfaceMockRecorder) VolumeSetSize(ctx, volumeName, newSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeSetSize", reflect.TypeOf((*MockRestClientInterface)(nil).VolumeSetSize), ctx, volumeName, newSize)
}

// VolumeSize mocks base method.
func (m *MockRestClientInterface) VolumeSize(ctx context.Context, volumeName string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeSize", ctx, volumeName)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeSize indicates an expected call of VolumeSize.
func (mr *MockRestClientInterfaceMockRecorder) VolumeSize(ctx, volumeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeSize", reflect.TypeOf((*MockRestClientInterface)(nil).VolumeSize), ctx, volumeName)
}

// VolumeUsedSize mocks base method.
func (m *MockRestClientInterface) VolumeUsedSize(ctx context.Context, volumeName string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeUsedSize", ctx, volumeName)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeUsedSize indicates an expected call of VolumeUsedSize.
func (mr *MockRestClientInterfaceMockRecorder) VolumeUsedSize(ctx, volumeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeUsedSize", reflect.TypeOf((*MockRestClientInterface)(nil).VolumeUsedSize), ctx, volumeName)
}
