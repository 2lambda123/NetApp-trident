// Code generated by MockGen. DO NOT EDIT.
// Source: abstraction.go

// Package mock_api is a generated GoMock package.
package mock_api

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/netapp/trident/storage_drivers/ontap/api"
)

// MockOntapAPI is a mock of OntapAPI interface.
type MockOntapAPI struct {
	ctrl     *gomock.Controller
	recorder *MockOntapAPIMockRecorder
}

// MockOntapAPIMockRecorder is the mock recorder for MockOntapAPI.
type MockOntapAPIMockRecorder struct {
	mock *MockOntapAPI
}

// NewMockOntapAPI creates a new mock instance.
func NewMockOntapAPI(ctrl *gomock.Controller) *MockOntapAPI {
	mock := &MockOntapAPI{ctrl: ctrl}
	mock.recorder = &MockOntapAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOntapAPI) EXPECT() *MockOntapAPIMockRecorder {
	return m.recorder
}

// APIVersion mocks base method.
func (m *MockOntapAPI) APIVersion(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIVersion", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// APIVersion indicates an expected call of APIVersion.
func (mr *MockOntapAPIMockRecorder) APIVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIVersion", reflect.TypeOf((*MockOntapAPI)(nil).APIVersion), arg0)
}

// EmsAutosupportLog mocks base method.
func (m *MockOntapAPI) EmsAutosupportLog(ctx context.Context, driverName, appVersion string, autoSupport bool, category, computerName, eventDescription string, eventID int, eventSource string, logLevel int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmsAutosupportLog", ctx, driverName, appVersion, autoSupport, category, computerName, eventDescription, eventID, eventSource, logLevel)
}

// EmsAutosupportLog indicates an expected call of EmsAutosupportLog.
func (mr *MockOntapAPIMockRecorder) EmsAutosupportLog(ctx, driverName, appVersion, autoSupport, category, computerName, eventDescription, eventID, eventSource, logLevel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmsAutosupportLog", reflect.TypeOf((*MockOntapAPI)(nil).EmsAutosupportLog), ctx, driverName, appVersion, autoSupport, category, computerName, eventDescription, eventID, eventSource, logLevel)
}

// EnsureIgroupAdded mocks base method.
func (m *MockOntapAPI) EnsureIgroupAdded(ctx context.Context, initiatorGroupName, initiator string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureIgroupAdded", ctx, initiatorGroupName, initiator)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureIgroupAdded indicates an expected call of EnsureIgroupAdded.
func (mr *MockOntapAPIMockRecorder) EnsureIgroupAdded(ctx, initiatorGroupName, initiator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureIgroupAdded", reflect.TypeOf((*MockOntapAPI)(nil).EnsureIgroupAdded), ctx, initiatorGroupName, initiator)
}

// EnsureLunMapped mocks base method.
func (m *MockOntapAPI) EnsureLunMapped(ctx context.Context, initiatorGroupName, lunPath string, importNotManaged bool) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureLunMapped", ctx, initiatorGroupName, lunPath, importNotManaged)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureLunMapped indicates an expected call of EnsureLunMapped.
func (mr *MockOntapAPIMockRecorder) EnsureLunMapped(ctx, initiatorGroupName, lunPath, importNotManaged interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureLunMapped", reflect.TypeOf((*MockOntapAPI)(nil).EnsureLunMapped), ctx, initiatorGroupName, lunPath, importNotManaged)
}

// ExportPolicyCreate mocks base method.
func (m *MockOntapAPI) ExportPolicyCreate(ctx context.Context, policy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportPolicyCreate", ctx, policy)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExportPolicyCreate indicates an expected call of ExportPolicyCreate.
func (mr *MockOntapAPIMockRecorder) ExportPolicyCreate(ctx, policy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportPolicyCreate", reflect.TypeOf((*MockOntapAPI)(nil).ExportPolicyCreate), ctx, policy)
}

// ExportPolicyDestroy mocks base method.
func (m *MockOntapAPI) ExportPolicyDestroy(ctx context.Context, policy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportPolicyDestroy", ctx, policy)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExportPolicyDestroy indicates an expected call of ExportPolicyDestroy.
func (mr *MockOntapAPIMockRecorder) ExportPolicyDestroy(ctx, policy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportPolicyDestroy", reflect.TypeOf((*MockOntapAPI)(nil).ExportPolicyDestroy), ctx, policy)
}

// ExportPolicyExists mocks base method.
func (m *MockOntapAPI) ExportPolicyExists(ctx context.Context, policyName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportPolicyExists", ctx, policyName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportPolicyExists indicates an expected call of ExportPolicyExists.
func (mr *MockOntapAPIMockRecorder) ExportPolicyExists(ctx, policyName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportPolicyExists", reflect.TypeOf((*MockOntapAPI)(nil).ExportPolicyExists), ctx, policyName)
}

// ExportRuleCreate mocks base method.
func (m *MockOntapAPI) ExportRuleCreate(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportRuleCreate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExportRuleCreate indicates an expected call of ExportRuleCreate.
func (mr *MockOntapAPIMockRecorder) ExportRuleCreate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportRuleCreate", reflect.TypeOf((*MockOntapAPI)(nil).ExportRuleCreate), arg0, arg1, arg2, arg3)
}

// ExportRuleDestroy mocks base method.
func (m *MockOntapAPI) ExportRuleDestroy(ctx context.Context, policyName string, ruleIndex int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportRuleDestroy", ctx, policyName, ruleIndex)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExportRuleDestroy indicates an expected call of ExportRuleDestroy.
func (mr *MockOntapAPIMockRecorder) ExportRuleDestroy(ctx, policyName, ruleIndex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportRuleDestroy", reflect.TypeOf((*MockOntapAPI)(nil).ExportRuleDestroy), ctx, policyName, ruleIndex)
}

// ExportRuleList mocks base method.
func (m *MockOntapAPI) ExportRuleList(ctx context.Context, policyName string) (map[string]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportRuleList", ctx, policyName)
	ret0, _ := ret[0].(map[string]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportRuleList indicates an expected call of ExportRuleList.
func (mr *MockOntapAPIMockRecorder) ExportRuleList(ctx, policyName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportRuleList", reflect.TypeOf((*MockOntapAPI)(nil).ExportRuleList), ctx, policyName)
}

// FlexgroupCloneSplitStart mocks base method.
func (m *MockOntapAPI) FlexgroupCloneSplitStart(ctx context.Context, cloneName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexgroupCloneSplitStart", ctx, cloneName)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlexgroupCloneSplitStart indicates an expected call of FlexgroupCloneSplitStart.
func (mr *MockOntapAPIMockRecorder) FlexgroupCloneSplitStart(ctx, cloneName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexgroupCloneSplitStart", reflect.TypeOf((*MockOntapAPI)(nil).FlexgroupCloneSplitStart), ctx, cloneName)
}

// FlexgroupCreate mocks base method.
func (m *MockOntapAPI) FlexgroupCreate(ctx context.Context, volume api.Volume) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexgroupCreate", ctx, volume)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlexgroupCreate indicates an expected call of FlexgroupCreate.
func (mr *MockOntapAPIMockRecorder) FlexgroupCreate(ctx, volume interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexgroupCreate", reflect.TypeOf((*MockOntapAPI)(nil).FlexgroupCreate), ctx, volume)
}

// FlexgroupDestroy mocks base method.
func (m *MockOntapAPI) FlexgroupDestroy(ctx context.Context, volumeName string, force bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexgroupDestroy", ctx, volumeName, force)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlexgroupDestroy indicates an expected call of FlexgroupDestroy.
func (mr *MockOntapAPIMockRecorder) FlexgroupDestroy(ctx, volumeName, force interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexgroupDestroy", reflect.TypeOf((*MockOntapAPI)(nil).FlexgroupDestroy), ctx, volumeName, force)
}

// FlexgroupDisableSnapshotDirectoryAccess mocks base method.
func (m *MockOntapAPI) FlexgroupDisableSnapshotDirectoryAccess(ctx context.Context, volumeName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexgroupDisableSnapshotDirectoryAccess", ctx, volumeName)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlexgroupDisableSnapshotDirectoryAccess indicates an expected call of FlexgroupDisableSnapshotDirectoryAccess.
func (mr *MockOntapAPIMockRecorder) FlexgroupDisableSnapshotDirectoryAccess(ctx, volumeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexgroupDisableSnapshotDirectoryAccess", reflect.TypeOf((*MockOntapAPI)(nil).FlexgroupDisableSnapshotDirectoryAccess), ctx, volumeName)
}

// FlexgroupExists mocks base method.
func (m *MockOntapAPI) FlexgroupExists(ctx context.Context, volumeName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexgroupExists", ctx, volumeName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlexgroupExists indicates an expected call of FlexgroupExists.
func (mr *MockOntapAPIMockRecorder) FlexgroupExists(ctx, volumeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexgroupExists", reflect.TypeOf((*MockOntapAPI)(nil).FlexgroupExists), ctx, volumeName)
}

// FlexgroupInfo mocks base method.
func (m *MockOntapAPI) FlexgroupInfo(ctx context.Context, volumeName string) (*api.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexgroupInfo", ctx, volumeName)
	ret0, _ := ret[0].(*api.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlexgroupInfo indicates an expected call of FlexgroupInfo.
func (mr *MockOntapAPIMockRecorder) FlexgroupInfo(ctx, volumeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexgroupInfo", reflect.TypeOf((*MockOntapAPI)(nil).FlexgroupInfo), ctx, volumeName)
}

// FlexgroupListByPrefix mocks base method.
func (m *MockOntapAPI) FlexgroupListByPrefix(ctx context.Context, prefix string) (api.Volumes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexgroupListByPrefix", ctx, prefix)
	ret0, _ := ret[0].(api.Volumes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlexgroupListByPrefix indicates an expected call of FlexgroupListByPrefix.
func (mr *MockOntapAPIMockRecorder) FlexgroupListByPrefix(ctx, prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexgroupListByPrefix", reflect.TypeOf((*MockOntapAPI)(nil).FlexgroupListByPrefix), ctx, prefix)
}

// FlexgroupModifyExportPolicy mocks base method.
func (m *MockOntapAPI) FlexgroupModifyExportPolicy(ctx context.Context, volumeName, policyName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexgroupModifyExportPolicy", ctx, volumeName, policyName)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlexgroupModifyExportPolicy indicates an expected call of FlexgroupModifyExportPolicy.
func (mr *MockOntapAPIMockRecorder) FlexgroupModifyExportPolicy(ctx, volumeName, policyName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexgroupModifyExportPolicy", reflect.TypeOf((*MockOntapAPI)(nil).FlexgroupModifyExportPolicy), ctx, volumeName, policyName)
}

// FlexgroupModifyUnixPermissions mocks base method.
func (m *MockOntapAPI) FlexgroupModifyUnixPermissions(ctx context.Context, volumeNameInternal, volumeNameExternal, unixPermissions string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexgroupModifyUnixPermissions", ctx, volumeNameInternal, volumeNameExternal, unixPermissions)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlexgroupModifyUnixPermissions indicates an expected call of FlexgroupModifyUnixPermissions.
func (mr *MockOntapAPIMockRecorder) FlexgroupModifyUnixPermissions(ctx, volumeNameInternal, volumeNameExternal, unixPermissions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexgroupModifyUnixPermissions", reflect.TypeOf((*MockOntapAPI)(nil).FlexgroupModifyUnixPermissions), ctx, volumeNameInternal, volumeNameExternal, unixPermissions)
}

// FlexgroupMount mocks base method.
func (m *MockOntapAPI) FlexgroupMount(ctx context.Context, name, junctionPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexgroupMount", ctx, name, junctionPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlexgroupMount indicates an expected call of FlexgroupMount.
func (mr *MockOntapAPIMockRecorder) FlexgroupMount(ctx, name, junctionPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexgroupMount", reflect.TypeOf((*MockOntapAPI)(nil).FlexgroupMount), ctx, name, junctionPath)
}

// FlexgroupSetComment mocks base method.
func (m *MockOntapAPI) FlexgroupSetComment(ctx context.Context, volumeNameInternal, volumeNameExternal, comment string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexgroupSetComment", ctx, volumeNameInternal, volumeNameExternal, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlexgroupSetComment indicates an expected call of FlexgroupSetComment.
func (mr *MockOntapAPIMockRecorder) FlexgroupSetComment(ctx, volumeNameInternal, volumeNameExternal, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexgroupSetComment", reflect.TypeOf((*MockOntapAPI)(nil).FlexgroupSetComment), ctx, volumeNameInternal, volumeNameExternal, comment)
}

// FlexgroupSetQosPolicyGroupName mocks base method.
func (m *MockOntapAPI) FlexgroupSetQosPolicyGroupName(ctx context.Context, name string, qos api.QosPolicyGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexgroupSetQosPolicyGroupName", ctx, name, qos)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlexgroupSetQosPolicyGroupName indicates an expected call of FlexgroupSetQosPolicyGroupName.
func (mr *MockOntapAPIMockRecorder) FlexgroupSetQosPolicyGroupName(ctx, name, qos interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexgroupSetQosPolicyGroupName", reflect.TypeOf((*MockOntapAPI)(nil).FlexgroupSetQosPolicyGroupName), ctx, name, qos)
}

// FlexgroupSetSize mocks base method.
func (m *MockOntapAPI) FlexgroupSetSize(ctx context.Context, name, newSize string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexgroupSetSize", ctx, name, newSize)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlexgroupSetSize indicates an expected call of FlexgroupSetSize.
func (mr *MockOntapAPIMockRecorder) FlexgroupSetSize(ctx, name, newSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexgroupSetSize", reflect.TypeOf((*MockOntapAPI)(nil).FlexgroupSetSize), ctx, name, newSize)
}

// FlexgroupSize mocks base method.
func (m *MockOntapAPI) FlexgroupSize(ctx context.Context, volumeName string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexgroupSize", ctx, volumeName)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlexgroupSize indicates an expected call of FlexgroupSize.
func (mr *MockOntapAPIMockRecorder) FlexgroupSize(ctx, volumeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexgroupSize", reflect.TypeOf((*MockOntapAPI)(nil).FlexgroupSize), ctx, volumeName)
}

// FlexgroupSnapshotCreate mocks base method.
func (m *MockOntapAPI) FlexgroupSnapshotCreate(ctx context.Context, snapshotName, sourceVolume string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexgroupSnapshotCreate", ctx, snapshotName, sourceVolume)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlexgroupSnapshotCreate indicates an expected call of FlexgroupSnapshotCreate.
func (mr *MockOntapAPIMockRecorder) FlexgroupSnapshotCreate(ctx, snapshotName, sourceVolume interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexgroupSnapshotCreate", reflect.TypeOf((*MockOntapAPI)(nil).FlexgroupSnapshotCreate), ctx, snapshotName, sourceVolume)
}

// FlexgroupSnapshotDelete mocks base method.
func (m *MockOntapAPI) FlexgroupSnapshotDelete(ctx context.Context, snapshotName, sourceVolume string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexgroupSnapshotDelete", ctx, snapshotName, sourceVolume)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlexgroupSnapshotDelete indicates an expected call of FlexgroupSnapshotDelete.
func (mr *MockOntapAPIMockRecorder) FlexgroupSnapshotDelete(ctx, snapshotName, sourceVolume interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexgroupSnapshotDelete", reflect.TypeOf((*MockOntapAPI)(nil).FlexgroupSnapshotDelete), ctx, snapshotName, sourceVolume)
}

// FlexgroupSnapshotList mocks base method.
func (m *MockOntapAPI) FlexgroupSnapshotList(ctx context.Context, sourceVolume string) (api.Snapshots, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexgroupSnapshotList", ctx, sourceVolume)
	ret0, _ := ret[0].(api.Snapshots)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlexgroupSnapshotList indicates an expected call of FlexgroupSnapshotList.
func (mr *MockOntapAPIMockRecorder) FlexgroupSnapshotList(ctx, sourceVolume interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexgroupSnapshotList", reflect.TypeOf((*MockOntapAPI)(nil).FlexgroupSnapshotList), ctx, sourceVolume)
}

// FlexgroupUnmount mocks base method.
func (m *MockOntapAPI) FlexgroupUnmount(ctx context.Context, name string, force bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexgroupUnmount", ctx, name, force)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlexgroupUnmount indicates an expected call of FlexgroupUnmount.
func (mr *MockOntapAPIMockRecorder) FlexgroupUnmount(ctx, name, force interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexgroupUnmount", reflect.TypeOf((*MockOntapAPI)(nil).FlexgroupUnmount), ctx, name, force)
}

// FlexgroupUsedSize mocks base method.
func (m *MockOntapAPI) FlexgroupUsedSize(ctx context.Context, volumeName string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexgroupUsedSize", ctx, volumeName)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlexgroupUsedSize indicates an expected call of FlexgroupUsedSize.
func (mr *MockOntapAPIMockRecorder) FlexgroupUsedSize(ctx, volumeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexgroupUsedSize", reflect.TypeOf((*MockOntapAPI)(nil).FlexgroupUsedSize), ctx, volumeName)
}

// GetSLMDataLifs mocks base method.
func (m *MockOntapAPI) GetSLMDataLifs(ctx context.Context, ips, reportingNodeNames []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSLMDataLifs", ctx, ips, reportingNodeNames)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSLMDataLifs indicates an expected call of GetSLMDataLifs.
func (mr *MockOntapAPIMockRecorder) GetSLMDataLifs(ctx, ips, reportingNodeNames interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSLMDataLifs", reflect.TypeOf((*MockOntapAPI)(nil).GetSLMDataLifs), ctx, ips, reportingNodeNames)
}

// GetSVMAggregateAttributes mocks base method.
func (m *MockOntapAPI) GetSVMAggregateAttributes(ctx context.Context) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSVMAggregateAttributes", ctx)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSVMAggregateAttributes indicates an expected call of GetSVMAggregateAttributes.
func (mr *MockOntapAPIMockRecorder) GetSVMAggregateAttributes(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSVMAggregateAttributes", reflect.TypeOf((*MockOntapAPI)(nil).GetSVMAggregateAttributes), ctx)
}

// GetSVMAggregateNames mocks base method.
func (m *MockOntapAPI) GetSVMAggregateNames(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSVMAggregateNames", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSVMAggregateNames indicates an expected call of GetSVMAggregateNames.
func (mr *MockOntapAPIMockRecorder) GetSVMAggregateNames(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSVMAggregateNames", reflect.TypeOf((*MockOntapAPI)(nil).GetSVMAggregateNames), ctx)
}

// GetSVMAggregateSpace mocks base method.
func (m *MockOntapAPI) GetSVMAggregateSpace(ctx context.Context, aggregate string) ([]api.SVMAggregateSpace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSVMAggregateSpace", ctx, aggregate)
	ret0, _ := ret[0].([]api.SVMAggregateSpace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSVMAggregateSpace indicates an expected call of GetSVMAggregateSpace.
func (mr *MockOntapAPIMockRecorder) GetSVMAggregateSpace(ctx, aggregate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSVMAggregateSpace", reflect.TypeOf((*MockOntapAPI)(nil).GetSVMAggregateSpace), ctx, aggregate)
}

// GetSVMPeers mocks base method.
func (m *MockOntapAPI) GetSVMPeers(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSVMPeers", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSVMPeers indicates an expected call of GetSVMPeers.
func (mr *MockOntapAPIMockRecorder) GetSVMPeers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSVMPeers", reflect.TypeOf((*MockOntapAPI)(nil).GetSVMPeers), ctx)
}

// GetSVMUUID mocks base method.
func (m *MockOntapAPI) GetSVMUUID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSVMUUID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSVMUUID indicates an expected call of GetSVMUUID.
func (mr *MockOntapAPIMockRecorder) GetSVMUUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSVMUUID", reflect.TypeOf((*MockOntapAPI)(nil).GetSVMUUID))
}

// IgroupCreate mocks base method.
func (m *MockOntapAPI) IgroupCreate(ctx context.Context, initiatorGroupName, initiatorGroupType, osType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IgroupCreate", ctx, initiatorGroupName, initiatorGroupType, osType)
	ret0, _ := ret[0].(error)
	return ret0
}

// IgroupCreate indicates an expected call of IgroupCreate.
func (mr *MockOntapAPIMockRecorder) IgroupCreate(ctx, initiatorGroupName, initiatorGroupType, osType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IgroupCreate", reflect.TypeOf((*MockOntapAPI)(nil).IgroupCreate), ctx, initiatorGroupName, initiatorGroupType, osType)
}

// IgroupDestroy mocks base method.
func (m *MockOntapAPI) IgroupDestroy(ctx context.Context, initiatorGroupName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IgroupDestroy", ctx, initiatorGroupName)
	ret0, _ := ret[0].(error)
	return ret0
}

// IgroupDestroy indicates an expected call of IgroupDestroy.
func (mr *MockOntapAPIMockRecorder) IgroupDestroy(ctx, initiatorGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IgroupDestroy", reflect.TypeOf((*MockOntapAPI)(nil).IgroupDestroy), ctx, initiatorGroupName)
}

// IgroupGetByName mocks base method.
func (m *MockOntapAPI) IgroupGetByName(ctx context.Context, initiatorGroupName string) (map[string]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IgroupGetByName", ctx, initiatorGroupName)
	ret0, _ := ret[0].(map[string]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IgroupGetByName indicates an expected call of IgroupGetByName.
func (mr *MockOntapAPIMockRecorder) IgroupGetByName(ctx, initiatorGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IgroupGetByName", reflect.TypeOf((*MockOntapAPI)(nil).IgroupGetByName), ctx, initiatorGroupName)
}

// IgroupListLUNsMapped mocks base method.
func (m *MockOntapAPI) IgroupListLUNsMapped(ctx context.Context, initiatorGroupName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IgroupListLUNsMapped", ctx, initiatorGroupName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IgroupListLUNsMapped indicates an expected call of IgroupListLUNsMapped.
func (mr *MockOntapAPIMockRecorder) IgroupListLUNsMapped(ctx, initiatorGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IgroupListLUNsMapped", reflect.TypeOf((*MockOntapAPI)(nil).IgroupListLUNsMapped), ctx, initiatorGroupName)
}

// IgroupRemove mocks base method.
func (m *MockOntapAPI) IgroupRemove(ctx context.Context, initiatorGroupName, initiator string, force bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IgroupRemove", ctx, initiatorGroupName, initiator, force)
	ret0, _ := ret[0].(error)
	return ret0
}

// IgroupRemove indicates an expected call of IgroupRemove.
func (mr *MockOntapAPIMockRecorder) IgroupRemove(ctx, initiatorGroupName, initiator, force interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IgroupRemove", reflect.TypeOf((*MockOntapAPI)(nil).IgroupRemove), ctx, initiatorGroupName, initiator, force)
}

// IsSVMDRCapable mocks base method.
func (m *MockOntapAPI) IsSVMDRCapable(ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSVMDRCapable", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsSVMDRCapable indicates an expected call of IsSVMDRCapable.
func (mr *MockOntapAPIMockRecorder) IsSVMDRCapable(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSVMDRCapable", reflect.TypeOf((*MockOntapAPI)(nil).IsSVMDRCapable), ctx)
}

// IscsiInitiatorGetDefaultAuth mocks base method.
func (m *MockOntapAPI) IscsiInitiatorGetDefaultAuth(ctx context.Context) (api.IscsiInitiatorAuth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IscsiInitiatorGetDefaultAuth", ctx)
	ret0, _ := ret[0].(api.IscsiInitiatorAuth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IscsiInitiatorGetDefaultAuth indicates an expected call of IscsiInitiatorGetDefaultAuth.
func (mr *MockOntapAPIMockRecorder) IscsiInitiatorGetDefaultAuth(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IscsiInitiatorGetDefaultAuth", reflect.TypeOf((*MockOntapAPI)(nil).IscsiInitiatorGetDefaultAuth), ctx)
}

// IscsiInitiatorSetDefaultAuth mocks base method.
func (m *MockOntapAPI) IscsiInitiatorSetDefaultAuth(ctx context.Context, authType, userName, passphrase, outbountUserName, outboundPassphrase string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IscsiInitiatorSetDefaultAuth", ctx, authType, userName, passphrase, outbountUserName, outboundPassphrase)
	ret0, _ := ret[0].(error)
	return ret0
}

// IscsiInitiatorSetDefaultAuth indicates an expected call of IscsiInitiatorSetDefaultAuth.
func (mr *MockOntapAPIMockRecorder) IscsiInitiatorSetDefaultAuth(ctx, authType, userName, passphrase, outbountUserName, outboundPassphrase interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IscsiInitiatorSetDefaultAuth", reflect.TypeOf((*MockOntapAPI)(nil).IscsiInitiatorSetDefaultAuth), ctx, authType, userName, passphrase, outbountUserName, outboundPassphrase)
}

// IscsiInterfaceGet mocks base method.
func (m *MockOntapAPI) IscsiInterfaceGet(ctx context.Context, svm string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IscsiInterfaceGet", ctx, svm)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IscsiInterfaceGet indicates an expected call of IscsiInterfaceGet.
func (mr *MockOntapAPIMockRecorder) IscsiInterfaceGet(ctx, svm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IscsiInterfaceGet", reflect.TypeOf((*MockOntapAPI)(nil).IscsiInterfaceGet), ctx, svm)
}

// IscsiNodeGetNameRequest mocks base method.
func (m *MockOntapAPI) IscsiNodeGetNameRequest(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IscsiNodeGetNameRequest", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IscsiNodeGetNameRequest indicates an expected call of IscsiNodeGetNameRequest.
func (mr *MockOntapAPIMockRecorder) IscsiNodeGetNameRequest(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IscsiNodeGetNameRequest", reflect.TypeOf((*MockOntapAPI)(nil).IscsiNodeGetNameRequest), ctx)
}

// JobScheduleExists mocks base method.
func (m *MockOntapAPI) JobScheduleExists(ctx context.Context, replicationSchedule string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JobScheduleExists", ctx, replicationSchedule)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JobScheduleExists indicates an expected call of JobScheduleExists.
func (mr *MockOntapAPIMockRecorder) JobScheduleExists(ctx, replicationSchedule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JobScheduleExists", reflect.TypeOf((*MockOntapAPI)(nil).JobScheduleExists), ctx, replicationSchedule)
}

// LunCloneCreate mocks base method.
func (m *MockOntapAPI) LunCloneCreate(ctx context.Context, flexvol, source, lunName string, qosPolicyGroup api.QosPolicyGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunCloneCreate", ctx, flexvol, source, lunName, qosPolicyGroup)
	ret0, _ := ret[0].(error)
	return ret0
}

// LunCloneCreate indicates an expected call of LunCloneCreate.
func (mr *MockOntapAPIMockRecorder) LunCloneCreate(ctx, flexvol, source, lunName, qosPolicyGroup interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunCloneCreate", reflect.TypeOf((*MockOntapAPI)(nil).LunCloneCreate), ctx, flexvol, source, lunName, qosPolicyGroup)
}

// LunCreate mocks base method.
func (m *MockOntapAPI) LunCreate(ctx context.Context, lun api.Lun) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunCreate", ctx, lun)
	ret0, _ := ret[0].(error)
	return ret0
}

// LunCreate indicates an expected call of LunCreate.
func (mr *MockOntapAPIMockRecorder) LunCreate(ctx, lun interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunCreate", reflect.TypeOf((*MockOntapAPI)(nil).LunCreate), ctx, lun)
}

// LunDestroy mocks base method.
func (m *MockOntapAPI) LunDestroy(ctx context.Context, lunPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunDestroy", ctx, lunPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// LunDestroy indicates an expected call of LunDestroy.
func (mr *MockOntapAPIMockRecorder) LunDestroy(ctx, lunPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunDestroy", reflect.TypeOf((*MockOntapAPI)(nil).LunDestroy), ctx, lunPath)
}

// LunGetByName mocks base method.
func (m *MockOntapAPI) LunGetByName(ctx context.Context, name string) (*api.Lun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunGetByName", ctx, name)
	ret0, _ := ret[0].(*api.Lun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunGetByName indicates an expected call of LunGetByName.
func (mr *MockOntapAPIMockRecorder) LunGetByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunGetByName", reflect.TypeOf((*MockOntapAPI)(nil).LunGetByName), ctx, name)
}

// LunGetComment mocks base method.
func (m *MockOntapAPI) LunGetComment(ctx context.Context, lunPath string) (string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunGetComment", ctx, lunPath)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LunGetComment indicates an expected call of LunGetComment.
func (mr *MockOntapAPIMockRecorder) LunGetComment(ctx, lunPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunGetComment", reflect.TypeOf((*MockOntapAPI)(nil).LunGetComment), ctx, lunPath)
}

// LunGetGeometry mocks base method.
func (m *MockOntapAPI) LunGetGeometry(ctx context.Context, lunPath string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunGetGeometry", ctx, lunPath)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunGetGeometry indicates an expected call of LunGetGeometry.
func (mr *MockOntapAPIMockRecorder) LunGetGeometry(ctx, lunPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunGetGeometry", reflect.TypeOf((*MockOntapAPI)(nil).LunGetGeometry), ctx, lunPath)
}

// LunList mocks base method.
func (m *MockOntapAPI) LunList(ctx context.Context, pattern string) (api.Luns, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunList", ctx, pattern)
	ret0, _ := ret[0].(api.Luns)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunList indicates an expected call of LunList.
func (mr *MockOntapAPIMockRecorder) LunList(ctx, pattern interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunList", reflect.TypeOf((*MockOntapAPI)(nil).LunList), ctx, pattern)
}

// LunListIgroupsMapped mocks base method.
func (m *MockOntapAPI) LunListIgroupsMapped(ctx context.Context, lunPath string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunListIgroupsMapped", ctx, lunPath)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunListIgroupsMapped indicates an expected call of LunListIgroupsMapped.
func (mr *MockOntapAPIMockRecorder) LunListIgroupsMapped(ctx, lunPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunListIgroupsMapped", reflect.TypeOf((*MockOntapAPI)(nil).LunListIgroupsMapped), ctx, lunPath)
}

// LunMapGetReportingNodes mocks base method.
func (m *MockOntapAPI) LunMapGetReportingNodes(ctx context.Context, initiatorGroupName, lunPath string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunMapGetReportingNodes", ctx, initiatorGroupName, lunPath)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunMapGetReportingNodes indicates an expected call of LunMapGetReportingNodes.
func (mr *MockOntapAPIMockRecorder) LunMapGetReportingNodes(ctx, initiatorGroupName, lunPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunMapGetReportingNodes", reflect.TypeOf((*MockOntapAPI)(nil).LunMapGetReportingNodes), ctx, initiatorGroupName, lunPath)
}

// LunMapInfo mocks base method.
func (m *MockOntapAPI) LunMapInfo(ctx context.Context, initiatorGroupName, lunPath string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunMapInfo", ctx, initiatorGroupName, lunPath)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunMapInfo indicates an expected call of LunMapInfo.
func (mr *MockOntapAPIMockRecorder) LunMapInfo(ctx, initiatorGroupName, lunPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunMapInfo", reflect.TypeOf((*MockOntapAPI)(nil).LunMapInfo), ctx, initiatorGroupName, lunPath)
}

// LunRename mocks base method.
func (m *MockOntapAPI) LunRename(ctx context.Context, lunPath, newLunPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunRename", ctx, lunPath, newLunPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// LunRename indicates an expected call of LunRename.
func (mr *MockOntapAPIMockRecorder) LunRename(ctx, lunPath, newLunPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunRename", reflect.TypeOf((*MockOntapAPI)(nil).LunRename), ctx, lunPath, newLunPath)
}

// LunSetAttribute mocks base method.
func (m *MockOntapAPI) LunSetAttribute(ctx context.Context, lunPath, attribute, fstype, context, luks string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunSetAttribute", ctx, lunPath, attribute, fstype, context, luks)
	ret0, _ := ret[0].(error)
	return ret0
}

// LunSetAttribute indicates an expected call of LunSetAttribute.
func (mr *MockOntapAPIMockRecorder) LunSetAttribute(ctx, lunPath, attribute, fstype, context, luks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunSetAttribute", reflect.TypeOf((*MockOntapAPI)(nil).LunSetAttribute), ctx, lunPath, attribute, fstype, context, luks)
}

// LunSetQosPolicyGroup mocks base method.
func (m *MockOntapAPI) LunSetQosPolicyGroup(ctx context.Context, lunPath string, qosPolicyGroup api.QosPolicyGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunSetQosPolicyGroup", ctx, lunPath, qosPolicyGroup)
	ret0, _ := ret[0].(error)
	return ret0
}

// LunSetQosPolicyGroup indicates an expected call of LunSetQosPolicyGroup.
func (mr *MockOntapAPIMockRecorder) LunSetQosPolicyGroup(ctx, lunPath, qosPolicyGroup interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunSetQosPolicyGroup", reflect.TypeOf((*MockOntapAPI)(nil).LunSetQosPolicyGroup), ctx, lunPath, qosPolicyGroup)
}

// LunSetSize mocks base method.
func (m *MockOntapAPI) LunSetSize(ctx context.Context, lunPath, newSize string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunSetSize", ctx, lunPath, newSize)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunSetSize indicates an expected call of LunSetSize.
func (mr *MockOntapAPIMockRecorder) LunSetSize(ctx, lunPath, newSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunSetSize", reflect.TypeOf((*MockOntapAPI)(nil).LunSetSize), ctx, lunPath, newSize)
}

// LunSize mocks base method.
func (m *MockOntapAPI) LunSize(ctx context.Context, lunPath string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunSize", ctx, lunPath)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LunSize indicates an expected call of LunSize.
func (mr *MockOntapAPIMockRecorder) LunSize(ctx, lunPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunSize", reflect.TypeOf((*MockOntapAPI)(nil).LunSize), ctx, lunPath)
}

// LunUnmap mocks base method.
func (m *MockOntapAPI) LunUnmap(ctx context.Context, initiatorGroupName, lunPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LunUnmap", ctx, initiatorGroupName, lunPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// LunUnmap indicates an expected call of LunUnmap.
func (mr *MockOntapAPIMockRecorder) LunUnmap(ctx, initiatorGroupName, lunPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LunUnmap", reflect.TypeOf((*MockOntapAPI)(nil).LunUnmap), ctx, initiatorGroupName, lunPath)
}

// NetInterfaceGetDataLIFs mocks base method.
func (m *MockOntapAPI) NetInterfaceGetDataLIFs(ctx context.Context, protocol string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetInterfaceGetDataLIFs", ctx, protocol)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetInterfaceGetDataLIFs indicates an expected call of NetInterfaceGetDataLIFs.
func (mr *MockOntapAPIMockRecorder) NetInterfaceGetDataLIFs(ctx, protocol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetInterfaceGetDataLIFs", reflect.TypeOf((*MockOntapAPI)(nil).NetInterfaceGetDataLIFs), ctx, protocol)
}

// NodeListSerialNumbers mocks base method.
func (m *MockOntapAPI) NodeListSerialNumbers(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeListSerialNumbers", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeListSerialNumbers indicates an expected call of NodeListSerialNumbers.
func (mr *MockOntapAPIMockRecorder) NodeListSerialNumbers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeListSerialNumbers", reflect.TypeOf((*MockOntapAPI)(nil).NodeListSerialNumbers), ctx)
}

// ParseLunComment mocks base method.
func (m *MockOntapAPI) ParseLunComment(ctx context.Context, commentJSON string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseLunComment", ctx, commentJSON)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseLunComment indicates an expected call of ParseLunComment.
func (mr *MockOntapAPIMockRecorder) ParseLunComment(ctx, commentJSON interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseLunComment", reflect.TypeOf((*MockOntapAPI)(nil).ParseLunComment), ctx, commentJSON)
}

// QtreeCount mocks base method.
func (m *MockOntapAPI) QtreeCount(ctx context.Context, volumeName string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QtreeCount", ctx, volumeName)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QtreeCount indicates an expected call of QtreeCount.
func (mr *MockOntapAPIMockRecorder) QtreeCount(ctx, volumeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QtreeCount", reflect.TypeOf((*MockOntapAPI)(nil).QtreeCount), ctx, volumeName)
}

// QtreeCreate mocks base method.
func (m *MockOntapAPI) QtreeCreate(ctx context.Context, name, volumeName, unixPermissions, exportPolicy, securityStyle, qosPolicy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QtreeCreate", ctx, name, volumeName, unixPermissions, exportPolicy, securityStyle, qosPolicy)
	ret0, _ := ret[0].(error)
	return ret0
}

// QtreeCreate indicates an expected call of QtreeCreate.
func (mr *MockOntapAPIMockRecorder) QtreeCreate(ctx, name, volumeName, unixPermissions, exportPolicy, securityStyle, qosPolicy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QtreeCreate", reflect.TypeOf((*MockOntapAPI)(nil).QtreeCreate), ctx, name, volumeName, unixPermissions, exportPolicy, securityStyle, qosPolicy)
}

// QtreeDestroyAsync mocks base method.
func (m *MockOntapAPI) QtreeDestroyAsync(ctx context.Context, path string, force bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QtreeDestroyAsync", ctx, path, force)
	ret0, _ := ret[0].(error)
	return ret0
}

// QtreeDestroyAsync indicates an expected call of QtreeDestroyAsync.
func (mr *MockOntapAPIMockRecorder) QtreeDestroyAsync(ctx, path, force interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QtreeDestroyAsync", reflect.TypeOf((*MockOntapAPI)(nil).QtreeDestroyAsync), ctx, path, force)
}

// QtreeExists mocks base method.
func (m *MockOntapAPI) QtreeExists(ctx context.Context, name, volumePattern string) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QtreeExists", ctx, name, volumePattern)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// QtreeExists indicates an expected call of QtreeExists.
func (mr *MockOntapAPIMockRecorder) QtreeExists(ctx, name, volumePattern interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QtreeExists", reflect.TypeOf((*MockOntapAPI)(nil).QtreeExists), ctx, name, volumePattern)
}

// QtreeGetByName mocks base method.
func (m *MockOntapAPI) QtreeGetByName(ctx context.Context, name, volumePrefix string) (*api.Qtree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QtreeGetByName", ctx, name, volumePrefix)
	ret0, _ := ret[0].(*api.Qtree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QtreeGetByName indicates an expected call of QtreeGetByName.
func (mr *MockOntapAPIMockRecorder) QtreeGetByName(ctx, name, volumePrefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QtreeGetByName", reflect.TypeOf((*MockOntapAPI)(nil).QtreeGetByName), ctx, name, volumePrefix)
}

// QtreeListByPrefix mocks base method.
func (m *MockOntapAPI) QtreeListByPrefix(ctx context.Context, prefix, volumePrefix string) (api.Qtrees, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QtreeListByPrefix", ctx, prefix, volumePrefix)
	ret0, _ := ret[0].(api.Qtrees)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QtreeListByPrefix indicates an expected call of QtreeListByPrefix.
func (mr *MockOntapAPIMockRecorder) QtreeListByPrefix(ctx, prefix, volumePrefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QtreeListByPrefix", reflect.TypeOf((*MockOntapAPI)(nil).QtreeListByPrefix), ctx, prefix, volumePrefix)
}

// QtreeModifyExportPolicy mocks base method.
func (m *MockOntapAPI) QtreeModifyExportPolicy(ctx context.Context, name, volumeName, newExportPolicyName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QtreeModifyExportPolicy", ctx, name, volumeName, newExportPolicyName)
	ret0, _ := ret[0].(error)
	return ret0
}

// QtreeModifyExportPolicy indicates an expected call of QtreeModifyExportPolicy.
func (mr *MockOntapAPIMockRecorder) QtreeModifyExportPolicy(ctx, name, volumeName, newExportPolicyName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QtreeModifyExportPolicy", reflect.TypeOf((*MockOntapAPI)(nil).QtreeModifyExportPolicy), ctx, name, volumeName, newExportPolicyName)
}

// QtreeRename mocks base method.
func (m *MockOntapAPI) QtreeRename(ctx context.Context, path, newPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QtreeRename", ctx, path, newPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// QtreeRename indicates an expected call of QtreeRename.
func (mr *MockOntapAPIMockRecorder) QtreeRename(ctx, path, newPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QtreeRename", reflect.TypeOf((*MockOntapAPI)(nil).QtreeRename), ctx, path, newPath)
}

// QuotaEntryList mocks base method.
func (m *MockOntapAPI) QuotaEntryList(ctx context.Context, volumeName string) (api.QuotaEntries, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuotaEntryList", ctx, volumeName)
	ret0, _ := ret[0].(api.QuotaEntries)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuotaEntryList indicates an expected call of QuotaEntryList.
func (mr *MockOntapAPIMockRecorder) QuotaEntryList(ctx, volumeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuotaEntryList", reflect.TypeOf((*MockOntapAPI)(nil).QuotaEntryList), ctx, volumeName)
}

// QuotaGetEntry mocks base method.
func (m *MockOntapAPI) QuotaGetEntry(ctx context.Context, volumeName, qtreeName, quotaType string) (*api.QuotaEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuotaGetEntry", ctx, volumeName, qtreeName, quotaType)
	ret0, _ := ret[0].(*api.QuotaEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuotaGetEntry indicates an expected call of QuotaGetEntry.
func (mr *MockOntapAPIMockRecorder) QuotaGetEntry(ctx, volumeName, qtreeName, quotaType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuotaGetEntry", reflect.TypeOf((*MockOntapAPI)(nil).QuotaGetEntry), ctx, volumeName, qtreeName, quotaType)
}

// QuotaOff mocks base method.
func (m *MockOntapAPI) QuotaOff(ctx context.Context, volumeName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuotaOff", ctx, volumeName)
	ret0, _ := ret[0].(error)
	return ret0
}

// QuotaOff indicates an expected call of QuotaOff.
func (mr *MockOntapAPIMockRecorder) QuotaOff(ctx, volumeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuotaOff", reflect.TypeOf((*MockOntapAPI)(nil).QuotaOff), ctx, volumeName)
}

// QuotaOn mocks base method.
func (m *MockOntapAPI) QuotaOn(ctx context.Context, volumeName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuotaOn", ctx, volumeName)
	ret0, _ := ret[0].(error)
	return ret0
}

// QuotaOn indicates an expected call of QuotaOn.
func (mr *MockOntapAPIMockRecorder) QuotaOn(ctx, volumeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuotaOn", reflect.TypeOf((*MockOntapAPI)(nil).QuotaOn), ctx, volumeName)
}

// QuotaResize mocks base method.
func (m *MockOntapAPI) QuotaResize(ctx context.Context, volumeName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuotaResize", ctx, volumeName)
	ret0, _ := ret[0].(error)
	return ret0
}

// QuotaResize indicates an expected call of QuotaResize.
func (mr *MockOntapAPIMockRecorder) QuotaResize(ctx, volumeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuotaResize", reflect.TypeOf((*MockOntapAPI)(nil).QuotaResize), ctx, volumeName)
}

// QuotaSetEntry mocks base method.
func (m *MockOntapAPI) QuotaSetEntry(ctx context.Context, qtreeName, volumeName, quotaType, diskLimit string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuotaSetEntry", ctx, qtreeName, volumeName, quotaType, diskLimit)
	ret0, _ := ret[0].(error)
	return ret0
}

// QuotaSetEntry indicates an expected call of QuotaSetEntry.
func (mr *MockOntapAPIMockRecorder) QuotaSetEntry(ctx, qtreeName, volumeName, quotaType, diskLimit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuotaSetEntry", reflect.TypeOf((*MockOntapAPI)(nil).QuotaSetEntry), ctx, qtreeName, volumeName, quotaType, diskLimit)
}

// QuotaStatus mocks base method.
func (m *MockOntapAPI) QuotaStatus(ctx context.Context, volumeName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuotaStatus", ctx, volumeName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuotaStatus indicates an expected call of QuotaStatus.
func (mr *MockOntapAPIMockRecorder) QuotaStatus(ctx, volumeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuotaStatus", reflect.TypeOf((*MockOntapAPI)(nil).QuotaStatus), ctx, volumeName)
}

// SVMName mocks base method.
func (m *MockOntapAPI) SVMName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SVMName")
	ret0, _ := ret[0].(string)
	return ret0
}

// SVMName indicates an expected call of SVMName.
func (mr *MockOntapAPIMockRecorder) SVMName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SVMName", reflect.TypeOf((*MockOntapAPI)(nil).SVMName))
}

// SnapmirrorAbort mocks base method.
func (m *MockOntapAPI) SnapmirrorAbort(ctx context.Context, localFlexvolName, localSVMName, remoteFlexvolName, remoteSVMName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapmirrorAbort", ctx, localFlexvolName, localSVMName, remoteFlexvolName, remoteSVMName)
	ret0, _ := ret[0].(error)
	return ret0
}

// SnapmirrorAbort indicates an expected call of SnapmirrorAbort.
func (mr *MockOntapAPIMockRecorder) SnapmirrorAbort(ctx, localFlexvolName, localSVMName, remoteFlexvolName, remoteSVMName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapmirrorAbort", reflect.TypeOf((*MockOntapAPI)(nil).SnapmirrorAbort), ctx, localFlexvolName, localSVMName, remoteFlexvolName, remoteSVMName)
}

// SnapmirrorBreak mocks base method.
func (m *MockOntapAPI) SnapmirrorBreak(ctx context.Context, localFlexvolName, localSVMName, remoteFlexvolName, remoteSVMName, snapshotName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapmirrorBreak", ctx, localFlexvolName, localSVMName, remoteFlexvolName, remoteSVMName, snapshotName)
	ret0, _ := ret[0].(error)
	return ret0
}

// SnapmirrorBreak indicates an expected call of SnapmirrorBreak.
func (mr *MockOntapAPIMockRecorder) SnapmirrorBreak(ctx, localFlexvolName, localSVMName, remoteFlexvolName, remoteSVMName, snapshotName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapmirrorBreak", reflect.TypeOf((*MockOntapAPI)(nil).SnapmirrorBreak), ctx, localFlexvolName, localSVMName, remoteFlexvolName, remoteSVMName, snapshotName)
}

// SnapmirrorCreate mocks base method.
func (m *MockOntapAPI) SnapmirrorCreate(ctx context.Context, localFlexvolName, localSVMName, remoteFlexvolName, remoteSVMName, replicationPolicy, replicationSchedule string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapmirrorCreate", ctx, localFlexvolName, localSVMName, remoteFlexvolName, remoteSVMName, replicationPolicy, replicationSchedule)
	ret0, _ := ret[0].(error)
	return ret0
}

// SnapmirrorCreate indicates an expected call of SnapmirrorCreate.
func (mr *MockOntapAPIMockRecorder) SnapmirrorCreate(ctx, localFlexvolName, localSVMName, remoteFlexvolName, remoteSVMName, replicationPolicy, replicationSchedule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapmirrorCreate", reflect.TypeOf((*MockOntapAPI)(nil).SnapmirrorCreate), ctx, localFlexvolName, localSVMName, remoteFlexvolName, remoteSVMName, replicationPolicy, replicationSchedule)
}

// SnapmirrorDelete mocks base method.
func (m *MockOntapAPI) SnapmirrorDelete(ctx context.Context, localFlexvolName, localSVMName, remoteFlexvolName, remoteSVMName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapmirrorDelete", ctx, localFlexvolName, localSVMName, remoteFlexvolName, remoteSVMName)
	ret0, _ := ret[0].(error)
	return ret0
}

// SnapmirrorDelete indicates an expected call of SnapmirrorDelete.
func (mr *MockOntapAPIMockRecorder) SnapmirrorDelete(ctx, localFlexvolName, localSVMName, remoteFlexvolName, remoteSVMName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapmirrorDelete", reflect.TypeOf((*MockOntapAPI)(nil).SnapmirrorDelete), ctx, localFlexvolName, localSVMName, remoteFlexvolName, remoteSVMName)
}

// SnapmirrorDeleteViaDestination mocks base method.
func (m *MockOntapAPI) SnapmirrorDeleteViaDestination(ctx context.Context, localFlexvolName, localSVMName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapmirrorDeleteViaDestination", ctx, localFlexvolName, localSVMName)
	ret0, _ := ret[0].(error)
	return ret0
}

// SnapmirrorDeleteViaDestination indicates an expected call of SnapmirrorDeleteViaDestination.
func (mr *MockOntapAPIMockRecorder) SnapmirrorDeleteViaDestination(ctx, localFlexvolName, localSVMName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapmirrorDeleteViaDestination", reflect.TypeOf((*MockOntapAPI)(nil).SnapmirrorDeleteViaDestination), ctx, localFlexvolName, localSVMName)
}

// SnapmirrorGet mocks base method.
func (m *MockOntapAPI) SnapmirrorGet(ctx context.Context, localFlexvolName, localSVMName, remoteFlexvolName, remoteSVMName string) (*api.Snapmirror, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapmirrorGet", ctx, localFlexvolName, localSVMName, remoteFlexvolName, remoteSVMName)
	ret0, _ := ret[0].(*api.Snapmirror)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapmirrorGet indicates an expected call of SnapmirrorGet.
func (mr *MockOntapAPIMockRecorder) SnapmirrorGet(ctx, localFlexvolName, localSVMName, remoteFlexvolName, remoteSVMName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapmirrorGet", reflect.TypeOf((*MockOntapAPI)(nil).SnapmirrorGet), ctx, localFlexvolName, localSVMName, remoteFlexvolName, remoteSVMName)
}

// SnapmirrorInitialize mocks base method.
func (m *MockOntapAPI) SnapmirrorInitialize(ctx context.Context, localFlexvolName, localSVMName, remoteFlexvolName, remoteSVMName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapmirrorInitialize", ctx, localFlexvolName, localSVMName, remoteFlexvolName, remoteSVMName)
	ret0, _ := ret[0].(error)
	return ret0
}

// SnapmirrorInitialize indicates an expected call of SnapmirrorInitialize.
func (mr *MockOntapAPIMockRecorder) SnapmirrorInitialize(ctx, localFlexvolName, localSVMName, remoteFlexvolName, remoteSVMName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapmirrorInitialize", reflect.TypeOf((*MockOntapAPI)(nil).SnapmirrorInitialize), ctx, localFlexvolName, localSVMName, remoteFlexvolName, remoteSVMName)
}

// SnapmirrorPolicyGet mocks base method.
func (m *MockOntapAPI) SnapmirrorPolicyGet(ctx context.Context, replicationPolicy string) (*api.SnapmirrorPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapmirrorPolicyGet", ctx, replicationPolicy)
	ret0, _ := ret[0].(*api.SnapmirrorPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapmirrorPolicyGet indicates an expected call of SnapmirrorPolicyGet.
func (mr *MockOntapAPIMockRecorder) SnapmirrorPolicyGet(ctx, replicationPolicy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapmirrorPolicyGet", reflect.TypeOf((*MockOntapAPI)(nil).SnapmirrorPolicyGet), ctx, replicationPolicy)
}

// SnapmirrorQuiesce mocks base method.
func (m *MockOntapAPI) SnapmirrorQuiesce(ctx context.Context, localFlexvolName, localSVMName, remoteFlexvolName, remoteSVMName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapmirrorQuiesce", ctx, localFlexvolName, localSVMName, remoteFlexvolName, remoteSVMName)
	ret0, _ := ret[0].(error)
	return ret0
}

// SnapmirrorQuiesce indicates an expected call of SnapmirrorQuiesce.
func (mr *MockOntapAPIMockRecorder) SnapmirrorQuiesce(ctx, localFlexvolName, localSVMName, remoteFlexvolName, remoteSVMName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapmirrorQuiesce", reflect.TypeOf((*MockOntapAPI)(nil).SnapmirrorQuiesce), ctx, localFlexvolName, localSVMName, remoteFlexvolName, remoteSVMName)
}

// SnapmirrorRelease mocks base method.
func (m *MockOntapAPI) SnapmirrorRelease(ctx context.Context, localFlexvolName, localSVMName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapmirrorRelease", ctx, localFlexvolName, localSVMName)
	ret0, _ := ret[0].(error)
	return ret0
}

// SnapmirrorRelease indicates an expected call of SnapmirrorRelease.
func (mr *MockOntapAPIMockRecorder) SnapmirrorRelease(ctx, localFlexvolName, localSVMName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapmirrorRelease", reflect.TypeOf((*MockOntapAPI)(nil).SnapmirrorRelease), ctx, localFlexvolName, localSVMName)
}

// SnapmirrorResync mocks base method.
func (m *MockOntapAPI) SnapmirrorResync(ctx context.Context, localFlexvolName, localSVMName, remoteFlexvolName, remoteSVMName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapmirrorResync", ctx, localFlexvolName, localSVMName, remoteFlexvolName, remoteSVMName)
	ret0, _ := ret[0].(error)
	return ret0
}

// SnapmirrorResync indicates an expected call of SnapmirrorResync.
func (mr *MockOntapAPIMockRecorder) SnapmirrorResync(ctx, localFlexvolName, localSVMName, remoteFlexvolName, remoteSVMName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapmirrorResync", reflect.TypeOf((*MockOntapAPI)(nil).SnapmirrorResync), ctx, localFlexvolName, localSVMName, remoteFlexvolName, remoteSVMName)
}

// SnapshotRestoreFlexgroup mocks base method.
func (m *MockOntapAPI) SnapshotRestoreFlexgroup(ctx context.Context, snapshotName, sourceVolume string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotRestoreFlexgroup", ctx, snapshotName, sourceVolume)
	ret0, _ := ret[0].(error)
	return ret0
}

// SnapshotRestoreFlexgroup indicates an expected call of SnapshotRestoreFlexgroup.
func (mr *MockOntapAPIMockRecorder) SnapshotRestoreFlexgroup(ctx, snapshotName, sourceVolume interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotRestoreFlexgroup", reflect.TypeOf((*MockOntapAPI)(nil).SnapshotRestoreFlexgroup), ctx, snapshotName, sourceVolume)
}

// SnapshotRestoreVolume mocks base method.
func (m *MockOntapAPI) SnapshotRestoreVolume(ctx context.Context, snapshotName, sourceVolume string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotRestoreVolume", ctx, snapshotName, sourceVolume)
	ret0, _ := ret[0].(error)
	return ret0
}

// SnapshotRestoreVolume indicates an expected call of SnapshotRestoreVolume.
func (mr *MockOntapAPIMockRecorder) SnapshotRestoreVolume(ctx, snapshotName, sourceVolume interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotRestoreVolume", reflect.TypeOf((*MockOntapAPI)(nil).SnapshotRestoreVolume), ctx, snapshotName, sourceVolume)
}

// SupportsFeature mocks base method.
func (m *MockOntapAPI) SupportsFeature(ctx context.Context, feature api.Feature) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportsFeature", ctx, feature)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SupportsFeature indicates an expected call of SupportsFeature.
func (mr *MockOntapAPIMockRecorder) SupportsFeature(ctx, feature interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportsFeature", reflect.TypeOf((*MockOntapAPI)(nil).SupportsFeature), ctx, feature)
}

// TieringPolicyValue mocks base method.
func (m *MockOntapAPI) TieringPolicyValue(ctx context.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TieringPolicyValue", ctx)
	ret0, _ := ret[0].(string)
	return ret0
}

// TieringPolicyValue indicates an expected call of TieringPolicyValue.
func (mr *MockOntapAPIMockRecorder) TieringPolicyValue(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TieringPolicyValue", reflect.TypeOf((*MockOntapAPI)(nil).TieringPolicyValue), ctx)
}

// ValidateAPIVersion mocks base method.
func (m *MockOntapAPI) ValidateAPIVersion(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateAPIVersion", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateAPIVersion indicates an expected call of ValidateAPIVersion.
func (mr *MockOntapAPIMockRecorder) ValidateAPIVersion(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAPIVersion", reflect.TypeOf((*MockOntapAPI)(nil).ValidateAPIVersion), ctx)
}

// VolumeCloneCreate mocks base method.
func (m *MockOntapAPI) VolumeCloneCreate(ctx context.Context, cloneName, sourceName, snapshot string, async bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeCloneCreate", ctx, cloneName, sourceName, snapshot, async)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeCloneCreate indicates an expected call of VolumeCloneCreate.
func (mr *MockOntapAPIMockRecorder) VolumeCloneCreate(ctx, cloneName, sourceName, snapshot, async interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeCloneCreate", reflect.TypeOf((*MockOntapAPI)(nil).VolumeCloneCreate), ctx, cloneName, sourceName, snapshot, async)
}

// VolumeCloneSplitStart mocks base method.
func (m *MockOntapAPI) VolumeCloneSplitStart(ctx context.Context, cloneName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeCloneSplitStart", ctx, cloneName)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeCloneSplitStart indicates an expected call of VolumeCloneSplitStart.
func (mr *MockOntapAPIMockRecorder) VolumeCloneSplitStart(ctx, cloneName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeCloneSplitStart", reflect.TypeOf((*MockOntapAPI)(nil).VolumeCloneSplitStart), ctx, cloneName)
}

// VolumeCreate mocks base method.
func (m *MockOntapAPI) VolumeCreate(ctx context.Context, volume api.Volume) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeCreate", ctx, volume)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeCreate indicates an expected call of VolumeCreate.
func (mr *MockOntapAPIMockRecorder) VolumeCreate(ctx, volume interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeCreate", reflect.TypeOf((*MockOntapAPI)(nil).VolumeCreate), ctx, volume)
}

// VolumeDestroy mocks base method.
func (m *MockOntapAPI) VolumeDestroy(ctx context.Context, volumeName string, force bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeDestroy", ctx, volumeName, force)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeDestroy indicates an expected call of VolumeDestroy.
func (mr *MockOntapAPIMockRecorder) VolumeDestroy(ctx, volumeName, force interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeDestroy", reflect.TypeOf((*MockOntapAPI)(nil).VolumeDestroy), ctx, volumeName, force)
}

// VolumeDisableSnapshotDirectoryAccess mocks base method.
func (m *MockOntapAPI) VolumeDisableSnapshotDirectoryAccess(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeDisableSnapshotDirectoryAccess", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeDisableSnapshotDirectoryAccess indicates an expected call of VolumeDisableSnapshotDirectoryAccess.
func (mr *MockOntapAPIMockRecorder) VolumeDisableSnapshotDirectoryAccess(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeDisableSnapshotDirectoryAccess", reflect.TypeOf((*MockOntapAPI)(nil).VolumeDisableSnapshotDirectoryAccess), ctx, name)
}

// VolumeExists mocks base method.
func (m *MockOntapAPI) VolumeExists(ctx context.Context, volumeName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeExists", ctx, volumeName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeExists indicates an expected call of VolumeExists.
func (mr *MockOntapAPIMockRecorder) VolumeExists(ctx, volumeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeExists", reflect.TypeOf((*MockOntapAPI)(nil).VolumeExists), ctx, volumeName)
}

// VolumeInfo mocks base method.
func (m *MockOntapAPI) VolumeInfo(ctx context.Context, volumeName string) (*api.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeInfo", ctx, volumeName)
	ret0, _ := ret[0].(*api.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeInfo indicates an expected call of VolumeInfo.
func (mr *MockOntapAPIMockRecorder) VolumeInfo(ctx, volumeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeInfo", reflect.TypeOf((*MockOntapAPI)(nil).VolumeInfo), ctx, volumeName)
}

// VolumeListByAttrs mocks base method.
func (m *MockOntapAPI) VolumeListByAttrs(ctx context.Context, volumeAttrs *api.Volume) (api.Volumes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeListByAttrs", ctx, volumeAttrs)
	ret0, _ := ret[0].(api.Volumes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeListByAttrs indicates an expected call of VolumeListByAttrs.
func (mr *MockOntapAPIMockRecorder) VolumeListByAttrs(ctx, volumeAttrs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeListByAttrs", reflect.TypeOf((*MockOntapAPI)(nil).VolumeListByAttrs), ctx, volumeAttrs)
}

// VolumeListByPrefix mocks base method.
func (m *MockOntapAPI) VolumeListByPrefix(ctx context.Context, prefix string) (api.Volumes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeListByPrefix", ctx, prefix)
	ret0, _ := ret[0].(api.Volumes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeListByPrefix indicates an expected call of VolumeListByPrefix.
func (mr *MockOntapAPIMockRecorder) VolumeListByPrefix(ctx, prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeListByPrefix", reflect.TypeOf((*MockOntapAPI)(nil).VolumeListByPrefix), ctx, prefix)
}

// VolumeListBySnapshotParent mocks base method.
func (m *MockOntapAPI) VolumeListBySnapshotParent(ctx context.Context, snapshotName, sourceVolume string) (api.VolumeNameList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeListBySnapshotParent", ctx, snapshotName, sourceVolume)
	ret0, _ := ret[0].(api.VolumeNameList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeListBySnapshotParent indicates an expected call of VolumeListBySnapshotParent.
func (mr *MockOntapAPIMockRecorder) VolumeListBySnapshotParent(ctx, snapshotName, sourceVolume interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeListBySnapshotParent", reflect.TypeOf((*MockOntapAPI)(nil).VolumeListBySnapshotParent), ctx, snapshotName, sourceVolume)
}

// VolumeModifyExportPolicy mocks base method.
func (m *MockOntapAPI) VolumeModifyExportPolicy(ctx context.Context, volumeName, policyName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeModifyExportPolicy", ctx, volumeName, policyName)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeModifyExportPolicy indicates an expected call of VolumeModifyExportPolicy.
func (mr *MockOntapAPIMockRecorder) VolumeModifyExportPolicy(ctx, volumeName, policyName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeModifyExportPolicy", reflect.TypeOf((*MockOntapAPI)(nil).VolumeModifyExportPolicy), ctx, volumeName, policyName)
}

// VolumeModifyUnixPermissions mocks base method.
func (m *MockOntapAPI) VolumeModifyUnixPermissions(ctx context.Context, volumeNameInternal, volumeNameExternal, unixPermissions string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeModifyUnixPermissions", ctx, volumeNameInternal, volumeNameExternal, unixPermissions)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeModifyUnixPermissions indicates an expected call of VolumeModifyUnixPermissions.
func (mr *MockOntapAPIMockRecorder) VolumeModifyUnixPermissions(ctx, volumeNameInternal, volumeNameExternal, unixPermissions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeModifyUnixPermissions", reflect.TypeOf((*MockOntapAPI)(nil).VolumeModifyUnixPermissions), ctx, volumeNameInternal, volumeNameExternal, unixPermissions)
}

// VolumeMount mocks base method.
func (m *MockOntapAPI) VolumeMount(ctx context.Context, name, junctionPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeMount", ctx, name, junctionPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeMount indicates an expected call of VolumeMount.
func (mr *MockOntapAPIMockRecorder) VolumeMount(ctx, name, junctionPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeMount", reflect.TypeOf((*MockOntapAPI)(nil).VolumeMount), ctx, name, junctionPath)
}

// VolumeRename mocks base method.
func (m *MockOntapAPI) VolumeRename(ctx context.Context, originalName, newName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeRename", ctx, originalName, newName)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeRename indicates an expected call of VolumeRename.
func (mr *MockOntapAPIMockRecorder) VolumeRename(ctx, originalName, newName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeRename", reflect.TypeOf((*MockOntapAPI)(nil).VolumeRename), ctx, originalName, newName)
}

// VolumeSetComment mocks base method.
func (m *MockOntapAPI) VolumeSetComment(ctx context.Context, volumeNameInternal, volumeNameExternal, comment string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeSetComment", ctx, volumeNameInternal, volumeNameExternal, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeSetComment indicates an expected call of VolumeSetComment.
func (mr *MockOntapAPIMockRecorder) VolumeSetComment(ctx, volumeNameInternal, volumeNameExternal, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeSetComment", reflect.TypeOf((*MockOntapAPI)(nil).VolumeSetComment), ctx, volumeNameInternal, volumeNameExternal, comment)
}

// VolumeSetQosPolicyGroupName mocks base method.
func (m *MockOntapAPI) VolumeSetQosPolicyGroupName(ctx context.Context, name string, qos api.QosPolicyGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeSetQosPolicyGroupName", ctx, name, qos)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeSetQosPolicyGroupName indicates an expected call of VolumeSetQosPolicyGroupName.
func (mr *MockOntapAPIMockRecorder) VolumeSetQosPolicyGroupName(ctx, name, qos interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeSetQosPolicyGroupName", reflect.TypeOf((*MockOntapAPI)(nil).VolumeSetQosPolicyGroupName), ctx, name, qos)
}

// VolumeSetSize mocks base method.
func (m *MockOntapAPI) VolumeSetSize(ctx context.Context, name, newSize string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeSetSize", ctx, name, newSize)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeSetSize indicates an expected call of VolumeSetSize.
func (mr *MockOntapAPIMockRecorder) VolumeSetSize(ctx, name, newSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeSetSize", reflect.TypeOf((*MockOntapAPI)(nil).VolumeSetSize), ctx, name, newSize)
}

// VolumeSize mocks base method.
func (m *MockOntapAPI) VolumeSize(ctx context.Context, volumeName string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeSize", ctx, volumeName)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeSize indicates an expected call of VolumeSize.
func (mr *MockOntapAPIMockRecorder) VolumeSize(ctx, volumeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeSize", reflect.TypeOf((*MockOntapAPI)(nil).VolumeSize), ctx, volumeName)
}

// VolumeSnapshotCreate mocks base method.
func (m *MockOntapAPI) VolumeSnapshotCreate(ctx context.Context, snapshotName, sourceVolume string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeSnapshotCreate", ctx, snapshotName, sourceVolume)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeSnapshotCreate indicates an expected call of VolumeSnapshotCreate.
func (mr *MockOntapAPIMockRecorder) VolumeSnapshotCreate(ctx, snapshotName, sourceVolume interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeSnapshotCreate", reflect.TypeOf((*MockOntapAPI)(nil).VolumeSnapshotCreate), ctx, snapshotName, sourceVolume)
}

// VolumeSnapshotDelete mocks base method.
func (m *MockOntapAPI) VolumeSnapshotDelete(ctx context.Context, snapshotName, sourceVolume string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeSnapshotDelete", ctx, snapshotName, sourceVolume)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeSnapshotDelete indicates an expected call of VolumeSnapshotDelete.
func (mr *MockOntapAPIMockRecorder) VolumeSnapshotDelete(ctx, snapshotName, sourceVolume interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeSnapshotDelete", reflect.TypeOf((*MockOntapAPI)(nil).VolumeSnapshotDelete), ctx, snapshotName, sourceVolume)
}

// VolumeSnapshotList mocks base method.
func (m *MockOntapAPI) VolumeSnapshotList(ctx context.Context, sourceVolume string) (api.Snapshots, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeSnapshotList", ctx, sourceVolume)
	ret0, _ := ret[0].(api.Snapshots)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeSnapshotList indicates an expected call of VolumeSnapshotList.
func (mr *MockOntapAPIMockRecorder) VolumeSnapshotList(ctx, sourceVolume interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeSnapshotList", reflect.TypeOf((*MockOntapAPI)(nil).VolumeSnapshotList), ctx, sourceVolume)
}

// VolumeUsedSize mocks base method.
func (m *MockOntapAPI) VolumeUsedSize(ctx context.Context, volumeName string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeUsedSize", ctx, volumeName)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeUsedSize indicates an expected call of VolumeUsedSize.
func (mr *MockOntapAPIMockRecorder) VolumeUsedSize(ctx, volumeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeUsedSize", reflect.TypeOf((*MockOntapAPI)(nil).VolumeUsedSize), ctx, volumeName)
}

// MockAggregateSpace is a mock of AggregateSpace interface.
type MockAggregateSpace struct {
	ctrl     *gomock.Controller
	recorder *MockAggregateSpaceMockRecorder
}

// MockAggregateSpaceMockRecorder is the mock recorder for MockAggregateSpace.
type MockAggregateSpaceMockRecorder struct {
	mock *MockAggregateSpace
}

// NewMockAggregateSpace creates a new mock instance.
func NewMockAggregateSpace(ctrl *gomock.Controller) *MockAggregateSpace {
	mock := &MockAggregateSpace{ctrl: ctrl}
	mock.recorder = &MockAggregateSpaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAggregateSpace) EXPECT() *MockAggregateSpaceMockRecorder {
	return m.recorder
}

// Footprint mocks base method.
func (m *MockAggregateSpace) Footprint() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Footprint")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Footprint indicates an expected call of Footprint.
func (mr *MockAggregateSpaceMockRecorder) Footprint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Footprint", reflect.TypeOf((*MockAggregateSpace)(nil).Footprint))
}

// Size mocks base method.
func (m *MockAggregateSpace) Size() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockAggregateSpaceMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockAggregateSpace)(nil).Size))
}

// Used mocks base method.
func (m *MockAggregateSpace) Used() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Used")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Used indicates an expected call of Used.
func (mr *MockAggregateSpaceMockRecorder) Used() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Used", reflect.TypeOf((*MockAggregateSpace)(nil).Used))
}

// MockResponse is a mock of Response interface.
type MockResponse struct {
	ctrl     *gomock.Controller
	recorder *MockResponseMockRecorder
}

// MockResponseMockRecorder is the mock recorder for MockResponse.
type MockResponseMockRecorder struct {
	mock *MockResponse
}

// NewMockResponse creates a new mock instance.
func NewMockResponse(ctrl *gomock.Controller) *MockResponse {
	mock := &MockResponse{ctrl: ctrl}
	mock.recorder = &MockResponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResponse) EXPECT() *MockResponseMockRecorder {
	return m.recorder
}

// APIName mocks base method.
func (m *MockResponse) APIName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIName")
	ret0, _ := ret[0].(string)
	return ret0
}

// APIName indicates an expected call of APIName.
func (mr *MockResponseMockRecorder) APIName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIName", reflect.TypeOf((*MockResponse)(nil).APIName))
}

// Client mocks base method.
func (m *MockResponse) Client() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(string)
	return ret0
}

// Client indicates an expected call of Client.
func (mr *MockResponseMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockResponse)(nil).Client))
}

// Errno mocks base method.
func (m *MockResponse) Errno() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Errno")
	ret0, _ := ret[0].(string)
	return ret0
}

// Errno indicates an expected call of Errno.
func (mr *MockResponseMockRecorder) Errno() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errno", reflect.TypeOf((*MockResponse)(nil).Errno))
}

// Name mocks base method.
func (m *MockResponse) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockResponseMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockResponse)(nil).Name))
}

// Reason mocks base method.
func (m *MockResponse) Reason() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reason")
	ret0, _ := ret[0].(string)
	return ret0
}

// Reason indicates an expected call of Reason.
func (mr *MockResponseMockRecorder) Reason() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reason", reflect.TypeOf((*MockResponse)(nil).Reason))
}

// Status mocks base method.
func (m *MockResponse) Status() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(string)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockResponseMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockResponse)(nil).Status))
}

// Version mocks base method.
func (m *MockResponse) Version() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(string)
	return ret0
}

// Version indicates an expected call of Version.
func (mr *MockResponseMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockResponse)(nil).Version))
}
