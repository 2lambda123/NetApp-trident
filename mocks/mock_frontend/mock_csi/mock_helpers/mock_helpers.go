// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/netapp/trident/frontend/csi/helpers (interfaces: HybridPlugin)

// Package mock_helpers is a generated GoMock package.
package mock_helpers

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	config "github.com/netapp/trident/config"
	helpers "github.com/netapp/trident/frontend/csi/helpers"
	storage "github.com/netapp/trident/storage"
)

// MockHybridPlugin is a mock of HybridPlugin interface.
type MockHybridPlugin struct {
	ctrl     *gomock.Controller
	recorder *MockHybridPluginMockRecorder
}

// MockHybridPluginMockRecorder is the mock recorder for MockHybridPlugin.
type MockHybridPluginMockRecorder struct {
	mock *MockHybridPlugin
}

// NewMockHybridPlugin creates a new mock instance.
func NewMockHybridPlugin(ctrl *gomock.Controller) *MockHybridPlugin {
	mock := &MockHybridPlugin{ctrl: ctrl}
	mock.recorder = &MockHybridPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHybridPlugin) EXPECT() *MockHybridPluginMockRecorder {
	return m.recorder
}

// GetNodeTopologyLabels mocks base method.
func (m *MockHybridPlugin) GetNodeTopologyLabels(arg0 context.Context, arg1 string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeTopologyLabels", arg0, arg1)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeTopologyLabels indicates an expected call of GetNodeTopologyLabels.
func (mr *MockHybridPluginMockRecorder) GetNodeTopologyLabels(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeTopologyLabels", reflect.TypeOf((*MockHybridPlugin)(nil).GetNodeTopologyLabels), arg0, arg1)
}

// GetSnapshotConfig mocks base method.
func (m *MockHybridPlugin) GetSnapshotConfig(arg0, arg1 string) (*storage.SnapshotConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotConfig", arg0, arg1)
	ret0, _ := ret[0].(*storage.SnapshotConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshotConfig indicates an expected call of GetSnapshotConfig.
func (mr *MockHybridPluginMockRecorder) GetSnapshotConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotConfig", reflect.TypeOf((*MockHybridPlugin)(nil).GetSnapshotConfig), arg0, arg1)
}

// GetVolumeConfig mocks base method.
func (m *MockHybridPlugin) GetVolumeConfig(arg0 context.Context, arg1 string, arg2 int64, arg3 map[string]string, arg4 config.Protocol, arg5 []config.AccessMode, arg6 config.VolumeMode, arg7 string, arg8, arg9, arg10 []map[string]string) (*storage.VolumeConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeConfig", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
	ret0, _ := ret[0].(*storage.VolumeConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeConfig indicates an expected call of GetVolumeConfig.
func (mr *MockHybridPluginMockRecorder) GetVolumeConfig(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeConfig", reflect.TypeOf((*MockHybridPlugin)(nil).GetVolumeConfig), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
}

// RecordNodeEvent mocks base method.
func (m *MockHybridPlugin) RecordNodeEvent(arg0 context.Context, arg1, arg2, arg3, arg4 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordNodeEvent", arg0, arg1, arg2, arg3, arg4)
}

// RecordNodeEvent indicates an expected call of RecordNodeEvent.
func (mr *MockHybridPluginMockRecorder) RecordNodeEvent(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordNodeEvent", reflect.TypeOf((*MockHybridPlugin)(nil).RecordNodeEvent), arg0, arg1, arg2, arg3, arg4)
}

// RecordVolumeEvent mocks base method.
func (m *MockHybridPlugin) RecordVolumeEvent(arg0 context.Context, arg1, arg2, arg3, arg4 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordVolumeEvent", arg0, arg1, arg2, arg3, arg4)
}

// RecordVolumeEvent indicates an expected call of RecordVolumeEvent.
func (mr *MockHybridPluginMockRecorder) RecordVolumeEvent(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordVolumeEvent", reflect.TypeOf((*MockHybridPlugin)(nil).RecordVolumeEvent), arg0, arg1, arg2, arg3, arg4)
}

// SupportsFeature mocks base method.
func (m *MockHybridPlugin) SupportsFeature(arg0 context.Context, arg1 helpers.Feature) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportsFeature", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SupportsFeature indicates an expected call of SupportsFeature.
func (mr *MockHybridPluginMockRecorder) SupportsFeature(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportsFeature", reflect.TypeOf((*MockHybridPlugin)(nil).SupportsFeature), arg0, arg1)
}

// Version mocks base method.
func (m *MockHybridPlugin) Version() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(string)
	return ret0
}

// Version indicates an expected call of Version.
func (mr *MockHybridPluginMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockHybridPlugin)(nil).Version))
}
