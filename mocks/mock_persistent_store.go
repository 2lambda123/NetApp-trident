// Copyright 2021 NetApp, Inc. All Rights Reserved.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/netapp/trident/v21/persistent_store (interfaces: Client)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	config "github.com/netapp/trident/v21/config"
	persistentstore "github.com/netapp/trident/v21/persistent_store"
	storage "github.com/netapp/trident/v21/storage"
	storageclass "github.com/netapp/trident/v21/storage_class"
	utils "github.com/netapp/trident/v21/utils"
)

// MockStoreClient is a mock of Client interface.
type MockStoreClient struct {
	ctrl     *gomock.Controller
	recorder *MockStoreClientMockRecorder
}

// MockStoreClientMockRecorder is the mock recorder for MockStoreClient.
type MockStoreClientMockRecorder struct {
	mock *MockStoreClient
}

// NewMockStoreClient creates a new mock instance.
func NewMockStoreClient(ctrl *gomock.Controller) *MockStoreClient {
	mock := &MockStoreClient{ctrl: ctrl}
	mock.recorder = &MockStoreClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoreClient) EXPECT() *MockStoreClientMockRecorder {
	return m.recorder
}

// AddBackend mocks base method.
func (m *MockStoreClient) AddBackend(arg0 context.Context, arg1 storage.Backend) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBackend", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBackend indicates an expected call of AddBackend.
func (mr *MockStoreClientMockRecorder) AddBackend(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBackend", reflect.TypeOf((*MockStoreClient)(nil).AddBackend), arg0, arg1)
}

// AddBackendPersistent mocks base method.
func (m *MockStoreClient) AddBackendPersistent(arg0 context.Context, arg1 *storage.BackendPersistent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBackendPersistent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBackendPersistent indicates an expected call of AddBackendPersistent.
func (mr *MockStoreClientMockRecorder) AddBackendPersistent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBackendPersistent", reflect.TypeOf((*MockStoreClient)(nil).AddBackendPersistent), arg0, arg1)
}

// AddOrUpdateNode mocks base method.
func (m *MockStoreClient) AddOrUpdateNode(arg0 context.Context, arg1 *utils.Node) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrUpdateNode", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrUpdateNode indicates an expected call of AddOrUpdateNode.
func (mr *MockStoreClientMockRecorder) AddOrUpdateNode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrUpdateNode", reflect.TypeOf((*MockStoreClient)(nil).AddOrUpdateNode), arg0, arg1)
}

// AddSnapshot mocks base method.
func (m *MockStoreClient) AddSnapshot(arg0 context.Context, arg1 *storage.Snapshot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSnapshot", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSnapshot indicates an expected call of AddSnapshot.
func (mr *MockStoreClientMockRecorder) AddSnapshot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSnapshot", reflect.TypeOf((*MockStoreClient)(nil).AddSnapshot), arg0, arg1)
}

// AddStorageClass mocks base method.
func (m *MockStoreClient) AddStorageClass(arg0 context.Context, arg1 *storageclass.StorageClass) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddStorageClass", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddStorageClass indicates an expected call of AddStorageClass.
func (mr *MockStoreClientMockRecorder) AddStorageClass(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStorageClass", reflect.TypeOf((*MockStoreClient)(nil).AddStorageClass), arg0, arg1)
}

// AddVolume mocks base method.
func (m *MockStoreClient) AddVolume(arg0 context.Context, arg1 *storage.Volume) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddVolume", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddVolume indicates an expected call of AddVolume.
func (mr *MockStoreClientMockRecorder) AddVolume(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVolume", reflect.TypeOf((*MockStoreClient)(nil).AddVolume), arg0, arg1)
}

// AddVolumePersistent mocks base method.
func (m *MockStoreClient) AddVolumePersistent(arg0 context.Context, arg1 *storage.VolumeExternal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddVolumePersistent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddVolumePersistent indicates an expected call of AddVolumePersistent.
func (mr *MockStoreClientMockRecorder) AddVolumePersistent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVolumePersistent", reflect.TypeOf((*MockStoreClient)(nil).AddVolumePersistent), arg0, arg1)
}

// AddVolumeTransaction mocks base method.
func (m *MockStoreClient) AddVolumeTransaction(arg0 context.Context, arg1 *storage.VolumeTransaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddVolumeTransaction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddVolumeTransaction indicates an expected call of AddVolumeTransaction.
func (mr *MockStoreClientMockRecorder) AddVolumeTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVolumeTransaction", reflect.TypeOf((*MockStoreClient)(nil).AddVolumeTransaction), arg0, arg1)
}

// DeleteBackend mocks base method.
func (m *MockStoreClient) DeleteBackend(arg0 context.Context, arg1 storage.Backend) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBackend", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBackend indicates an expected call of DeleteBackend.
func (mr *MockStoreClientMockRecorder) DeleteBackend(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackend", reflect.TypeOf((*MockStoreClient)(nil).DeleteBackend), arg0, arg1)
}

// DeleteBackends mocks base method.
func (m *MockStoreClient) DeleteBackends(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBackends", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBackends indicates an expected call of DeleteBackends.
func (mr *MockStoreClientMockRecorder) DeleteBackends(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackends", reflect.TypeOf((*MockStoreClient)(nil).DeleteBackends), arg0)
}

// DeleteNode mocks base method.
func (m *MockStoreClient) DeleteNode(arg0 context.Context, arg1 *utils.Node) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNode", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNode indicates an expected call of DeleteNode.
func (mr *MockStoreClientMockRecorder) DeleteNode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNode", reflect.TypeOf((*MockStoreClient)(nil).DeleteNode), arg0, arg1)
}

// DeleteSnapshot mocks base method.
func (m *MockStoreClient) DeleteSnapshot(arg0 context.Context, arg1 *storage.Snapshot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSnapshot", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSnapshot indicates an expected call of DeleteSnapshot.
func (mr *MockStoreClientMockRecorder) DeleteSnapshot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnapshot", reflect.TypeOf((*MockStoreClient)(nil).DeleteSnapshot), arg0, arg1)
}

// DeleteSnapshotIgnoreNotFound mocks base method.
func (m *MockStoreClient) DeleteSnapshotIgnoreNotFound(arg0 context.Context, arg1 *storage.Snapshot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSnapshotIgnoreNotFound", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSnapshotIgnoreNotFound indicates an expected call of DeleteSnapshotIgnoreNotFound.
func (mr *MockStoreClientMockRecorder) DeleteSnapshotIgnoreNotFound(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnapshotIgnoreNotFound", reflect.TypeOf((*MockStoreClient)(nil).DeleteSnapshotIgnoreNotFound), arg0, arg1)
}

// DeleteSnapshots mocks base method.
func (m *MockStoreClient) DeleteSnapshots(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSnapshots", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSnapshots indicates an expected call of DeleteSnapshots.
func (mr *MockStoreClientMockRecorder) DeleteSnapshots(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnapshots", reflect.TypeOf((*MockStoreClient)(nil).DeleteSnapshots), arg0)
}

// DeleteStorageClass mocks base method.
func (m *MockStoreClient) DeleteStorageClass(arg0 context.Context, arg1 *storageclass.StorageClass) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStorageClass", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStorageClass indicates an expected call of DeleteStorageClass.
func (mr *MockStoreClientMockRecorder) DeleteStorageClass(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStorageClass", reflect.TypeOf((*MockStoreClient)(nil).DeleteStorageClass), arg0, arg1)
}

// DeleteVolume mocks base method.
func (m *MockStoreClient) DeleteVolume(arg0 context.Context, arg1 *storage.Volume) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVolume", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVolume indicates an expected call of DeleteVolume.
func (mr *MockStoreClientMockRecorder) DeleteVolume(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolume", reflect.TypeOf((*MockStoreClient)(nil).DeleteVolume), arg0, arg1)
}

// DeleteVolumeIgnoreNotFound mocks base method.
func (m *MockStoreClient) DeleteVolumeIgnoreNotFound(arg0 context.Context, arg1 *storage.Volume) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVolumeIgnoreNotFound", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVolumeIgnoreNotFound indicates an expected call of DeleteVolumeIgnoreNotFound.
func (mr *MockStoreClientMockRecorder) DeleteVolumeIgnoreNotFound(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolumeIgnoreNotFound", reflect.TypeOf((*MockStoreClient)(nil).DeleteVolumeIgnoreNotFound), arg0, arg1)
}

// DeleteVolumeTransaction mocks base method.
func (m *MockStoreClient) DeleteVolumeTransaction(arg0 context.Context, arg1 *storage.VolumeTransaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVolumeTransaction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVolumeTransaction indicates an expected call of DeleteVolumeTransaction.
func (mr *MockStoreClientMockRecorder) DeleteVolumeTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolumeTransaction", reflect.TypeOf((*MockStoreClient)(nil).DeleteVolumeTransaction), arg0, arg1)
}

// DeleteVolumes mocks base method.
func (m *MockStoreClient) DeleteVolumes(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVolumes", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVolumes indicates an expected call of DeleteVolumes.
func (mr *MockStoreClientMockRecorder) DeleteVolumes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolumes", reflect.TypeOf((*MockStoreClient)(nil).DeleteVolumes), arg0)
}

// GetBackend mocks base method.
func (m *MockStoreClient) GetBackend(arg0 context.Context, arg1 string) (*storage.BackendPersistent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackend", arg0, arg1)
	ret0, _ := ret[0].(*storage.BackendPersistent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackend indicates an expected call of GetBackend.
func (mr *MockStoreClientMockRecorder) GetBackend(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackend", reflect.TypeOf((*MockStoreClient)(nil).GetBackend), arg0, arg1)
}

// GetBackendSecret mocks base method.
func (m *MockStoreClient) GetBackendSecret(arg0 context.Context, arg1 string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackendSecret", arg0, arg1)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackendSecret indicates an expected call of GetBackendSecret.
func (mr *MockStoreClientMockRecorder) GetBackendSecret(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackendSecret", reflect.TypeOf((*MockStoreClient)(nil).GetBackendSecret), arg0, arg1)
}

// GetBackends mocks base method.
func (m *MockStoreClient) GetBackends(arg0 context.Context) ([]*storage.BackendPersistent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackends", arg0)
	ret0, _ := ret[0].([]*storage.BackendPersistent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackends indicates an expected call of GetBackends.
func (mr *MockStoreClientMockRecorder) GetBackends(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackends", reflect.TypeOf((*MockStoreClient)(nil).GetBackends), arg0)
}

// GetConfig mocks base method.
func (m *MockStoreClient) GetConfig() *persistentstore.ClientConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig")
	ret0, _ := ret[0].(*persistentstore.ClientConfig)
	return ret0
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockStoreClientMockRecorder) GetConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockStoreClient)(nil).GetConfig))
}

// GetExistingVolumeTransaction mocks base method.
func (m *MockStoreClient) GetExistingVolumeTransaction(arg0 context.Context, arg1 *storage.VolumeTransaction) (*storage.VolumeTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExistingVolumeTransaction", arg0, arg1)
	ret0, _ := ret[0].(*storage.VolumeTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExistingVolumeTransaction indicates an expected call of GetExistingVolumeTransaction.
func (mr *MockStoreClientMockRecorder) GetExistingVolumeTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExistingVolumeTransaction", reflect.TypeOf((*MockStoreClient)(nil).GetExistingVolumeTransaction), arg0, arg1)
}

// GetNode mocks base method.
func (m *MockStoreClient) GetNode(arg0 context.Context, arg1 string) (*utils.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNode", arg0, arg1)
	ret0, _ := ret[0].(*utils.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNode indicates an expected call of GetNode.
func (mr *MockStoreClientMockRecorder) GetNode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNode", reflect.TypeOf((*MockStoreClient)(nil).GetNode), arg0, arg1)
}

// GetNodes mocks base method.
func (m *MockStoreClient) GetNodes(arg0 context.Context) ([]*utils.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodes", arg0)
	ret0, _ := ret[0].([]*utils.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodes indicates an expected call of GetNodes.
func (mr *MockStoreClientMockRecorder) GetNodes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodes", reflect.TypeOf((*MockStoreClient)(nil).GetNodes), arg0)
}

// GetSnapshot mocks base method.
func (m *MockStoreClient) GetSnapshot(arg0 context.Context, arg1, arg2 string) (*storage.SnapshotPersistent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshot", arg0, arg1, arg2)
	ret0, _ := ret[0].(*storage.SnapshotPersistent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshot indicates an expected call of GetSnapshot.
func (mr *MockStoreClientMockRecorder) GetSnapshot(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshot", reflect.TypeOf((*MockStoreClient)(nil).GetSnapshot), arg0, arg1, arg2)
}

// GetSnapshots mocks base method.
func (m *MockStoreClient) GetSnapshots(arg0 context.Context) ([]*storage.SnapshotPersistent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshots", arg0)
	ret0, _ := ret[0].([]*storage.SnapshotPersistent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshots indicates an expected call of GetSnapshots.
func (mr *MockStoreClientMockRecorder) GetSnapshots(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshots", reflect.TypeOf((*MockStoreClient)(nil).GetSnapshots), arg0)
}

// GetStorageClass mocks base method.
func (m *MockStoreClient) GetStorageClass(arg0 context.Context, arg1 string) (*storageclass.Persistent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageClass", arg0, arg1)
	ret0, _ := ret[0].(*storageclass.Persistent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageClass indicates an expected call of GetStorageClass.
func (mr *MockStoreClientMockRecorder) GetStorageClass(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageClass", reflect.TypeOf((*MockStoreClient)(nil).GetStorageClass), arg0, arg1)
}

// GetStorageClasses mocks base method.
func (m *MockStoreClient) GetStorageClasses(arg0 context.Context) ([]*storageclass.Persistent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageClasses", arg0)
	ret0, _ := ret[0].([]*storageclass.Persistent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageClasses indicates an expected call of GetStorageClasses.
func (mr *MockStoreClientMockRecorder) GetStorageClasses(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageClasses", reflect.TypeOf((*MockStoreClient)(nil).GetStorageClasses), arg0)
}

// GetType mocks base method.
func (m *MockStoreClient) GetType() persistentstore.StoreType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(persistentstore.StoreType)
	return ret0
}

// GetType indicates an expected call of GetType.
func (mr *MockStoreClientMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockStoreClient)(nil).GetType))
}

// GetVersion mocks base method.
func (m *MockStoreClient) GetVersion(arg0 context.Context) (*config.PersistentStateVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion", arg0)
	ret0, _ := ret[0].(*config.PersistentStateVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersion indicates an expected call of GetVersion.
func (mr *MockStoreClientMockRecorder) GetVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockStoreClient)(nil).GetVersion), arg0)
}

// GetVolume mocks base method.
func (m *MockStoreClient) GetVolume(arg0 context.Context, arg1 string) (*storage.VolumeExternal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolume", arg0, arg1)
	ret0, _ := ret[0].(*storage.VolumeExternal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolume indicates an expected call of GetVolume.
func (mr *MockStoreClientMockRecorder) GetVolume(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolume", reflect.TypeOf((*MockStoreClient)(nil).GetVolume), arg0, arg1)
}

// GetVolumeTransactions mocks base method.
func (m *MockStoreClient) GetVolumeTransactions(arg0 context.Context) ([]*storage.VolumeTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeTransactions", arg0)
	ret0, _ := ret[0].([]*storage.VolumeTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeTransactions indicates an expected call of GetVolumeTransactions.
func (mr *MockStoreClientMockRecorder) GetVolumeTransactions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeTransactions", reflect.TypeOf((*MockStoreClient)(nil).GetVolumeTransactions), arg0)
}

// GetVolumes mocks base method.
func (m *MockStoreClient) GetVolumes(arg0 context.Context) ([]*storage.VolumeExternal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumes", arg0)
	ret0, _ := ret[0].([]*storage.VolumeExternal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumes indicates an expected call of GetVolumes.
func (mr *MockStoreClientMockRecorder) GetVolumes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumes", reflect.TypeOf((*MockStoreClient)(nil).GetVolumes), arg0)
}

// IsBackendDeleting mocks base method.
func (m *MockStoreClient) IsBackendDeleting(arg0 context.Context, arg1 storage.Backend) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBackendDeleting", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsBackendDeleting indicates an expected call of IsBackendDeleting.
func (mr *MockStoreClientMockRecorder) IsBackendDeleting(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBackendDeleting", reflect.TypeOf((*MockStoreClient)(nil).IsBackendDeleting), arg0, arg1)
}

// ReplaceBackendAndUpdateVolumes mocks base method.
func (m *MockStoreClient) ReplaceBackendAndUpdateVolumes(arg0 context.Context, arg1, arg2 storage.Backend) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceBackendAndUpdateVolumes", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplaceBackendAndUpdateVolumes indicates an expected call of ReplaceBackendAndUpdateVolumes.
func (mr *MockStoreClientMockRecorder) ReplaceBackendAndUpdateVolumes(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceBackendAndUpdateVolumes", reflect.TypeOf((*MockStoreClient)(nil).ReplaceBackendAndUpdateVolumes), arg0, arg1, arg2)
}

// SetVersion mocks base method.
func (m *MockStoreClient) SetVersion(arg0 context.Context, arg1 *config.PersistentStateVersion) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVersion", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetVersion indicates an expected call of SetVersion.
func (mr *MockStoreClientMockRecorder) SetVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVersion", reflect.TypeOf((*MockStoreClient)(nil).SetVersion), arg0, arg1)
}

// Stop mocks base method.
func (m *MockStoreClient) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockStoreClientMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockStoreClient)(nil).Stop))
}

// UpdateBackend mocks base method.
func (m *MockStoreClient) UpdateBackend(arg0 context.Context, arg1 storage.Backend) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBackend", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBackend indicates an expected call of UpdateBackend.
func (mr *MockStoreClientMockRecorder) UpdateBackend(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBackend", reflect.TypeOf((*MockStoreClient)(nil).UpdateBackend), arg0, arg1)
}

// UpdateBackendPersistent mocks base method.
func (m *MockStoreClient) UpdateBackendPersistent(arg0 context.Context, arg1 *storage.BackendPersistent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBackendPersistent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBackendPersistent indicates an expected call of UpdateBackendPersistent.
func (mr *MockStoreClientMockRecorder) UpdateBackendPersistent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBackendPersistent", reflect.TypeOf((*MockStoreClient)(nil).UpdateBackendPersistent), arg0, arg1)
}

// UpdateSnapshot mocks base method.
func (m *MockStoreClient) UpdateSnapshot(arg0 context.Context, arg1 *storage.Snapshot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSnapshot", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSnapshot indicates an expected call of UpdateSnapshot.
func (mr *MockStoreClientMockRecorder) UpdateSnapshot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSnapshot", reflect.TypeOf((*MockStoreClient)(nil).UpdateSnapshot), arg0, arg1)
}

// UpdateVolume mocks base method.
func (m *MockStoreClient) UpdateVolume(arg0 context.Context, arg1 *storage.Volume) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVolume", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVolume indicates an expected call of UpdateVolume.
func (mr *MockStoreClientMockRecorder) UpdateVolume(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVolume", reflect.TypeOf((*MockStoreClient)(nil).UpdateVolume), arg0, arg1)
}

// UpdateVolumePersistent mocks base method.
func (m *MockStoreClient) UpdateVolumePersistent(arg0 context.Context, arg1 *storage.VolumeExternal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVolumePersistent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVolumePersistent indicates an expected call of UpdateVolumePersistent.
func (mr *MockStoreClientMockRecorder) UpdateVolumePersistent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVolumePersistent", reflect.TypeOf((*MockStoreClient)(nil).UpdateVolumePersistent), arg0, arg1)
}

// UpdateVolumeTransaction mocks base method.
func (m *MockStoreClient) UpdateVolumeTransaction(arg0 context.Context, arg1 *storage.VolumeTransaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVolumeTransaction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVolumeTransaction indicates an expected call of UpdateVolumeTransaction.
func (mr *MockStoreClientMockRecorder) UpdateVolumeTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVolumeTransaction", reflect.TypeOf((*MockStoreClient)(nil).UpdateVolumeTransaction), arg0, arg1)
}
